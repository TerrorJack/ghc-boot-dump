
==================== Raw Cmm ====================
2018-03-16 16:11:20.854443711 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:20.85730507 UTC

[section ""data" . Data.Semigroup.$w$csconcat1_closure" {
     Data.Semigroup.$w$csconcat1_closure:
         const Data.Semigroup.$w$csconcat1_info;
 },
 go_sfC7m_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJxI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfJxJ; else goto cfJxK;
       cfJxJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJxK: // global
           I64[Sp - 32] = block_cfJxB_info;
           _sfC7m::P64 = R1;
           _sfC7j::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfC7j::P64;
           P64[Sp - 16] = _sfC7m::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufJxU; else goto cfJxC;
       ufJxU: // global
           call _cfJxB(R1) args: 0, res: 0, upd: 0;
       cfJxC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfC7m_info" {
     go_sfC7m_info:
         const go_sfC7m_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfJxB() //  [R1]
         { []
         }
     {offset
       cfJxB: // global
           _sfC7n::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfJxF; else goto cfJxG;
       cfJxF: // global
           R1 = _sfC7n::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfJxG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfJxS; else goto cfJxR;
       cfJxS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJxR: // global
           _sfC7q::P64 = P64[R1 + 6];
           _sfC7r::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfC7q::P64;
           P64[Hp] = _sfC7r::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfC7n::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Classes.min_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJxB_info" {
     block_cfJxB_info:
         const _cfJxB;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJxV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfJxZ; else goto cfJxY;
       cfJxZ: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJxY: // global
           I64[Hp - 8] = go_sfC7m_info;
           P64[Hp] = R2;
           _sfC7k::P64 = R3;
           R3 = R4;
           R2 = _sfC7k::P64;
           R1 = Hp - 6;
           call go_sfC7m_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat1_info" {
     Data.Semigroup.$w$csconcat1_info:
         const Data.Semigroup.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.865170935 UTC

[section ""data" . Data.Semigroup.$fSemigroupMin_$csconcat_closure" {
     Data.Semigroup.$fSemigroupMin_$csconcat_closure:
         const Data.Semigroup.$fSemigroupMin_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupMin_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJyn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJyo; else goto cfJyp;
       cfJyo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMin_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJyp: // global
           I64[Sp - 16] = block_cfJyk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJyt; else goto cfJyl;
       ufJyt: // global
           call _cfJyk(R1) args: 0, res: 0, upd: 0;
       cfJyl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMin_$csconcat_info" {
     Data.Semigroup.$fSemigroupMin_$csconcat_info:
         const Data.Semigroup.$fSemigroupMin_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJyk() //  [R1]
         { []
         }
     {offset
       cfJyk: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJyk_info" {
     block_cfJyk_info:
         const _cfJyk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.870255156 UTC

[section ""data" . lvl_rfC66_closure" {
     lvl_rfC66_closure:
         const lvl_rfC66_info;
         const 0;
 },
 lvl_rfC66_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJyH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rfC66_info" {
     lvl_rfC66_info:
         const lvl_rfC66_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfCR7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.874561612 UTC

[section ""data" . Data.Semigroup.$fSemigroupMin_closure" {
     Data.Semigroup.$fSemigroupMin_closure:
         const Data.Semigroup.$fSemigroupMin_info;
         const 0;
 },
 sat_sfC7D_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJyX: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupMin_$csconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC7D_info" {
     sat_sfC7D_info:
         const sat_sfC7D_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC7C_entry() //  [R1]
         { []
         }
     {offset
       cfJz4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJz5; else goto cfJz6;
       cfJz5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfJz6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfC7C_info" {
     sat_sfC7C_info:
         const sat_sfC7C_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupMin_entry() //  [R2]
         { []
         }
     {offset
       cfJz8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfJzc; else goto cfJzb;
       cfJzc: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJzb: // global
           I64[Hp - 64] = sat_sfC7D_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfC7C_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = lvl_rfC66_closure+3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMin_info" {
     Data.Semigroup.$fSemigroupMin_info:
         const Data.Semigroup.$fSemigroupMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.883358993 UTC

[section ""data" . Data.Semigroup.$fFunctorMin2_closure" {
     Data.Semigroup.$fFunctorMin2_closure:
         const Data.Semigroup.$fFunctorMin2_info;
 },
 Data.Semigroup.$fFunctorMin2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJzv: // global
           _sfC7E::P64 = R2;
           R2 = R3;
           R1 = _sfC7E::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMin2_info" {
     Data.Semigroup.$fFunctorMin2_info:
         const Data.Semigroup.$fFunctorMin2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.887147153 UTC

[section ""data" . Data.Semigroup.$fFunctorMin1_closure" {
     Data.Semigroup.$fFunctorMin1_closure:
         const Data.Semigroup.$fFunctorMin1_info;
 },
 Data.Semigroup.$fFunctorMin1_entry() //  [R2]
         { []
         }
     {offset
       cfJzG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMin1_info" {
     Data.Semigroup.$fFunctorMin1_info:
         const Data.Semigroup.$fFunctorMin1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.890209192 UTC

[section ""data" . Data.Semigroup.$fFunctorMin_closure" {
     Data.Semigroup.$fFunctorMin_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorMin2_closure+2;
         const Data.Semigroup.$fFunctorMin1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.892272601 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfJzS: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldMap_info" {
     Data.Semigroup.$fFoldableMin_$cfoldMap_info:
         const Data.Semigroup.$fFoldableMin_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.895651433 UTC

[section ""data" . Data.Semigroup.$fFoldableMin4_closure" {
     Data.Semigroup.$fFoldableMin4_closure:
         const Data.Semigroup.$fFoldableMin4_info;
 },
 Data.Semigroup.$fFoldableMin4_entry() //  [R3]
         { []
         }
     {offset
       cfJA3: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin4_info" {
     Data.Semigroup.$fFoldableMin4_info:
         const Data.Semigroup.$fFoldableMin4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.898943158 UTC

[section ""data" . Data.Semigroup.$fFoldableMin1_closure" {
     Data.Semigroup.$fFoldableMin1_closure:
         const Data.Semigroup.$fFoldableMin1_info;
 },
 Data.Semigroup.$fFoldableMin1_entry() //  [R3]
         { []
         }
     {offset
       cfJAe: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin1_info" {
     Data.Semigroup.$fFoldableMin1_info:
         const Data.Semigroup.$fFoldableMin1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.902171379 UTC

[section ""data" . Data.Semigroup.$fFoldableMin2_closure" {
     Data.Semigroup.$fFoldableMin2_closure:
         const Data.Semigroup.$fFoldableMin2_info;
 },
 Data.Semigroup.$fFoldableMin2_entry() //  [R3]
         { []
         }
     {offset
       cfJAp: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin2_info" {
     Data.Semigroup.$fFoldableMin2_info:
         const Data.Semigroup.$fFoldableMin2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.906649842 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$celem_closure" {
     Data.Semigroup.$fFoldableMin_$celem_closure:
         const Data.Semigroup.$fFoldableMin_$celem_info;
 },
 f_sfC7T_entry() //  [R1]
         { []
         }
     {offset
       cfJAE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfJAF; else goto cfJAG;
       cfJAF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfJAG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfC7T_info" {
     f_sfC7T_info:
         const f_sfC7T_entry;
         const 2;
         const 18;
 },
 sat_sfC7V_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJAM: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC7V_info" {
     sat_sfC7V_info:
         const sat_sfC7V_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableMin_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJAP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfJAT; else goto cfJAS;
       cfJAT: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMin_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJAS: // global
           I64[Hp - 40] = f_sfC7T_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfC7V_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$celem_info" {
     Data.Semigroup.$fFoldableMin_$celem_info:
         const Data.Semigroup.$fFoldableMin_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.914973764 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldl_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldl_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJBc: // global
           _sfC7X::P64 = R3;
           R3 = R4;
           _sfC7W::P64 = R2;
           R2 = _sfC7X::P64;
           R1 = _sfC7W::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldl_info" {
     Data.Semigroup.$fFoldableMin_$cfoldl_info:
         const Data.Semigroup.$fFoldableMin_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.918388381 UTC

[section ""data" . Data.Semigroup.$fFoldableMin3_closure" {
     Data.Semigroup.$fFoldableMin3_closure:
         const Data.Semigroup.$fFoldableMin3_info;
 },
 Data.Semigroup.$fFoldableMin3_entry() //  [R3]
         { []
         }
     {offset
       cfJBn: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin3_info" {
     Data.Semigroup.$fFoldableMin3_info:
         const Data.Semigroup.$fFoldableMin3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.92188582 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJBy: // global
           R3 = R3;
           _sfC81::P64 = R2;
           R2 = R4;
           R1 = _sfC81::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldr'_info" {
     Data.Semigroup.$fFoldableMin_$cfoldr'_info:
         const Data.Semigroup.$fFoldableMin_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.925014289 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst3_closure" {
     Data.Semigroup.$fFoldableFirst3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.927024202 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$clength_closure" {
     Data.Semigroup.$fFoldableMin_$clength_closure:
         const Data.Semigroup.$fFoldableMin_$clength_info;
 },
 Data.Semigroup.$fFoldableMin_$clength_entry() //  []
         { []
         }
     {offset
       cfJBK: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$clength_info" {
     Data.Semigroup.$fFoldableMin_$clength_info:
         const Data.Semigroup.$fFoldableMin_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.930396023 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cnull_closure" {
     Data.Semigroup.$fFoldableMin_$cnull_closure:
         const Data.Semigroup.$fFoldableMin_$cnull_info;
 },
 Data.Semigroup.$fFoldableMin_$cnull_entry() //  []
         { []
         }
     {offset
       cfJBW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cnull_info" {
     Data.Semigroup.$fFoldableMin_$cnull_info:
         const Data.Semigroup.$fFoldableMin_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.93390736 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$ctoList_closure" {
     Data.Semigroup.$fFoldableMin_$ctoList_closure:
         const Data.Semigroup.$fFoldableMin_$ctoList_info;
 },
 Data.Semigroup.$fFoldableMin_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfJC9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJCd; else goto cfJCc;
       cfJCd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMin_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJCc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$ctoList_info" {
     Data.Semigroup.$fFoldableMin_$ctoList_info:
         const Data.Semigroup.$fFoldableMin_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.937382861 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_closure" {
     Data.Semigroup.$fFoldableMin_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableMin4_closure+2;
         const Data.Semigroup.$fFoldableMin_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMin3_closure+2;
         const Data.Semigroup.$fFoldableMin3_closure+2;
         const Data.Semigroup.$fFoldableMin_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableMin_$cnull_closure+1;
         const Data.Semigroup.$fFoldableMin_$clength_closure+1;
         const Data.Semigroup.$fFoldableMin_$celem_closure+2;
         const Data.Semigroup.$fFoldableMin2_closure+2;
         const Data.Semigroup.$fFoldableMin2_closure+2;
         const Data.Semigroup.$fFoldableMin1_closure+2;
         const Data.Semigroup.$fFoldableMin1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.940645327 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst3_closure" {
     Data.Semigroup.$fApplicativeFirst3_closure:
         const Data.Semigroup.$fApplicativeFirst3_info;
 },
 Data.Semigroup.$fApplicativeFirst3_entry() //  [R2]
         { []
         }
     {offset
       cfJCo: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst3_info" {
     Data.Semigroup.$fApplicativeFirst3_info:
         const Data.Semigroup.$fApplicativeFirst3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.945185704 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$ctraverse_closure" {
     Data.Semigroup.$fTraversableMin_$ctraverse_closure:
         const Data.Semigroup.$fTraversableMin_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableMin_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJCC: // global
           _sfC8a::P64 = R4;
           _sfC89::P64 = R3;
           _sfC88::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfJCD; else goto cfJCE;
       cfJCE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfJCG; else goto cfJCF;
       cfJCG: // global
           HpAlloc = 32;
           goto cfJCD;
       cfJCD: // global
           R4 = _sfC8a::P64;
           R3 = _sfC89::P64;
           R2 = _sfC88::P64;
           R1 = Data.Semigroup.$fTraversableMin_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJCF: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfC89::P64;
           P64[Hp] = _sfC8a::P64;
           I64[Sp - 16] = block_cfJCA_info;
           R2 = _sfC88::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$ctraverse_info" {
     Data.Semigroup.$fTraversableMin_$ctraverse_info:
         const Data.Semigroup.$fTraversableMin_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJCA() //  [R1]
         { []
         }
     {offset
       cfJCA: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJCA_info" {
     block_cfJCA_info:
         const _cfJCA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.950796204 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$csequenceA_closure" {
     Data.Semigroup.$fTraversableMin_$csequenceA_closure:
         const Data.Semigroup.$fTraversableMin_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableMin_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJCZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJD0; else goto cfJD1;
       cfJD0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMin_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJD1: // global
           I64[Sp - 16] = block_cfJCX_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$csequenceA_info" {
     Data.Semigroup.$fTraversableMin_$csequenceA_info:
         const Data.Semigroup.$fTraversableMin_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJCX() //  [R1]
         { []
         }
     {offset
       cfJCX: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJCX_info" {
     block_cfJCX_info:
         const _cfJCX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.956327257 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$cmapM_closure" {
     Data.Semigroup.$fTraversableMin_$cmapM_closure:
         const Data.Semigroup.$fTraversableMin_$cmapM_info;
 },
 Data.Semigroup.$fTraversableMin_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJDk: // global
           _sfC8i::P64 = R4;
           _sfC8h::P64 = R3;
           _sfC8g::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfJDo; else goto cfJDp;
       cfJDp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfJDr; else goto cfJDq;
       cfJDr: // global
           HpAlloc = 32;
           goto cfJDo;
       cfJDo: // global
           R4 = _sfC8i::P64;
           R3 = _sfC8h::P64;
           R2 = _sfC8g::P64;
           R1 = Data.Semigroup.$fTraversableMin_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJDq: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfC8h::P64;
           P64[Hp] = _sfC8i::P64;
           I64[Sp - 16] = block_cfJDi_info;
           R2 = _sfC8g::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$cmapM_info" {
     Data.Semigroup.$fTraversableMin_$cmapM_info:
         const Data.Semigroup.$fTraversableMin_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJDi() //  [R1]
         { []
         }
     {offset
       cfJDi: // global
           I64[Sp] = block_cfJDn_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJDi_info" {
     block_cfJDi_info:
         const _cfJDi;
         const 1;
         const 30;
 },
 _cfJDn() //  [R1]
         { []
         }
     {offset
       cfJDn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJDn_info" {
     block_cfJDn_info:
         const _cfJDn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.963774338 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$csequence_closure" {
     Data.Semigroup.$fTraversableMin_$csequence_closure:
         const Data.Semigroup.$fTraversableMin_$csequence_info;
 },
 Data.Semigroup.$fTraversableMin_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJDP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJDT; else goto cfJDU;
       cfJDT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMin_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJDU: // global
           I64[Sp - 16] = block_cfJDN_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$csequence_info" {
     Data.Semigroup.$fTraversableMin_$csequence_info:
         const Data.Semigroup.$fTraversableMin_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJDN() //  [R1]
         { []
         }
     {offset
       cfJDN: // global
           I64[Sp] = block_cfJDS_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJDN_info" {
     block_cfJDN_info:
         const _cfJDN;
         const 1;
         const 30;
 },
 _cfJDS() //  [R1]
         { []
         }
     {offset
       cfJDS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJDS_info" {
     block_cfJDS_info:
         const _cfJDS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.969644376 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_closure" {
     Data.Semigroup.$fTraversableMin_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorMin_closure+1;
         const Data.Semigroup.$fFoldableMin_closure+1;
         const Data.Semigroup.$fTraversableMin_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableMin_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableMin_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableMin_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.971734566 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_$c<*_closure" {
     Data.Semigroup.$fApplicativeMin_$c<*_closure:
         const Data.Semigroup.$fApplicativeMin_$c<*_info;
 },
 Data.Semigroup.$fApplicativeMin_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfJEg: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin_$c<*_info" {
     Data.Semigroup.$fApplicativeMin_$c<*_info:
         const Data.Semigroup.$fApplicativeMin_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.97548144 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_$c*>_closure" {
     Data.Semigroup.$fApplicativeMin_$c*>_closure:
         const Data.Semigroup.$fApplicativeMin_$c*>_info;
 },
 Data.Semigroup.$fApplicativeMin_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfJEr: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin_$c*>_info" {
     Data.Semigroup.$fApplicativeMin_$c*>_info:
         const Data.Semigroup.$fApplicativeMin_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.97866803 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst1_closure" {
     Data.Semigroup.$fApplicativeFirst1_closure:
         const Data.Semigroup.$fApplicativeFirst1_info;
 },
 Data.Semigroup.$fApplicativeFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfJEC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst1_info" {
     Data.Semigroup.$fApplicativeFirst1_info:
         const Data.Semigroup.$fApplicativeFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.982197554 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin1_closure" {
     Data.Semigroup.$fApplicativeMin1_closure:
         const Data.Semigroup.$fApplicativeMin1_info;
 },
 Data.Semigroup.$fApplicativeMin1_entry() //  [R2]
         { []
         }
     {offset
       cfJEN: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin1_info" {
     Data.Semigroup.$fApplicativeMin1_info:
         const Data.Semigroup.$fApplicativeMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.985376593 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_closure" {
     Data.Semigroup.$fApplicativeMin_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorMin_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeMin1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeMin_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeMin_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.987468698 UTC

[section ""data" . Data.Semigroup.$fMonadMin_$c>>=_closure" {
     Data.Semigroup.$fMonadMin_$c>>=_closure:
         const Data.Semigroup.$fMonadMin_$c>>=_info;
 },
 Data.Semigroup.$fMonadMin_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJEZ: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadMin_$c>>=_info" {
     Data.Semigroup.$fMonadMin_$c>>=_info:
         const Data.Semigroup.$fMonadMin_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.990666669 UTC

[section ""data" . lvl1_rfC67_closure" {
     lvl1_rfC67_closure:
         const lvl1_rfC67_info;
         const 0;
 },
 lvl1_rfC67_entry() //  [R2]
         { []
         }
     {offset
       cfJFa: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rfC67_info" {
     lvl1_rfC67_info:
         const lvl1_rfC67_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.993595665 UTC

[section ""data" . Data.Semigroup.$fMonadMin_closure" {
     Data.Semigroup.$fMonadMin_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeMin_closure+1;
         const Data.Semigroup.$fMonadMin_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeMin_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl1_rfC67_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:20.998829452 UTC

[section ""data" . Data.Semigroup.$fNumMin_closure" {
     Data.Semigroup.$fNumMin_closure:
         const Data.Semigroup.$fNumMin_info;
 },
 sat_sfC8Q_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJFs; else goto cfJFt;
       cfJFs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJFt: // global
           _sfC8P::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfC8P::P64;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8Q_info" {
     sat_sfC8Q_info:
         const sat_sfC8Q_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC8O_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJFz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJFA; else goto cfJFB;
       cfJFA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJFB: // global
           _sfC8N::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfC8N::P64;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8O_info" {
     sat_sfC8O_info:
         const sat_sfC8O_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC8M_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJFI; else goto cfJFJ;
       cfJFI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJFJ: // global
           _sfC8L::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfC8L::P64;
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8M_info" {
     sat_sfC8M_info:
         const sat_sfC8M_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC8K_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJFP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJFQ; else goto cfJFR;
       cfJFQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJFR: // global
           _sfC8J::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfC8J::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8K_info" {
     sat_sfC8K_info:
         const sat_sfC8K_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC8I_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJFX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJFY; else goto cfJFZ;
       cfJFY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJFZ: // global
           _sfC8G::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfC8G::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8I_info" {
     sat_sfC8I_info:
         const sat_sfC8I_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfC8F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJG5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJG6; else goto cfJG7;
       cfJG6: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJG7: // global
           _sfC8D::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfC8D::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8F_info" {
     sat_sfC8F_info:
         const sat_sfC8F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfC8C_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJGd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJGe; else goto cfJGf;
       cfJGe: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJGf: // global
           _sfC8A::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfC8A::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC8C_info" {
     sat_sfC8C_info:
         const sat_sfC8C_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fNumMin_entry() //  [R2]
         { []
         }
     {offset
       cfJGh: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cfJGl; else goto cfJGk;
       cfJGl: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Semigroup.$fNumMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJGk: // global
           I64[Hp - 168] = sat_sfC8Q_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfC8O_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfC8M_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfC8K_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfC8I_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfC8F_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfC8C_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fNumMin_info" {
     Data.Semigroup.$fNumMin_info:
         const Data.Semigroup.$fNumMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.016252085 UTC

[section ""data" . Data.Semigroup.$w$csconcat_closure" {
     Data.Semigroup.$w$csconcat_closure:
         const Data.Semigroup.$w$csconcat_info;
 },
 go_sfC8U_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJHg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfJHh; else goto cfJHi;
       cfJHh: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJHi: // global
           I64[Sp - 32] = block_cfJH9_info;
           _sfC8U::P64 = R1;
           _sfC8R::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfC8R::P64;
           P64[Sp - 16] = _sfC8U::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufJHs; else goto cfJHa;
       ufJHs: // global
           call _cfJH9(R1) args: 0, res: 0, upd: 0;
       cfJHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfC8U_info" {
     go_sfC8U_info:
         const go_sfC8U_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfJH9() //  [R1]
         { []
         }
     {offset
       cfJH9: // global
           _sfC8V::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfJHd; else goto cfJHe;
       cfJHd: // global
           R1 = _sfC8V::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfJHe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfJHq; else goto cfJHp;
       cfJHq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJHp: // global
           _sfC8Y::P64 = P64[R1 + 6];
           _sfC8Z::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfC8Y::P64;
           P64[Hp] = _sfC8Z::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfC8V::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Classes.max_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJH9_info" {
     block_cfJH9_info:
         const _cfJH9;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJHt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfJHx; else goto cfJHw;
       cfJHx: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJHw: // global
           I64[Hp - 8] = go_sfC8U_info;
           P64[Hp] = R2;
           _sfC8S::P64 = R3;
           R3 = R4;
           R2 = _sfC8S::P64;
           R1 = Hp - 6;
           call go_sfC8U_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat_info" {
     Data.Semigroup.$w$csconcat_info:
         const Data.Semigroup.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.024196037 UTC

[section ""data" . Data.Semigroup.$fSemigroupMax_$csconcat_closure" {
     Data.Semigroup.$fSemigroupMax_$csconcat_closure:
         const Data.Semigroup.$fSemigroupMax_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupMax_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJHW; else goto cfJHX;
       cfJHW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMax_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJHX: // global
           I64[Sp - 16] = block_cfJHS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJI1; else goto cfJHT;
       ufJI1: // global
           call _cfJHS(R1) args: 0, res: 0, upd: 0;
       cfJHT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMax_$csconcat_info" {
     Data.Semigroup.$fSemigroupMax_$csconcat_info:
         const Data.Semigroup.$fSemigroupMax_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJHS() //  [R1]
         { []
         }
     {offset
       cfJHS: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJHS_info" {
     block_cfJHS_info:
         const _cfJHS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.029568022 UTC

[section ""data" . lvl2_rfC68_closure" {
     lvl2_rfC68_closure:
         const lvl2_rfC68_info;
         const 0;
 },
 lvl2_rfC68_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJIf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rfC68_info" {
     lvl2_rfC68_info:
         const lvl2_rfC68_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfCR7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.033680749 UTC

[section ""data" . Data.Semigroup.$fSemigroupMax_closure" {
     Data.Semigroup.$fSemigroupMax_closure:
         const Data.Semigroup.$fSemigroupMax_info;
         const 0;
 },
 sat_sfC9b_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJIv: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupMax_$csconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC9b_info" {
     sat_sfC9b_info:
         const sat_sfC9b_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfC9a_entry() //  [R1]
         { []
         }
     {offset
       cfJIC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJID; else goto cfJIE;
       cfJID: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfJIE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfC9a_info" {
     sat_sfC9a_info:
         const sat_sfC9a_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupMax_entry() //  [R2]
         { []
         }
     {offset
       cfJIG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfJIK; else goto cfJIJ;
       cfJIK: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJIJ: // global
           I64[Hp - 64] = sat_sfC9b_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfC9a_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = lvl2_rfC68_closure+3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMax_info" {
     Data.Semigroup.$fSemigroupMax_info:
         const Data.Semigroup.$fSemigroupMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.040387079 UTC

[section ""data" . Data.Semigroup.$fFunctorMax2_closure" {
     Data.Semigroup.$fFunctorMax2_closure:
         const Data.Semigroup.$fFunctorMax2_info;
 },
 Data.Semigroup.$fFunctorMax2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJJ3: // global
           _sfC9c::P64 = R2;
           R2 = R3;
           R1 = _sfC9c::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMax2_info" {
     Data.Semigroup.$fFunctorMax2_info:
         const Data.Semigroup.$fFunctorMax2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.044747648 UTC

[section ""data" . Data.Semigroup.$fFunctorMax1_closure" {
     Data.Semigroup.$fFunctorMax1_closure:
         const Data.Semigroup.$fFunctorMax1_info;
 },
 Data.Semigroup.$fFunctorMax1_entry() //  [R2]
         { []
         }
     {offset
       cfJJe: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMax1_info" {
     Data.Semigroup.$fFunctorMax1_info:
         const Data.Semigroup.$fFunctorMax1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.047780737 UTC

[section ""data" . Data.Semigroup.$fFunctorMax_closure" {
     Data.Semigroup.$fFunctorMax_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorMax2_closure+2;
         const Data.Semigroup.$fFunctorMax1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.04972392 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfJJq: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldMap_info" {
     Data.Semigroup.$fFoldableMax_$cfoldMap_info:
         const Data.Semigroup.$fFoldableMax_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.052955743 UTC

[section ""data" . Data.Semigroup.$fFoldableMax4_closure" {
     Data.Semigroup.$fFoldableMax4_closure:
         const Data.Semigroup.$fFoldableMax4_info;
 },
 Data.Semigroup.$fFoldableMax4_entry() //  [R3]
         { []
         }
     {offset
       cfJJB: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax4_info" {
     Data.Semigroup.$fFoldableMax4_info:
         const Data.Semigroup.$fFoldableMax4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.0565176 UTC

[section ""data" . Data.Semigroup.$fFoldableMax1_closure" {
     Data.Semigroup.$fFoldableMax1_closure:
         const Data.Semigroup.$fFoldableMax1_info;
 },
 Data.Semigroup.$fFoldableMax1_entry() //  [R3]
         { []
         }
     {offset
       cfJJM: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax1_info" {
     Data.Semigroup.$fFoldableMax1_info:
         const Data.Semigroup.$fFoldableMax1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.059784816 UTC

[section ""data" . Data.Semigroup.$fFoldableMax2_closure" {
     Data.Semigroup.$fFoldableMax2_closure:
         const Data.Semigroup.$fFoldableMax2_info;
 },
 Data.Semigroup.$fFoldableMax2_entry() //  [R3]
         { []
         }
     {offset
       cfJJX: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax2_info" {
     Data.Semigroup.$fFoldableMax2_info:
         const Data.Semigroup.$fFoldableMax2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.064010899 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$celem_closure" {
     Data.Semigroup.$fFoldableMax_$celem_closure:
         const Data.Semigroup.$fFoldableMax_$celem_info;
 },
 f_sfC9r_entry() //  [R1]
         { []
         }
     {offset
       cfJKc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfJKd; else goto cfJKe;
       cfJKd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfJKe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfC9r_info" {
     f_sfC9r_info:
         const f_sfC9r_entry;
         const 2;
         const 18;
 },
 sat_sfC9t_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJKk: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfC9t_info" {
     sat_sfC9t_info:
         const sat_sfC9t_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableMax_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJKn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfJKr; else goto cfJKq;
       cfJKr: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMax_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJKq: // global
           I64[Hp - 40] = f_sfC9r_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfC9t_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$celem_info" {
     Data.Semigroup.$fFoldableMax_$celem_info:
         const Data.Semigroup.$fFoldableMax_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.072789933 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldl_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldl_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJKK: // global
           _sfC9v::P64 = R3;
           R3 = R4;
           _sfC9u::P64 = R2;
           R2 = _sfC9v::P64;
           R1 = _sfC9u::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldl_info" {
     Data.Semigroup.$fFoldableMax_$cfoldl_info:
         const Data.Semigroup.$fFoldableMax_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.077863638 UTC

[section ""data" . Data.Semigroup.$fFoldableMax3_closure" {
     Data.Semigroup.$fFoldableMax3_closure:
         const Data.Semigroup.$fFoldableMax3_info;
 },
 Data.Semigroup.$fFoldableMax3_entry() //  [R3]
         { []
         }
     {offset
       cfJKV: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax3_info" {
     Data.Semigroup.$fFoldableMax3_info:
         const Data.Semigroup.$fFoldableMax3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.081371 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJL6: // global
           R3 = R3;
           _sfC9z::P64 = R2;
           R2 = R4;
           R1 = _sfC9z::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldr'_info" {
     Data.Semigroup.$fFoldableMax_$cfoldr'_info:
         const Data.Semigroup.$fFoldableMax_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.084666819 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$clength_closure" {
     Data.Semigroup.$fFoldableMax_$clength_closure:
         const Data.Semigroup.$fFoldableMax_$clength_info;
 },
 Data.Semigroup.$fFoldableMax_$clength_entry() //  []
         { []
         }
     {offset
       cfJLh: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$clength_info" {
     Data.Semigroup.$fFoldableMax_$clength_info:
         const Data.Semigroup.$fFoldableMax_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.08849859 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cnull_closure" {
     Data.Semigroup.$fFoldableMax_$cnull_closure:
         const Data.Semigroup.$fFoldableMax_$cnull_info;
 },
 Data.Semigroup.$fFoldableMax_$cnull_entry() //  []
         { []
         }
     {offset
       cfJLt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cnull_info" {
     Data.Semigroup.$fFoldableMax_$cnull_info:
         const Data.Semigroup.$fFoldableMax_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.09245414 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$ctoList_closure" {
     Data.Semigroup.$fFoldableMax_$ctoList_closure:
         const Data.Semigroup.$fFoldableMax_$ctoList_info;
 },
 Data.Semigroup.$fFoldableMax_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfJLG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJLK; else goto cfJLJ;
       cfJLK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMax_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJLJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$ctoList_info" {
     Data.Semigroup.$fFoldableMax_$ctoList_info:
         const Data.Semigroup.$fFoldableMax_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.096634989 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_closure" {
     Data.Semigroup.$fFoldableMax_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableMax4_closure+2;
         const Data.Semigroup.$fFoldableMax_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMax3_closure+2;
         const Data.Semigroup.$fFoldableMax3_closure+2;
         const Data.Semigroup.$fFoldableMax_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableMax_$cnull_closure+1;
         const Data.Semigroup.$fFoldableMax_$clength_closure+1;
         const Data.Semigroup.$fFoldableMax_$celem_closure+2;
         const Data.Semigroup.$fFoldableMax2_closure+2;
         const Data.Semigroup.$fFoldableMax2_closure+2;
         const Data.Semigroup.$fFoldableMax1_closure+2;
         const Data.Semigroup.$fFoldableMax1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.100134618 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$ctraverse_closure" {
     Data.Semigroup.$fTraversableMax_$ctraverse_closure:
         const Data.Semigroup.$fTraversableMax_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableMax_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJLY: // global
           _sfC9H::P64 = R4;
           _sfC9G::P64 = R3;
           _sfC9F::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfJLZ; else goto cfJM0;
       cfJM0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfJM2; else goto cfJM1;
       cfJM2: // global
           HpAlloc = 32;
           goto cfJLZ;
       cfJLZ: // global
           R4 = _sfC9H::P64;
           R3 = _sfC9G::P64;
           R2 = _sfC9F::P64;
           R1 = Data.Semigroup.$fTraversableMax_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJM1: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfC9G::P64;
           P64[Hp] = _sfC9H::P64;
           I64[Sp - 16] = block_cfJLW_info;
           R2 = _sfC9F::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$ctraverse_info" {
     Data.Semigroup.$fTraversableMax_$ctraverse_info:
         const Data.Semigroup.$fTraversableMax_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJLW() //  [R1]
         { []
         }
     {offset
       cfJLW: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJLW_info" {
     block_cfJLW_info:
         const _cfJLW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.10645405 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$csequenceA_closure" {
     Data.Semigroup.$fTraversableMax_$csequenceA_closure:
         const Data.Semigroup.$fTraversableMax_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableMax_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJMl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJMm; else goto cfJMn;
       cfJMm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMax_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJMn: // global
           I64[Sp - 16] = block_cfJMj_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$csequenceA_info" {
     Data.Semigroup.$fTraversableMax_$csequenceA_info:
         const Data.Semigroup.$fTraversableMax_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJMj() //  [R1]
         { []
         }
     {offset
       cfJMj: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJMj_info" {
     block_cfJMj_info:
         const _cfJMj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.113079059 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$cmapM_closure" {
     Data.Semigroup.$fTraversableMax_$cmapM_closure:
         const Data.Semigroup.$fTraversableMax_$cmapM_info;
 },
 Data.Semigroup.$fTraversableMax_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJMG: // global
           _sfC9P::P64 = R4;
           _sfC9O::P64 = R3;
           _sfC9N::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfJMK; else goto cfJML;
       cfJML: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfJMN; else goto cfJMM;
       cfJMN: // global
           HpAlloc = 32;
           goto cfJMK;
       cfJMK: // global
           R4 = _sfC9P::P64;
           R3 = _sfC9O::P64;
           R2 = _sfC9N::P64;
           R1 = Data.Semigroup.$fTraversableMax_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJMM: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfC9O::P64;
           P64[Hp] = _sfC9P::P64;
           I64[Sp - 16] = block_cfJME_info;
           R2 = _sfC9N::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$cmapM_info" {
     Data.Semigroup.$fTraversableMax_$cmapM_info:
         const Data.Semigroup.$fTraversableMax_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJME() //  [R1]
         { []
         }
     {offset
       cfJME: // global
           I64[Sp] = block_cfJMJ_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJME_info" {
     block_cfJME_info:
         const _cfJME;
         const 1;
         const 30;
 },
 _cfJMJ() //  [R1]
         { []
         }
     {offset
       cfJMJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJMJ_info" {
     block_cfJMJ_info:
         const _cfJMJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.120074399 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$csequence_closure" {
     Data.Semigroup.$fTraversableMax_$csequence_closure:
         const Data.Semigroup.$fTraversableMax_$csequence_info;
 },
 Data.Semigroup.$fTraversableMax_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJNb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJNf; else goto cfJNg;
       cfJNf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMax_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJNg: // global
           I64[Sp - 16] = block_cfJN9_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$csequence_info" {
     Data.Semigroup.$fTraversableMax_$csequence_info:
         const Data.Semigroup.$fTraversableMax_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJN9() //  [R1]
         { []
         }
     {offset
       cfJN9: // global
           I64[Sp] = block_cfJNe_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJN9_info" {
     block_cfJN9_info:
         const _cfJN9;
         const 1;
         const 30;
 },
 _cfJNe() //  [R1]
         { []
         }
     {offset
       cfJNe: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJNe_info" {
     block_cfJNe_info:
         const _cfJNe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.126386784 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_closure" {
     Data.Semigroup.$fTraversableMax_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorMax_closure+1;
         const Data.Semigroup.$fFoldableMax_closure+1;
         const Data.Semigroup.$fTraversableMax_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableMax_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableMax_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableMax_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.128411174 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_$c<*_closure" {
     Data.Semigroup.$fApplicativeMax_$c<*_closure:
         const Data.Semigroup.$fApplicativeMax_$c<*_info;
 },
 Data.Semigroup.$fApplicativeMax_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfJNC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax_$c<*_info" {
     Data.Semigroup.$fApplicativeMax_$c<*_info:
         const Data.Semigroup.$fApplicativeMax_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.131736242 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_$c*>_closure" {
     Data.Semigroup.$fApplicativeMax_$c*>_closure:
         const Data.Semigroup.$fApplicativeMax_$c*>_info;
 },
 Data.Semigroup.$fApplicativeMax_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfJNN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax_$c*>_info" {
     Data.Semigroup.$fApplicativeMax_$c*>_info:
         const Data.Semigroup.$fApplicativeMax_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.134963912 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax1_closure" {
     Data.Semigroup.$fApplicativeMax1_closure:
         const Data.Semigroup.$fApplicativeMax1_info;
 },
 Data.Semigroup.$fApplicativeMax1_entry() //  [R2]
         { []
         }
     {offset
       cfJNY: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax1_info" {
     Data.Semigroup.$fApplicativeMax1_info:
         const Data.Semigroup.$fApplicativeMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.138252437 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_closure" {
     Data.Semigroup.$fApplicativeMax_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorMax_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeMax1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeMax_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeMax_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.140372142 UTC

[section ""data" . Data.Semigroup.$fMonadMax_$c>>=_closure" {
     Data.Semigroup.$fMonadMax_$c>>=_closure:
         const Data.Semigroup.$fMonadMax_$c>>=_info;
 },
 Data.Semigroup.$fMonadMax_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJOa: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadMax_$c>>=_info" {
     Data.Semigroup.$fMonadMax_$c>>=_info:
         const Data.Semigroup.$fMonadMax_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.144185885 UTC

[section ""data" . lvl3_rfC69_closure" {
     lvl3_rfC69_closure:
         const lvl3_rfC69_info;
         const 0;
 },
 lvl3_rfC69_entry() //  [R2]
         { []
         }
     {offset
       cfJOl: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rfC69_info" {
     lvl3_rfC69_info:
         const lvl3_rfC69_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.147278856 UTC

[section ""data" . Data.Semigroup.$fMonadMax_closure" {
     Data.Semigroup.$fMonadMax_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeMax_closure+1;
         const Data.Semigroup.$fMonadMax_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeMax_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl3_rfC69_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.152804217 UTC

[section ""data" . Data.Semigroup.$fNumMax_closure" {
     Data.Semigroup.$fNumMax_closure:
         const Data.Semigroup.$fNumMax_info;
 },
 sat_sfCam_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJOC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJOD; else goto cfJOE;
       cfJOD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJOE: // global
           _sfCal::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCal::P64;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCam_info" {
     sat_sfCam_info:
         const sat_sfCam_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCak_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJOK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJOL; else goto cfJOM;
       cfJOL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJOM: // global
           _sfCaj::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCaj::P64;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCak_info" {
     sat_sfCak_info:
         const sat_sfCak_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCai_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJOS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJOT; else goto cfJOU;
       cfJOT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJOU: // global
           _sfCah::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCah::P64;
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCai_info" {
     sat_sfCai_info:
         const sat_sfCai_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCag_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJP1; else goto cfJP2;
       cfJP1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJP2: // global
           _sfCaf::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCaf::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCag_info" {
     sat_sfCag_info:
         const sat_sfCag_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCae_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJP8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJP9; else goto cfJPa;
       cfJP9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJPa: // global
           _sfCac::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCac::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCae_info" {
     sat_sfCae_info:
         const sat_sfCae_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCab_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJPg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJPh; else goto cfJPi;
       cfJPh: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJPi: // global
           _sfCa9::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCa9::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCab_info" {
     sat_sfCab_info:
         const sat_sfCab_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCa8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfJPo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJPp; else goto cfJPq;
       cfJPp: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJPq: // global
           _sfCa6::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCa6::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCa8_info" {
     sat_sfCa8_info:
         const sat_sfCa8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fNumMax_entry() //  [R2]
         { []
         }
     {offset
       cfJPs: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cfJPw; else goto cfJPv;
       cfJPw: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Semigroup.$fNumMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJPv: // global
           I64[Hp - 168] = sat_sfCam_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfCak_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCai_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfCag_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCae_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCab_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfCa8_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fNumMax_info" {
     Data.Semigroup.$fNumMax_info:
         const Data.Semigroup.$fNumMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.168859629 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_$cfmap_closure" {
     Data.Semigroup.$fFunctorArg_$cfmap_closure:
         const Data.Semigroup.$fFunctorArg_$cfmap_info;
 },
 Data.Semigroup.$fFunctorArg_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJQi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJQn; else goto cfJQo;
       cfJQn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorArg_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJQo: // global
           I64[Sp - 16] = block_cfJQf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJQs; else goto cfJQg;
       ufJQs: // global
           call _cfJQf(R1) args: 0, res: 0, upd: 0;
       cfJQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorArg_$cfmap_info" {
     Data.Semigroup.$fFunctorArg_$cfmap_info:
         const Data.Semigroup.$fFunctorArg_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJQf() //  [R1]
         { []
         }
     {offset
       cfJQf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfJQr; else goto cfJQq;
       cfJQr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJQq: // global
           _sfCaq::P64 = P64[R1 + 7];
           _sfCar::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCar::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCaq::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJQf_info" {
     block_cfJQf_info:
         const _cfJQf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.174849164 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_$c<$_closure" {
     Data.Semigroup.$fFunctorArg_$c<$_closure:
         const Data.Semigroup.$fFunctorArg_$c<$_info;
 },
 Data.Semigroup.$fFunctorArg_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJQM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJQQ; else goto cfJQR;
       cfJQQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorArg_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJQR: // global
           I64[Sp - 16] = block_cfJQJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJQV; else goto cfJQK;
       ufJQV: // global
           call _cfJQJ(R1) args: 0, res: 0, upd: 0;
       cfJQK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorArg_$c<$_info" {
     Data.Semigroup.$fFunctorArg_$c<$_info:
         const Data.Semigroup.$fFunctorArg_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJQJ() //  [R1]
         { []
         }
     {offset
       cfJQJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJQU; else goto cfJQT;
       cfJQU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJQT: // global
           _sfCaw::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCaw::P64;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJQJ_info" {
     block_cfJQJ_info:
         const _cfJQJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.181566406 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_closure" {
     Data.Semigroup.$fFunctorArg_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorArg_$cfmap_closure+2;
         const Data.Semigroup.$fFunctorArg_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.184063022 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJRf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJRg; else goto cfJRh;
       cfJRg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJRh: // global
           I64[Sp - 16] = block_cfJRc_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJRl; else goto cfJRd;
       ufJRl: // global
           call _cfJRc(R1) args: 0, res: 0, upd: 0;
       cfJRd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldMap_info" {
     Data.Semigroup.$fFoldableArg_$cfoldMap_info:
         const Data.Semigroup.$fFoldableArg_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJRc() //  [R1]
         { []
         }
     {offset
       cfJRc: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJRc_info" {
     block_cfJRc_info:
         const _cfJRc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.189843802 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfold_closure" {
     Data.Semigroup.$fFoldableArg_$cfold_closure:
         const Data.Semigroup.$fFoldableArg_$cfold_info;
 },
 Data.Semigroup.$fFoldableArg_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJRC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJRD; else goto cfJRE;
       cfJRD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJRE: // global
           I64[Sp - 8] = block_cfJRz_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJRI; else goto cfJRA;
       ufJRI: // global
           call _cfJRz(R1) args: 0, res: 0, upd: 0;
       cfJRA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfold_info" {
     Data.Semigroup.$fFoldableArg_$cfold_info:
         const Data.Semigroup.$fFoldableArg_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJRz() //  [R1]
         { []
         }
     {offset
       cfJRz: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJRz_info" {
     block_cfJRz_info:
         const _cfJRz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.195128623 UTC

[section ""data" . Data.Semigroup.$fFoldableArg2_closure" {
     Data.Semigroup.$fFoldableArg2_closure:
         const Data.Semigroup.$fFoldableArg2_info;
 },
 Data.Semigroup.$fFoldableArg2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJRZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJS0; else goto cfJS1;
       cfJS0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJS1: // global
           I64[Sp - 8] = block_cfJRW_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJS5; else goto cfJRX;
       ufJS5: // global
           call _cfJRW(R1) args: 0, res: 0, upd: 0;
       cfJRX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg2_info" {
     Data.Semigroup.$fFoldableArg2_info:
         const Data.Semigroup.$fFoldableArg2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJRW() //  [R1]
         { []
         }
     {offset
       cfJRW: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJRW_info" {
     block_cfJRW_info:
         const _cfJRW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.200679716 UTC

[section ""data" . Data.Semigroup.$fFoldableArg3_closure" {
     Data.Semigroup.$fFoldableArg3_closure:
         const Data.Semigroup.$fFoldableArg3_info;
 },
 Data.Semigroup.$fFoldableArg3_entry() //  [R2]
         { []
         }
     {offset
       cfJSm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJSn; else goto cfJSo;
       cfJSn: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJSo: // global
           I64[Sp - 8] = block_cfJSj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJSs; else goto cfJSk;
       ufJSs: // global
           call _cfJSj(R1) args: 0, res: 0, upd: 0;
       cfJSk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg3_info" {
     Data.Semigroup.$fFoldableArg3_info:
         const Data.Semigroup.$fFoldableArg3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfJSj() //  [R1]
         { []
         }
     {offset
       cfJSj: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJSj_info" {
     block_cfJSj_info:
         const _cfJSj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.205850702 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cminimum_closure" {
     Data.Semigroup.$fFoldableArg_$cminimum_closure:
         const Data.Semigroup.$fFoldableArg_$cminimum_info;
 },
 Data.Semigroup.$fFoldableArg_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       cfJSG: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableArg3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cminimum_info" {
     Data.Semigroup.$fFoldableArg_$cminimum_info:
         const Data.Semigroup.$fFoldableArg_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.21048289 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$celem_closure" {
     Data.Semigroup.$fFoldableArg_$celem_closure:
         const Data.Semigroup.$fFoldableArg_$celem_info;
 },
 f_sfCaV_entry() //  [R1]
         { []
         }
     {offset
       cfJSV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfJSW; else goto cfJSX;
       cfJSW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfJSX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCaV_info" {
     f_sfCaV_info:
         const f_sfCaV_entry;
         const 2;
         const 18;
 },
 sat_sfCb0_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfJT7; else goto cfJT8;
       cfJT7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJT8: // global
           I64[Sp - 16] = block_cfJT3_info;
           _sfCaV::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sfCaV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJTc; else goto cfJT4;
       ufJTc: // global
           call _cfJT3(R1) args: 0, res: 0, upd: 0;
       cfJT4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCb0_info" {
     sat_sfCb0_info:
         const sat_sfCb0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfJT3() //  [R1]
         { []
         }
     {offset
       cfJT3: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJT3_info" {
     block_cfJT3_info:
         const _cfJT3;
         const 1;
         const 30;
 },
 Data.Semigroup.$fFoldableArg_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJTd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfJTh; else goto cfJTg;
       cfJTh: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJTg: // global
           I64[Hp - 40] = f_sfCaV_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfCb0_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$celem_info" {
     Data.Semigroup.$fFoldableArg_$celem_info:
         const Data.Semigroup.$fFoldableArg_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.21992907 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldl_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldl_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJTI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJTJ; else goto cfJTK;
       cfJTJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJTK: // global
           I64[Sp - 24] = block_cfJTF_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufJTO; else goto cfJTG;
       ufJTO: // global
           call _cfJTF(R1) args: 0, res: 0, upd: 0;
       cfJTG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldl_info" {
     Data.Semigroup.$fFoldableArg_$cfoldl_info:
         const Data.Semigroup.$fFoldableArg_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJTF() //  [R1]
         { []
         }
     {offset
       cfJTF: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJTF_info" {
     block_cfJTF_info:
         const _cfJTF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.225663027 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldl1_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldl1_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldl1_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJU5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJU6; else goto cfJU7;
       cfJU6: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJU7: // global
           I64[Sp - 8] = block_cfJU2_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJUb; else goto cfJU3;
       ufJUb: // global
           call _cfJU2(R1) args: 0, res: 0, upd: 0;
       cfJU3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldl1_info" {
     Data.Semigroup.$fFoldableArg_$cfoldl1_info:
         const Data.Semigroup.$fFoldableArg_$cfoldl1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJU2() //  [R1]
         { []
         }
     {offset
       cfJU2: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJU2_info" {
     block_cfJU2_info:
         const _cfJU2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.231129834 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJUs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJUt; else goto cfJUu;
       cfJUt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJUu: // global
           I64[Sp - 24] = block_cfJUp_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufJUy; else goto cfJUq;
       ufJUy: // global
           call _cfJUp(R1) args: 0, res: 0, upd: 0;
       cfJUq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldr'_info" {
     Data.Semigroup.$fFoldableArg_$cfoldr'_info:
         const Data.Semigroup.$fFoldableArg_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJUp() //  [R1]
         { []
         }
     {offset
       cfJUp: // global
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJUp_info" {
     block_cfJUp_info:
         const _cfJUp;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.236887002 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$clength_closure" {
     Data.Semigroup.$fFoldableArg_$clength_closure:
         const Data.Semigroup.$fFoldableArg_$clength_info;
 },
 Data.Semigroup.$fFoldableArg_$clength_entry() //  [R2]
         { []
         }
     {offset
       cfJUP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJUQ; else goto cfJUR;
       cfJUQ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJUR: // global
           I64[Sp - 8] = block_cfJUM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJUV; else goto cfJUN;
       ufJUV: // global
           call _cfJUM() args: 0, res: 0, upd: 0;
       cfJUN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$clength_info" {
     Data.Semigroup.$fFoldableArg_$clength_info:
         const Data.Semigroup.$fFoldableArg_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfJUM() //  []
         { []
         }
     {offset
       cfJUM: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJUM_info" {
     block_cfJUM_info:
         const _cfJUM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.242478376 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cnull_closure" {
     Data.Semigroup.$fFoldableArg_$cnull_closure:
         const Data.Semigroup.$fFoldableArg_$cnull_info;
 },
 Data.Semigroup.$fFoldableArg_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cfJVd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJVe; else goto cfJVf;
       cfJVe: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJVf: // global
           I64[Sp - 8] = block_cfJVa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJVj; else goto cfJVb;
       ufJVj: // global
           call _cfJVa() args: 0, res: 0, upd: 0;
       cfJVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cnull_info" {
     Data.Semigroup.$fFoldableArg_$cnull_info:
         const Data.Semigroup.$fFoldableArg_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfJVa() //  []
         { []
         }
     {offset
       cfJVa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJVa_info" {
     block_cfJVa_info:
         const _cfJVa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.24774203 UTC

[section ""data" . Data.Semigroup.$fFoldableArg1_closure" {
     Data.Semigroup.$fFoldableArg1_closure:
         const Data.Semigroup.$fFoldableArg1_info;
 },
 Data.Semigroup.$fFoldableArg1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJVB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJVC; else goto cfJVD;
       cfJVC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJVD: // global
           I64[Sp - 8] = block_cfJVy_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJVH; else goto cfJVz;
       ufJVH: // global
           call _cfJVy(R1) args: 0, res: 0, upd: 0;
       cfJVz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg1_info" {
     Data.Semigroup.$fFoldableArg1_info:
         const Data.Semigroup.$fFoldableArg1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJVy() //  [R1]
         { []
         }
     {offset
       cfJVy: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJVy_info" {
     block_cfJVy_info:
         const _cfJVy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.256129067 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$ctoList_closure" {
     Data.Semigroup.$fFoldableArg_$ctoList_closure:
         const Data.Semigroup.$fFoldableArg_$ctoList_info;
 },
 Data.Semigroup.$fFoldableArg_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfJVY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfJW2; else goto cfJW3;
       cfJW2: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJW3: // global
           I64[Sp - 8] = block_cfJVV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufJW7; else goto cfJVW;
       ufJW7: // global
           call _cfJVV(R1) args: 0, res: 0, upd: 0;
       cfJVW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$ctoList_info" {
     Data.Semigroup.$fFoldableArg_$ctoList_info:
         const Data.Semigroup.$fFoldableArg_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfJVV() //  [R1]
         { []
         }
     {offset
       cfJVV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJW6; else goto cfJW5;
       cfJW6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJW5: // global
           _sfCby::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfCby::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJVV_info" {
     block_cfJVV_info:
         const _cfJVV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.262019297 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_closure" {
     Data.Semigroup.$fFoldableArg_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableArg_$cfold_closure+2;
         const Data.Semigroup.$fFoldableArg_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableArg_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableArg_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableArg_$cnull_closure+1;
         const Data.Semigroup.$fFoldableArg_$clength_closure+1;
         const Data.Semigroup.$fFoldableArg_$celem_closure+2;
         const Data.Semigroup.$fFoldableArg_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableArg_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableArg2_closure+2;
         const Data.Semigroup.$fFoldableArg1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.266360866 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$ctraverse_closure" {
     Data.Semigroup.$fTraversableArg_$ctraverse_closure:
         const Data.Semigroup.$fTraversableArg_$ctraverse_info;
 },
 sat_sfCbG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJWz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJWD; else goto cfJWC;
       cfJWD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJWC: // global
           _sfCbD::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCbD::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCbG_info" {
     sat_sfCbG_info:
         const sat_sfCbG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJWE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJWG; else goto cfJWH;
       cfJWG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJWH: // global
           I64[Sp - 24] = block_cfJWn_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufJWP; else goto cfJWo;
       ufJWP: // global
           call _cfJWn(R1) args: 0, res: 0, upd: 0;
       cfJWo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$ctraverse_info" {
     Data.Semigroup.$fTraversableArg_$ctraverse_info:
         const Data.Semigroup.$fTraversableArg_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJWn() //  [R1]
         { []
         }
     {offset
       cfJWn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfJWK; else goto cfJWJ;
       cfJWK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJWJ: // global
           _sfCbD::P64 = P64[R1 + 7];
           _sfCbE::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sfCbE::P64;
           I64[Hp - 8] = sat_sfCbG_info;
           P64[Hp] = _sfCbD::P64;
           I64[Sp] = block_cfJWF_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJWn_info" {
     block_cfJWn_info:
         const _cfJWn;
         const 2;
         const 30;
 },
 _cfJWF() //  [R1]
         { []
         }
     {offset
       cfJWF: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJWF_info" {
     block_cfJWF_info:
         const _cfJWF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.27825777 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$csequenceA_closure" {
     Data.Semigroup.$fTraversableArg_$csequenceA_closure:
         const Data.Semigroup.$fTraversableArg_$csequenceA_info;
 },
 sat_sfCbO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJXo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJXs; else goto cfJXr;
       cfJXs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJXr: // global
           _sfCbL::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCbL::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCbO_info" {
     sat_sfCbO_info:
         const sat_sfCbO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJXt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJXv; else goto cfJXw;
       cfJXv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJXw: // global
           I64[Sp - 16] = block_cfJXd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJXE; else goto cfJXe;
       ufJXE: // global
           call _cfJXd(R1) args: 0, res: 0, upd: 0;
       cfJXe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$csequenceA_info" {
     Data.Semigroup.$fTraversableArg_$csequenceA_info:
         const Data.Semigroup.$fTraversableArg_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJXd() //  [R1]
         { []
         }
     {offset
       cfJXd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfJXz; else goto cfJXy;
       cfJXz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJXy: // global
           _sfCbL::P64 = P64[R1 + 7];
           _sfCbM::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCbO_info;
           P64[Hp] = _sfCbL::P64;
           I64[Sp - 8] = block_cfJXu_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sfCbM::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJXd_info" {
     block_cfJXd_info:
         const _cfJXd;
         const 1;
         const 30;
 },
 _cfJXu() //  [R1]
         { []
         }
     {offset
       cfJXu: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfCbM::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfCbM::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJXu_info" {
     block_cfJXu_info:
         const _cfJXu;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.290429421 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$cmapM_closure" {
     Data.Semigroup.$fTraversableArg_$cmapM_closure:
         const Data.Semigroup.$fTraversableArg_$cmapM_info;
 },
 sat_sfCbX_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJYd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJYh; else goto cfJYg;
       cfJYh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJYg: // global
           _sfCbT::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCbT::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCbX_info" {
     sat_sfCbX_info:
         const sat_sfCbX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJYi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJYo; else goto cfJYp;
       cfJYo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJYp: // global
           I64[Sp - 24] = block_cfJY1_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufJYy; else goto cfJY2;
       ufJYy: // global
           call _cfJY1(R1) args: 0, res: 0, upd: 0;
       cfJY2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$cmapM_info" {
     Data.Semigroup.$fTraversableArg_$cmapM_info:
         const Data.Semigroup.$fTraversableArg_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJY1() //  [R1]
         { []
         }
     {offset
       cfJY1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfJYs; else goto cfJYr;
       cfJYs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJYr: // global
           _sfCbT::P64 = P64[R1 + 7];
           _sfCbU::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sfCbU::P64;
           I64[Hp - 8] = sat_sfCbX_info;
           P64[Hp] = _sfCbT::P64;
           I64[Sp] = block_cfJYj_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJY1_info" {
     block_cfJY1_info:
         const _cfJY1;
         const 2;
         const 30;
 },
 _cfJYj() //  [R1]
         { []
         }
     {offset
       cfJYj: // global
           I64[Sp] = block_cfJYn_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJYj_info" {
     block_cfJYj_info:
         const _cfJYj;
         const 2;
         const 30;
 },
 _cfJYn() //  [R1]
         { []
         }
     {offset
       cfJYn: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJYn_info" {
     block_cfJYn_info:
         const _cfJYn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.303872714 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$csequence_closure" {
     Data.Semigroup.$fTraversableArg_$csequence_closure:
         const Data.Semigroup.$fTraversableArg_$csequence_info;
 },
 sat_sfCc6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfJZa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfJZe; else goto cfJZd;
       cfJZe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfJZd: // global
           _sfCc2::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCc2::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCc6_info" {
     sat_sfCc6_info:
         const sat_sfCc6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfJZf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfJZl; else goto cfJZm;
       cfJZl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfJZm: // global
           I64[Sp - 16] = block_cfJYZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufJZv; else goto cfJZ0;
       ufJZv: // global
           call _cfJYZ(R1) args: 0, res: 0, upd: 0;
       cfJZ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$csequence_info" {
     Data.Semigroup.$fTraversableArg_$csequence_info:
         const Data.Semigroup.$fTraversableArg_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfJYZ() //  [R1]
         { []
         }
     {offset
       cfJYZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfJZp; else goto cfJZo;
       cfJZp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfJZo: // global
           _sfCc2::P64 = P64[R1 + 7];
           _sfCc3::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCc6_info;
           P64[Hp] = _sfCc2::P64;
           I64[Sp - 8] = block_cfJZg_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sfCc3::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJYZ_info" {
     block_cfJYZ_info:
         const _cfJYZ;
         const 1;
         const 30;
 },
 _cfJZg() //  [R1]
         { []
         }
     {offset
       cfJZg: // global
           I64[Sp] = block_cfJZk_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJZg_info" {
     block_cfJZg_info:
         const _cfJZg;
         const 2;
         const 30;
 },
 _cfJZk() //  [R1]
         { []
         }
     {offset
       cfJZk: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfCc3::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfCc3::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJZk_info" {
     block_cfJZk_info:
         const _cfJZk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.313423079 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_closure" {
     Data.Semigroup.$fTraversableArg_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorArg_closure+1;
         const Data.Semigroup.$fFoldableArg_closure+1;
         const Data.Semigroup.$fTraversableArg_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableArg_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableArg_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableArg_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.316427197 UTC

[section ""data" . Data.Semigroup.$fEqArg_$c==_closure" {
     Data.Semigroup.$fEqArg_$c==_closure:
         const Data.Semigroup.$fEqArg_$c==_info;
 },
 Data.Semigroup.$fEqArg_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfJZZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfK03; else goto cfK04;
       cfK03: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK04: // global
           I64[Sp - 24] = block_cfJZW_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK0c; else goto cfJZX;
       ufK0c: // global
           call _cfJZW(R1) args: 0, res: 0, upd: 0;
       cfJZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_$c==_info" {
     Data.Semigroup.$fEqArg_$c==_info:
         const Data.Semigroup.$fEqArg_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfJZW() //  [R1]
         { []
         }
     {offset
       cfJZW: // global
           I64[Sp] = block_cfK02_info;
           _sfCcb::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCcb::P64;
           if (R1 & 7 != 0) goto ufK0b; else goto cfK06;
       ufK0b: // global
           call _cfK02(R1) args: 0, res: 0, upd: 0;
       cfK06: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfJZW_info" {
     block_cfJZW_info:
         const _cfJZW;
         const 2;
         const 30;
 },
 _cfK02() //  [R1]
         { []
         }
     {offset
       cfK02: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK02_info" {
     block_cfK02_info:
         const _cfK02;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.324314837 UTC

[section ""data" . Data.Semigroup.$fEqArg_$c/=_closure" {
     Data.Semigroup.$fEqArg_$c/=_closure:
         const Data.Semigroup.$fEqArg_$c/=_info;
 },
 Data.Semigroup.$fEqArg_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK0z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfK0D; else goto cfK0E;
       cfK0D: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK0E: // global
           I64[Sp - 24] = block_cfK0w_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK0Y; else goto cfK0x;
       ufK0Y: // global
           call _cfK0w(R1) args: 0, res: 0, upd: 0;
       cfK0x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_$c/=_info" {
     Data.Semigroup.$fEqArg_$c/=_info:
         const Data.Semigroup.$fEqArg_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK0w() //  [R1]
         { []
         }
     {offset
       cfK0w: // global
           I64[Sp] = block_cfK0C_info;
           _sfCck::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCck::P64;
           if (R1 & 7 != 0) goto ufK0X; else goto cfK0G;
       ufK0X: // global
           call _cfK0C(R1) args: 0, res: 0, upd: 0;
       cfK0G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK0w_info" {
     block_cfK0w_info:
         const _cfK0w;
         const 2;
         const 30;
 },
 _cfK0C() //  [R1]
         { []
         }
     {offset
       cfK0C: // global
           _sfCck::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfK0K_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfCck::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK0C_info" {
     block_cfK0C_info:
         const _cfK0C;
         const 2;
         const 30;
 },
 _cfK0K() //  [R1]
         { []
         }
     {offset
       cfK0K: // global
           if (R1 & 7 == 1) goto cfK0R; else goto cfK0V;
       cfK0R: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfK0V: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK0K_info" {
     block_cfK0K_info:
         const _cfK0K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.334023919 UTC

[section ""data" . Data.Semigroup.$fEqArg_closure" {
     Data.Semigroup.$fEqArg_closure:
         const Data.Semigroup.$fEqArg_info;
 },
 sat_sfCcs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK1t: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fEqArg_$c/=_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCcs_info" {
     sat_sfCcs_info:
         const sat_sfCcs_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCcr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK1B: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fEqArg_$c==_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCcr_info" {
     sat_sfCcr_info:
         const sat_sfCcr_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fEqArg_entry() //  [R2]
         { []
         }
     {offset
       cfK1F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfK1J; else goto cfK1I;
       cfK1J: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfK1I: // global
           I64[Hp - 48] = sat_sfCcs_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfCcr_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_info" {
     Data.Semigroup.$fEqArg_info:
         const Data.Semigroup.$fEqArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.342502108 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cmin_closure" {
     Data.Semigroup.$fOrdArg_$cmin_closure:
         const Data.Semigroup.$fOrdArg_$cmin_info;
 },
 Data.Semigroup.$fOrdArg_$cmin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK24: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfK28; else goto cfK29;
       cfK28: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK29: // global
           I64[Sp - 24] = block_cfK21_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK2t; else goto cfK22;
       ufK2t: // global
           call _cfK21(R1) args: 0, res: 0, upd: 0;
       cfK22: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cmin_info" {
     Data.Semigroup.$fOrdArg_$cmin_info:
         const Data.Semigroup.$fOrdArg_$cmin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK21() //  [R1]
         { []
         }
     {offset
       cfK21: // global
           I64[Sp - 8] = block_cfK27_info;
           _sfCcw::P64 = R1;
           _sfCcx::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCcx::P64;
           P64[Sp + 16] = _sfCcw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufK2s; else goto cfK2b;
       ufK2s: // global
           call _cfK27(R1) args: 0, res: 0, upd: 0;
       cfK2b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK21_info" {
     block_cfK21_info:
         const _cfK21;
         const 2;
         const 30;
 },
 _cfK27() //  [R1]
         { []
         }
     {offset
       cfK27: // global
           _sfCcx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfK2f_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sfCcx::P64;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK27_info" {
     block_cfK27_info:
         const _cfK27;
         const 3;
         const 30;
 },
 _cfK2f() //  [R1]
         { []
         }
     {offset
       cfK2f: // global
           if (R1 & 7 == 1) goto cfK2m; else goto cfK2q;
       cfK2m: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfK2q: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK2f_info" {
     block_cfK2f_info:
         const _cfK2f;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.352252233 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cmax_closure" {
     Data.Semigroup.$fOrdArg_$cmax_closure:
         const Data.Semigroup.$fOrdArg_$cmax_info;
 },
 Data.Semigroup.$fOrdArg_$cmax_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK2Y: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfK32; else goto cfK33;
       cfK32: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK33: // global
           I64[Sp - 24] = block_cfK2V_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK3n; else goto cfK2W;
       ufK3n: // global
           call _cfK2V(R1) args: 0, res: 0, upd: 0;
       cfK2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cmax_info" {
     Data.Semigroup.$fOrdArg_$cmax_info:
         const Data.Semigroup.$fOrdArg_$cmax_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK2V() //  [R1]
         { []
         }
     {offset
       cfK2V: // global
           I64[Sp - 8] = block_cfK31_info;
           _sfCcG::P64 = R1;
           _sfCcH::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCcH::P64;
           P64[Sp + 16] = _sfCcG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufK3m; else goto cfK35;
       ufK3m: // global
           call _cfK31(R1) args: 0, res: 0, upd: 0;
       cfK35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK2V_info" {
     block_cfK2V_info:
         const _cfK2V;
         const 2;
         const 30;
 },
 _cfK31() //  [R1]
         { []
         }
     {offset
       cfK31: // global
           _sfCcH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfK39_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sfCcH::P64;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK31_info" {
     block_cfK31_info:
         const _cfK31;
         const 3;
         const 30;
 },
 _cfK39() //  [R1]
         { []
         }
     {offset
       cfK39: // global
           if (R1 & 7 == 1) goto cfK3g; else goto cfK3k;
       cfK3g: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfK3k: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK39_info" {
     block_cfK39_info:
         const _cfK39;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.361645784 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$ccompare_closure" {
     Data.Semigroup.$fOrdArg_$ccompare_closure:
         const Data.Semigroup.$fOrdArg_$ccompare_info;
 },
 Data.Semigroup.$fOrdArg_$ccompare_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK3S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfK3W; else goto cfK3X;
       cfK3W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$ccompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK3X: // global
           I64[Sp - 24] = block_cfK3P_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK45; else goto cfK3Q;
       ufK45: // global
           call _cfK3P(R1) args: 0, res: 0, upd: 0;
       cfK3Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$ccompare_info" {
     Data.Semigroup.$fOrdArg_$ccompare_info:
         const Data.Semigroup.$fOrdArg_$ccompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK3P() //  [R1]
         { []
         }
     {offset
       cfK3P: // global
           I64[Sp] = block_cfK3V_info;
           _sfCcR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCcR::P64;
           if (R1 & 7 != 0) goto ufK44; else goto cfK3Z;
       ufK44: // global
           call _cfK3V(R1) args: 0, res: 0, upd: 0;
       cfK3Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK3P_info" {
     block_cfK3P_info:
         const _cfK3P;
         const 2;
         const 30;
 },
 _cfK3V() //  [R1]
         { []
         }
     {offset
       cfK3V: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK3V_info" {
     block_cfK3V_info:
         const _cfK3V;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.368834257 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cp1Ord_closure" {
     Data.Semigroup.$fOrdArg_$cp1Ord_closure:
         const Data.Semigroup.$fOrdArg_$cp1Ord_info;
 },
 sat_sfCcX_entry() //  [R1]
         { []
         }
     {offset
       cfK4t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfK4u; else goto cfK4v;
       cfK4u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfK4v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCcX_info" {
     sat_sfCcX_info:
         const sat_sfCcX_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdArg_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfK4w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfK4A; else goto cfK4z;
       cfK4A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfK4z: // global
           I64[Hp - 16] = sat_sfCcX_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqArg_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cp1Ord_info" {
     Data.Semigroup.$fOrdArg_$cp1Ord_info:
         const Data.Semigroup.$fOrdArg_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.375809329 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c<_closure" {
     Data.Semigroup.$fOrdArg_$c<_closure:
         const Data.Semigroup.$fOrdArg_$c<_info;
 },
 Data.Semigroup.$fOrdArg_$c<_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK4Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfK4U; else goto cfK4V;
       cfK4U: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK4V: // global
           I64[Sp - 24] = block_cfK4N_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK5f; else goto cfK4O;
       ufK5f: // global
           call _cfK4N(R1) args: 0, res: 0, upd: 0;
       cfK4O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c<_info" {
     Data.Semigroup.$fOrdArg_$c<_info:
         const Data.Semigroup.$fOrdArg_$c<_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK4N() //  [R1]
         { []
         }
     {offset
       cfK4N: // global
           I64[Sp] = block_cfK4T_info;
           _sfCd2::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCd2::P64;
           if (R1 & 7 != 0) goto ufK5e; else goto cfK4X;
       ufK5e: // global
           call _cfK4T(R1) args: 0, res: 0, upd: 0;
       cfK4X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK4N_info" {
     block_cfK4N_info:
         const _cfK4N;
         const 2;
         const 30;
 },
 _cfK4T() //  [R1]
         { []
         }
     {offset
       cfK4T: // global
           _sfCd2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfK51_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfCd2::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK4T_info" {
     block_cfK4T_info:
         const _cfK4T;
         const 2;
         const 30;
 },
 _cfK51() //  [R1]
         { []
         }
     {offset
       cfK51: // global
           if (R1 & 7 == 1) goto cfK5c; else goto cfK58;
       cfK5c: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfK58: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK51_info" {
     block_cfK51_info:
         const _cfK51;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.385156024 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c>_closure" {
     Data.Semigroup.$fOrdArg_$c>_closure:
         const Data.Semigroup.$fOrdArg_$c>_info;
 },
 Data.Semigroup.$fOrdArg_$c>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK5I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfK5M; else goto cfK5N;
       cfK5M: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK5N: // global
           I64[Sp - 24] = block_cfK5F_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK67; else goto cfK5G;
       ufK67: // global
           call _cfK5F(R1) args: 0, res: 0, upd: 0;
       cfK5G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c>_info" {
     Data.Semigroup.$fOrdArg_$c>_info:
         const Data.Semigroup.$fOrdArg_$c>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK5F() //  [R1]
         { []
         }
     {offset
       cfK5F: // global
           I64[Sp] = block_cfK5L_info;
           _sfCdc::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCdc::P64;
           if (R1 & 7 != 0) goto ufK66; else goto cfK5P;
       ufK66: // global
           call _cfK5L(R1) args: 0, res: 0, upd: 0;
       cfK5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK5F_info" {
     block_cfK5F_info:
         const _cfK5F;
         const 2;
         const 30;
 },
 _cfK5L() //  [R1]
         { []
         }
     {offset
       cfK5L: // global
           _sfCdc::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfK5T_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfCdc::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK5L_info" {
     block_cfK5L_info:
         const _cfK5L;
         const 2;
         const 30;
 },
 _cfK5T() //  [R1]
         { []
         }
     {offset
       cfK5T: // global
           if (R1 & 7 == 3) goto cfK64; else goto cfK60;
       cfK64: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfK60: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK5T_info" {
     block_cfK5T_info:
         const _cfK5T;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.395023299 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c<=_closure" {
     Data.Semigroup.$fOrdArg_$c<=_closure:
         const Data.Semigroup.$fOrdArg_$c<=_info;
 },
 Data.Semigroup.$fOrdArg_$c<=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK6A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfK6E; else goto cfK6F;
       cfK6E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK6F: // global
           I64[Sp - 24] = block_cfK6x_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK6Z; else goto cfK6y;
       ufK6Z: // global
           call _cfK6x(R1) args: 0, res: 0, upd: 0;
       cfK6y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c<=_info" {
     Data.Semigroup.$fOrdArg_$c<=_info:
         const Data.Semigroup.$fOrdArg_$c<=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK6x() //  [R1]
         { []
         }
     {offset
       cfK6x: // global
           I64[Sp] = block_cfK6D_info;
           _sfCdm::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCdm::P64;
           if (R1 & 7 != 0) goto ufK6Y; else goto cfK6H;
       ufK6Y: // global
           call _cfK6D(R1) args: 0, res: 0, upd: 0;
       cfK6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK6x_info" {
     block_cfK6x_info:
         const _cfK6x;
         const 2;
         const 30;
 },
 _cfK6D() //  [R1]
         { []
         }
     {offset
       cfK6D: // global
           _sfCdm::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfK6L_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfCdm::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK6D_info" {
     block_cfK6D_info:
         const _cfK6D;
         const 2;
         const 30;
 },
 _cfK6L() //  [R1]
         { []
         }
     {offset
       cfK6L: // global
           if (R1 & 7 == 3) goto cfK6W; else goto cfK6S;
       cfK6W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfK6S: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK6L_info" {
     block_cfK6L_info:
         const _cfK6L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.404601992 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c>=_closure" {
     Data.Semigroup.$fOrdArg_$c>=_closure:
         const Data.Semigroup.$fOrdArg_$c>=_info;
 },
 Data.Semigroup.$fOrdArg_$c>=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfK7s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfK7w; else goto cfK7x;
       cfK7w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfK7x: // global
           I64[Sp - 24] = block_cfK7p_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufK7R; else goto cfK7q;
       ufK7R: // global
           call _cfK7p(R1) args: 0, res: 0, upd: 0;
       cfK7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c>=_info" {
     Data.Semigroup.$fOrdArg_$c>=_info:
         const Data.Semigroup.$fOrdArg_$c>=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfK7p() //  [R1]
         { []
         }
     {offset
       cfK7p: // global
           I64[Sp] = block_cfK7v_info;
           _sfCdw::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCdw::P64;
           if (R1 & 7 != 0) goto ufK7Q; else goto cfK7z;
       ufK7Q: // global
           call _cfK7v(R1) args: 0, res: 0, upd: 0;
       cfK7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK7p_info" {
     block_cfK7p_info:
         const _cfK7p;
         const 2;
         const 30;
 },
 _cfK7v() //  [R1]
         { []
         }
     {offset
       cfK7v: // global
           _sfCdw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfK7D_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfCdw::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK7v_info" {
     block_cfK7v_info:
         const _cfK7v;
         const 2;
         const 30;
 },
 _cfK7D() //  [R1]
         { []
         }
     {offset
       cfK7D: // global
           if (R1 & 7 == 1) goto cfK7O; else goto cfK7K;
       cfK7O: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfK7K: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfK7D_info" {
     block_cfK7D_info:
         const _cfK7D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.415960288 UTC

[section ""data" . Data.Semigroup.$fOrdArg_closure" {
     Data.Semigroup.$fOrdArg_closure:
         const Data.Semigroup.$fOrdArg_info;
 },
 sat_sfCdK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK8m: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$cmin_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdK_info" {
     sat_sfCdK_info:
         const sat_sfCdK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK8u: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$cmax_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdJ_info" {
     sat_sfCdJ_info:
         const sat_sfCdJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK8C: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c>=_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdI_info" {
     sat_sfCdI_info:
         const sat_sfCdI_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK8K: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdH_info" {
     sat_sfCdH_info:
         const sat_sfCdH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK8S: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c<=_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdG_info" {
     sat_sfCdG_info:
         const sat_sfCdG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK90: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c<_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdF_info" {
     sat_sfCdF_info:
         const sat_sfCdF_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfK98: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$ccompare_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCdE_info" {
     sat_sfCdE_info:
         const sat_sfCdE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCdD_entry() //  [R1]
         { []
         }
     {offset
       cfK9f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfK9g; else goto cfK9h;
       cfK9g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfK9h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdArg_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCdD_info" {
     sat_sfCdD_info:
         const sat_sfCdD_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdArg_entry() //  [R2]
         { []
         }
     {offset
       cfK9j: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cfK9n; else goto cfK9m;
       cfK9n: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfK9m: // global
           I64[Hp - 200] = sat_sfCdK_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCdJ_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfCdI_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfCdH_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCdG_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfCdF_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCdE_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCdD_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_info" {
     Data.Semigroup.$fOrdArg_info:
         const Data.Semigroup.$fOrdArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.433937036 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$cbimap_closure" {
     Data.Semigroup.$fBifunctorArg_$cbimap_closure:
         const Data.Semigroup.$fBifunctorArg_$cbimap_info;
 },
 Data.Semigroup.$fBifunctorArg_$cbimap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKa7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKad; else goto cfKae;
       cfKad: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$cbimap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKae: // global
           I64[Sp - 24] = block_cfKa4_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufKai; else goto cfKa5;
       ufKai: // global
           call _cfKa4(R1) args: 0, res: 0, upd: 0;
       cfKa5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$cbimap_info" {
     Data.Semigroup.$fBifunctorArg_$cbimap_info:
         const Data.Semigroup.$fBifunctorArg_$cbimap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKa4() //  [R1]
         { []
         }
     {offset
       cfKa4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfKah; else goto cfKag;
       cfKah: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKag: // global
           _sfCdP::P64 = P64[R1 + 7];
           _sfCdQ::P64 = P64[R1 + 15];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sfCdQ::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCdP::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKa4_info" {
     block_cfKa4_info:
         const _cfKa4;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.440751596 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$cfirst_closure" {
     Data.Semigroup.$fBifunctorArg_$cfirst_closure:
         const Data.Semigroup.$fBifunctorArg_$cfirst_info;
 },
 Data.Semigroup.$fBifunctorArg_$cfirst_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKaE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKaJ; else goto cfKaK;
       cfKaJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$cfirst_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKaK: // global
           I64[Sp - 16] = block_cfKaB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKaO; else goto cfKaC;
       ufKaO: // global
           call _cfKaB(R1) args: 0, res: 0, upd: 0;
       cfKaC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$cfirst_info" {
     Data.Semigroup.$fBifunctorArg_$cfirst_info:
         const Data.Semigroup.$fBifunctorArg_$cfirst_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKaB() //  [R1]
         { []
         }
     {offset
       cfKaB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfKaN; else goto cfKaM;
       cfKaN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKaM: // global
           _sfCdW::P64 = P64[R1 + 7];
           _sfCdX::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCdW::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCdX::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKaB_info" {
     block_cfKaB_info:
         const _cfKaB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.447746206 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$csecond_closure" {
     Data.Semigroup.$fBifunctorArg_$csecond_closure:
         const Data.Semigroup.$fBifunctorArg_$csecond_info;
 },
 Data.Semigroup.$fBifunctorArg_$csecond_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKb8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKbd; else goto cfKbe;
       cfKbd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$csecond_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKbe: // global
           I64[Sp - 16] = block_cfKb5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKbi; else goto cfKb6;
       ufKbi: // global
           call _cfKb5(R1) args: 0, res: 0, upd: 0;
       cfKb6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$csecond_info" {
     Data.Semigroup.$fBifunctorArg_$csecond_info:
         const Data.Semigroup.$fBifunctorArg_$csecond_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKb5() //  [R1]
         { []
         }
     {offset
       cfKb5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfKbh; else goto cfKbg;
       cfKbh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKbg: // global
           _sfCe2::P64 = P64[R1 + 7];
           _sfCe3::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCe3::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCe2::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKb5_info" {
     block_cfKb5_info:
         const _cfKb5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.454309266 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_closure" {
     Data.Semigroup.$fBifunctorArg_closure:
         const Data.Bifunctor.C:Bifunctor_con_info;
         const Data.Semigroup.$fBifunctorArg_$cbimap_closure+3;
         const Data.Semigroup.$fBifunctorArg_$cfirst_closure+2;
         const Data.Semigroup.$fBifunctorArg_$csecond_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.458026235 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldMap_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cfKbD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKbJ; else goto cfKbK;
       cfKbJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKbK: // global
           I64[Sp - 32] = block_cfKbA_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKbS; else goto cfKbB;
       ufKbS: // global
           call _cfKbA(R1) args: 0, res: 0, upd: 0;
       cfKbB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldMap_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldMap_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfKbA() //  [R1]
         { []
         }
     {offset
       cfKbA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfKbN; else goto cfKbM;
       cfKbN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKbM: // global
           _sfCea::P64 = P64[R1 + 7];
           _sfCeb::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sfCeb::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sfCea::P64;
           _sfCe5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfKbI_info;
           R2 = _sfCe5::P64;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKbA_info" {
     block_cfKbA_info:
         const _cfKbA;
         const 3;
         const 30;
 },
 _cfKbI() //  [R1]
         { []
         }
     {offset
       cfKbI: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKbI_info" {
     block_cfKbI_info:
         const _cfKbI;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.466548464 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifold_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifold_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifold_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKcg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKck; else goto cfKcl;
       cfKck: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKcl: // global
           I64[Sp - 16] = block_cfKcd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKcr; else goto cfKce;
       ufKcr: // global
           call _cfKcd(R1) args: 0, res: 0, upd: 0;
       cfKce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifold_info" {
     Data.Semigroup.$fBifoldableArg_$cbifold_info:
         const Data.Semigroup.$fBifoldableArg_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKcd() //  [R1]
         { []
         }
     {offset
       cfKcd: // global
           I64[Sp - 8] = block_cfKcj_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKcd_info" {
     block_cfKcd_info:
         const _cfKcd;
         const 1;
         const 30;
 },
 _cfKcj() //  [R1]
         { []
         }
     {offset
       cfKcj: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfCej::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfCej::P64;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKcj_info" {
     block_cfKcj_info:
         const _cfKcj;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.474398125 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldr_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldr_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldr_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cfKcO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKcS; else goto cfKcT;
       cfKcS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKcT: // global
           I64[Sp - 32] = block_cfKcL_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKcX; else goto cfKcM;
       ufKcX: // global
           call _cfKcL(R1) args: 0, res: 0, upd: 0;
       cfKcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldr_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldr_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfKcL() //  [R1]
         { []
         }
     {offset
       cfKcL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKcW; else goto cfKcV;
       cfKcW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKcV: // global
           _sfCeq::P64 = P64[R1 + 7];
           _sfCer::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfCer::P64;
           P64[Hp] = P64[Sp + 24];
           R3 = Hp - 32;
           R2 = _sfCeq::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKcL_info" {
     block_cfKcL_info:
         const _cfKcL;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.48044299 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldl_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldl_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldl_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cfKdg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKdk; else goto cfKdl;
       cfKdk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKdl: // global
           I64[Sp - 32] = block_cfKdd_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKdp; else goto cfKde;
       ufKdp: // global
           call _cfKdd(R1) args: 0, res: 0, upd: 0;
       cfKde: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldl_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldl_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfKdd() //  [R1]
         { []
         }
     {offset
       cfKdd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKdo; else goto cfKdn;
       cfKdo: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKdn: // global
           _sfCey::P64 = P64[R1 + 7];
           _sfCez::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfCey::P64;
           R3 = _sfCez::P64;
           R2 = Hp - 32;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKdd_info" {
     block_cfKdd_info:
         const _cfKdd;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.485869966 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_closure" {
     Data.Semigroup.$fBifoldableArg_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Semigroup.$fBifoldableArg_$cbifold_closure+2;
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure+4;
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_closure+4;
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.489648849 UTC

[section ""data" . Data.Semigroup.$w$cbitraverse_closure" {
     Data.Semigroup.$w$cbitraverse_closure:
         const Data.Semigroup.$w$cbitraverse_info;
 },
 sat_sfCeI_entry() //  [R1]
         { []
         }
     {offset
       cfKdO: // global
           _sfCeI::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfKdP; else goto cfKdQ;
       cfKdQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKdS; else goto cfKdR;
       cfKdS: // global
           HpAlloc = 32;
           goto cfKdP;
       cfKdP: // global
           R1 = _sfCeI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKdR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCeI::P64;
           _sfCeB::P64 = P64[_sfCeI::P64 + 16];
           _sfCeC::P64 = P64[_sfCeI::P64 + 24];
           _sfCeE::P64 = P64[_sfCeI::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCeC::P64;
           P64[Hp] = _sfCeE::P64;
           I64[Sp - 32] = block_cfKdM_info;
           R2 = _sfCeB::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCeI_info" {
     sat_sfCeI_info:
         const sat_sfCeI_entry;
         const 3;
         const 15;
 },
 _cfKdM() //  [R1]
         { []
         }
     {offset
       cfKdM: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.Arg_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKdM_info" {
     block_cfKdM_info:
         const _cfKdM;
         const 1;
         const 30;
 },
 Data.Semigroup.$w$cbitraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfKdW: // global
           _sfCeF::P64 = R6;
           _sfCeE::P64 = R5;
           _sfCeD::P64 = R4;
           _sfCeC::P64 = R3;
           _sfCeB::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfKdX; else goto cfKdY;
       cfKdY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfKe0; else goto cfKdZ;
       cfKe0: // global
           HpAlloc = 72;
           goto cfKdX;
       cfKdX: // global
           R6 = _sfCeF::P64;
           R5 = _sfCeE::P64;
           R4 = _sfCeD::P64;
           R3 = _sfCeC::P64;
           R2 = _sfCeB::P64;
           R1 = Data.Semigroup.$w$cbitraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKdZ: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _sfCeD::P64;
           P64[Hp - 40] = _sfCeF::P64;
           I64[Hp - 32] = sat_sfCeI_info;
           P64[Hp - 16] = _sfCeB::P64;
           P64[Hp - 8] = _sfCeC::P64;
           P64[Hp] = _sfCeE::P64;
           R2 = _sfCeB::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.<*>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cbitraverse_info" {
     Data.Semigroup.$w$cbitraverse_info:
         const Data.Semigroup.$w$cbitraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.497490759 UTC

[section ""data" . Data.Semigroup.$fBitraversableArg_$cbitraverse_closure" {
     Data.Semigroup.$fBitraversableArg_$cbitraverse_closure:
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_info;
 },
 Data.Semigroup.$fBitraversableArg_$cbitraverse_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cfKen: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKeo; else goto cfKep;
       cfKeo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBitraversableArg_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKep: // global
           I64[Sp - 32] = block_cfKek_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKet; else goto cfKel;
       ufKet: // global
           call _cfKek(R1) args: 0, res: 0, upd: 0;
       cfKel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBitraversableArg_$cbitraverse_info" {
     Data.Semigroup.$fBitraversableArg_$cbitraverse_info:
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfKek() //  [R1]
         { []
         }
     {offset
       cfKek: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cbitraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKek_info" {
     block_cfKek_info:
         const _cfKek;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.502718176 UTC

[section ""data" . Data.Semigroup.$fBitraversableArg_closure" {
     Data.Semigroup.$fBitraversableArg_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Semigroup.$fBifunctorArg_closure+1;
         const Data.Semigroup.$fBifoldableArg_closure+1;
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.504763161 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$cstimes_closure" {
     Data.Semigroup.$fSemigroupFirst_$cstimes_closure:
         const Data.Semigroup.$fSemigroupFirst_$cstimes_info;
         const 0;
 },
 Data.Semigroup.$fSemigroupFirst_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKeI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$cstimes_info" {
     Data.Semigroup.$fSemigroupFirst_$cstimes_info:
         const Data.Semigroup.$fSemigroupFirst_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfCR7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.508071125 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$c<>_closure" {
     Data.Semigroup.$fSemigroupFirst_$c<>_closure:
         const Data.Semigroup.$fSemigroupFirst_$c<>_info;
 },
 Data.Semigroup.$fSemigroupFirst_$c<>_entry() //  [R2]
         { []
         }
     {offset
       cfKeT: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$c<>_info" {
     Data.Semigroup.$fSemigroupFirst_$c<>_info:
         const Data.Semigroup.$fSemigroupFirst_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.511935611 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$csconcat_closure" {
     Data.Semigroup.$fSemigroupFirst_$csconcat_closure:
         const Data.Semigroup.$fSemigroupFirst_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupFirst_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfKf7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKfb; else goto cfKfc;
       cfKfb: // global
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupFirst_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKfc: // global
           I64[Sp - 8] = block_cfKf4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKfk; else goto cfKf5;
       ufKfk: // global
           call _cfKf4(R1) args: 0, res: 0, upd: 0;
       cfKf5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$csconcat_info" {
     Data.Semigroup.$fSemigroupFirst_$csconcat_info:
         const Data.Semigroup.$fSemigroupFirst_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfKf4() //  [R1]
         { []
         }
     {offset
       cfKf4: // global
           I64[Sp - 8] = block_cfKfa_info;
           _sfCeW::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCeW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKfj; else goto cfKfe;
       ufKfj: // global
           call _cfKfa() args: 0, res: 0, upd: 0;
       cfKfe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKf4_info" {
     block_cfKf4_info:
         const _cfKf4;
         const 0;
         const 30;
 },
 _cfKfa() //  []
         { []
         }
     {offset
       cfKfa: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKfa_info" {
     block_cfKfa_info:
         const _cfKfa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.518622008 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_closure" {
     Data.Semigroup.$fSemigroupFirst_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Semigroup.$fSemigroupFirst_$c<>_closure+2;
         const Data.Semigroup.$fSemigroupFirst_$csconcat_closure+1;
         const Data.Semigroup.$fSemigroupFirst_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.520709546 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst2_closure" {
     Data.Semigroup.$fFunctorFirst2_closure:
         const Data.Semigroup.$fFunctorFirst2_info;
 },
 Data.Semigroup.$fFunctorFirst2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKfD: // global
           _sfCeZ::P64 = R2;
           R2 = R3;
           R1 = _sfCeZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorFirst2_info" {
     Data.Semigroup.$fFunctorFirst2_info:
         const Data.Semigroup.$fFunctorFirst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.524660131 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst1_closure" {
     Data.Semigroup.$fFunctorFirst1_closure:
         const Data.Semigroup.$fFunctorFirst1_info;
 },
 Data.Semigroup.$fFunctorFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfKfO: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorFirst1_info" {
     Data.Semigroup.$fFunctorFirst1_info:
         const Data.Semigroup.$fFunctorFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.528183822 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst_closure" {
     Data.Semigroup.$fFunctorFirst_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorFirst2_closure+2;
         const Data.Semigroup.$fFunctorFirst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.530189483 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfKg0: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldMap_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldMap_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.533570842 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst5_closure" {
     Data.Semigroup.$fFoldableFirst5_closure:
         const Data.Semigroup.$fFoldableFirst5_info;
 },
 Data.Semigroup.$fFoldableFirst5_entry() //  [R3]
         { []
         }
     {offset
       cfKgb: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst5_info" {
     Data.Semigroup.$fFoldableFirst5_info:
         const Data.Semigroup.$fFoldableFirst5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.536848811 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst1_closure" {
     Data.Semigroup.$fFoldableFirst1_closure:
         const Data.Semigroup.$fFoldableFirst1_info;
 },
 Data.Semigroup.$fFoldableFirst1_entry() //  [R3]
         { []
         }
     {offset
       cfKgm: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst1_info" {
     Data.Semigroup.$fFoldableFirst1_info:
         const Data.Semigroup.$fFoldableFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.540322975 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst2_closure" {
     Data.Semigroup.$fFoldableFirst2_closure:
         const Data.Semigroup.$fFoldableFirst2_info;
 },
 Data.Semigroup.$fFoldableFirst2_entry() //  [R3]
         { []
         }
     {offset
       cfKgx: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst2_info" {
     Data.Semigroup.$fFoldableFirst2_info:
         const Data.Semigroup.$fFoldableFirst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.54455358 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$celem_closure" {
     Data.Semigroup.$fFoldableFirst_$celem_closure:
         const Data.Semigroup.$fFoldableFirst_$celem_info;
 },
 f_sfCfe_entry() //  [R1]
         { []
         }
     {offset
       cfKgM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKgN; else goto cfKgO;
       cfKgN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCfe_info" {
     f_sfCfe_info:
         const f_sfCfe_entry;
         const 2;
         const 18;
 },
 sat_sfCfg_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKgU: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCfg_info" {
     sat_sfCfg_info:
         const sat_sfCfg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableFirst_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKgX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfKh1; else goto cfKh0;
       cfKh1: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableFirst_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKh0: // global
           I64[Hp - 40] = f_sfCfe_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfCfg_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$celem_info" {
     Data.Semigroup.$fFoldableFirst_$celem_info:
         const Data.Semigroup.$fFoldableFirst_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.551679237 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldl_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldl_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKhk: // global
           _sfCfi::P64 = R3;
           R3 = R4;
           _sfCfh::P64 = R2;
           R2 = _sfCfi::P64;
           R1 = _sfCfh::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldl_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldl_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.555970022 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst4_closure" {
     Data.Semigroup.$fFoldableFirst4_closure:
         const Data.Semigroup.$fFoldableFirst4_info;
 },
 Data.Semigroup.$fFoldableFirst4_entry() //  [R3]
         { []
         }
     {offset
       cfKhv: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst4_info" {
     Data.Semigroup.$fFoldableFirst4_info:
         const Data.Semigroup.$fFoldableFirst4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.55949025 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKhG: // global
           R3 = R3;
           _sfCfm::P64 = R2;
           R2 = R4;
           R1 = _sfCfm::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldr'_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldr'_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.562963643 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$clength_closure" {
     Data.Semigroup.$fFoldableFirst_$clength_closure:
         const Data.Semigroup.$fFoldableFirst_$clength_info;
 },
 Data.Semigroup.$fFoldableFirst_$clength_entry() //  []
         { []
         }
     {offset
       cfKhR: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$clength_info" {
     Data.Semigroup.$fFoldableFirst_$clength_info:
         const Data.Semigroup.$fFoldableFirst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.566313868 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cnull_closure" {
     Data.Semigroup.$fFoldableFirst_$cnull_closure:
         const Data.Semigroup.$fFoldableFirst_$cnull_info;
 },
 Data.Semigroup.$fFoldableFirst_$cnull_entry() //  []
         { []
         }
     {offset
       cfKi3: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cnull_info" {
     Data.Semigroup.$fFoldableFirst_$cnull_info:
         const Data.Semigroup.$fFoldableFirst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.570178455 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$ctoList_closure" {
     Data.Semigroup.$fFoldableFirst_$ctoList_closure:
         const Data.Semigroup.$fFoldableFirst_$ctoList_info;
 },
 Data.Semigroup.$fFoldableFirst_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfKig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKik; else goto cfKij;
       cfKik: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableFirst_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKij: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$ctoList_info" {
     Data.Semigroup.$fFoldableFirst_$ctoList_info:
         const Data.Semigroup.$fFoldableFirst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.57369012 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_closure" {
     Data.Semigroup.$fFoldableFirst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableFirst5_closure+2;
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableFirst4_closure+2;
         const Data.Semigroup.$fFoldableFirst4_closure+2;
         const Data.Semigroup.$fFoldableFirst_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableFirst_$cnull_closure+1;
         const Data.Semigroup.$fFoldableFirst_$clength_closure+1;
         const Data.Semigroup.$fFoldableFirst_$celem_closure+2;
         const Data.Semigroup.$fFoldableFirst2_closure+2;
         const Data.Semigroup.$fFoldableFirst2_closure+2;
         const Data.Semigroup.$fFoldableFirst1_closure+2;
         const Data.Semigroup.$fFoldableFirst1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.576460643 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$ctraverse_closure" {
     Data.Semigroup.$fTraversableFirst_$ctraverse_closure:
         const Data.Semigroup.$fTraversableFirst_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableFirst_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cfKiy: // global
           _sfCfu::P64 = R4;
           _sfCft::P64 = R3;
           _sfCfs::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfKiz; else goto cfKiA;
       cfKiA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKiC; else goto cfKiB;
       cfKiC: // global
           HpAlloc = 32;
           goto cfKiz;
       cfKiz: // global
           R4 = _sfCfu::P64;
           R3 = _sfCft::P64;
           R2 = _sfCfs::P64;
           R1 = Data.Semigroup.$fTraversableFirst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKiB: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCft::P64;
           P64[Hp] = _sfCfu::P64;
           I64[Sp - 16] = block_cfKiw_info;
           R2 = _sfCfs::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$ctraverse_info" {
     Data.Semigroup.$fTraversableFirst_$ctraverse_info:
         const Data.Semigroup.$fTraversableFirst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKiw() //  [R1]
         { []
         }
     {offset
       cfKiw: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKiw_info" {
     block_cfKiw_info:
         const _cfKiw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.582795854 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$csequenceA_closure" {
     Data.Semigroup.$fTraversableFirst_$csequenceA_closure:
         const Data.Semigroup.$fTraversableFirst_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableFirst_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKiV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKiW; else goto cfKiX;
       cfKiW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableFirst_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKiX: // global
           I64[Sp - 16] = block_cfKiT_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$csequenceA_info" {
     Data.Semigroup.$fTraversableFirst_$csequenceA_info:
         const Data.Semigroup.$fTraversableFirst_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKiT() //  [R1]
         { []
         }
     {offset
       cfKiT: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKiT_info" {
     block_cfKiT_info:
         const _cfKiT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.58915262 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$cmapM_closure" {
     Data.Semigroup.$fTraversableFirst_$cmapM_closure:
         const Data.Semigroup.$fTraversableFirst_$cmapM_info;
 },
 Data.Semigroup.$fTraversableFirst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKjg: // global
           _sfCfC::P64 = R4;
           _sfCfB::P64 = R3;
           _sfCfA::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfKjk; else goto cfKjl;
       cfKjl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKjn; else goto cfKjm;
       cfKjn: // global
           HpAlloc = 32;
           goto cfKjk;
       cfKjk: // global
           R4 = _sfCfC::P64;
           R3 = _sfCfB::P64;
           R2 = _sfCfA::P64;
           R1 = Data.Semigroup.$fTraversableFirst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKjm: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCfB::P64;
           P64[Hp] = _sfCfC::P64;
           I64[Sp - 16] = block_cfKje_info;
           R2 = _sfCfA::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$cmapM_info" {
     Data.Semigroup.$fTraversableFirst_$cmapM_info:
         const Data.Semigroup.$fTraversableFirst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKje() //  [R1]
         { []
         }
     {offset
       cfKje: // global
           I64[Sp] = block_cfKjj_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKje_info" {
     block_cfKje_info:
         const _cfKje;
         const 1;
         const 30;
 },
 _cfKjj() //  [R1]
         { []
         }
     {offset
       cfKjj: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKjj_info" {
     block_cfKjj_info:
         const _cfKjj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.596218649 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$csequence_closure" {
     Data.Semigroup.$fTraversableFirst_$csequence_closure:
         const Data.Semigroup.$fTraversableFirst_$csequence_info;
 },
 Data.Semigroup.$fTraversableFirst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKjL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKjP; else goto cfKjQ;
       cfKjP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableFirst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKjQ: // global
           I64[Sp - 16] = block_cfKjJ_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$csequence_info" {
     Data.Semigroup.$fTraversableFirst_$csequence_info:
         const Data.Semigroup.$fTraversableFirst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKjJ() //  [R1]
         { []
         }
     {offset
       cfKjJ: // global
           I64[Sp] = block_cfKjO_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKjJ_info" {
     block_cfKjJ_info:
         const _cfKjJ;
         const 1;
         const 30;
 },
 _cfKjO() //  [R1]
         { []
         }
     {offset
       cfKjO: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKjO_info" {
     block_cfKjO_info:
         const _cfKjO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.602209992 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_closure" {
     Data.Semigroup.$fTraversableFirst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorFirst_closure+1;
         const Data.Semigroup.$fFoldableFirst_closure+1;
         const Data.Semigroup.$fTraversableFirst_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableFirst_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableFirst_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableFirst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.604252116 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_$c<*_closure" {
     Data.Semigroup.$fApplicativeFirst_$c<*_closure:
         const Data.Semigroup.$fApplicativeFirst_$c<*_info;
 },
 Data.Semigroup.$fApplicativeFirst_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfKkc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst_$c<*_info" {
     Data.Semigroup.$fApplicativeFirst_$c<*_info:
         const Data.Semigroup.$fApplicativeFirst_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.608509548 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_$c*>_closure" {
     Data.Semigroup.$fApplicativeFirst_$c*>_closure:
         const Data.Semigroup.$fApplicativeFirst_$c*>_info;
 },
 Data.Semigroup.$fApplicativeFirst_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfKkn: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst_$c*>_info" {
     Data.Semigroup.$fApplicativeFirst_$c*>_info:
         const Data.Semigroup.$fApplicativeFirst_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.612547279 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst2_closure" {
     Data.Semigroup.$fApplicativeFirst2_closure:
         const Data.Semigroup.$fApplicativeFirst2_info;
 },
 Data.Semigroup.$fApplicativeFirst2_entry() //  [R2]
         { []
         }
     {offset
       cfKky: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst2_info" {
     Data.Semigroup.$fApplicativeFirst2_info:
         const Data.Semigroup.$fApplicativeFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.616017708 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_closure" {
     Data.Semigroup.$fApplicativeFirst_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorFirst_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeFirst2_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeFirst_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.618328982 UTC

[section ""data" . Data.Semigroup.$fMonadFirst_$c>>=_closure" {
     Data.Semigroup.$fMonadFirst_$c>>=_closure:
         const Data.Semigroup.$fMonadFirst_$c>>=_info;
 },
 Data.Semigroup.$fMonadFirst_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKkK: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFirst_$c>>=_info" {
     Data.Semigroup.$fMonadFirst_$c>>=_info:
         const Data.Semigroup.$fMonadFirst_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.623018145 UTC

[section ""data" . lvl4_rfC6a_closure" {
     lvl4_rfC6a_closure:
         const lvl4_rfC6a_info;
         const 0;
 },
 lvl4_rfC6a_entry() //  [R2]
         { []
         }
     {offset
       cfKkV: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rfC6a_info" {
     lvl4_rfC6a_info:
         const lvl4_rfC6a_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.626264541 UTC

[section ""data" . Data.Semigroup.$fMonadFirst_closure" {
     Data.Semigroup.$fMonadFirst_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeFirst_closure+1;
         const Data.Semigroup.$fMonadFirst_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeFirst_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl4_rfC6a_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.628669823 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$cstimes_closure" {
     Data.Semigroup.$fSemigroupLast_$cstimes_closure:
         const Data.Semigroup.$fSemigroupLast_$cstimes_info;
         const 0;
 },
 Data.Semigroup.$fSemigroupLast_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKl7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$cstimes_info" {
     Data.Semigroup.$fSemigroupLast_$cstimes_info:
         const Data.Semigroup.$fSemigroupLast_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfCR7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.632506387 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$c<>_closure" {
     Data.Semigroup.$fSemigroupLast_$c<>_closure:
         const Data.Semigroup.$fSemigroupLast_$c<>_info;
 },
 Data.Semigroup.$fSemigroupLast_$c<>_entry() //  [R3]
         { []
         }
     {offset
       cfKli: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$c<>_info" {
     Data.Semigroup.$fSemigroupLast_$c<>_info:
         const Data.Semigroup.$fSemigroupLast_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.637173635 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast1_closure" {
     Data.Semigroup.$fSemigroupLast1_closure:
         const Data.Semigroup.$fSemigroupLast1_info;
 },
 Data.Semigroup.$fSemigroupLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKlA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKlB; else goto ufKlJ;
       cfKlB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufKlJ: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfKlq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast1_info" {
     Data.Semigroup.$fSemigroupLast1_info:
         const Data.Semigroup.$fSemigroupLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKlq() //  []
         { []
         }
     {offset
       cfKlq: // global
           I64[Sp - 8] = block_cfKlt_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKlL; else goto cfKlu;
       ufKlL: // global
           call _cfKlt(R1) args: 0, res: 0, upd: 0;
       cfKlu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfKlt() //  [R1]
         { []
         }
     {offset
       cfKlt: // global
           if (R1 & 7 == 1) goto cfKlx; else goto cfKly;
       cfKlx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKly: // global
           P64[Sp + 8] = P64[R1 + 6];
           P64[Sp + 16] = P64[R1 + 14];
           Sp = Sp + 8;
           call _cfKlq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfKlt_info" {
     block_cfKlt_info:
         const _cfKlt;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.643760746 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$csconcat_closure" {
     Data.Semigroup.$fSemigroupLast_$csconcat_closure:
         const Data.Semigroup.$fSemigroupLast_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupLast_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfKma: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKmb; else goto cfKmc;
       cfKmb: // global
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupLast_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKmc: // global
           I64[Sp - 8] = block_cfKm7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKmg; else goto cfKm8;
       ufKmg: // global
           call _cfKm7(R1) args: 0, res: 0, upd: 0;
       cfKm8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$csconcat_info" {
     Data.Semigroup.$fSemigroupLast_$csconcat_info:
         const Data.Semigroup.$fSemigroupLast_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfKm7() //  [R1]
         { []
         }
     {offset
       cfKm7: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.$fSemigroupLast1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKm7_info" {
     block_cfKm7_info:
         const _cfKm7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.648960922 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_closure" {
     Data.Semigroup.$fSemigroupLast_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Semigroup.$fSemigroupLast_$c<>_closure+2;
         const Data.Semigroup.$fSemigroupLast_$csconcat_closure+1;
         const Data.Semigroup.$fSemigroupLast_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.651039997 UTC

[section ""data" . Data.Semigroup.$fFunctorLast1_closure" {
     Data.Semigroup.$fFunctorLast1_closure:
         const Data.Semigroup.$fFunctorLast1_info;
 },
 Data.Semigroup.$fFunctorLast1_entry() //  [R2]
         { []
         }
     {offset
       cfKmv: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorLast1_info" {
     Data.Semigroup.$fFunctorLast1_info:
         const Data.Semigroup.$fFunctorLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.655107256 UTC

[section ""data" . Data.Semigroup.$fFunctorLast2_closure" {
     Data.Semigroup.$fFunctorLast2_closure:
         const Data.Semigroup.$fFunctorLast2_info;
 },
 Data.Semigroup.$fFunctorLast2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKmG: // global
           _sfCg6::P64 = R2;
           R2 = R3;
           R1 = _sfCg6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorLast2_info" {
     Data.Semigroup.$fFunctorLast2_info:
         const Data.Semigroup.$fFunctorLast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.658582324 UTC

[section ""data" . Data.Semigroup.$fFunctorLast_closure" {
     Data.Semigroup.$fFunctorLast_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorLast2_closure+2;
         const Data.Semigroup.$fFunctorLast1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.660533161 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfKmS: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldMap_info" {
     Data.Semigroup.$fFoldableLast_$cfoldMap_info:
         const Data.Semigroup.$fFoldableLast_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.663805348 UTC

[section ""data" . Data.Semigroup.$fFoldableLast4_closure" {
     Data.Semigroup.$fFoldableLast4_closure:
         const Data.Semigroup.$fFoldableLast4_info;
 },
 Data.Semigroup.$fFoldableLast4_entry() //  [R3]
         { []
         }
     {offset
       cfKn3: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast4_info" {
     Data.Semigroup.$fFoldableLast4_info:
         const Data.Semigroup.$fFoldableLast4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.666966245 UTC

[section ""data" . Data.Semigroup.$fFoldableLast1_closure" {
     Data.Semigroup.$fFoldableLast1_closure:
         const Data.Semigroup.$fFoldableLast1_info;
 },
 Data.Semigroup.$fFoldableLast1_entry() //  [R3]
         { []
         }
     {offset
       cfKne: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast1_info" {
     Data.Semigroup.$fFoldableLast1_info:
         const Data.Semigroup.$fFoldableLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.67054099 UTC

[section ""data" . Data.Semigroup.$fFoldableLast2_closure" {
     Data.Semigroup.$fFoldableLast2_closure:
         const Data.Semigroup.$fFoldableLast2_info;
 },
 Data.Semigroup.$fFoldableLast2_entry() //  [R3]
         { []
         }
     {offset
       cfKnp: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast2_info" {
     Data.Semigroup.$fFoldableLast2_info:
         const Data.Semigroup.$fFoldableLast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.674739695 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$celem_closure" {
     Data.Semigroup.$fFoldableLast_$celem_closure:
         const Data.Semigroup.$fFoldableLast_$celem_info;
 },
 f_sfCgj_entry() //  [R1]
         { []
         }
     {offset
       cfKnE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKnF; else goto cfKnG;
       cfKnF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKnG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCgj_info" {
     f_sfCgj_info:
         const f_sfCgj_entry;
         const 2;
         const 18;
 },
 sat_sfCgl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKnM: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCgl_info" {
     sat_sfCgl_info:
         const sat_sfCgl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableLast_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKnP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfKnT; else goto cfKnS;
       cfKnT: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableLast_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKnS: // global
           I64[Hp - 40] = f_sfCgj_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfCgl_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$celem_info" {
     Data.Semigroup.$fFoldableLast_$celem_info:
         const Data.Semigroup.$fFoldableLast_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.68140502 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldl_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldl_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKoc: // global
           _sfCgn::P64 = R3;
           R3 = R4;
           _sfCgm::P64 = R2;
           R2 = _sfCgn::P64;
           R1 = _sfCgm::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldl_info" {
     Data.Semigroup.$fFoldableLast_$cfoldl_info:
         const Data.Semigroup.$fFoldableLast_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.685467055 UTC

[section ""data" . Data.Semigroup.$fFoldableLast3_closure" {
     Data.Semigroup.$fFoldableLast3_closure:
         const Data.Semigroup.$fFoldableLast3_info;
 },
 Data.Semigroup.$fFoldableLast3_entry() //  [R3]
         { []
         }
     {offset
       cfKon: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast3_info" {
     Data.Semigroup.$fFoldableLast3_info:
         const Data.Semigroup.$fFoldableLast3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.688769245 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKoy: // global
           R3 = R3;
           _sfCgr::P64 = R2;
           R2 = R4;
           R1 = _sfCgr::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldr'_info" {
     Data.Semigroup.$fFoldableLast_$cfoldr'_info:
         const Data.Semigroup.$fFoldableLast_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.692776562 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$clength_closure" {
     Data.Semigroup.$fFoldableLast_$clength_closure:
         const Data.Semigroup.$fFoldableLast_$clength_info;
 },
 Data.Semigroup.$fFoldableLast_$clength_entry() //  []
         { []
         }
     {offset
       cfKoJ: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$clength_info" {
     Data.Semigroup.$fFoldableLast_$clength_info:
         const Data.Semigroup.$fFoldableLast_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.696195874 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cnull_closure" {
     Data.Semigroup.$fFoldableLast_$cnull_closure:
         const Data.Semigroup.$fFoldableLast_$cnull_info;
 },
 Data.Semigroup.$fFoldableLast_$cnull_entry() //  []
         { []
         }
     {offset
       cfKoV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cnull_info" {
     Data.Semigroup.$fFoldableLast_$cnull_info:
         const Data.Semigroup.$fFoldableLast_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.699738328 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$ctoList_closure" {
     Data.Semigroup.$fFoldableLast_$ctoList_closure:
         const Data.Semigroup.$fFoldableLast_$ctoList_info;
 },
 Data.Semigroup.$fFoldableLast_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfKp8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKpc; else goto cfKpb;
       cfKpc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableLast_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKpb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$ctoList_info" {
     Data.Semigroup.$fFoldableLast_$ctoList_info:
         const Data.Semigroup.$fFoldableLast_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.703533572 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_closure" {
     Data.Semigroup.$fFoldableLast_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableLast4_closure+2;
         const Data.Semigroup.$fFoldableLast_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableLast3_closure+2;
         const Data.Semigroup.$fFoldableLast3_closure+2;
         const Data.Semigroup.$fFoldableLast_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableLast_$cnull_closure+1;
         const Data.Semigroup.$fFoldableLast_$clength_closure+1;
         const Data.Semigroup.$fFoldableLast_$celem_closure+2;
         const Data.Semigroup.$fFoldableLast2_closure+2;
         const Data.Semigroup.$fFoldableLast2_closure+2;
         const Data.Semigroup.$fFoldableLast1_closure+2;
         const Data.Semigroup.$fFoldableLast1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.706320495 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$ctraverse_closure" {
     Data.Semigroup.$fTraversableLast_$ctraverse_closure:
         const Data.Semigroup.$fTraversableLast_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableLast_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cfKpq: // global
           _sfCgz::P64 = R4;
           _sfCgy::P64 = R3;
           _sfCgx::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfKpr; else goto cfKps;
       cfKps: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKpu; else goto cfKpt;
       cfKpu: // global
           HpAlloc = 32;
           goto cfKpr;
       cfKpr: // global
           R4 = _sfCgz::P64;
           R3 = _sfCgy::P64;
           R2 = _sfCgx::P64;
           R1 = Data.Semigroup.$fTraversableLast_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKpt: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCgy::P64;
           P64[Hp] = _sfCgz::P64;
           I64[Sp - 16] = block_cfKpo_info;
           R2 = _sfCgx::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$ctraverse_info" {
     Data.Semigroup.$fTraversableLast_$ctraverse_info:
         const Data.Semigroup.$fTraversableLast_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKpo() //  [R1]
         { []
         }
     {offset
       cfKpo: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKpo_info" {
     block_cfKpo_info:
         const _cfKpo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.711833379 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$csequenceA_closure" {
     Data.Semigroup.$fTraversableLast_$csequenceA_closure:
         const Data.Semigroup.$fTraversableLast_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableLast_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKpN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKpO; else goto cfKpP;
       cfKpO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableLast_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKpP: // global
           I64[Sp - 16] = block_cfKpL_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$csequenceA_info" {
     Data.Semigroup.$fTraversableLast_$csequenceA_info:
         const Data.Semigroup.$fTraversableLast_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKpL() //  [R1]
         { []
         }
     {offset
       cfKpL: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKpL_info" {
     block_cfKpL_info:
         const _cfKpL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.718404875 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$cmapM_closure" {
     Data.Semigroup.$fTraversableLast_$cmapM_closure:
         const Data.Semigroup.$fTraversableLast_$cmapM_info;
 },
 Data.Semigroup.$fTraversableLast_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKq8: // global
           _sfCgH::P64 = R4;
           _sfCgG::P64 = R3;
           _sfCgF::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfKqc; else goto cfKqd;
       cfKqd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKqf; else goto cfKqe;
       cfKqf: // global
           HpAlloc = 32;
           goto cfKqc;
       cfKqc: // global
           R4 = _sfCgH::P64;
           R3 = _sfCgG::P64;
           R2 = _sfCgF::P64;
           R1 = Data.Semigroup.$fTraversableLast_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKqe: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCgG::P64;
           P64[Hp] = _sfCgH::P64;
           I64[Sp - 16] = block_cfKq6_info;
           R2 = _sfCgF::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$cmapM_info" {
     Data.Semigroup.$fTraversableLast_$cmapM_info:
         const Data.Semigroup.$fTraversableLast_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKq6() //  [R1]
         { []
         }
     {offset
       cfKq6: // global
           I64[Sp] = block_cfKqb_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKq6_info" {
     block_cfKq6_info:
         const _cfKq6;
         const 1;
         const 30;
 },
 _cfKqb() //  [R1]
         { []
         }
     {offset
       cfKqb: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKqb_info" {
     block_cfKqb_info:
         const _cfKqb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.72574426 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$csequence_closure" {
     Data.Semigroup.$fTraversableLast_$csequence_closure:
         const Data.Semigroup.$fTraversableLast_$csequence_info;
 },
 Data.Semigroup.$fTraversableLast_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKqD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKqH; else goto cfKqI;
       cfKqH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableLast_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKqI: // global
           I64[Sp - 16] = block_cfKqB_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$csequence_info" {
     Data.Semigroup.$fTraversableLast_$csequence_info:
         const Data.Semigroup.$fTraversableLast_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKqB() //  [R1]
         { []
         }
     {offset
       cfKqB: // global
           I64[Sp] = block_cfKqG_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKqB_info" {
     block_cfKqB_info:
         const _cfKqB;
         const 1;
         const 30;
 },
 _cfKqG() //  [R1]
         { []
         }
     {offset
       cfKqG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKqG_info" {
     block_cfKqG_info:
         const _cfKqG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.73181829 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_closure" {
     Data.Semigroup.$fTraversableLast_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorLast_closure+1;
         const Data.Semigroup.$fFoldableLast_closure+1;
         const Data.Semigroup.$fTraversableLast_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableLast_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableLast_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableLast_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.734149494 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_$c<*_closure" {
     Data.Semigroup.$fApplicativeLast_$c<*_closure:
         const Data.Semigroup.$fApplicativeLast_$c<*_info;
 },
 Data.Semigroup.$fApplicativeLast_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfKr4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast_$c<*_info" {
     Data.Semigroup.$fApplicativeLast_$c<*_info:
         const Data.Semigroup.$fApplicativeLast_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.73746798 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_$c*>_closure" {
     Data.Semigroup.$fApplicativeLast_$c*>_closure:
         const Data.Semigroup.$fApplicativeLast_$c*>_info;
 },
 Data.Semigroup.$fApplicativeLast_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfKrf: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast_$c*>_info" {
     Data.Semigroup.$fApplicativeLast_$c*>_info:
         const Data.Semigroup.$fApplicativeLast_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.740826211 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast1_closure" {
     Data.Semigroup.$fApplicativeLast1_closure:
         const Data.Semigroup.$fApplicativeLast1_info;
 },
 Data.Semigroup.$fApplicativeLast1_entry() //  [R2]
         { []
         }
     {offset
       cfKrq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast1_info" {
     Data.Semigroup.$fApplicativeLast1_info:
         const Data.Semigroup.$fApplicativeLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.743937742 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_closure" {
     Data.Semigroup.$fApplicativeLast_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorLast_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeLast1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeLast_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeLast_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.746091089 UTC

[section ""data" . Data.Semigroup.$fMonadLast_$c>>=_closure" {
     Data.Semigroup.$fMonadLast_$c>>=_closure:
         const Data.Semigroup.$fMonadLast_$c>>=_info;
 },
 Data.Semigroup.$fMonadLast_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKrC: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadLast_$c>>=_info" {
     Data.Semigroup.$fMonadLast_$c>>=_info:
         const Data.Semigroup.$fMonadLast_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.750392832 UTC

[section ""data" . lvl5_rfC6b_closure" {
     lvl5_rfC6b_closure:
         const lvl5_rfC6b_info;
         const 0;
 },
 lvl5_rfC6b_entry() //  [R2]
         { []
         }
     {offset
       cfKrN: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rfC6b_info" {
     lvl5_rfC6b_info:
         const lvl5_rfC6b_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.753310514 UTC

[section ""data" . Data.Semigroup.$fMonadLast_closure" {
     Data.Semigroup.$fMonadLast_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeLast_closure+1;
         const Data.Semigroup.$fMonadLast_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeLast_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl5_rfC6b_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.756838341 UTC

[section ""data" . Data.Semigroup.$w$csconcat3_closure" {
     Data.Semigroup.$w$csconcat3_closure:
         const Data.Semigroup.$w$csconcat3_info;
 },
 go_sfCh0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfKsb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKsc; else goto cfKsd;
       cfKsc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKsd: // global
           I64[Sp - 32] = block_cfKs4_info;
           _sfCh0::P64 = R1;
           _sfCgX::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfCgX::P64;
           P64[Sp - 16] = _sfCh0::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKsn; else goto cfKs5;
       ufKsn: // global
           call _cfKs4(R1) args: 0, res: 0, upd: 0;
       cfKs5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfCh0_info" {
     go_sfCh0_info:
         const go_sfCh0_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfKs4() //  [R1]
         { []
         }
     {offset
       cfKs4: // global
           _sfCh1::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfKs8; else goto cfKs9;
       cfKs8: // global
           R1 = _sfCh1::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKs9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKsl; else goto cfKsk;
       cfKsl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKsk: // global
           _sfCh4::P64 = P64[R1 + 6];
           _sfCh5::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfCh4::P64;
           P64[Hp] = _sfCh5::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfCh1::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKs4_info" {
     block_cfKs4_info:
         const _cfKs4;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKso: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfKss; else goto cfKsr;
       cfKss: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKsr: // global
           I64[Hp - 8] = go_sfCh0_info;
           P64[Hp] = R2;
           _sfCgY::P64 = R3;
           R3 = R4;
           R2 = _sfCgY::P64;
           R1 = Hp - 6;
           call go_sfCh0_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat3_info" {
     Data.Semigroup.$w$csconcat3_info:
         const Data.Semigroup.$w$csconcat3_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.765088637 UTC

[section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cfKsQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKsR; else goto cfKsS;
       cfKsR: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKsS: // global
           I64[Sp - 16] = block_cfKsN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKsW; else goto cfKsO;
       ufKsW: // global
           call _cfKsN(R1) args: 0, res: 0, upd: 0;
       cfKsO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKsN() //  [R1]
         { []
         }
     {offset
       cfKsN: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat3_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKsN_info" {
     block_cfKsN_info:
         const _cfKsN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.772248773 UTC

[section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_info;
         const 0;
 },
 sat_sfChf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKtf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfChf_info" {
     sat_sfChf_info:
         const sat_sfChf_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+48;
 },
 sat_sfChe_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKtn: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfChe_info" {
     sat_sfChe_info:
         const sat_sfChe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfChd_entry() //  [R1]
         { []
         }
     {offset
       cfKtu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKtv; else goto cfKtw;
       cfKtv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKtw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfChd_info" {
     sat_sfChd_info:
         const sat_sfChd_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfKty: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfKtC; else goto cfKtB;
       cfKtC: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKtB: // global
           I64[Hp - 80] = sat_sfChf_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sfChe_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfChd_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+48;
 },
 section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info;
         const 0;
 },
 sat_sfChi_entry() //  [R1]
         { []
         }
     {offset
       cfKtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKtM; else goto cfKtN;
       cfKtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKtN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfChi_info" {
     sat_sfChi_info:
         const sat_sfChi_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+56;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cfKtO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKtS; else goto cfKtR;
       cfKtS: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKtR: // global
           I64[Hp - 16] = sat_sfChi_info;
           P64[Hp] = R2;
           _sfChh::P64 = R3;
           R3 = Hp - 16;
           R2 = _sfChh::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfCR7_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.78686132 UTC

[section ""data" . Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure" {
     Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure:
         const Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info;
 },
 z_sfChl_entry() //  [R1]
         { []
         }
     {offset
       cfKur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKus; else goto cfKut;
       cfKus: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfChl_info" {
     z_sfChl_info:
         const z_sfChl_entry;
         const 1;
         const 16;
 },
 go_sfChm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKuG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKuH; else goto cfKuI;
       cfKuH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKuI: // global
           I64[Sp - 32] = block_cfKuz_info;
           _sfChm::P64 = R1;
           _sfChj::P64 = P64[R1 + 7];
           _sfChl::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfChj::P64;
           P64[Sp - 16] = _sfChl::P64;
           P64[Sp - 8] = _sfChm::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKuS; else goto cfKuA;
       ufKuS: // global
           call _cfKuz(R1) args: 0, res: 0, upd: 0;
       cfKuA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfChm_info" {
     go_sfChm_info:
         const go_sfChm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfKuz() //  [R1]
         { []
         }
     {offset
       cfKuz: // global
           if (R1 & 7 == 1) goto cfKuD; else goto cfKuE;
       cfKuD: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKuE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKuQ; else goto cfKuP;
       cfKuQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKuP: // global
           _sfChp::P64 = P64[R1 + 6];
           _sfChq::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfChq::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfChp::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKuz_info" {
     block_cfKuz_info:
         const _cfKuz;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKuT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfKuX; else goto cfKuW;
       cfKuX: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKuW: // global
           I64[Hp - 40] = z_sfChl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_sfChm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_sfChm_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info" {
     Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info:
         const Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.798896091 UTC

[section ""data" . Data.Semigroup.$fMonoidWrappedMonoid_closure" {
     Data.Semigroup.$fMonoidWrappedMonoid_closure:
         const Data.Semigroup.$fMonoidWrappedMonoid_info;
         const 0;
 },
 sat_sfChw_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKvs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfChw_info" {
     sat_sfChw_info:
         const sat_sfChw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfChv_entry() //  [R1]
         { []
         }
     {offset
       cfKvz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKvA; else goto cfKvB;
       cfKvA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKvB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfChv_info" {
     sat_sfChv_info:
         const sat_sfChv_entry;
         const 1;
         const 16;
 },
 sat_sfChu_entry() //  [R1]
         { []
         }
     {offset
       cfKvG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKvH; else goto cfKvI;
       cfKvH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKvI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfChu_info" {
     sat_sfChu_info:
         const sat_sfChu_entry;
         const 1;
         const 16;
 },
 sat_sfCht_entry() //  [R1]
         { []
         }
     {offset
       cfKvN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKvO; else goto cfKvP;
       cfKvO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKvP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCht_info" {
     sat_sfCht_info:
         const sat_sfCht_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+56;
 },
 Data.Semigroup.$fMonoidWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfKvR: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfKvV; else goto cfKvU;
       cfKvV: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKvU: // global
           I64[Hp - 120] = sat_sfChw_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfChv_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfChu_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCht_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 119;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidWrappedMonoid_info" {
     Data.Semigroup.$fMonoidWrappedMonoid_info:
         const Data.Semigroup.$fMonoidWrappedMonoid_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfCR7_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.810026692 UTC

[section ""data" . Data.Semigroup.$fFunctorOption1_closure" {
     Data.Semigroup.$fFunctorOption1_closure:
         const Data.Semigroup.$fFunctorOption1_info;
 },
 Data.Semigroup.$fFunctorOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKwv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKww; else goto cfKwx;
       cfKww: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKwx: // global
           I64[Sp - 16] = block_cfKwo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKwH; else goto cfKwp;
       ufKwH: // global
           call _cfKwo(R1) args: 0, res: 0, upd: 0;
       cfKwp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorOption1_info" {
     Data.Semigroup.$fFunctorOption1_info:
         const Data.Semigroup.$fFunctorOption1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKwo() //  [R1]
         { []
         }
     {offset
       cfKwo: // global
           if (R1 & 7 == 1) goto cfKws; else goto cfKwt;
       cfKws: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKwt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfKwG; else goto cfKwF;
       cfKwG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKwF: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKwo_info" {
     block_cfKwo_info:
         const _cfKwo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.815260888 UTC

[section ""data" . Data.Semigroup.$fFunctorOption_closure" {
     Data.Semigroup.$fFunctorOption_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const Data.Semigroup.$fFunctorOption1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.818066367 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption_$c*>_closure" {
     Data.Semigroup.$fApplicativeOption_$c*>_closure:
         const Data.Semigroup.$fApplicativeOption_$c*>_info;
 },
 Data.Semigroup.$fApplicativeOption_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKx8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKx9; else goto cfKxa;
       cfKx9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fApplicativeOption_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKxa: // global
           I64[Sp - 16] = block_cfKx1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKxh; else goto cfKx2;
       ufKxh: // global
           call _cfKx1(R1) args: 0, res: 0, upd: 0;
       cfKx2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeOption_$c*>_info" {
     Data.Semigroup.$fApplicativeOption_$c*>_info:
         const Data.Semigroup.$fApplicativeOption_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKx1() //  [R1]
         { []
         }
     {offset
       cfKx1: // global
           if (R1 & 7 == 1) goto cfKx5; else goto cfKx6;
       cfKx5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKx6: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKx1_info" {
     block_cfKx1_info:
         const _cfKx1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.824396197 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption1_closure" {
     Data.Semigroup.$fApplicativeOption1_closure:
         const Data.Semigroup.$fApplicativeOption1_info;
 },
 Data.Semigroup.$fApplicativeOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKxH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKxI; else goto cfKxJ;
       cfKxI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fApplicativeOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKxJ: // global
           I64[Sp - 16] = block_cfKxA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKy7; else goto cfKxB;
       ufKy7: // global
           call _cfKxA(R1) args: 0, res: 0, upd: 0;
       cfKxB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeOption1_info" {
     Data.Semigroup.$fApplicativeOption1_info:
         const Data.Semigroup.$fApplicativeOption1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKxA() //  [R1]
         { []
         }
     {offset
       cfKxA: // global
           if (R1 & 7 == 1) goto ufKy3; else goto cfKxF;
       ufKy3: // global
           Sp = Sp + 16;
           call _cfKxX() args: 0, res: 0, upd: 0;
       cfKxF: // global
           I64[Sp] = block_cfKxP_info;
           _sfChH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfChH::P64;
           if (R1 & 7 != 0) goto ufKy5; else goto cfKxR;
       ufKy5: // global
           call _cfKxP(R1) args: 0, res: 0, upd: 0;
       cfKxR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKxA_info" {
     block_cfKxA_info:
         const _cfKxA;
         const 1;
         const 30;
 },
 _cfKxP() //  [R1]
         { []
         }
     {offset
       cfKxP: // global
           if (R1 & 7 == 1) goto ufKy4; else goto cfKy1;
       ufKy4: // global
           Sp = Sp + 16;
           call _cfKxX() args: 0, res: 0, upd: 0;
       cfKy1: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKxP_info" {
     block_cfKxP_info:
         const _cfKxP;
         const 1;
         const 30;
 },
 _cfKxX() //  []
         { []
         }
     {offset
       cfKxX: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.832961887 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption_closure" {
     Data.Semigroup.$fApplicativeOption_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorOption_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const Data.Semigroup.$fApplicativeOption_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeOption1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.835860265 UTC

[section ""data" . Data.Semigroup.$fMonadOption_$c>>=_closure" {
     Data.Semigroup.$fMonadOption_$c>>=_closure:
         const Data.Semigroup.$fMonadOption_$c>>=_info;
 },
 Data.Semigroup.$fMonadOption_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKyH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKyI; else goto cfKyJ;
       cfKyI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadOption_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKyJ: // global
           I64[Sp - 16] = block_cfKyA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKyQ; else goto cfKyB;
       ufKyQ: // global
           call _cfKyA(R1) args: 0, res: 0, upd: 0;
       cfKyB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadOption_$c>>=_info" {
     Data.Semigroup.$fMonadOption_$c>>=_info:
         const Data.Semigroup.$fMonadOption_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKyA() //  [R1]
         { []
         }
     {offset
       cfKyA: // global
           if (R1 & 7 == 1) goto cfKyE; else goto cfKyF;
       cfKyE: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKyF: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKyA_info" {
     block_cfKyA_info:
         const _cfKyA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.841045818 UTC

[section ""data" . lvl6_rfC6c_closure" {
     lvl6_rfC6c_closure:
         const lvl6_rfC6c_info;
         const 0;
 },
 lvl6_rfC6c_entry() //  [R2]
         { []
         }
     {offset
       cfKz7: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rfC6c_info" {
     lvl6_rfC6c_info:
         const lvl6_rfC6c_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.844070772 UTC

[section ""data" . Data.Semigroup.$fMonadOption_closure" {
     Data.Semigroup.$fMonadOption_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeOption_closure+1;
         const Data.Semigroup.$fMonadOption_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeOption_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const lvl6_rfC6c_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.846907658 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$c<|>_closure" {
     Data.Semigroup.$fAlternativeOption_$c<|>_closure:
         const Data.Semigroup.$fAlternativeOption_$c<|>_info;
 },
 Data.Semigroup.$fAlternativeOption_$c<|>_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKzq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKzr; else goto cfKzs;
       cfKzr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKzs: // global
           I64[Sp - 16] = block_cfKzj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKzz; else goto cfKzk;
       ufKzz: // global
           call _cfKzj(R1) args: 0, res: 0, upd: 0;
       cfKzk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$c<|>_info" {
     Data.Semigroup.$fAlternativeOption_$c<|>_info:
         const Data.Semigroup.$fAlternativeOption_$c<|>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKzj() //  [R1]
         { []
         }
     {offset
       cfKzj: // global
           if (R1 & 7 == 1) goto cfKzn; else goto cfKzo;
       cfKzn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfKzo: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKzj_info" {
     block_cfKzj_info:
         const _cfKzj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.8539114 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$csome_closure" {
     Data.Semigroup.$fAlternativeOption_$csome_closure:
         const Data.Semigroup.$fAlternativeOption_$csome_info;
 },
 some_v_sfChV_entry() //  [R1]
         { []
         }
     {offset
       cfKA4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKA5; else goto cfKA6;
       cfKA5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKA6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfKzX_info;
           _sfChV::P64 = R1;
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfChV::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKAz; else goto cfKzY;
       ufKAz: // global
           call _cfKzX(R1) args: 0, res: 0, upd: 0;
       cfKzY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sfChV_info" {
     some_v_sfChV_info:
         const some_v_sfChV_entry;
         const 1;
         const 16;
 },
 _cfKzX() //  [R1]
         { []
         }
     {offset
       cfKzX: // global
           if (R1 & 7 == 1) goto cfKA1; else goto cfKA2;
       cfKA1: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cfKA2: // global
           I64[Sp] = block_cfKAc_info;
           _sfChX::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfChX::P64;
           if (R1 & 7 != 0) goto ufKAy; else goto cfKAe;
       ufKAy: // global
           call _cfKAc(R1) args: 0, res: 0, upd: 0;
       cfKAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKzX_info" {
     block_cfKzX_info:
         const _cfKzX;
         const 1;
         const 30;
 },
 _cfKAc() //  [R1]
         { []
         }
     {offset
       cfKAc: // global
           _sfChX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKAl; else goto cfKAt;
       cfKAl: // global
           Hp = Hp + 40;
           _sfChY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cfKAw; else goto cfKAn;
       cfKAn: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _sfChX::P64;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cfKAt: // global
           Hp = Hp + 40;
           _sfChY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cfKAw; else goto cfKAv;
       cfKAw: // global
           HpAlloc = 40;
           R1 = _sfChY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfKAv: // global
           _sfCi0::P64 = P64[_sfChY::P64 + 6];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _sfChX::P64;
           P64[Hp - 16] = _sfCi0::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKAc_info" {
     block_cfKAc_info:
         const _cfKAc;
         const 1;
         const 30;
 },
 Data.Semigroup.$fAlternativeOption_$csome_entry() //  [R2]
         { []
         }
     {offset
       cfKAA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKAE; else goto cfKAD;
       cfKAE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKAD: // global
           I64[Hp - 16] = some_v_sfChV_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$csome_info" {
     Data.Semigroup.$fAlternativeOption_$csome_info:
         const Data.Semigroup.$fAlternativeOption_$csome_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.863425743 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption1_closure" {
     Data.Semigroup.$fAlternativeOption1_closure:
         const GHC.Base.Just_con_info;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.867200052 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$cmany_closure" {
     Data.Semigroup.$fAlternativeOption_$cmany_closure:
         const Data.Semigroup.$fAlternativeOption_$cmany_info;
 },
 many_v_sfCi3_entry() //  [R1]
         { []
         }
     {offset
       cfKBm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKBn; else goto cfKBo;
       cfKBn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfKBf_info;
           _sfCi3::P64 = R1;
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfCi3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKBQ; else goto cfKBg;
       ufKBQ: // global
           call _cfKBf(R1) args: 0, res: 0, upd: 0;
       cfKBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sfCi3_info" {
     many_v_sfCi3_info:
         const many_v_sfCi3_entry;
         const 1;
         const 16;
 },
 _cfKBf() //  [R1]
         { []
         }
     {offset
       cfKBf: // global
           if (R1 & 7 == 1) goto ufKBM; else goto cfKBk;
       ufKBM: // global
           Sp = Sp + 16;
           call _cfKBC() args: 0, res: 0, upd: 0;
       cfKBk: // global
           I64[Sp] = block_cfKBu_info;
           _sfCi5::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfCi5::P64;
           if (R1 & 7 != 0) goto ufKBO; else goto cfKBw;
       ufKBO: // global
           call _cfKBu(R1) args: 0, res: 0, upd: 0;
       cfKBw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKBf_info" {
     block_cfKBf_info:
         const _cfKBf;
         const 1;
         const 30;
 },
 _cfKBu() //  [R1]
         { []
         }
     {offset
       cfKBu: // global
           if (R1 & 7 == 1) goto ufKBN; else goto cfKBH;
       ufKBN: // global
           Sp = Sp + 16;
           call _cfKBC() args: 0, res: 0, upd: 0;
       cfKBH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKBK; else goto cfKBJ;
       cfKBK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfKBJ: // global
           _sfCi7::P64 = P64[R1 + 6];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfCi7::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKBu_info" {
     block_cfKBu_info:
         const _cfKBu;
         const 1;
         const 30;
 },
 _cfKBC() //  []
         { []
         }
     {offset
       cfKBC: // global
           R1 = Data.Semigroup.$fAlternativeOption1_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Semigroup.$fAlternativeOption_$cmany_entry() //  [R2]
         { []
         }
     {offset
       cfKBS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKBW; else goto cfKBV;
       cfKBW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKBV: // global
           I64[Hp - 16] = many_v_sfCi3_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$cmany_info" {
     Data.Semigroup.$fAlternativeOption_$cmany_info:
         const Data.Semigroup.$fAlternativeOption_$cmany_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.876581511 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_closure" {
     Data.Semigroup.$fAlternativeOption_closure:
         const GHC.Base.C:Alternative_con_info;
         const Data.Semigroup.$fApplicativeOption_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Semigroup.$fAlternativeOption_$c<|>_closure+2;
         const Data.Semigroup.$fAlternativeOption_$csome_closure+1;
         const Data.Semigroup.$fAlternativeOption_$cmany_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.878463659 UTC

[section ""data" . Data.Semigroup.$fMonadPlusOption_closure" {
     Data.Semigroup.$fMonadPlusOption_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Data.Semigroup.$fAlternativeOption_closure+1;
         const Data.Semigroup.$fMonadOption_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Semigroup.$fAlternativeOption_$c<|>_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.881670058 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKCC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKCD; else goto cfKCE;
       cfKCD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKCE: // global
           I64[Sp - 24] = block_cfKCv_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufKCL; else goto cfKCw;
       ufKCL: // global
           call _cfKCv(R1) args: 0, res: 0, upd: 0;
       cfKCw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldMap_info" {
     Data.Semigroup.$fFoldableOption_$cfoldMap_info:
         const Data.Semigroup.$fFoldableOption_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKCv() //  [R1]
         { []
         }
     {offset
       cfKCv: // global
           if (R1 & 7 == 1) goto cfKCz; else goto cfKCA;
       cfKCz: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       cfKCA: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKCv_info" {
     block_cfKCv_info:
         const _cfKCv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.889753505 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfold_closure" {
     Data.Semigroup.$fFoldableOption_$cfold_closure:
         const Data.Semigroup.$fFoldableOption_$cfold_info;
 },
 Data.Semigroup.$fFoldableOption_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKD9; else goto cfKDa;
       cfKD9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKDa: // global
           I64[Sp - 16] = block_cfKD1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKDh; else goto cfKD2;
       ufKDh: // global
           call _cfKD1(R1) args: 0, res: 0, upd: 0;
       cfKD2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfold_info" {
     Data.Semigroup.$fFoldableOption_$cfold_info:
         const Data.Semigroup.$fFoldableOption_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKD1() //  [R1]
         { []
         }
     {offset
       cfKD1: // global
           if (R1 & 7 == 1) goto cfKD5; else goto cfKD6;
       cfKD5: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       cfKD6: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKD1_info" {
     block_cfKD1_info:
         const _cfKD1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.896039791 UTC

[section ""data" . Data.Semigroup.$fFoldableOption2_closure" {
     Data.Semigroup.$fFoldableOption2_closure:
         const Data.Semigroup.$fFoldableOption2_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKDE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKDF; else goto cfKDG;
       cfKDF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKDG: // global
           I64[Sp - 16] = block_cfKDx_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKDN; else goto cfKDy;
       ufKDN: // global
           call _cfKDx(R1) args: 0, res: 0, upd: 0;
       cfKDy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption2_info" {
     Data.Semigroup.$fFoldableOption2_info:
         const Data.Semigroup.$fFoldableOption2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+80;
 },
 _cfKDx() //  [R1]
         { []
         }
     {offset
       cfKDx: // global
           if (R1 & 7 == 1) goto cfKDB; else goto cfKDC;
       cfKDB: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       cfKDC: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKDx_info" {
     block_cfKDx_info:
         const _cfKDx;
         const 1;
         const 4294967326;
         const SfCR7_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.902057039 UTC

[section ""cstring" . lvl7_rfC6d_bytes" {
     lvl7_rfC6d_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.904563996 UTC

[section ""data" . Data.Semigroup.$fFoldableOption4_closure" {
     Data.Semigroup.$fFoldableOption4_closure:
         const Data.Semigroup.$fFoldableOption4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption4_entry() //  [R1]
         { []
         }
     {offset
       cfKE8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKE9; else goto cfKEa;
       cfKE9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKEa: // global
           (_cfKE3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKE3::I64 == 0) goto cfKE5; else goto cfKE4;
       cfKE5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKE4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKE3::I64;
           I64[Sp - 24] = block_cfKE6_info;
           R2 = lvl7_rfC6d_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption4_info" {
     Data.Semigroup.$fFoldableOption4_info:
         const Data.Semigroup.$fFoldableOption4_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+24;
 },
 _cfKE6() //  [R1]
         { []
         }
     {offset
       cfKE6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKE6_info" {
     block_cfKE6_info:
         const _cfKE6;
         const 0;
         const 4294967326;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.910479543 UTC

[section ""data" . Data.Semigroup.$fFoldableOption3_closure" {
     Data.Semigroup.$fFoldableOption3_closure:
         const Data.Semigroup.$fFoldableOption3_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption3_entry() //  [R2]
         { []
         }
     {offset
       cfKEz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKEA; else goto cfKEB;
       cfKEA: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKEB: // global
           I64[Sp - 8] = block_cfKEs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKEI; else goto cfKEt;
       ufKEI: // global
           call _cfKEs(R1) args: 0, res: 0, upd: 0;
       cfKEt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption3_info" {
     Data.Semigroup.$fFoldableOption3_info:
         const Data.Semigroup.$fFoldableOption3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+96;
 },
 _cfKEs() //  [R1]
         { []
         }
     {offset
       cfKEs: // global
           if (R1 & 7 == 1) goto cfKEw; else goto cfKEx;
       cfKEw: // global
           R1 = Data.Semigroup.$fFoldableOption4_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKEx: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKEs_info" {
     block_cfKEs_info:
         const _cfKEs;
         const 0;
         const 4294967326;
         const SfCR7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.915760706 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cminimum_closure" {
     Data.Semigroup.$fFoldableOption_$cminimum_closure:
         const Data.Semigroup.$fFoldableOption_$cminimum_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       cfKEY: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableOption3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cminimum_info" {
     Data.Semigroup.$fFoldableOption_$cminimum_info:
         const Data.Semigroup.$fFoldableOption_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfCR7_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.918904153 UTC

[section ""cstring" . lvl8_rfC6e_bytes" {
     lvl8_rfC6e_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.921646737 UTC

[section ""data" . Data.Semigroup.$fFoldableOption6_closure" {
     Data.Semigroup.$fFoldableOption6_closure:
         const Data.Semigroup.$fFoldableOption6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption6_entry() //  [R1]
         { []
         }
     {offset
       cfKFe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKFf; else goto cfKFg;
       cfKFf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKFg: // global
           (_cfKF9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKF9::I64 == 0) goto cfKFb; else goto cfKFa;
       cfKFb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKFa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKF9::I64;
           I64[Sp - 24] = block_cfKFc_info;
           R2 = lvl8_rfC6e_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption6_info" {
     Data.Semigroup.$fFoldableOption6_info:
         const Data.Semigroup.$fFoldableOption6_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+24;
 },
 _cfKFc() //  [R1]
         { []
         }
     {offset
       cfKFc: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKFc_info" {
     block_cfKFc_info:
         const _cfKFc;
         const 0;
         const 4294967326;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.927394009 UTC

[section ""data" . Data.Semigroup.$fFoldableOption5_closure" {
     Data.Semigroup.$fFoldableOption5_closure:
         const Data.Semigroup.$fFoldableOption5_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption5_entry() //  [R2]
         { []
         }
     {offset
       cfKFF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKFG; else goto cfKFH;
       cfKFG: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKFH: // global
           I64[Sp - 8] = block_cfKFy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKFO; else goto cfKFz;
       ufKFO: // global
           call _cfKFy(R1) args: 0, res: 0, upd: 0;
       cfKFz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption5_info" {
     Data.Semigroup.$fFoldableOption5_info:
         const Data.Semigroup.$fFoldableOption5_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+112;
 },
 _cfKFy() //  [R1]
         { []
         }
     {offset
       cfKFy: // global
           if (R1 & 7 == 1) goto cfKFC; else goto cfKFD;
       cfKFC: // global
           R1 = Data.Semigroup.$fFoldableOption6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKFD: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKFy_info" {
     block_cfKFy_info:
         const _cfKFy;
         const 0;
         const 4294967326;
         const SfCR7_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.932765661 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cmaximum_closure" {
     Data.Semigroup.$fFoldableOption_$cmaximum_closure:
         const Data.Semigroup.$fFoldableOption_$cmaximum_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       cfKG4: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableOption5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cmaximum_info" {
     Data.Semigroup.$fFoldableOption_$cmaximum_info:
         const Data.Semigroup.$fFoldableOption_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfCR7_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.938622408 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$celem_closure" {
     Data.Semigroup.$fFoldableOption_$celem_closure:
         const Data.Semigroup.$fFoldableOption_$celem_info;
 },
 f_sfCiy_entry() //  [R1]
         { []
         }
     {offset
       cfKGj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKGk; else goto cfKGl;
       cfKGk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKGl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCiy_info" {
     f_sfCiy_info:
         const f_sfCiy_entry;
         const 2;
         const 18;
 },
 sat_sfCiC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKGy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKGz; else goto cfKGA;
       cfKGz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKGA: // global
           I64[Sp - 16] = block_cfKGr_info;
           _sfCiy::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sfCiy::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKGH; else goto cfKGs;
       ufKGH: // global
           call _cfKGr(R1) args: 0, res: 0, upd: 0;
       cfKGs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCiC_info" {
     sat_sfCiC_info:
         const sat_sfCiC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfKGr() //  [R1]
         { []
         }
     {offset
       cfKGr: // global
           if (R1 & 7 == 1) goto cfKGv; else goto cfKGw;
       cfKGv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKGw: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKGr_info" {
     block_cfKGr_info:
         const _cfKGr;
         const 1;
         const 30;
 },
 Data.Semigroup.$fFoldableOption_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKGI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfKGM; else goto cfKGL;
       cfKGM: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKGL: // global
           I64[Hp - 40] = f_sfCiy_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfCiC_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$celem_info" {
     Data.Semigroup.$fFoldableOption_$celem_info:
         const Data.Semigroup.$fFoldableOption_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.947232613 UTC

[section ""data" . Data.Semigroup.$fFoldableOption7_closure" {
     Data.Semigroup.$fFoldableOption7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.949908041 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldl_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldl_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKHl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKHm; else goto cfKHn;
       cfKHm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKHn: // global
           I64[Sp - 24] = block_cfKHe_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufKHu; else goto cfKHf;
       ufKHu: // global
           call _cfKHe(R1) args: 0, res: 0, upd: 0;
       cfKHf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldl_info" {
     Data.Semigroup.$fFoldableOption_$cfoldl_info:
         const Data.Semigroup.$fFoldableOption_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKHe() //  [R1]
         { []
         }
     {offset
       cfKHe: // global
           _sfCiE::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfKHi; else goto cfKHj;
       cfKHi: // global
           R1 = _sfCiE::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKHj: // global
           R3 = P64[R1 + 6];
           R2 = _sfCiE::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKHe_info" {
     block_cfKHe_info:
         const _cfKHe;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.954915407 UTC

[section ""cstring" . lvl9_rfC6f_bytes" {
     lvl9_rfC6f_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.957353957 UTC

[section ""data" . Data.Semigroup.$fFoldableOption8_closure" {
     Data.Semigroup.$fFoldableOption8_closure:
         const Data.Semigroup.$fFoldableOption8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption8_entry() //  [R1]
         { []
         }
     {offset
       cfKHP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKHQ; else goto cfKHR;
       cfKHQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKHR: // global
           (_cfKHK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKHK::I64 == 0) goto cfKHM; else goto cfKHL;
       cfKHM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKHL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKHK::I64;
           I64[Sp - 24] = block_cfKHN_info;
           R2 = lvl9_rfC6f_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption8_info" {
     Data.Semigroup.$fFoldableOption8_info:
         const Data.Semigroup.$fFoldableOption8_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+24;
 },
 _cfKHN() //  [R1]
         { []
         }
     {offset
       cfKHN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKHN_info" {
     block_cfKHN_info:
         const _cfKHN;
         const 0;
         const 4294967326;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.966038632 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldl1_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldl1_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldl1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKIg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKIh; else goto cfKIi;
       cfKIh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKIi: // global
           I64[Sp - 8] = block_cfKI9_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKIp; else goto cfKIa;
       ufKIp: // global
           call _cfKI9(R1) args: 0, res: 0, upd: 0;
       cfKIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldl1_info" {
     Data.Semigroup.$fFoldableOption_$cfoldl1_info:
         const Data.Semigroup.$fFoldableOption_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+128;
 },
 _cfKI9() //  [R1]
         { []
         }
     {offset
       cfKI9: // global
           if (R1 & 7 == 1) goto cfKId; else goto cfKIe;
       cfKId: // global
           R1 = Data.Semigroup.$fFoldableOption8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKIe: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKI9_info" {
     block_cfKI9_info:
         const _cfKI9;
         const 0;
         const 4294967326;
         const SfCR7_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.972204988 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKIM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKIN; else goto cfKIO;
       cfKIN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKIO: // global
           I64[Sp - 24] = block_cfKIF_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufKIV; else goto cfKIG;
       ufKIV: // global
           call _cfKIF(R1) args: 0, res: 0, upd: 0;
       cfKIG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldr'_info" {
     Data.Semigroup.$fFoldableOption_$cfoldr'_info:
         const Data.Semigroup.$fFoldableOption_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKIF() //  [R1]
         { []
         }
     {offset
       cfKIF: // global
           _sfCiO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfKIJ; else goto cfKIK;
       cfKIJ: // global
           R1 = _sfCiO::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKIK: // global
           R3 = _sfCiO::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKIF_info" {
     block_cfKIF_info:
         const _cfKIF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.979248874 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$clength_closure" {
     Data.Semigroup.$fFoldableOption_$clength_closure:
         const Data.Semigroup.$fFoldableOption_$clength_info;
 },
 Data.Semigroup.$fFoldableOption_$clength_entry() //  [R2]
         { []
         }
     {offset
       cfKJi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKJj; else goto cfKJk;
       cfKJj: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKJk: // global
           I64[Sp - 8] = block_cfKJb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKJr; else goto cfKJc;
       ufKJr: // global
           call _cfKJb(R1) args: 0, res: 0, upd: 0;
       cfKJc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$clength_info" {
     Data.Semigroup.$fFoldableOption_$clength_info:
         const Data.Semigroup.$fFoldableOption_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfKJb() //  [R1]
         { []
         }
     {offset
       cfKJb: // global
           if (R1 & 7 == 1) goto cfKJf; else goto cfKJg;
       cfKJf: // global
           R1 = Data.Semigroup.$fFoldableOption7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKJg: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKJb_info" {
     block_cfKJb_info:
         const _cfKJb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.984504187 UTC

[section ""cstring" . lvl10_rfC6g_bytes" {
     lvl10_rfC6g_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.987091505 UTC

[section ""data" . Data.Semigroup.$fFoldableOption9_closure" {
     Data.Semigroup.$fFoldableOption9_closure:
         const Data.Semigroup.$fFoldableOption9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption9_entry() //  [R1]
         { []
         }
     {offset
       cfKJO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKJP; else goto cfKJQ;
       cfKJP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKJQ: // global
           (_cfKJJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKJJ::I64 == 0) goto cfKJL; else goto cfKJK;
       cfKJL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKJK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKJJ::I64;
           I64[Sp - 24] = block_cfKJM_info;
           R2 = lvl10_rfC6g_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption9_info" {
     Data.Semigroup.$fFoldableOption9_info:
         const Data.Semigroup.$fFoldableOption9_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+24;
 },
 _cfKJM() //  [R1]
         { []
         }
     {offset
       cfKJM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKJM_info" {
     block_cfKJM_info:
         const _cfKJM;
         const 0;
         const 4294967326;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.993307292 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldr1_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldr1_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldr1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKKf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKKg; else goto cfKKh;
       cfKKg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKKh: // global
           I64[Sp - 8] = block_cfKK8_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKKo; else goto cfKK9;
       ufKKo: // global
           call _cfKK8(R1) args: 0, res: 0, upd: 0;
       cfKK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldr1_info" {
     Data.Semigroup.$fFoldableOption_$cfoldr1_info:
         const Data.Semigroup.$fFoldableOption_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+144;
 },
 _cfKK8() //  [R1]
         { []
         }
     {offset
       cfKK8: // global
           if (R1 & 7 == 1) goto cfKKc; else goto cfKKd;
       cfKKc: // global
           R1 = Data.Semigroup.$fFoldableOption9_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfKKd: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKK8_info" {
     block_cfKK8_info:
         const _cfKK8;
         const 0;
         const 4294967326;
         const SfCR7_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:21.99941385 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cnull_closure" {
     Data.Semigroup.$fFoldableOption_$cnull_closure:
         const Data.Semigroup.$fFoldableOption_$cnull_info;
 },
 Data.Semigroup.$fFoldableOption_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cfKKL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKKM; else goto cfKKN;
       cfKKM: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKKN: // global
           I64[Sp - 8] = block_cfKKE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKKU; else goto cfKKF;
       ufKKU: // global
           call _cfKKE(R1) args: 0, res: 0, upd: 0;
       cfKKF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cnull_info" {
     Data.Semigroup.$fFoldableOption_$cnull_info:
         const Data.Semigroup.$fFoldableOption_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfKKE() //  [R1]
         { []
         }
     {offset
       cfKKE: // global
           if (R1 & 7 == 1) goto cfKKI; else goto cfKKJ;
       cfKKI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKKJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKKE_info" {
     block_cfKKE_info:
         const _cfKKE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.005180269 UTC

[section ""data" . Data.Semigroup.$fFoldableOption1_closure" {
     Data.Semigroup.$fFoldableOption1_closure:
         const Data.Semigroup.$fFoldableOption1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKLj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKLk; else goto cfKLl;
       cfKLk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKLl: // global
           I64[Sp - 16] = block_cfKLc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKLs; else goto cfKLd;
       ufKLs: // global
           call _cfKLc(R1) args: 0, res: 0, upd: 0;
       cfKLd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption1_info" {
     Data.Semigroup.$fFoldableOption1_info:
         const Data.Semigroup.$fFoldableOption1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+160;
 },
 _cfKLc() //  [R1]
         { []
         }
     {offset
       cfKLc: // global
           if (R1 & 7 == 1) goto cfKLg; else goto cfKLh;
       cfKLg: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       cfKLh: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKLc_info" {
     block_cfKLc_info:
         const _cfKLc;
         const 1;
         const 4294967326;
         const SfCR7_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.011074646 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$ctoList_closure" {
     Data.Semigroup.$fFoldableOption_$ctoList_closure:
         const Data.Semigroup.$fFoldableOption_$ctoList_info;
 },
 Data.Semigroup.$fFoldableOption_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfKLP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfKLQ; else goto cfKLR;
       cfKLQ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKLR: // global
           I64[Sp - 8] = block_cfKLI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKM1; else goto cfKLJ;
       ufKM1: // global
           call _cfKLI(R1) args: 0, res: 0, upd: 0;
       cfKLJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$ctoList_info" {
     Data.Semigroup.$fFoldableOption_$ctoList_info:
         const Data.Semigroup.$fFoldableOption_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfKLI() //  [R1]
         { []
         }
     {offset
       cfKLI: // global
           if (R1 & 7 == 1) goto cfKLM; else goto cfKLN;
       cfKLM: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKLN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKM0; else goto cfKLZ;
       cfKM0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKLZ: // global
           _sfCj9::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfCj9::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKLI_info" {
     block_cfKLI_info:
         const _cfKLI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.017373501 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_closure" {
     Data.Semigroup.$fFoldableOption_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableOption_$cfold_closure+2;
         const Data.Semigroup.$fFoldableOption_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr1_closure+2;
         const Data.Semigroup.$fFoldableOption_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableOption_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableOption_$cnull_closure+1;
         const Data.Semigroup.$fFoldableOption_$clength_closure+1;
         const Data.Semigroup.$fFoldableOption_$celem_closure+2;
         const Data.Semigroup.$fFoldableOption_$cmaximum_closure+2;
         const Data.Semigroup.$fFoldableOption_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableOption2_closure+2;
         const Data.Semigroup.$fFoldableOption1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.020623091 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$ctraverse_closure" {
     Data.Semigroup.$fTraversableOption_$ctraverse_closure:
         const Data.Semigroup.$fTraversableOption_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableOption_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfKMr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKMs; else goto cfKMt;
       cfKMs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKMt: // global
           I64[Sp - 24] = block_cfKMk_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufKMI; else goto cfKMl;
       ufKMI: // global
           call _cfKMk(R1) args: 0, res: 0, upd: 0;
       cfKMl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$ctraverse_info" {
     Data.Semigroup.$fTraversableOption_$ctraverse_info:
         const Data.Semigroup.$fTraversableOption_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKMk() //  [R1]
         { []
         }
     {offset
       cfKMk: // global
           _sfCja::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKMo; else goto cfKMp;
       cfKMo: // global
           R2 = _sfCja::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cfKMp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfKMD; else goto cfKMC;
       cfKMD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKMC: // global
           _sfCje::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sfCje::P64;
           I64[Sp + 8] = block_cfKMA_info;
           R2 = _sfCja::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKMk_info" {
     block_cfKMk_info:
         const _cfKMk;
         const 2;
         const 30;
 },
 _cfKMA() //  [R1]
         { []
         }
     {offset
       cfKMA: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKMA_info" {
     block_cfKMA_info:
         const _cfKMA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.028624818 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$csequenceA_closure" {
     Data.Semigroup.$fTraversableOption_$csequenceA_closure:
         const Data.Semigroup.$fTraversableOption_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableOption_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKNa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKNb; else goto cfKNc;
       cfKNb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKNc: // global
           I64[Sp - 16] = block_cfKN3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKNo; else goto cfKN4;
       ufKNo: // global
           call _cfKN3(R1) args: 0, res: 0, upd: 0;
       cfKN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$csequenceA_info" {
     Data.Semigroup.$fTraversableOption_$csequenceA_info:
         const Data.Semigroup.$fTraversableOption_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKN3() //  [R1]
         { []
         }
     {offset
       cfKN3: // global
           _sfCjh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKN7; else goto cfKN8;
       cfKN7: // global
           R2 = _sfCjh::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cfKN8: // global
           I64[Sp] = block_cfKNi_info;
           R2 = _sfCjh::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKN3_info" {
     block_cfKN3_info:
         const _cfKN3;
         const 1;
         const 30;
 },
 _cfKNi() //  [R1]
         { []
         }
     {offset
       cfKNi: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKNi_info" {
     block_cfKNi_info:
         const _cfKNi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.035716907 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$cmapM_closure" {
     Data.Semigroup.$fTraversableOption_$cmapM_closure:
         const Data.Semigroup.$fTraversableOption_$cmapM_info;
 },
 Data.Semigroup.$fTraversableOption_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKNK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKNL; else goto cfKNM;
       cfKNL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKNM: // global
           I64[Sp - 24] = block_cfKNI_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$cmapM_info" {
     Data.Semigroup.$fTraversableOption_$cmapM_info:
         const Data.Semigroup.$fTraversableOption_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfKNI() //  [R1]
         { []
         }
     {offset
       cfKNI: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Semigroup.$fTraversableOption_$ctraverse_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKNI_info" {
     block_cfKNI_info:
         const _cfKNI;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.04208605 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$csequence_closure" {
     Data.Semigroup.$fTraversableOption_$csequence_closure:
         const Data.Semigroup.$fTraversableOption_$csequence_info;
 },
 Data.Semigroup.$fTraversableOption_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKO9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKOa; else goto cfKOb;
       cfKOa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKOb: // global
           I64[Sp - 16] = block_cfKO2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKOx; else goto cfKO3;
       ufKOx: // global
           call _cfKO2(R1) args: 0, res: 0, upd: 0;
       cfKO3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$csequence_info" {
     Data.Semigroup.$fTraversableOption_$csequence_info:
         const Data.Semigroup.$fTraversableOption_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKO2() //  [R1]
         { []
         }
     {offset
       cfKO2: // global
           _sfCjq::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKO6; else goto cfKO7;
       cfKO6: // global
           I64[Sp + 8] = block_cfKOe_info;
           R2 = _sfCjq::P64;
           Sp = Sp + 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cfKO7: // global
           I64[Sp] = block_cfKOm_info;
           R2 = _sfCjq::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKO2_info" {
     block_cfKO2_info:
         const _cfKO2;
         const 1;
         const 30;
 },
 _cfKOe() //  [R1]
         { []
         }
     {offset
       cfKOe: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKOe_info" {
     block_cfKOe_info:
         const _cfKOe;
         const 0;
         const 30;
 },
 _cfKOm() //  [R1]
         { []
         }
     {offset
       cfKOm: // global
           I64[Sp] = block_cfKOq_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKOm_info" {
     block_cfKOm_info:
         const _cfKOm;
         const 1;
         const 30;
 },
 _cfKOq() //  [R1]
         { []
         }
     {offset
       cfKOq: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKOq_info" {
     block_cfKOq_info:
         const _cfKOq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.051905333 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_closure" {
     Data.Semigroup.$fTraversableOption_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorOption_closure+1;
         const Data.Semigroup.$fFoldableOption_closure+1;
         const Data.Semigroup.$fTraversableOption_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableOption_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableOption_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableOption_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.053754822 UTC

[section ""cstring" . lvl11_rfC6h_bytes" {
     lvl11_rfC6h_bytes:
         I8[] [115,116,105,109,101,115,58,32,79,112,116,105,111,110,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.056218427 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption1_closure" {
     Data.Semigroup.$fSemigroupOption1_closure:
         const Data.Semigroup.$fSemigroupOption1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fSemigroupOption1_entry() //  [R1]
         { []
         }
     {offset
       cfKP3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfKP4; else goto cfKP5;
       cfKP4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKP5: // global
           (_cfKOY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKOY::I64 == 0) goto cfKP0; else goto cfKOZ;
       cfKP0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKOZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKOY::I64;
           I64[Sp - 24] = block_cfKP1_info;
           R2 = lvl11_rfC6h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption1_info" {
     Data.Semigroup.$fSemigroupOption1_info:
         const Data.Semigroup.$fSemigroupOption1_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+24;
 },
 _cfKP1() //  [R1]
         { []
         }
     {offset
       cfKP1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKP1_info" {
     block_cfKP1_info:
         const _cfKP1;
         const 0;
         const 4294967326;
         const SfCR7_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.061931555 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption2_closure" {
     Data.Semigroup.$fSemigroupOption2_closure:
         const Data.Semigroup.$fSemigroupOption2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fSemigroupOption2_entry() //  [R1]
         { []
         }
     {offset
       cfKPp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKPq; else goto cfKPr;
       cfKPq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKPr: // global
           (_cfKPm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKPm::I64 == 0) goto cfKPo; else goto cfKPn;
       cfKPo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKPn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKPm::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption2_info" {
     Data.Semigroup.$fSemigroupOption2_info:
         const Data.Semigroup.$fSemigroupOption2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.068806095 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_$cstimes_closure" {
     Data.Semigroup.$fSemigroupOption_$cstimes_closure:
         const Data.Semigroup.$fSemigroupOption_$cstimes_info;
         const 0;
 },
 sat_sfCjH_entry() //  [R1]
         { []
         }
     {offset
       cfKPT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKPU; else goto cfKPV;
       cfKPU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKPV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfKPR_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCjH_info" {
     sat_sfCjH_info:
         const sat_sfCjH_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+176;
 },
 _cfKPR() //  [R1]
         { []
         }
     {offset
       cfKPR: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.$fSemigroupOption2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfKPR_info" {
     block_cfKPR_info:
         const _cfKPR;
         const 0;
         const 4294967326;
         const SfCR7_srt+176;
 },
 sat_sfCjJ_entry() //  [R1]
         { []
         }
     {offset
       cfKQd: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfKQe; else goto cfKQf;
       cfKQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.stimes_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCjJ_info" {
     sat_sfCjJ_info:
         const sat_sfCjJ_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$fSemigroupOption_$cstimes_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cfKQk: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfKQl; else goto cfKQm;
       cfKQl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_$cstimes_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKQm: // global
           I64[Sp - 32] = block_cfKPD_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufKQM; else goto cfKPE;
       ufKQM: // global
           call _cfKPD(R1) args: 0, res: 0, upd: 0;
       cfKPE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_$cstimes_info" {
     Data.Semigroup.$fSemigroupOption_$cstimes_info:
         const Data.Semigroup.$fSemigroupOption_$cstimes_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SfCR7_srt+176;
 },
 _cfKPD() //  [R1]
         { []
         }
     {offset
       cfKPD: // global
           if (R1 & 7 == 1) goto ufKQI; else goto cfKQi;
       ufKQI: // global
           Sp = Sp + 32;
           call _cfKQA() args: 0, res: 0, upd: 0;
       cfKQi: // global
           I64[Sp - 8] = block_cfKPJ_info;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKPD_info" {
     block_cfKPD_info:
         const _cfKPD;
         const 3;
         const 21474836510;
         const SfCR7_srt+176;
 },
 _cfKPJ() //  [R1]
         { []
         }
     {offset
       cfKPJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKQs; else goto cfKQr;
       cfKQs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKQr: // global
           I64[Hp - 16] = sat_sfCjH_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cfKPZ_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKPJ_info" {
     block_cfKPJ_info:
         const _cfKPJ;
         const 4;
         const 21474836510;
         const SfCR7_srt+176;
 },
 _cfKPZ() //  [R1]
         { []
         }
     {offset
       cfKPZ: // global
           _cfKPN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfKQ3_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _cfKPN::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKPZ_info" {
     block_cfKPZ_info:
         const _cfKPZ;
         const 5;
         const 4294967326;
         const SfCR7_srt+192;
 },
 _cfKQ3() //  [R1]
         { []
         }
     {offset
       cfKQ3: // global
           _cfKQG::P64 = R1 & 7;
           if (_cfKQG::P64 < 3) goto ufKQH; else goto cfKQC;
       ufKQH: // global
           if (_cfKQG::P64 < 2) goto cfKQx; else goto ufKQJ;
       cfKQx: // global
           R1 = Data.Semigroup.$fSemigroupOption1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ufKQJ: // global
           Sp = Sp + 40;
           call _cfKQA() args: 0, res: 0, upd: 0;
       cfKQC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfKQF; else goto cfKQE;
       cfKQF: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKQE: // global
           I64[Hp - 56] = sat_sfCjJ_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKQ3_info" {
     block_cfKQ3_info:
         const _cfKQ3;
         const 4;
         const 4294967326;
         const SfCR7_srt+192;
 },
 _cfKQA() //  []
         { []
         }
     {offset
       cfKQA: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.088545138 UTC

[section ""data" . Data.Semigroup.$w$csconcat2_closure" {
     Data.Semigroup.$w$csconcat2_closure:
         const Data.Semigroup.$w$csconcat2_info;
 },
 sat_sfCjX_entry() //  [R1]
         { []
         }
     {offset
       cfKS3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfKS4; else goto cfKS5;
       cfKS4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKS5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCjX_info" {
     sat_sfCjX_info:
         const sat_sfCjX_entry;
         const 3;
         const 15;
 },
 go_sfCjN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfKSa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfKSb; else goto ufKSx;
       cfKSb: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufKSx: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _cfKRF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sfCjN_info" {
     go_sfCjN_info:
         const go_sfCjN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfKRF() //  []
         { []
         }
     {offset
       cfKRF: // global
           _sfCjK::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_cfKRI_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCjK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKSz; else goto cfKRJ;
       ufKSz: // global
           call _cfKRI(R1) args: 0, res: 0, upd: 0;
       cfKRJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfKRI() //  [R1]
         { []
         }
     {offset
       cfKRI: // global
           _sfCjO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfKS7; else goto cfKS8;
       cfKS7: // global
           R1 = _sfCjO::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfKS8: // global
           I64[Sp - 8] = block_cfKRO_info;
           _sfCjR::P64 = P64[R1 + 6];
           _sfCjS::P64 = P64[R1 + 14];
           R1 = _sfCjO::P64;
           P64[Sp] = _sfCjS::P64;
           P64[Sp + 16] = _sfCjR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKSA; else goto cfKRP;
       ufKSA: // global
           call _cfKRO(R1) args: 0, res: 0, upd: 0;
       cfKRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKRI_info" {
     block_cfKRI_info:
         const _cfKRI;
         const 3;
         const 30;
 },
 _cfKRO() //  [R1]
         { []
         }
     {offset
       cfKRO: // global
           _sfCjR::P64 = P64[Sp + 24];
           _sfCjS::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKSj; else goto cfKSl;
       cfKSj: // global
           P64[Sp + 24] = _sfCjR::P64;
           P64[Sp + 32] = _sfCjS::P64;
           Sp = Sp + 16;
           call _cfKRF() args: 0, res: 0, upd: 0;
       cfKSl: // global
           I64[Sp + 8] = block_cfKRU_info;
           R3 = _sfCjS::P64;
           R2 = _sfCjR::P64;
           _sfCjT::P64 = R1;
           _sfCjU::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfCjU::P64;
           P64[Sp + 24] = _sfCjT::P64;
           Sp = Sp + 8;
           call go_sfCjN_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKRO_info" {
     block_cfKRO_info:
         const _cfKRO;
         const 4;
         const 30;
 },
 _cfKRU() //  [R1]
         { []
         }
     {offset
       cfKRU: // global
           if (R1 & 7 == 1) goto cfKSp; else goto cfKSr;
       cfKSp: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfKSr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfKSu; else goto cfKSt;
       cfKSu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKSt: // global
           _sfCjW::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfCjX_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfCjW::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKRU_info" {
     block_cfKRU_info:
         const _cfKRU;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfKSD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfKSH; else goto cfKSG;
       cfKSH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKSG: // global
           I64[Hp - 8] = go_sfCjN_info;
           P64[Hp] = R2;
           _sfCjL::P64 = R3;
           R3 = R4;
           R2 = _sfCjL::P64;
           R1 = Hp - 6;
           call go_sfCjN_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat2_info" {
     Data.Semigroup.$w$csconcat2_info:
         const Data.Semigroup.$w$csconcat2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.104635497 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_$csconcat_closure" {
     Data.Semigroup.$fSemigroupOption_$csconcat_closure:
         const Data.Semigroup.$fSemigroupOption_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupOption_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKTv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKTw; else goto cfKTx;
       cfKTw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKTx: // global
           I64[Sp - 16] = block_cfKTs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufKTB; else goto cfKTt;
       ufKTB: // global
           call _cfKTs(R1) args: 0, res: 0, upd: 0;
       cfKTt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_$csconcat_info" {
     Data.Semigroup.$fSemigroupOption_$csconcat_info:
         const Data.Semigroup.$fSemigroupOption_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfKTs() //  [R1]
         { []
         }
     {offset
       cfKTs: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat2_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKTs_info" {
     block_cfKTs_info:
         const _cfKTs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.110781648 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_closure" {
     Data.Semigroup.$fSemigroupOption_closure:
         const Data.Semigroup.$fSemigroupOption_info;
         const 0;
 },
 sat_sfCk6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfKTU: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fSemigroupOption_$cstimes_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCk6_info" {
     sat_sfCk6_info:
         const sat_sfCk6_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+184;
 },
 sat_sfCk5_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKU2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupOption_$csconcat_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCk5_info" {
     sat_sfCk5_info:
         const sat_sfCk5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCk4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfKUa: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fMonoidMaybe_$c<>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCk4_info" {
     sat_sfCk4_info:
         const sat_sfCk4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fSemigroupOption_entry() //  [R2]
         { []
         }
     {offset
       cfKUe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfKUi; else goto cfKUh;
       cfKUi: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKUh: // global
           I64[Hp - 72] = sat_sfCk6_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCk5_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCk4_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 69;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_info" {
     Data.Semigroup.$fSemigroupOption_info:
         const Data.Semigroup.$fSemigroupOption_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfCR7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.121534426 UTC

[section ""data" . Data.Semigroup.$fMonoidOption_$cmconcat_closure" {
     Data.Semigroup.$fMonoidOption_$cmconcat_closure:
         const Data.Semigroup.$fMonoidOption_$cmconcat_info;
 },
 sat_sfCki_entry() //  [R1]
         { []
         }
     {offset
       cfKV4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfKV5; else goto cfKV6;
       cfKV5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKV6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCki_info" {
     sat_sfCki_info:
         const sat_sfCki_entry;
         const 3;
         const 15;
 },
 go_sfCk9_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKVb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfKVc; else goto ufKVy;
       cfKVc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ufKVy: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cfKUG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sfCk9_info" {
     go_sfCk9_info:
         const go_sfCk9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfKUG() //  []
         { []
         }
     {offset
       cfKUG: // global
           _sfCk7::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cfKUJ_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfCk7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKVA; else goto cfKUK;
       ufKVA: // global
           call _cfKUJ(R1) args: 0, res: 0, upd: 0;
       cfKUK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfKUJ() //  [R1]
         { []
         }
     {offset
       cfKUJ: // global
           if (R1 & 7 == 1) goto cfKV8; else goto cfKV9;
       cfKV8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfKV9: // global
           I64[Sp - 8] = block_cfKUP_info;
           _sfCkd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sfCkd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufKVB; else goto cfKUQ;
       ufKVB: // global
           call _cfKUP(R1) args: 0, res: 0, upd: 0;
       cfKUQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKUJ_info" {
     block_cfKUJ_info:
         const _cfKUJ;
         const 2;
         const 30;
 },
 _cfKUP() //  [R1]
         { []
         }
     {offset
       cfKUP: // global
           _sfCkd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfKVk; else goto cfKVm;
       cfKVk: // global
           P64[Sp + 24] = _sfCkd::P64;
           Sp = Sp + 16;
           call _cfKUG() args: 0, res: 0, upd: 0;
       cfKVm: // global
           I64[Sp] = block_cfKUV_info;
           R2 = _sfCkd::P64;
           _sfCke::P64 = R1;
           _sfCkf::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _sfCkf::P64;
           P64[Sp + 16] = _sfCke::P64;
           call go_sfCk9_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKUP_info" {
     block_cfKUP_info:
         const _cfKUP;
         const 3;
         const 30;
 },
 _cfKUV() //  [R1]
         { []
         }
     {offset
       cfKUV: // global
           if (R1 & 7 == 1) goto cfKVq; else goto cfKVs;
       cfKVq: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfKVs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfKVv; else goto cfKVu;
       cfKVv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfKVu: // global
           _sfCkh::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfCki_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfCkh::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfKUV_info" {
     block_cfKUV_info:
         const _cfKUV;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidOption_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfKVE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfKVI; else goto cfKVH;
       cfKVI: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidOption_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKVH: // global
           I64[Hp - 8] = go_sfCk9_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_sfCk9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidOption_$cmconcat_info" {
     Data.Semigroup.$fMonoidOption_$cmconcat_info:
         const Data.Semigroup.$fMonoidOption_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.136363165 UTC

[section ""data" . Data.Semigroup.$fMonoidOption_closure" {
     Data.Semigroup.$fMonoidOption_closure:
         const Data.Semigroup.$fMonoidOption_info;
         const 0;
 },
 sat_sfCkm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfKWx: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidOption_$cmconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkm_info" {
     sat_sfCkm_info:
         const sat_sfCkm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCkl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfKWF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fMonoidMaybe_$c<>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkl_info" {
     sat_sfCkl_info:
         const sat_sfCkl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCkk_entry() //  [R1]
         { []
         }
     {offset
       cfKWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKWN; else goto cfKWO;
       cfKWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKWO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupOption_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCkk_info" {
     sat_sfCkk_info:
         const sat_sfCkk_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+200;
 },
 Data.Semigroup.$fMonoidOption_entry() //  [R2]
         { []
         }
     {offset
       cfKWQ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfKWU; else goto cfKWT;
       cfKWU: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKWT: // global
           I64[Hp - 88] = sat_sfCkm_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfCkl_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCkk_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidOption_info" {
     Data.Semigroup.$fMonoidOption_info:
         const Data.Semigroup.$fMonoidOption_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.14879583 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option1_closure" {
     Data.Semigroup.$fGeneric1Option1_closure:
         const Data.Semigroup.$fGeneric1Option1_info;
 },
 Data.Semigroup.$fGeneric1Option1_entry() //  [R2]
         { []
         }
     {offset
       cfKXh: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Option1_info" {
     Data.Semigroup.$fGeneric1Option1_info:
         const Data.Semigroup.$fGeneric1Option1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.152213787 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option2_closure" {
     Data.Semigroup.$fGeneric1Option2_closure:
         const Data.Semigroup.$fGeneric1Option2_info;
 },
 Data.Semigroup.$fGeneric1Option2_entry() //  [R2]
         { []
         }
     {offset
       cfKXs: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Option2_info" {
     Data.Semigroup.$fGeneric1Option2_info:
         const Data.Semigroup.$fGeneric1Option2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.155419306 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option_closure" {
     Data.Semigroup.$fGeneric1Option_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Option2_closure+1;
         const Data.Semigroup.$fGeneric1Option1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.157665979 UTC

[section ""data" . Data.Semigroup.$fGenericOption1_closure" {
     Data.Semigroup.$fGenericOption1_closure:
         const Data.Semigroup.$fGenericOption1_info;
 },
 Data.Semigroup.$fGenericOption1_entry() //  [R2]
         { []
         }
     {offset
       cfKXG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericOption1_info" {
     Data.Semigroup.$fGenericOption1_info:
         const Data.Semigroup.$fGenericOption1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.16096678 UTC

[section ""data" . Data.Semigroup.$fGenericOption2_closure" {
     Data.Semigroup.$fGenericOption2_closure:
         const Data.Semigroup.$fGenericOption2_info;
 },
 Data.Semigroup.$fGenericOption2_entry() //  [R2]
         { []
         }
     {offset
       cfKXR: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericOption2_info" {
     Data.Semigroup.$fGenericOption2_info:
         const Data.Semigroup.$fGenericOption2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.164082182 UTC

[section ""data" . Data.Semigroup.$fGenericOption_closure" {
     Data.Semigroup.$fGenericOption_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericOption2_closure+1;
         const Data.Semigroup.$fGenericOption1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.166782714 UTC

[section ""data" . Data.Semigroup.$fDataOption2_closure" {
     Data.Semigroup.$fDataOption2_closure:
         const Data.Semigroup.$fDataOption2_info;
 },
 Data.Semigroup.$fDataOption2_entry() //  [R2]
         { []
         }
     {offset
       cfKY5: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption2_info" {
     Data.Semigroup.$fDataOption2_info:
         const Data.Semigroup.$fDataOption2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.171521882 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgunfold_closure" {
     Data.Semigroup.$fDataOption_$cgunfold_closure:
         const Data.Semigroup.$fDataOption_$cgunfold_info;
         const 0;
 },
 $dData1_sfCkt_entry() //  [R1]
         { []
         }
     {offset
       cfKYm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKYn; else goto cfKYo;
       cfKYn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKYo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfCkt_info" {
     $dData1_sfCkt_info:
         const $dData1_sfCkt_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+216;
 },
 sat_sfCkx_entry() //  [R1]
         { []
         }
     {offset
       cfKYy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKYz; else goto cfKYA;
       cfKYz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKYA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fDataOption2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCkx_info" {
     sat_sfCkx_info:
         const sat_sfCkx_entry;
         const 1;
         const 16;
 },
 sat_sfCky_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfKYB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKYF; else goto cfKYE;
       cfKYF: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKYE: // global
           _sfCkt::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCkx_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCku::P64 = R2;
           R2 = _sfCkt::P64;
           R1 = _sfCku::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCky_info" {
     sat_sfCky_info:
         const sat_sfCky_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Semigroup.$fDataOption_$cgunfold_entry() //  [R2]
         { []
         }
     {offset
       cfKYG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKYK; else goto cfKYJ;
       cfKYK: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgunfold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKYJ: // global
           I64[Hp - 32] = $dData1_sfCkt_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCky_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgunfold_info" {
     Data.Semigroup.$fDataOption_$cgunfold_info:
         const Data.Semigroup.$fDataOption_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.181692713 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgfoldl_closure" {
     Data.Semigroup.$fDataOption_$cgfoldl_closure:
         const Data.Semigroup.$fDataOption_$cgfoldl_info;
         const 0;
 },
 $dData1_sfCkA_entry() //  [R1]
         { []
         }
     {offset
       cfKZa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKZb; else goto cfKZc;
       cfKZb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKZc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfCkA_info" {
     $dData1_sfCkA_info:
         const $dData1_sfCkA_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+216;
 },
 sat_sfCkE_entry() //  [R1]
         { []
         }
     {offset
       cfKZm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKZn; else goto cfKZo;
       cfKZn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKZo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fDataOption2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCkE_info" {
     sat_sfCkE_info:
         const sat_sfCkE_entry;
         const 1;
         const 16;
 },
 sat_sfCkF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfKZp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfKZt; else goto cfKZs;
       cfKZt: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfKZs: // global
           _sfCkA::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCkE_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           _sfCkB::P64 = R2;
           R2 = _sfCkA::P64;
           R1 = _sfCkB::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkF_info" {
     sat_sfCkF_info:
         const sat_sfCkF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Semigroup.$fDataOption_$cgfoldl_entry() //  [R2]
         { []
         }
     {offset
       cfKZu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfKZy; else goto cfKZx;
       cfKZy: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgfoldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfKZx: // global
           I64[Hp - 32] = $dData1_sfCkA_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCkF_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgfoldl_info" {
     Data.Semigroup.$fDataOption_$cgfoldl_info:
         const Data.Semigroup.$fDataOption_$cgfoldl_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfCR7_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.190369433 UTC

[section ""cstring" . Data.Semigroup.$fDataOption6_bytes" {
     Data.Semigroup.$fDataOption6_bytes:
         I8[] [79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.192599012 UTC

[section ""data" . Data.Semigroup.$fDataOption9_closure" {
     Data.Semigroup.$fDataOption9_closure:
         const Data.Semigroup.$fDataOption9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataOption9_entry() //  [R1]
         { []
         }
     {offset
       cfKZX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfKZY; else goto cfKZZ;
       cfKZY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfKZZ: // global
           (_cfKZU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfKZU::I64 == 0) goto cfKZW; else goto cfKZV;
       cfKZW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfKZV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfKZU::I64;
           R2 = Data.Semigroup.$fDataOption6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption9_info" {
     Data.Semigroup.$fDataOption9_info:
         const Data.Semigroup.$fDataOption9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.196243858 UTC

[section ""data" . Data.Semigroup.$fReadOption_lexeme_closure" {
     Data.Semigroup.$fReadOption_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataOption9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.197985863 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst8_bytes" {
     Data.Semigroup.$fReadFirst8_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.200193914 UTC

[section ""data" . Data.Semigroup.$fReadFirst7_closure" {
     Data.Semigroup.$fReadFirst7_closure:
         const Data.Semigroup.$fReadFirst7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst7_entry() //  [R1]
         { []
         }
     {offset
       cfL0f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL0g; else goto cfL0h;
       cfL0g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL0h: // global
           (_cfL0c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfL0c::I64 == 0) goto cfL0e; else goto cfL0d;
       cfL0e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfL0d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfL0c::I64;
           R2 = Data.Semigroup.$fReadFirst8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst7_info" {
     Data.Semigroup.$fReadFirst7_info:
         const Data.Semigroup.$fReadFirst7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.204679278 UTC

[section ""data" . Data.Semigroup.$fReadFirst_lexeme_closure" {
     Data.Semigroup.$fReadFirst_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.$fReadFirst7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.206385061 UTC

[section ""cstring" . Data.Semigroup.$fReadOption3_bytes" {
     Data.Semigroup.$fReadOption3_bytes:
         I8[] [103,101,116,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.208579172 UTC

[section ""data" . Data.Semigroup.$fReadOption2_closure" {
     Data.Semigroup.$fReadOption2_closure:
         const Data.Semigroup.$fReadOption2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadOption2_entry() //  [R1]
         { []
         }
     {offset
       cfL0x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL0y; else goto cfL0z;
       cfL0y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL0z: // global
           (_cfL0u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfL0u::I64 == 0) goto cfL0w; else goto cfL0v;
       cfL0w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfL0v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfL0u::I64;
           R2 = Data.Semigroup.$fReadOption3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption2_info" {
     Data.Semigroup.$fReadOption2_info:
         const Data.Semigroup.$fReadOption2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.21213835 UTC

[section ""data" . Data.Semigroup.$fReadArg2_closure" {
     Data.Semigroup.$fReadArg2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.214104922 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst4_bytes" {
     Data.Semigroup.$fReadFirst4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.216319663 UTC

[section ""data" . Data.Semigroup.$fReadFirst3_closure" {
     Data.Semigroup.$fReadFirst3_closure:
         const Data.Semigroup.$fReadFirst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst3_entry() //  [R1]
         { []
         }
     {offset
       cfL0P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL0Q; else goto cfL0R;
       cfL0Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL0R: // global
           (_cfL0M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfL0M::I64 == 0) goto cfL0O; else goto cfL0N;
       cfL0O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfL0N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfL0M::I64;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst3_info" {
     Data.Semigroup.$fReadFirst3_info:
         const Data.Semigroup.$fReadFirst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.219857442 UTC

[section ""data" . Data.Semigroup.$fReadFirst2_closure" {
     Data.Semigroup.$fReadFirst2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.$fReadFirst3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.226357769 UTC

[section ""data" . Data.Semigroup.$fReadOption1_closure" {
     Data.Semigroup.$fReadOption1_closure:
         const Data.Semigroup.$fReadOption1_info;
         const 0;
 },
 ds_sfCkJ_entry() //  [R1, R3]
         { []
         }
     {offset
       cfL19: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCkJ_info" {
     ds_sfCkJ_info:
         const ds_sfCkJ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+240;
 },
 sat_sfCkV_entry() //  [R1]
         { []
         }
     {offset
       cfL1K: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkV_info" {
     sat_sfCkV_info:
         const sat_sfCkV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCkY_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL1Q: // global
           _sfCkT::P64 = R2;
           _sfCkY::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfL1R; else goto cfL1S;
       cfL1S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL1U; else goto cfL1T;
       cfL1U: // global
           HpAlloc = 24;
           goto cfL1R;
       cfL1R: // global
           R2 = _sfCkT::P64;
           R1 = _sfCkY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL1T: // global
           _sfCkN::P64 = P64[_sfCkY::P64 + 7];
           I64[Hp - 16] = sat_sfCkV_info;
           P64[Hp - 8] = _sfCkN::P64;
           P64[Hp] = _sfCkT::P64;
           I64[Sp - 8] = block_cfL1N_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkY_info" {
     sat_sfCkY_info:
         const sat_sfCkY_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+248;
 },
 _cfL1N() //  [R1]
         { []
         }
     {offset
       cfL1N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL1X; else goto cfL1W;
       cfL1X: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfL1W: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfL1N_info" {
     block_cfL1N_info:
         const _cfL1N;
         const 0;
         const 30;
 },
 sat_sfCkZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL1Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL22; else goto cfL21;
       cfL22: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL21: // global
           _sfCkJ::P64 = P64[R1 + 7];
           _sfCkN::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCkY_info;
           P64[Hp] = _sfCkN::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCkJ::P64;
           R2 = Data.Semigroup.$fReadOption2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCkZ_info" {
     sat_sfCkZ_info:
         const sat_sfCkZ_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const SfCR7_srt+248;
 },
 sat_sfCl2_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL26: // global
           _sfCkR::P64 = R2;
           _sfCl2::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfL27; else goto cfL28;
       cfL28: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL2a; else goto cfL29;
       cfL2a: // global
           HpAlloc = 24;
           goto cfL27;
       cfL27: // global
           R2 = _sfCkR::P64;
           R1 = _sfCl2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL29: // global
           _sfCkJ::P64 = P64[_sfCl2::P64 + 7];
           _sfCkN::P64 = P64[_sfCl2::P64 + 15];
           I64[Hp - 16] = sat_sfCkZ_info;
           P64[Hp - 8] = _sfCkJ::P64;
           P64[Hp] = _sfCkN::P64;
           I64[Sp - 8] = block_cfL23_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCl2_info" {
     sat_sfCl2_info:
         const sat_sfCl2_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const SfCR7_srt+248;
 },
 _cfL23() //  [R1]
         { []
         }
     {offset
       cfL23: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL2d; else goto cfL2c;
       cfL2d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfL2c: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfL23_info" {
     block_cfL23_info:
         const _cfL23;
         const 0;
         const 30;
 },
 sat_sfCl5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfL2e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfL2f; else goto cfL2g;
       cfL2f: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL2g: // global
           I64[Sp - 24] = block_cfL1h_info;
           _sfCkJ::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCkJ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufL2t; else goto cfL1i;
       ufL2t: // global
           call _cfL1h(R1) args: 0, res: 0, upd: 0;
       cfL1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCl5_info" {
     sat_sfCl5_info:
         const sat_sfCl5_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const SfCR7_srt+248;
 },
 _cfL1h() //  [R1]
         { []
         }
     {offset
       cfL1h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL2j; else goto cfL2i;
       cfL2j: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfL2i: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfL2l; else goto cfL2p;
       cfL2l: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfL2p: // global
           I64[Hp - 16] = sat_sfCl2_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfL2m_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadOption_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfL1h_info" {
     block_cfL1h_info:
         const _cfL1h;
         const 2;
         const 270582939678;
         const SfCR7_srt+248;
 },
 _cfL2m() //  [R1]
         { []
         }
     {offset
       cfL2m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL2s; else goto cfL2r;
       cfL2s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfL2r: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfL2m_info" {
     block_cfL2m_info:
         const _cfL2m;
         const 0;
         const 30;
 },
 Data.Semigroup.$fReadOption1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfL2u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL2y; else goto cfL2x;
       cfL2y: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL2x: // global
           I64[Hp - 24] = ds_sfCkJ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCl5_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption1_info" {
     Data.Semigroup.$fReadOption1_info:
         const Data.Semigroup.$fReadOption1_entry;
         const 0;
         const 2194728288270;
         const 12884901911;
         const SfCR7_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.248254572 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadsPrec_closure" {
     Data.Semigroup.$fReadOption_$creadsPrec_closure:
         const Data.Semigroup.$fReadOption_$creadsPrec_info;
         const 0;
 },
 sat_sfCl8_entry() //  [R1]
         { []
         }
     {offset
       cfL3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL3r; else goto cfL3s;
       cfL3r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL3s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCl8_info" {
     sat_sfCl8_info:
         const sat_sfCl8_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cfL3t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL3x; else goto cfL3w;
       cfL3x: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL3w: // global
           I64[Hp - 24] = sat_sfCl8_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadsPrec_info" {
     Data.Semigroup.$fReadOption_$creadsPrec_info:
         const Data.Semigroup.$fReadOption_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.254027779 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadListPrec_closure" {
     Data.Semigroup.$fReadOption_$creadListPrec_closure:
         const Data.Semigroup.$fReadOption_$creadListPrec_info;
         const 0;
 },
 sat_sfCla_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfL3P: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCla_info" {
     sat_sfCla_info:
         const sat_sfCla_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfL3S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL3W; else goto cfL3V;
       cfL3W: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL3V: // global
           I64[Hp - 8] = sat_sfCla_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadListPrec_info" {
     Data.Semigroup.$fReadOption_$creadListPrec_info:
         const Data.Semigroup.$fReadOption_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SfCR7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.260049802 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadList_closure" {
     Data.Semigroup.$fReadOption_$creadList_closure:
         const Data.Semigroup.$fReadOption_$creadList_info;
         const 0;
 },
 sat_sfClc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfL4h: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClc_info" {
     sat_sfClc_info:
         const sat_sfClc_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+304;
 },
 sat_sfCld_entry() //  [R1]
         { []
         }
     {offset
       cfL4k: // global
           _sfCld::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfL4l; else goto cfL4m;
       cfL4m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfL4o; else goto cfL4n;
       cfL4o: // global
           HpAlloc = 16;
           goto cfL4l;
       cfL4l: // global
           R1 = _sfCld::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL4n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCld::P64;
           _sfClb::P64 = P64[_sfCld::P64 + 16];
           I64[Hp - 8] = sat_sfClc_info;
           P64[Hp] = _sfClb::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCld_info" {
     sat_sfCld_info:
         const sat_sfCld_entry;
         const 1;
         const 21474836496;
         const SfCR7_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfL4p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL4t; else goto cfL4s;
       cfL4t: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL4s: // global
           I64[Hp - 16] = sat_sfCld_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadList_info" {
     Data.Semigroup.$fReadOption_$creadList_info:
         const Data.Semigroup.$fReadOption_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SfCR7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.268446597 UTC

[section ""data" . Data.Semigroup.$fReadOption_closure" {
     Data.Semigroup.$fReadOption_closure:
         const Data.Semigroup.$fReadOption_info;
         const 0;
 },
 sat_sfCli_entry() //  [R1]
         { []
         }
     {offset
       cfL4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL4O; else goto cfL4P;
       cfL4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCli_info" {
     sat_sfCli_info:
         const sat_sfCli_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+328;
 },
 sat_sfClh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfL4V: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClh_info" {
     sat_sfClh_info:
         const sat_sfClh_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+304;
 },
 sat_sfClg_entry() //  [R1]
         { []
         }
     {offset
       cfL52: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL53; else goto cfL54;
       cfL53: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL54: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClg_info" {
     sat_sfClg_info:
         const sat_sfClg_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+336;
 },
 sat_sfClf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL5a: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fReadOption_$creadsPrec_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClf_info" {
     sat_sfClf_info:
         const sat_sfClf_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+312;
 },
 Data.Semigroup.$fReadOption_entry() //  [R2]
         { []
         }
     {offset
       cfL5e: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfL5i; else goto cfL5h;
       cfL5i: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL5h: // global
           I64[Hp - 112] = sat_sfCli_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfClh_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfClg_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfClf_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_info" {
     Data.Semigroup.$fReadOption_info:
         const Data.Semigroup.$fReadOption_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SfCR7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.279308269 UTC

[section ""cstring" . Data.Semigroup.$fShowOption2_bytes" {
     Data.Semigroup.$fShowOption2_bytes:
         I8[] [79,112,116,105,111,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.280996727 UTC

[section ""cstring" . Data.Semigroup.$fShowOption1_bytes" {
     Data.Semigroup.$fShowOption1_bytes:
         I8[] [103,101,116,79,112,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.288453367 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec5_closure" {
     Data.Semigroup.$w$cshowsPrec5_closure:
         const Data.Semigroup.$w$cshowsPrec5_info;
         const 0;
 },
 f_sfClm_entry() //  [R1]
         { []
         }
     {offset
       cfL5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL5R; else goto cfL5S;
       cfL5R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL5S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Semigroup.$fFoldableOption7_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfClm_info" {
     f_sfClm_info:
         const f_sfClm_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+352;
 },
 sat_sfClp_entry() //  [R1]
         { []
         }
     {offset
       cfL6d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL6e; else goto cfL6f;
       cfL6e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL6f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClp_info" {
     sat_sfClp_info:
         const sat_sfClp_entry;
         const 1;
         const 16;
 },
 sat_sfClq_entry() //  [R1]
         { []
         }
     {offset
       cfL6g: // global
           _sfClq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL6h; else goto cfL6i;
       cfL6i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL6k; else goto cfL6j;
       cfL6k: // global
           HpAlloc = 24;
           goto cfL6h;
       cfL6h: // global
           R1 = _sfClq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL6j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClq::P64;
           _sfClm::P64 = P64[_sfClq::P64 + 16];
           _sfClo::P64 = P64[_sfClq::P64 + 24];
           I64[Hp - 16] = sat_sfClp_info;
           P64[Hp] = _sfClo::P64;
           R2 = Hp - 16;
           R1 = _sfClm::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClq_info" {
     sat_sfClq_info:
         const sat_sfClq_entry;
         const 2;
         const 18;
 },
 sat_sfClr_entry() //  [R1]
         { []
         }
     {offset
       cfL6l: // global
           _sfClr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL6m; else goto cfL6n;
       cfL6n: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL6p; else goto cfL6o;
       cfL6p: // global
           HpAlloc = 32;
           goto cfL6m;
       cfL6m: // global
           R1 = _sfClr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL6o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClr::P64;
           _sfClm::P64 = P64[_sfClr::P64 + 16];
           _sfClo::P64 = P64[_sfClr::P64 + 24];
           I64[Hp - 24] = sat_sfClq_info;
           P64[Hp - 8] = _sfClm::P64;
           P64[Hp] = _sfClo::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClr_info" {
     sat_sfClr_info:
         const sat_sfClr_entry;
         const 2;
         const 18;
 },
 sat_sfCls_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL6q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL6u; else goto cfL6t;
       cfL6u: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL6t: // global
           _sfClm::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfClr_info;
           P64[Hp - 8] = _sfClm::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCls_info" {
     sat_sfCls_info:
         const sat_sfCls_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfClv_entry() //  [R1]
         { []
         }
     {offset
       cfL6S: // global
           _sfClv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL6T; else goto cfL6U;
       cfL6U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL6W; else goto cfL6V;
       cfL6W: // global
           HpAlloc = 24;
           goto cfL6T;
       cfL6T: // global
           R1 = _sfClv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL6V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClv::P64;
           _sfClt::P64 = P64[_sfClv::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfClt::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClv_info" {
     sat_sfClv_info:
         const sat_sfClv_entry;
         const 1;
         const 16;
 },
 sat_sfClw_entry() //  [R1]
         { []
         }
     {offset
       cfL6X: // global
           _sfClw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL6Y; else goto cfL6Z;
       cfL6Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfL71; else goto cfL70;
       cfL71: // global
           HpAlloc = 24;
           goto cfL6Y;
       cfL6Y: // global
           R1 = _sfClw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL70: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClw::P64;
           _sfClm::P64 = P64[_sfClw::P64 + 16];
           _sfClt::P64 = P64[_sfClw::P64 + 24];
           I64[Hp - 16] = sat_sfClv_info;
           P64[Hp] = _sfClt::P64;
           R2 = Hp - 16;
           R1 = _sfClm::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClw_info" {
     sat_sfClw_info:
         const sat_sfClw_entry;
         const 2;
         const 18;
 },
 sat_sfClx_entry() //  [R1]
         { []
         }
     {offset
       cfL72: // global
           _sfClx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL73; else goto cfL74;
       cfL74: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL76; else goto cfL75;
       cfL76: // global
           HpAlloc = 32;
           goto cfL73;
       cfL73: // global
           R1 = _sfClx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL75: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClx::P64;
           _sfClm::P64 = P64[_sfClx::P64 + 16];
           _sfClt::P64 = P64[_sfClx::P64 + 24];
           I64[Hp - 24] = sat_sfClw_info;
           P64[Hp - 8] = _sfClm::P64;
           P64[Hp] = _sfClt::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClx_info" {
     sat_sfClx_info:
         const sat_sfClx_entry;
         const 2;
         const 18;
 },
 sat_sfCly_entry() //  [R1]
         { []
         }
     {offset
       cfL77: // global
           _sfCly::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL78; else goto cfL79;
       cfL79: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL7b; else goto cfL7a;
       cfL7b: // global
           HpAlloc = 32;
           goto cfL78;
       cfL78: // global
           R1 = _sfCly::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL7a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCly::P64;
           _sfClm::P64 = P64[_sfCly::P64 + 16];
           _sfClt::P64 = P64[_sfCly::P64 + 24];
           I64[Hp - 24] = sat_sfClx_info;
           P64[Hp - 8] = _sfClm::P64;
           P64[Hp] = _sfClt::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCly_info" {
     sat_sfCly_info:
         const sat_sfCly_entry;
         const 2;
         const 18;
 },
 sat_sfClz_entry() //  [R1, R2]
         { []
         }
     {offset
       cfL7d: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfL7h; else goto cfL7g;
       cfL7h: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfL7g: // global
           _sfClm::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCly_info;
           P64[Hp - 32] = _sfClm::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClz_info" {
     sat_sfClz_info:
         const sat_sfClz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfL7l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfL7p; else goto cfL7o;
       cfL7p: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL7o: // global
           I64[Hp - 40] = f_sfClm_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfL5M::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfL7j; else goto cfL7k;
       cfL7j: // global
           I64[Hp - 8] = sat_sfCls_info;
           P64[Hp] = _cfL5M::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfL7k: // global
           I64[Hp - 8] = sat_sfClz_info;
           P64[Hp] = _cfL5M::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec5_info" {
     Data.Semigroup.$w$cshowsPrec5_info:
         const Data.Semigroup.$w$cshowsPrec5_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const SfCR7_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.310529493 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshowsPrec_closure" {
     Data.Semigroup.$fShowOption_$cshowsPrec_closure:
         const Data.Semigroup.$fShowOption_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.$fShowOption_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfL8h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfL8i; else goto cfL8j;
       cfL8i: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL8j: // global
           I64[Sp - 24] = block_cfL8e_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufL8n; else goto cfL8f;
       ufL8n: // global
           call _cfL8e(R1) args: 0, res: 0, upd: 0;
       cfL8f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshowsPrec_info" {
     Data.Semigroup.$fShowOption_$cshowsPrec_info:
         const Data.Semigroup.$fShowOption_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfCR7_srt+360;
 },
 _cfL8e() //  [R1]
         { []
         }
     {offset
       cfL8e: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec5_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfL8e_info" {
     block_cfL8e_info:
         const _cfL8e;
         const 2;
         const 4294967326;
         const SfCR7_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.316755184 UTC

[section ""data" . Data.Semigroup.$fShowOption3_closure" {
     Data.Semigroup.$fShowOption3_closure:
         const Data.Semigroup.$fShowOption3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fShowOption3_entry() //  [R1]
         { []
         }
     {offset
       cfL8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfL8E; else goto cfL8F;
       cfL8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL8F: // global
           (_cfL8A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfL8A::I64 == 0) goto cfL8C; else goto cfL8B;
       cfL8C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfL8B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfL8A::I64;
           R3 = Data.Semigroup.$fReadFirst3_closure;
           R2 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption3_info" {
     Data.Semigroup.$fShowOption3_info:
         const Data.Semigroup.$fShowOption3_entry;
         const 0;
         const 12884901909;
         const SfCR7_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.323782746 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshow_closure" {
     Data.Semigroup.$fShowOption_$cshow_closure:
         const Data.Semigroup.$fShowOption_$cshow_info;
         const 0;
 },
 sat_sfClJ_entry() //  [R1]
         { []
         }
     {offset
       cfL99: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfL9a; else goto cfL9b;
       cfL9a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL9b: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClJ_info" {
     sat_sfClJ_info:
         const sat_sfClJ_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+384;
 },
 sat_sfClK_entry() //  [R1]
         { []
         }
     {offset
       cfL9g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfL9h; else goto cfL9i;
       cfL9h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL9i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfL8Z_info;
           _sfClF::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfClF::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufL9o; else goto cfL90;
       ufL9o: // global
           call _cfL8Z(R1) args: 0, res: 0, upd: 0;
       cfL90: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClK_info" {
     sat_sfClK_info:
         const sat_sfClK_entry;
         const 2;
         const 30064771090;
         const SfCR7_srt+384;
 },
 _cfL8Z() //  [R1]
         { []
         }
     {offset
       cfL8Z: // global
           if (R1 & 7 == 1) goto cfL9d; else goto cfL9e;
       cfL9d: // global
           R1 = Data.Semigroup.$fShowOption3_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cfL9e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL9n; else goto cfL9m;
       cfL9n: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfL9m: // global
           _sfClI::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sfClJ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfClI::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfL8Z_info" {
     block_cfL8Z_info:
         const _cfL8Z;
         const 1;
         const 30064771102;
         const SfCR7_srt+384;
 },
 sat_sfClL_entry() //  [R1]
         { []
         }
     {offset
       cfL9p: // global
           _sfClL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfL9q; else goto cfL9r;
       cfL9r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL9t; else goto cfL9s;
       cfL9t: // global
           HpAlloc = 32;
           goto cfL9q;
       cfL9q: // global
           R1 = _sfClL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfL9s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfClL::P64;
           _sfClF::P64 = P64[_sfClL::P64 + 16];
           _sfClG::P64 = P64[_sfClL::P64 + 24];
           I64[Hp - 24] = sat_sfClK_info;
           P64[Hp - 8] = _sfClF::P64;
           P64[Hp] = _sfClG::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClL_info" {
     sat_sfClL_info:
         const sat_sfClL_entry;
         const 2;
         const 30064771090;
         const SfCR7_srt+384;
 },
 Data.Semigroup.$fShowOption_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfL9u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfL9y; else goto cfL9x;
       cfL9y: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfL9x: // global
           I64[Hp - 24] = sat_sfClL_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshow_info" {
     Data.Semigroup.$fShowOption_$cshow_info:
         const Data.Semigroup.$fShowOption_$cshow_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SfCR7_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.335145493 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshowList_closure" {
     Data.Semigroup.$fShowOption_$cshowList_closure:
         const Data.Semigroup.$fShowOption_$cshowList_info;
         const 0;
 },
 sat_sfClQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLa7: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec5_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClQ_info" {
     sat_sfClQ_info:
         const sat_sfClQ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+360;
 },
 Data.Semigroup.$fShowOption_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLaa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLae; else goto cfLad;
       cfLae: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLad: // global
           I64[Hp - 8] = sat_sfClQ_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshowList_info" {
     Data.Semigroup.$fShowOption_$cshowList_info:
         const Data.Semigroup.$fShowOption_$cshowList_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SfCR7_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.341845288 UTC

[section ""data" . Data.Semigroup.$fShowOption_closure" {
     Data.Semigroup.$fShowOption_closure:
         const Data.Semigroup.$fShowOption_info;
         const 0;
 },
 sat_sfClU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLav: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowOption_$cshowList_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClU_info" {
     sat_sfClU_info:
         const sat_sfClU_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+416;
 },
 sat_sfClT_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLaD: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowOption_$cshow_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClT_info" {
     sat_sfClT_info:
         const sat_sfClT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+408;
 },
 sat_sfClS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLaL: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowOption_$cshowsPrec_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClS_info" {
     sat_sfClS_info:
         const sat_sfClS_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+368;
 },
 Data.Semigroup.$fShowOption_entry() //  [R2]
         { []
         }
     {offset
       cfLaP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfLaT; else goto cfLaS;
       cfLaT: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLaS: // global
           I64[Hp - 72] = sat_sfClU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfClT_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfClS_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_info" {
     Data.Semigroup.$fShowOption_info:
         const Data.Semigroup.$fShowOption_entry;
         const 0;
         const 966367641614;
         const 4294967301;
         const SfCR7_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.35061756 UTC

[section ""data" . Data.Semigroup.$fEqOption_closure" {
     Data.Semigroup.$fEqOption_closure:
         const Data.Semigroup.$fEqOption_info;
 },
 sat_sfClX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLbk: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClX_info" {
     sat_sfClX_info:
         const sat_sfClX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfClW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLbs: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfClW_info" {
     sat_sfClW_info:
         const sat_sfClW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fEqOption_entry() //  [R2]
         { []
         }
     {offset
       cfLbw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLbA; else goto cfLbz;
       cfLbA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fEqOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLbz: // global
           I64[Hp - 48] = sat_sfClX_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfClW_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqOption_info" {
     Data.Semigroup.$fEqOption_info:
         const Data.Semigroup.$fEqOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.358899436 UTC

[section ""data" . Data.Semigroup.$fOrdOption_$cp1Ord_closure" {
     Data.Semigroup.$fOrdOption_$cp1Ord_closure:
         const Data.Semigroup.$fOrdOption_$cp1Ord_info;
 },
 sat_sfClZ_entry() //  [R1]
         { []
         }
     {offset
       cfLbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLbX; else goto cfLbY;
       cfLbX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfClZ_info" {
     sat_sfClZ_info:
         const sat_sfClZ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdOption_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfLbZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLc3; else goto cfLc2;
       cfLc3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdOption_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLc2: // global
           I64[Hp - 16] = sat_sfClZ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqOption_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdOption_$cp1Ord_info" {
     Data.Semigroup.$fOrdOption_$cp1Ord_info:
         const Data.Semigroup.$fOrdOption_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.366911385 UTC

[section ""data" . Data.Semigroup.$fOrdOption_closure" {
     Data.Semigroup.$fOrdOption_closure:
         const Data.Semigroup.$fOrdOption_info;
 },
 sat_sfCma_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLcl: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCma_info" {
     sat_sfCma_info:
         const sat_sfCma_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLct: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm9_info" {
     sat_sfCm9_info:
         const sat_sfCm9_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLcB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm8_info" {
     sat_sfCm8_info:
         const sat_sfCm8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLcJ: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm7_info" {
     sat_sfCm7_info:
         const sat_sfCm7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLcR: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm4_info" {
     sat_sfCm4_info:
         const sat_sfCm4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLcZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm3_info" {
     sat_sfCm3_info:
         const sat_sfCm3_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLd7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCm2_info" {
     sat_sfCm2_info:
         const sat_sfCm2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCm1_entry() //  [R1]
         { []
         }
     {offset
       cfLde: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLdf; else goto cfLdg;
       cfLdf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLdg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdOption_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCm1_info" {
     sat_sfCm1_info:
         const sat_sfCm1_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdOption_entry() //  [R2]
         { []
         }
     {offset
       cfLdi: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cfLdm; else goto cfLdl;
       cfLdm: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLdl: // global
           I64[Hp - 200] = sat_sfCma_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCm9_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfCm8_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfCm7_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCm4_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfCm3_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCm2_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCm1_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdOption_info" {
     Data.Semigroup.$fOrdOption_info:
         const Data.Semigroup.$fOrdOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.382604598 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid1_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid1_closure:
         const Data.Semigroup.$fGeneric1WrappedMonoid1_info;
 },
 Data.Semigroup.$fGeneric1WrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfLe3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1WrappedMonoid1_info" {
     Data.Semigroup.$fGeneric1WrappedMonoid1_info:
         const Data.Semigroup.$fGeneric1WrappedMonoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.385969562 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid2_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid2_closure:
         const Data.Semigroup.$fGeneric1WrappedMonoid2_info;
 },
 Data.Semigroup.$fGeneric1WrappedMonoid2_entry() //  [R2]
         { []
         }
     {offset
       cfLee: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1WrappedMonoid2_info" {
     Data.Semigroup.$fGeneric1WrappedMonoid2_info:
         const Data.Semigroup.$fGeneric1WrappedMonoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.389063799 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1WrappedMonoid2_closure+1;
         const Data.Semigroup.$fGeneric1WrappedMonoid1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.391710024 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid1_closure" {
     Data.Semigroup.$fGenericWrappedMonoid1_closure:
         const Data.Semigroup.$fGenericWrappedMonoid1_info;
 },
 Data.Semigroup.$fGenericWrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfLeq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericWrappedMonoid1_info" {
     Data.Semigroup.$fGenericWrappedMonoid1_info:
         const Data.Semigroup.$fGenericWrappedMonoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.395422878 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid2_closure" {
     Data.Semigroup.$fGenericWrappedMonoid2_closure:
         const Data.Semigroup.$fGenericWrappedMonoid2_info;
 },
 Data.Semigroup.$fGenericWrappedMonoid2_entry() //  [R2]
         { []
         }
     {offset
       cfLeB: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericWrappedMonoid2_info" {
     Data.Semigroup.$fGenericWrappedMonoid2_info:
         const Data.Semigroup.$fGenericWrappedMonoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.398618575 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid_closure" {
     Data.Semigroup.$fGenericWrappedMonoid_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericWrappedMonoid2_closure+1;
         const Data.Semigroup.$fGenericWrappedMonoid1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.401262356 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info;
 },
 sat_sfCmj_entry() //  [R1]
         { []
         }
     {offset
       cfLeR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLeS; else goto cfLeT;
       cfLeS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmj_info" {
     sat_sfCmj_info:
         const sat_sfCmj_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfLeU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLeY; else goto cfLeX;
       cfLeY: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLeX: // global
           I64[Hp - 16] = sat_sfCmj_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfCmg::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfCmg::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.406213567 UTC

[section ""cstring" . Data.Semigroup.$fReadWrappedMonoid5_bytes" {
     Data.Semigroup.$fReadWrappedMonoid5_bytes:
         I8[] [87,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.408434152 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid4_closure" {
     Data.Semigroup.$fReadWrappedMonoid4_closure:
         const Data.Semigroup.$fReadWrappedMonoid4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadWrappedMonoid4_entry() //  [R1]
         { []
         }
     {offset
       cfLfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLff; else goto cfLfg;
       cfLff: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLfg: // global
           (_cfLfb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLfb::I64 == 0) goto cfLfd; else goto cfLfc;
       cfLfd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLfc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLfb::I64;
           R2 = Data.Semigroup.$fReadWrappedMonoid5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid4_info" {
     Data.Semigroup.$fReadWrappedMonoid4_info:
         const Data.Semigroup.$fReadWrappedMonoid4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.412312139 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_lexeme_closure" {
     Data.Semigroup.$fReadWrappedMonoid_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.414095065 UTC

[section ""cstring" . Data.Semigroup.$fReadWrappedMonoid3_bytes" {
     Data.Semigroup.$fReadWrappedMonoid3_bytes:
         I8[] [117,110,119,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.416308318 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid2_closure" {
     Data.Semigroup.$fReadWrappedMonoid2_closure:
         const Data.Semigroup.$fReadWrappedMonoid2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadWrappedMonoid2_entry() //  [R1]
         { []
         }
     {offset
       cfLfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLfx; else goto cfLfy;
       cfLfx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLfy: // global
           (_cfLft::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLft::I64 == 0) goto cfLfv; else goto cfLfu;
       cfLfv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLfu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLft::I64;
           R2 = Data.Semigroup.$fReadWrappedMonoid3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid2_info" {
     Data.Semigroup.$fReadWrappedMonoid2_info:
         const Data.Semigroup.$fReadWrappedMonoid2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.425305358 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid1_closure" {
     Data.Semigroup.$fReadWrappedMonoid1_closure:
         const Data.Semigroup.$fReadWrappedMonoid1_info;
         const 0;
 },
 lvl33_sfCml_entry() //  [R1]
         { []
         }
     {offset
       cfLfO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfLfP; else goto cfLfQ;
       cfLfP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLfQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCml_info" {
     lvl33_sfCml_info:
         const lvl33_sfCml_entry;
         const 1;
         const 16;
 },
 ds_sfCmm_entry() //  [R1]
         { []
         }
     {offset
       cfLfW: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCmm_info" {
     ds_sfCmm_info:
         const ds_sfCmm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCmx_entry() //  [R1]
         { []
         }
     {offset
       cfLgx: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmx_info" {
     sat_sfCmx_info:
         const sat_sfCmx_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCmA_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLgD: // global
           _sfCmv::P64 = R2;
           _sfCmA::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLgE; else goto cfLgF;
       cfLgF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLgH; else goto cfLgG;
       cfLgH: // global
           HpAlloc = 24;
           goto cfLgE;
       cfLgE: // global
           R2 = _sfCmv::P64;
           R1 = _sfCmA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLgG: // global
           _sfCmp::P64 = P64[_sfCmA::P64 + 7];
           I64[Hp - 16] = sat_sfCmx_info;
           P64[Hp - 8] = _sfCmp::P64;
           P64[Hp] = _sfCmv::P64;
           I64[Sp - 8] = block_cfLgA_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmA_info" {
     sat_sfCmA_info:
         const sat_sfCmA_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+248;
 },
 _cfLgA() //  [R1]
         { []
         }
     {offset
       cfLgA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLgK; else goto cfLgJ;
       cfLgK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLgJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLgA_info" {
     block_cfLgA_info:
         const _cfLgA;
         const 0;
         const 30;
 },
 sat_sfCmB_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLgL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLgP; else goto cfLgO;
       cfLgP: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLgO: // global
           _sfCmm::P64 = P64[R1 + 7];
           _sfCmp::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCmA_info;
           P64[Hp] = _sfCmp::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCmm::P64;
           R2 = Data.Semigroup.$fReadWrappedMonoid2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmB_info" {
     sat_sfCmB_info:
         const sat_sfCmB_entry;
         const 2;
         const 36028827083735051;
         const 4294967301;
         const SfCR7_srt+248;
 },
 sat_sfCmE_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLgT: // global
           _sfCmt::P64 = R2;
           _sfCmE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLgU; else goto cfLgV;
       cfLgV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLgX; else goto cfLgW;
       cfLgX: // global
           HpAlloc = 24;
           goto cfLgU;
       cfLgU: // global
           R2 = _sfCmt::P64;
           R1 = _sfCmE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLgW: // global
           _sfCmm::P64 = P64[_sfCmE::P64 + 7];
           _sfCmp::P64 = P64[_sfCmE::P64 + 15];
           I64[Hp - 16] = sat_sfCmB_info;
           P64[Hp - 8] = _sfCmm::P64;
           P64[Hp] = _sfCmp::P64;
           I64[Sp - 8] = block_cfLgQ_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmE_info" {
     sat_sfCmE_info:
         const sat_sfCmE_entry;
         const 2;
         const 36028895803211787;
         const 4294967301;
         const SfCR7_srt+248;
 },
 _cfLgQ() //  [R1]
         { []
         }
     {offset
       cfLgQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLh0; else goto cfLgZ;
       cfLh0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLgZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLgQ_info" {
     block_cfLgQ_info:
         const _cfLgQ;
         const 0;
         const 30;
 },
 sat_sfCmH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLh1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLh2; else goto cfLh3;
       cfLh2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLh3: // global
           I64[Sp - 24] = block_cfLg4_info;
           _sfCmm::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCmm::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLhg; else goto cfLg5;
       ufLhg: // global
           call _cfLg4(R1) args: 0, res: 0, upd: 0;
       cfLg5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmH_info" {
     sat_sfCmH_info:
         const sat_sfCmH_entry;
         const 1;
         const 108086489841139721;
         const 8589934607;
         const SfCR7_srt+248;
 },
 _cfLg4() //  [R1]
         { []
         }
     {offset
       cfLg4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLh6; else goto cfLh5;
       cfLh6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLh5: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfLh8; else goto cfLhc;
       cfLh8: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLhc: // global
           I64[Hp - 16] = sat_sfCmE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfLh9_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadWrappedMonoid_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLg4_info" {
     block_cfLg4_info:
         const _cfLg4;
         const 2;
         const 108086489841139742;
         const SfCR7_srt+248;
 },
 _cfLh9() //  [R1]
         { []
         }
     {offset
       cfLh9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLhf; else goto cfLhe;
       cfLhf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLhe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLh9_info" {
     block_cfLh9_info:
         const _cfLh9;
         const 0;
         const 30;
 },
 Data.Semigroup.$fReadWrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfLhh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLhl; else goto cfLhk;
       cfLhl: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLhk: // global
           I64[Hp - 48] = lvl33_sfCml_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfCmm_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfCmH_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid1_info" {
     Data.Semigroup.$fReadWrappedMonoid1_info:
         const Data.Semigroup.$fReadWrappedMonoid1_entry;
         const 0;
         const 252201952794902542;
         const 4294967301;
         const SfCR7_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.449343097 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info;
         const 0;
 },
 ds_sfCmJ_entry() //  [R1]
         { []
         }
     {offset
       cfLii: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLij; else goto cfLik;
       cfLij: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfCmJ_info" {
     ds_sfCmJ_info:
         const ds_sfCmJ_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+448;
 },
 sat_sfCmL_entry() //  [R1]
         { []
         }
     {offset
       cfLiu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLiv; else goto cfLiw;
       cfLiv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLiw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmL_info" {
     sat_sfCmL_info:
         const sat_sfCmL_entry;
         const 2;
         const 18;
 },
 sat_sfCmM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLix: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLiB; else goto cfLiA;
       cfLiB: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLiA: // global
           _sfCmJ::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCmL_info;
           P64[Hp - 8] = _sfCmJ::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmM_info" {
     sat_sfCmM_info:
         const sat_sfCmM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLiC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfLiG; else goto cfLiF;
       cfLiG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLiF: // global
           I64[Hp - 32] = ds_sfCmJ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCmM_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.458091838 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info;
         const 0;
 },
 sat_sfCmO_entry() //  [R1]
         { []
         }
     {offset
       cfLj6: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmO_info" {
     sat_sfCmO_info:
         const sat_sfCmO_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+448;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLj9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLjd; else goto cfLjc;
       cfLjd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLjc: // global
           I64[Hp - 16] = sat_sfCmO_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry;
         const 0;
         const 1407379178520590;
         const 4294967301;
         const SfCR7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.464951357 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadList_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadList_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_info;
         const 0;
 },
 sat_sfCmQ_entry() //  [R1]
         { []
         }
     {offset
       cfLjx: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCmQ_info" {
     sat_sfCmQ_info:
         const sat_sfCmQ_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+448;
 },
 sat_sfCmR_entry() //  [R1]
         { []
         }
     {offset
       cfLjA: // global
           _sfCmR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfLjB; else goto cfLjC;
       cfLjC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLjE; else goto cfLjD;
       cfLjE: // global
           HpAlloc = 24;
           goto cfLjB;
       cfLjB: // global
           R1 = _sfCmR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLjD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCmR::P64;
           _sfCmP::P64 = P64[_sfCmR::P64 + 16];
           I64[Hp - 16] = sat_sfCmQ_info;
           P64[Hp] = _sfCmP::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmR_info" {
     sat_sfCmR_info:
         const sat_sfCmR_entry;
         const 1;
         const 281479271677968;
         const SfCR7_srt+320;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfLjF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLjJ; else goto cfLjI;
       cfLjJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLjI: // global
           I64[Hp - 16] = sat_sfCmR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadList_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadList_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_entry;
         const 0;
         const 2533279085363214;
         const 4294967301;
         const SfCR7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.473414286 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_closure" {
     Data.Semigroup.$fReadWrappedMonoid_closure:
         const Data.Semigroup.$fReadWrappedMonoid_info;
         const 0;
 },
 sat_sfCmW_entry() //  [R1]
         { []
         }
     {offset
       cfLk3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLk4; else goto cfLk5;
       cfLk4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLk5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmW_info" {
     sat_sfCmW_info:
         const sat_sfCmW_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+464;
 },
 sat_sfCmV_entry() //  [R1]
         { []
         }
     {offset
       cfLka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLkb; else goto cfLkc;
       cfLkb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLkc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmV_info" {
     sat_sfCmV_info:
         const sat_sfCmV_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+448;
 },
 sat_sfCmU_entry() //  [R1]
         { []
         }
     {offset
       cfLkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLki; else goto cfLkj;
       cfLki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLkj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmU_info" {
     sat_sfCmU_info:
         const sat_sfCmU_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+472;
 },
 sat_sfCmT_entry() //  [R1]
         { []
         }
     {offset
       cfLko: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLkp; else goto cfLkq;
       cfLkp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLkq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCmT_info" {
     sat_sfCmT_info:
         const sat_sfCmT_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+456;
 },
 Data.Semigroup.$fReadWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfLks: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfLkw; else goto cfLkv;
       cfLkw: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLkv: // global
           I64[Hp - 128] = sat_sfCmW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCmV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCmU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCmT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_info" {
     Data.Semigroup.$fReadWrappedMonoid_info:
         const Data.Semigroup.$fReadWrappedMonoid_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfCR7_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.483352491 UTC

[section ""cstring" . Data.Semigroup.$fShowWrappedMonoid2_bytes" {
     Data.Semigroup.$fShowWrappedMonoid2_bytes:
         I8[] [87,114,97,112,77,111,110,111,105,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.484974801 UTC

[section ""cstring" . Data.Semigroup.$fShowWrappedMonoid1_bytes" {
     Data.Semigroup.$fShowWrappedMonoid1_bytes:
         I8[] [117,110,119,114,97,112,77,111,110,111,105,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.492321884 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec6_closure" {
     Data.Semigroup.$w$cshowsPrec6_closure:
         const Data.Semigroup.$w$cshowsPrec6_info;
 },
 f_sfCn0_entry() //  [R1]
         { []
         }
     {offset
       cfLl6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfLl7; else goto cfLl8;
       cfLl7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLl8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCn0_info" {
     f_sfCn0_info:
         const f_sfCn0_entry;
         const 2;
         const 18;
 },
 sat_sfCn3_entry() //  [R1]
         { []
         }
     {offset
       cfLlt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLlu; else goto cfLlv;
       cfLlu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLlv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCn3_info" {
     sat_sfCn3_info:
         const sat_sfCn3_entry;
         const 1;
         const 16;
 },
 sat_sfCn4_entry() //  [R1]
         { []
         }
     {offset
       cfLlw: // global
           _sfCn4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLlx; else goto cfLly;
       cfLly: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLlA; else goto cfLlz;
       cfLlA: // global
           HpAlloc = 24;
           goto cfLlx;
       cfLlx: // global
           R1 = _sfCn4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLlz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCn4::P64;
           _sfCn0::P64 = P64[_sfCn4::P64 + 16];
           _sfCn2::P64 = P64[_sfCn4::P64 + 24];
           I64[Hp - 16] = sat_sfCn3_info;
           P64[Hp] = _sfCn2::P64;
           R2 = Hp - 16;
           R1 = _sfCn0::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCn4_info" {
     sat_sfCn4_info:
         const sat_sfCn4_entry;
         const 2;
         const 18;
 },
 sat_sfCn5_entry() //  [R1]
         { []
         }
     {offset
       cfLlB: // global
           _sfCn5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLlC; else goto cfLlD;
       cfLlD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLlF; else goto cfLlE;
       cfLlF: // global
           HpAlloc = 32;
           goto cfLlC;
       cfLlC: // global
           R1 = _sfCn5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLlE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCn5::P64;
           _sfCn0::P64 = P64[_sfCn5::P64 + 16];
           _sfCn2::P64 = P64[_sfCn5::P64 + 24];
           I64[Hp - 24] = sat_sfCn4_info;
           P64[Hp - 8] = _sfCn0::P64;
           P64[Hp] = _sfCn2::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCn5_info" {
     sat_sfCn5_info:
         const sat_sfCn5_entry;
         const 2;
         const 18;
 },
 sat_sfCn6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLlG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLlK; else goto cfLlJ;
       cfLlK: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLlJ: // global
           _sfCn0::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCn5_info;
           P64[Hp - 8] = _sfCn0::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCn6_info" {
     sat_sfCn6_info:
         const sat_sfCn6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCn9_entry() //  [R1]
         { []
         }
     {offset
       cfLm8: // global
           _sfCn9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLm9; else goto cfLma;
       cfLma: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLmc; else goto cfLmb;
       cfLmc: // global
           HpAlloc = 24;
           goto cfLm9;
       cfLm9: // global
           R1 = _sfCn9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLmb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCn9::P64;
           _sfCn7::P64 = P64[_sfCn9::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCn7::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCn9_info" {
     sat_sfCn9_info:
         const sat_sfCn9_entry;
         const 1;
         const 16;
 },
 sat_sfCna_entry() //  [R1]
         { []
         }
     {offset
       cfLmd: // global
           _sfCna::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLme; else goto cfLmf;
       cfLmf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLmh; else goto cfLmg;
       cfLmh: // global
           HpAlloc = 24;
           goto cfLme;
       cfLme: // global
           R1 = _sfCna::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLmg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCna::P64;
           _sfCn0::P64 = P64[_sfCna::P64 + 16];
           _sfCn7::P64 = P64[_sfCna::P64 + 24];
           I64[Hp - 16] = sat_sfCn9_info;
           P64[Hp] = _sfCn7::P64;
           R2 = Hp - 16;
           R1 = _sfCn0::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCna_info" {
     sat_sfCna_info:
         const sat_sfCna_entry;
         const 2;
         const 18;
 },
 sat_sfCnb_entry() //  [R1]
         { []
         }
     {offset
       cfLmi: // global
           _sfCnb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLmj; else goto cfLmk;
       cfLmk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLmm; else goto cfLml;
       cfLmm: // global
           HpAlloc = 32;
           goto cfLmj;
       cfLmj: // global
           R1 = _sfCnb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCnb::P64;
           _sfCn0::P64 = P64[_sfCnb::P64 + 16];
           _sfCn7::P64 = P64[_sfCnb::P64 + 24];
           I64[Hp - 24] = sat_sfCna_info;
           P64[Hp - 8] = _sfCn0::P64;
           P64[Hp] = _sfCn7::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnb_info" {
     sat_sfCnb_info:
         const sat_sfCnb_entry;
         const 2;
         const 18;
 },
 sat_sfCnc_entry() //  [R1]
         { []
         }
     {offset
       cfLmn: // global
           _sfCnc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLmo; else goto cfLmp;
       cfLmp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLmr; else goto cfLmq;
       cfLmr: // global
           HpAlloc = 32;
           goto cfLmo;
       cfLmo: // global
           R1 = _sfCnc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLmq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCnc::P64;
           _sfCn0::P64 = P64[_sfCnc::P64 + 16];
           _sfCn7::P64 = P64[_sfCnc::P64 + 24];
           I64[Hp - 24] = sat_sfCnb_info;
           P64[Hp - 8] = _sfCn0::P64;
           P64[Hp] = _sfCn7::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnc_info" {
     sat_sfCnc_info:
         const sat_sfCnc_entry;
         const 2;
         const 18;
 },
 sat_sfCnd_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLmt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLmx; else goto cfLmw;
       cfLmx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLmw: // global
           _sfCn0::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCnc_info;
           P64[Hp - 32] = _sfCn0::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCnd_info" {
     sat_sfCnd_info:
         const sat_sfCnd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLmB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfLmF; else goto cfLmE;
       cfLmF: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLmE: // global
           I64[Hp - 40] = f_sfCn0_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfLl2::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfLmz; else goto cfLmA;
       cfLmz: // global
           I64[Hp - 8] = sat_sfCn6_info;
           P64[Hp] = _cfLl2::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLmA: // global
           I64[Hp - 8] = sat_sfCnd_info;
           P64[Hp] = _cfLl2::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec6_info" {
     Data.Semigroup.$w$cshowsPrec6_info:
         const Data.Semigroup.$w$cshowsPrec6_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.514747594 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cfLny: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLnz; else goto cfLnA;
       cfLnz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLnA: // global
           I64[Sp - 24] = block_cfLnv_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLnE; else goto cfLnw;
       ufLnE: // global
           call _cfLnv(R1) args: 0, res: 0, upd: 0;
       cfLnw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfLnv() //  [R1]
         { []
         }
     {offset
       cfLnv: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec6_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLnv_info" {
     block_cfLnv_info:
         const _cfLnv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.520996219 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshow_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshow_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_info;
         const 0;
 },
 sat_sfCnl_entry() //  [R1]
         { []
         }
     {offset
       cfLo0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfLo1; else goto cfLo2;
       cfLo1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLo2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnl_info" {
     sat_sfCnl_info:
         const sat_sfCnl_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+384;
 },
 sat_sfCnm_entry() //  [R1]
         { []
         }
     {offset
       cfLo3: // global
           _sfCnm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLo4; else goto cfLo5;
       cfLo5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLo7; else goto cfLo6;
       cfLo7: // global
           HpAlloc = 32;
           goto cfLo4;
       cfLo4: // global
           R1 = _sfCnm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLo6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCnm::P64;
           _sfCnj::P64 = P64[_sfCnm::P64 + 16];
           _sfCnk::P64 = P64[_sfCnm::P64 + 24];
           I64[Hp - 24] = sat_sfCnl_info;
           P64[Hp - 8] = _sfCnj::P64;
           P64[Hp] = _sfCnk::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnm_info" {
     sat_sfCnm_info:
         const sat_sfCnm_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+384;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfLo8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLoc; else goto cfLob;
       cfLoc: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLob: // global
           I64[Hp - 24] = sat_sfCnm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshow_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshow_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_entry;
         const 0;
         const 35188667056142;
         const 8589934607;
         const SfCR7_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.52910128 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowList_info;
 },
 sat_sfCnr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLoz: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec6_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCnr_info" {
     sat_sfCnr_info:
         const sat_sfCnr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfLoC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLoG; else goto cfLoF;
       cfLoG: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLoF: // global
           I64[Hp - 8] = sat_sfCnr_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshowList_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowList_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.535190265 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_closure" {
     Data.Semigroup.$fShowWrappedMonoid_closure:
         const Data.Semigroup.$fShowWrappedMonoid_info;
         const 0;
 },
 sat_sfCnv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLoX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCnv_info" {
     sat_sfCnv_info:
         const sat_sfCnv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCnu_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLp5: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowWrappedMonoid_$cshow_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCnu_info" {
     sat_sfCnu_info:
         const sat_sfCnu_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+488;
 },
 sat_sfCnt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLpd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCnt_info" {
     sat_sfCnt_info:
         const sat_sfCnt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfLph: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfLpl; else goto cfLpk;
       cfLpl: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLpk: // global
           I64[Hp - 72] = sat_sfCnv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCnu_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCnt_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_info" {
     Data.Semigroup.$fShowWrappedMonoid_info:
         const Data.Semigroup.$fShowWrappedMonoid_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.545187355 UTC

[section ""data" . Data.Semigroup.$fEqWrappedMonoid_closure" {
     Data.Semigroup.$fEqWrappedMonoid_closure:
         const Data.Semigroup.$fEqWrappedMonoid_info;
 },
 sat_sfCny_entry() //  [R1]
         { []
         }
     {offset
       cfLpL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLpM; else goto cfLpN;
       cfLpM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLpN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCny_info" {
     sat_sfCny_info:
         const sat_sfCny_entry;
         const 1;
         const 16;
 },
 sat_sfCnx_entry() //  [R1]
         { []
         }
     {offset
       cfLpS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLpT; else goto cfLpU;
       cfLpT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLpU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnx_info" {
     sat_sfCnx_info:
         const sat_sfCnx_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfLpW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLq0; else goto cfLpZ;
       cfLq0: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLpZ: // global
           I64[Hp - 64] = sat_sfCny_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCnx_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqWrappedMonoid_info" {
     Data.Semigroup.$fEqWrappedMonoid_info:
         const Data.Semigroup.$fEqWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.552533968 UTC

[section ""data" . Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure" {
     Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure:
         const Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info;
 },
 sat_sfCnA_entry() //  [R1]
         { []
         }
     {offset
       cfLqo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLqp; else goto cfLqq;
       cfLqp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLqq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnA_info" {
     sat_sfCnA_info:
         const sat_sfCnA_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfLqr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLqv; else goto cfLqu;
       cfLqv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLqu: // global
           I64[Hp - 16] = sat_sfCnA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqWrappedMonoid_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info" {
     Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info:
         const Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.560866504 UTC

[section ""data" . Data.Semigroup.$fOrdWrappedMonoid_closure" {
     Data.Semigroup.$fOrdWrappedMonoid_closure:
         const Data.Semigroup.$fOrdWrappedMonoid_info;
 },
 sat_sfCnJ_entry() //  [R1]
         { []
         }
     {offset
       cfLqM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLqN; else goto cfLqO;
       cfLqN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLqO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnJ_info" {
     sat_sfCnJ_info:
         const sat_sfCnJ_entry;
         const 1;
         const 16;
 },
 sat_sfCnI_entry() //  [R1]
         { []
         }
     {offset
       cfLqT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLqU; else goto cfLqV;
       cfLqU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLqV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnI_info" {
     sat_sfCnI_info:
         const sat_sfCnI_entry;
         const 1;
         const 16;
 },
 sat_sfCnH_entry() //  [R1]
         { []
         }
     {offset
       cfLr0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLr1; else goto cfLr2;
       cfLr1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLr2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnH_info" {
     sat_sfCnH_info:
         const sat_sfCnH_entry;
         const 1;
         const 16;
 },
 sat_sfCnG_entry() //  [R1]
         { []
         }
     {offset
       cfLr7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLr8; else goto cfLr9;
       cfLr8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLr9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnG_info" {
     sat_sfCnG_info:
         const sat_sfCnG_entry;
         const 1;
         const 16;
 },
 sat_sfCnF_entry() //  [R1]
         { []
         }
     {offset
       cfLre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLrf; else goto cfLrg;
       cfLrf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLrg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnF_info" {
     sat_sfCnF_info:
         const sat_sfCnF_entry;
         const 1;
         const 16;
 },
 sat_sfCnE_entry() //  [R1]
         { []
         }
     {offset
       cfLrl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLrm; else goto cfLrn;
       cfLrm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLrn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnE_info" {
     sat_sfCnE_info:
         const sat_sfCnE_entry;
         const 1;
         const 16;
 },
 sat_sfCnD_entry() //  [R1]
         { []
         }
     {offset
       cfLrs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLrt; else goto cfLru;
       cfLrt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnD_info" {
     sat_sfCnD_info:
         const sat_sfCnD_entry;
         const 1;
         const 16;
 },
 sat_sfCnC_entry() //  [R1]
         { []
         }
     {offset
       cfLrz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLrA; else goto cfLrB;
       cfLrA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLrB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnC_info" {
     sat_sfCnC_info:
         const sat_sfCnC_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfLrD: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfLrH; else goto cfLrG;
       cfLrH: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLrG: // global
           I64[Hp - 256] = sat_sfCnJ_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfCnI_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCnH_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCnG_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCnF_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCnE_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCnD_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCnC_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdWrappedMonoid_info" {
     Data.Semigroup.$fOrdWrappedMonoid_info:
         const Data.Semigroup.$fOrdWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.578664513 UTC

[section ""data" . Data.Semigroup.$fBoundedWrappedMonoid_closure" {
     Data.Semigroup.$fBoundedWrappedMonoid_closure:
         const Data.Semigroup.$fBoundedWrappedMonoid_info;
 },
 sat_sfCnM_entry() //  [R1]
         { []
         }
     {offset
       cfLsz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLsA; else goto cfLsB;
       cfLsA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLsB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnM_info" {
     sat_sfCnM_info:
         const sat_sfCnM_entry;
         const 1;
         const 16;
 },
 sat_sfCnL_entry() //  [R1]
         { []
         }
     {offset
       cfLsG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLsH; else goto cfLsI;
       cfLsH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLsI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnL_info" {
     sat_sfCnL_info:
         const sat_sfCnL_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfLsK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLsO; else goto cfLsN;
       cfLsO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLsN: // global
           I64[Hp - 64] = sat_sfCnM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCnL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedWrappedMonoid_info" {
     Data.Semigroup.$fBoundedWrappedMonoid_info:
         const Data.Semigroup.$fBoundedWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.586286715 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last1_closure" {
     Data.Semigroup.$fGeneric1Last1_closure:
         const Data.Semigroup.$fGeneric1Last1_info;
 },
 Data.Semigroup.$fGeneric1Last1_entry() //  [R2]
         { []
         }
     {offset
       cfLt8: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Last1_info" {
     Data.Semigroup.$fGeneric1Last1_info:
         const Data.Semigroup.$fGeneric1Last1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.5895263 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last2_closure" {
     Data.Semigroup.$fGeneric1Last2_closure:
         const Data.Semigroup.$fGeneric1Last2_info;
 },
 Data.Semigroup.$fGeneric1Last2_entry() //  [R2]
         { []
         }
     {offset
       cfLtj: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Last2_info" {
     Data.Semigroup.$fGeneric1Last2_info:
         const Data.Semigroup.$fGeneric1Last2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.592705797 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last_closure" {
     Data.Semigroup.$fGeneric1Last_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Last2_closure+1;
         const Data.Semigroup.$fGeneric1Last1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.595326063 UTC

[section ""data" . Data.Semigroup.$fGenericLast1_closure" {
     Data.Semigroup.$fGenericLast1_closure:
         const Data.Semigroup.$fGenericLast1_info;
 },
 Data.Semigroup.$fGenericLast1_entry() //  [R2]
         { []
         }
     {offset
       cfLtv: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericLast1_info" {
     Data.Semigroup.$fGenericLast1_info:
         const Data.Semigroup.$fGenericLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.598572046 UTC

[section ""data" . Data.Semigroup.$fGenericLast2_closure" {
     Data.Semigroup.$fGenericLast2_closure:
         const Data.Semigroup.$fGenericLast2_info;
 },
 Data.Semigroup.$fGenericLast2_entry() //  [R2]
         { []
         }
     {offset
       cfLtG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericLast2_info" {
     Data.Semigroup.$fGenericLast2_info:
         const Data.Semigroup.$fGenericLast2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.601666733 UTC

[section ""data" . Data.Semigroup.$fGenericLast_closure" {
     Data.Semigroup.$fGenericLast_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericLast2_closure+1;
         const Data.Semigroup.$fGenericLast1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.604387613 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgfoldl_closure" {
     Data.Semigroup.$fDataLast_$cgfoldl_closure:
         const Data.Semigroup.$fDataLast_$cgfoldl_info;
 },
 sat_sfCnV_entry() //  [R1]
         { []
         }
     {offset
       cfLtW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLtX; else goto cfLtY;
       cfLtX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLtY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCnV_info" {
     sat_sfCnV_info:
         const sat_sfCnV_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataLast_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfLtZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLu3; else goto cfLu2;
       cfLu3: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLu2: // global
           I64[Hp - 16] = sat_sfCnV_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfCnS::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfCnS::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgfoldl_info" {
     Data.Semigroup.$fDataLast_$cgfoldl_info:
         const Data.Semigroup.$fDataLast_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.609760979 UTC

[section ""cstring" . Data.Semigroup.$fDataLast4_bytes" {
     Data.Semigroup.$fDataLast4_bytes:
         I8[] [76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.612040794 UTC

[section ""data" . Data.Semigroup.$fDataLast7_closure" {
     Data.Semigroup.$fDataLast7_closure:
         const Data.Semigroup.$fDataLast7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataLast7_entry() //  [R1]
         { []
         }
     {offset
       cfLuj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLuk; else goto cfLul;
       cfLuk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLul: // global
           (_cfLug::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLug::I64 == 0) goto cfLui; else goto cfLuh;
       cfLui: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLuh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLug::I64;
           R2 = Data.Semigroup.$fDataLast4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast7_info" {
     Data.Semigroup.$fDataLast7_info:
         const Data.Semigroup.$fDataLast7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.616234828 UTC

[section ""data" . Data.Semigroup.$fReadLast_lexeme_closure" {
     Data.Semigroup.$fReadLast_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataLast7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.618011145 UTC

[section ""cstring" . Data.Semigroup.$fReadLast3_bytes" {
     Data.Semigroup.$fReadLast3_bytes:
         I8[] [103,101,116,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.620265561 UTC

[section ""data" . Data.Semigroup.$fReadLast2_closure" {
     Data.Semigroup.$fReadLast2_closure:
         const Data.Semigroup.$fReadLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadLast2_entry() //  [R1]
         { []
         }
     {offset
       cfLuB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLuC; else goto cfLuD;
       cfLuC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLuD: // global
           (_cfLuy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLuy::I64 == 0) goto cfLuA; else goto cfLuz;
       cfLuA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLuz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLuy::I64;
           R2 = Data.Semigroup.$fReadLast3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast2_info" {
     Data.Semigroup.$fReadLast2_info:
         const Data.Semigroup.$fReadLast2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.629454515 UTC

[section ""data" . Data.Semigroup.$fReadLast1_closure" {
     Data.Semigroup.$fReadLast1_closure:
         const Data.Semigroup.$fReadLast1_info;
         const 0;
 },
 lvl33_sfCnX_entry() //  [R1]
         { []
         }
     {offset
       cfLuT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfLuU; else goto cfLuV;
       cfLuU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLuV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCnX_info" {
     lvl33_sfCnX_info:
         const lvl33_sfCnX_entry;
         const 1;
         const 16;
 },
 ds_sfCnY_entry() //  [R1]
         { []
         }
     {offset
       cfLv1: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCnY_info" {
     ds_sfCnY_info:
         const ds_sfCnY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCo9_entry() //  [R1]
         { []
         }
     {offset
       cfLvC: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCo9_info" {
     sat_sfCo9_info:
         const sat_sfCo9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCoc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLvI: // global
           _sfCo7::P64 = R2;
           _sfCoc::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLvJ; else goto cfLvK;
       cfLvK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLvM; else goto cfLvL;
       cfLvM: // global
           HpAlloc = 24;
           goto cfLvJ;
       cfLvJ: // global
           R2 = _sfCo7::P64;
           R1 = _sfCoc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLvL: // global
           _sfCo1::P64 = P64[_sfCoc::P64 + 7];
           I64[Hp - 16] = sat_sfCo9_info;
           P64[Hp - 8] = _sfCo1::P64;
           P64[Hp] = _sfCo7::P64;
           I64[Sp - 8] = block_cfLvF_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoc_info" {
     sat_sfCoc_info:
         const sat_sfCoc_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+248;
 },
 _cfLvF() //  [R1]
         { []
         }
     {offset
       cfLvF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLvP; else goto cfLvO;
       cfLvP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLvO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLvF_info" {
     block_cfLvF_info:
         const _cfLvF;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLwr_srtd" {
     ufLwr_srtd:
         const SfCR7_srt+248;
         const 33;
         const 4294967303;
 },
 sat_sfCod_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLvQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLvU; else goto cfLvT;
       cfLvU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLvT: // global
           _sfCnY::P64 = P64[R1 + 7];
           _sfCo1::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCoc_info;
           P64[Hp] = _sfCo1::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCnY::P64;
           R2 = Data.Semigroup.$fReadLast2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCod_info" {
     sat_sfCod_info:
         const sat_sfCod_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufLwr_srtd;
 },
 section ""relreadonly" . ufLws_srtd" {
     ufLws_srtd:
         const SfCR7_srt+248;
         const 33;
         const 4294967319;
 },
 sat_sfCog_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLvY: // global
           _sfCo5::P64 = R2;
           _sfCog::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLvZ; else goto cfLw0;
       cfLw0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLw2; else goto cfLw1;
       cfLw2: // global
           HpAlloc = 24;
           goto cfLvZ;
       cfLvZ: // global
           R2 = _sfCo5::P64;
           R1 = _sfCog::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLw1: // global
           _sfCnY::P64 = P64[_sfCog::P64 + 7];
           _sfCo1::P64 = P64[_sfCog::P64 + 15];
           I64[Hp - 16] = sat_sfCod_info;
           P64[Hp - 8] = _sfCnY::P64;
           P64[Hp] = _sfCo1::P64;
           I64[Sp - 8] = block_cfLvV_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCog_info" {
     sat_sfCog_info:
         const sat_sfCog_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufLws_srtd;
 },
 _cfLvV() //  [R1]
         { []
         }
     {offset
       cfLvV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLw5; else goto cfLw4;
       cfLw5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLw4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLvV_info" {
     block_cfLvV_info:
         const _cfLvV;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLwt_srtd" {
     ufLwt_srtd:
         const SfCR7_srt+248;
         const 34;
         const 12884901911;
 },
 sat_sfCoj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLw6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLw7; else goto cfLw8;
       cfLw7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLw8: // global
           I64[Sp - 24] = block_cfLv9_info;
           _sfCnY::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCnY::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLwl; else goto cfLva;
       ufLwl: // global
           call _cfLv9(R1) args: 0, res: 0, upd: 0;
       cfLva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoj_info" {
     sat_sfCoj_info:
         const sat_sfCoj_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufLwt_srtd;
 },
 section ""relreadonly" . ufLwu_srtd" {
     ufLwu_srtd:
         const SfCR7_srt+248;
         const 34;
         const 12884901911;
 },
 _cfLv9() //  [R1]
         { []
         }
     {offset
       cfLv9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLwb; else goto cfLwa;
       cfLwb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLwa: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfLwd; else goto cfLwh;
       cfLwd: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLwh: // global
           I64[Hp - 16] = sat_sfCog_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfLwe_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadLast_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLv9_info" {
     block_cfLv9_info:
         const _cfLv9;
         const 2;
         const 18446744069414584350;
         const ufLwu_srtd;
 },
 _cfLwe() //  [R1]
         { []
         }
     {offset
       cfLwe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLwk; else goto cfLwj;
       cfLwk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLwj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLwe_info" {
     block_cfLwe_info:
         const _cfLwe;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLwv_srtd" {
     ufLwv_srtd:
         const SfCR7_srt+248;
         const 35;
         const 30064771159;
 },
 Data.Semigroup.$fReadLast1_entry() //  [R2]
         { []
         }
     {offset
       cfLwm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLwq; else goto cfLwp;
       cfLwq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLwp: // global
           I64[Hp - 48] = lvl33_sfCnX_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfCnY_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfCoj_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast1_info" {
     Data.Semigroup.$fReadLast1_info:
         const Data.Semigroup.$fReadLast1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufLwv_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.657139511 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadsPrec_closure" {
     Data.Semigroup.$fReadLast_$creadsPrec_closure:
         const Data.Semigroup.$fReadLast_$creadsPrec_info;
         const 0;
 },
 ds_sfCol_entry() //  [R1]
         { []
         }
     {offset
       cfLxx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLxy; else goto cfLxz;
       cfLxy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLxz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfCol_info" {
     ds_sfCol_info:
         const ds_sfCol_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+520;
 },
 sat_sfCon_entry() //  [R1]
         { []
         }
     {offset
       cfLxJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLxK; else goto cfLxL;
       cfLxK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLxL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCon_info" {
     sat_sfCon_info:
         const sat_sfCon_entry;
         const 2;
         const 18;
 },
 sat_sfCoo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLxM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLxQ; else goto cfLxP;
       cfLxQ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLxP: // global
           _sfCol::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCon_info;
           P64[Hp - 8] = _sfCol::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoo_info" {
     sat_sfCoo_info:
         const sat_sfCoo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadLast_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLxR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfLxV; else goto cfLxU;
       cfLxV: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLxU: // global
           I64[Hp - 32] = ds_sfCol_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCoo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadsPrec_info" {
     Data.Semigroup.$fReadLast_$creadsPrec_info:
         const Data.Semigroup.$fReadLast_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.667869068 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadListPrec_closure" {
     Data.Semigroup.$fReadLast_$creadListPrec_closure:
         const Data.Semigroup.$fReadLast_$creadListPrec_info;
         const 0;
 },
 sat_sfCoq_entry() //  [R1]
         { []
         }
     {offset
       cfLyl: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadLast1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoq_info" {
     sat_sfCoq_info:
         const sat_sfCoq_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+520;
 },
 Data.Semigroup.$fReadLast_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLyo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLys; else goto cfLyr;
       cfLys: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLyr: // global
           I64[Hp - 16] = sat_sfCoq_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadListPrec_info" {
     Data.Semigroup.$fReadLast_$creadListPrec_info:
         const Data.Semigroup.$fReadLast_$creadListPrec_entry;
         const 0;
         const 720575944674246670;
         const 4294967301;
         const SfCR7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.674999535 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadList_closure" {
     Data.Semigroup.$fReadLast_$creadList_closure:
         const Data.Semigroup.$fReadLast_$creadList_info;
         const 0;
 },
 sat_sfCos_entry() //  [R1]
         { []
         }
     {offset
       cfLyM: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadLast1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCos_info" {
     sat_sfCos_info:
         const sat_sfCos_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+520;
 },
 sat_sfCot_entry() //  [R1]
         { []
         }
     {offset
       cfLyP: // global
           _sfCot::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfLyQ; else goto cfLyR;
       cfLyR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLyT; else goto cfLyS;
       cfLyT: // global
           HpAlloc = 24;
           goto cfLyQ;
       cfLyQ: // global
           R1 = _sfCot::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLyS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCot::P64;
           _sfCor::P64 = P64[_sfCot::P64 + 16];
           I64[Hp - 16] = sat_sfCos_info;
           P64[Hp] = _sfCor::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCot_info" {
     sat_sfCot_info:
         const sat_sfCot_entry;
         const 1;
         const 144115192370823184;
         const SfCR7_srt+320;
 },
 Data.Semigroup.$fReadLast_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfLyU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLyY; else goto cfLyX;
       cfLyY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLyX: // global
           I64[Hp - 16] = sat_sfCot_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadList_info" {
     Data.Semigroup.$fReadLast_$creadList_info:
         const Data.Semigroup.$fReadLast_$creadList_entry;
         const 0;
         const 1297036696977670158;
         const 4294967301;
         const SfCR7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.684791442 UTC

[section ""data" . Data.Semigroup.$fReadLast_closure" {
     Data.Semigroup.$fReadLast_closure:
         const Data.Semigroup.$fReadLast_info;
         const 0;
 },
 sat_sfCoy_entry() //  [R1]
         { []
         }
     {offset
       cfLzi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLzj; else goto cfLzk;
       cfLzj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLzk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoy_info" {
     sat_sfCoy_info:
         const sat_sfCoy_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+536;
 },
 sat_sfCox_entry() //  [R1]
         { []
         }
     {offset
       cfLzp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLzq; else goto cfLzr;
       cfLzq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLzr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCox_info" {
     sat_sfCox_info:
         const sat_sfCox_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+520;
 },
 sat_sfCow_entry() //  [R1]
         { []
         }
     {offset
       cfLzw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLzx; else goto cfLzy;
       cfLzx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCow_info" {
     sat_sfCow_info:
         const sat_sfCow_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+544;
 },
 sat_sfCov_entry() //  [R1]
         { []
         }
     {offset
       cfLzD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLzE; else goto cfLzF;
       cfLzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCov_info" {
     sat_sfCov_info:
         const sat_sfCov_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+528;
 },
 Data.Semigroup.$fReadLast_entry() //  [R2]
         { []
         }
     {offset
       cfLzH: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfLzL; else goto cfLzK;
       cfLzL: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLzK: // global
           I64[Hp - 128] = sat_sfCoy_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCox_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCow_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCov_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_info" {
     Data.Semigroup.$fReadLast_info:
         const Data.Semigroup.$fReadLast_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfCR7_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.697281147 UTC

[section ""cstring" . Data.Semigroup.$fShowLast2_bytes" {
     Data.Semigroup.$fShowLast2_bytes:
         I8[] [76,97,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.699228855 UTC

[section ""cstring" . Data.Semigroup.$fShowLast1_bytes" {
     Data.Semigroup.$fShowLast1_bytes:
         I8[] [103,101,116,76,97,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.707078338 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec2_closure" {
     Data.Semigroup.$w$cshowsPrec2_closure:
         const Data.Semigroup.$w$cshowsPrec2_info;
 },
 f_sfCoC_entry() //  [R1]
         { []
         }
     {offset
       cfLAl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfLAm; else goto cfLAn;
       cfLAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLAn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCoC_info" {
     f_sfCoC_info:
         const f_sfCoC_entry;
         const 2;
         const 18;
 },
 sat_sfCoF_entry() //  [R1]
         { []
         }
     {offset
       cfLAI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLAJ; else goto cfLAK;
       cfLAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLAK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoF_info" {
     sat_sfCoF_info:
         const sat_sfCoF_entry;
         const 1;
         const 16;
 },
 sat_sfCoG_entry() //  [R1]
         { []
         }
     {offset
       cfLAL: // global
           _sfCoG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLAM; else goto cfLAN;
       cfLAN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLAP; else goto cfLAO;
       cfLAP: // global
           HpAlloc = 24;
           goto cfLAM;
       cfLAM: // global
           R1 = _sfCoG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLAO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoG::P64;
           _sfCoC::P64 = P64[_sfCoG::P64 + 16];
           _sfCoE::P64 = P64[_sfCoG::P64 + 24];
           I64[Hp - 16] = sat_sfCoF_info;
           P64[Hp] = _sfCoE::P64;
           R2 = Hp - 16;
           R1 = _sfCoC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoG_info" {
     sat_sfCoG_info:
         const sat_sfCoG_entry;
         const 2;
         const 18;
 },
 sat_sfCoH_entry() //  [R1]
         { []
         }
     {offset
       cfLAQ: // global
           _sfCoH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLAR; else goto cfLAS;
       cfLAS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLAU; else goto cfLAT;
       cfLAU: // global
           HpAlloc = 32;
           goto cfLAR;
       cfLAR: // global
           R1 = _sfCoH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLAT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoH::P64;
           _sfCoC::P64 = P64[_sfCoH::P64 + 16];
           _sfCoE::P64 = P64[_sfCoH::P64 + 24];
           I64[Hp - 24] = sat_sfCoG_info;
           P64[Hp - 8] = _sfCoC::P64;
           P64[Hp] = _sfCoE::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoH_info" {
     sat_sfCoH_info:
         const sat_sfCoH_entry;
         const 2;
         const 18;
 },
 sat_sfCoI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLAV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLAZ; else goto cfLAY;
       cfLAZ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLAY: // global
           _sfCoC::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCoH_info;
           P64[Hp - 8] = _sfCoC::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoI_info" {
     sat_sfCoI_info:
         const sat_sfCoI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCoL_entry() //  [R1]
         { []
         }
     {offset
       cfLBn: // global
           _sfCoL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLBo; else goto cfLBp;
       cfLBp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLBr; else goto cfLBq;
       cfLBr: // global
           HpAlloc = 24;
           goto cfLBo;
       cfLBo: // global
           R1 = _sfCoL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLBq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoL::P64;
           _sfCoJ::P64 = P64[_sfCoL::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCoJ::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoL_info" {
     sat_sfCoL_info:
         const sat_sfCoL_entry;
         const 1;
         const 16;
 },
 sat_sfCoM_entry() //  [R1]
         { []
         }
     {offset
       cfLBs: // global
           _sfCoM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLBt; else goto cfLBu;
       cfLBu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLBw; else goto cfLBv;
       cfLBw: // global
           HpAlloc = 24;
           goto cfLBt;
       cfLBt: // global
           R1 = _sfCoM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLBv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoM::P64;
           _sfCoC::P64 = P64[_sfCoM::P64 + 16];
           _sfCoJ::P64 = P64[_sfCoM::P64 + 24];
           I64[Hp - 16] = sat_sfCoL_info;
           P64[Hp] = _sfCoJ::P64;
           R2 = Hp - 16;
           R1 = _sfCoC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoM_info" {
     sat_sfCoM_info:
         const sat_sfCoM_entry;
         const 2;
         const 18;
 },
 sat_sfCoN_entry() //  [R1]
         { []
         }
     {offset
       cfLBx: // global
           _sfCoN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLBy; else goto cfLBz;
       cfLBz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLBB; else goto cfLBA;
       cfLBB: // global
           HpAlloc = 32;
           goto cfLBy;
       cfLBy: // global
           R1 = _sfCoN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLBA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoN::P64;
           _sfCoC::P64 = P64[_sfCoN::P64 + 16];
           _sfCoJ::P64 = P64[_sfCoN::P64 + 24];
           I64[Hp - 24] = sat_sfCoM_info;
           P64[Hp - 8] = _sfCoC::P64;
           P64[Hp] = _sfCoJ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoN_info" {
     sat_sfCoN_info:
         const sat_sfCoN_entry;
         const 2;
         const 18;
 },
 sat_sfCoO_entry() //  [R1]
         { []
         }
     {offset
       cfLBC: // global
           _sfCoO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLBD; else goto cfLBE;
       cfLBE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLBG; else goto cfLBF;
       cfLBG: // global
           HpAlloc = 32;
           goto cfLBD;
       cfLBD: // global
           R1 = _sfCoO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoO::P64;
           _sfCoC::P64 = P64[_sfCoO::P64 + 16];
           _sfCoJ::P64 = P64[_sfCoO::P64 + 24];
           I64[Hp - 24] = sat_sfCoN_info;
           P64[Hp - 8] = _sfCoC::P64;
           P64[Hp] = _sfCoJ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoO_info" {
     sat_sfCoO_info:
         const sat_sfCoO_entry;
         const 2;
         const 18;
 },
 sat_sfCoP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLBI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLBM; else goto cfLBL;
       cfLBM: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLBL: // global
           _sfCoC::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCoO_info;
           P64[Hp - 32] = _sfCoC::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCoP_info" {
     sat_sfCoP_info:
         const sat_sfCoP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLBQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfLBU; else goto cfLBT;
       cfLBU: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLBT: // global
           I64[Hp - 40] = f_sfCoC_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfLAh::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfLBO; else goto cfLBP;
       cfLBO: // global
           I64[Hp - 8] = sat_sfCoI_info;
           P64[Hp] = _cfLAh::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLBP: // global
           I64[Hp - 8] = sat_sfCoP_info;
           P64[Hp] = _cfLAh::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec2_info" {
     Data.Semigroup.$w$cshowsPrec2_info:
         const Data.Semigroup.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.729786044 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshowsPrec_closure" {
     Data.Semigroup.$fShowLast_$cshowsPrec_closure:
         const Data.Semigroup.$fShowLast_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowLast_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLCN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLCO; else goto cfLCP;
       cfLCO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLCP: // global
           I64[Sp - 24] = block_cfLCK_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLCT; else goto cfLCL;
       ufLCT: // global
           call _cfLCK(R1) args: 0, res: 0, upd: 0;
       cfLCL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshowsPrec_info" {
     Data.Semigroup.$fShowLast_$cshowsPrec_info:
         const Data.Semigroup.$fShowLast_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfLCK() //  [R1]
         { []
         }
     {offset
       cfLCK: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec2_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLCK_info" {
     block_cfLCK_info:
         const _cfLCK;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.736867974 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshow_closure" {
     Data.Semigroup.$fShowLast_$cshow_closure:
         const Data.Semigroup.$fShowLast_$cshow_info;
         const 0;
 },
 sat_sfCoX_entry() //  [R1]
         { []
         }
     {offset
       cfLDf: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfLDg; else goto cfLDh;
       cfLDg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoX_info" {
     sat_sfCoX_info:
         const sat_sfCoX_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+384;
 },
 sat_sfCoY_entry() //  [R1]
         { []
         }
     {offset
       cfLDi: // global
           _sfCoY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLDj; else goto cfLDk;
       cfLDk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLDm; else goto cfLDl;
       cfLDm: // global
           HpAlloc = 32;
           goto cfLDj;
       cfLDj: // global
           R1 = _sfCoY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLDl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCoY::P64;
           _sfCoV::P64 = P64[_sfCoY::P64 + 16];
           _sfCoW::P64 = P64[_sfCoY::P64 + 24];
           I64[Hp - 24] = sat_sfCoX_info;
           P64[Hp - 8] = _sfCoV::P64;
           P64[Hp] = _sfCoW::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCoY_info" {
     sat_sfCoY_info:
         const sat_sfCoY_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+384;
 },
 Data.Semigroup.$fShowLast_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfLDn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLDr; else goto cfLDq;
       cfLDr: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLDq: // global
           I64[Hp - 24] = sat_sfCoY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshow_info" {
     Data.Semigroup.$fShowLast_$cshow_info:
         const Data.Semigroup.$fShowLast_$cshow_entry;
         const 0;
         const 18014402804449294;
         const 8589934607;
         const SfCR7_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.747158764 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshowList_closure" {
     Data.Semigroup.$fShowLast_$cshowList_closure:
         const Data.Semigroup.$fShowLast_$cshowList_info;
 },
 sat_sfCp3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLDO: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec2_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCp3_info" {
     sat_sfCp3_info:
         const sat_sfCp3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowLast_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLDR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLDV; else goto cfLDU;
       cfLDV: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLDU: // global
           I64[Hp - 8] = sat_sfCp3_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshowList_info" {
     Data.Semigroup.$fShowLast_$cshowList_info:
         const Data.Semigroup.$fShowLast_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.753468325 UTC

[section ""data" . Data.Semigroup.$fShowLast_closure" {
     Data.Semigroup.$fShowLast_closure:
         const Data.Semigroup.$fShowLast_info;
         const 0;
 },
 sat_sfCp7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLEc: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowLast_$cshowList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCp7_info" {
     sat_sfCp7_info:
         const sat_sfCp7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCp6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLEk: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowLast_$cshow_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCp6_info" {
     sat_sfCp6_info:
         const sat_sfCp6_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+560;
 },
 sat_sfCp5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLEs: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowLast_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCp5_info" {
     sat_sfCp5_info:
         const sat_sfCp5_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowLast_entry() //  [R2]
         { []
         }
     {offset
       cfLEw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfLEA; else goto cfLEz;
       cfLEA: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLEz: // global
           I64[Hp - 72] = sat_sfCp7_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCp6_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCp5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_info" {
     Data.Semigroup.$fShowLast_info:
         const Data.Semigroup.$fShowLast_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.76239612 UTC

[section ""data" . Data.Semigroup.$fEqLast_closure" {
     Data.Semigroup.$fEqLast_closure:
         const Data.Semigroup.$fEqLast_info;
 },
 sat_sfCpa_entry() //  [R1]
         { []
         }
     {offset
       cfLF0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLF1; else goto cfLF2;
       cfLF1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLF2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpa_info" {
     sat_sfCpa_info:
         const sat_sfCpa_entry;
         const 1;
         const 16;
 },
 sat_sfCp9_entry() //  [R1]
         { []
         }
     {offset
       cfLF7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLF8; else goto cfLF9;
       cfLF8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLF9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCp9_info" {
     sat_sfCp9_info:
         const sat_sfCp9_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqLast_entry() //  [R2]
         { []
         }
     {offset
       cfLFb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLFf; else goto cfLFe;
       cfLFf: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLFe: // global
           I64[Hp - 64] = sat_sfCpa_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCp9_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqLast_info" {
     Data.Semigroup.$fEqLast_info:
         const Data.Semigroup.$fEqLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.769885489 UTC

[section ""data" . Data.Semigroup.$fOrdLast_$cp1Ord_closure" {
     Data.Semigroup.$fOrdLast_$cp1Ord_closure:
         const Data.Semigroup.$fOrdLast_$cp1Ord_info;
 },
 sat_sfCpc_entry() //  [R1]
         { []
         }
     {offset
       cfLFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLFE; else goto cfLFF;
       cfLFE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpc_info" {
     sat_sfCpc_info:
         const sat_sfCpc_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdLast_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfLFG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLFK; else goto cfLFJ;
       cfLFK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdLast_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLFJ: // global
           I64[Hp - 16] = sat_sfCpc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqLast_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdLast_$cp1Ord_info" {
     Data.Semigroup.$fOrdLast_$cp1Ord_info:
         const Data.Semigroup.$fOrdLast_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.778389241 UTC

[section ""data" . Data.Semigroup.$fOrdLast_closure" {
     Data.Semigroup.$fOrdLast_closure:
         const Data.Semigroup.$fOrdLast_info;
 },
 sat_sfCpl_entry() //  [R1]
         { []
         }
     {offset
       cfLG1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLG2; else goto cfLG3;
       cfLG2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLG3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpl_info" {
     sat_sfCpl_info:
         const sat_sfCpl_entry;
         const 1;
         const 16;
 },
 sat_sfCpk_entry() //  [R1]
         { []
         }
     {offset
       cfLG8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLG9; else goto cfLGa;
       cfLG9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpk_info" {
     sat_sfCpk_info:
         const sat_sfCpk_entry;
         const 1;
         const 16;
 },
 sat_sfCpj_entry() //  [R1]
         { []
         }
     {offset
       cfLGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGg; else goto cfLGh;
       cfLGg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpj_info" {
     sat_sfCpj_info:
         const sat_sfCpj_entry;
         const 1;
         const 16;
 },
 sat_sfCpi_entry() //  [R1]
         { []
         }
     {offset
       cfLGm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGn; else goto cfLGo;
       cfLGn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpi_info" {
     sat_sfCpi_info:
         const sat_sfCpi_entry;
         const 1;
         const 16;
 },
 sat_sfCph_entry() //  [R1]
         { []
         }
     {offset
       cfLGt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGu; else goto cfLGv;
       cfLGu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCph_info" {
     sat_sfCph_info:
         const sat_sfCph_entry;
         const 1;
         const 16;
 },
 sat_sfCpg_entry() //  [R1]
         { []
         }
     {offset
       cfLGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGB; else goto cfLGC;
       cfLGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpg_info" {
     sat_sfCpg_info:
         const sat_sfCpg_entry;
         const 1;
         const 16;
 },
 sat_sfCpf_entry() //  [R1]
         { []
         }
     {offset
       cfLGH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGI; else goto cfLGJ;
       cfLGI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpf_info" {
     sat_sfCpf_info:
         const sat_sfCpf_entry;
         const 1;
         const 16;
 },
 sat_sfCpe_entry() //  [R1]
         { []
         }
     {offset
       cfLGO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLGP; else goto cfLGQ;
       cfLGP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLGQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdLast_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpe_info" {
     sat_sfCpe_info:
         const sat_sfCpe_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdLast_entry() //  [R2]
         { []
         }
     {offset
       cfLGS: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfLGW; else goto cfLGV;
       cfLGW: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLGV: // global
           I64[Hp - 256] = sat_sfCpl_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfCpk_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCpj_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCpi_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCph_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCpg_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCpf_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCpe_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdLast_info" {
     Data.Semigroup.$fOrdLast_info:
         const Data.Semigroup.$fOrdLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.797454874 UTC

[section ""data" . Data.Semigroup.$fBoundedLast_closure" {
     Data.Semigroup.$fBoundedLast_closure:
         const Data.Semigroup.$fBoundedLast_info;
 },
 sat_sfCpo_entry() //  [R1]
         { []
         }
     {offset
       cfLHO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLHP; else goto cfLHQ;
       cfLHP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLHQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpo_info" {
     sat_sfCpo_info:
         const sat_sfCpo_entry;
         const 1;
         const 16;
 },
 sat_sfCpn_entry() //  [R1]
         { []
         }
     {offset
       cfLHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLHW; else goto cfLHX;
       cfLHW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLHX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpn_info" {
     sat_sfCpn_info:
         const sat_sfCpn_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedLast_entry() //  [R2]
         { []
         }
     {offset
       cfLHZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLI3; else goto cfLI2;
       cfLI3: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLI2: // global
           I64[Hp - 64] = sat_sfCpo_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCpn_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedLast_info" {
     Data.Semigroup.$fBoundedLast_info:
         const Data.Semigroup.$fBoundedLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.804162894 UTC

[section ""data" . Data.Semigroup.$fGeneric1First1_closure" {
     Data.Semigroup.$fGeneric1First1_closure:
         const Data.Semigroup.$fGeneric1First1_info;
 },
 Data.Semigroup.$fGeneric1First1_entry() //  [R2]
         { []
         }
     {offset
       cfLIn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1First1_info" {
     Data.Semigroup.$fGeneric1First1_info:
         const Data.Semigroup.$fGeneric1First1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.8073253 UTC

[section ""data" . Data.Semigroup.$fGeneric1First2_closure" {
     Data.Semigroup.$fGeneric1First2_closure:
         const Data.Semigroup.$fGeneric1First2_info;
 },
 Data.Semigroup.$fGeneric1First2_entry() //  [R2]
         { []
         }
     {offset
       cfLIy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1First2_info" {
     Data.Semigroup.$fGeneric1First2_info:
         const Data.Semigroup.$fGeneric1First2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.810432833 UTC

[section ""data" . Data.Semigroup.$fGeneric1First_closure" {
     Data.Semigroup.$fGeneric1First_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1First2_closure+1;
         const Data.Semigroup.$fGeneric1First1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.812513877 UTC

[section ""data" . Data.Semigroup.$fGenericFirst1_closure" {
     Data.Semigroup.$fGenericFirst1_closure:
         const Data.Semigroup.$fGenericFirst1_info;
 },
 Data.Semigroup.$fGenericFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfLIK: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericFirst1_info" {
     Data.Semigroup.$fGenericFirst1_info:
         const Data.Semigroup.$fGenericFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.816792581 UTC

[section ""data" . Data.Semigroup.$fGenericFirst2_closure" {
     Data.Semigroup.$fGenericFirst2_closure:
         const Data.Semigroup.$fGenericFirst2_info;
 },
 Data.Semigroup.$fGenericFirst2_entry() //  [R2]
         { []
         }
     {offset
       cfLIV: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericFirst2_info" {
     Data.Semigroup.$fGenericFirst2_info:
         const Data.Semigroup.$fGenericFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.819837775 UTC

[section ""data" . Data.Semigroup.$fGenericFirst_closure" {
     Data.Semigroup.$fGenericFirst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericFirst2_closure+1;
         const Data.Semigroup.$fGenericFirst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.82251864 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgfoldl_closure" {
     Data.Semigroup.$fDataFirst_$cgfoldl_closure:
         const Data.Semigroup.$fDataFirst_$cgfoldl_info;
 },
 sat_sfCpx_entry() //  [R1]
         { []
         }
     {offset
       cfLJb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLJc; else goto cfLJd;
       cfLJc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLJd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpx_info" {
     sat_sfCpx_info:
         const sat_sfCpx_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataFirst_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfLJe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLJi; else goto cfLJh;
       cfLJi: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLJh: // global
           I64[Hp - 16] = sat_sfCpx_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfCpu::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfCpu::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgfoldl_info" {
     Data.Semigroup.$fDataFirst_$cgfoldl_info:
         const Data.Semigroup.$fDataFirst_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.827954653 UTC

[section ""cstring" . Data.Semigroup.$fDataFirst4_bytes" {
     Data.Semigroup.$fDataFirst4_bytes:
         I8[] [70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.830307022 UTC

[section ""data" . Data.Semigroup.$fDataFirst7_closure" {
     Data.Semigroup.$fDataFirst7_closure:
         const Data.Semigroup.$fDataFirst7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataFirst7_entry() //  [R1]
         { []
         }
     {offset
       cfLJy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLJz; else goto cfLJA;
       cfLJz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLJA: // global
           (_cfLJv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLJv::I64 == 0) goto cfLJx; else goto cfLJw;
       cfLJx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLJw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLJv::I64;
           R2 = Data.Semigroup.$fDataFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst7_info" {
     Data.Semigroup.$fDataFirst7_info:
         const Data.Semigroup.$fDataFirst7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.833955198 UTC

[section ""data" . Data.Semigroup.$fReadFirst_lexeme1_closure" {
     Data.Semigroup.$fReadFirst_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataFirst7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.835592317 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst6_bytes" {
     Data.Semigroup.$fReadFirst6_bytes:
         I8[] [103,101,116,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.838138938 UTC

[section ""data" . Data.Semigroup.$fReadFirst5_closure" {
     Data.Semigroup.$fReadFirst5_closure:
         const Data.Semigroup.$fReadFirst5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst5_entry() //  [R1]
         { []
         }
     {offset
       cfLJQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLJR; else goto cfLJS;
       cfLJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLJS: // global
           (_cfLJN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfLJN::I64 == 0) goto cfLJP; else goto cfLJO;
       cfLJP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfLJO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfLJN::I64;
           R2 = Data.Semigroup.$fReadFirst6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst5_info" {
     Data.Semigroup.$fReadFirst5_info:
         const Data.Semigroup.$fReadFirst5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.846795516 UTC

[section ""data" . Data.Semigroup.$fReadFirst1_closure" {
     Data.Semigroup.$fReadFirst1_closure:
         const Data.Semigroup.$fReadFirst1_info;
         const 0;
 },
 lvl33_sfCpz_entry() //  [R1]
         { []
         }
     {offset
       cfLK8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfLK9; else goto cfLKa;
       cfLK9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLKa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCpz_info" {
     lvl33_sfCpz_info:
         const lvl33_sfCpz_entry;
         const 1;
         const 16;
 },
 ds_sfCpA_entry() //  [R1]
         { []
         }
     {offset
       cfLKg: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCpA_info" {
     ds_sfCpA_info:
         const ds_sfCpA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCpL_entry() //  [R1]
         { []
         }
     {offset
       cfLKR: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCpL_info" {
     sat_sfCpL_info:
         const sat_sfCpL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCpO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLKX: // global
           _sfCpJ::P64 = R2;
           _sfCpO::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLKY; else goto cfLKZ;
       cfLKZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLL1; else goto cfLL0;
       cfLL1: // global
           HpAlloc = 24;
           goto cfLKY;
       cfLKY: // global
           R2 = _sfCpJ::P64;
           R1 = _sfCpO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLL0: // global
           _sfCpD::P64 = P64[_sfCpO::P64 + 7];
           I64[Hp - 16] = sat_sfCpL_info;
           P64[Hp - 8] = _sfCpD::P64;
           P64[Hp] = _sfCpJ::P64;
           I64[Sp - 8] = block_cfLKU_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCpO_info" {
     sat_sfCpO_info:
         const sat_sfCpO_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+576;
 },
 _cfLKU() //  [R1]
         { []
         }
     {offset
       cfLKU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLL4; else goto cfLL3;
       cfLL4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLL3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLKU_info" {
     block_cfLKU_info:
         const _cfLKU;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLLG_srtd" {
     ufLLG_srtd:
         const SfCR7_srt+264;
         const 42;
         const 3848290697217;
 },
 sat_sfCpP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLL5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLL9; else goto cfLL8;
       cfLL9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLL8: // global
           _sfCpA::P64 = P64[R1 + 7];
           _sfCpD::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCpO_info;
           P64[Hp] = _sfCpD::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCpA::P64;
           R2 = Data.Semigroup.$fReadFirst5_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCpP_info" {
     sat_sfCpP_info:
         const sat_sfCpP_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufLLG_srtd;
 },
 section ""relreadonly" . ufLLH_srtd" {
     ufLLH_srtd:
         const SfCR7_srt+264;
         const 42;
         const 3848290697221;
 },
 sat_sfCpS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLLd: // global
           _sfCpH::P64 = R2;
           _sfCpS::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfLLe; else goto cfLLf;
       cfLLf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLLh; else goto cfLLg;
       cfLLh: // global
           HpAlloc = 24;
           goto cfLLe;
       cfLLe: // global
           R2 = _sfCpH::P64;
           R1 = _sfCpS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLLg: // global
           _sfCpA::P64 = P64[_sfCpS::P64 + 7];
           _sfCpD::P64 = P64[_sfCpS::P64 + 15];
           I64[Hp - 16] = sat_sfCpP_info;
           P64[Hp - 8] = _sfCpA::P64;
           P64[Hp] = _sfCpD::P64;
           I64[Sp - 8] = block_cfLLa_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCpS_info" {
     sat_sfCpS_info:
         const sat_sfCpS_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufLLH_srtd;
 },
 _cfLLa() //  [R1]
         { []
         }
     {offset
       cfLLa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLLk; else goto cfLLj;
       cfLLk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLLj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLLa_info" {
     block_cfLLa_info:
         const _cfLLa;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLLI_srtd" {
     ufLLI_srtd:
         const SfCR7_srt+264;
         const 43;
         const 8246337208325;
 },
 sat_sfCpV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLLl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLLm; else goto cfLLn;
       cfLLm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLLn: // global
           I64[Sp - 24] = block_cfLKo_info;
           _sfCpA::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCpA::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLLA; else goto cfLKp;
       ufLLA: // global
           call _cfLKo(R1) args: 0, res: 0, upd: 0;
       cfLKp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCpV_info" {
     sat_sfCpV_info:
         const sat_sfCpV_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufLLI_srtd;
 },
 section ""relreadonly" . ufLLJ_srtd" {
     ufLLJ_srtd:
         const SfCR7_srt+264;
         const 43;
         const 8246337208325;
 },
 _cfLKo() //  [R1]
         { []
         }
     {offset
       cfLKo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLLq; else goto cfLLp;
       cfLLq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLLp: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfLLs; else goto cfLLw;
       cfLLs: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLLw: // global
           I64[Hp - 16] = sat_sfCpS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfLLt_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLKo_info" {
     block_cfLKo_info:
         const _cfLKo;
         const 2;
         const 18446744069414584350;
         const ufLLJ_srtd;
 },
 _cfLLt() //  [R1]
         { []
         }
     {offset
       cfLLt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLLz; else goto cfLLy;
       cfLLz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLLy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLLt_info" {
     block_cfLLt_info:
         const _cfLLt;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufLLK_srtd" {
     ufLLK_srtd:
         const SfCR7_srt+264;
         const 44;
         const 17042430230549;
 },
 Data.Semigroup.$fReadFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfLLB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLLF; else goto cfLLE;
       cfLLF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLLE: // global
           I64[Hp - 48] = lvl33_sfCpz_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfCpA_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfCpV_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst1_info" {
     Data.Semigroup.$fReadFirst1_info:
         const Data.Semigroup.$fReadFirst1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufLLK_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.874520891 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadsPrec_closure" {
     Data.Semigroup.$fReadFirst_$creadsPrec_closure:
         const Data.Semigroup.$fReadFirst_$creadsPrec_info;
         const 0;
 },
 ds_sfCpX_entry() //  [R1]
         { []
         }
     {offset
       cfLMM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLMN; else goto cfLMO;
       cfLMN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLMO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfCpX_info" {
     ds_sfCpX_info:
         const ds_sfCpX_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+608;
 },
 sat_sfCpZ_entry() //  [R1]
         { []
         }
     {offset
       cfLMY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLMZ; else goto cfLN0;
       cfLMZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLN0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCpZ_info" {
     sat_sfCpZ_info:
         const sat_sfCpZ_entry;
         const 2;
         const 18;
 },
 sat_sfCq0_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLN1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLN5; else goto cfLN4;
       cfLN5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLN4: // global
           _sfCpX::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCpZ_info;
           P64[Hp - 8] = _sfCpX::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCq0_info" {
     sat_sfCq0_info:
         const sat_sfCq0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadFirst_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLN6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfLNa; else goto cfLN9;
       cfLNa: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLN9: // global
           I64[Hp - 32] = ds_sfCpX_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCq0_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadsPrec_info" {
     Data.Semigroup.$fReadFirst_$creadsPrec_info:
         const Data.Semigroup.$fReadFirst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.883546675 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadListPrec_closure" {
     Data.Semigroup.$fReadFirst_$creadListPrec_closure:
         const Data.Semigroup.$fReadFirst_$creadListPrec_info;
         const 0;
 },
 sat_sfCq2_entry() //  [R1]
         { []
         }
     {offset
       cfLNA: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCq2_info" {
     sat_sfCq2_info:
         const sat_sfCq2_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+608;
 },
 section ""relreadonly" . ufLNI_srtd" {
     ufLNI_srtd:
         const SfCR7_srt+320;
         const 39;
         const 343597383681;
 },
 Data.Semigroup.$fReadFirst_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfLND: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLNH; else goto cfLNG;
       cfLNH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLNG: // global
           I64[Hp - 16] = sat_sfCq2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadListPrec_info" {
     Data.Semigroup.$fReadFirst_$creadListPrec_info:
         const Data.Semigroup.$fReadFirst_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufLNI_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.891109932 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadList_closure" {
     Data.Semigroup.$fReadFirst_$creadList_closure:
         const Data.Semigroup.$fReadFirst_$creadList_info;
         const 0;
 },
 sat_sfCq4_entry() //  [R1]
         { []
         }
     {offset
       cfLO3: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCq4_info" {
     sat_sfCq4_info:
         const sat_sfCq4_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+608;
 },
 section ""relreadonly" . ufLOg_srtd" {
     ufLOg_srtd:
         const SfCR7_srt+320;
         const 37;
         const 68719476737;
 },
 sat_sfCq5_entry() //  [R1]
         { []
         }
     {offset
       cfLO6: // global
           _sfCq5::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfLO7; else goto cfLO8;
       cfLO8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLOa; else goto cfLO9;
       cfLOa: // global
           HpAlloc = 24;
           goto cfLO7;
       cfLO7: // global
           R1 = _sfCq5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLO9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCq5::P64;
           _sfCq3::P64 = P64[_sfCq5::P64 + 16];
           I64[Hp - 16] = sat_sfCq4_info;
           P64[Hp] = _sfCq3::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCq5_info" {
     sat_sfCq5_info:
         const sat_sfCq5_entry;
         const 1;
         const 18446744069414584336;
         const ufLOg_srtd;
 },
 section ""relreadonly" . ufLOh_srtd" {
     ufLOh_srtd:
         const SfCR7_srt+320;
         const 40;
         const 618475290625;
 },
 Data.Semigroup.$fReadFirst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfLOb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLOf; else goto cfLOe;
       cfLOf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLOe: // global
           I64[Hp - 16] = sat_sfCq5_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadList_info" {
     Data.Semigroup.$fReadFirst_$creadList_info:
         const Data.Semigroup.$fReadFirst_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufLOh_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.900964085 UTC

[section ""data" . Data.Semigroup.$fReadFirst_closure" {
     Data.Semigroup.$fReadFirst_closure:
         const Data.Semigroup.$fReadFirst_info;
         const 0;
 },
 sat_sfCqa_entry() //  [R1]
         { []
         }
     {offset
       cfLOD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLOE; else goto cfLOF;
       cfLOE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLOF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqa_info" {
     sat_sfCqa_info:
         const sat_sfCqa_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+624;
 },
 sat_sfCq9_entry() //  [R1]
         { []
         }
     {offset
       cfLOK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLOL; else goto cfLOM;
       cfLOL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCq9_info" {
     sat_sfCq9_info:
         const sat_sfCq9_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+608;
 },
 sat_sfCq8_entry() //  [R1]
         { []
         }
     {offset
       cfLOR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLOS; else goto cfLOT;
       cfLOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLOT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCq8_info" {
     sat_sfCq8_info:
         const sat_sfCq8_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+632;
 },
 sat_sfCq7_entry() //  [R1]
         { []
         }
     {offset
       cfLOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLOZ; else goto cfLP0;
       cfLOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLP0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCq7_info" {
     sat_sfCq7_info:
         const sat_sfCq7_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+616;
 },
 Data.Semigroup.$fReadFirst_entry() //  [R2]
         { []
         }
     {offset
       cfLP2: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfLP6; else goto cfLP5;
       cfLP6: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLP5: // global
           I64[Hp - 128] = sat_sfCqa_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCq9_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCq8_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCq7_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_info" {
     Data.Semigroup.$fReadFirst_info:
         const Data.Semigroup.$fReadFirst_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfCR7_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.91112284 UTC

[section ""cstring" . Data.Semigroup.$fShowFirst2_bytes" {
     Data.Semigroup.$fShowFirst2_bytes:
         I8[] [70,105,114,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.912835016 UTC

[section ""cstring" . Data.Semigroup.$fShowFirst1_bytes" {
     Data.Semigroup.$fShowFirst1_bytes:
         I8[] [103,101,116,70,105,114,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.920231273 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec1_closure" {
     Data.Semigroup.$w$cshowsPrec1_closure:
         const Data.Semigroup.$w$cshowsPrec1_info;
 },
 f_sfCqe_entry() //  [R1]
         { []
         }
     {offset
       cfLPG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfLPH; else goto cfLPI;
       cfLPH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLPI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCqe_info" {
     f_sfCqe_info:
         const f_sfCqe_entry;
         const 2;
         const 18;
 },
 sat_sfCqh_entry() //  [R1]
         { []
         }
     {offset
       cfLQ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQ4; else goto cfLQ5;
       cfLQ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQ5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqh_info" {
     sat_sfCqh_info:
         const sat_sfCqh_entry;
         const 1;
         const 16;
 },
 sat_sfCqi_entry() //  [R1]
         { []
         }
     {offset
       cfLQ6: // global
           _sfCqi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQ7; else goto cfLQ8;
       cfLQ8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLQa; else goto cfLQ9;
       cfLQa: // global
           HpAlloc = 24;
           goto cfLQ7;
       cfLQ7: // global
           R1 = _sfCqi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqi::P64;
           _sfCqe::P64 = P64[_sfCqi::P64 + 16];
           _sfCqg::P64 = P64[_sfCqi::P64 + 24];
           I64[Hp - 16] = sat_sfCqh_info;
           P64[Hp] = _sfCqg::P64;
           R2 = Hp - 16;
           R1 = _sfCqe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqi_info" {
     sat_sfCqi_info:
         const sat_sfCqi_entry;
         const 2;
         const 18;
 },
 sat_sfCqj_entry() //  [R1]
         { []
         }
     {offset
       cfLQb: // global
           _sfCqj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQc; else goto cfLQd;
       cfLQd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLQf; else goto cfLQe;
       cfLQf: // global
           HpAlloc = 32;
           goto cfLQc;
       cfLQc: // global
           R1 = _sfCqj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqj::P64;
           _sfCqe::P64 = P64[_sfCqj::P64 + 16];
           _sfCqg::P64 = P64[_sfCqj::P64 + 24];
           I64[Hp - 24] = sat_sfCqi_info;
           P64[Hp - 8] = _sfCqe::P64;
           P64[Hp] = _sfCqg::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqj_info" {
     sat_sfCqj_info:
         const sat_sfCqj_entry;
         const 2;
         const 18;
 },
 sat_sfCqk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLQg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLQk; else goto cfLQj;
       cfLQk: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLQj: // global
           _sfCqe::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCqj_info;
           P64[Hp - 8] = _sfCqe::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqk_info" {
     sat_sfCqk_info:
         const sat_sfCqk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCqn_entry() //  [R1]
         { []
         }
     {offset
       cfLQI: // global
           _sfCqn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQJ; else goto cfLQK;
       cfLQK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLQM; else goto cfLQL;
       cfLQM: // global
           HpAlloc = 24;
           goto cfLQJ;
       cfLQJ: // global
           R1 = _sfCqn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqn::P64;
           _sfCql::P64 = P64[_sfCqn::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCql::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqn_info" {
     sat_sfCqn_info:
         const sat_sfCqn_entry;
         const 1;
         const 16;
 },
 sat_sfCqo_entry() //  [R1]
         { []
         }
     {offset
       cfLQN: // global
           _sfCqo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQO; else goto cfLQP;
       cfLQP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLQR; else goto cfLQQ;
       cfLQR: // global
           HpAlloc = 24;
           goto cfLQO;
       cfLQO: // global
           R1 = _sfCqo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqo::P64;
           _sfCqe::P64 = P64[_sfCqo::P64 + 16];
           _sfCql::P64 = P64[_sfCqo::P64 + 24];
           I64[Hp - 16] = sat_sfCqn_info;
           P64[Hp] = _sfCql::P64;
           R2 = Hp - 16;
           R1 = _sfCqe::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqo_info" {
     sat_sfCqo_info:
         const sat_sfCqo_entry;
         const 2;
         const 18;
 },
 sat_sfCqp_entry() //  [R1]
         { []
         }
     {offset
       cfLQS: // global
           _sfCqp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQT; else goto cfLQU;
       cfLQU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLQW; else goto cfLQV;
       cfLQW: // global
           HpAlloc = 32;
           goto cfLQT;
       cfLQT: // global
           R1 = _sfCqp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLQV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqp::P64;
           _sfCqe::P64 = P64[_sfCqp::P64 + 16];
           _sfCql::P64 = P64[_sfCqp::P64 + 24];
           I64[Hp - 24] = sat_sfCqo_info;
           P64[Hp - 8] = _sfCqe::P64;
           P64[Hp] = _sfCql::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqp_info" {
     sat_sfCqp_info:
         const sat_sfCqp_entry;
         const 2;
         const 18;
 },
 sat_sfCqq_entry() //  [R1]
         { []
         }
     {offset
       cfLQX: // global
           _sfCqq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLQY; else goto cfLQZ;
       cfLQZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLR1; else goto cfLR0;
       cfLR1: // global
           HpAlloc = 32;
           goto cfLQY;
       cfLQY: // global
           R1 = _sfCqq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLR0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqq::P64;
           _sfCqe::P64 = P64[_sfCqq::P64 + 16];
           _sfCql::P64 = P64[_sfCqq::P64 + 24];
           I64[Hp - 24] = sat_sfCqp_info;
           P64[Hp - 8] = _sfCqe::P64;
           P64[Hp] = _sfCql::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqq_info" {
     sat_sfCqq_info:
         const sat_sfCqq_entry;
         const 2;
         const 18;
 },
 sat_sfCqr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLR3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfLR7; else goto cfLR6;
       cfLR7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLR6: // global
           _sfCqe::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCqq_info;
           P64[Hp - 32] = _sfCqe::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqr_info" {
     sat_sfCqr_info:
         const sat_sfCqr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLRb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfLRf; else goto cfLRe;
       cfLRf: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLRe: // global
           I64[Hp - 40] = f_sfCqe_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfLPC::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfLR9; else goto cfLRa;
       cfLR9: // global
           I64[Hp - 8] = sat_sfCqk_info;
           P64[Hp] = _cfLPC::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfLRa: // global
           I64[Hp - 8] = sat_sfCqr_info;
           P64[Hp] = _cfLPC::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec1_info" {
     Data.Semigroup.$w$cshowsPrec1_info:
         const Data.Semigroup.$w$cshowsPrec1_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.943398296 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshowsPrec_closure" {
     Data.Semigroup.$fShowFirst_$cshowsPrec_closure:
         const Data.Semigroup.$fShowFirst_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowFirst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLS8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfLS9; else goto cfLSa;
       cfLS9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLSa: // global
           I64[Sp - 24] = block_cfLS5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufLSe; else goto cfLS6;
       ufLSe: // global
           call _cfLS5(R1) args: 0, res: 0, upd: 0;
       cfLS6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshowsPrec_info" {
     Data.Semigroup.$fShowFirst_$cshowsPrec_info:
         const Data.Semigroup.$fShowFirst_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfLS5() //  [R1]
         { []
         }
     {offset
       cfLS5: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLS5_info" {
     block_cfLS5_info:
         const _cfLS5;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.949662951 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshow_closure" {
     Data.Semigroup.$fShowFirst_$cshow_closure:
         const Data.Semigroup.$fShowFirst_$cshow_info;
         const 0;
 },
 sat_sfCqz_entry() //  [R1]
         { []
         }
     {offset
       cfLSA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfLSB; else goto cfLSC;
       cfLSB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLSC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqz_info" {
     sat_sfCqz_info:
         const sat_sfCqz_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 sat_sfCqA_entry() //  [R1]
         { []
         }
     {offset
       cfLSD: // global
           _sfCqA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLSE; else goto cfLSF;
       cfLSF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLSH; else goto cfLSG;
       cfLSH: // global
           HpAlloc = 32;
           goto cfLSE;
       cfLSE: // global
           R1 = _sfCqA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLSG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCqA::P64;
           _sfCqx::P64 = P64[_sfCqA::P64 + 16];
           _sfCqy::P64 = P64[_sfCqA::P64 + 24];
           I64[Hp - 24] = sat_sfCqz_info;
           P64[Hp - 8] = _sfCqx::P64;
           P64[Hp] = _sfCqy::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqA_info" {
     sat_sfCqA_info:
         const sat_sfCqA_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 Data.Semigroup.$fShowFirst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfLSI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfLSM; else goto cfLSL;
       cfLSM: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLSL: // global
           I64[Hp - 24] = sat_sfCqA_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshow_info" {
     Data.Semigroup.$fShowFirst_$cshow_info:
         const Data.Semigroup.$fShowFirst_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.957732329 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshowList_closure" {
     Data.Semigroup.$fShowFirst_$cshowList_closure:
         const Data.Semigroup.$fShowFirst_$cshowList_info;
 },
 sat_sfCqF_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLT9: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqF_info" {
     sat_sfCqF_info:
         const sat_sfCqF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowFirst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfLTc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfLTg; else goto cfLTf;
       cfLTg: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLTf: // global
           I64[Hp - 8] = sat_sfCqF_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshowList_info" {
     Data.Semigroup.$fShowFirst_$cshowList_info:
         const Data.Semigroup.$fShowFirst_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.963887411 UTC

[section ""data" . Data.Semigroup.$fShowFirst_closure" {
     Data.Semigroup.$fShowFirst_closure:
         const Data.Semigroup.$fShowFirst_info;
         const 0;
 },
 sat_sfCqJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLTx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowFirst_$cshowList_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqJ_info" {
     sat_sfCqJ_info:
         const sat_sfCqJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCqI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfLTF: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowFirst_$cshow_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqI_info" {
     sat_sfCqI_info:
         const sat_sfCqI_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+656;
 },
 sat_sfCqH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfLTN: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowFirst_$cshowsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCqH_info" {
     sat_sfCqH_info:
         const sat_sfCqH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowFirst_entry() //  [R2]
         { []
         }
     {offset
       cfLTR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfLTV; else goto cfLTU;
       cfLTV: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLTU: // global
           I64[Hp - 72] = sat_sfCqJ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCqI_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCqH_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_info" {
     Data.Semigroup.$fShowFirst_info:
         const Data.Semigroup.$fShowFirst_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.974093292 UTC

[section ""data" . Data.Semigroup.$fEqFirst_closure" {
     Data.Semigroup.$fEqFirst_closure:
         const Data.Semigroup.$fEqFirst_info;
 },
 sat_sfCqM_entry() //  [R1]
         { []
         }
     {offset
       cfLUl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLUm; else goto cfLUn;
       cfLUm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLUn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqM_info" {
     sat_sfCqM_info:
         const sat_sfCqM_entry;
         const 1;
         const 16;
 },
 sat_sfCqL_entry() //  [R1]
         { []
         }
     {offset
       cfLUs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLUt; else goto cfLUu;
       cfLUt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLUu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqL_info" {
     sat_sfCqL_info:
         const sat_sfCqL_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqFirst_entry() //  [R2]
         { []
         }
     {offset
       cfLUw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLUA; else goto cfLUz;
       cfLUA: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLUz: // global
           I64[Hp - 64] = sat_sfCqM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCqL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqFirst_info" {
     Data.Semigroup.$fEqFirst_info:
         const Data.Semigroup.$fEqFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.981574693 UTC

[section ""data" . Data.Semigroup.$fOrdFirst_$cp1Ord_closure" {
     Data.Semigroup.$fOrdFirst_$cp1Ord_closure:
         const Data.Semigroup.$fOrdFirst_$cp1Ord_info;
 },
 sat_sfCqO_entry() //  [R1]
         { []
         }
     {offset
       cfLUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLUZ; else goto cfLV0;
       cfLUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqO_info" {
     sat_sfCqO_info:
         const sat_sfCqO_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdFirst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfLV1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLV5; else goto cfLV4;
       cfLV5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdFirst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLV4: // global
           I64[Hp - 16] = sat_sfCqO_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqFirst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdFirst_$cp1Ord_info" {
     Data.Semigroup.$fOrdFirst_$cp1Ord_info:
         const Data.Semigroup.$fOrdFirst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:22.989499583 UTC

[section ""data" . Data.Semigroup.$fOrdFirst_closure" {
     Data.Semigroup.$fOrdFirst_closure:
         const Data.Semigroup.$fOrdFirst_info;
 },
 sat_sfCqX_entry() //  [R1]
         { []
         }
     {offset
       cfLVm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVn; else goto cfLVo;
       cfLVn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqX_info" {
     sat_sfCqX_info:
         const sat_sfCqX_entry;
         const 1;
         const 16;
 },
 sat_sfCqW_entry() //  [R1]
         { []
         }
     {offset
       cfLVt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVu; else goto cfLVv;
       cfLVu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqW_info" {
     sat_sfCqW_info:
         const sat_sfCqW_entry;
         const 1;
         const 16;
 },
 sat_sfCqV_entry() //  [R1]
         { []
         }
     {offset
       cfLVA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVB; else goto cfLVC;
       cfLVB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqV_info" {
     sat_sfCqV_info:
         const sat_sfCqV_entry;
         const 1;
         const 16;
 },
 sat_sfCqU_entry() //  [R1]
         { []
         }
     {offset
       cfLVH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVI; else goto cfLVJ;
       cfLVI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqU_info" {
     sat_sfCqU_info:
         const sat_sfCqU_entry;
         const 1;
         const 16;
 },
 sat_sfCqT_entry() //  [R1]
         { []
         }
     {offset
       cfLVO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVP; else goto cfLVQ;
       cfLVP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqT_info" {
     sat_sfCqT_info:
         const sat_sfCqT_entry;
         const 1;
         const 16;
 },
 sat_sfCqS_entry() //  [R1]
         { []
         }
     {offset
       cfLVV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLVW; else goto cfLVX;
       cfLVW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLVX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqS_info" {
     sat_sfCqS_info:
         const sat_sfCqS_entry;
         const 1;
         const 16;
 },
 sat_sfCqR_entry() //  [R1]
         { []
         }
     {offset
       cfLW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLW3; else goto cfLW4;
       cfLW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqR_info" {
     sat_sfCqR_info:
         const sat_sfCqR_entry;
         const 1;
         const 16;
 },
 sat_sfCqQ_entry() //  [R1]
         { []
         }
     {offset
       cfLW9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLWa; else goto cfLWb;
       cfLWa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLWb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdFirst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqQ_info" {
     sat_sfCqQ_info:
         const sat_sfCqQ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdFirst_entry() //  [R2]
         { []
         }
     {offset
       cfLWd: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfLWh; else goto cfLWg;
       cfLWh: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLWg: // global
           I64[Hp - 256] = sat_sfCqX_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfCqW_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCqV_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCqU_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCqT_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCqS_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCqR_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCqQ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdFirst_info" {
     Data.Semigroup.$fOrdFirst_info:
         const Data.Semigroup.$fOrdFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.00697832 UTC

[section ""data" . Data.Semigroup.$fBoundedFirst_closure" {
     Data.Semigroup.$fBoundedFirst_closure:
         const Data.Semigroup.$fBoundedFirst_info;
 },
 sat_sfCr0_entry() //  [R1]
         { []
         }
     {offset
       cfLX9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLXa; else goto cfLXb;
       cfLXa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLXb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCr0_info" {
     sat_sfCr0_info:
         const sat_sfCr0_entry;
         const 1;
         const 16;
 },
 sat_sfCqZ_entry() //  [R1]
         { []
         }
     {offset
       cfLXg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLXh; else goto cfLXi;
       cfLXh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLXi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCqZ_info" {
     sat_sfCqZ_info:
         const sat_sfCqZ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedFirst_entry() //  [R2]
         { []
         }
     {offset
       cfLXk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfLXo; else goto cfLXn;
       cfLXo: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLXn: // global
           I64[Hp - 64] = sat_sfCr0_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCqZ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedFirst_info" {
     Data.Semigroup.$fBoundedFirst_info:
         const Data.Semigroup.$fBoundedFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.016339494 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg_$cto1_closure" {
     Data.Semigroup.$fGeneric1Arg_$cto1_closure:
         const Data.Semigroup.$fGeneric1Arg_$cto1_info;
 },
 Data.Semigroup.$fGeneric1Arg_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cfLXK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfLXO; else goto cfLXP;
       cfLXO: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGeneric1Arg_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLXP: // global
           I64[Sp - 8] = block_cfLXI_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Arg_$cto1_info" {
     Data.Semigroup.$fGeneric1Arg_$cto1_info:
         const Data.Semigroup.$fGeneric1Arg_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfLXI() //  [R1]
         { []
         }
     {offset
       cfLXI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLXS; else goto cfLXR;
       cfLXS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLXR: // global
           _sfCr3::P64 = P64[R1 + 7];
           _sfCr4::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCr3::P64;
           P64[Hp] = _sfCr4::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLXI_info" {
     block_cfLXI_info:
         const _cfLXI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.02314331 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg1_closure" {
     Data.Semigroup.$fGeneric1Arg1_closure:
         const Data.Semigroup.$fGeneric1Arg1_info;
 },
 Data.Semigroup.$fGeneric1Arg1_entry() //  [R2]
         { []
         }
     {offset
       cfLY9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfLYd; else goto cfLYe;
       cfLYd: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGeneric1Arg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLYe: // global
           I64[Sp - 8] = block_cfLY6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufLYi; else goto cfLY7;
       ufLYi: // global
           call _cfLY6(R1) args: 0, res: 0, upd: 0;
       cfLY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Arg1_info" {
     Data.Semigroup.$fGeneric1Arg1_info:
         const Data.Semigroup.$fGeneric1Arg1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfLY6() //  [R1]
         { []
         }
     {offset
       cfLY6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLYh; else goto cfLYg;
       cfLYh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLYg: // global
           _sfCr7::P64 = P64[R1 + 7];
           _sfCr8::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sfCr7::P64;
           P64[Hp] = _sfCr8::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLY6_info" {
     block_cfLY6_info:
         const _cfLY6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.029089309 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg_closure" {
     Data.Semigroup.$fGeneric1Arg_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Arg1_closure+1;
         const Data.Semigroup.$fGeneric1Arg_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.032175743 UTC

[section ""data" . Data.Semigroup.$fGenericArg_$cto_closure" {
     Data.Semigroup.$fGenericArg_$cto_closure:
         const Data.Semigroup.$fGenericArg_$cto_info;
 },
 Data.Semigroup.$fGenericArg_$cto_entry() //  [R2]
         { []
         }
     {offset
       cfLYA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfLYE; else goto cfLYF;
       cfLYE: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGenericArg_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLYF: // global
           I64[Sp - 8] = block_cfLYy_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericArg_$cto_info" {
     Data.Semigroup.$fGenericArg_$cto_info:
         const Data.Semigroup.$fGenericArg_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfLYy() //  [R1]
         { []
         }
     {offset
       cfLYy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLYI; else goto cfLYH;
       cfLYI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLYH: // global
           _sfCrb::P64 = P64[R1 + 7];
           _sfCrc::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCrb::P64;
           P64[Hp] = _sfCrc::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLYy_info" {
     block_cfLYy_info:
         const _cfLYy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.039362117 UTC

[section ""data" . Data.Semigroup.$fGenericArg1_closure" {
     Data.Semigroup.$fGenericArg1_closure:
         const Data.Semigroup.$fGenericArg1_info;
 },
 Data.Semigroup.$fGenericArg1_entry() //  [R2]
         { []
         }
     {offset
       cfLYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfLZ3; else goto cfLZ4;
       cfLZ3: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGenericArg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfLZ4: // global
           I64[Sp - 8] = block_cfLYW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufLZ8; else goto cfLYX;
       ufLZ8: // global
           call _cfLYW(R1) args: 0, res: 0, upd: 0;
       cfLYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericArg1_info" {
     Data.Semigroup.$fGenericArg1_info:
         const Data.Semigroup.$fGenericArg1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfLYW() //  [R1]
         { []
         }
     {offset
       cfLYW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLZ7; else goto cfLZ6;
       cfLZ7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfLZ6: // global
           _sfCrf::P64 = P64[R1 + 7];
           _sfCrg::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sfCrf::P64;
           P64[Hp] = _sfCrg::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLYW_info" {
     block_cfLYW_info:
         const _cfLYW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.045444242 UTC

[section ""data" . Data.Semigroup.$fGenericArg_closure" {
     Data.Semigroup.$fGenericArg_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericArg1_closure+1;
         const Data.Semigroup.$fGenericArg_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.050153963 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgunfold_closure" {
     Data.Semigroup.$fDataArg_$cgunfold_closure:
         const Data.Semigroup.$fDataArg_$cgunfold_info;
 },
 sat_sfCrm_entry() //  [R1]
         { []
         }
     {offset
       cfLZw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfLZx; else goto cfLZy;
       cfLZx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLZy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.Arg_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCrm_info" {
     sat_sfCrm_info:
         const sat_sfCrm_entry;
         const 1;
         const 16;
 },
 sat_sfCrn_entry() //  [R1]
         { []
         }
     {offset
       cfLZz: // global
           _sfCrn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfLZA; else goto cfLZB;
       cfLZB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfLZD; else goto cfLZC;
       cfLZD: // global
           HpAlloc = 24;
           goto cfLZA;
       cfLZA: // global
           R1 = _sfCrn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfLZC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCrn::P64;
           _sfCrh::P64 = P64[_sfCrn::P64 + 16];
           _sfCrj::P64 = P64[_sfCrn::P64 + 24];
           _sfCrk::P64 = P64[_sfCrn::P64 + 32];
           I64[Hp - 16] = sat_sfCrm_info;
           P64[Hp] = _sfCrk::P64;
           R3 = Hp - 16;
           R2 = _sfCrh::P64;
           R1 = _sfCrj::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCrn_info" {
     sat_sfCrn_info:
         const sat_sfCrn_entry;
         const 3;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgunfold_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfLZE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfLZI; else goto cfLZH;
       cfLZI: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgunfold_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfLZH: // global
           I64[Hp - 32] = sat_sfCrn_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sfCri::P64 = R3;
           R3 = Hp - 32;
           R2 = _sfCri::P64;
           R1 = R4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgunfold_info" {
     Data.Semigroup.$fDataArg_$cgunfold_info:
         const Data.Semigroup.$fDataArg_$cgunfold_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.059938062 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgfoldl_closure" {
     Data.Semigroup.$fDataArg_$cgfoldl_closure:
         const Data.Semigroup.$fDataArg_$cgfoldl_info;
 },
 sat_sfCrw_entry() //  [R1]
         { []
         }
     {offset
       cfM0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfM0d; else goto cfM0e;
       cfM0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.Arg_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCrw_info" {
     sat_sfCrw_info:
         const sat_sfCrw_entry;
         const 1;
         const 16;
 },
 sat_sfCrx_entry() //  [R1]
         { []
         }
     {offset
       cfM0f: // global
           _sfCrx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfM0g; else goto cfM0h;
       cfM0h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM0j; else goto cfM0i;
       cfM0j: // global
           HpAlloc = 24;
           goto cfM0g;
       cfM0g: // global
           R1 = _sfCrx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM0i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCrx::P64;
           _sfCro::P64 = P64[_sfCrx::P64 + 16];
           _sfCrq::P64 = P64[_sfCrx::P64 + 24];
           _sfCrr::P64 = P64[_sfCrx::P64 + 32];
           _sfCru::P64 = P64[_sfCrx::P64 + 40];
           I64[Hp - 16] = sat_sfCrw_info;
           P64[Hp] = _sfCrr::P64;
           R4 = _sfCru::P64;
           R3 = Hp - 16;
           R2 = _sfCro::P64;
           R1 = _sfCrq::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCrx_info" {
     sat_sfCrx_info:
         const sat_sfCrx_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfM0k: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfM0l; else goto cfM0m;
       cfM0l: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM0m: // global
           I64[Sp - 40] = block_cfLZZ_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufM0q; else goto cfM00;
       ufM0q: // global
           call _cfLZZ(R1) args: 0, res: 0, upd: 0;
       cfM00: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgfoldl_info" {
     Data.Semigroup.$fDataArg_$cgfoldl_info:
         const Data.Semigroup.$fDataArg_$cgfoldl_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfLZZ() //  [R1]
         { []
         }
     {offset
       cfLZZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfM0p; else goto cfM0o;
       cfM0p: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfM0o: // global
           _sfCru::P64 = P64[R1 + 7];
           _sfCrv::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sfCrx_info;
           P64[Hp - 24] = P64[Sp + 8];
           _sfCrq::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sfCrq::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCru::P64;
           R4 = _sfCrv::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _sfCrq::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfLZZ_info" {
     block_cfLZZ_info:
         const _cfLZZ;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.068707547 UTC

[section ""cstring" . Data.Semigroup.$fDataArg6_bytes" {
     Data.Semigroup.$fDataArg6_bytes:
         I8[] [65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.070916643 UTC

[section ""data" . Data.Semigroup.$fDataArg9_closure" {
     Data.Semigroup.$fDataArg9_closure:
         const Data.Semigroup.$fDataArg9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataArg9_entry() //  [R1]
         { []
         }
     {offset
       cfM0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfM0S; else goto cfM0T;
       cfM0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM0T: // global
           (_cfM0O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfM0O::I64 == 0) goto cfM0Q; else goto cfM0P;
       cfM0Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfM0P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfM0O::I64;
           R2 = Data.Semigroup.$fDataArg6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg9_info" {
     Data.Semigroup.$fDataArg9_info:
         const Data.Semigroup.$fDataArg9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.074440027 UTC

[section ""data" . Data.Semigroup.$fReadArg_lexeme_closure" {
     Data.Semigroup.$fReadArg_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataArg9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.079810462 UTC

[section ""data" . Data.Semigroup.$fReadArg1_closure" {
     Data.Semigroup.$fReadArg1_closure:
         const Data.Semigroup.$fReadArg1_info;
         const 0;
 },
 sat_sfCrL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM1A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM1E; else goto cfM1D;
       cfM1E: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM1D: // global
           _sfCrD::P64 = P64[R1 + 7];
           _sfCrI::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfCrI::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sfCrD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCrL_info" {
     sat_sfCrL_info:
         const sat_sfCrL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCrM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM1F: // global
           _sfCrI::P64 = R2;
           _sfCrM::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfM1G; else goto cfM1H;
       cfM1H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM1J; else goto cfM1I;
       cfM1J: // global
           HpAlloc = 24;
           goto cfM1G;
       cfM1G: // global
           R2 = _sfCrI::P64;
           R1 = _sfCrM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM1I: // global
           _sfCrz::P64 = P64[_sfCrM::P64 + 7];
           _sfCrD::P64 = P64[_sfCrM::P64 + 15];
           I64[Hp - 16] = sat_sfCrL_info;
           P64[Hp - 8] = _sfCrD::P64;
           P64[Hp] = _sfCrI::P64;
           R2 = _sfCrz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCrM_info" {
     sat_sfCrM_info:
         const sat_sfCrM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCrN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM1K: // global
           _sfCrH::P64 = R2;
           _sfCrN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfM1L; else goto cfM1M;
       cfM1M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM1O; else goto cfM1N;
       cfM1O: // global
           HpAlloc = 24;
           goto cfM1L;
       cfM1L: // global
           R2 = _sfCrH::P64;
           R1 = _sfCrN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM1N: // global
           _sfCry::P64 = P64[_sfCrN::P64 + 7];
           _sfCrz::P64 = P64[_sfCrN::P64 + 15];
           _sfCrD::P64 = P64[_sfCrN::P64 + 23];
           I64[Hp - 16] = sat_sfCrM_info;
           P64[Hp - 8] = _sfCrz::P64;
           P64[Hp] = _sfCrD::P64;
           R2 = _sfCry::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCrN_info" {
     sat_sfCrN_info:
         const sat_sfCrN_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sfCrQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM1P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfM1Q; else goto cfM1R;
       cfM1Q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM1R: // global
           I64[Sp - 32] = block_cfM1b_info;
           _sfCry::P64 = P64[R1 + 6];
           _sfCrz::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sfCry::P64;
           P64[Sp - 16] = _sfCrz::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufM24; else goto cfM1c;
       ufM24: // global
           call _cfM1b(R1) args: 0, res: 0, upd: 0;
       cfM1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCrQ_info" {
     sat_sfCrQ_info:
         const sat_sfCrQ_entry;
         const 2;
         const 8800387989515;
         const 8589934607;
         const SfCR7_srt+584;
 },
 _cfM1b() //  [R1]
         { []
         }
     {offset
       cfM1b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfM1U; else goto cfM1T;
       cfM1U: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfM1T: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cfM1W; else goto cfM20;
       cfM1W: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfM20: // global
           I64[Hp - 24] = sat_sfCrN_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cfM1X_info;
           R3 = Hp - 23;
           R2 = Data.Semigroup.$fReadArg_lexeme_closure+4;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM1b_info" {
     block_cfM1b_info:
         const _cfM1b;
         const 3;
         const 8800387989534;
         const SfCR7_srt+584;
 },
 _cfM1X() //  [R1]
         { []
         }
     {offset
       cfM1X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfM23; else goto cfM22;
       cfM23: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfM22: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM1X_info" {
     block_cfM1X_info:
         const _cfM1X;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufM2a_srtd" {
     ufM2a_srtd:
         const SfCR7_srt+296;
         const 49;
         const 422281184542721;
 },
 Data.Semigroup.$fReadArg1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfM25: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM29; else goto cfM28;
       cfM29: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM28: // global
           I64[Hp - 16] = sat_sfCrQ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sfCrA::P64 = R4;
           R4 = R5;
           R3 = _sfCrA::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg1_info" {
     Data.Semigroup.$fReadArg1_info:
         const Data.Semigroup.$fReadArg1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ufM2a_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.097757065 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadsPrec_closure" {
     Data.Semigroup.$fReadArg_$creadsPrec_closure:
         const Data.Semigroup.$fReadArg_$creadsPrec_info;
         const 0;
 },
 sat_sfCrU_entry() //  [R1]
         { []
         }
     {offset
       cfM2R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfM2S; else goto cfM2T;
       cfM2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM2T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCrU_info" {
     sat_sfCrU_info:
         const sat_sfCrU_entry;
         const 3;
         const 4294967311;
         const SfCR7_srt+680;
 },
 Data.Semigroup.$fReadArg_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfM2U: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfM2Y; else goto cfM2X;
       cfM2Y: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM2X: // global
           I64[Hp - 32] = sat_sfCrU_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadsPrec_info" {
     Data.Semigroup.$fReadArg_$creadsPrec_info:
         const Data.Semigroup.$fReadArg_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfCR7_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.103522364 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadListPrec_closure" {
     Data.Semigroup.$fReadArg_$creadListPrec_closure:
         const Data.Semigroup.$fReadArg_$creadListPrec_info;
         const 0;
 },
 sat_sfCrX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM3g: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCrX_info" {
     sat_sfCrX_info:
         const sat_sfCrX_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfCR7_srt+680;
 },
 section ""relreadonly" . ufM3o_srtd" {
     ufM3o_srtd:
         const SfCR7_srt+320;
         const 48;
         const 175921860444161;
 },
 Data.Semigroup.$fReadArg_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cfM3j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM3n; else goto cfM3m;
       cfM3n: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM3m: // global
           I64[Hp - 16] = sat_sfCrX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadListPrec_info" {
     Data.Semigroup.$fReadArg_$creadListPrec_info:
         const Data.Semigroup.$fReadArg_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufM3o_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.110266235 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadList_closure" {
     Data.Semigroup.$fReadArg_$creadList_closure:
         const Data.Semigroup.$fReadArg_$creadList_info;
         const 0;
 },
 sat_sfCs0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM3K: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCs0_info" {
     sat_sfCs0_info:
         const sat_sfCs0_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfCR7_srt+680;
 },
 section ""relreadonly" . ufM3X_srtd" {
     ufM3X_srtd:
         const SfCR7_srt+320;
         const 46;
         const 35184372088833;
 },
 sat_sfCs1_entry() //  [R1]
         { []
         }
     {offset
       cfM3N: // global
           _sfCs1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfM3O; else goto cfM3P;
       cfM3P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM3R; else goto cfM3Q;
       cfM3R: // global
           HpAlloc = 24;
           goto cfM3O;
       cfM3O: // global
           R1 = _sfCs1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCs1::P64;
           _sfCrY::P64 = P64[_sfCs1::P64 + 16];
           _sfCrZ::P64 = P64[_sfCs1::P64 + 24];
           I64[Hp - 16] = sat_sfCs0_info;
           P64[Hp - 8] = _sfCrY::P64;
           P64[Hp] = _sfCrZ::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCs1_info" {
     sat_sfCs1_info:
         const sat_sfCs1_entry;
         const 2;
         const 18446744069414584338;
         const ufM3X_srtd;
 },
 section ""relreadonly" . ufM3Y_srtd" {
     ufM3Y_srtd:
         const SfCR7_srt+320;
         const 49;
         const 316659348799489;
 },
 Data.Semigroup.$fReadArg_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfM3S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfM3W; else goto cfM3V;
       cfM3W: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM3V: // global
           I64[Hp - 24] = sat_sfCs1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadList_info" {
     Data.Semigroup.$fReadArg_$creadList_info:
         const Data.Semigroup.$fReadArg_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufM3Y_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.120327756 UTC

[section ""data" . Data.Semigroup.$fReadArg_closure" {
     Data.Semigroup.$fReadArg_closure:
         const Data.Semigroup.$fReadArg_info;
         const 0;
 },
 sat_sfCs7_entry() //  [R1]
         { []
         }
     {offset
       cfM4k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfM4l; else goto cfM4m;
       cfM4l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM4m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCs7_info" {
     sat_sfCs7_info:
         const sat_sfCs7_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+696;
 },
 sat_sfCs6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM4s: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCs6_info" {
     sat_sfCs6_info:
         const sat_sfCs6_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfCR7_srt+680;
 },
 sat_sfCs5_entry() //  [R1]
         { []
         }
     {offset
       cfM4z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfM4A; else goto cfM4B;
       cfM4A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM4B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCs5_info" {
     sat_sfCs5_info:
         const sat_sfCs5_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+704;
 },
 sat_sfCs4_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM4H: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fReadArg_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCs4_info" {
     sat_sfCs4_info:
         const sat_sfCs4_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfCR7_srt+688;
 },
 Data.Semigroup.$fReadArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfM4L: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfM4P; else goto cfM4O;
       cfM4P: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM4O: // global
           I64[Hp - 144] = sat_sfCs7_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sfCs6_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sfCs5_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfCs4_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_info" {
     Data.Semigroup.$fReadArg_info:
         const Data.Semigroup.$fReadArg_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const SfCR7_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.130997807 UTC

[section ""cstring" . Data.Semigroup.$fShowArg1_bytes" {
     Data.Semigroup.$fShowArg1_bytes:
         I8[] [65,114,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.137755792 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec_closure" {
     Data.Semigroup.$w$cshowsPrec_closure:
         const Data.Semigroup.$w$cshowsPrec_info;
 },
 Data.Semigroup.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cfM5f: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sfCsd_entry() //  [R1]
         { []
         }
     {offset
       cfM5n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfM5o; else goto cfM5p;
       cfM5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCsd_info" {
     f_sfCsd_info:
         const f_sfCsd_entry;
         const 2;
         const 18;
 },
 g_sfCse_entry() //  [R1]
         { []
         }
     {offset
       cfM5u: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfM5v; else goto cfM5w;
       cfM5v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM5w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sfCse_info" {
     g_sfCse_info:
         const g_sfCse_entry;
         const 2;
         const 18;
 },
 sat_sfCsj_entry() //  [R1]
         { []
         }
     {offset
       cfM5L: // global
           _sfCsj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfM5M; else goto cfM5N;
       cfM5N: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfM5P; else goto cfM5O;
       cfM5P: // global
           HpAlloc = 56;
           goto cfM5M;
       cfM5M: // global
           R1 = _sfCsj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM5O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCsj::P64;
           _sfCsd::P64 = P64[_sfCsj::P64 + 16];
           _sfCse::P64 = P64[_sfCsj::P64 + 24];
           _sfCsg::P64 = P64[_sfCsj::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCse::P64;
           P64[Hp - 24] = _sfCsg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sfCsd::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCsj_info" {
     sat_sfCsj_info:
         const sat_sfCsj_entry;
         const 3;
         const 15;
 },
 sat_sfCsk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM5Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfM5U; else goto cfM5T;
       cfM5U: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM5T: // global
           _sfCsd::P64 = P64[R1 + 7];
           _sfCse::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sfCsj_info;
           P64[Hp - 16] = _sfCsd::P64;
           P64[Hp - 8] = _sfCse::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Data.Semigroup.$fShowArg1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsk_info" {
     sat_sfCsk_info:
         const sat_sfCsk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCsn_entry() //  [R1]
         { []
         }
     {offset
       cfM6e: // global
           _sfCsn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfM6f; else goto cfM6g;
       cfM6g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM6i; else goto cfM6h;
       cfM6i: // global
           HpAlloc = 24;
           goto cfM6f;
       cfM6f: // global
           R1 = _sfCsn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM6h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCsn::P64;
           _sfCse::P64 = P64[_sfCsn::P64 + 16];
           _sfCsl::P64 = P64[_sfCsn::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCsl::P64;
           R2 = Hp - 14;
           R1 = _sfCse::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCsn_info" {
     sat_sfCsn_info:
         const sat_sfCsn_entry;
         const 2;
         const 18;
 },
 sat_sfCsp_entry() //  [R1]
         { []
         }
     {offset
       cfM6k: // global
           _sfCsp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfM6l; else goto cfM6m;
       cfM6m: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfM6o; else goto cfM6n;
       cfM6o: // global
           HpAlloc = 56;
           goto cfM6l;
       cfM6l: // global
           R1 = _sfCsp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM6n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCsp::P64;
           _sfCsd::P64 = P64[_sfCsp::P64 + 16];
           _sfCse::P64 = P64[_sfCsp::P64 + 24];
           _sfCsl::P64 = P64[_sfCsp::P64 + 32];
           I64[Hp - 48] = sat_sfCsn_info;
           P64[Hp - 32] = _sfCse::P64;
           P64[Hp - 24] = _sfCsl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sfCsd::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCsp_info" {
     sat_sfCsp_info:
         const sat_sfCsp_entry;
         const 3;
         const 15;
 },
 sat_sfCsq_entry() //  [R1]
         { []
         }
     {offset
       cfM6p: // global
           _sfCsq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfM6q; else goto cfM6r;
       cfM6r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfM6t; else goto cfM6s;
       cfM6t: // global
           HpAlloc = 40;
           goto cfM6q;
       cfM6q: // global
           R1 = _sfCsq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfM6s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCsq::P64;
           _sfCsd::P64 = P64[_sfCsq::P64 + 16];
           _sfCse::P64 = P64[_sfCsq::P64 + 24];
           _sfCsl::P64 = P64[_sfCsq::P64 + 32];
           I64[Hp - 32] = sat_sfCsp_info;
           P64[Hp - 16] = _sfCsd::P64;
           P64[Hp - 8] = _sfCse::P64;
           P64[Hp] = _sfCsl::P64;
           R3 = Hp - 32;
           R2 = Data.Semigroup.$fShowArg1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCsq_info" {
     sat_sfCsq_info:
         const sat_sfCsq_entry;
         const 3;
         const 15;
 },
 sat_sfCsr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM6v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfM6z; else goto cfM6y;
       cfM6z: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM6y: // global
           _sfCsd::P64 = P64[R1 + 7];
           _sfCse::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sfCsq_info;
           P64[Hp - 40] = _sfCsd::P64;
           P64[Hp - 32] = _sfCse::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsr_info" {
     sat_sfCsr_info:
         const sat_sfCsr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfM6D: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfM6H; else goto cfM6G;
       cfM6H: // global
           HpAlloc = 88;
           R1 = Data.Semigroup.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cfM6G: // global
           I64[Hp - 80] = f_sfCsd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = g_sfCse_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cfM5j::P64 = Hp - 80;
           _cfM5q::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R4, 11)) goto cfM6B; else goto cfM6C;
       cfM6B: // global
           I64[Hp - 16] = sat_sfCsk_info;
           P64[Hp - 8] = _cfM5j::P64;
           P64[Hp] = _cfM5q::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfM6C: // global
           I64[Hp - 16] = sat_sfCsr_info;
           P64[Hp - 8] = _cfM5j::P64;
           P64[Hp] = _cfM5q::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec_info" {
     Data.Semigroup.$w$cshowsPrec_info:
         const Data.Semigroup.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 261;
         const Data.Semigroup.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.158104892 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshowsPrec_closure" {
     Data.Semigroup.$fShowArg_$cshowsPrec_closure:
         const Data.Semigroup.$fShowArg_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowArg_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfM7x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfM7B; else goto cfM7C;
       cfM7B: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM7C: // global
           I64[Sp - 32] = block_cfM7u_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufM7K; else goto cfM7v;
       ufM7K: // global
           call _cfM7u(R1) args: 0, res: 0, upd: 0;
       cfM7v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshowsPrec_info" {
     Data.Semigroup.$fShowArg_$cshowsPrec_info:
         const Data.Semigroup.$fShowArg_$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfM7u() //  [R1]
         { []
         }
     {offset
       cfM7u: // global
           I64[Sp] = block_cfM7A_info;
           _sfCsx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sfCsx::I64;
           if (R1 & 7 != 0) goto ufM7J; else goto cfM7E;
       ufM7J: // global
           call _cfM7A(R1) args: 0, res: 0, upd: 0;
       cfM7E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM7u_info" {
     block_cfM7u_info:
         const _cfM7u;
         const 3;
         const 30;
 },
 _cfM7A() //  [R1]
         { []
         }
     {offset
       cfM7A: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM7A_info" {
     block_cfM7A_info:
         const _cfM7A;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.165732739 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshow_closure" {
     Data.Semigroup.$fShowArg_$cshow_closure:
         const Data.Semigroup.$fShowArg_$cshow_info;
 },
 Data.Semigroup.$fShowArg_$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfM85: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfM86; else goto cfM87;
       cfM86: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM87: // global
           I64[Sp - 24] = block_cfM82_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufM8b; else goto cfM83;
       ufM8b: // global
           call _cfM82(R1) args: 0, res: 0, upd: 0;
       cfM83: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshow_info" {
     Data.Semigroup.$fShowArg_$cshow_info:
         const Data.Semigroup.$fShowArg_$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfM82() //  [R1]
         { []
         }
     {offset
       cfM82: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM82_info" {
     block_cfM82_info:
         const _cfM82;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.172821041 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshowList_closure" {
     Data.Semigroup.$fShowArg_$cshowList_closure:
         const Data.Semigroup.$fShowArg_$cshowList_info;
 },
 sat_sfCsP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM8x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfM8y; else goto cfM8z;
       cfM8y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfM8z: // global
           I64[Sp - 24] = block_cfM8u_info;
           _sfCsH::P64 = P64[R1 + 7];
           _sfCsI::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCsH::P64;
           P64[Sp - 8] = _sfCsI::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufM8D; else goto cfM8v;
       ufM8D: // global
           call _cfM8u(R1) args: 0, res: 0, upd: 0;
       cfM8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsP_info" {
     sat_sfCsP_info:
         const sat_sfCsP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfM8u() //  [R1]
         { []
         }
     {offset
       cfM8u: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfM8u_info" {
     block_cfM8u_info:
         const _cfM8u;
         const 2;
         const 30;
 },
 Data.Semigroup.$fShowArg_$cshowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfM8E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfM8I; else goto cfM8H;
       cfM8I: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM8H: // global
           I64[Hp - 16] = sat_sfCsP_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sfCsJ::P64 = R4;
           R4 = R5;
           R3 = _sfCsJ::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshowList_info" {
     Data.Semigroup.$fShowArg_$cshowList_info:
         const Data.Semigroup.$fShowArg_$cshowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.181174339 UTC

[section ""data" . Data.Semigroup.$fShowArg_closure" {
     Data.Semigroup.$fShowArg_closure:
         const Data.Semigroup.$fShowArg_info;
 },
 sat_sfCsU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM94: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowArg_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsU_info" {
     sat_sfCsU_info:
         const sat_sfCsU_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfCsT_entry() //  [R1, R2]
         { []
         }
     {offset
       cfM9c: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowArg_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsT_info" {
     sat_sfCsT_info:
         const sat_sfCsT_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCsS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfM9k: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowArg_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCsS_info" {
     sat_sfCsS_info:
         const sat_sfCsS_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Semigroup.$fShowArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfM9o: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfM9s; else goto cfM9r;
       cfM9s: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfM9r: // global
           I64[Hp - 96] = sat_sfCsU_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sfCsT_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sfCsS_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_info" {
     Data.Semigroup.$fShowArg_info:
         const Data.Semigroup.$fShowArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.189231124 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max1_closure" {
     Data.Semigroup.$fGeneric1Max1_closure:
         const Data.Semigroup.$fGeneric1Max1_info;
 },
 Data.Semigroup.$fGeneric1Max1_entry() //  [R2]
         { []
         }
     {offset
       cfM9O: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Max1_info" {
     Data.Semigroup.$fGeneric1Max1_info:
         const Data.Semigroup.$fGeneric1Max1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.192578085 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max2_closure" {
     Data.Semigroup.$fGeneric1Max2_closure:
         const Data.Semigroup.$fGeneric1Max2_info;
 },
 Data.Semigroup.$fGeneric1Max2_entry() //  [R2]
         { []
         }
     {offset
       cfM9Z: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Max2_info" {
     Data.Semigroup.$fGeneric1Max2_info:
         const Data.Semigroup.$fGeneric1Max2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.19597676 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max_closure" {
     Data.Semigroup.$fGeneric1Max_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Max2_closure+1;
         const Data.Semigroup.$fGeneric1Max1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.198073896 UTC

[section ""data" . Data.Semigroup.$fGenericMax1_closure" {
     Data.Semigroup.$fGenericMax1_closure:
         const Data.Semigroup.$fGenericMax1_info;
 },
 Data.Semigroup.$fGenericMax1_entry() //  [R2]
         { []
         }
     {offset
       cfMab: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMax1_info" {
     Data.Semigroup.$fGenericMax1_info:
         const Data.Semigroup.$fGenericMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.201284505 UTC

[section ""data" . Data.Semigroup.$fGenericMax2_closure" {
     Data.Semigroup.$fGenericMax2_closure:
         const Data.Semigroup.$fGenericMax2_info;
 },
 Data.Semigroup.$fGenericMax2_entry() //  [R2]
         { []
         }
     {offset
       cfMam: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMax2_info" {
     Data.Semigroup.$fGenericMax2_info:
         const Data.Semigroup.$fGenericMax2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.204873103 UTC

[section ""data" . Data.Semigroup.$fGenericMax_closure" {
     Data.Semigroup.$fGenericMax_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericMax2_closure+1;
         const Data.Semigroup.$fGenericMax1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.208084385 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgfoldl_closure" {
     Data.Semigroup.$fDataMax_$cgfoldl_closure:
         const Data.Semigroup.$fDataMax_$cgfoldl_info;
 },
 sat_sfCt3_entry() //  [R1]
         { []
         }
     {offset
       cfMaC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMaD; else goto cfMaE;
       cfMaD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMaE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCt3_info" {
     sat_sfCt3_info:
         const sat_sfCt3_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMax_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfMaF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMaJ; else goto cfMaI;
       cfMaJ: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMaI: // global
           I64[Hp - 16] = sat_sfCt3_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfCt0::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfCt0::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgfoldl_info" {
     Data.Semigroup.$fDataMax_$cgfoldl_info:
         const Data.Semigroup.$fDataMax_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.213050082 UTC

[section ""cstring" . Data.Semigroup.$fDataMax4_bytes" {
     Data.Semigroup.$fDataMax4_bytes:
         I8[] [77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.215242702 UTC

[section ""data" . Data.Semigroup.$fDataMax7_closure" {
     Data.Semigroup.$fDataMax7_closure:
         const Data.Semigroup.$fDataMax7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMax7_entry() //  [R1]
         { []
         }
     {offset
       cfMaZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMb0; else goto cfMb1;
       cfMb0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMb1: // global
           (_cfMaW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfMaW::I64 == 0) goto cfMaY; else goto cfMaX;
       cfMaY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfMaX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfMaW::I64;
           R2 = Data.Semigroup.$fDataMax4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax7_info" {
     Data.Semigroup.$fDataMax7_info:
         const Data.Semigroup.$fDataMax7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.218792598 UTC

[section ""data" . Data.Semigroup.$fReadMax_lexeme_closure" {
     Data.Semigroup.$fReadMax_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataMax7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.220511556 UTC

[section ""cstring" . Data.Semigroup.$fReadMax3_bytes" {
     Data.Semigroup.$fReadMax3_bytes:
         I8[] [103,101,116,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.222741104 UTC

[section ""data" . Data.Semigroup.$fReadMax2_closure" {
     Data.Semigroup.$fReadMax2_closure:
         const Data.Semigroup.$fReadMax2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadMax2_entry() //  [R1]
         { []
         }
     {offset
       cfMbh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMbi; else goto cfMbj;
       cfMbi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMbj: // global
           (_cfMbe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfMbe::I64 == 0) goto cfMbg; else goto cfMbf;
       cfMbg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfMbf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfMbe::I64;
           R2 = Data.Semigroup.$fReadMax3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax2_info" {
     Data.Semigroup.$fReadMax2_info:
         const Data.Semigroup.$fReadMax2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.231757181 UTC

[section ""data" . Data.Semigroup.$fReadMax1_closure" {
     Data.Semigroup.$fReadMax1_closure:
         const Data.Semigroup.$fReadMax1_info;
         const 0;
 },
 lvl33_sfCt5_entry() //  [R1]
         { []
         }
     {offset
       cfMbz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMbA; else goto cfMbB;
       cfMbA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMbB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCt5_info" {
     lvl33_sfCt5_info:
         const lvl33_sfCt5_entry;
         const 1;
         const 16;
 },
 ds_sfCt6_entry() //  [R1]
         { []
         }
     {offset
       cfMbH: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCt6_info" {
     ds_sfCt6_info:
         const ds_sfCt6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCth_entry() //  [R1]
         { []
         }
     {offset
       cfMci: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCth_info" {
     sat_sfCth_info:
         const sat_sfCth_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCtk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMco: // global
           _sfCtf::P64 = R2;
           _sfCtk::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfMcp; else goto cfMcq;
       cfMcq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMcs; else goto cfMcr;
       cfMcs: // global
           HpAlloc = 24;
           goto cfMcp;
       cfMcp: // global
           R2 = _sfCtf::P64;
           R1 = _sfCtk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMcr: // global
           _sfCt9::P64 = P64[_sfCtk::P64 + 7];
           I64[Hp - 16] = sat_sfCth_info;
           P64[Hp - 8] = _sfCt9::P64;
           P64[Hp] = _sfCtf::P64;
           I64[Sp - 8] = block_cfMcl_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtk_info" {
     sat_sfCtk_info:
         const sat_sfCtk_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+576;
 },
 _cfMcl() //  [R1]
         { []
         }
     {offset
       cfMcl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMcv; else goto cfMcu;
       cfMcv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMcu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMcl_info" {
     block_cfMcl_info:
         const _cfMcl;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMd7_srtd" {
     ufMd7_srtd:
         const SfCR7_srt+264;
         const 58;
         const 144116837343297537;
 },
 sat_sfCtl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMcw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMcA; else goto cfMcz;
       cfMcA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMcz: // global
           _sfCt6::P64 = P64[R1 + 7];
           _sfCt9::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCtk_info;
           P64[Hp] = _sfCt9::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCt6::P64;
           R2 = Data.Semigroup.$fReadMax2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtl_info" {
     sat_sfCtl_info:
         const sat_sfCtl_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufMd7_srtd;
 },
 section ""relreadonly" . ufMd8_srtd" {
     ufMd8_srtd:
         const SfCR7_srt+264;
         const 58;
         const 144116837343297541;
 },
 sat_sfCto_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMcE: // global
           _sfCtd::P64 = R2;
           _sfCto::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfMcF; else goto cfMcG;
       cfMcG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMcI; else goto cfMcH;
       cfMcI: // global
           HpAlloc = 24;
           goto cfMcF;
       cfMcF: // global
           R2 = _sfCtd::P64;
           R1 = _sfCto::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMcH: // global
           _sfCt6::P64 = P64[_sfCto::P64 + 7];
           _sfCt9::P64 = P64[_sfCto::P64 + 15];
           I64[Hp - 16] = sat_sfCtl_info;
           P64[Hp - 8] = _sfCt6::P64;
           P64[Hp] = _sfCt9::P64;
           I64[Sp - 8] = block_cfMcB_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCto_info" {
     sat_sfCto_info:
         const sat_sfCto_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufMd8_srtd;
 },
 _cfMcB() //  [R1]
         { []
         }
     {offset
       cfMcB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMcL; else goto cfMcK;
       cfMcL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMcK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMcB_info" {
     block_cfMcB_info:
         const _cfMcB;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMd9_srtd" {
     ufMd9_srtd:
         const SfCR7_srt+264;
         const 59;
         const 432347213495009285;
 },
 sat_sfCtr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMcM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMcN; else goto cfMcO;
       cfMcN: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMcO: // global
           I64[Sp - 24] = block_cfMbP_info;
           _sfCt6::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCt6::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufMd1; else goto cfMbQ;
       ufMd1: // global
           call _cfMbP(R1) args: 0, res: 0, upd: 0;
       cfMbQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtr_info" {
     sat_sfCtr_info:
         const sat_sfCtr_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufMd9_srtd;
 },
 section ""relreadonly" . ufMda_srtd" {
     ufMda_srtd:
         const SfCR7_srt+264;
         const 59;
         const 432347213495009285;
 },
 _cfMbP() //  [R1]
         { []
         }
     {offset
       cfMbP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMcR; else goto cfMcQ;
       cfMcR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMcQ: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfMcT; else goto cfMcX;
       cfMcT: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfMcX: // global
           I64[Hp - 16] = sat_sfCto_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfMcU_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadMax_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMbP_info" {
     block_cfMbP_info:
         const _cfMbP;
         const 2;
         const 18446744069414584350;
         const ufMda_srtd;
 },
 _cfMcU() //  [R1]
         { []
         }
     {offset
       cfMcU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMd0; else goto cfMcZ;
       cfMd0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMcZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMcU_info" {
     block_cfMcU_info:
         const _cfMcU;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMdb_srtd" {
     ufMdb_srtd:
         const SfCR7_srt+264;
         const 60;
         const 1008807965798432789;
 },
 Data.Semigroup.$fReadMax1_entry() //  [R2]
         { []
         }
     {offset
       cfMd2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfMd6; else goto cfMd5;
       cfMd6: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMd5: // global
           I64[Hp - 48] = lvl33_sfCt5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfCt6_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfCtr_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax1_info" {
     Data.Semigroup.$fReadMax1_info:
         const Data.Semigroup.$fReadMax1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMdb_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.259393701 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadsPrec_closure" {
     Data.Semigroup.$fReadMax_$creadsPrec_closure:
         const Data.Semigroup.$fReadMax_$creadsPrec_info;
         const 0;
 },
 ds_sfCtt_entry() //  [R1]
         { []
         }
     {offset
       cfMed: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMee; else goto cfMef;
       cfMee: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMef: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfCtt_info" {
     ds_sfCtt_info:
         const ds_sfCtt_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+736;
 },
 sat_sfCtv_entry() //  [R1]
         { []
         }
     {offset
       cfMep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMeq; else goto cfMer;
       cfMeq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMer: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtv_info" {
     sat_sfCtv_info:
         const sat_sfCtv_entry;
         const 2;
         const 18;
 },
 sat_sfCtw_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMes: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMew; else goto cfMev;
       cfMew: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMev: // global
           _sfCtt::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCtv_info;
           P64[Hp - 8] = _sfCtt::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtw_info" {
     sat_sfCtw_info:
         const sat_sfCtw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadMax_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfMex: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfMeB; else goto cfMeA;
       cfMeB: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMeA: // global
           I64[Hp - 32] = ds_sfCtt_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCtw_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadsPrec_info" {
     Data.Semigroup.$fReadMax_$creadsPrec_info:
         const Data.Semigroup.$fReadMax_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.268659801 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadListPrec_closure" {
     Data.Semigroup.$fReadMax_$creadListPrec_closure:
         const Data.Semigroup.$fReadMax_$creadListPrec_info;
         const 0;
 },
 sat_sfCty_entry() //  [R1]
         { []
         }
     {offset
       cfMf1: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCty_info" {
     sat_sfCty_info:
         const sat_sfCty_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+736;
 },
 section ""relreadonly" . ufMf9_srtd" {
     ufMf9_srtd:
         const SfCR7_srt+320;
         const 55;
         const 22517998136852481;
 },
 Data.Semigroup.$fReadMax_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfMf4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMf8; else goto cfMf7;
       cfMf8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMf7: // global
           I64[Hp - 16] = sat_sfCty_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadListPrec_info" {
     Data.Semigroup.$fReadMax_$creadListPrec_info:
         const Data.Semigroup.$fReadMax_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMf9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.275562762 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadList_closure" {
     Data.Semigroup.$fReadMax_$creadList_closure:
         const Data.Semigroup.$fReadMax_$creadList_info;
         const 0;
 },
 sat_sfCtA_entry() //  [R1]
         { []
         }
     {offset
       cfMfu: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtA_info" {
     sat_sfCtA_info:
         const sat_sfCtA_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+736;
 },
 section ""relreadonly" . ufMfH_srtd" {
     ufMfH_srtd:
         const SfCR7_srt+320;
         const 53;
         const 4503599627370497;
 },
 sat_sfCtB_entry() //  [R1]
         { []
         }
     {offset
       cfMfx: // global
           _sfCtB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfMfy; else goto cfMfz;
       cfMfz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMfB; else goto cfMfA;
       cfMfB: // global
           HpAlloc = 24;
           goto cfMfy;
       cfMfy: // global
           R1 = _sfCtB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMfA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtB::P64;
           _sfCtz::P64 = P64[_sfCtB::P64 + 16];
           I64[Hp - 16] = sat_sfCtA_info;
           P64[Hp] = _sfCtz::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtB_info" {
     sat_sfCtB_info:
         const sat_sfCtB_entry;
         const 1;
         const 18446744069414584336;
         const ufMfH_srtd;
 },
 section ""relreadonly" . ufMfI_srtd" {
     ufMfI_srtd:
         const SfCR7_srt+320;
         const 56;
         const 40532396646334465;
 },
 Data.Semigroup.$fReadMax_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfMfC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMfG; else goto cfMfF;
       cfMfG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMfF: // global
           I64[Hp - 16] = sat_sfCtB_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadList_info" {
     Data.Semigroup.$fReadMax_$creadList_info:
         const Data.Semigroup.$fReadMax_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMfI_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.286173556 UTC

[section ""data" . Data.Semigroup.$fReadMax_closure" {
     Data.Semigroup.$fReadMax_closure:
         const Data.Semigroup.$fReadMax_info;
         const 0;
 },
 sat_sfCtG_entry() //  [R1]
         { []
         }
     {offset
       cfMg4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMg5; else goto cfMg6;
       cfMg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtG_info" {
     sat_sfCtG_info:
         const sat_sfCtG_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+752;
 },
 sat_sfCtF_entry() //  [R1]
         { []
         }
     {offset
       cfMgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMgc; else goto cfMgd;
       cfMgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMgd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtF_info" {
     sat_sfCtF_info:
         const sat_sfCtF_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+736;
 },
 sat_sfCtE_entry() //  [R1]
         { []
         }
     {offset
       cfMgi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMgj; else goto cfMgk;
       cfMgj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMgk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtE_info" {
     sat_sfCtE_info:
         const sat_sfCtE_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+760;
 },
 sat_sfCtD_entry() //  [R1]
         { []
         }
     {offset
       cfMgp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMgq; else goto cfMgr;
       cfMgq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMgr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtD_info" {
     sat_sfCtD_info:
         const sat_sfCtD_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+744;
 },
 Data.Semigroup.$fReadMax_entry() //  [R2]
         { []
         }
     {offset
       cfMgt: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfMgx; else goto cfMgw;
       cfMgx: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMgw: // global
           I64[Hp - 128] = sat_sfCtG_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCtF_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCtE_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCtD_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_info" {
     Data.Semigroup.$fReadMax_info:
         const Data.Semigroup.$fReadMax_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfCR7_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.296205958 UTC

[section ""cstring" . Data.Semigroup.$fShowMax2_bytes" {
     Data.Semigroup.$fShowMax2_bytes:
         I8[] [77,97,120,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.29795531 UTC

[section ""cstring" . Data.Semigroup.$fShowMax1_bytes" {
     Data.Semigroup.$fShowMax1_bytes:
         I8[] [103,101,116,77,97,120,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.305362261 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec3_closure" {
     Data.Semigroup.$w$cshowsPrec3_closure:
         const Data.Semigroup.$w$cshowsPrec3_info;
 },
 f_sfCtK_entry() //  [R1]
         { []
         }
     {offset
       cfMh7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfMh8; else goto cfMh9;
       cfMh8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMh9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCtK_info" {
     f_sfCtK_info:
         const f_sfCtK_entry;
         const 2;
         const 18;
 },
 sat_sfCtN_entry() //  [R1]
         { []
         }
     {offset
       cfMhu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMhv; else goto cfMhw;
       cfMhv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMhw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtN_info" {
     sat_sfCtN_info:
         const sat_sfCtN_entry;
         const 1;
         const 16;
 },
 sat_sfCtO_entry() //  [R1]
         { []
         }
     {offset
       cfMhx: // global
           _sfCtO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMhy; else goto cfMhz;
       cfMhz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMhB; else goto cfMhA;
       cfMhB: // global
           HpAlloc = 24;
           goto cfMhy;
       cfMhy: // global
           R1 = _sfCtO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMhA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtO::P64;
           _sfCtK::P64 = P64[_sfCtO::P64 + 16];
           _sfCtM::P64 = P64[_sfCtO::P64 + 24];
           I64[Hp - 16] = sat_sfCtN_info;
           P64[Hp] = _sfCtM::P64;
           R2 = Hp - 16;
           R1 = _sfCtK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtO_info" {
     sat_sfCtO_info:
         const sat_sfCtO_entry;
         const 2;
         const 18;
 },
 sat_sfCtP_entry() //  [R1]
         { []
         }
     {offset
       cfMhC: // global
           _sfCtP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMhD; else goto cfMhE;
       cfMhE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMhG; else goto cfMhF;
       cfMhG: // global
           HpAlloc = 32;
           goto cfMhD;
       cfMhD: // global
           R1 = _sfCtP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMhF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtP::P64;
           _sfCtK::P64 = P64[_sfCtP::P64 + 16];
           _sfCtM::P64 = P64[_sfCtP::P64 + 24];
           I64[Hp - 24] = sat_sfCtO_info;
           P64[Hp - 8] = _sfCtK::P64;
           P64[Hp] = _sfCtM::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtP_info" {
     sat_sfCtP_info:
         const sat_sfCtP_entry;
         const 2;
         const 18;
 },
 sat_sfCtQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMhH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMhL; else goto cfMhK;
       cfMhL: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMhK: // global
           _sfCtK::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCtP_info;
           P64[Hp - 8] = _sfCtK::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtQ_info" {
     sat_sfCtQ_info:
         const sat_sfCtQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCtT_entry() //  [R1]
         { []
         }
     {offset
       cfMi9: // global
           _sfCtT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMia; else goto cfMib;
       cfMib: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMid; else goto cfMic;
       cfMid: // global
           HpAlloc = 24;
           goto cfMia;
       cfMia: // global
           R1 = _sfCtT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMic: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtT::P64;
           _sfCtR::P64 = P64[_sfCtT::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCtR::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtT_info" {
     sat_sfCtT_info:
         const sat_sfCtT_entry;
         const 1;
         const 16;
 },
 sat_sfCtU_entry() //  [R1]
         { []
         }
     {offset
       cfMie: // global
           _sfCtU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMif; else goto cfMig;
       cfMig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMii; else goto cfMih;
       cfMii: // global
           HpAlloc = 24;
           goto cfMif;
       cfMif: // global
           R1 = _sfCtU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtU::P64;
           _sfCtK::P64 = P64[_sfCtU::P64 + 16];
           _sfCtR::P64 = P64[_sfCtU::P64 + 24];
           I64[Hp - 16] = sat_sfCtT_info;
           P64[Hp] = _sfCtR::P64;
           R2 = Hp - 16;
           R1 = _sfCtK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtU_info" {
     sat_sfCtU_info:
         const sat_sfCtU_entry;
         const 2;
         const 18;
 },
 sat_sfCtV_entry() //  [R1]
         { []
         }
     {offset
       cfMij: // global
           _sfCtV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMik; else goto cfMil;
       cfMil: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMin; else goto cfMim;
       cfMin: // global
           HpAlloc = 32;
           goto cfMik;
       cfMik: // global
           R1 = _sfCtV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMim: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtV::P64;
           _sfCtK::P64 = P64[_sfCtV::P64 + 16];
           _sfCtR::P64 = P64[_sfCtV::P64 + 24];
           I64[Hp - 24] = sat_sfCtU_info;
           P64[Hp - 8] = _sfCtK::P64;
           P64[Hp] = _sfCtR::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtV_info" {
     sat_sfCtV_info:
         const sat_sfCtV_entry;
         const 2;
         const 18;
 },
 sat_sfCtW_entry() //  [R1]
         { []
         }
     {offset
       cfMio: // global
           _sfCtW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMip; else goto cfMiq;
       cfMiq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMis; else goto cfMir;
       cfMis: // global
           HpAlloc = 32;
           goto cfMip;
       cfMip: // global
           R1 = _sfCtW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMir: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCtW::P64;
           _sfCtK::P64 = P64[_sfCtW::P64 + 16];
           _sfCtR::P64 = P64[_sfCtW::P64 + 24];
           I64[Hp - 24] = sat_sfCtV_info;
           P64[Hp - 8] = _sfCtK::P64;
           P64[Hp] = _sfCtR::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCtW_info" {
     sat_sfCtW_info:
         const sat_sfCtW_entry;
         const 2;
         const 18;
 },
 sat_sfCtX_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMiu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfMiy; else goto cfMix;
       cfMiy: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMix: // global
           _sfCtK::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCtW_info;
           P64[Hp - 32] = _sfCtK::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCtX_info" {
     sat_sfCtX_info:
         const sat_sfCtX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMiC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfMiG; else goto cfMiF;
       cfMiG: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMiF: // global
           I64[Hp - 40] = f_sfCtK_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfMh3::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfMiA; else goto cfMiB;
       cfMiA: // global
           I64[Hp - 8] = sat_sfCtQ_info;
           P64[Hp] = _cfMh3::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfMiB: // global
           I64[Hp - 8] = sat_sfCtX_info;
           P64[Hp] = _cfMh3::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec3_info" {
     Data.Semigroup.$w$cshowsPrec3_info:
         const Data.Semigroup.$w$cshowsPrec3_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.328461517 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshowsPrec_closure" {
     Data.Semigroup.$fShowMax_$cshowsPrec_closure:
         const Data.Semigroup.$fShowMax_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowMax_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMjz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMjA; else goto cfMjB;
       cfMjA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMjB: // global
           I64[Sp - 24] = block_cfMjw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufMjF; else goto cfMjx;
       ufMjF: // global
           call _cfMjw(R1) args: 0, res: 0, upd: 0;
       cfMjx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshowsPrec_info" {
     Data.Semigroup.$fShowMax_$cshowsPrec_info:
         const Data.Semigroup.$fShowMax_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfMjw() //  [R1]
         { []
         }
     {offset
       cfMjw: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMjw_info" {
     block_cfMjw_info:
         const _cfMjw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.33459003 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshow_closure" {
     Data.Semigroup.$fShowMax_$cshow_closure:
         const Data.Semigroup.$fShowMax_$cshow_info;
         const 0;
 },
 sat_sfCu5_entry() //  [R1]
         { []
         }
     {offset
       cfMk1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfMk2; else goto cfMk3;
       cfMk2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMk3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCu5_info" {
     sat_sfCu5_info:
         const sat_sfCu5_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 sat_sfCu6_entry() //  [R1]
         { []
         }
     {offset
       cfMk4: // global
           _sfCu6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMk5; else goto cfMk6;
       cfMk6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMk8; else goto cfMk7;
       cfMk8: // global
           HpAlloc = 32;
           goto cfMk5;
       cfMk5: // global
           R1 = _sfCu6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMk7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCu6::P64;
           _sfCu3::P64 = P64[_sfCu6::P64 + 16];
           _sfCu4::P64 = P64[_sfCu6::P64 + 24];
           I64[Hp - 24] = sat_sfCu5_info;
           P64[Hp - 8] = _sfCu3::P64;
           P64[Hp] = _sfCu4::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCu6_info" {
     sat_sfCu6_info:
         const sat_sfCu6_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 Data.Semigroup.$fShowMax_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMk9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMkd; else goto cfMkc;
       cfMkd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMkc: // global
           I64[Hp - 24] = sat_sfCu6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshow_info" {
     Data.Semigroup.$fShowMax_$cshow_info:
         const Data.Semigroup.$fShowMax_$cshow_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const SfCR7_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.342240383 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshowList_closure" {
     Data.Semigroup.$fShowMax_$cshowList_closure:
         const Data.Semigroup.$fShowMax_$cshowList_info;
 },
 sat_sfCub_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMkA: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCub_info" {
     sat_sfCub_info:
         const sat_sfCub_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowMax_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMkD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMkH; else goto cfMkG;
       cfMkH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMkG: // global
           I64[Hp - 8] = sat_sfCub_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshowList_info" {
     Data.Semigroup.$fShowMax_$cshowList_info:
         const Data.Semigroup.$fShowMax_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.348887946 UTC

[section ""data" . Data.Semigroup.$fShowMax_closure" {
     Data.Semigroup.$fShowMax_closure:
         const Data.Semigroup.$fShowMax_info;
         const 0;
 },
 sat_sfCuf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMkY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMax_$cshowList_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCuf_info" {
     sat_sfCuf_info:
         const sat_sfCuf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCue_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMl6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowMax_$cshow_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCue_info" {
     sat_sfCue_info:
         const sat_sfCue_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+776;
 },
 sat_sfCud_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMle: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMax_$cshowsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCud_info" {
     sat_sfCud_info:
         const sat_sfCud_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowMax_entry() //  [R2]
         { []
         }
     {offset
       cfMli: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfMlm; else goto cfMll;
       cfMlm: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMll: // global
           I64[Hp - 72] = sat_sfCuf_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCue_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCud_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_info" {
     Data.Semigroup.$fShowMax_info:
         const Data.Semigroup.$fShowMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.358090594 UTC

[section ""data" . Data.Semigroup.$fEqMax_closure" {
     Data.Semigroup.$fEqMax_closure:
         const Data.Semigroup.$fEqMax_info;
 },
 sat_sfCui_entry() //  [R1]
         { []
         }
     {offset
       cfMlM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMlN; else goto cfMlO;
       cfMlN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMlO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCui_info" {
     sat_sfCui_info:
         const sat_sfCui_entry;
         const 1;
         const 16;
 },
 sat_sfCuh_entry() //  [R1]
         { []
         }
     {offset
       cfMlT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMlU; else goto cfMlV;
       cfMlU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMlV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuh_info" {
     sat_sfCuh_info:
         const sat_sfCuh_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqMax_entry() //  [R2]
         { []
         }
     {offset
       cfMlX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfMm1; else goto cfMm0;
       cfMm1: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMm0: // global
           I64[Hp - 64] = sat_sfCui_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCuh_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqMax_info" {
     Data.Semigroup.$fEqMax_info:
         const Data.Semigroup.$fEqMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.367368863 UTC

[section ""data" . Data.Semigroup.$fOrdMax_$cp1Ord_closure" {
     Data.Semigroup.$fOrdMax_$cp1Ord_closure:
         const Data.Semigroup.$fOrdMax_$cp1Ord_info;
 },
 sat_sfCuk_entry() //  [R1]
         { []
         }
     {offset
       cfMmp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMmq; else goto cfMmr;
       cfMmq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMmr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuk_info" {
     sat_sfCuk_info:
         const sat_sfCuk_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMax_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfMms: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMmw; else goto cfMmv;
       cfMmw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMax_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMmv: // global
           I64[Hp - 16] = sat_sfCuk_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqMax_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMax_$cp1Ord_info" {
     Data.Semigroup.$fOrdMax_$cp1Ord_info:
         const Data.Semigroup.$fOrdMax_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.37638664 UTC

[section ""data" . Data.Semigroup.$fOrdMax_closure" {
     Data.Semigroup.$fOrdMax_closure:
         const Data.Semigroup.$fOrdMax_info;
 },
 sat_sfCut_entry() //  [R1]
         { []
         }
     {offset
       cfMmN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMmO; else goto cfMmP;
       cfMmO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMmP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCut_info" {
     sat_sfCut_info:
         const sat_sfCut_entry;
         const 1;
         const 16;
 },
 sat_sfCus_entry() //  [R1]
         { []
         }
     {offset
       cfMmU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMmV; else goto cfMmW;
       cfMmV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMmW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCus_info" {
     sat_sfCus_info:
         const sat_sfCus_entry;
         const 1;
         const 16;
 },
 sat_sfCur_entry() //  [R1]
         { []
         }
     {offset
       cfMn1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMn2; else goto cfMn3;
       cfMn2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMn3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCur_info" {
     sat_sfCur_info:
         const sat_sfCur_entry;
         const 1;
         const 16;
 },
 sat_sfCuq_entry() //  [R1]
         { []
         }
     {offset
       cfMn8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMn9; else goto cfMna;
       cfMn9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMna: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuq_info" {
     sat_sfCuq_info:
         const sat_sfCuq_entry;
         const 1;
         const 16;
 },
 sat_sfCup_entry() //  [R1]
         { []
         }
     {offset
       cfMnf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMng; else goto cfMnh;
       cfMng: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMnh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCup_info" {
     sat_sfCup_info:
         const sat_sfCup_entry;
         const 1;
         const 16;
 },
 sat_sfCuo_entry() //  [R1]
         { []
         }
     {offset
       cfMnm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMnn; else goto cfMno;
       cfMnn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMno: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuo_info" {
     sat_sfCuo_info:
         const sat_sfCuo_entry;
         const 1;
         const 16;
 },
 sat_sfCun_entry() //  [R1]
         { []
         }
     {offset
       cfMnt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMnu; else goto cfMnv;
       cfMnu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMnv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCun_info" {
     sat_sfCun_info:
         const sat_sfCun_entry;
         const 1;
         const 16;
 },
 sat_sfCum_entry() //  [R1]
         { []
         }
     {offset
       cfMnA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMnB; else goto cfMnC;
       cfMnB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMnC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdMax_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCum_info" {
     sat_sfCum_info:
         const sat_sfCum_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMax_entry() //  [R2]
         { []
         }
     {offset
       cfMnE: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfMnI; else goto cfMnH;
       cfMnI: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMnH: // global
           I64[Hp - 256] = sat_sfCut_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfCus_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCur_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCuq_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCup_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCuo_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCun_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCum_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMax_info" {
     Data.Semigroup.$fOrdMax_info:
         const Data.Semigroup.$fOrdMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.396065675 UTC

[section ""data" . Data.Semigroup.$fBoundedMax_closure" {
     Data.Semigroup.$fBoundedMax_closure:
         const Data.Semigroup.$fBoundedMax_info;
 },
 sat_sfCuw_entry() //  [R1]
         { []
         }
     {offset
       cfMoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMoB; else goto cfMoC;
       cfMoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuw_info" {
     sat_sfCuw_info:
         const sat_sfCuw_entry;
         const 1;
         const 16;
 },
 sat_sfCuv_entry() //  [R1]
         { []
         }
     {offset
       cfMoH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMoI; else goto cfMoJ;
       cfMoI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMoJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuv_info" {
     sat_sfCuv_info:
         const sat_sfCuv_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedMax_entry() //  [R2]
         { []
         }
     {offset
       cfMoL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfMoP; else goto cfMoO;
       cfMoP: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMoO: // global
           I64[Hp - 64] = sat_sfCuw_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCuv_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedMax_info" {
     Data.Semigroup.$fBoundedMax_info:
         const Data.Semigroup.$fBoundedMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.406391166 UTC

[section ""data" . Data.Semigroup.$fMonoidMax_$cmconcat_closure" {
     Data.Semigroup.$fMonoidMax_$cmconcat_closure:
         const Data.Semigroup.$fMonoidMax_$cmconcat_info;
 },
 z_sfCuA_entry() //  [R1]
         { []
         }
     {offset
       cfMpd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMpe; else goto cfMpf;
       cfMpe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMpf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfCuA_info" {
     z_sfCuA_info:
         const z_sfCuA_entry;
         const 1;
         const 16;
 },
 go_sfCuB_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMps: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMpt; else goto cfMpu;
       cfMpt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMpu: // global
           I64[Sp - 32] = block_cfMpl_info;
           _sfCuB::P64 = R1;
           _sfCux::P64 = P64[R1 + 7];
           _sfCuA::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfCux::P64;
           P64[Sp - 16] = _sfCuA::P64;
           P64[Sp - 8] = _sfCuB::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufMpE; else goto cfMpm;
       ufMpE: // global
           call _cfMpl(R1) args: 0, res: 0, upd: 0;
       cfMpm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfCuB_info" {
     go_sfCuB_info:
         const go_sfCuB_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfMpl() //  [R1]
         { []
         }
     {offset
       cfMpl: // global
           if (R1 & 7 == 1) goto cfMpp; else goto cfMpq;
       cfMpp: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfMpq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMpC; else goto cfMpB;
       cfMpC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMpB: // global
           _sfCuE::P64 = P64[R1 + 6];
           _sfCuF::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfCuF::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfCuE::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Classes.max_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMpl_info" {
     block_cfMpl_info:
         const _cfMpl;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidMax_$cmconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMpF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfMpJ; else goto cfMpI;
       cfMpJ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMax_$cmconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMpI: // global
           I64[Hp - 40] = z_sfCuA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = go_sfCuB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R4;
           R1 = Hp - 15;
           call go_sfCuB_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMax_$cmconcat_info" {
     Data.Semigroup.$fMonoidMax_$cmconcat_info:
         const Data.Semigroup.$fMonoidMax_$cmconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.416779368 UTC

[section ""data" . Data.Semigroup.$fMonoidMax_closure" {
     Data.Semigroup.$fMonoidMax_closure:
         const Data.Semigroup.$fMonoidMax_info;
         const 0;
 },
 sat_sfCuM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMqe: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidMax_$cmconcat_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCuM_info" {
     sat_sfCuM_info:
         const sat_sfCuM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCuL_entry() //  [R1]
         { []
         }
     {offset
       cfMql: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMqm; else goto cfMqn;
       cfMqm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMqn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuL_info" {
     sat_sfCuL_info:
         const sat_sfCuL_entry;
         const 1;
         const 16;
 },
 sat_sfCuK_entry() //  [R1]
         { []
         }
     {offset
       cfMqs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMqt; else goto cfMqu;
       cfMqt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMqu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuK_info" {
     sat_sfCuK_info:
         const sat_sfCuK_entry;
         const 1;
         const 16;
 },
 sat_sfCuJ_entry() //  [R1]
         { []
         }
     {offset
       cfMqz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMqA; else goto cfMqB;
       cfMqA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMqB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuJ_info" {
     sat_sfCuJ_info:
         const sat_sfCuJ_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+792;
 },
 Data.Semigroup.$fMonoidMax_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMqD: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfMqH; else goto cfMqG;
       cfMqH: // global
           HpAlloc = 136;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMqG: // global
           I64[Hp - 128] = sat_sfCuM_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sfCuL_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCuK_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfCuJ_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 127;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMax_info" {
     Data.Semigroup.$fMonoidMax_info:
         const Data.Semigroup.$fMonoidMax_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.427190042 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min1_closure" {
     Data.Semigroup.$fGeneric1Min1_closure:
         const Data.Semigroup.$fGeneric1Min1_info;
 },
 Data.Semigroup.$fGeneric1Min1_entry() //  [R2]
         { []
         }
     {offset
       cfMra: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Min1_info" {
     Data.Semigroup.$fGeneric1Min1_info:
         const Data.Semigroup.$fGeneric1Min1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.430515787 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min2_closure" {
     Data.Semigroup.$fGeneric1Min2_closure:
         const Data.Semigroup.$fGeneric1Min2_info;
 },
 Data.Semigroup.$fGeneric1Min2_entry() //  [R2]
         { []
         }
     {offset
       cfMrl: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Min2_info" {
     Data.Semigroup.$fGeneric1Min2_info:
         const Data.Semigroup.$fGeneric1Min2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.433707851 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min_closure" {
     Data.Semigroup.$fGeneric1Min_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Min2_closure+1;
         const Data.Semigroup.$fGeneric1Min1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.435713557 UTC

[section ""data" . Data.Semigroup.$fGenericMin1_closure" {
     Data.Semigroup.$fGenericMin1_closure:
         const Data.Semigroup.$fGenericMin1_info;
 },
 Data.Semigroup.$fGenericMin1_entry() //  [R2]
         { []
         }
     {offset
       cfMrx: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMin1_info" {
     Data.Semigroup.$fGenericMin1_info:
         const Data.Semigroup.$fGenericMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.439714269 UTC

[section ""data" . Data.Semigroup.$fGenericMin2_closure" {
     Data.Semigroup.$fGenericMin2_closure:
         const Data.Semigroup.$fGenericMin2_info;
 },
 Data.Semigroup.$fGenericMin2_entry() //  [R2]
         { []
         }
     {offset
       cfMrI: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMin2_info" {
     Data.Semigroup.$fGenericMin2_info:
         const Data.Semigroup.$fGenericMin2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.442726426 UTC

[section ""data" . Data.Semigroup.$fGenericMin_closure" {
     Data.Semigroup.$fGenericMin_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericMin2_closure+1;
         const Data.Semigroup.$fGenericMin1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.446124971 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgfoldl_closure" {
     Data.Semigroup.$fDataMin_$cgfoldl_closure:
         const Data.Semigroup.$fDataMin_$cgfoldl_info;
 },
 sat_sfCuV_entry() //  [R1]
         { []
         }
     {offset
       cfMrY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMrZ; else goto cfMs0;
       cfMrZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMs0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCuV_info" {
     sat_sfCuV_info:
         const sat_sfCuV_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMin_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfMs1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMs5; else goto cfMs4;
       cfMs5: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMs4: // global
           I64[Hp - 16] = sat_sfCuV_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfCuS::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfCuS::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgfoldl_info" {
     Data.Semigroup.$fDataMin_$cgfoldl_info:
         const Data.Semigroup.$fDataMin_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.451122433 UTC

[section ""cstring" . Data.Semigroup.$fDataMin4_bytes" {
     Data.Semigroup.$fDataMin4_bytes:
         I8[] [77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.453400769 UTC

[section ""data" . Data.Semigroup.$fDataMin7_closure" {
     Data.Semigroup.$fDataMin7_closure:
         const Data.Semigroup.$fDataMin7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMin7_entry() //  [R1]
         { []
         }
     {offset
       cfMsl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMsm; else goto cfMsn;
       cfMsm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMsn: // global
           (_cfMsi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfMsi::I64 == 0) goto cfMsk; else goto cfMsj;
       cfMsk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfMsj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfMsi::I64;
           R2 = Data.Semigroup.$fDataMin4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin7_info" {
     Data.Semigroup.$fDataMin7_info:
         const Data.Semigroup.$fDataMin7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.457013482 UTC

[section ""data" . Data.Semigroup.$fReadMin_lexeme_closure" {
     Data.Semigroup.$fReadMin_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataMin7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.458744303 UTC

[section ""cstring" . Data.Semigroup.$fReadMin3_bytes" {
     Data.Semigroup.$fReadMin3_bytes:
         I8[] [103,101,116,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.460991258 UTC

[section ""data" . Data.Semigroup.$fReadMin2_closure" {
     Data.Semigroup.$fReadMin2_closure:
         const Data.Semigroup.$fReadMin2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadMin2_entry() //  [R1]
         { []
         }
     {offset
       cfMsD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMsE; else goto cfMsF;
       cfMsE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMsF: // global
           (_cfMsA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfMsA::I64 == 0) goto cfMsC; else goto cfMsB;
       cfMsC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfMsB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfMsA::I64;
           R2 = Data.Semigroup.$fReadMin3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin2_info" {
     Data.Semigroup.$fReadMin2_info:
         const Data.Semigroup.$fReadMin2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.469980502 UTC

[section ""data" . Data.Semigroup.$fReadMin1_closure" {
     Data.Semigroup.$fReadMin1_closure:
         const Data.Semigroup.$fReadMin1_info;
         const 0;
 },
 lvl33_sfCuX_entry() //  [R1]
         { []
         }
     {offset
       cfMsV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMsW; else goto cfMsX;
       cfMsW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMsX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCuX_info" {
     lvl33_sfCuX_info:
         const lvl33_sfCuX_entry;
         const 1;
         const 16;
 },
 ds_sfCuY_entry() //  [R1]
         { []
         }
     {offset
       cfMt3: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfCuY_info" {
     ds_sfCuY_info:
         const ds_sfCuY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCv9_entry() //  [R1]
         { []
         }
     {offset
       cfMtE: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCv9_info" {
     sat_sfCv9_info:
         const sat_sfCv9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCvc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMtK: // global
           _sfCv7::P64 = R2;
           _sfCvc::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfMtL; else goto cfMtM;
       cfMtM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMtO; else goto cfMtN;
       cfMtO: // global
           HpAlloc = 24;
           goto cfMtL;
       cfMtL: // global
           R2 = _sfCv7::P64;
           R1 = _sfCvc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMtN: // global
           _sfCv1::P64 = P64[_sfCvc::P64 + 7];
           I64[Hp - 16] = sat_sfCv9_info;
           P64[Hp - 8] = _sfCv1::P64;
           P64[Hp] = _sfCv7::P64;
           I64[Sp - 8] = block_cfMtH_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvc_info" {
     sat_sfCvc_info:
         const sat_sfCvc_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfCR7_srt+576;
 },
 _cfMtH() //  [R1]
         { []
         }
     {offset
       cfMtH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMtR; else goto cfMtQ;
       cfMtR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMtQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMtH_info" {
     block_cfMtH_info:
         const _cfMtH;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMut_srtd" {
     ufMut_srtd:
         const SfCR7_srt+264;
         const 69;
         const 1649267441665;
         const 16;
 },
 sat_sfCvd_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMtS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMtW; else goto cfMtV;
       cfMtW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMtV: // global
           _sfCuY::P64 = P64[R1 + 7];
           _sfCv1::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfCvc_info;
           P64[Hp] = _sfCv1::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfCuY::P64;
           R2 = Data.Semigroup.$fReadMin2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvd_info" {
     sat_sfCvd_info:
         const sat_sfCvd_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufMut_srtd;
 },
 section ""relreadonly" . ufMuu_srtd" {
     ufMuu_srtd:
         const SfCR7_srt+264;
         const 69;
         const 1649267441669;
         const 16;
 },
 sat_sfCvg_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMu0: // global
           _sfCv5::P64 = R2;
           _sfCvg::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfMu1; else goto cfMu2;
       cfMu2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMu4; else goto cfMu3;
       cfMu4: // global
           HpAlloc = 24;
           goto cfMu1;
       cfMu1: // global
           R2 = _sfCv5::P64;
           R1 = _sfCvg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMu3: // global
           _sfCuY::P64 = P64[_sfCvg::P64 + 7];
           _sfCv1::P64 = P64[_sfCvg::P64 + 15];
           I64[Hp - 16] = sat_sfCvd_info;
           P64[Hp - 8] = _sfCuY::P64;
           P64[Hp] = _sfCv1::P64;
           I64[Sp - 8] = block_cfMtX_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvg_info" {
     sat_sfCvg_info:
         const sat_sfCvg_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufMuu_srtd;
 },
 _cfMtX() //  [R1]
         { []
         }
     {offset
       cfMtX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMu7; else goto cfMu6;
       cfMu7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMu6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMtX_info" {
     block_cfMtX_info:
         const _cfMtX;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMuv_srtd" {
     ufMuv_srtd:
         const SfCR7_srt+264;
         const 70;
         const 1649267441669;
         const 48;
 },
 sat_sfCvj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMu8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMu9; else goto cfMua;
       cfMu9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMua: // global
           I64[Sp - 24] = block_cfMtb_info;
           _sfCuY::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfCuY::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufMun; else goto cfMtc;
       ufMun: // global
           call _cfMtb(R1) args: 0, res: 0, upd: 0;
       cfMtc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvj_info" {
     sat_sfCvj_info:
         const sat_sfCvj_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufMuv_srtd;
 },
 section ""relreadonly" . ufMuw_srtd" {
     ufMuw_srtd:
         const SfCR7_srt+264;
         const 70;
         const 1649267441669;
         const 48;
 },
 _cfMtb() //  [R1]
         { []
         }
     {offset
       cfMtb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMud; else goto cfMuc;
       cfMud: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMuc: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfMuf; else goto cfMuj;
       cfMuf: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfMuj: // global
           I64[Hp - 16] = sat_sfCvg_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfMug_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadMin_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMtb_info" {
     block_cfMtb_info:
         const _cfMtb;
         const 2;
         const 18446744069414584350;
         const ufMuw_srtd;
 },
 _cfMug() //  [R1]
         { []
         }
     {offset
       cfMug: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMum; else goto cfMul;
       cfMum: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMul: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMug_info" {
     block_cfMug_info:
         const _cfMug;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufMux_srtd" {
     ufMux_srtd:
         const SfCR7_srt+264;
         const 71;
         const 1649267441685;
         const 112;
 },
 Data.Semigroup.$fReadMin1_entry() //  [R2]
         { []
         }
     {offset
       cfMuo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfMus; else goto cfMur;
       cfMus: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMur: // global
           I64[Hp - 48] = lvl33_sfCuX_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfCuY_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfCvj_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin1_info" {
     Data.Semigroup.$fReadMin1_info:
         const Data.Semigroup.$fReadMin1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMux_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.497790887 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadsPrec_closure" {
     Data.Semigroup.$fReadMin_$creadsPrec_closure:
         const Data.Semigroup.$fReadMin_$creadsPrec_info;
         const 0;
 },
 ds_sfCvl_entry() //  [R1]
         { []
         }
     {offset
       cfMvz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMvA; else goto cfMvB;
       cfMvA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMvB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfCvl_info" {
     ds_sfCvl_info:
         const ds_sfCvl_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+824;
 },
 sat_sfCvn_entry() //  [R1]
         { []
         }
     {offset
       cfMvL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMvM; else goto cfMvN;
       cfMvM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMvN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvn_info" {
     sat_sfCvn_info:
         const sat_sfCvn_entry;
         const 2;
         const 18;
 },
 sat_sfCvo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMvO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMvS; else goto cfMvR;
       cfMvS: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMvR: // global
           _sfCvl::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCvn_info;
           P64[Hp - 8] = _sfCvl::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvo_info" {
     sat_sfCvo_info:
         const sat_sfCvo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadMin_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfMvT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfMvX; else goto cfMvW;
       cfMvX: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMvW: // global
           I64[Hp - 32] = ds_sfCvl_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfCvo_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadsPrec_info" {
     Data.Semigroup.$fReadMin_$creadsPrec_info:
         const Data.Semigroup.$fReadMin_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.506583165 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadListPrec_closure" {
     Data.Semigroup.$fReadMin_$creadListPrec_closure:
         const Data.Semigroup.$fReadMin_$creadListPrec_info;
         const 0;
 },
 sat_sfCvq_entry() //  [R1]
         { []
         }
     {offset
       cfMwn: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvq_info" {
     sat_sfCvq_info:
         const sat_sfCvq_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+824;
 },
 section ""relreadonly" . ufMwv_srtd" {
     ufMwv_srtd:
         const SfCR7_srt+320;
         const 66;
         const 9223372036854775809;
         const 2;
 },
 Data.Semigroup.$fReadMin_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfMwq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMwu; else goto cfMwt;
       cfMwu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMwt: // global
           I64[Hp - 16] = sat_sfCvq_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadListPrec_info" {
     Data.Semigroup.$fReadMin_$creadListPrec_info:
         const Data.Semigroup.$fReadMin_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMwv_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.514128346 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadList_closure" {
     Data.Semigroup.$fReadMin_$creadList_closure:
         const Data.Semigroup.$fReadMin_$creadList_info;
         const 0;
 },
 sat_sfCvs_entry() //  [R1]
         { []
         }
     {offset
       cfMwQ: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvs_info" {
     sat_sfCvs_info:
         const sat_sfCvs_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+824;
 },
 section ""relreadonly" . ufMx3_srtd" {
     ufMx3_srtd:
         const SfCR7_srt+320;
         const 64;
         const 9223372036854775809;
 },
 sat_sfCvt_entry() //  [R1]
         { []
         }
     {offset
       cfMwT: // global
           _sfCvt::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfMwU; else goto cfMwV;
       cfMwV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMwX; else goto cfMwW;
       cfMwX: // global
           HpAlloc = 24;
           goto cfMwU;
       cfMwU: // global
           R1 = _sfCvt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMwW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvt::P64;
           _sfCvr::P64 = P64[_sfCvt::P64 + 16];
           I64[Hp - 16] = sat_sfCvs_info;
           P64[Hp] = _sfCvr::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvt_info" {
     sat_sfCvt_info:
         const sat_sfCvt_entry;
         const 1;
         const 18446744069414584336;
         const ufMx3_srtd;
 },
 section ""relreadonly" . ufMx4_srtd" {
     ufMx4_srtd:
         const SfCR7_srt+320;
         const 67;
         const 9223372036854775809;
         const 4;
 },
 Data.Semigroup.$fReadMin_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfMwY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMx2; else goto cfMx1;
       cfMx2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMx1: // global
           I64[Hp - 16] = sat_sfCvt_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadList_info" {
     Data.Semigroup.$fReadMin_$creadList_info:
         const Data.Semigroup.$fReadMin_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufMx4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.523763787 UTC

[section ""data" . Data.Semigroup.$fReadMin_closure" {
     Data.Semigroup.$fReadMin_closure:
         const Data.Semigroup.$fReadMin_info;
         const 0;
 },
 sat_sfCvy_entry() //  [R1]
         { []
         }
     {offset
       cfMxq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMxr; else goto cfMxs;
       cfMxr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMxs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvy_info" {
     sat_sfCvy_info:
         const sat_sfCvy_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+840;
 },
 sat_sfCvx_entry() //  [R1]
         { []
         }
     {offset
       cfMxx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMxy; else goto cfMxz;
       cfMxy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMxz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvx_info" {
     sat_sfCvx_info:
         const sat_sfCvx_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+824;
 },
 sat_sfCvw_entry() //  [R1]
         { []
         }
     {offset
       cfMxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMxF; else goto cfMxG;
       cfMxF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMxG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvw_info" {
     sat_sfCvw_info:
         const sat_sfCvw_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+848;
 },
 sat_sfCvv_entry() //  [R1]
         { []
         }
     {offset
       cfMxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMxM; else goto cfMxN;
       cfMxM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMxN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvv_info" {
     sat_sfCvv_info:
         const sat_sfCvv_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+832;
 },
 Data.Semigroup.$fReadMin_entry() //  [R2]
         { []
         }
     {offset
       cfMxP: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfMxT; else goto cfMxS;
       cfMxT: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMxS: // global
           I64[Hp - 128] = sat_sfCvy_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfCvx_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCvw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCvv_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_info" {
     Data.Semigroup.$fReadMin_info:
         const Data.Semigroup.$fReadMin_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfCR7_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.533808984 UTC

[section ""cstring" . Data.Semigroup.$fShowMin2_bytes" {
     Data.Semigroup.$fShowMin2_bytes:
         I8[] [77,105,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.535527475 UTC

[section ""cstring" . Data.Semigroup.$fShowMin1_bytes" {
     Data.Semigroup.$fShowMin1_bytes:
         I8[] [103,101,116,77,105,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.543035175 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec4_closure" {
     Data.Semigroup.$w$cshowsPrec4_closure:
         const Data.Semigroup.$w$cshowsPrec4_info;
 },
 f_sfCvC_entry() //  [R1]
         { []
         }
     {offset
       cfMyt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfMyu; else goto cfMyv;
       cfMyu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMyv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfCvC_info" {
     f_sfCvC_info:
         const f_sfCvC_entry;
         const 2;
         const 18;
 },
 sat_sfCvF_entry() //  [R1]
         { []
         }
     {offset
       cfMyQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMyR; else goto cfMyS;
       cfMyR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMyS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvF_info" {
     sat_sfCvF_info:
         const sat_sfCvF_entry;
         const 1;
         const 16;
 },
 sat_sfCvG_entry() //  [R1]
         { []
         }
     {offset
       cfMyT: // global
           _sfCvG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMyU; else goto cfMyV;
       cfMyV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMyX; else goto cfMyW;
       cfMyX: // global
           HpAlloc = 24;
           goto cfMyU;
       cfMyU: // global
           R1 = _sfCvG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMyW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvG::P64;
           _sfCvC::P64 = P64[_sfCvG::P64 + 16];
           _sfCvE::P64 = P64[_sfCvG::P64 + 24];
           I64[Hp - 16] = sat_sfCvF_info;
           P64[Hp] = _sfCvE::P64;
           R2 = Hp - 16;
           R1 = _sfCvC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvG_info" {
     sat_sfCvG_info:
         const sat_sfCvG_entry;
         const 2;
         const 18;
 },
 sat_sfCvH_entry() //  [R1]
         { []
         }
     {offset
       cfMyY: // global
           _sfCvH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMyZ; else goto cfMz0;
       cfMz0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMz2; else goto cfMz1;
       cfMz2: // global
           HpAlloc = 32;
           goto cfMyZ;
       cfMyZ: // global
           R1 = _sfCvH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMz1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvH::P64;
           _sfCvC::P64 = P64[_sfCvH::P64 + 16];
           _sfCvE::P64 = P64[_sfCvH::P64 + 24];
           I64[Hp - 24] = sat_sfCvG_info;
           P64[Hp - 8] = _sfCvC::P64;
           P64[Hp] = _sfCvE::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvH_info" {
     sat_sfCvH_info:
         const sat_sfCvH_entry;
         const 2;
         const 18;
 },
 sat_sfCvI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMz3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMz7; else goto cfMz6;
       cfMz7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMz6: // global
           _sfCvC::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfCvH_info;
           P64[Hp - 8] = _sfCvC::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvI_info" {
     sat_sfCvI_info:
         const sat_sfCvI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCvL_entry() //  [R1]
         { []
         }
     {offset
       cfMzv: // global
           _sfCvL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMzw; else goto cfMzx;
       cfMzx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMzz; else goto cfMzy;
       cfMzz: // global
           HpAlloc = 24;
           goto cfMzw;
       cfMzw: // global
           R1 = _sfCvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvL::P64;
           _sfCvJ::P64 = P64[_sfCvL::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfCvJ::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvL_info" {
     sat_sfCvL_info:
         const sat_sfCvL_entry;
         const 1;
         const 16;
 },
 sat_sfCvM_entry() //  [R1]
         { []
         }
     {offset
       cfMzA: // global
           _sfCvM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMzB; else goto cfMzC;
       cfMzC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMzE; else goto cfMzD;
       cfMzE: // global
           HpAlloc = 24;
           goto cfMzB;
       cfMzB: // global
           R1 = _sfCvM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMzD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvM::P64;
           _sfCvC::P64 = P64[_sfCvM::P64 + 16];
           _sfCvJ::P64 = P64[_sfCvM::P64 + 24];
           I64[Hp - 16] = sat_sfCvL_info;
           P64[Hp] = _sfCvJ::P64;
           R2 = Hp - 16;
           R1 = _sfCvC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvM_info" {
     sat_sfCvM_info:
         const sat_sfCvM_entry;
         const 2;
         const 18;
 },
 sat_sfCvN_entry() //  [R1]
         { []
         }
     {offset
       cfMzF: // global
           _sfCvN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMzG; else goto cfMzH;
       cfMzH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMzJ; else goto cfMzI;
       cfMzJ: // global
           HpAlloc = 32;
           goto cfMzG;
       cfMzG: // global
           R1 = _sfCvN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMzI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvN::P64;
           _sfCvC::P64 = P64[_sfCvN::P64 + 16];
           _sfCvJ::P64 = P64[_sfCvN::P64 + 24];
           I64[Hp - 24] = sat_sfCvM_info;
           P64[Hp - 8] = _sfCvC::P64;
           P64[Hp] = _sfCvJ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvN_info" {
     sat_sfCvN_info:
         const sat_sfCvN_entry;
         const 2;
         const 18;
 },
 sat_sfCvO_entry() //  [R1]
         { []
         }
     {offset
       cfMzK: // global
           _sfCvO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMzL; else goto cfMzM;
       cfMzM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMzO; else goto cfMzN;
       cfMzO: // global
           HpAlloc = 32;
           goto cfMzL;
       cfMzL: // global
           R1 = _sfCvO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvO::P64;
           _sfCvC::P64 = P64[_sfCvO::P64 + 16];
           _sfCvJ::P64 = P64[_sfCvO::P64 + 24];
           I64[Hp - 24] = sat_sfCvN_info;
           P64[Hp - 8] = _sfCvC::P64;
           P64[Hp] = _sfCvJ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvO_info" {
     sat_sfCvO_info:
         const sat_sfCvO_entry;
         const 2;
         const 18;
 },
 sat_sfCvP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMzQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfMzU; else goto cfMzT;
       cfMzU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMzT: // global
           _sfCvC::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfCvO_info;
           P64[Hp - 32] = _sfCvC::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCvP_info" {
     sat_sfCvP_info:
         const sat_sfCvP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMzY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfMA2; else goto cfMA1;
       cfMA2: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMA1: // global
           I64[Hp - 40] = f_sfCvC_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfMyp::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfMzW; else goto cfMzX;
       cfMzW: // global
           I64[Hp - 8] = sat_sfCvI_info;
           P64[Hp] = _cfMyp::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfMzX: // global
           I64[Hp - 8] = sat_sfCvP_info;
           P64[Hp] = _cfMyp::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec4_info" {
     Data.Semigroup.$w$cshowsPrec4_info:
         const Data.Semigroup.$w$cshowsPrec4_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.566820862 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshowsPrec_closure" {
     Data.Semigroup.$fShowMin_$cshowsPrec_closure:
         const Data.Semigroup.$fShowMin_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowMin_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMAV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMAW; else goto cfMAX;
       cfMAW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMAX: // global
           I64[Sp - 24] = block_cfMAS_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufMB1; else goto cfMAT;
       ufMB1: // global
           call _cfMAS(R1) args: 0, res: 0, upd: 0;
       cfMAT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshowsPrec_info" {
     Data.Semigroup.$fShowMin_$cshowsPrec_info:
         const Data.Semigroup.$fShowMin_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfMAS() //  [R1]
         { []
         }
     {offset
       cfMAS: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMAS_info" {
     block_cfMAS_info:
         const _cfMAS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.573106818 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshow_closure" {
     Data.Semigroup.$fShowMin_$cshow_closure:
         const Data.Semigroup.$fShowMin_$cshow_info;
         const 0;
 },
 sat_sfCvX_entry() //  [R1]
         { []
         }
     {offset
       cfMBn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfMBo; else goto cfMBp;
       cfMBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvX_info" {
     sat_sfCvX_info:
         const sat_sfCvX_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 sat_sfCvY_entry() //  [R1]
         { []
         }
     {offset
       cfMBq: // global
           _sfCvY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMBr; else goto cfMBs;
       cfMBs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMBu; else goto cfMBt;
       cfMBu: // global
           HpAlloc = 32;
           goto cfMBr;
       cfMBr: // global
           R1 = _sfCvY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMBt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCvY::P64;
           _sfCvV::P64 = P64[_sfCvY::P64 + 16];
           _sfCvW::P64 = P64[_sfCvY::P64 + 24];
           I64[Hp - 24] = sat_sfCvX_info;
           P64[Hp - 8] = _sfCvV::P64;
           P64[Hp] = _sfCvW::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCvY_info" {
     sat_sfCvY_info:
         const sat_sfCvY_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+648;
 },
 Data.Semigroup.$fShowMin_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMBv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMBz; else goto cfMBy;
       cfMBz: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMBy: // global
           I64[Hp - 24] = sat_sfCvY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshow_info" {
     Data.Semigroup.$fShowMin_$cshow_info:
         const Data.Semigroup.$fShowMin_$cshow_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const SfCR7_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.580878328 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshowList_closure" {
     Data.Semigroup.$fShowMin_$cshowList_closure:
         const Data.Semigroup.$fShowMin_$cshowList_info;
 },
 sat_sfCw3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMBW: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCw3_info" {
     sat_sfCw3_info:
         const sat_sfCw3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowMin_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMBZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfMC3; else goto cfMC2;
       cfMC3: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMC2: // global
           I64[Hp - 8] = sat_sfCw3_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshowList_info" {
     Data.Semigroup.$fShowMin_$cshowList_info:
         const Data.Semigroup.$fShowMin_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.58710247 UTC

[section ""data" . Data.Semigroup.$fShowMin_closure" {
     Data.Semigroup.$fShowMin_closure:
         const Data.Semigroup.$fShowMin_info;
         const 0;
 },
 sat_sfCw7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMCk: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMin_$cshowList_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCw7_info" {
     sat_sfCw7_info:
         const sat_sfCw7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCw6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMCs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowMin_$cshow_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCw6_info" {
     sat_sfCw6_info:
         const sat_sfCw6_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+864;
 },
 sat_sfCw5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMCA: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMin_$cshowsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCw5_info" {
     sat_sfCw5_info:
         const sat_sfCw5_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowMin_entry() //  [R2]
         { []
         }
     {offset
       cfMCE: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfMCI; else goto cfMCH;
       cfMCI: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMCH: // global
           I64[Hp - 72] = sat_sfCw7_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfCw6_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCw5_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_info" {
     Data.Semigroup.$fShowMin_info:
         const Data.Semigroup.$fShowMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.597372479 UTC

[section ""data" . Data.Semigroup.$fEqMin_closure" {
     Data.Semigroup.$fEqMin_closure:
         const Data.Semigroup.$fEqMin_info;
 },
 sat_sfCwa_entry() //  [R1]
         { []
         }
     {offset
       cfMD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMD9; else goto cfMDa;
       cfMD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwa_info" {
     sat_sfCwa_info:
         const sat_sfCwa_entry;
         const 1;
         const 16;
 },
 sat_sfCw9_entry() //  [R1]
         { []
         }
     {offset
       cfMDf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMDg; else goto cfMDh;
       cfMDg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCw9_info" {
     sat_sfCw9_info:
         const sat_sfCw9_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqMin_entry() //  [R2]
         { []
         }
     {offset
       cfMDj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfMDn; else goto cfMDm;
       cfMDn: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMDm: // global
           I64[Hp - 64] = sat_sfCwa_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCw9_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqMin_info" {
     Data.Semigroup.$fEqMin_info:
         const Data.Semigroup.$fEqMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.604598839 UTC

[section ""data" . Data.Semigroup.$fOrdMin_$cp1Ord_closure" {
     Data.Semigroup.$fOrdMin_$cp1Ord_closure:
         const Data.Semigroup.$fOrdMin_$cp1Ord_info;
 },
 sat_sfCwc_entry() //  [R1]
         { []
         }
     {offset
       cfMDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMDM; else goto cfMDN;
       cfMDM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMDN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwc_info" {
     sat_sfCwc_info:
         const sat_sfCwc_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMin_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfMDO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMDS; else goto cfMDR;
       cfMDS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMin_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMDR: // global
           I64[Hp - 16] = sat_sfCwc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqMin_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMin_$cp1Ord_info" {
     Data.Semigroup.$fOrdMin_$cp1Ord_info:
         const Data.Semigroup.$fOrdMin_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.61303241 UTC

[section ""data" . Data.Semigroup.$fOrdMin_closure" {
     Data.Semigroup.$fOrdMin_closure:
         const Data.Semigroup.$fOrdMin_info;
 },
 sat_sfCwl_entry() //  [R1]
         { []
         }
     {offset
       cfME9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEa; else goto cfMEb;
       cfMEa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwl_info" {
     sat_sfCwl_info:
         const sat_sfCwl_entry;
         const 1;
         const 16;
 },
 sat_sfCwk_entry() //  [R1]
         { []
         }
     {offset
       cfMEg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEh; else goto cfMEi;
       cfMEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwk_info" {
     sat_sfCwk_info:
         const sat_sfCwk_entry;
         const 1;
         const 16;
 },
 sat_sfCwj_entry() //  [R1]
         { []
         }
     {offset
       cfMEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEo; else goto cfMEp;
       cfMEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwj_info" {
     sat_sfCwj_info:
         const sat_sfCwj_entry;
         const 1;
         const 16;
 },
 sat_sfCwi_entry() //  [R1]
         { []
         }
     {offset
       cfMEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEv; else goto cfMEw;
       cfMEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwi_info" {
     sat_sfCwi_info:
         const sat_sfCwi_entry;
         const 1;
         const 16;
 },
 sat_sfCwh_entry() //  [R1]
         { []
         }
     {offset
       cfMEB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEC; else goto cfMED;
       cfMEC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMED: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwh_info" {
     sat_sfCwh_info:
         const sat_sfCwh_entry;
         const 1;
         const 16;
 },
 sat_sfCwg_entry() //  [R1]
         { []
         }
     {offset
       cfMEI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEJ; else goto cfMEK;
       cfMEJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwg_info" {
     sat_sfCwg_info:
         const sat_sfCwg_entry;
         const 1;
         const 16;
 },
 sat_sfCwf_entry() //  [R1]
         { []
         }
     {offset
       cfMEP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEQ; else goto cfMER;
       cfMEQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwf_info" {
     sat_sfCwf_info:
         const sat_sfCwf_entry;
         const 1;
         const 16;
 },
 sat_sfCwe_entry() //  [R1]
         { []
         }
     {offset
       cfMEW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMEX; else goto cfMEY;
       cfMEX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMEY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdMin_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwe_info" {
     sat_sfCwe_info:
         const sat_sfCwe_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMin_entry() //  [R2]
         { []
         }
     {offset
       cfMF0: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfMF4; else goto cfMF3;
       cfMF4: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMF3: // global
           I64[Hp - 256] = sat_sfCwl_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfCwk_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCwj_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfCwi_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCwh_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfCwg_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCwf_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfCwe_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMin_info" {
     Data.Semigroup.$fOrdMin_info:
         const Data.Semigroup.$fOrdMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.631514007 UTC

[section ""data" . Data.Semigroup.$fBoundedMin_closure" {
     Data.Semigroup.$fBoundedMin_closure:
         const Data.Semigroup.$fBoundedMin_info;
 },
 sat_sfCwo_entry() //  [R1]
         { []
         }
     {offset
       cfMFW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMFX; else goto cfMFY;
       cfMFX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMFY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwo_info" {
     sat_sfCwo_info:
         const sat_sfCwo_entry;
         const 1;
         const 16;
 },
 sat_sfCwn_entry() //  [R1]
         { []
         }
     {offset
       cfMG3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMG4; else goto cfMG5;
       cfMG4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMG5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwn_info" {
     sat_sfCwn_info:
         const sat_sfCwn_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedMin_entry() //  [R2]
         { []
         }
     {offset
       cfMG7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfMGb; else goto cfMGa;
       cfMGb: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMGa: // global
           I64[Hp - 64] = sat_sfCwo_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfCwn_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedMin_info" {
     Data.Semigroup.$fBoundedMin_info:
         const Data.Semigroup.$fBoundedMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.640384183 UTC

[section ""data" . Data.Semigroup.$fMonoidMin_$cmconcat_closure" {
     Data.Semigroup.$fMonoidMin_$cmconcat_closure:
         const Data.Semigroup.$fMonoidMin_$cmconcat_info;
 },
 z_sfCws_entry() //  [R1]
         { []
         }
     {offset
       cfMGz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMGA; else goto cfMGB;
       cfMGA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMGB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfCws_info" {
     z_sfCws_info:
         const z_sfCws_entry;
         const 1;
         const 16;
 },
 go_sfCwt_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMGO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMGP; else goto cfMGQ;
       cfMGP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMGQ: // global
           I64[Sp - 32] = block_cfMGH_info;
           _sfCwt::P64 = R1;
           _sfCwp::P64 = P64[R1 + 7];
           _sfCws::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfCwp::P64;
           P64[Sp - 16] = _sfCws::P64;
           P64[Sp - 8] = _sfCwt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufMH0; else goto cfMGI;
       ufMH0: // global
           call _cfMGH(R1) args: 0, res: 0, upd: 0;
       cfMGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfCwt_info" {
     go_sfCwt_info:
         const go_sfCwt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfMGH() //  [R1]
         { []
         }
     {offset
       cfMGH: // global
           if (R1 & 7 == 1) goto cfMGL; else goto cfMGM;
       cfMGL: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfMGM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMGY; else goto cfMGX;
       cfMGY: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMGX: // global
           _sfCww::P64 = P64[R1 + 6];
           _sfCwx::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfCwx::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfCww::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Classes.min_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMGH_info" {
     block_cfMGH_info:
         const _cfMGH;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidMin_$cmconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMH1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfMH5; else goto cfMH4;
       cfMH5: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMin_$cmconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMH4: // global
           I64[Hp - 40] = z_sfCws_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = go_sfCwt_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R4;
           R1 = Hp - 15;
           call go_sfCwt_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMin_$cmconcat_info" {
     Data.Semigroup.$fMonoidMin_$cmconcat_info:
         const Data.Semigroup.$fMonoidMin_$cmconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.651218459 UTC

[section ""data" . Data.Semigroup.$fMonoidMin_closure" {
     Data.Semigroup.$fMonoidMin_closure:
         const Data.Semigroup.$fMonoidMin_info;
         const 0;
 },
 sat_sfCwE_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMHA: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidMin_$cmconcat_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwE_info" {
     sat_sfCwE_info:
         const sat_sfCwE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCwD_entry() //  [R1]
         { []
         }
     {offset
       cfMHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMHI; else goto cfMHJ;
       cfMHI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMHJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwD_info" {
     sat_sfCwD_info:
         const sat_sfCwD_entry;
         const 1;
         const 16;
 },
 sat_sfCwC_entry() //  [R1]
         { []
         }
     {offset
       cfMHO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMHP; else goto cfMHQ;
       cfMHP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMHQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwC_info" {
     sat_sfCwC_info:
         const sat_sfCwC_entry;
         const 1;
         const 16;
 },
 sat_sfCwB_entry() //  [R1]
         { []
         }
     {offset
       cfMHV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMHW; else goto cfMHX;
       cfMHW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMHX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCwB_info" {
     sat_sfCwB_info:
         const sat_sfCwB_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+880;
 },
 Data.Semigroup.$fMonoidMin_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMHZ: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfMI3; else goto cfMI2;
       cfMI3: // global
           HpAlloc = 136;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMI2: // global
           I64[Hp - 128] = sat_sfCwE_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sfCwD_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCwC_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfCwB_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 127;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMin_info" {
     Data.Semigroup.$fMonoidMin_info:
         const Data.Semigroup.$fMonoidMin_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfCR7_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.66164406 UTC

[section ""data" . Data.Semigroup.getMin_closure" {
     Data.Semigroup.getMin_closure:
         const Data.Semigroup.getMin_info;
 },
 Data.Semigroup.getMin_entry() //  [R2]
         { []
         }
     {offset
       cfMIw: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Min2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getMin_info" {
     Data.Semigroup.getMin_info:
         const Data.Semigroup.getMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.665091169 UTC

[section ""data" . Data.Semigroup.$fMonadFixMin_$cmfix_closure" {
     Data.Semigroup.$fMonadFixMin_$cmfix_closure:
         const Data.Semigroup.$fMonadFixMin_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixMin_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfMII: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMIM; else goto cfMIL;
       cfMIM: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixMin_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMIL: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfMIH::P64 = Hp - 24;
           P64[Hp] = _cfMIH::P64;
           R1 = _cfMIH::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixMin_$cmfix_info" {
     Data.Semigroup.$fMonadFixMin_$cmfix_info:
         const Data.Semigroup.$fMonadFixMin_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.668995435 UTC

[section ""data" . Data.Semigroup.$fMonadFixMin_closure" {
     Data.Semigroup.$fMonadFixMin_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadMin_closure+1;
         const Data.Semigroup.$fMonadFixMin_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.674960244 UTC

[section ""data" . Data.Semigroup.$fEnumMin_closure" {
     Data.Semigroup.$fEnumMin_closure:
         const Data.Semigroup.$fEnumMin_info;
 },
 sat_sfCx1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfMJ1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMJ2; else goto cfMJ3;
       cfMJ2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMJ3: // global
           _sfCwY::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfCwY::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCx1_info" {
     sat_sfCx1_info:
         const sat_sfCx1_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCwX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMJ9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMJa; else goto cfMJb;
       cfMJa: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMJb: // global
           _sfCwV::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCwV::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwX_info" {
     sat_sfCwX_info:
         const sat_sfCwX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCwU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMJh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMJi; else goto cfMJj;
       cfMJi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMJj: // global
           _sfCwS::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCwS::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwU_info" {
     sat_sfCwU_info:
         const sat_sfCwU_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCwR_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMJp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMJq; else goto cfMJr;
       cfMJq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMJr: // global
           _sfCwQ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCwQ::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwR_info" {
     sat_sfCwR_info:
         const sat_sfCwR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCwP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMJx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMJy; else goto cfMJz;
       cfMJy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMJz: // global
           _sfCwO::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCwO::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwP_info" {
     sat_sfCwP_info:
         const sat_sfCwP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCwN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMJF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMJG; else goto cfMJH;
       cfMJG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMJH: // global
           _sfCwM::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCwM::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwN_info" {
     sat_sfCwN_info:
         const sat_sfCwN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCwL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMJO; else goto cfMJP;
       cfMJO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMJP: // global
           _sfCwK::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCwK::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwL_info" {
     sat_sfCwL_info:
         const sat_sfCwL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCwJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMJV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMJW; else goto cfMJX;
       cfMJW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMJX: // global
           _sfCwI::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCwI::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCwJ_info" {
     sat_sfCwJ_info:
         const sat_sfCwJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumMin_entry() //  [R2]
         { []
         }
     {offset
       cfMJZ: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfMK3; else goto cfMK2;
       cfMK3: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMK2: // global
           I64[Hp - 192] = sat_sfCx1_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCwX_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCwU_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCwR_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfCwP_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCwN_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfCwL_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCwJ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumMin_info" {
     Data.Semigroup.$fEnumMin_info:
         const Data.Semigroup.$fEnumMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.69221987 UTC

[section ""data" . Data.Semigroup.getMax_closure" {
     Data.Semigroup.getMax_closure:
         const Data.Semigroup.getMax_info;
 },
 Data.Semigroup.getMax_entry() //  [R2]
         { []
         }
     {offset
       cfMKR: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Max2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getMax_info" {
     Data.Semigroup.getMax_info:
         const Data.Semigroup.getMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.695768284 UTC

[section ""data" . Data.Semigroup.$fMonadFixMax_$cmfix_closure" {
     Data.Semigroup.$fMonadFixMax_$cmfix_closure:
         const Data.Semigroup.$fMonadFixMax_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixMax_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfML3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfML7; else goto cfML6;
       cfML7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixMax_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfML6: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfML2::P64 = Hp - 24;
           P64[Hp] = _cfML2::P64;
           R1 = _cfML2::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixMax_$cmfix_info" {
     Data.Semigroup.$fMonadFixMax_$cmfix_info:
         const Data.Semigroup.$fMonadFixMax_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.699258689 UTC

[section ""data" . Data.Semigroup.$fMonadFixMax_closure" {
     Data.Semigroup.$fMonadFixMax_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadMax_closure+1;
         const Data.Semigroup.$fMonadFixMax_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.705115528 UTC

[section ""data" . Data.Semigroup.$fEnumMax_closure" {
     Data.Semigroup.$fEnumMax_closure:
         const Data.Semigroup.$fEnumMax_info;
 },
 sat_sfCxo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfMLm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMLn; else goto cfMLo;
       cfMLn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMLo: // global
           _sfCxl::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfCxl::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxo_info" {
     sat_sfCxo_info:
         const sat_sfCxo_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCxk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMLu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMLv; else goto cfMLw;
       cfMLv: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMLw: // global
           _sfCxi::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCxi::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxk_info" {
     sat_sfCxk_info:
         const sat_sfCxk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCxh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMLC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMLD; else goto cfMLE;
       cfMLD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMLE: // global
           _sfCxf::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCxf::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxh_info" {
     sat_sfCxh_info:
         const sat_sfCxh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCxe_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMLK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMLL; else goto cfMLM;
       cfMLL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMLM: // global
           _sfCxd::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxd::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxe_info" {
     sat_sfCxe_info:
         const sat_sfCxe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMLS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMLT; else goto cfMLU;
       cfMLT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMLU: // global
           _sfCxb::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxb::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxc_info" {
     sat_sfCxc_info:
         const sat_sfCxc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxa_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMM0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMM1; else goto cfMM2;
       cfMM1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMM2: // global
           _sfCx9::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCx9::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxa_info" {
     sat_sfCxa_info:
         const sat_sfCxa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCx8_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMM8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMM9; else goto cfMMa;
       cfMM9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMMa: // global
           _sfCx7::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCx7::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCx8_info" {
     sat_sfCx8_info:
         const sat_sfCx8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCx6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMMh; else goto cfMMi;
       cfMMh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMMi: // global
           _sfCx5::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCx5::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCx6_info" {
     sat_sfCx6_info:
         const sat_sfCx6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumMax_entry() //  [R2]
         { []
         }
     {offset
       cfMMk: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfMMo; else goto cfMMn;
       cfMMo: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMMn: // global
           I64[Hp - 192] = sat_sfCxo_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCxk_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCxh_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCxe_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfCxc_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCxa_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfCx8_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCx6_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumMax_info" {
     Data.Semigroup.$fEnumMax_info:
         const Data.Semigroup.$fEnumMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.724801398 UTC

[section ""data" . Data.Semigroup.getFirst_closure" {
     Data.Semigroup.getFirst_closure:
         const Data.Semigroup.getFirst_info;
 },
 Data.Semigroup.getFirst_entry() //  [R2]
         { []
         }
     {offset
       cfMNc: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1First2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getFirst_info" {
     Data.Semigroup.getFirst_info:
         const Data.Semigroup.getFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.728691592 UTC

[section ""data" . Data.Semigroup.$fMonadFixFirst_$cmfix_closure" {
     Data.Semigroup.$fMonadFixFirst_$cmfix_closure:
         const Data.Semigroup.$fMonadFixFirst_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixFirst_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfMNo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMNs; else goto cfMNr;
       cfMNs: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixFirst_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMNr: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfMNn::P64 = Hp - 24;
           P64[Hp] = _cfMNn::P64;
           R1 = _cfMNn::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixFirst_$cmfix_info" {
     Data.Semigroup.$fMonadFixFirst_$cmfix_info:
         const Data.Semigroup.$fMonadFixFirst_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.732333554 UTC

[section ""data" . Data.Semigroup.$fMonadFixFirst_closure" {
     Data.Semigroup.$fMonadFixFirst_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadFirst_closure+1;
         const Data.Semigroup.$fMonadFixFirst_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.738369572 UTC

[section ""data" . Data.Semigroup.$fEnumFirst_closure" {
     Data.Semigroup.$fEnumFirst_closure:
         const Data.Semigroup.$fEnumFirst_info;
 },
 sat_sfCxL_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfMNH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMNI; else goto cfMNJ;
       cfMNI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMNJ: // global
           _sfCxI::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfCxI::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxL_info" {
     sat_sfCxL_info:
         const sat_sfCxL_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCxH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMNP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMNQ; else goto cfMNR;
       cfMNQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMNR: // global
           _sfCxF::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCxF::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxH_info" {
     sat_sfCxH_info:
         const sat_sfCxH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCxE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMNX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMNY; else goto cfMNZ;
       cfMNY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMNZ: // global
           _sfCxC::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCxC::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxE_info" {
     sat_sfCxE_info:
         const sat_sfCxE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCxB_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMO5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMO6; else goto cfMO7;
       cfMO6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMO7: // global
           _sfCxA::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxA::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxB_info" {
     sat_sfCxB_info:
         const sat_sfCxB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxz_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMOd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMOe; else goto cfMOf;
       cfMOe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMOf: // global
           _sfCxy::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxy::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxz_info" {
     sat_sfCxz_info:
         const sat_sfCxz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxx_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMOl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMOm; else goto cfMOn;
       cfMOm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMOn: // global
           _sfCxw::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxw::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxx_info" {
     sat_sfCxx_info:
         const sat_sfCxx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxv_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMOt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMOu; else goto cfMOv;
       cfMOu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMOv: // global
           _sfCxu::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxu::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxv_info" {
     sat_sfCxv_info:
         const sat_sfCxv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxt_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMOB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMOC; else goto cfMOD;
       cfMOC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMOD: // global
           _sfCxs::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxs::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxt_info" {
     sat_sfCxt_info:
         const sat_sfCxt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumFirst_entry() //  [R2]
         { []
         }
     {offset
       cfMOF: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfMOJ; else goto cfMOI;
       cfMOJ: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMOI: // global
           I64[Hp - 192] = sat_sfCxL_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCxH_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCxE_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCxB_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfCxz_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCxx_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfCxv_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCxt_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumFirst_info" {
     Data.Semigroup.$fEnumFirst_info:
         const Data.Semigroup.$fEnumFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.757136642 UTC

[section ""data" . Data.Semigroup.getLast_closure" {
     Data.Semigroup.getLast_closure:
         const Data.Semigroup.getLast_info;
 },
 Data.Semigroup.getLast_entry() //  [R2]
         { []
         }
     {offset
       cfMPx: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Last2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getLast_info" {
     Data.Semigroup.getLast_info:
         const Data.Semigroup.getLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.760674106 UTC

[section ""data" . Data.Semigroup.$fMonadFixLast_$cmfix_closure" {
     Data.Semigroup.$fMonadFixLast_$cmfix_closure:
         const Data.Semigroup.$fMonadFixLast_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixLast_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfMPJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMPN; else goto cfMPM;
       cfMPN: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixLast_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMPM: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfMPI::P64 = Hp - 24;
           P64[Hp] = _cfMPI::P64;
           R1 = _cfMPI::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixLast_$cmfix_info" {
     Data.Semigroup.$fMonadFixLast_$cmfix_info:
         const Data.Semigroup.$fMonadFixLast_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.764145053 UTC

[section ""data" . Data.Semigroup.$fMonadFixLast_closure" {
     Data.Semigroup.$fMonadFixLast_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadLast_closure+1;
         const Data.Semigroup.$fMonadFixLast_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.769894024 UTC

[section ""data" . Data.Semigroup.$fEnumLast_closure" {
     Data.Semigroup.$fEnumLast_closure:
         const Data.Semigroup.$fEnumLast_info;
 },
 sat_sfCy8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfMQ2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMQ3; else goto cfMQ4;
       cfMQ3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMQ4: // global
           _sfCy5::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfCy5::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCy8_info" {
     sat_sfCy8_info:
         const sat_sfCy8_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCy4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMQa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMQb; else goto cfMQc;
       cfMQb: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMQc: // global
           _sfCy2::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCy2::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCy4_info" {
     sat_sfCy4_info:
         const sat_sfCy4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCy1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMQi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMQj; else goto cfMQk;
       cfMQj: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMQk: // global
           _sfCxZ::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCxZ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCy1_info" {
     sat_sfCy1_info:
         const sat_sfCy1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCxY_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMQq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMQr; else goto cfMQs;
       cfMQr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMQs: // global
           _sfCxX::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxX::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxY_info" {
     sat_sfCxY_info:
         const sat_sfCxY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMQz; else goto cfMQA;
       cfMQz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMQA: // global
           _sfCxV::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxV::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxW_info" {
     sat_sfCxW_info:
         const sat_sfCxW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMQG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMQH; else goto cfMQI;
       cfMQH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMQI: // global
           _sfCxT::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxT::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxU_info" {
     sat_sfCxU_info:
         const sat_sfCxU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMQO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMQP; else goto cfMQQ;
       cfMQP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMQQ: // global
           _sfCxR::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxR::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxS_info" {
     sat_sfCxS_info:
         const sat_sfCxS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCxQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMQW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMQX; else goto cfMQY;
       cfMQX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMQY: // global
           _sfCxP::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCxP::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCxQ_info" {
     sat_sfCxQ_info:
         const sat_sfCxQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumLast_entry() //  [R2]
         { []
         }
     {offset
       cfMR0: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfMR4; else goto cfMR3;
       cfMR4: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMR3: // global
           I64[Hp - 192] = sat_sfCy8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCy4_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCy1_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCxY_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfCxW_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCxU_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfCxS_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCxQ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumLast_info" {
     Data.Semigroup.$fEnumLast_info:
         const Data.Semigroup.$fEnumLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.787512894 UTC

[section ""data" . Data.Semigroup.unwrapMonoid_closure" {
     Data.Semigroup.unwrapMonoid_closure:
         const Data.Semigroup.unwrapMonoid_info;
 },
 Data.Semigroup.unwrapMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfMRS: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1WrappedMonoid2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.unwrapMonoid_info" {
     Data.Semigroup.unwrapMonoid_info:
         const Data.Semigroup.unwrapMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.79498458 UTC

[section ""data" . Data.Semigroup.$fEnumWrappedMonoid_closure" {
     Data.Semigroup.$fEnumWrappedMonoid_closure:
         const Data.Semigroup.$fEnumWrappedMonoid_info;
 },
 sat_sfCyt_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfMS8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMS9; else goto cfMSa;
       cfMS9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMSa: // global
           _sfCyq::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfCyq::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyt_info" {
     sat_sfCyt_info:
         const sat_sfCyt_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCyp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMSg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMSh; else goto cfMSi;
       cfMSh: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMSi: // global
           _sfCyn::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCyn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyp_info" {
     sat_sfCyp_info:
         const sat_sfCyp_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCym_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfMSo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMSp; else goto cfMSq;
       cfMSp: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMSq: // global
           _sfCyk::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCyk::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCym_info" {
     sat_sfCym_info:
         const sat_sfCym_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCyj_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMSw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMSx; else goto cfMSy;
       cfMSx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMSy: // global
           _sfCyi::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCyi::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyj_info" {
     sat_sfCyj_info:
         const sat_sfCyj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCyh_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMSE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMSF; else goto cfMSG;
       cfMSF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMSG: // global
           _sfCyg::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCyg::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyh_info" {
     sat_sfCyh_info:
         const sat_sfCyh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCyf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMSN; else goto cfMSO;
       cfMSN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMSO: // global
           _sfCye::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCye::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyf_info" {
     sat_sfCyf_info:
         const sat_sfCyf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCyd_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMSU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMSV; else goto cfMSW;
       cfMSV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMSW: // global
           _sfCyc::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCyc::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyd_info" {
     sat_sfCyd_info:
         const sat_sfCyd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfCyb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfMT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMT3; else goto cfMT4;
       cfMT3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMT4: // global
           _sfCya::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfCya::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCyb_info" {
     sat_sfCyb_info:
         const sat_sfCyb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfMT6: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfMTa; else goto cfMT9;
       cfMTa: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMT9: // global
           I64[Hp - 192] = sat_sfCyt_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCyp_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCym_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCyj_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfCyh_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfCyf_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfCyd_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfCyb_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumWrappedMonoid_info" {
     Data.Semigroup.$fEnumWrappedMonoid_info:
         const Data.Semigroup.$fEnumWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.812562826 UTC

[section ""data" . Data.Semigroup.getOption_closure" {
     Data.Semigroup.getOption_closure:
         const Data.Semigroup.getOption_info;
 },
 Data.Semigroup.getOption_entry() //  [R2]
         { []
         }
     {offset
       cfMTY: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Option2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getOption_info" {
     Data.Semigroup.getOption_info:
         const Data.Semigroup.getOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.817463213 UTC

[section ""data" . Data.Semigroup.$fMonadFixOption_$cmfix_closure" {
     Data.Semigroup.$fMonadFixOption_$cmfix_closure:
         const Data.Semigroup.$fMonadFixOption_$cmfix_info;
         const 0;
 },
 sat_sfCyy_entry() //  [R1]
         { []
         }
     {offset
       cfMUo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfMUp; else goto cfMUq;
       cfMUp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMUq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfMUh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufMUx; else goto cfMUi;
       ufMUx: // global
           call _cfMUh(R1) args: 0, res: 0, upd: 0;
       cfMUi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCyy_info" {
     sat_sfCyy_info:
         const sat_sfCyy_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+896;
 },
 _cfMUh() //  [R1]
         { []
         }
     {offset
       cfMUh: // global
           if (R1 & 7 == 1) goto cfMUl; else goto cfMUm;
       cfMUl: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cfMUm: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfMUh_info" {
     block_cfMUh_info:
         const _cfMUh;
         const 0;
         const 4294967326;
         const SfCR7_srt+896;
 },
 a1_sfCyv_entry() //  [R1]
         { []
         }
     {offset
       cfMUy: // global
           _sfCyv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfMUz; else goto cfMUA;
       cfMUA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMUC; else goto cfMUB;
       cfMUC: // global
           HpAlloc = 24;
           goto cfMUz;
       cfMUz: // global
           R1 = _sfCyv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMUB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCyv::P64;
           _sfCyu::P64 = P64[_sfCyv::P64 + 16];
           I64[Hp - 16] = sat_sfCyy_info;
           P64[Hp] = _sfCyv::P64;
           R2 = Hp - 16;
           R1 = _sfCyu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sfCyv_info" {
     a1_sfCyv_info:
         const a1_sfCyv_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+896;
 },
 Data.Semigroup.$fMonadFixOption_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfMUD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMUH; else goto cfMUG;
       cfMUH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixOption_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfMUG: // global
           I64[Hp - 16] = a1_sfCyv_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixOption_$cmfix_info" {
     Data.Semigroup.$fMonadFixOption_$cmfix_info:
         const Data.Semigroup.$fMonadFixOption_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.826446287 UTC

[section ""data" . Data.Semigroup.$fMonadFixOption_closure" {
     Data.Semigroup.$fMonadFixOption_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadOption_closure+1;
         const Data.Semigroup.$fMonadFixOption_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.829919062 UTC

[section ""data" . Data.Semigroup.cycle1_closure" {
     Data.Semigroup.cycle1_closure:
         const Data.Semigroup.cycle1_info;
 },
 xs'_sfCyB_entry() //  [R1]
         { []
         }
     {offset
       cfMVb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfMVc; else goto cfMVd;
       cfMVc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMVd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = R1;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xs'_sfCyB_info" {
     xs'_sfCyB_info:
         const xs'_sfCyB_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.cycle1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMVe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfMVi; else goto cfMVh;
       cfMVi: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.cycle1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMVh: // global
           I64[Hp - 24] = xs'_sfCyB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.cycle1_info" {
     Data.Semigroup.cycle1_info:
         const Data.Semigroup.cycle1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.835721919 UTC

[section ""data" . Data.Semigroup.diff1_closure" {
     Data.Semigroup.diff1_closure:
         const Data.Semigroup.diff1_info;
 },
 Data.Semigroup.diff1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMVw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMVx; else goto cfMVy;
       cfMVx: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.diff1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMVy: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.diff1_info" {
     Data.Semigroup.diff1_info:
         const Data.Semigroup.diff1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.83929343 UTC

[section ""data" . Data.Semigroup.diff_closure" {
     Data.Semigroup.diff_closure:
         const Data.Semigroup.diff_info;
 },
 Data.Semigroup.diff_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMVI: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.diff1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.diff_info" {
     Data.Semigroup.diff_info:
         const Data.Semigroup.diff_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.84463632 UTC

[section ""data" . Data.Semigroup.mtimesDefault_closure" {
     Data.Semigroup.mtimesDefault_closure:
         const Data.Semigroup.mtimesDefault_info;
         const 0;
 },
 sat_sfCyM_entry() //  [R1]
         { []
         }
     {offset
       cfMW3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMW4; else goto cfMW5;
       cfMW4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMW5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfMW1_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCyM_info" {
     sat_sfCyM_info:
         const sat_sfCyM_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+912;
 },
 _cfMW1() //  [R1]
         { []
         }
     {offset
       cfMW1: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.$fSemigroupOption2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfMW1_info" {
     block_cfMW1_info:
         const _cfMW1;
         const 0;
         const 4294967326;
         const SfCR7_srt+912;
 },
 section ""relreadonly" . ufMWB_srtd" {
     ufMWB_srtd:
         const SfCR7_srt+48;
         const 110;
         const 1;
         const 52776558133248;
 },
 Data.Semigroup.mtimesDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfMW9: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfMWf; else goto cfMWg;
       cfMWf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.mtimesDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfMWg: // global
           I64[Sp - 40] = block_cfMVT_info;
           _sfCyE::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _sfCyE::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.mtimesDefault_info" {
     Data.Semigroup.mtimesDefault_info:
         const Data.Semigroup.mtimesDefault_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ufMWB_srtd;
 },
 section ""relreadonly" . ufMWC_srtd" {
     ufMWC_srtd:
         const SfCR7_srt+48;
         const 109;
         const 1;
         const 17592186044416;
 },
 _cfMVT() //  [R1]
         { []
         }
     {offset
       cfMVT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfMWj; else goto cfMWi;
       cfMWj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfMWi: // global
           I64[Hp - 16] = sat_sfCyM_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cfMWa_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMVT_info" {
     block_cfMVT_info:
         const _cfMVT;
         const 4;
         const 18446744069414584350;
         const ufMWC_srtd;
 },
 _cfMWa() //  [R1]
         { []
         }
     {offset
       cfMWa: // global
           I64[Sp] = block_cfMWe_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMWa_info" {
     block_cfMWa_info:
         const _cfMWa;
         const 5;
         const 4294967326;
         const SfCR7_srt+928;
 },
 _cfMWe() //  [R1]
         { []
         }
     {offset
       cfMWe: // global
           _cfMVX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfMWo_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _cfMVX::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMWe_info" {
     block_cfMWe_info:
         const _cfMWe;
         const 5;
         const 4294967326;
         const SfCR7_srt+928;
 },
 _cfMWo() //  [R1]
         { []
         }
     {offset
       cfMWo: // global
           _sfCyF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfMWv; else goto cfMWz;
       cfMWv: // global
           R3 = P64[Sp + 8];
           R2 = _sfCyF::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           Sp = Sp + 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry(R3,
                                                                       R2) args: 32, res: 0, upd: 8;
       cfMWz: // global
           R2 = _sfCyF::P64;
           Sp = Sp + 40;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMWo_info" {
     block_cfMWo_info:
         const _cfMWo;
         const 4;
         const 4294967326;
         const SfCR7_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.859082934 UTC

[section ""data" . Data.Semigroup.option_closure" {
     Data.Semigroup.option_closure:
         const Data.Semigroup.option_info;
 },
 Data.Semigroup.option_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfMXb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Maybe.maybe_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.option_info" {
     Data.Semigroup.option_info:
         const Data.Semigroup.option_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.862893904 UTC

[section ""data" . $cMin1_rfC6i_closure" {
     $cMin1_rfC6i_closure:
         const :_con_info;
         const Data.Semigroup.$fReadMin2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.867619974 UTC

[section ""data" . go61_rfC6j_closure" {
     go61_rfC6j_closure:
         const go61_rfC6j_info;
         const 0;
 },
 go61_rfC6j_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMXu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMXv; else goto ufMY8;
       cfMXv: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rfC6j_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufMY8: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfMXk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rfC6j_info" {
     go61_rfC6j_info:
         const go61_rfC6j_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfMXk() //  []
         { []
         }
     {offset
       cfMXk: // global
           _sfCyO::P64 = P64[Sp];
           I64[Sp] = block_cfMXn_info;
           R1 = _sfCyO::P64;
           if (R1 & 7 != 0) goto ufMYc; else goto cfMXo;
       ufMYc: // global
           call _cfMXn(R1) args: 0, res: 0, upd: 0;
       cfMXo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfMXn() //  [R1]
         { []
         }
     {offset
       cfMXn: // global
           if (R1 & 7 == 1) goto ufMY9; else goto cfMXs;
       ufMY9: // global
           Sp = Sp + 16;
           call _cfMXK() args: 0, res: 0, upd: 0;
       cfMXs: // global
           I64[Sp - 8] = block_cfMXC_info;
           _sfCyR::P64 = P64[R1 + 6];
           _sfCyS::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCyS::P64;
           P64[Sp + 8] = _sfCyR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufMYd; else goto cfMXE;
       ufMYd: // global
           call _cfMXC(R1) args: 0, res: 0, upd: 0;
       cfMXE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMXn_info" {
     block_cfMXn_info:
         const _cfMXn;
         const 1;
         const 12884901918;
         const SfCR7_srt+936;
 },
 _cfMXC() //  [R1]
         { []
         }
     {offset
       cfMXC: // global
           if (R1 & 7 == 1) goto ufMYa; else goto cfMXP;
       ufMYa: // global
           Sp = Sp + 24;
           call _cfMXK() args: 0, res: 0, upd: 0;
       cfMXP: // global
           I64[Sp - 8] = block_cfMXN_info;
           _sfCyU::P64 = P64[R1 + 6];
           _sfCyV::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCyV::P64;
           P64[Sp + 16] = _sfCyU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufMYg; else goto cfMXQ;
       ufMYg: // global
           call _cfMXN(R1) args: 0, res: 0, upd: 0;
       cfMXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMXC_info" {
     block_cfMXC_info:
         const _cfMXC;
         const 2;
         const 12884901918;
         const SfCR7_srt+936;
 },
 _cfMXK() //  []
         { []
         }
     {offset
       cfMXK: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfMXN() //  [R1]
         { []
         }
     {offset
       cfMXN: // global
           I64[Sp] = block_cfMXU_info;
           R3 = Data.Semigroup.$fDataMin7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMXN_info" {
     block_cfMXN_info:
         const _cfMXN;
         const 3;
         const 12884901918;
         const SfCR7_srt+936;
 },
 _cfMXU() //  [R1]
         { []
         }
     {offset
       cfMXU: // global
           if (R1 & 7 == 1) goto cfMY1; else goto cfMY5;
       cfMY1: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfMXk() args: 0, res: 0, upd: 0;
       cfMY5: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMXU_info" {
     block_cfMXU_info:
         const _cfMXU;
         const 3;
         const 12884901918;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.880236252 UTC

[section ""data" . $cMin2_rfC6k_closure" {
     $cMin2_rfC6k_closure:
         const Data.Data.AlgConstr_con_info;
         const $cMin3_rfC6l_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMin6_closure" {
     Data.Semigroup.$fDataMin6_closure:
         const :_con_info;
         const Data.Semigroup.$cMin_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMin5_closure" {
     Data.Semigroup.$fDataMin5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataMin6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tMin_closure" {
     Data.Semigroup.$tMin_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataMin7_closure;
         const Data.Semigroup.$fDataMin5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cMin_closure" {
     Data.Semigroup.$cMin_closure:
         const Data.Data.Constr_con_info;
         const $cMin2_rfC6k_closure+1;
         const Data.Semigroup.$fDataMin7_closure;
         const $cMin1_rfC6i_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tMin_closure+1;
         const 0;
 },
 section ""data" . $cMin3_rfC6l_closure" {
     $cMin3_rfC6l_closure:
         const $cMin3_rfC6l_info;
         const 0;
         const 0;
         const 0;
 },
 $cMin3_rfC6l_entry() //  [R1]
         { []
         }
     {offset
       cfMYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfMYY; else goto cfMYZ;
       cfMYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfMYZ: // global
           (_cfMYU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfMYU::I64 == 0) goto cfMYW; else goto cfMYV;
       cfMYW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfMYV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfMYU::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataMin6_closure+2;
           Sp = Sp - 16;
           call go61_rfC6j_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cMin3_rfC6l_info" {
     $cMin3_rfC6l_info:
         const $cMin3_rfC6l_entry;
         const 0;
         const 30064771093;
         const SfCR7_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.887397955 UTC

[section ""data" . $cMax1_rfC6m_closure" {
     $cMax1_rfC6m_closure:
         const :_con_info;
         const Data.Semigroup.$fReadMax2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.89146909 UTC

[section ""data" . go1_rfC6n_closure" {
     go1_rfC6n_closure:
         const go1_rfC6n_info;
         const 0;
 },
 go1_rfC6n_entry() //  [R2, R3]
         { []
         }
     {offset
       cfMZo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfMZp; else goto ufN02;
       cfMZp: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rfC6n_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN02: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfMZe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rfC6n_info" {
     go1_rfC6n_info:
         const go1_rfC6n_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfMZe() //  []
         { []
         }
     {offset
       cfMZe: // global
           _sfCz3::P64 = P64[Sp];
           I64[Sp] = block_cfMZh_info;
           R1 = _sfCz3::P64;
           if (R1 & 7 != 0) goto ufN06; else goto cfMZi;
       ufN06: // global
           call _cfMZh(R1) args: 0, res: 0, upd: 0;
       cfMZi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfMZh() //  [R1]
         { []
         }
     {offset
       cfMZh: // global
           if (R1 & 7 == 1) goto ufN03; else goto cfMZm;
       ufN03: // global
           Sp = Sp + 16;
           call _cfMZE() args: 0, res: 0, upd: 0;
       cfMZm: // global
           I64[Sp - 8] = block_cfMZw_info;
           _sfCz6::P64 = P64[R1 + 6];
           _sfCz7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCz7::P64;
           P64[Sp + 8] = _sfCz6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN07; else goto cfMZy;
       ufN07: // global
           call _cfMZw(R1) args: 0, res: 0, upd: 0;
       cfMZy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMZh_info" {
     block_cfMZh_info:
         const _cfMZh;
         const 1;
         const 141733920798;
         const SfCR7_srt+936;
 },
 _cfMZw() //  [R1]
         { []
         }
     {offset
       cfMZw: // global
           if (R1 & 7 == 1) goto ufN04; else goto cfMZJ;
       ufN04: // global
           Sp = Sp + 24;
           call _cfMZE() args: 0, res: 0, upd: 0;
       cfMZJ: // global
           I64[Sp - 8] = block_cfMZH_info;
           _sfCz9::P64 = P64[R1 + 6];
           _sfCza::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCza::P64;
           P64[Sp + 16] = _sfCz9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN0a; else goto cfMZK;
       ufN0a: // global
           call _cfMZH(R1) args: 0, res: 0, upd: 0;
       cfMZK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMZw_info" {
     block_cfMZw_info:
         const _cfMZw;
         const 2;
         const 141733920798;
         const SfCR7_srt+936;
 },
 _cfMZE() //  []
         { []
         }
     {offset
       cfMZE: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfMZH() //  [R1]
         { []
         }
     {offset
       cfMZH: // global
           I64[Sp] = block_cfMZO_info;
           R3 = Data.Semigroup.$fDataMax7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMZH_info" {
     block_cfMZH_info:
         const _cfMZH;
         const 3;
         const 141733920798;
         const SfCR7_srt+936;
 },
 _cfMZO() //  [R1]
         { []
         }
     {offset
       cfMZO: // global
           if (R1 & 7 == 1) goto cfMZV; else goto cfMZZ;
       cfMZV: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfMZe() args: 0, res: 0, upd: 0;
       cfMZZ: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfMZO_info" {
     block_cfMZO_info:
         const _cfMZO;
         const 3;
         const 141733920798;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.90481598 UTC

[section ""data" . $cMax2_rfC6o_closure" {
     $cMax2_rfC6o_closure:
         const Data.Data.AlgConstr_con_info;
         const $cMax3_rfC6p_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMax6_closure" {
     Data.Semigroup.$fDataMax6_closure:
         const :_con_info;
         const Data.Semigroup.$cMax_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMax5_closure" {
     Data.Semigroup.$fDataMax5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataMax6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tMax_closure" {
     Data.Semigroup.$tMax_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataMax7_closure;
         const Data.Semigroup.$fDataMax5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cMax_closure" {
     Data.Semigroup.$cMax_closure:
         const Data.Data.Constr_con_info;
         const $cMax2_rfC6o_closure+1;
         const Data.Semigroup.$fDataMax7_closure;
         const $cMax1_rfC6m_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tMax_closure+1;
         const 0;
 },
 section ""data" . $cMax3_rfC6p_closure" {
     $cMax3_rfC6p_closure:
         const $cMax3_rfC6p_info;
         const 0;
         const 0;
         const 0;
 },
 $cMax3_rfC6p_entry() //  [R1]
         { []
         }
     {offset
       cfN0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN0S; else goto cfN0T;
       cfN0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN0T: // global
           (_cfN0O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN0O::I64 == 0) goto cfN0Q; else goto cfN0P;
       cfN0Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN0P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN0O::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataMax6_closure+2;
           Sp = Sp - 16;
           call go1_rfC6n_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cMax3_rfC6p_info" {
     $cMax3_rfC6p_info:
         const $cMax3_rfC6p_entry;
         const 0;
         const 107374182421;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.914205356 UTC

[section ""data" . go2_rfC6q_closure" {
     go2_rfC6q_closure:
         const go2_rfC6q_info;
         const 0;
 },
 go2_rfC6q_entry() //  [R2, R3]
         { []
         }
     {offset
       cfN1h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfN1i; else goto ufN1V;
       cfN1i: // global
           R3 = R3;
           R2 = R2;
           R1 = go2_rfC6q_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN1V: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfN17() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go2_rfC6q_info" {
     go2_rfC6q_info:
         const go2_rfC6q_entry;
         const 0;
         const 3302829850638;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfN17() //  []
         { []
         }
     {offset
       cfN17: // global
           _sfCzi::P64 = P64[Sp];
           I64[Sp] = block_cfN1a_info;
           R1 = _sfCzi::P64;
           if (R1 & 7 != 0) goto ufN1Z; else goto cfN1b;
       ufN1Z: // global
           call _cfN1a(R1) args: 0, res: 0, upd: 0;
       cfN1b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfN1a() //  [R1]
         { []
         }
     {offset
       cfN1a: // global
           if (R1 & 7 == 1) goto ufN1W; else goto cfN1f;
       ufN1W: // global
           Sp = Sp + 16;
           call _cfN1x() args: 0, res: 0, upd: 0;
       cfN1f: // global
           I64[Sp - 8] = block_cfN1p_info;
           _sfCzl::P64 = P64[R1 + 6];
           _sfCzm::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCzm::P64;
           P64[Sp + 8] = _sfCzl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN20; else goto cfN1r;
       ufN20: // global
           call _cfN1p(R1) args: 0, res: 0, upd: 0;
       cfN1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN1a_info" {
     block_cfN1a_info:
         const _cfN1a;
         const 1;
         const 1103806595102;
         const SfCR7_srt+936;
 },
 _cfN1p() //  [R1]
         { []
         }
     {offset
       cfN1p: // global
           if (R1 & 7 == 1) goto ufN1X; else goto cfN1C;
       ufN1X: // global
           Sp = Sp + 24;
           call _cfN1x() args: 0, res: 0, upd: 0;
       cfN1C: // global
           I64[Sp - 8] = block_cfN1A_info;
           _sfCzo::P64 = P64[R1 + 6];
           _sfCzp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCzp::P64;
           P64[Sp + 16] = _sfCzo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN23; else goto cfN1D;
       ufN23: // global
           call _cfN1A(R1) args: 0, res: 0, upd: 0;
       cfN1D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN1p_info" {
     block_cfN1p_info:
         const _cfN1p;
         const 2;
         const 1103806595102;
         const SfCR7_srt+936;
 },
 _cfN1x() //  []
         { []
         }
     {offset
       cfN1x: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfN1A() //  [R1]
         { []
         }
     {offset
       cfN1A: // global
           I64[Sp] = block_cfN1H_info;
           R3 = Data.Semigroup.$fDataArg9_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN1A_info" {
     block_cfN1A_info:
         const _cfN1A;
         const 3;
         const 1103806595102;
         const SfCR7_srt+936;
 },
 _cfN1H() //  [R1]
         { []
         }
     {offset
       cfN1H: // global
           if (R1 & 7 == 1) goto cfN1O; else goto cfN1S;
       cfN1O: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfN17() args: 0, res: 0, upd: 0;
       cfN1S: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN1H_info" {
     block_cfN1H_info:
         const _cfN1H;
         const 3;
         const 1103806595102;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.926380441 UTC

[section ""data" . $cArg1_rfC6r_closure" {
     $cArg1_rfC6r_closure:
         const Data.Data.AlgConstr_con_info;
         const $cArg2_rfC6s_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataArg8_closure" {
     Data.Semigroup.$fDataArg8_closure:
         const :_con_info;
         const Data.Semigroup.$cArg_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataArg7_closure" {
     Data.Semigroup.$fDataArg7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataArg8_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tArg_closure" {
     Data.Semigroup.$tArg_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataArg9_closure;
         const Data.Semigroup.$fDataArg7_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cArg_closure" {
     Data.Semigroup.$cArg_closure:
         const Data.Data.Constr_con_info;
         const $cArg1_rfC6r_closure+1;
         const Data.Semigroup.$fDataArg9_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tArg_closure+1;
         const 0;
 },
 section ""data" . $cArg2_rfC6s_closure" {
     $cArg2_rfC6s_closure:
         const $cArg2_rfC6s_info;
         const 0;
         const 0;
         const 0;
 },
 $cArg2_rfC6s_entry() //  [R1]
         { []
         }
     {offset
       cfN2K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN2L; else goto cfN2M;
       cfN2L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN2M: // global
           (_cfN2H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN2H::I64 == 0) goto cfN2J; else goto cfN2I;
       cfN2J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN2I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN2H::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataArg8_closure+2;
           Sp = Sp - 16;
           call go2_rfC6q_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cArg2_rfC6s_info" {
     $cArg2_rfC6s_info:
         const $cArg2_rfC6s_entry;
         const 0;
         const 828928688149;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.933574949 UTC

[section ""data" . $cFirst1_rfC6t_closure" {
     $cFirst1_rfC6t_closure:
         const :_con_info;
         const Data.Semigroup.$fReadFirst5_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.937688256 UTC

[section ""data" . go3_rfC6u_closure" {
     go3_rfC6u_closure:
         const go3_rfC6u_info;
         const 0;
 },
 go3_rfC6u_entry() //  [R2, R3]
         { []
         }
     {offset
       cfN3b: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfN3c; else goto ufN3P;
       cfN3c: // global
           R3 = R3;
           R2 = R2;
           R1 = go3_rfC6u_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN3P: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfN31() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go3_rfC6u_info" {
     go3_rfC6u_info:
         const go3_rfC6u_entry;
         const 0;
         const 26392574033934;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfN31() //  []
         { []
         }
     {offset
       cfN31: // global
           _sfCzx::P64 = P64[Sp];
           I64[Sp] = block_cfN34_info;
           R1 = _sfCzx::P64;
           if (R1 & 7 != 0) goto ufN3T; else goto cfN35;
       ufN3T: // global
           call _cfN34(R1) args: 0, res: 0, upd: 0;
       cfN35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfN34() //  [R1]
         { []
         }
     {offset
       cfN34: // global
           if (R1 & 7 == 1) goto ufN3Q; else goto cfN39;
       ufN3Q: // global
           Sp = Sp + 16;
           call _cfN3r() args: 0, res: 0, upd: 0;
       cfN39: // global
           I64[Sp - 8] = block_cfN3j_info;
           _sfCzA::P64 = P64[R1 + 6];
           _sfCzB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCzB::P64;
           P64[Sp + 8] = _sfCzA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN3U; else goto cfN3l;
       ufN3U: // global
           call _cfN3j(R1) args: 0, res: 0, upd: 0;
       cfN3l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN34_info" {
     block_cfN34_info:
         const _cfN34;
         const 1;
         const 8800387989534;
         const SfCR7_srt+936;
 },
 _cfN3j() //  [R1]
         { []
         }
     {offset
       cfN3j: // global
           if (R1 & 7 == 1) goto ufN3R; else goto cfN3w;
       ufN3R: // global
           Sp = Sp + 24;
           call _cfN3r() args: 0, res: 0, upd: 0;
       cfN3w: // global
           I64[Sp - 8] = block_cfN3u_info;
           _sfCzD::P64 = P64[R1 + 6];
           _sfCzE::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCzE::P64;
           P64[Sp + 16] = _sfCzD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN3X; else goto cfN3x;
       ufN3X: // global
           call _cfN3u(R1) args: 0, res: 0, upd: 0;
       cfN3x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN3j_info" {
     block_cfN3j_info:
         const _cfN3j;
         const 2;
         const 8800387989534;
         const SfCR7_srt+936;
 },
 _cfN3r() //  []
         { []
         }
     {offset
       cfN3r: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfN3u() //  [R1]
         { []
         }
     {offset
       cfN3u: // global
           I64[Sp] = block_cfN3B_info;
           R3 = Data.Semigroup.$fDataFirst7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN3u_info" {
     block_cfN3u_info:
         const _cfN3u;
         const 3;
         const 8800387989534;
         const SfCR7_srt+936;
 },
 _cfN3B() //  [R1]
         { []
         }
     {offset
       cfN3B: // global
           if (R1 & 7 == 1) goto cfN3I; else goto cfN3M;
       cfN3I: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfN31() args: 0, res: 0, upd: 0;
       cfN3M: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN3B_info" {
     block_cfN3B_info:
         const _cfN3B;
         const 3;
         const 8800387989534;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.951252411 UTC

[section ""data" . $cFirst2_rfC6v_closure" {
     $cFirst2_rfC6v_closure:
         const Data.Data.AlgConstr_con_info;
         const $cFirst3_rfC6w_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataFirst6_closure" {
     Data.Semigroup.$fDataFirst6_closure:
         const :_con_info;
         const Data.Semigroup.$cFirst_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataFirst5_closure" {
     Data.Semigroup.$fDataFirst5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataFirst6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tFirst_closure" {
     Data.Semigroup.$tFirst_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataFirst7_closure;
         const Data.Semigroup.$fDataFirst5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cFirst_closure" {
     Data.Semigroup.$cFirst_closure:
         const Data.Data.Constr_con_info;
         const $cFirst2_rfC6v_closure+1;
         const Data.Semigroup.$fDataFirst7_closure;
         const $cFirst1_rfC6t_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tFirst_closure+1;
         const 0;
 },
 section ""data" . $cFirst3_rfC6w_closure" {
     $cFirst3_rfC6w_closure:
         const $cFirst3_rfC6w_info;
         const 0;
         const 0;
         const 0;
 },
 $cFirst3_rfC6w_entry() //  [R1]
         { []
         }
     {offset
       cfN4E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN4F; else goto cfN4G;
       cfN4F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN4G: // global
           (_cfN4B::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN4B::I64 == 0) goto cfN4D; else goto cfN4C;
       cfN4D: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN4C: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN4B::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataFirst6_closure+2;
           Sp = Sp - 16;
           call go3_rfC6u_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cFirst3_rfC6w_info" {
     $cFirst3_rfC6w_info:
         const $cFirst3_rfC6w_entry;
         const 0;
         const 6601364733973;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.95845002 UTC

[section ""data" . $cLast1_rfC6x_closure" {
     $cLast1_rfC6x_closure:
         const :_con_info;
         const Data.Semigroup.$fReadLast2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.962557854 UTC

[section ""data" . go4_rfC6y_closure" {
     go4_rfC6y_closure:
         const go4_rfC6y_info;
         const 0;
 },
 go4_rfC6y_entry() //  [R2, R3]
         { []
         }
     {offset
       cfN55: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfN56; else goto ufN5J;
       cfN56: // global
           R3 = R3;
           R2 = R2;
           R1 = go4_rfC6y_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN5J: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfN4V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go4_rfC6y_info" {
     go4_rfC6y_info:
         const go4_rfC6y_entry;
         const 0;
         const 211110527500302;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfN4V() //  []
         { []
         }
     {offset
       cfN4V: // global
           _sfCzM::P64 = P64[Sp];
           I64[Sp] = block_cfN4Y_info;
           R1 = _sfCzM::P64;
           if (R1 & 7 != 0) goto ufN5N; else goto cfN4Z;
       ufN5N: // global
           call _cfN4Y(R1) args: 0, res: 0, upd: 0;
       cfN4Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfN4Y() //  [R1]
         { []
         }
     {offset
       cfN4Y: // global
           if (R1 & 7 == 1) goto ufN5K; else goto cfN53;
       ufN5K: // global
           Sp = Sp + 16;
           call _cfN5l() args: 0, res: 0, upd: 0;
       cfN53: // global
           I64[Sp - 8] = block_cfN5d_info;
           _sfCzP::P64 = P64[R1 + 6];
           _sfCzQ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCzQ::P64;
           P64[Sp + 8] = _sfCzP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN5O; else goto cfN5f;
       ufN5O: // global
           call _cfN5d(R1) args: 0, res: 0, upd: 0;
       cfN5f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN4Y_info" {
     block_cfN4Y_info:
         const _cfN4Y;
         const 1;
         const 70373039144990;
         const SfCR7_srt+936;
 },
 _cfN5d() //  [R1]
         { []
         }
     {offset
       cfN5d: // global
           if (R1 & 7 == 1) goto ufN5L; else goto cfN5q;
       ufN5L: // global
           Sp = Sp + 24;
           call _cfN5l() args: 0, res: 0, upd: 0;
       cfN5q: // global
           I64[Sp - 8] = block_cfN5o_info;
           _sfCzS::P64 = P64[R1 + 6];
           _sfCzT::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCzT::P64;
           P64[Sp + 16] = _sfCzS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN5R; else goto cfN5r;
       ufN5R: // global
           call _cfN5o(R1) args: 0, res: 0, upd: 0;
       cfN5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN5d_info" {
     block_cfN5d_info:
         const _cfN5d;
         const 2;
         const 70373039144990;
         const SfCR7_srt+936;
 },
 _cfN5l() //  []
         { []
         }
     {offset
       cfN5l: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfN5o() //  [R1]
         { []
         }
     {offset
       cfN5o: // global
           I64[Sp] = block_cfN5v_info;
           R3 = Data.Semigroup.$fDataLast7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN5o_info" {
     block_cfN5o_info:
         const _cfN5o;
         const 3;
         const 70373039144990;
         const SfCR7_srt+936;
 },
 _cfN5v() //  [R1]
         { []
         }
     {offset
       cfN5v: // global
           if (R1 & 7 == 1) goto cfN5C; else goto cfN5G;
       cfN5C: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfN4V() args: 0, res: 0, upd: 0;
       cfN5G: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN5v_info" {
     block_cfN5v_info:
         const _cfN5v;
         const 3;
         const 70373039144990;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.97499626 UTC

[section ""data" . $cLast2_rfC6z_closure" {
     $cLast2_rfC6z_closure:
         const Data.Data.AlgConstr_con_info;
         const $cLast3_rfC6A_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataLast6_closure" {
     Data.Semigroup.$fDataLast6_closure:
         const :_con_info;
         const Data.Semigroup.$cLast_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataLast5_closure" {
     Data.Semigroup.$fDataLast5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataLast6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tLast_closure" {
     Data.Semigroup.$tLast_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataLast7_closure;
         const Data.Semigroup.$fDataLast5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cLast_closure" {
     Data.Semigroup.$cLast_closure:
         const Data.Data.Constr_con_info;
         const $cLast2_rfC6z_closure+1;
         const Data.Semigroup.$fDataLast7_closure;
         const $cLast1_rfC6x_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tLast_closure+1;
         const 0;
 },
 section ""data" . $cLast3_rfC6A_closure" {
     $cLast3_rfC6A_closure:
         const $cLast3_rfC6A_info;
         const 0;
         const 0;
         const 0;
 },
 $cLast3_rfC6A_entry() //  [R1]
         { []
         }
     {offset
       cfN6y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN6z; else goto cfN6A;
       cfN6z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN6A: // global
           (_cfN6v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN6v::I64 == 0) goto cfN6x; else goto cfN6w;
       cfN6x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN6w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN6v::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataLast6_closure+2;
           Sp = Sp - 16;
           call go4_rfC6y_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cLast3_rfC6A_info" {
     $cLast3_rfC6A_info:
         const $cLast3_rfC6A_entry;
         const 0;
         const 52780853100565;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.982364096 UTC

[section ""cstring" . Data.Semigroup.$fDataWrappedMonoid4_bytes" {
     Data.Semigroup.$fDataWrappedMonoid4_bytes:
         I8[] [87,114,97,112,112,101,100,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.984636608 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid7_closure" {
     Data.Semigroup.$fDataWrappedMonoid7_closure:
         const Data.Semigroup.$fDataWrappedMonoid7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid7_entry() //  [R1]
         { []
         }
     {offset
       cfN6U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN6V; else goto cfN6W;
       cfN6V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN6W: // global
           (_cfN6R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN6R::I64 == 0) goto cfN6T; else goto cfN6S;
       cfN6T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN6S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN6R::I64;
           R2 = Data.Semigroup.$fDataWrappedMonoid4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid7_info" {
     Data.Semigroup.$fDataWrappedMonoid7_info:
         const Data.Semigroup.$fDataWrappedMonoid7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.988536982 UTC

[section ""data" . $cWrapMonoid1_rfC6B_closure" {
     $cWrapMonoid1_rfC6B_closure:
         const :_con_info;
         const Data.Semigroup.$fReadWrappedMonoid2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:23.992568428 UTC

[section ""data" . go5_rfC6C_closure" {
     go5_rfC6C_closure:
         const go5_rfC6C_info;
         const 0;
 },
 go5_rfC6C_entry() //  [R2, R3]
         { []
         }
     {offset
       cfN7g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfN7h; else goto ufN7U;
       cfN7h: // global
           R3 = R3;
           R2 = R2;
           R1 = go5_rfC6C_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN7U: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfN76() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go5_rfC6C_info" {
     go5_rfC6C_info:
         const go5_rfC6C_entry;
         const 0;
         const 1688854155231246;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfN76() //  []
         { []
         }
     {offset
       cfN76: // global
           _sfCA1::P64 = P64[Sp];
           I64[Sp] = block_cfN79_info;
           R1 = _sfCA1::P64;
           if (R1 & 7 != 0) goto ufN7Y; else goto cfN7a;
       ufN7Y: // global
           call _cfN79(R1) args: 0, res: 0, upd: 0;
       cfN7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfN79() //  [R1]
         { []
         }
     {offset
       cfN79: // global
           if (R1 & 7 == 1) goto ufN7V; else goto cfN7e;
       ufN7V: // global
           Sp = Sp + 16;
           call _cfN7w() args: 0, res: 0, upd: 0;
       cfN7e: // global
           I64[Sp - 8] = block_cfN7o_info;
           _sfCA4::P64 = P64[R1 + 6];
           _sfCA5::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCA5::P64;
           P64[Sp + 8] = _sfCA4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN7Z; else goto cfN7q;
       ufN7Z: // global
           call _cfN7o(R1) args: 0, res: 0, upd: 0;
       cfN7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN79_info" {
     block_cfN79_info:
         const _cfN79;
         const 1;
         const 562954248388638;
         const SfCR7_srt+936;
 },
 _cfN7o() //  [R1]
         { []
         }
     {offset
       cfN7o: // global
           if (R1 & 7 == 1) goto ufN7W; else goto cfN7B;
       ufN7W: // global
           Sp = Sp + 24;
           call _cfN7w() args: 0, res: 0, upd: 0;
       cfN7B: // global
           I64[Sp - 8] = block_cfN7z_info;
           _sfCA7::P64 = P64[R1 + 6];
           _sfCA8::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCA8::P64;
           P64[Sp + 16] = _sfCA7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN82; else goto cfN7C;
       ufN82: // global
           call _cfN7z(R1) args: 0, res: 0, upd: 0;
       cfN7C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN7o_info" {
     block_cfN7o_info:
         const _cfN7o;
         const 2;
         const 562954248388638;
         const SfCR7_srt+936;
 },
 _cfN7w() //  []
         { []
         }
     {offset
       cfN7w: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfN7z() //  [R1]
         { []
         }
     {offset
       cfN7z: // global
           I64[Sp] = block_cfN7G_info;
           R3 = Data.Semigroup.$fReadWrappedMonoid4_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN7z_info" {
     block_cfN7z_info:
         const _cfN7z;
         const 3;
         const 562954248388638;
         const SfCR7_srt+936;
 },
 _cfN7G() //  [R1]
         { []
         }
     {offset
       cfN7G: // global
           if (R1 & 7 == 1) goto cfN7N; else goto cfN7R;
       cfN7N: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfN76() args: 0, res: 0, upd: 0;
       cfN7R: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN7G_info" {
     block_cfN7G_info:
         const _cfN7G;
         const 3;
         const 562954248388638;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.004833403 UTC

[section ""data" . $cWrapMonoid2_rfC6D_closure" {
     $cWrapMonoid2_rfC6D_closure:
         const Data.Data.AlgConstr_con_info;
         const $cWrapMonoid3_rfC6E_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataWrappedMonoid6_closure" {
     Data.Semigroup.$fDataWrappedMonoid6_closure:
         const :_con_info;
         const Data.Semigroup.$cWrapMonoid_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataWrappedMonoid5_closure" {
     Data.Semigroup.$fDataWrappedMonoid5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataWrappedMonoid6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tWrappedMonoid_closure" {
     Data.Semigroup.$tWrappedMonoid_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataWrappedMonoid7_closure;
         const Data.Semigroup.$fDataWrappedMonoid5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cWrapMonoid_closure" {
     Data.Semigroup.$cWrapMonoid_closure:
         const Data.Data.Constr_con_info;
         const $cWrapMonoid2_rfC6D_closure+1;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const $cWrapMonoid1_rfC6B_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tWrappedMonoid_closure+1;
         const 0;
 },
 section ""data" . $cWrapMonoid3_rfC6E_closure" {
     $cWrapMonoid3_rfC6E_closure:
         const $cWrapMonoid3_rfC6E_info;
         const 0;
         const 0;
         const 0;
 },
 $cWrapMonoid3_rfC6E_entry() //  [R1]
         { []
         }
     {offset
       cfN8J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfN8K; else goto cfN8L;
       cfN8K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfN8L: // global
           (_cfN8G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfN8G::I64 == 0) goto cfN8I; else goto cfN8H;
       cfN8I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfN8H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfN8G::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataWrappedMonoid6_closure+2;
           Sp = Sp - 16;
           call go5_rfC6C_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cWrapMonoid3_rfC6E_info" {
     $cWrapMonoid3_rfC6E_info:
         const $cWrapMonoid3_rfC6E_entry;
         const 0;
         const 422216760033301;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.0120606 UTC

[section ""data" . $cOption1_rfC6F_closure" {
     $cOption1_rfC6F_closure:
         const :_con_info;
         const Data.Semigroup.$fReadOption2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.016781237 UTC

[section ""data" . go6_rfC6G_closure" {
     go6_rfC6G_closure:
         const go6_rfC6G_info;
         const 0;
 },
 go6_rfC6G_entry() //  [R2, R3]
         { []
         }
     {offset
       cfN9a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfN9b; else goto ufN9O;
       cfN9b: // global
           R3 = R3;
           R2 = R2;
           R1 = go6_rfC6G_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufN9O: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfN90() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go6_rfC6G_info" {
     go6_rfC6G_info:
         const go6_rfC6G_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const SfCR7_srt+936;
 },
 _cfN90() //  []
         { []
         }
     {offset
       cfN90: // global
           _sfCAg::P64 = P64[Sp];
           I64[Sp] = block_cfN93_info;
           R1 = _sfCAg::P64;
           if (R1 & 7 != 0) goto ufN9S; else goto cfN94;
       ufN9S: // global
           call _cfN93(R1) args: 0, res: 0, upd: 0;
       cfN94: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfN93() //  [R1]
         { []
         }
     {offset
       cfN93: // global
           if (R1 & 7 == 1) goto ufN9P; else goto cfN98;
       ufN9P: // global
           Sp = Sp + 16;
           call _cfN9q() args: 0, res: 0, upd: 0;
       cfN98: // global
           I64[Sp - 8] = block_cfN9i_info;
           _sfCAj::P64 = P64[R1 + 6];
           _sfCAk::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfCAk::P64;
           P64[Sp + 8] = _sfCAj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN9T; else goto cfN9k;
       ufN9T: // global
           call _cfN9i(R1) args: 0, res: 0, upd: 0;
       cfN9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN93_info" {
     block_cfN93_info:
         const _cfN93;
         const 1;
         const 4503603922337822;
         const SfCR7_srt+936;
 },
 _cfN9i() //  [R1]
         { []
         }
     {offset
       cfN9i: // global
           if (R1 & 7 == 1) goto ufN9Q; else goto cfN9v;
       ufN9Q: // global
           Sp = Sp + 24;
           call _cfN9q() args: 0, res: 0, upd: 0;
       cfN9v: // global
           I64[Sp - 8] = block_cfN9t_info;
           _sfCAm::P64 = P64[R1 + 6];
           _sfCAn::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfCAn::P64;
           P64[Sp + 16] = _sfCAm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufN9W; else goto cfN9w;
       ufN9W: // global
           call _cfN9t(R1) args: 0, res: 0, upd: 0;
       cfN9w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN9i_info" {
     block_cfN9i_info:
         const _cfN9i;
         const 2;
         const 4503603922337822;
         const SfCR7_srt+936;
 },
 _cfN9q() //  []
         { []
         }
     {offset
       cfN9q: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfN9t() //  [R1]
         { []
         }
     {offset
       cfN9t: // global
           I64[Sp] = block_cfN9A_info;
           R3 = Data.Semigroup.$fDataOption9_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN9t_info" {
     block_cfN9t_info:
         const _cfN9t;
         const 3;
         const 4503603922337822;
         const SfCR7_srt+936;
 },
 _cfN9A() //  [R1]
         { []
         }
     {offset
       cfN9A: // global
           if (R1 & 7 == 1) goto cfN9H; else goto cfN9L;
       cfN9H: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfN90() args: 0, res: 0, upd: 0;
       cfN9L: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfN9A_info" {
     block_cfN9A_info:
         const _cfN9A;
         const 3;
         const 4503603922337822;
         const SfCR7_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.029723938 UTC

[section ""data" . $cOption2_rfC6H_closure" {
     $cOption2_rfC6H_closure:
         const Data.Data.AlgConstr_con_info;
         const $cOption3_rfC6I_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataOption8_closure" {
     Data.Semigroup.$fDataOption8_closure:
         const :_con_info;
         const Data.Semigroup.$cOption_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataOption7_closure" {
     Data.Semigroup.$fDataOption7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataOption8_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tOption_closure" {
     Data.Semigroup.$tOption_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataOption9_closure;
         const Data.Semigroup.$fDataOption7_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cOption_closure" {
     Data.Semigroup.$cOption_closure:
         const Data.Data.Constr_con_info;
         const $cOption2_rfC6H_closure+1;
         const Data.Semigroup.$fDataOption9_closure;
         const $cOption1_rfC6F_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tOption_closure+1;
         const 0;
 },
 section ""data" . $cOption3_rfC6I_closure" {
     $cOption3_rfC6I_closure:
         const $cOption3_rfC6I_info;
         const 0;
         const 0;
         const 0;
 },
 $cOption3_rfC6I_entry() //  [R1]
         { []
         }
     {offset
       cfNaD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNaE; else goto cfNaF;
       cfNaE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNaF: // global
           (_cfNaA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfNaA::I64 == 0) goto cfNaC; else goto cfNaB;
       cfNaC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfNaB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfNaA::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataOption8_closure+2;
           Sp = Sp - 16;
           call go6_rfC6G_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cOption3_rfC6I_info" {
     $cOption3_rfC6I_info:
         const $cOption3_rfC6I_entry;
         const 0;
         const 3377704015495189;
         const SfCR7_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.036832898 UTC

[section ""cstring" . Data.Semigroup.$trModule4_bytes" {
     Data.Semigroup.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.03867221 UTC

[section ""data" . Data.Semigroup.$trModule3_closure" {
     Data.Semigroup.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.040437075 UTC

[section ""cstring" . Data.Semigroup.$trModule2_bytes" {
     Data.Semigroup.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,101,109,105,103,114,111,117,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.042210358 UTC

[section ""data" . Data.Semigroup.$trModule1_closure" {
     Data.Semigroup.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.044002184 UTC

[section ""data" . Data.Semigroup.$trModule_closure" {
     Data.Semigroup.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Semigroup.$trModule3_closure+1;
         const Data.Semigroup.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.046930301 UTC

[section ""data" . $krep_rfC6J_closure" {
     $krep_rfC6J_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.048741286 UTC

[section ""data" . $krep1_rfC6K_closure" {
     $krep1_rfC6K_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.050543763 UTC

[section ""data" . $krep2_rfC6L_closure" {
     $krep2_rfC6L_closure:
         const :_con_info;
         const $krep1_rfC6K_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.052294157 UTC

[section ""data" . $krep3_rfC6M_closure" {
     $krep3_rfC6M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.054623826 UTC

[section ""data" . Data.Semigroup.$fDataMin3_closure" {
     Data.Semigroup.$fDataMin3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataMin4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.056676845 UTC

[section ""data" . Data.Semigroup.$tcMin_closure" {
     Data.Semigroup.$tcMin_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataMin3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2898124504153588682;
         const 15185633012309158566;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.058641154 UTC

[section ""data" . $krep4_rfC6N_closure" {
     $krep4_rfC6N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcMin_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.060440019 UTC

[section ""data" . Data.Semigroup.$tc'Min1_closure" {
     Data.Semigroup.$tc'Min1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep4_rfC6N_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.062227236 UTC

[section ""cstring" . Data.Semigroup.$tc'Min3_bytes" {
     Data.Semigroup.$tc'Min3_bytes:
         I8[] [39,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.063953801 UTC

[section ""data" . Data.Semigroup.$tc'Min2_closure" {
     Data.Semigroup.$tc'Min2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Min3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.065965859 UTC

[section ""data" . Data.Semigroup.$tc'Min_closure" {
     Data.Semigroup.$tc'Min_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Min2_closure+1;
         const Data.Semigroup.$tc'Min1_closure+4;
         const 7769702422559516318;
         const 9758175179672887730;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.069441077 UTC

[section ""data" . Data.Semigroup.$fDataMin2_closure" {
     Data.Semigroup.$fDataMin2_closure:
         const Data.Semigroup.$fDataMin2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMin2_entry() //  [R1]
         { []
         }
     {offset
       cfNbj: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNbk; else goto cfNbl;
       cfNbk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNbl: // global
           (_cfNbb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfNbb::I64 == 0) goto cfNbd; else goto cfNbc;
       cfNbd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfNbc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfNbb::I64;
           I64[Sp - 24] = block_cfNbe_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataMin3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 15185633012309158566;
           R2 = 2898124504153588682;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin2_info" {
     Data.Semigroup.$fDataMin2_info:
         const Data.Semigroup.$fDataMin2_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1120;
 },
 _cfNbe() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNbe: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfNbf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfNbe_info" {
     block_cfNbe_info:
         const _cfNbe;
         const 0;
         const 30;
 },
 _cfNbf() //  []
         { []
         }
     {offset
       cfNbf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNbo; else goto cfNbn;
       cfNbo: // global
           HpAlloc = 48;
           I64[Sp] = block_cfNbf_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfNbn: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNbf_info" {
     block_cfNbf_info:
         const _cfNbf;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.078322601 UTC

[section ""data" . Data.Semigroup.$fDataMin8_closure" {
     Data.Semigroup.$fDataMin8_closure:
         const Data.Semigroup.$fDataMin8_info;
         const 0;
 },
 Data.Semigroup.$fDataMin8_entry() //  [R2]
         { []
         }
     {offset
       cfNbQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNbR; else goto cfNbS;
       cfNbR: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNbS: // global
           I64[Sp - 8] = block_cfNbO_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin8_info" {
     Data.Semigroup.$fDataMin8_info:
         const Data.Semigroup.$fDataMin8_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfCR7_srt+1128;
 },
 _cfNbO() //  [R1]
         { []
         }
     {offset
       cfNbO: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataMin2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNbO_info" {
     block_cfNbO_info:
         const _cfNbO;
         const 0;
         const 12884901918;
         const SfCR7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.087299654 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cdataCast1_closure" {
     Data.Semigroup.$fDataMin_$cdataCast1_closure:
         const Data.Semigroup.$fDataMin_$cdataCast1_info;
         const 0;
 },
 lvl33_sfCAF_entry() //  [R1]
         { []
         }
     {offset
       cfNcc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNcd; else goto cfNce;
       cfNcd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataMin2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCAF_info" {
     lvl33_sfCAF_info:
         const lvl33_sfCAF_entry;
         const 1;
         const 21474836496;
         const SfCR7_srt+1136;
 },
 sat_sfCAJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNcr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfNcs; else goto cfNct;
       cfNcs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNct: // global
           I64[Sp - 24] = block_cfNck_info;
           _sfCAD::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCAD::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNcE; else goto cfNcl;
       ufNcE: // global
           call _cfNck(R1) args: 0, res: 0, upd: 0;
       cfNcl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCAJ_info" {
     sat_sfCAJ_info:
         const sat_sfCAJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNck() //  [R1]
         { []
         }
     {offset
       cfNck: // global
           if (R1 & 7 == 1) goto cfNco; else goto cfNcp;
       cfNco: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfNcp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNcD; else goto cfNcC;
       cfNcD: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNcC: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNck_info" {
     block_cfNck_info:
         const _cfNck;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataMin_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfNcF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNcJ; else goto cfNcI;
       cfNcJ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNcI: // global
           I64[Hp - 40] = lvl33_sfCAF_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCAJ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cdataCast1_info" {
     Data.Semigroup.$fDataMin_$cdataCast1_info:
         const Data.Semigroup.$fDataMin_$cdataCast1_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const SfCR7_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.096733916 UTC

[section ""data" . Data.Semigroup.$fDataMin1_closure" {
     Data.Semigroup.$fDataMin1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.105130702 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapMp_closure" {
     Data.Semigroup.$fDataMin_$cgmapMp_closure:
         const Data.Semigroup.$fDataMin_$cgmapMp_info;
 },
 lvl33_sfCAO_entry() //  [R1]
         { []
         }
     {offset
       cfNdi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNdj; else goto cfNdk;
       cfNdj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNdk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCAO_info" {
     lvl33_sfCAO_info:
         const lvl33_sfCAO_entry;
         const 1;
         const 16;
 },
 sat_sfCBb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNdx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNdy; else goto cfNdz;
       cfNdy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNdz: // global
           I64[Sp - 24] = block_cfNdu_info;
           _sfCAO::P64 = P64[R1 + 7];
           _sfCAP::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCAO::P64;
           P64[Sp - 8] = _sfCAP::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNdR; else goto cfNdv;
       ufNdR: // global
           call _cfNdu(R1) args: 0, res: 0, upd: 0;
       cfNdv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBb_info" {
     sat_sfCBb_info:
         const sat_sfCBb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNdu() //  [R1]
         { []
         }
     {offset
       cfNdu: // global
           I64[Sp - 8] = block_cfNdC_info;
           _sfCB8::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCB8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNdQ; else goto cfNdE;
       ufNdQ: // global
           call _cfNdC(R1) args: 0, res: 0, upd: 0;
       cfNdE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNdu_info" {
     block_cfNdu_info:
         const _cfNdu;
         const 2;
         const 30;
 },
 _cfNdC() //  [R1]
         { []
         }
     {offset
       cfNdC: // global
           if (R1 & 7 == 1) goto cfNdK; else goto cfNdO;
       cfNdK: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNdO: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNdC_info" {
     block_cfNdC_info:
         const _cfNdC;
         const 3;
         const 30;
 },
 sat_sfCB3_entry() //  [R1]
         { []
         }
     {offset
       cfNed: // global
           _sfCB3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNee; else goto cfNef;
       cfNef: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNeh; else goto cfNeg;
       cfNeh: // global
           HpAlloc = 56;
           goto cfNee;
       cfNee: // global
           R1 = _sfCB3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNeg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCB3::P64;
           _sfCAN::P64 = P64[_sfCB3::P64 + 16];
           _sfCAP::P64 = P64[_sfCB3::P64 + 24];
           _sfCAU::P64 = P64[_sfCB3::P64 + 32];
           _sfCAV::P64 = P64[_sfCB3::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCAU::P64;
           P64[Hp - 24] = _sfCAN::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCAV::P64;
           R2 = _sfCAP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCB3_info" {
     sat_sfCB3_info:
         const sat_sfCB3_entry;
         const 4;
         const 15;
 },
 sat_sfCAZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNet: // global
           _sfCAW::P64 = R2;
           _sfCAZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNeu; else goto cfNev;
       cfNev: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNex; else goto cfNew;
       cfNex: // global
           HpAlloc = 56;
           goto cfNeu;
       cfNeu: // global
           R2 = _sfCAW::P64;
           R1 = _sfCAZ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNew: // global
           _sfCAP::P64 = P64[_sfCAZ::P64 + 7];
           _sfCAU::P64 = P64[_sfCAZ::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCAU::P64;
           P64[Hp - 24] = _sfCAW::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCAP::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCAZ_info" {
     sat_sfCAZ_info:
         const sat_sfCAZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCB0_entry() //  [R1]
         { []
         }
     {offset
       cfNey: // global
           _sfCB0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNez; else goto cfNeA;
       cfNeA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNeC; else goto cfNeB;
       cfNeC: // global
           HpAlloc = 24;
           goto cfNez;
       cfNez: // global
           R1 = _sfCB0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNeB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCB0::P64;
           _sfCAP::P64 = P64[_sfCB0::P64 + 16];
           _sfCAQ::P64 = P64[_sfCB0::P64 + 24];
           _sfCAU::P64 = P64[_sfCB0::P64 + 32];
           I64[Hp - 16] = sat_sfCAZ_info;
           P64[Hp - 8] = _sfCAP::P64;
           P64[Hp] = _sfCAU::P64;
           R2 = _sfCAP::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCAQ::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCB0_info" {
     sat_sfCB0_info:
         const sat_sfCB0_entry;
         const 3;
         const 15;
 },
 sat_sfCB4_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNeD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNeE; else goto cfNeF;
       cfNeE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNeF: // global
           I64[Sp - 40] = block_cfNe2_info;
           _sfCAL::P64 = P64[R1 + 7];
           _sfCAN::P64 = P64[R1 + 15];
           _sfCAP::P64 = P64[R1 + 23];
           _sfCAQ::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCAL::P64;
           P64[Sp - 24] = _sfCAN::P64;
           P64[Sp - 16] = _sfCAP::P64;
           P64[Sp - 8] = _sfCAQ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNeJ; else goto cfNe3;
       ufNeJ: // global
           call _cfNe2(R1) args: 0, res: 0, upd: 0;
       cfNe3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCB4_info" {
     sat_sfCB4_info:
         const sat_sfCB4_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNe2() //  [R1]
         { []
         }
     {offset
       cfNe2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNeI; else goto cfNeH;
       cfNeI: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNeH: // global
           _sfCAU::P64 = P64[R1 + 7];
           _sfCAV::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCB3_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCAP::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCAP::P64;
           P64[Hp - 48] = _sfCAU::P64;
           P64[Hp - 40] = _sfCAV::P64;
           I64[Hp - 32] = sat_sfCB0_info;
           P64[Hp - 16] = _sfCAP::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCAU::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNe2_info" {
     block_cfNe2_info:
         const _cfNe2;
         const 4;
         const 30;
 },
 sat_sfCAR_entry() //  [R1]
         { []
         }
     {offset
       cfNeO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNeP; else goto cfNeQ;
       cfNeP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNeQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMin1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCAR_info" {
     sat_sfCAR_info:
         const sat_sfCAR_entry;
         const 1;
         const 16;
 },
 sat_sfCB5_entry() //  [R1]
         { []
         }
     {offset
       cfNeR: // global
           _sfCB5::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNeS; else goto cfNeT;
       cfNeT: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNeV; else goto cfNeU;
       cfNeV: // global
           HpAlloc = 104;
           goto cfNeS;
       cfNeS: // global
           R1 = _sfCB5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNeU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCB5::P64;
           _sfCAK::P64 = P64[_sfCB5::P64 + 16];
           _sfCAL::P64 = P64[_sfCB5::P64 + 24];
           _sfCAM::P64 = P64[_sfCB5::P64 + 32];
           _sfCAN::P64 = P64[_sfCB5::P64 + 40];
           _sfCAP::P64 = P64[_sfCB5::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCAM::P64;
           P64[Hp - 72] = _sfCAK::P64;
           P64[Hp - 64] = _sfCAN::P64;
           I64[Hp - 56] = sat_sfCB4_info;
           P64[Hp - 48] = _sfCAL::P64;
           P64[Hp - 40] = _sfCAN::P64;
           P64[Hp - 32] = _sfCAP::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCAR_info;
           P64[Hp] = _sfCAP::P64;
           R2 = _sfCAP::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCB5_info" {
     sat_sfCB5_info:
         const sat_sfCB5_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMin_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNeW: // global
           _sfCAN::P64 = R5;
           _sfCAM::P64 = R4;
           _sfCAL::P64 = R3;
           _sfCAK::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfNeX; else goto cfNeY;
       cfNeY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNf0; else goto cfNeZ;
       cfNf0: // global
           HpAlloc = 24;
           goto cfNeX;
       cfNeX: // global
           R5 = _sfCAN::P64;
           R4 = _sfCAM::P64;
           R3 = _sfCAL::P64;
           R2 = _sfCAK::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNeZ: // global
           I64[Hp - 16] = lvl33_sfCAO_info;
           P64[Hp] = _sfCAL::P64;
           I64[Sp - 48] = block_cfNdl_info;
           R2 = _sfCAL::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCAK::P64;
           P64[Sp - 24] = _sfCAL::P64;
           P64[Sp - 16] = _sfCAM::P64;
           P64[Sp - 8] = _sfCAN::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapMp_info" {
     Data.Semigroup.$fDataMin_$cgmapMp_info:
         const Data.Semigroup.$fDataMin_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNdl() //  [R1]
         { []
         }
     {offset
       cfNdl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNf3; else goto cfNf2;
       cfNf3: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNf2: // global
           I64[Hp - 72] = sat_sfCBb_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCB5_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNdl_info" {
     block_cfNdl_info:
         const _cfNdl;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.134500735 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapM_closure" {
     Data.Semigroup.$fDataMin_$cgmapM_closure:
         const Data.Semigroup.$fDataMin_$cgmapM_info;
 },
 sat_sfCBl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNgx: // global
           _sfCBj::P64 = R2;
           _sfCBl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNgy; else goto cfNgz;
       cfNgz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfNgB; else goto cfNgA;
       cfNgB: // global
           HpAlloc = 32;
           goto cfNgy;
       cfNgy: // global
           R2 = _sfCBj::P64;
           R1 = _sfCBl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNgA: // global
           _sfCBd::P64 = P64[_sfCBl::P64 + 7];
           _sfCBi::P64 = P64[_sfCBl::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCBi::P64;
           P64[Hp] = _sfCBj::P64;
           R2 = _sfCBd::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBl_info" {
     sat_sfCBl_info:
         const sat_sfCBl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCBm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNgC: // global
           _sfCBi::P64 = R2;
           _sfCBm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNgD; else goto cfNgE;
       cfNgE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNgG; else goto cfNgF;
       cfNgG: // global
           HpAlloc = 24;
           goto cfNgD;
       cfNgD: // global
           R2 = _sfCBi::P64;
           R1 = _sfCBm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNgF: // global
           _sfCBd::P64 = P64[_sfCBm::P64 + 7];
           _sfCBg::P64 = P64[_sfCBm::P64 + 15];
           I64[Hp - 16] = sat_sfCBl_info;
           P64[Hp - 8] = _sfCBd::P64;
           P64[Hp] = _sfCBi::P64;
           R2 = _sfCBd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCBg::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBm_info" {
     sat_sfCBm_info:
         const sat_sfCBm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCBh_entry() //  [R1]
         { []
         }
     {offset
       cfNgL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNgM; else goto cfNgN;
       cfNgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNgN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCBh_info" {
     sat_sfCBh_info:
         const sat_sfCBh_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMin_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNgO: // global
           _sfCBf::P64 = R5;
           _sfCBe::P64 = R4;
           _sfCBd::P64 = R3;
           _sfCBc::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNgP; else goto cfNgQ;
       cfNgQ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNgS; else goto cfNgR;
       cfNgS: // global
           HpAlloc = 88;
           goto cfNgP;
       cfNgP: // global
           R5 = _sfCBf::P64;
           R4 = _sfCBe::P64;
           R3 = _sfCBd::P64;
           R2 = _sfCBc::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNgR: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfCBe::P64;
           P64[Hp - 56] = _sfCBc::P64;
           P64[Hp - 48] = _sfCBf::P64;
           I64[Hp - 40] = sat_sfCBm_info;
           P64[Hp - 32] = _sfCBd::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfCBh_info;
           P64[Hp] = _sfCBd::P64;
           R2 = _sfCBd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapM_info" {
     Data.Semigroup.$fDataMin_$cgmapM_info:
         const Data.Semigroup.$fDataMin_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.14438687 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapQi_closure" {
     Data.Semigroup.$fDataMin_$cgmapQi_closure:
         const Data.Semigroup.$fDataMin_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataMin_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNhm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNhn; else goto cfNho;
       cfNhn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNho: // global
           I64[Sp - 32] = block_cfNhj_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufNhw; else goto cfNhk;
       ufNhw: // global
           call _cfNhj(R1) args: 0, res: 0, upd: 0;
       cfNhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapQi_info" {
     Data.Semigroup.$fDataMin_$cgmapQi_info:
         const Data.Semigroup.$fDataMin_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfCR7_srt+1168;
 },
 _cfNhj() //  [R1]
         { []
         }
     {offset
       cfNhj: // global
           if (I64[R1 + 7] == 0) goto cfNhv; else goto cfNhu;
       cfNhv: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNhu: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNhj_info" {
     block_cfNhj_info:
         const _cfNhj;
         const 3;
         const 4294967326;
         const SfCR7_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.156506957 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapMo_closure" {
     Data.Semigroup.$fDataMin_$cgmapMo_closure:
         const Data.Semigroup.$fDataMin_$cgmapMo_info;
 },
 lvl33_sfCBy_entry() //  [R1]
         { []
         }
     {offset
       cfNhO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNhP; else goto cfNhQ;
       cfNhP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNhQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCBy_info" {
     lvl33_sfCBy_info:
         const lvl33_sfCBy_entry;
         const 1;
         const 16;
 },
 sat_sfCBY_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNi3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNi4; else goto cfNi5;
       cfNi4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNi5: // global
           I64[Sp - 24] = block_cfNi0_info;
           _sfCBy::P64 = P64[R1 + 7];
           _sfCBz::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCBy::P64;
           P64[Sp - 8] = _sfCBz::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNin; else goto cfNi1;
       ufNin: // global
           call _cfNi0(R1) args: 0, res: 0, upd: 0;
       cfNi1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBY_info" {
     sat_sfCBY_info:
         const sat_sfCBY_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNi0() //  [R1]
         { []
         }
     {offset
       cfNi0: // global
           I64[Sp - 8] = block_cfNi8_info;
           _sfCBV::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCBV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNim; else goto cfNia;
       ufNim: // global
           call _cfNi8(R1) args: 0, res: 0, upd: 0;
       cfNia: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNi0_info" {
     block_cfNi0_info:
         const _cfNi0;
         const 2;
         const 30;
 },
 _cfNi8() //  [R1]
         { []
         }
     {offset
       cfNi8: // global
           if (R1 & 7 == 1) goto cfNig; else goto cfNik;
       cfNig: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNik: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNi8_info" {
     block_cfNi8_info:
         const _cfNi8;
         const 3;
         const 30;
 },
 sat_sfCBO_entry() //  [R1]
         { []
         }
     {offset
       cfNiO: // global
           _sfCBO::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNiP; else goto cfNiQ;
       cfNiQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNiS; else goto cfNiR;
       cfNiS: // global
           HpAlloc = 56;
           goto cfNiP;
       cfNiP: // global
           R1 = _sfCBO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNiR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCBO::P64;
           _sfCBx::P64 = P64[_sfCBO::P64 + 16];
           _sfCBz::P64 = P64[_sfCBO::P64 + 24];
           _sfCBE::P64 = P64[_sfCBO::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCBE::P64;
           P64[Hp - 24] = _sfCBx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCBz::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCBO_info" {
     sat_sfCBO_info:
         const sat_sfCBO_entry;
         const 3;
         const 15;
 },
 sat_sfCBK_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNj4: // global
           _sfCBH::P64 = R2;
           _sfCBK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNj5; else goto cfNj6;
       cfNj6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNj8; else goto cfNj7;
       cfNj8: // global
           HpAlloc = 56;
           goto cfNj5;
       cfNj5: // global
           R2 = _sfCBH::P64;
           R1 = _sfCBK::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNj7: // global
           _sfCBz::P64 = P64[_sfCBK::P64 + 7];
           _sfCBE::P64 = P64[_sfCBK::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCBE::P64;
           P64[Hp - 24] = _sfCBH::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCBz::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBK_info" {
     sat_sfCBK_info:
         const sat_sfCBK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCBL_entry() //  [R1]
         { []
         }
     {offset
       cfNj9: // global
           _sfCBL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNja; else goto cfNjb;
       cfNjb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNjd; else goto cfNjc;
       cfNjd: // global
           HpAlloc = 24;
           goto cfNja;
       cfNja: // global
           R1 = _sfCBL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNjc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCBL::P64;
           _sfCBz::P64 = P64[_sfCBL::P64 + 16];
           _sfCBA::P64 = P64[_sfCBL::P64 + 24];
           _sfCBE::P64 = P64[_sfCBL::P64 + 32];
           I64[Hp - 16] = sat_sfCBK_info;
           P64[Hp - 8] = _sfCBz::P64;
           P64[Hp] = _sfCBE::P64;
           R2 = _sfCBz::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCBA::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCBL_info" {
     sat_sfCBL_info:
         const sat_sfCBL_entry;
         const 3;
         const 15;
 },
 sat_sfCBR_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNje: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfNjf; else goto cfNjg;
       cfNjf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNjg: // global
           I64[Sp - 40] = block_cfNiy_info;
           _sfCBv::P64 = P64[R1 + 7];
           _sfCBx::P64 = P64[R1 + 15];
           _sfCBz::P64 = P64[R1 + 23];
           _sfCBA::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCBv::P64;
           P64[Sp - 24] = _sfCBx::P64;
           P64[Sp - 16] = _sfCBz::P64;
           P64[Sp - 8] = _sfCBA::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNjx; else goto cfNiz;
       ufNjx: // global
           call _cfNiy(R1) args: 0, res: 0, upd: 0;
       cfNiz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCBR_info" {
     sat_sfCBR_info:
         const sat_sfCBR_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNiy() //  [R1]
         { []
         }
     {offset
       cfNiy: // global
           I64[Sp - 8] = block_cfNiD_info;
           _sfCBE::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCBE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNjw; else goto cfNiE;
       ufNjw: // global
           call _cfNiD(R1) args: 0, res: 0, upd: 0;
       cfNiE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNiy_info" {
     block_cfNiy_info:
         const _cfNiy;
         const 4;
         const 30;
 },
 _cfNiD() //  [R1]
         { []
         }
     {offset
       cfNiD: // global
           _sfCBx::P64 = P64[Sp + 24];
           _sfCBz::P64 = P64[Sp + 32];
           _sfCBE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfNjj; else goto cfNjn;
       cfNjj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNjm; else goto cfNjl;
       cfNjm: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNjl: // global
           I64[Hp - 72] = sat_sfCBO_info;
           P64[Hp - 56] = _sfCBx::P64;
           P64[Hp - 48] = _sfCBz::P64;
           P64[Hp - 40] = _sfCBE::P64;
           I64[Hp - 32] = sat_sfCBL_info;
           P64[Hp - 16] = _sfCBz::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCBE::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfNjn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNjs; else goto cfNjr;
       cfNjs: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNjr: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCBE::P64;
           P64[Hp - 24] = _sfCBx::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCBz::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNiD_info" {
     block_cfNiD_info:
         const _cfNiD;
         const 5;
         const 30;
 },
 sat_sfCBB_entry() //  [R1]
         { []
         }
     {offset
       cfNjC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNjD; else goto cfNjE;
       cfNjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMin1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCBB_info" {
     sat_sfCBB_info:
         const sat_sfCBB_entry;
         const 1;
         const 16;
 },
 sat_sfCBS_entry() //  [R1]
         { []
         }
     {offset
       cfNjF: // global
           _sfCBS::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNjG; else goto cfNjH;
       cfNjH: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNjJ; else goto cfNjI;
       cfNjJ: // global
           HpAlloc = 104;
           goto cfNjG;
       cfNjG: // global
           R1 = _sfCBS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNjI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCBS::P64;
           _sfCBu::P64 = P64[_sfCBS::P64 + 16];
           _sfCBv::P64 = P64[_sfCBS::P64 + 24];
           _sfCBw::P64 = P64[_sfCBS::P64 + 32];
           _sfCBx::P64 = P64[_sfCBS::P64 + 40];
           _sfCBz::P64 = P64[_sfCBS::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCBw::P64;
           P64[Hp - 72] = _sfCBu::P64;
           P64[Hp - 64] = _sfCBx::P64;
           I64[Hp - 56] = sat_sfCBR_info;
           P64[Hp - 48] = _sfCBv::P64;
           P64[Hp - 40] = _sfCBx::P64;
           P64[Hp - 32] = _sfCBz::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCBB_info;
           P64[Hp] = _sfCBz::P64;
           R2 = _sfCBz::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCBS_info" {
     sat_sfCBS_info:
         const sat_sfCBS_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMin_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNjK: // global
           _sfCBx::P64 = R5;
           _sfCBw::P64 = R4;
           _sfCBv::P64 = R3;
           _sfCBu::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfNjL; else goto cfNjM;
       cfNjM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNjO; else goto cfNjN;
       cfNjO: // global
           HpAlloc = 24;
           goto cfNjL;
       cfNjL: // global
           R5 = _sfCBx::P64;
           R4 = _sfCBw::P64;
           R3 = _sfCBv::P64;
           R2 = _sfCBu::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNjN: // global
           I64[Hp - 16] = lvl33_sfCBy_info;
           P64[Hp] = _sfCBv::P64;
           I64[Sp - 48] = block_cfNhR_info;
           R2 = _sfCBv::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCBu::P64;
           P64[Sp - 24] = _sfCBv::P64;
           P64[Sp - 16] = _sfCBw::P64;
           P64[Sp - 8] = _sfCBx::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapMo_info" {
     Data.Semigroup.$fDataMin_$cgmapMo_info:
         const Data.Semigroup.$fDataMin_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNhR() //  [R1]
         { []
         }
     {offset
       cfNhR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNjR; else goto cfNjQ;
       cfNjR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNjQ: // global
           I64[Hp - 72] = sat_sfCBY_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCBS_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNhR_info" {
     block_cfNhR_info:
         const _cfNhR;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.18739185 UTC

[section ""data" . lvl12_rfC6O_closure" {
     lvl12_rfC6O_closure:
         const lvl12_rfC6O_info;
         const 0;
 },
 lvl12_rfC6O_entry() //  []
         { []
         }
     {offset
       cfNlg: // global
           R1 = Data.Semigroup.$cMin_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rfC6O_info" {
     lvl12_rfC6O_info:
         const lvl12_rfC6O_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.190700544 UTC

[section ""data" . lvl13_rfC6P_closure" {
     lvl13_rfC6P_closure:
         const lvl13_rfC6P_info;
         const 0;
 },
 lvl13_rfC6P_entry() //  []
         { []
         }
     {offset
       cfNls: // global
           R1 = Data.Semigroup.$tMin_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_rfC6P_info" {
     lvl13_rfC6P_info:
         const lvl13_rfC6P_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.193892696 UTC

[section ""data" . lvl14_rfC6Q_closure" {
     lvl14_rfC6Q_closure:
         const lvl14_rfC6Q_info;
 },
 lvl14_rfC6Q_entry() //  []
         { []
         }
     {offset
       cfNlE: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_rfC6Q_info" {
     lvl14_rfC6Q_info:
         const lvl14_rfC6Q_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.202496377 UTC

[section ""data" . Data.Semigroup.$fDataMin_closure" {
     Data.Semigroup.$fDataMin_closure:
         const Data.Semigroup.$fDataMin_info;
         const 0;
 },
 sat_sfCCy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNlV: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapMo_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCy_info" {
     sat_sfCCy_info:
         const sat_sfCCy_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCCx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNm3: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapMp_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCx_info" {
     sat_sfCCx_info:
         const sat_sfCCx_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCCw_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNmb: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapM_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCw_info" {
     sat_sfCCw_info:
         const sat_sfCCw_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCCv_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNmj: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapQi_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCv_info" {
     sat_sfCCv_info:
         const sat_sfCCv_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1176;
 },
 sat_sfCCu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNmt: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfNmx; else goto cfNmw;
       cfNmx: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNmw: // global
           _sfCC3::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfCC3::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCu_info" {
     sat_sfCCu_info:
         const sat_sfCCu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCCq_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNmE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNmI; else goto cfNmH;
       cfNmI: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNmH: // global
           _sfCC3::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCC3::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfCCl::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfCCl::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCq_info" {
     sat_sfCCq_info:
         const sat_sfCCq_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCCk_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNmP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNmT; else goto cfNmS;
       cfNmT: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNmS: // global
           _sfCC3::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCC3::P64;
           P64[Hp] = R5;
           _sfCCg::P64 = R3;
           R3 = Hp - 32;
           _sfCCf::P64 = R2;
           R2 = _sfCCg::P64;
           R1 = _sfCCf::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCk_info" {
     sat_sfCCk_info:
         const sat_sfCCk_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCCe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNmZ: // global
           R3 = R3;
           _sfCCc::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfCCc::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCe_info" {
     sat_sfCCe_info:
         const sat_sfCCe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCCb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNn7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataMin_$cdataCast1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCb_info" {
     sat_sfCCb_info:
         const sat_sfCCb_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1160;
 },
 sat_sfCC9_entry() //  [R1]
         { []
         }
     {offset
       cfNnj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNnk; else goto cfNnl;
       cfNnk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNnl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCC9_info" {
     sat_sfCC9_info:
         const sat_sfCC9_entry;
         const 1;
         const 16;
 },
 sat_sfCCa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNnm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNnq; else goto cfNnp;
       cfNnq: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNnp: // global
           _sfCC3::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCC9_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCC6::P64 = R2;
           R2 = _sfCC3::P64;
           R1 = _sfCC6::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCa_info" {
     sat_sfCCa_info:
         const sat_sfCCa_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCC5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNnw: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgfoldl_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCC5_info" {
     sat_sfCC5_info:
         const sat_sfCC5_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCC4_entry() //  [R1]
         { []
         }
     {offset
       cfNnD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNnE; else goto cfNnF;
       cfNnE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNnF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataMin8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCC4_info" {
     sat_sfCC4_info:
         const sat_sfCC4_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1144;
 },
 Data.Semigroup.$fDataMin_entry() //  [R2]
         { []
         }
     {offset
       cfNnH: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfNnL; else goto cfNnK;
       cfNnL: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNnK: // global
           I64[Hp - 320] = sat_sfCCy_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCCx_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCCw_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCCv_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCCu_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCCq_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCCk_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCCe_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCCb_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCCa_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCC5_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCC4_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl12_rfC6O_closure+1;
           P64[Hp - 80] = lvl13_rfC6P_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl14_rfC6Q_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_info" {
     Data.Semigroup.$fDataMin_info:
         const Data.Semigroup.$fDataMin_entry;
         const 0;
         const 3938485010446;
         const 4294967301;
         const SfCR7_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.227782466 UTC

[section ""data" . Data.Semigroup.$fDataMax3_closure" {
     Data.Semigroup.$fDataMax3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataMax4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.229934457 UTC

[section ""data" . Data.Semigroup.$tcMax_closure" {
     Data.Semigroup.$tcMax_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataMax3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 10813679156066679206;
         const 10491840004411982061;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.231734782 UTC

[section ""data" . $krep5_rfC6R_closure" {
     $krep5_rfC6R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcMax_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.233527675 UTC

[section ""data" . Data.Semigroup.$tc'Max1_closure" {
     Data.Semigroup.$tc'Max1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep5_rfC6R_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.235181163 UTC

[section ""cstring" . Data.Semigroup.$tc'Max3_bytes" {
     Data.Semigroup.$tc'Max3_bytes:
         I8[] [39,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.236858133 UTC

[section ""data" . Data.Semigroup.$tc'Max2_closure" {
     Data.Semigroup.$tc'Max2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Max3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.238700872 UTC

[section ""data" . Data.Semigroup.$tc'Max_closure" {
     Data.Semigroup.$tc'Max_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Max2_closure+1;
         const Data.Semigroup.$tc'Max1_closure+4;
         const 9964620667386625613;
         const 8300955803911017019;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.242168858 UTC

[section ""data" . Data.Semigroup.$fDataMax2_closure" {
     Data.Semigroup.$fDataMax2_closure:
         const Data.Semigroup.$fDataMax2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMax2_entry() //  [R1]
         { []
         }
     {offset
       cfNp2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNp3; else goto cfNp4;
       cfNp3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNp4: // global
           (_cfNoU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfNoU::I64 == 0) goto cfNoW; else goto cfNoV;
       cfNoW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfNoV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfNoU::I64;
           I64[Sp - 24] = block_cfNoX_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataMax3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 10491840004411982061;
           R2 = 10813679156066679206;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax2_info" {
     Data.Semigroup.$fDataMax2_info:
         const Data.Semigroup.$fDataMax2_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1120;
 },
 _cfNoX() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNoX: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfNoY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfNoX_info" {
     block_cfNoX_info:
         const _cfNoX;
         const 0;
         const 30;
 },
 _cfNoY() //  []
         { []
         }
     {offset
       cfNoY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNp7; else goto cfNp6;
       cfNp7: // global
           HpAlloc = 48;
           I64[Sp] = block_cfNoY_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfNp6: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNoY_info" {
     block_cfNoY_info:
         const _cfNoY;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.250800077 UTC

[section ""data" . Data.Semigroup.$fDataMax8_closure" {
     Data.Semigroup.$fDataMax8_closure:
         const Data.Semigroup.$fDataMax8_info;
         const 0;
 },
 Data.Semigroup.$fDataMax8_entry() //  [R2]
         { []
         }
     {offset
       cfNpz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNpA; else goto cfNpB;
       cfNpA: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNpB: // global
           I64[Sp - 8] = block_cfNpx_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax8_info" {
     Data.Semigroup.$fDataMax8_info:
         const Data.Semigroup.$fDataMax8_entry;
         const 0;
         const 52780853100558;
         const 4294967301;
         const SfCR7_srt+1128;
 },
 _cfNpx() //  [R1]
         { []
         }
     {offset
       cfNpx: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataMax2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNpx_info" {
     block_cfNpx_info:
         const _cfNpx;
         const 0;
         const 17596481011742;
         const SfCR7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.257464053 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cdataCast1_closure" {
     Data.Semigroup.$fDataMax_$cdataCast1_closure:
         const Data.Semigroup.$fDataMax_$cdataCast1_info;
         const 0;
 },
 lvl33_sfCCJ_entry() //  [R1]
         { []
         }
     {offset
       cfNpV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNpW; else goto cfNpX;
       cfNpW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNpX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataMax2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCCJ_info" {
     lvl33_sfCCJ_info:
         const lvl33_sfCCJ_entry;
         const 1;
         const 2203318222864;
         const SfCR7_srt+1152;
 },
 sat_sfCCN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNqa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfNqb; else goto cfNqc;
       cfNqb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNqc: // global
           I64[Sp - 24] = block_cfNq3_info;
           _sfCCH::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCCH::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNqn; else goto cfNq4;
       ufNqn: // global
           call _cfNq3(R1) args: 0, res: 0, upd: 0;
       cfNq4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCCN_info" {
     sat_sfCCN_info:
         const sat_sfCCN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNq3() //  [R1]
         { []
         }
     {offset
       cfNq3: // global
           if (R1 & 7 == 1) goto cfNq7; else goto cfNq8;
       cfNq7: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfNq8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNqm; else goto cfNql;
       cfNqm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNql: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNq3_info" {
     block_cfNq3_info:
         const _cfNq3;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataMax_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfNqo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNqs; else goto cfNqr;
       cfNqs: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNqr: // global
           I64[Hp - 40] = lvl33_sfCCJ_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCCN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cdataCast1_info" {
     Data.Semigroup.$fDataMax_$cdataCast1_info:
         const Data.Semigroup.$fDataMax_$cdataCast1_entry;
         const 0;
         const 10999411245070;
         const 8589934607;
         const SfCR7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.266025483 UTC

[section ""data" . Data.Semigroup.$fDataMax1_closure" {
     Data.Semigroup.$fDataMax1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.274952281 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapMp_closure" {
     Data.Semigroup.$fDataMax_$cgmapMp_closure:
         const Data.Semigroup.$fDataMax_$cgmapMp_info;
 },
 lvl33_sfCCS_entry() //  [R1]
         { []
         }
     {offset
       cfNr1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNr2; else goto cfNr3;
       cfNr2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNr3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCCS_info" {
     lvl33_sfCCS_info:
         const lvl33_sfCCS_entry;
         const 1;
         const 16;
 },
 sat_sfCDf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNrg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNrh; else goto cfNri;
       cfNrh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNri: // global
           I64[Sp - 24] = block_cfNrd_info;
           _sfCCS::P64 = P64[R1 + 7];
           _sfCCT::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCCS::P64;
           P64[Sp - 8] = _sfCCT::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNrA; else goto cfNre;
       ufNrA: // global
           call _cfNrd(R1) args: 0, res: 0, upd: 0;
       cfNre: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCDf_info" {
     sat_sfCDf_info:
         const sat_sfCDf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNrd() //  [R1]
         { []
         }
     {offset
       cfNrd: // global
           I64[Sp - 8] = block_cfNrl_info;
           _sfCDc::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCDc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNrz; else goto cfNrn;
       ufNrz: // global
           call _cfNrl(R1) args: 0, res: 0, upd: 0;
       cfNrn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNrd_info" {
     block_cfNrd_info:
         const _cfNrd;
         const 2;
         const 30;
 },
 _cfNrl() //  [R1]
         { []
         }
     {offset
       cfNrl: // global
           if (R1 & 7 == 1) goto cfNrt; else goto cfNrx;
       cfNrt: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNrx: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNrl_info" {
     block_cfNrl_info:
         const _cfNrl;
         const 3;
         const 30;
 },
 sat_sfCD7_entry() //  [R1]
         { []
         }
     {offset
       cfNrW: // global
           _sfCD7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNrX; else goto cfNrY;
       cfNrY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNs0; else goto cfNrZ;
       cfNs0: // global
           HpAlloc = 56;
           goto cfNrX;
       cfNrX: // global
           R1 = _sfCD7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNrZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCD7::P64;
           _sfCCR::P64 = P64[_sfCD7::P64 + 16];
           _sfCCT::P64 = P64[_sfCD7::P64 + 24];
           _sfCCY::P64 = P64[_sfCD7::P64 + 32];
           _sfCCZ::P64 = P64[_sfCD7::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCCY::P64;
           P64[Hp - 24] = _sfCCR::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCCZ::P64;
           R2 = _sfCCT::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCD7_info" {
     sat_sfCD7_info:
         const sat_sfCD7_entry;
         const 4;
         const 15;
 },
 sat_sfCD3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNsc: // global
           _sfCD0::P64 = R2;
           _sfCD3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNsd; else goto cfNse;
       cfNse: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNsg; else goto cfNsf;
       cfNsg: // global
           HpAlloc = 56;
           goto cfNsd;
       cfNsd: // global
           R2 = _sfCD0::P64;
           R1 = _sfCD3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNsf: // global
           _sfCCT::P64 = P64[_sfCD3::P64 + 7];
           _sfCCY::P64 = P64[_sfCD3::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCCY::P64;
           P64[Hp - 24] = _sfCD0::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCCT::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCD3_info" {
     sat_sfCD3_info:
         const sat_sfCD3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCD4_entry() //  [R1]
         { []
         }
     {offset
       cfNsh: // global
           _sfCD4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNsi; else goto cfNsj;
       cfNsj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNsl; else goto cfNsk;
       cfNsl: // global
           HpAlloc = 24;
           goto cfNsi;
       cfNsi: // global
           R1 = _sfCD4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNsk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCD4::P64;
           _sfCCT::P64 = P64[_sfCD4::P64 + 16];
           _sfCCU::P64 = P64[_sfCD4::P64 + 24];
           _sfCCY::P64 = P64[_sfCD4::P64 + 32];
           I64[Hp - 16] = sat_sfCD3_info;
           P64[Hp - 8] = _sfCCT::P64;
           P64[Hp] = _sfCCY::P64;
           R2 = _sfCCT::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCCU::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCD4_info" {
     sat_sfCD4_info:
         const sat_sfCD4_entry;
         const 3;
         const 15;
 },
 sat_sfCD8_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNsm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNsn; else goto cfNso;
       cfNsn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNso: // global
           I64[Sp - 40] = block_cfNrL_info;
           _sfCCP::P64 = P64[R1 + 7];
           _sfCCR::P64 = P64[R1 + 15];
           _sfCCT::P64 = P64[R1 + 23];
           _sfCCU::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCCP::P64;
           P64[Sp - 24] = _sfCCR::P64;
           P64[Sp - 16] = _sfCCT::P64;
           P64[Sp - 8] = _sfCCU::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNss; else goto cfNrM;
       ufNss: // global
           call _cfNrL(R1) args: 0, res: 0, upd: 0;
       cfNrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCD8_info" {
     sat_sfCD8_info:
         const sat_sfCD8_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNrL() //  [R1]
         { []
         }
     {offset
       cfNrL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNsr; else goto cfNsq;
       cfNsr: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNsq: // global
           _sfCCY::P64 = P64[R1 + 7];
           _sfCCZ::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCD7_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCCT::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCCT::P64;
           P64[Hp - 48] = _sfCCY::P64;
           P64[Hp - 40] = _sfCCZ::P64;
           I64[Hp - 32] = sat_sfCD4_info;
           P64[Hp - 16] = _sfCCT::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCCY::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNrL_info" {
     block_cfNrL_info:
         const _cfNrL;
         const 4;
         const 30;
 },
 sat_sfCCV_entry() //  [R1]
         { []
         }
     {offset
       cfNsx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNsy; else goto cfNsz;
       cfNsy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNsz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMax1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCCV_info" {
     sat_sfCCV_info:
         const sat_sfCCV_entry;
         const 1;
         const 16;
 },
 sat_sfCD9_entry() //  [R1]
         { []
         }
     {offset
       cfNsA: // global
           _sfCD9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNsB; else goto cfNsC;
       cfNsC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNsE; else goto cfNsD;
       cfNsE: // global
           HpAlloc = 104;
           goto cfNsB;
       cfNsB: // global
           R1 = _sfCD9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNsD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCD9::P64;
           _sfCCO::P64 = P64[_sfCD9::P64 + 16];
           _sfCCP::P64 = P64[_sfCD9::P64 + 24];
           _sfCCQ::P64 = P64[_sfCD9::P64 + 32];
           _sfCCR::P64 = P64[_sfCD9::P64 + 40];
           _sfCCT::P64 = P64[_sfCD9::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCCQ::P64;
           P64[Hp - 72] = _sfCCO::P64;
           P64[Hp - 64] = _sfCCR::P64;
           I64[Hp - 56] = sat_sfCD8_info;
           P64[Hp - 48] = _sfCCP::P64;
           P64[Hp - 40] = _sfCCR::P64;
           P64[Hp - 32] = _sfCCT::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCCV_info;
           P64[Hp] = _sfCCT::P64;
           R2 = _sfCCT::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCD9_info" {
     sat_sfCD9_info:
         const sat_sfCD9_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMax_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNsF: // global
           _sfCCR::P64 = R5;
           _sfCCQ::P64 = R4;
           _sfCCP::P64 = R3;
           _sfCCO::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfNsG; else goto cfNsH;
       cfNsH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNsJ; else goto cfNsI;
       cfNsJ: // global
           HpAlloc = 24;
           goto cfNsG;
       cfNsG: // global
           R5 = _sfCCR::P64;
           R4 = _sfCCQ::P64;
           R3 = _sfCCP::P64;
           R2 = _sfCCO::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNsI: // global
           I64[Hp - 16] = lvl33_sfCCS_info;
           P64[Hp] = _sfCCP::P64;
           I64[Sp - 48] = block_cfNr4_info;
           R2 = _sfCCP::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCCO::P64;
           P64[Sp - 24] = _sfCCP::P64;
           P64[Sp - 16] = _sfCCQ::P64;
           P64[Sp - 8] = _sfCCR::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapMp_info" {
     Data.Semigroup.$fDataMax_$cgmapMp_info:
         const Data.Semigroup.$fDataMax_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNr4() //  [R1]
         { []
         }
     {offset
       cfNr4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNsM; else goto cfNsL;
       cfNsM: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNsL: // global
           I64[Hp - 72] = sat_sfCDf_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCD9_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNr4_info" {
     block_cfNr4_info:
         const _cfNr4;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.303547666 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapM_closure" {
     Data.Semigroup.$fDataMax_$cgmapM_closure:
         const Data.Semigroup.$fDataMax_$cgmapM_info;
 },
 sat_sfCDp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNug: // global
           _sfCDn::P64 = R2;
           _sfCDp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNuh; else goto cfNui;
       cfNui: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfNuk; else goto cfNuj;
       cfNuk: // global
           HpAlloc = 32;
           goto cfNuh;
       cfNuh: // global
           R2 = _sfCDn::P64;
           R1 = _sfCDp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNuj: // global
           _sfCDh::P64 = P64[_sfCDp::P64 + 7];
           _sfCDm::P64 = P64[_sfCDp::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCDm::P64;
           P64[Hp] = _sfCDn::P64;
           R2 = _sfCDh::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCDp_info" {
     sat_sfCDp_info:
         const sat_sfCDp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCDq_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNul: // global
           _sfCDm::P64 = R2;
           _sfCDq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNum; else goto cfNun;
       cfNun: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNup; else goto cfNuo;
       cfNup: // global
           HpAlloc = 24;
           goto cfNum;
       cfNum: // global
           R2 = _sfCDm::P64;
           R1 = _sfCDq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNuo: // global
           _sfCDh::P64 = P64[_sfCDq::P64 + 7];
           _sfCDk::P64 = P64[_sfCDq::P64 + 15];
           I64[Hp - 16] = sat_sfCDp_info;
           P64[Hp - 8] = _sfCDh::P64;
           P64[Hp] = _sfCDm::P64;
           R2 = _sfCDh::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCDk::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCDq_info" {
     sat_sfCDq_info:
         const sat_sfCDq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCDl_entry() //  [R1]
         { []
         }
     {offset
       cfNuu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNuv; else goto cfNuw;
       cfNuv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNuw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCDl_info" {
     sat_sfCDl_info:
         const sat_sfCDl_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMax_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNux: // global
           _sfCDj::P64 = R5;
           _sfCDi::P64 = R4;
           _sfCDh::P64 = R3;
           _sfCDg::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNuy; else goto cfNuz;
       cfNuz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNuB; else goto cfNuA;
       cfNuB: // global
           HpAlloc = 88;
           goto cfNuy;
       cfNuy: // global
           R5 = _sfCDj::P64;
           R4 = _sfCDi::P64;
           R3 = _sfCDh::P64;
           R2 = _sfCDg::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNuA: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfCDi::P64;
           P64[Hp - 56] = _sfCDg::P64;
           P64[Hp - 48] = _sfCDj::P64;
           I64[Hp - 40] = sat_sfCDq_info;
           P64[Hp - 32] = _sfCDh::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfCDl_info;
           P64[Hp] = _sfCDh::P64;
           R2 = _sfCDh::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapM_info" {
     Data.Semigroup.$fDataMax_$cgmapM_info:
         const Data.Semigroup.$fDataMax_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.313903616 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapQi_closure" {
     Data.Semigroup.$fDataMax_$cgmapQi_closure:
         const Data.Semigroup.$fDataMax_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataMax_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNv5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNv6; else goto cfNv7;
       cfNv6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNv7: // global
           I64[Sp - 32] = block_cfNv2_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufNvf; else goto cfNv3;
       ufNvf: // global
           call _cfNv2(R1) args: 0, res: 0, upd: 0;
       cfNv3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapQi_info" {
     Data.Semigroup.$fDataMax_$cgmapQi_info:
         const Data.Semigroup.$fDataMax_$cgmapQi_entry;
         const 0;
         const 4402341478414;
         const 17179869208;
         const SfCR7_srt+1168;
 },
 _cfNv2() //  [R1]
         { []
         }
     {offset
       cfNv2: // global
           if (I64[R1 + 7] == 0) goto cfNve; else goto cfNvd;
       cfNve: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNvd: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNv2_info" {
     block_cfNv2_info:
         const _cfNv2;
         const 3;
         const 4294967326;
         const SfCR7_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.326041605 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapMo_closure" {
     Data.Semigroup.$fDataMax_$cgmapMo_closure:
         const Data.Semigroup.$fDataMax_$cgmapMo_info;
 },
 lvl33_sfCDC_entry() //  [R1]
         { []
         }
     {offset
       cfNvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNvy; else goto cfNvz;
       cfNvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNvz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCDC_info" {
     lvl33_sfCDC_info:
         const lvl33_sfCDC_entry;
         const 1;
         const 16;
 },
 sat_sfCE2_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNvM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNvN; else goto cfNvO;
       cfNvN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNvO: // global
           I64[Sp - 24] = block_cfNvJ_info;
           _sfCDC::P64 = P64[R1 + 7];
           _sfCDD::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCDC::P64;
           P64[Sp - 8] = _sfCDD::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNw6; else goto cfNvK;
       ufNw6: // global
           call _cfNvJ(R1) args: 0, res: 0, upd: 0;
       cfNvK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCE2_info" {
     sat_sfCE2_info:
         const sat_sfCE2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNvJ() //  [R1]
         { []
         }
     {offset
       cfNvJ: // global
           I64[Sp - 8] = block_cfNvR_info;
           _sfCDZ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCDZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNw5; else goto cfNvT;
       ufNw5: // global
           call _cfNvR(R1) args: 0, res: 0, upd: 0;
       cfNvT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNvJ_info" {
     block_cfNvJ_info:
         const _cfNvJ;
         const 2;
         const 30;
 },
 _cfNvR() //  [R1]
         { []
         }
     {offset
       cfNvR: // global
           if (R1 & 7 == 1) goto cfNvZ; else goto cfNw3;
       cfNvZ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNw3: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNvR_info" {
     block_cfNvR_info:
         const _cfNvR;
         const 3;
         const 30;
 },
 sat_sfCDS_entry() //  [R1]
         { []
         }
     {offset
       cfNwx: // global
           _sfCDS::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNwy; else goto cfNwz;
       cfNwz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNwB; else goto cfNwA;
       cfNwB: // global
           HpAlloc = 56;
           goto cfNwy;
       cfNwy: // global
           R1 = _sfCDS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNwA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCDS::P64;
           _sfCDB::P64 = P64[_sfCDS::P64 + 16];
           _sfCDD::P64 = P64[_sfCDS::P64 + 24];
           _sfCDI::P64 = P64[_sfCDS::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCDI::P64;
           P64[Hp - 24] = _sfCDB::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCDD::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCDS_info" {
     sat_sfCDS_info:
         const sat_sfCDS_entry;
         const 3;
         const 15;
 },
 sat_sfCDO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNwN: // global
           _sfCDL::P64 = R2;
           _sfCDO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNwO; else goto cfNwP;
       cfNwP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNwR; else goto cfNwQ;
       cfNwR: // global
           HpAlloc = 56;
           goto cfNwO;
       cfNwO: // global
           R2 = _sfCDL::P64;
           R1 = _sfCDO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNwQ: // global
           _sfCDD::P64 = P64[_sfCDO::P64 + 7];
           _sfCDI::P64 = P64[_sfCDO::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCDI::P64;
           P64[Hp - 24] = _sfCDL::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCDD::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCDO_info" {
     sat_sfCDO_info:
         const sat_sfCDO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCDP_entry() //  [R1]
         { []
         }
     {offset
       cfNwS: // global
           _sfCDP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNwT; else goto cfNwU;
       cfNwU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNwW; else goto cfNwV;
       cfNwW: // global
           HpAlloc = 24;
           goto cfNwT;
       cfNwT: // global
           R1 = _sfCDP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNwV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCDP::P64;
           _sfCDD::P64 = P64[_sfCDP::P64 + 16];
           _sfCDE::P64 = P64[_sfCDP::P64 + 24];
           _sfCDI::P64 = P64[_sfCDP::P64 + 32];
           I64[Hp - 16] = sat_sfCDO_info;
           P64[Hp - 8] = _sfCDD::P64;
           P64[Hp] = _sfCDI::P64;
           R2 = _sfCDD::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCDE::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCDP_info" {
     sat_sfCDP_info:
         const sat_sfCDP_entry;
         const 3;
         const 15;
 },
 sat_sfCDV_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNwX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfNwY; else goto cfNwZ;
       cfNwY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNwZ: // global
           I64[Sp - 40] = block_cfNwh_info;
           _sfCDz::P64 = P64[R1 + 7];
           _sfCDB::P64 = P64[R1 + 15];
           _sfCDD::P64 = P64[R1 + 23];
           _sfCDE::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCDz::P64;
           P64[Sp - 24] = _sfCDB::P64;
           P64[Sp - 16] = _sfCDD::P64;
           P64[Sp - 8] = _sfCDE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNxg; else goto cfNwi;
       ufNxg: // global
           call _cfNwh(R1) args: 0, res: 0, upd: 0;
       cfNwi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCDV_info" {
     sat_sfCDV_info:
         const sat_sfCDV_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNwh() //  [R1]
         { []
         }
     {offset
       cfNwh: // global
           I64[Sp - 8] = block_cfNwm_info;
           _sfCDI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCDI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNxf; else goto cfNwn;
       ufNxf: // global
           call _cfNwm(R1) args: 0, res: 0, upd: 0;
       cfNwn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNwh_info" {
     block_cfNwh_info:
         const _cfNwh;
         const 4;
         const 30;
 },
 _cfNwm() //  [R1]
         { []
         }
     {offset
       cfNwm: // global
           _sfCDB::P64 = P64[Sp + 24];
           _sfCDD::P64 = P64[Sp + 32];
           _sfCDI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfNx2; else goto cfNx6;
       cfNx2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNx5; else goto cfNx4;
       cfNx5: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNx4: // global
           I64[Hp - 72] = sat_sfCDS_info;
           P64[Hp - 56] = _sfCDB::P64;
           P64[Hp - 48] = _sfCDD::P64;
           P64[Hp - 40] = _sfCDI::P64;
           I64[Hp - 32] = sat_sfCDP_info;
           P64[Hp - 16] = _sfCDD::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCDI::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfNx6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNxb; else goto cfNxa;
       cfNxb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNxa: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCDI::P64;
           P64[Hp - 24] = _sfCDB::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCDD::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNwm_info" {
     block_cfNwm_info:
         const _cfNwm;
         const 5;
         const 30;
 },
 sat_sfCDF_entry() //  [R1]
         { []
         }
     {offset
       cfNxl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNxm; else goto cfNxn;
       cfNxm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNxn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMax1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCDF_info" {
     sat_sfCDF_info:
         const sat_sfCDF_entry;
         const 1;
         const 16;
 },
 sat_sfCDW_entry() //  [R1]
         { []
         }
     {offset
       cfNxo: // global
           _sfCDW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNxp; else goto cfNxq;
       cfNxq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNxs; else goto cfNxr;
       cfNxs: // global
           HpAlloc = 104;
           goto cfNxp;
       cfNxp: // global
           R1 = _sfCDW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNxr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCDW::P64;
           _sfCDy::P64 = P64[_sfCDW::P64 + 16];
           _sfCDz::P64 = P64[_sfCDW::P64 + 24];
           _sfCDA::P64 = P64[_sfCDW::P64 + 32];
           _sfCDB::P64 = P64[_sfCDW::P64 + 40];
           _sfCDD::P64 = P64[_sfCDW::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCDA::P64;
           P64[Hp - 72] = _sfCDy::P64;
           P64[Hp - 64] = _sfCDB::P64;
           I64[Hp - 56] = sat_sfCDV_info;
           P64[Hp - 48] = _sfCDz::P64;
           P64[Hp - 40] = _sfCDB::P64;
           P64[Hp - 32] = _sfCDD::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCDF_info;
           P64[Hp] = _sfCDD::P64;
           R2 = _sfCDD::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCDW_info" {
     sat_sfCDW_info:
         const sat_sfCDW_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMax_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNxt: // global
           _sfCDB::P64 = R5;
           _sfCDA::P64 = R4;
           _sfCDz::P64 = R3;
           _sfCDy::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfNxu; else goto cfNxv;
       cfNxv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNxx; else goto cfNxw;
       cfNxx: // global
           HpAlloc = 24;
           goto cfNxu;
       cfNxu: // global
           R5 = _sfCDB::P64;
           R4 = _sfCDA::P64;
           R3 = _sfCDz::P64;
           R2 = _sfCDy::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNxw: // global
           I64[Hp - 16] = lvl33_sfCDC_info;
           P64[Hp] = _sfCDz::P64;
           I64[Sp - 48] = block_cfNvA_info;
           R2 = _sfCDz::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCDy::P64;
           P64[Sp - 24] = _sfCDz::P64;
           P64[Sp - 16] = _sfCDA::P64;
           P64[Sp - 8] = _sfCDB::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapMo_info" {
     Data.Semigroup.$fDataMax_$cgmapMo_info:
         const Data.Semigroup.$fDataMax_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNvA() //  [R1]
         { []
         }
     {offset
       cfNvA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNxA; else goto cfNxz;
       cfNxA: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNxz: // global
           I64[Hp - 72] = sat_sfCE2_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCDW_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNvA_info" {
     block_cfNvA_info:
         const _cfNvA;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.354546275 UTC

[section ""data" . lvl15_rfC6S_closure" {
     lvl15_rfC6S_closure:
         const lvl15_rfC6S_info;
         const 0;
 },
 lvl15_rfC6S_entry() //  []
         { []
         }
     {offset
       cfNyZ: // global
           R1 = Data.Semigroup.$cMax_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rfC6S_info" {
     lvl15_rfC6S_info:
         const lvl15_rfC6S_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.357799503 UTC

[section ""data" . lvl16_rfC6T_closure" {
     lvl16_rfC6T_closure:
         const lvl16_rfC6T_info;
         const 0;
 },
 lvl16_rfC6T_entry() //  []
         { []
         }
     {offset
       cfNzb: // global
           R1 = Data.Semigroup.$tMax_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rfC6T_info" {
     lvl16_rfC6T_info:
         const lvl16_rfC6T_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.361167861 UTC

[section ""data" . lvl17_rfC6U_closure" {
     lvl17_rfC6U_closure:
         const lvl17_rfC6U_info;
 },
 lvl17_rfC6U_entry() //  []
         { []
         }
     {offset
       cfNzn: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl17_rfC6U_info" {
     lvl17_rfC6U_info:
         const lvl17_rfC6U_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.370202883 UTC

[section ""data" . Data.Semigroup.$fDataMax_closure" {
     Data.Semigroup.$fDataMax_closure:
         const Data.Semigroup.$fDataMax_info;
         const 0;
 },
 sat_sfCEC_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNzE: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapMo_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEC_info" {
     sat_sfCEC_info:
         const sat_sfCEC_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCEB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNzM: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapMp_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEB_info" {
     sat_sfCEB_info:
         const sat_sfCEB_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCEA_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNzU: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapM_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEA_info" {
     sat_sfCEA_info:
         const sat_sfCEA_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCEz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNA2: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapQi_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEz_info" {
     sat_sfCEz_info:
         const sat_sfCEz_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1248;
 },
 sat_sfCEy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNAc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfNAg; else goto cfNAf;
       cfNAg: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNAf: // global
           _sfCE7::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfCE7::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEy_info" {
     sat_sfCEy_info:
         const sat_sfCEy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCEu_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNAn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNAr; else goto cfNAq;
       cfNAr: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNAq: // global
           _sfCE7::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCE7::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfCEp::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfCEp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEu_info" {
     sat_sfCEu_info:
         const sat_sfCEu_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCEo_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNAy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNAC; else goto cfNAB;
       cfNAC: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNAB: // global
           _sfCE7::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCE7::P64;
           P64[Hp] = R5;
           _sfCEk::P64 = R3;
           R3 = Hp - 32;
           _sfCEj::P64 = R2;
           R2 = _sfCEk::P64;
           R1 = _sfCEj::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEo_info" {
     sat_sfCEo_info:
         const sat_sfCEo_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCEi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNAI: // global
           R3 = R3;
           _sfCEg::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfCEg::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEi_info" {
     sat_sfCEi_info:
         const sat_sfCEi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCEf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNAQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataMax_$cdataCast1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEf_info" {
     sat_sfCEf_info:
         const sat_sfCEf_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1240;
 },
 sat_sfCEd_entry() //  [R1]
         { []
         }
     {offset
       cfNB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNB3; else goto cfNB4;
       cfNB3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNB4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCEd_info" {
     sat_sfCEd_info:
         const sat_sfCEd_entry;
         const 1;
         const 16;
 },
 sat_sfCEe_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNB5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNB9; else goto cfNB8;
       cfNB9: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNB8: // global
           _sfCE7::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCEd_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCEa::P64 = R2;
           R2 = _sfCE7::P64;
           R1 = _sfCEa::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEe_info" {
     sat_sfCEe_info:
         const sat_sfCEe_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCE9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNBf: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgfoldl_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCE9_info" {
     sat_sfCE9_info:
         const sat_sfCE9_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCE8_entry() //  [R1]
         { []
         }
     {offset
       cfNBm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNBn; else goto cfNBo;
       cfNBn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataMax8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCE8_info" {
     sat_sfCE8_info:
         const sat_sfCE8_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1232;
 },
 Data.Semigroup.$fDataMax_entry() //  [R2]
         { []
         }
     {offset
       cfNBq: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfNBu; else goto cfNBt;
       cfNBu: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNBt: // global
           I64[Hp - 320] = sat_sfCEC_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCEB_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCEA_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCEz_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCEy_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCEu_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCEo_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCEi_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCEf_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCEe_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCE9_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCE8_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl15_rfC6S_closure+1;
           P64[Hp - 80] = lvl16_rfC6T_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl17_rfC6U_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_info" {
     Data.Semigroup.$fDataMax_info:
         const Data.Semigroup.$fDataMax_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfCR7_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.395954231 UTC

[section ""data" . Data.Semigroup.$fDataArg5_closure" {
     Data.Semigroup.$fDataArg5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataArg6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.39795011 UTC

[section ""data" . Data.Semigroup.$tcArg_closure" {
     Data.Semigroup.$tcArg_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataArg5_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12181131229304595757;
         const 13964868205162960136;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.399780112 UTC

[section ""data" . $krep6_rfC6V_closure" {
     $krep6_rfC6V_closure:
         const :_con_info;
         const $krep_rfC6J_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.403719903 UTC

[section ""data" . $krep7_rfC6W_closure" {
     $krep7_rfC6W_closure:
         const :_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep6_rfC6V_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.40582403 UTC

[section ""data" . $krep8_rfC6X_closure" {
     $krep8_rfC6X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcArg_closure+1;
         const $krep7_rfC6W_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.407648693 UTC

[section ""data" . $krep9_rfC6Y_closure" {
     $krep9_rfC6Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rfC6J_closure+2;
         const $krep8_rfC6X_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.409508262 UTC

[section ""data" . Data.Semigroup.$tc'Arg1_closure" {
     Data.Semigroup.$tc'Arg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep9_rfC6Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.411967741 UTC

[section ""cstring" . Data.Semigroup.$tc'Arg3_bytes" {
     Data.Semigroup.$tc'Arg3_bytes:
         I8[] [39,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.414168987 UTC

[section ""data" . Data.Semigroup.$tc'Arg2_closure" {
     Data.Semigroup.$tc'Arg2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Arg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.416079024 UTC

[section ""data" . Data.Semigroup.$tc'Arg_closure" {
     Data.Semigroup.$tc'Arg_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Arg2_closure+1;
         const Data.Semigroup.$tc'Arg1_closure+4;
         const 1079323530693211499;
         const 7260223244427450599;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.419577928 UTC

[section ""data" . Data.Semigroup.$fDataArg4_closure" {
     Data.Semigroup.$fDataArg4_closure:
         const Data.Semigroup.$fDataArg4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataArg4_entry() //  [R1]
         { []
         }
     {offset
       cfNCO: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNCP; else goto cfNCQ;
       cfNCP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNCQ: // global
           (_cfNCG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfNCG::I64 == 0) goto cfNCI; else goto cfNCH;
       cfNCI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfNCH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfNCG::I64;
           I64[Sp - 24] = block_cfNCJ_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataArg5_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 13964868205162960136;
           R2 = 12181131229304595757;
           P64[Sp - 40] = GHC.Types.krep$*->*->*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg4_info" {
     Data.Semigroup.$fDataArg4_info:
         const Data.Semigroup.$fDataArg4_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1120;
 },
 _cfNCJ() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNCJ: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfNCK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfNCJ_info" {
     block_cfNCJ_info:
         const _cfNCJ;
         const 0;
         const 30;
 },
 _cfNCK() //  []
         { []
         }
     {offset
       cfNCK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNCT; else goto cfNCS;
       cfNCT: // global
           HpAlloc = 48;
           I64[Sp] = block_cfNCK_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfNCS: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNCK_info" {
     block_cfNCK_info:
         const _cfNCK;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.428143661 UTC

[section ""data" . Data.Semigroup.$fDataArg10_closure" {
     Data.Semigroup.$fDataArg10_closure:
         const Data.Semigroup.$fDataArg10_info;
         const 0;
 },
 Data.Semigroup.$fDataArg10_entry() //  [R2, R3]
         { []
         }
     {offset
       cfNDl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNDt; else goto cfNDu;
       cfNDt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNDu: // global
           I64[Sp - 16] = block_cfNDj_info;
           _sfCEJ::P64 = R2;
           R2 = R3;
           P64[Sp - 8] = _sfCEJ::P64;
           Sp = Sp - 16;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg10_info" {
     Data.Semigroup.$fDataArg10_info:
         const Data.Semigroup.$fDataArg10_entry;
         const 0;
         const 27021602059190286;
         const 8589934607;
         const SfCR7_srt+1128;
 },
 _cfNDj() //  [R1]
         { []
         }
     {offset
       cfNDj: // global
           I64[Sp] = block_cfNDo_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNDj_info" {
     block_cfNDj_info:
         const _cfNDj;
         const 1;
         const 9007203549708318;
         const SfCR7_srt+1128;
 },
 _cfNDo() //  [R1]
         { []
         }
     {offset
       cfNDo: // global
           I64[Sp] = block_cfNDs_info;
           R3 = R1;
           R2 = Data.Semigroup.$fDataArg4_closure;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNDo_info" {
     block_cfNDo_info:
         const _cfNDo;
         const 1;
         const 9007203549708318;
         const SfCR7_srt+1128;
 },
 _cfNDs() //  [R1]
         { []
         }
     {offset
       cfNDs: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNDs_info" {
     block_cfNDs_info:
         const _cfNDs;
         const 1;
         const 4294967326;
         const SfCR7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.438234439 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cdataCast2_closure" {
     Data.Semigroup.$fDataArg_$cdataCast2_closure:
         const Data.Semigroup.$fDataArg_$cdataCast2_info;
         const 0;
 },
 lvl33_sfCER_entry() //  [R1]
         { []
         }
     {offset
       cfNDX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNDY; else goto cfNDZ;
       cfNDY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNDZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataArg4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCER_info" {
     lvl33_sfCER_info:
         const lvl33_sfCER_entry;
         const 1;
         const 1125904201809936;
         const SfCR7_srt+1152;
 },
 sat_sfCEV_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNEc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNEd; else goto cfNEe;
       cfNEd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNEe: // global
           I64[Sp - 32] = block_cfNE5_info;
           _sfCEO::P64 = P64[R1 + 7];
           _sfCEP::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sfCEO::P64;
           P64[Sp - 16] = _sfCEP::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufNEp; else goto cfNE6;
       ufNEp: // global
           call _cfNE5(R1) args: 0, res: 0, upd: 0;
       cfNE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCEV_info" {
     sat_sfCEV_info:
         const sat_sfCEV_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cfNE5() //  [R1]
         { []
         }
     {offset
       cfNE5: // global
           if (R1 & 7 == 1) goto cfNE9; else goto cfNEa;
       cfNE9: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfNEa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNEo; else goto cfNEn;
       cfNEo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNEn: // global
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNE5_info" {
     block_cfNE5_info:
         const _cfNE5;
         const 3;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cdataCast2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfNEq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNEu; else goto cfNEt;
       cfNEu: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cdataCast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNEt: // global
           I64[Hp - 48] = lvl33_sfCER_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfCEV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cdataCast2_info" {
     Data.Semigroup.$fDataArg_$cdataCast2_info:
         const Data.Semigroup.$fDataArg_$cdataCast2_entry;
         const 0;
         const 5629503829180430;
         const 12884901911;
         const SfCR7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.447272261 UTC

[section ""data" . Data.Semigroup.$fDataArg1_closure" {
     Data.Semigroup.$fDataArg1_closure:
         const (,)_con_info;
         const Data.Semigroup.Arg_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.458893989 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapMp_closure" {
     Data.Semigroup.$fDataArg_$cgmapMp_closure:
         const Data.Semigroup.$fDataArg_$cgmapMp_info;
 },
 lvl33_sfCF1_entry() //  [R1]
         { []
         }
     {offset
       cfNF4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNF5; else goto cfNF6;
       cfNF5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNF6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCF1_info" {
     lvl33_sfCF1_info:
         const lvl33_sfCF1_entry;
         const 1;
         const 16;
 },
 sat_sfCFw_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNFj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNFk; else goto cfNFl;
       cfNFk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNFl: // global
           I64[Sp - 24] = block_cfNFg_info;
           _sfCF1::P64 = P64[R1 + 7];
           _sfCF2::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCF1::P64;
           P64[Sp - 8] = _sfCF2::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNFD; else goto cfNFh;
       ufNFD: // global
           call _cfNFg(R1) args: 0, res: 0, upd: 0;
       cfNFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCFw_info" {
     sat_sfCFw_info:
         const sat_sfCFw_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNFg() //  [R1]
         { []
         }
     {offset
       cfNFg: // global
           I64[Sp - 8] = block_cfNFo_info;
           _sfCFt::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCFt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNFC; else goto cfNFq;
       ufNFC: // global
           call _cfNFo(R1) args: 0, res: 0, upd: 0;
       cfNFq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNFg_info" {
     block_cfNFg_info:
         const _cfNFg;
         const 2;
         const 30;
 },
 _cfNFo() //  [R1]
         { []
         }
     {offset
       cfNFo: // global
           if (R1 & 7 == 1) goto cfNFw; else goto cfNFA;
       cfNFw: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNFA: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNFo_info" {
     block_cfNFo_info:
         const _cfNFo;
         const 3;
         const 30;
 },
 sat_sfCFm_entry() //  [R1]
         { []
         }
     {offset
       cfNG9: // global
           _sfCFm::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNGa; else goto cfNGb;
       cfNGb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNGd; else goto cfNGc;
       cfNGd: // global
           HpAlloc = 56;
           goto cfNGa;
       cfNGa: // global
           R1 = _sfCFm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNGc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCFm::P64;
           _sfCF2::P64 = P64[_sfCFm::P64 + 16];
           _sfCF9::P64 = P64[_sfCFm::P64 + 24];
           _sfCFd::P64 = P64[_sfCFm::P64 + 32];
           _sfCFe::P64 = P64[_sfCFm::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCFd::P64;
           P64[Hp - 24] = _sfCF9::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCFe::P64;
           R2 = _sfCF2::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFm_info" {
     sat_sfCFm_info:
         const sat_sfCFm_entry;
         const 4;
         const 15;
 },
 sat_sfCFi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNGp: // global
           _sfCFf::P64 = R2;
           _sfCFi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNGq; else goto cfNGr;
       cfNGr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNGt; else goto cfNGs;
       cfNGt: // global
           HpAlloc = 56;
           goto cfNGq;
       cfNGq: // global
           R2 = _sfCFf::P64;
           R1 = _sfCFi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNGs: // global
           _sfCF2::P64 = P64[_sfCFi::P64 + 7];
           _sfCFd::P64 = P64[_sfCFi::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCFd::P64;
           P64[Hp - 24] = _sfCFf::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCF2::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCFi_info" {
     sat_sfCFi_info:
         const sat_sfCFi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCFj_entry() //  [R1]
         { []
         }
     {offset
       cfNGu: // global
           _sfCFj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNGv; else goto cfNGw;
       cfNGw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNGy; else goto cfNGx;
       cfNGy: // global
           HpAlloc = 24;
           goto cfNGv;
       cfNGv: // global
           R1 = _sfCFj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCFj::P64;
           _sfCF2::P64 = P64[_sfCFj::P64 + 16];
           _sfCFa::P64 = P64[_sfCFj::P64 + 24];
           _sfCFd::P64 = P64[_sfCFj::P64 + 32];
           I64[Hp - 16] = sat_sfCFi_info;
           P64[Hp - 8] = _sfCF2::P64;
           P64[Hp] = _sfCFd::P64;
           R2 = _sfCF2::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCFa::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFj_info" {
     sat_sfCFj_info:
         const sat_sfCFj_entry;
         const 3;
         const 15;
 },
 sat_sfCFn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNGz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNGA; else goto cfNGB;
       cfNGA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNGB: // global
           I64[Sp - 40] = block_cfNFY_info;
           _sfCEY::P64 = P64[R1 + 7];
           _sfCF2::P64 = P64[R1 + 15];
           _sfCF9::P64 = P64[R1 + 23];
           _sfCFa::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCEY::P64;
           P64[Sp - 24] = _sfCF2::P64;
           P64[Sp - 16] = _sfCF9::P64;
           P64[Sp - 8] = _sfCFa::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNGF; else goto cfNFZ;
       ufNGF: // global
           call _cfNFY(R1) args: 0, res: 0, upd: 0;
       cfNFZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCFn_info" {
     sat_sfCFn_info:
         const sat_sfCFn_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNFY() //  [R1]
         { []
         }
     {offset
       cfNFY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNGE; else goto cfNGD;
       cfNGE: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNGD: // global
           _sfCFd::P64 = P64[R1 + 7];
           _sfCFe::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCFm_info;
           _sfCF2::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sfCF2::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sfCFd::P64;
           P64[Hp - 40] = _sfCFe::P64;
           I64[Hp - 32] = sat_sfCFj_info;
           P64[Hp - 16] = _sfCF2::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCFd::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNFY_info" {
     block_cfNFY_info:
         const _cfNFY;
         const 4;
         const 30;
 },
 k_sfCF6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNGG: // global
           _sfCF9::P64 = R4;
           _sfCF8::P64 = R3;
           _sfCF7::P64 = R2;
           _sfCF6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNGH; else goto cfNGI;
       cfNGI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNGK; else goto cfNGJ;
       cfNGK: // global
           HpAlloc = 80;
           goto cfNGH;
       cfNGH: // global
           R4 = _sfCF9::P64;
           R3 = _sfCF8::P64;
           R2 = _sfCF7::P64;
           R1 = _sfCF6::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNGJ: // global
           _sfCEY::P64 = P64[_sfCF6::P64 + 5];
           _sfCEZ::P64 = P64[_sfCF6::P64 + 13];
           _sfCF2::P64 = P64[_sfCF6::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfCEZ::P64;
           P64[Hp - 48] = _sfCF7::P64;
           P64[Hp - 40] = _sfCF9::P64;
           I64[Hp - 32] = sat_sfCFn_info;
           P64[Hp - 24] = _sfCEY::P64;
           P64[Hp - 16] = _sfCF2::P64;
           P64[Hp - 8] = _sfCF9::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfCF2::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCF8::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfCF6_info" {
     k_sfCF6_info:
         const k_sfCF6_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfCFo_entry() //  [R1]
         { []
         }
     {offset
       cfNGT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNGU; else goto cfNGV;
       cfNGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataArg1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFo_info" {
     sat_sfCFo_info:
         const sat_sfCFo_entry;
         const 1;
         const 16;
 },
 sat_sfCFp_entry() //  [R1]
         { []
         }
     {offset
       cfNGW: // global
           _sfCFp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNGX; else goto cfNGY;
       cfNGY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNH0; else goto cfNGZ;
       cfNH0: // global
           HpAlloc = 24;
           goto cfNGX;
       cfNGX: // global
           R1 = _sfCFp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNGZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCFp::P64;
           _sfCEW::P64 = P64[_sfCFp::P64 + 16];
           _sfCF2::P64 = P64[_sfCFp::P64 + 24];
           _sfCF4::P64 = P64[_sfCFp::P64 + 32];
           _sfCF6::P64 = P64[_sfCFp::P64 + 40];
           I64[Hp - 16] = sat_sfCFo_info;
           P64[Hp] = _sfCF2::P64;
           R4 = _sfCF4::P64;
           R3 = Hp - 16;
           R2 = _sfCEW::P64;
           R1 = _sfCF6::P64;
           Sp = Sp - 16;
           call k_sfCF6_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFp_info" {
     sat_sfCFp_info:
         const sat_sfCFp_entry;
         const 4;
         const 15;
 },
 sat_sfCFq_entry() //  [R1]
         { []
         }
     {offset
       cfNH1: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNH2; else goto cfNH3;
       cfNH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNH3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cfNFI_info;
           _sfCEW::P64 = P64[R1 + 16];
           _sfCEX::P64 = P64[R1 + 24];
           _sfCEY::P64 = P64[R1 + 32];
           _sfCEZ::P64 = P64[R1 + 40];
           _sfCF2::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sfCEW::P64;
           P64[Sp - 48] = _sfCEX::P64;
           P64[Sp - 40] = _sfCEY::P64;
           P64[Sp - 32] = _sfCEZ::P64;
           P64[Sp - 24] = _sfCF2::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ufNH7; else goto cfNFJ;
       ufNH7: // global
           call _cfNFI(R1) args: 0, res: 0, upd: 0;
       cfNFJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFq_info" {
     sat_sfCFq_info:
         const sat_sfCFq_entry;
         const 6;
         const 15;
 },
 _cfNFI() //  [R1]
         { []
         }
     {offset
       cfNFI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNH6; else goto cfNH5;
       cfNH6: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfNH5: // global
           _sfCF4::P64 = P64[R1 + 7];
           _sfCF5::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sfCF6_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sfCF2::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sfCF2::P64;
           I64[Hp - 40] = sat_sfCFp_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfCF2::P64;
           P64[Hp - 8] = _sfCF4::P64;
           _cfNFN::P64 = Hp - 69;
           P64[Hp] = _cfNFN::P64;
           R4 = _sfCF5::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cfNFN::P64;
           Sp = Sp + 48;
           call k_sfCF6_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNFI_info" {
     block_cfNFI_info:
         const _cfNFI;
         const 5;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNH8: // global
           _sfCF0::P64 = R6;
           _sfCEZ::P64 = R5;
           _sfCEY::P64 = R4;
           _sfCEX::P64 = R3;
           _sfCEW::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cfNH9; else goto cfNHa;
       cfNHa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNHc; else goto cfNHb;
       cfNHc: // global
           HpAlloc = 24;
           goto cfNH9;
       cfNH9: // global
           R6 = _sfCF0::P64;
           R5 = _sfCEZ::P64;
           R4 = _sfCEY::P64;
           R3 = _sfCEX::P64;
           R2 = _sfCEW::P64;
           R1 = Data.Semigroup.$fDataArg_$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNHb: // global
           I64[Hp - 16] = lvl33_sfCF1_info;
           P64[Hp] = _sfCEY::P64;
           I64[Sp - 56] = block_cfNF7_info;
           R2 = _sfCEY::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfCEW::P64;
           P64[Sp - 32] = _sfCEX::P64;
           P64[Sp - 24] = _sfCEY::P64;
           P64[Sp - 16] = _sfCEZ::P64;
           P64[Sp - 8] = _sfCF0::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapMp_info" {
     Data.Semigroup.$fDataArg_$cgmapMp_info:
         const Data.Semigroup.$fDataArg_$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfNF7() //  [R1]
         { []
         }
     {offset
       cfNF7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNHf; else goto cfNHe;
       cfNHf: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNHe: // global
           I64[Hp - 80] = sat_sfCFw_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfCFq_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNF7_info" {
     block_cfNF7_info:
         const _cfNF7;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.493391969 UTC

[section ""data" . Data.Semigroup.$w$cgmapM_closure" {
     Data.Semigroup.$w$cgmapM_closure:
         const Data.Semigroup.$w$cgmapM_info;
 },
 sat_sfCFL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNJ3: // global
           _sfCFJ::P64 = R2;
           _sfCFL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNJ4; else goto cfNJ5;
       cfNJ5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfNJ7; else goto cfNJ6;
       cfNJ7: // global
           HpAlloc = 32;
           goto cfNJ4;
       cfNJ4: // global
           R2 = _sfCFJ::P64;
           R1 = _sfCFL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNJ6: // global
           _sfCFz::P64 = P64[_sfCFL::P64 + 7];
           _sfCFI::P64 = P64[_sfCFL::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCFI::P64;
           P64[Hp] = _sfCFJ::P64;
           R2 = _sfCFz::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCFL_info" {
     sat_sfCFL_info:
         const sat_sfCFL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCFM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNJ8: // global
           _sfCFI::P64 = R2;
           _sfCFM::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNJ9; else goto cfNJa;
       cfNJa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNJc; else goto cfNJb;
       cfNJc: // global
           HpAlloc = 24;
           goto cfNJ9;
       cfNJ9: // global
           R2 = _sfCFI::P64;
           R1 = _sfCFM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNJb: // global
           _sfCFz::P64 = P64[_sfCFM::P64 + 7];
           _sfCFH::P64 = P64[_sfCFM::P64 + 15];
           I64[Hp - 16] = sat_sfCFL_info;
           P64[Hp - 8] = _sfCFz::P64;
           P64[Hp] = _sfCFI::P64;
           R2 = _sfCFz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCFH::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCFM_info" {
     sat_sfCFM_info:
         const sat_sfCFM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k_sfCFD_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNJd: // global
           _sfCFG::P64 = R4;
           _sfCFF::P64 = R3;
           _sfCFE::P64 = R2;
           _sfCFD::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNJe; else goto cfNJf;
       cfNJf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfNJh; else goto cfNJg;
       cfNJh: // global
           HpAlloc = 64;
           goto cfNJe;
       cfNJe: // global
           R4 = _sfCFG::P64;
           R3 = _sfCFF::P64;
           R2 = _sfCFE::P64;
           R1 = _sfCFD::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNJg: // global
           _sfCFz::P64 = P64[_sfCFD::P64 + 5];
           _sfCFA::P64 = P64[_sfCFD::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfCFA::P64;
           P64[Hp - 32] = _sfCFE::P64;
           P64[Hp - 24] = _sfCFG::P64;
           I64[Hp - 16] = sat_sfCFM_info;
           P64[Hp - 8] = _sfCFz::P64;
           P64[Hp] = Hp - 56;
           R2 = _sfCFz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCFF::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfCFD_info" {
     k_sfCFD_info:
         const k_sfCFD_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCFN_entry() //  [R1]
         { []
         }
     {offset
       cfNJq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNJr; else goto cfNJs;
       cfNJr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNJs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Arg_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFN_info" {
     sat_sfCFN_info:
         const sat_sfCFN_entry;
         const 1;
         const 16;
 },
 sat_sfCFO_entry() //  [R1]
         { []
         }
     {offset
       cfNJt: // global
           _sfCFO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNJu; else goto cfNJv;
       cfNJv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNJx; else goto cfNJw;
       cfNJx: // global
           HpAlloc = 24;
           goto cfNJu;
       cfNJu: // global
           R1 = _sfCFO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNJw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCFO::P64;
           _sfCFx::P64 = P64[_sfCFO::P64 + 16];
           _sfCFz::P64 = P64[_sfCFO::P64 + 24];
           _sfCFB::P64 = P64[_sfCFO::P64 + 32];
           _sfCFD::P64 = P64[_sfCFO::P64 + 40];
           I64[Hp - 16] = sat_sfCFN_info;
           P64[Hp] = _sfCFz::P64;
           R4 = _sfCFB::P64;
           R3 = Hp - 16;
           R2 = _sfCFx::P64;
           R1 = _sfCFD::P64;
           Sp = Sp - 16;
           call k_sfCFD_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCFO_info" {
     sat_sfCFO_info:
         const sat_sfCFO_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNJy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfNJC; else goto cfNJB;
       cfNJC: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfNJB: // global
           I64[Hp - 64] = k_sfCFD_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = sat_sfCFO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R6;
           _cfNIM::P64 = Hp - 61;
           P64[Hp] = _cfNIM::P64;
           R4 = P64[Sp];
           _sfCFy::P64 = R3;
           R3 = Hp - 40;
           R2 = _sfCFy::P64;
           R1 = _cfNIM::P64;
           Sp = Sp + 8;
           call k_sfCFD_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cgmapM_info" {
     Data.Semigroup.$w$cgmapM_info:
         const Data.Semigroup.$w$cgmapM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.509851329 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapM_closure" {
     Data.Semigroup.$fDataArg_$cgmapM_closure:
         const Data.Semigroup.$fDataArg_$cgmapM_info;
 },
 Data.Semigroup.$fDataArg_$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNKc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNKd; else goto cfNKe;
       cfNKd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNKe: // global
           I64[Sp - 40] = block_cfNK9_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNKi; else goto cfNKa;
       ufNKi: // global
           call _cfNK9(R1) args: 0, res: 0, upd: 0;
       cfNKa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapM_info" {
     Data.Semigroup.$fDataArg_$cgmapM_info:
         const Data.Semigroup.$fDataArg_$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfNK9() //  [R1]
         { []
         }
     {offset
       cfNK9: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cgmapM_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNK9_info" {
     block_cfNK9_info:
         const _cfNK9;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.516401953 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQi_closure" {
     Data.Semigroup.$fDataArg_$cgmapQi_closure:
         const Data.Semigroup.$fDataArg_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataArg_$cgmapQi_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNKA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfNKE; else goto cfNKF;
       cfNKE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQi_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNKF: // global
           I64[Sp - 40] = block_cfNKx_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNKT; else goto cfNKy;
       ufNKT: // global
           call _cfNKx(R1) args: 0, res: 0, upd: 0;
       cfNKy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQi_info" {
     Data.Semigroup.$fDataArg_$cgmapQi_info:
         const Data.Semigroup.$fDataArg_$cgmapQi_entry;
         const 0;
         const 2251804108652558;
         const 21474836505;
         const SfCR7_srt+1168;
 },
 _cfNKx() //  [R1]
         { []
         }
     {offset
       cfNKx: // global
           I64[Sp - 8] = block_cfNKD_info;
           _sfCG3::P64 = P64[R1 + 7];
           _sfCG4::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sfCG4::P64;
           P64[Sp + 24] = _sfCG3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNKS; else goto cfNKH;
       ufNKS: // global
           call _cfNKD(R1) args: 0, res: 0, upd: 0;
       cfNKH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNKx_info" {
     block_cfNKx_info:
         const _cfNKx;
         const 4;
         const 4294967326;
         const SfCR7_srt+1168;
 },
 _cfNKD() //  [R1]
         { []
         }
     {offset
       cfNKD: // global
           _sfCG0::P64 = P64[Sp + 40];
           _sfCG7::I64 = I64[R1 + 7];
           if (_sfCG7::I64 != 0) goto ufNKR; else goto cfNKP;
       ufNKR: // global
           if (_sfCG7::I64 != 1) goto cfNKO; else goto cfNKQ;
       cfNKO: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNKQ: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = _sfCG0::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNKP: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           R1 = _sfCG0::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNKD_info" {
     block_cfNKD_info:
         const _cfNKD;
         const 5;
         const 4294967326;
         const SfCR7_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.525417702 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQr_closure" {
     Data.Semigroup.$fDataArg_$cgmapQr_closure:
         const Data.Semigroup.$fDataArg_$cgmapQr_info;
 },
 sat_sfCGj_entry() //  [R1]
         { []
         }
     {offset
       cfNLl: // global
           _sfCGj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNLm; else goto cfNLn;
       cfNLn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNLp; else goto cfNLo;
       cfNLp: // global
           HpAlloc = 40;
           goto cfNLm;
       cfNLm: // global
           R1 = _sfCGj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCGj::P64;
           _sfCG9::P64 = P64[_sfCGj::P64 + 16];
           _sfCGa::P64 = P64[_sfCGj::P64 + 24];
           _sfCGb::P64 = P64[_sfCGj::P64 + 32];
           _sfCGc::P64 = P64[_sfCGj::P64 + 40];
           _sfCGg::P64 = P64[_sfCGj::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfCGc::P64;
           P64[Hp - 8] = _sfCG9::P64;
           P64[Hp] = _sfCGg::P64;
           R3 = _sfCGb::P64;
           R2 = Hp - 32;
           R1 = _sfCGa::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCGj_info" {
     sat_sfCGj_info:
         const sat_sfCGj_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgmapQr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNLq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNLs; else goto cfNLt;
       cfNLs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfNLt: // global
           I64[Sp - 40] = block_cfNLb_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNLx; else goto cfNLc;
       ufNLx: // global
           call _cfNLb(R1) args: 0, res: 0, upd: 0;
       cfNLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQr_info" {
     Data.Semigroup.$fDataArg_$cgmapQr_info:
         const Data.Semigroup.$fDataArg_$cgmapQr_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cfNLb() //  [R1]
         { []
         }
     {offset
       cfNLb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfNLw; else goto cfNLv;
       cfNLw: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNLv: // global
           _sfCGf::P64 = P64[R1 + 7];
           _sfCGg::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sfCGj_info;
           P64[Hp - 72] = P64[Sp + 8];
           _sfCGa::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sfCGa::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sfCGc::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sfCGc::P64;
           P64[Hp - 40] = _sfCGg::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfCGc::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCGf::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sfCGa::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNLb_info" {
     block_cfNLb_info:
         const _cfNLb;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.534140294 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQ_closure" {
     Data.Semigroup.$fDataArg_$cgmapQ_closure:
         const Data.Semigroup.$fDataArg_$cgmapQ_info;
 },
 Data.Semigroup.$fDataArg_$cgmapQ_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNLV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNM2; else goto cfNM3;
       cfNM2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQ_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNM3: // global
           I64[Sp - 32] = block_cfNLS_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufNM7; else goto cfNLT;
       ufNM7: // global
           call _cfNLS(R1) args: 0, res: 0, upd: 0;
       cfNLT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQ_info" {
     Data.Semigroup.$fDataArg_$cgmapQ_info:
         const Data.Semigroup.$fDataArg_$cgmapQ_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNLS() //  [R1]
         { []
         }
     {offset
       cfNLS: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfNM6; else goto cfNM5;
       cfNM6: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNM5: // global
           _sfCGp::P64 = P64[R1 + 7];
           _sfCGq::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sfCGm::P64 = P64[Sp + 24];
           P64[Hp - 104] = _sfCGm::P64;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = _sfCGq::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfCGm::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCGp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNLS_info" {
     block_cfNLS_info:
         const _cfNLS;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.54166506 UTC

[section ""data" . Data.Semigroup.$fDataArg2_closure" {
     Data.Semigroup.$fDataArg2_closure:
         const Data.Semigroup.$fDataArg2_info;
 },
 sat_sfCGE_entry() //  [R1]
         { []
         }
     {offset
       cfNMC: // global
           _sfCGE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNMD; else goto cfNME;
       cfNME: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfNMG; else goto cfNMF;
       cfNMG: // global
           HpAlloc = 40;
           goto cfNMD;
       cfNMD: // global
           R1 = _sfCGE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNMF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCGE::P64;
           _sfCGu::P64 = P64[_sfCGE::P64 + 16];
           _sfCGw::P64 = P64[_sfCGE::P64 + 24];
           _sfCGx::P64 = P64[_sfCGE::P64 + 32];
           _sfCGy::P64 = P64[_sfCGE::P64 + 40];
           _sfCGB::P64 = P64[_sfCGE::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfCGy::P64;
           P64[Hp - 8] = _sfCGu::P64;
           P64[Hp] = _sfCGB::P64;
           R3 = Hp - 32;
           R2 = _sfCGx::P64;
           R1 = _sfCGw::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCGE_info" {
     sat_sfCGE_info:
         const sat_sfCGE_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataArg2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNMH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNMI; else goto cfNMJ;
       cfNMI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfNMJ: // global
           I64[Sp - 40] = block_cfNMr_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNMN; else goto cfNMs;
       ufNMN: // global
           call _cfNMr(R1) args: 0, res: 0, upd: 0;
       cfNMs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg2_info" {
     Data.Semigroup.$fDataArg2_info:
         const Data.Semigroup.$fDataArg2_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cfNMr() //  [R1]
         { []
         }
     {offset
       cfNMr: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfNMM; else goto cfNML;
       cfNMM: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNML: // global
           _sfCGB::P64 = P64[R1 + 7];
           _sfCGC::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sfCGy::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sfCGy::P64;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sfCGC::P64;
           I64[Hp - 48] = sat_sfCGE_info;
           P64[Hp - 32] = P64[Sp + 40];
           _sfCGw::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sfCGw::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sfCGy::P64;
           P64[Hp] = _sfCGB::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sfCGw::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNMr_info" {
     block_cfNMr_info:
         const _cfNMr;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.550918791 UTC

[section ""data" . Data.Semigroup.$fDataArg3_closure" {
     Data.Semigroup.$fDataArg3_closure:
         const Data.Semigroup.$fDataArg3_info;
 },
 Data.Semigroup.$fDataArg3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNNb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNNh; else goto cfNNi;
       cfNNh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNNi: // global
           I64[Sp - 32] = block_cfNN8_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufNNm; else goto cfNN9;
       ufNNm: // global
           call _cfNN8(R1) args: 0, res: 0, upd: 0;
       cfNN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg3_info" {
     Data.Semigroup.$fDataArg3_info:
         const Data.Semigroup.$fDataArg3_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNN8() //  [R1]
         { []
         }
     {offset
       cfNN8: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNNl; else goto cfNNk;
       cfNNl: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNNk: // global
           _sfCGL::P64 = P64[R1 + 7];
           _sfCGM::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_3_upd_info;
           _sfCGI::P64 = P64[Sp + 24];
           P64[Hp - 80] = _sfCGI::P64;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sfCGM::P64;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfCGI::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfCGL::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNN8_info" {
     block_cfNN8_info:
         const _cfNN8;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.565195903 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapMo_closure" {
     Data.Semigroup.$fDataArg_$cgmapMo_closure:
         const Data.Semigroup.$fDataArg_$cgmapMo_info;
 },
 lvl33_sfCGU_entry() //  [R1]
         { []
         }
     {offset
       cfNNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNNK; else goto cfNNL;
       cfNNK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNNL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCGU_info" {
     lvl33_sfCGU_info:
         const lvl33_sfCGU_entry;
         const 1;
         const 16;
 },
 sat_sfCHs_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNNY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNNZ; else goto cfNO0;
       cfNNZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNO0: // global
           I64[Sp - 24] = block_cfNNV_info;
           _sfCGU::P64 = P64[R1 + 7];
           _sfCGV::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCGU::P64;
           P64[Sp - 8] = _sfCGV::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNOi; else goto cfNNW;
       ufNOi: // global
           call _cfNNV(R1) args: 0, res: 0, upd: 0;
       cfNNW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHs_info" {
     sat_sfCHs_info:
         const sat_sfCHs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNNV() //  [R1]
         { []
         }
     {offset
       cfNNV: // global
           I64[Sp - 8] = block_cfNO3_info;
           _sfCHp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCHp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNOh; else goto cfNO5;
       ufNOh: // global
           call _cfNO3(R1) args: 0, res: 0, upd: 0;
       cfNO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNNV_info" {
     block_cfNNV_info:
         const _cfNNV;
         const 2;
         const 30;
 },
 _cfNO3() //  [R1]
         { []
         }
     {offset
       cfNO3: // global
           if (R1 & 7 == 1) goto cfNOb; else goto cfNOf;
       cfNOb: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNOf: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNO3_info" {
     block_cfNO3_info:
         const _cfNO3;
         const 3;
         const 30;
 },
 sat_sfCHg_entry() //  [R1]
         { []
         }
     {offset
       cfNOT: // global
           _sfCHg::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNOU; else goto cfNOV;
       cfNOV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNOX; else goto cfNOW;
       cfNOX: // global
           HpAlloc = 56;
           goto cfNOU;
       cfNOU: // global
           R1 = _sfCHg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCHg::P64;
           _sfCGV::P64 = P64[_sfCHg::P64 + 16];
           _sfCH2::P64 = P64[_sfCHg::P64 + 24];
           _sfCH6::P64 = P64[_sfCHg::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCH6::P64;
           P64[Hp - 24] = _sfCH2::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCGV::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHg_info" {
     sat_sfCHg_info:
         const sat_sfCHg_entry;
         const 3;
         const 15;
 },
 sat_sfCHc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNP9: // global
           _sfCH9::P64 = R2;
           _sfCHc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNPa; else goto cfNPb;
       cfNPb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNPd; else goto cfNPc;
       cfNPd: // global
           HpAlloc = 56;
           goto cfNPa;
       cfNPa: // global
           R2 = _sfCH9::P64;
           R1 = _sfCHc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNPc: // global
           _sfCGV::P64 = P64[_sfCHc::P64 + 7];
           _sfCH6::P64 = P64[_sfCHc::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCH6::P64;
           P64[Hp - 24] = _sfCH9::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCGV::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHc_info" {
     sat_sfCHc_info:
         const sat_sfCHc_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCHd_entry() //  [R1]
         { []
         }
     {offset
       cfNPe: // global
           _sfCHd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNPf; else goto cfNPg;
       cfNPg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNPi; else goto cfNPh;
       cfNPi: // global
           HpAlloc = 24;
           goto cfNPf;
       cfNPf: // global
           R1 = _sfCHd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNPh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCHd::P64;
           _sfCGV::P64 = P64[_sfCHd::P64 + 16];
           _sfCH3::P64 = P64[_sfCHd::P64 + 24];
           _sfCH6::P64 = P64[_sfCHd::P64 + 32];
           I64[Hp - 16] = sat_sfCHc_info;
           P64[Hp - 8] = _sfCGV::P64;
           P64[Hp] = _sfCH6::P64;
           R2 = _sfCGV::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCH3::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHd_info" {
     sat_sfCHd_info:
         const sat_sfCHd_entry;
         const 3;
         const 15;
 },
 sat_sfCHj_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNPj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfNPk; else goto cfNPl;
       cfNPk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNPl: // global
           I64[Sp - 40] = block_cfNOD_info;
           _sfCGR::P64 = P64[R1 + 7];
           _sfCGV::P64 = P64[R1 + 15];
           _sfCH2::P64 = P64[R1 + 23];
           _sfCH3::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCGR::P64;
           P64[Sp - 24] = _sfCGV::P64;
           P64[Sp - 16] = _sfCH2::P64;
           P64[Sp - 8] = _sfCH3::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNPC; else goto cfNOE;
       ufNPC: // global
           call _cfNOD(R1) args: 0, res: 0, upd: 0;
       cfNOE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHj_info" {
     sat_sfCHj_info:
         const sat_sfCHj_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNOD() //  [R1]
         { []
         }
     {offset
       cfNOD: // global
           I64[Sp - 8] = block_cfNOI_info;
           _sfCH6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCH6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNPB; else goto cfNOJ;
       ufNPB: // global
           call _cfNOI(R1) args: 0, res: 0, upd: 0;
       cfNOJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNOD_info" {
     block_cfNOD_info:
         const _cfNOD;
         const 4;
         const 30;
 },
 _cfNOI() //  [R1]
         { []
         }
     {offset
       cfNOI: // global
           _sfCGV::P64 = P64[Sp + 24];
           _sfCH2::P64 = P64[Sp + 32];
           _sfCH6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfNPo; else goto cfNPs;
       cfNPo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNPr; else goto cfNPq;
       cfNPr: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNPq: // global
           I64[Hp - 72] = sat_sfCHg_info;
           P64[Hp - 56] = _sfCGV::P64;
           P64[Hp - 48] = _sfCH2::P64;
           P64[Hp - 40] = _sfCH6::P64;
           I64[Hp - 32] = sat_sfCHd_info;
           P64[Hp - 16] = _sfCGV::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCH6::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfNPs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNPx; else goto cfNPw;
       cfNPx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNPw: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCH6::P64;
           P64[Hp - 24] = _sfCH2::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCGV::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNOI_info" {
     block_cfNOI_info:
         const _cfNOI;
         const 5;
         const 30;
 },
 k_sfCGZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNPD: // global
           _sfCH2::P64 = R4;
           _sfCH1::P64 = R3;
           _sfCH0::P64 = R2;
           _sfCGZ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfNPE; else goto cfNPF;
       cfNPF: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNPH; else goto cfNPG;
       cfNPH: // global
           HpAlloc = 80;
           goto cfNPE;
       cfNPE: // global
           R4 = _sfCH2::P64;
           R3 = _sfCH1::P64;
           R2 = _sfCH0::P64;
           R1 = _sfCGZ::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNPG: // global
           _sfCGR::P64 = P64[_sfCGZ::P64 + 5];
           _sfCGS::P64 = P64[_sfCGZ::P64 + 13];
           _sfCGV::P64 = P64[_sfCGZ::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfCGS::P64;
           P64[Hp - 48] = _sfCH0::P64;
           P64[Hp - 40] = _sfCH2::P64;
           I64[Hp - 32] = sat_sfCHj_info;
           P64[Hp - 24] = _sfCGR::P64;
           P64[Hp - 16] = _sfCGV::P64;
           P64[Hp - 8] = _sfCH2::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfCGV::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCH1::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfCGZ_info" {
     k_sfCGZ_info:
         const k_sfCGZ_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfCHk_entry() //  [R1]
         { []
         }
     {offset
       cfNPQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNPR; else goto cfNPS;
       cfNPR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNPS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataArg1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHk_info" {
     sat_sfCHk_info:
         const sat_sfCHk_entry;
         const 1;
         const 16;
 },
 sat_sfCHl_entry() //  [R1]
         { []
         }
     {offset
       cfNPT: // global
           _sfCHl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNPU; else goto cfNPV;
       cfNPV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNPX; else goto cfNPW;
       cfNPX: // global
           HpAlloc = 24;
           goto cfNPU;
       cfNPU: // global
           R1 = _sfCHl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNPW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCHl::P64;
           _sfCGP::P64 = P64[_sfCHl::P64 + 16];
           _sfCGV::P64 = P64[_sfCHl::P64 + 24];
           _sfCGX::P64 = P64[_sfCHl::P64 + 32];
           _sfCGZ::P64 = P64[_sfCHl::P64 + 40];
           I64[Hp - 16] = sat_sfCHk_info;
           P64[Hp] = _sfCGV::P64;
           R4 = _sfCGX::P64;
           R3 = Hp - 16;
           R2 = _sfCGP::P64;
           R1 = _sfCGZ::P64;
           Sp = Sp - 16;
           call k_sfCGZ_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHl_info" {
     sat_sfCHl_info:
         const sat_sfCHl_entry;
         const 4;
         const 15;
 },
 sat_sfCHm_entry() //  [R1]
         { []
         }
     {offset
       cfNPY: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNPZ; else goto cfNQ0;
       cfNPZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNQ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cfNOn_info;
           _sfCGP::P64 = P64[R1 + 16];
           _sfCGQ::P64 = P64[R1 + 24];
           _sfCGR::P64 = P64[R1 + 32];
           _sfCGS::P64 = P64[R1 + 40];
           _sfCGV::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sfCGP::P64;
           P64[Sp - 48] = _sfCGQ::P64;
           P64[Sp - 40] = _sfCGR::P64;
           P64[Sp - 32] = _sfCGS::P64;
           P64[Sp - 24] = _sfCGV::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ufNQ4; else goto cfNOo;
       ufNQ4: // global
           call _cfNOn(R1) args: 0, res: 0, upd: 0;
       cfNOo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHm_info" {
     sat_sfCHm_info:
         const sat_sfCHm_entry;
         const 6;
         const 15;
 },
 _cfNOn() //  [R1]
         { []
         }
     {offset
       cfNOn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNQ3; else goto cfNQ2;
       cfNQ3: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfNQ2: // global
           _sfCGX::P64 = P64[R1 + 7];
           _sfCGY::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sfCGZ_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sfCGV::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sfCGV::P64;
           I64[Hp - 40] = sat_sfCHl_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfCGV::P64;
           P64[Hp - 8] = _sfCGX::P64;
           _cfNOs::P64 = Hp - 69;
           P64[Hp] = _cfNOs::P64;
           R4 = _sfCGY::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cfNOs::P64;
           Sp = Sp + 48;
           call k_sfCGZ_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNOn_info" {
     block_cfNOn_info:
         const _cfNOn;
         const 5;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfNQ5: // global
           _sfCGT::P64 = R6;
           _sfCGS::P64 = R5;
           _sfCGR::P64 = R4;
           _sfCGQ::P64 = R3;
           _sfCGP::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cfNQ6; else goto cfNQ7;
       cfNQ7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNQ9; else goto cfNQ8;
       cfNQ9: // global
           HpAlloc = 24;
           goto cfNQ6;
       cfNQ6: // global
           R6 = _sfCGT::P64;
           R5 = _sfCGS::P64;
           R4 = _sfCGR::P64;
           R3 = _sfCGQ::P64;
           R2 = _sfCGP::P64;
           R1 = Data.Semigroup.$fDataArg_$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNQ8: // global
           I64[Hp - 16] = lvl33_sfCGU_info;
           P64[Hp] = _sfCGR::P64;
           I64[Sp - 56] = block_cfNNM_info;
           R2 = _sfCGR::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfCGP::P64;
           P64[Sp - 32] = _sfCGQ::P64;
           P64[Sp - 24] = _sfCGR::P64;
           P64[Sp - 16] = _sfCGS::P64;
           P64[Sp - 8] = _sfCGT::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapMo_info" {
     Data.Semigroup.$fDataArg_$cgmapMo_info:
         const Data.Semigroup.$fDataArg_$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfNNM() //  [R1]
         { []
         }
     {offset
       cfNNM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNQc; else goto cfNQb;
       cfNQc: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNQb: // global
           I64[Hp - 80] = sat_sfCHs_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfCHm_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNNM_info" {
     block_cfNNM_info:
         const _cfNNM;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.600239076 UTC

[section ""data" . lvl18_rfC6Z_closure" {
     lvl18_rfC6Z_closure:
         const lvl18_rfC6Z_info;
         const 0;
 },
 lvl18_rfC6Z_entry() //  [R2]
         { []
         }
     {offset
       cfNRT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNRU; else goto cfNRV;
       cfNRU: // global
           R2 = R2;
           R1 = lvl18_rfC6Z_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNRV: // global
           I64[Sp - 8] = block_cfNRQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNRZ; else goto cfNRR;
       ufNRZ: // global
           call _cfNRQ() args: 0, res: 0, upd: 0;
       cfNRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl18_rfC6Z_info" {
     lvl18_rfC6Z_info:
         const lvl18_rfC6Z_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfCR7_srt+1328;
 },
 _cfNRQ() //  []
         { []
         }
     {offset
       cfNRQ: // global
           R1 = Data.Semigroup.$cArg_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNRQ_info" {
     block_cfNRQ_info:
         const _cfNRQ;
         const 0;
         const 4294967326;
         const SfCR7_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.605625772 UTC

[section ""data" . lvl19_rfC70_closure" {
     lvl19_rfC70_closure:
         const lvl19_rfC70_info;
         const 0;
 },
 lvl19_rfC70_entry() //  []
         { []
         }
     {offset
       cfNSe: // global
           R1 = Data.Semigroup.$tArg_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl19_rfC70_info" {
     lvl19_rfC70_info:
         const lvl19_rfC70_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.608976936 UTC

[section ""data" . lvl20_rfC71_closure" {
     lvl20_rfC71_closure:
         const lvl20_rfC71_info;
 },
 lvl20_rfC71_entry() //  []
         { []
         }
     {offset
       cfNSq: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl20_rfC71_info" {
     lvl20_rfC71_info:
         const lvl20_rfC71_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.617867754 UTC

[section ""data" . Data.Semigroup.$fDataArg_closure" {
     Data.Semigroup.$fDataArg_closure:
         const Data.Semigroup.$fDataArg_info;
         const 0;
 },
 sat_sfCHN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNSH: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapMo_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHN_info" {
     sat_sfCHN_info:
         const sat_sfCHN_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCHM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNSP: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapMp_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHM_info" {
     sat_sfCHM_info:
         const sat_sfCHM_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCHL_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNSX: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapM_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHL_info" {
     sat_sfCHL_info:
         const sat_sfCHL_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCHK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNT5: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapQi_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHK_info" {
     sat_sfCHK_info:
         const sat_sfCHK_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfCR7_srt+1320;
 },
 sat_sfCHJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNTd: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataArg_$cgmapQ_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHJ_info" {
     sat_sfCHJ_info:
         const sat_sfCHJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfCHI_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNTl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNTm; else goto cfNTn;
       cfNTm: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNTn: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Semigroup.$fDataArg_$cgmapQr_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHI_info" {
     sat_sfCHI_info:
         const sat_sfCHI_entry;
         const 2;
         const 11;
         const 17179869208;
 },
 sat_sfCHH_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNTt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNTu; else goto cfNTv;
       cfNTu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNTv: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Semigroup.$fDataArg2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHH_info" {
     sat_sfCHH_info:
         const sat_sfCHH_entry;
         const 2;
         const 11;
         const 17179869208;
 },
 sat_sfCHG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfNTB: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataArg3_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHG_info" {
     sat_sfCHG_info:
         const sat_sfCHG_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfCHF_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNTJ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataArg_$cdataCast2_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHF_info" {
     sat_sfCHF_info:
         const sat_sfCHF_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfCR7_srt+1312;
 },
 sat_sfCHE_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNTR: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgunfold_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHE_info" {
     sat_sfCHE_info:
         const sat_sfCHE_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCHD_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfNTZ: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgfoldl_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCHD_info" {
     sat_sfCHD_info:
         const sat_sfCHD_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfCHC_entry() //  [R1]
         { []
         }
     {offset
       cfNU6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNU7; else goto cfNU8;
       cfNU7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNU8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataArg10_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCHC_info" {
     sat_sfCHC_info:
         const sat_sfCHC_entry;
         const 2;
         const 4294967314;
         const SfCR7_srt+1304;
 },
 Data.Semigroup.$fDataArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfNUa: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto cfNUe; else goto cfNUd;
       cfNUe: // global
           HpAlloc = 424;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNUd: // global
           I64[Hp - 416] = sat_sfCHN_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sfCHM_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sfCHL_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sfCHK_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sfCHJ_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sfCHI_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sfCHH_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sfCHG_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sfCHF_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sfCHE_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sfCHD_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sfCHC_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 152;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 197;
           P64[Hp - 88] = lvl18_rfC6Z_closure+1;
           P64[Hp - 80] = lvl19_rfC70_closure+1;
           P64[Hp - 72] = lvl20_rfC71_closure+2;
           P64[Hp - 64] = Hp - 223;
           P64[Hp - 56] = Hp - 246;
           P64[Hp - 48] = Hp - 268;
           P64[Hp - 40] = Hp - 292;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 341;
           P64[Hp - 16] = Hp - 365;
           P64[Hp - 8] = Hp - 389;
           P64[Hp] = Hp - 413;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_info" {
     Data.Semigroup.$fDataArg_info:
         const Data.Semigroup.$fDataArg_entry;
         const 0;
         const 923417968654;
         const 8589934607;
         const SfCR7_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.641388889 UTC

[section ""data" . Data.Semigroup.$fDataFirst3_closure" {
     Data.Semigroup.$fDataFirst3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataFirst4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.643152968 UTC

[section ""data" . Data.Semigroup.$tcFirst_closure" {
     Data.Semigroup.$tcFirst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataFirst3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5289672677956055491;
         const 1507157566582617174;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.644882057 UTC

[section ""data" . $krep10_rfC72_closure" {
     $krep10_rfC72_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcFirst_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.64671894 UTC

[section ""data" . Data.Semigroup.$tc'First1_closure" {
     Data.Semigroup.$tc'First1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep10_rfC72_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.648386743 UTC

[section ""cstring" . Data.Semigroup.$tc'First3_bytes" {
     Data.Semigroup.$tc'First3_bytes:
         I8[] [39,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.650337514 UTC

[section ""data" . Data.Semigroup.$tc'First2_closure" {
     Data.Semigroup.$tc'First2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'First3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.652078102 UTC

[section ""data" . Data.Semigroup.$tc'First_closure" {
     Data.Semigroup.$tc'First_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'First2_closure+1;
         const Data.Semigroup.$tc'First1_closure+4;
         const 14746522314279732838;
         const 14022550265149674723;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.655482924 UTC

[section ""data" . Data.Semigroup.$fDataFirst2_closure" {
     Data.Semigroup.$fDataFirst2_closure:
         const Data.Semigroup.$fDataFirst2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataFirst2_entry() //  [R1]
         { []
         }
     {offset
       cfNVr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfNVs; else goto cfNVt;
       cfNVs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNVt: // global
           (_cfNVj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfNVj::I64 == 0) goto cfNVl; else goto cfNVk;
       cfNVl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfNVk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfNVj::I64;
           I64[Sp - 24] = block_cfNVm_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataFirst3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 1507157566582617174;
           R2 = 5289672677956055491;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst2_info" {
     Data.Semigroup.$fDataFirst2_info:
         const Data.Semigroup.$fDataFirst2_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1120;
 },
 _cfNVm() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfNVm: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfNVn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfNVm_info" {
     block_cfNVm_info:
         const _cfNVm;
         const 0;
         const 30;
 },
 _cfNVn() //  []
         { []
         }
     {offset
       cfNVn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNVw; else goto cfNVv;
       cfNVw: // global
           HpAlloc = 48;
           I64[Sp] = block_cfNVn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfNVv: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfNVn_info" {
     block_cfNVn_info:
         const _cfNVn;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.663071748 UTC

[section ""data" . Data.Semigroup.$fDataFirst8_closure" {
     Data.Semigroup.$fDataFirst8_closure:
         const Data.Semigroup.$fDataFirst8_info;
         const 0;
 },
 Data.Semigroup.$fDataFirst8_entry() //  [R2]
         { []
         }
     {offset
       cfNVY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfNVZ; else goto cfNW0;
       cfNVZ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNW0: // global
           I64[Sp - 8] = block_cfNVW_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst8_info" {
     Data.Semigroup.$fDataFirst8_info:
         const Data.Semigroup.$fDataFirst8_entry;
         const 0;
         const 13835058059577131022;
         const 4294967301;
         const SfCR7_srt+1128;
 },
 _cfNVW() //  [R1]
         { []
         }
     {offset
       cfNVW: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataFirst2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNVW_info" {
     block_cfNVW_info:
         const _cfNVW;
         const 0;
         const 4611686022722355230;
         const SfCR7_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.670368391 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cdataCast1_closure" {
     Data.Semigroup.$fDataFirst_$cdataCast1_closure:
         const Data.Semigroup.$fDataFirst_$cdataCast1_info;
         const 0;
 },
 lvl33_sfCHY_entry() //  [R1]
         { []
         }
     {offset
       cfNWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNWl; else goto cfNWm;
       cfNWl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNWm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataFirst2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCHY_info" {
     lvl33_sfCHY_info:
         const lvl33_sfCHY_entry;
         const 1;
         const 576460756598390800;
         const SfCR7_srt+1152;
 },
 sat_sfCI2_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNWz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfNWA; else goto cfNWB;
       cfNWA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNWB: // global
           I64[Sp - 24] = block_cfNWs_info;
           _sfCHW::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCHW::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNWM; else goto cfNWt;
       ufNWM: // global
           call _cfNWs(R1) args: 0, res: 0, upd: 0;
       cfNWt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCI2_info" {
     sat_sfCI2_info:
         const sat_sfCI2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNWs() //  [R1]
         { []
         }
     {offset
       cfNWs: // global
           if (R1 & 7 == 1) goto cfNWw; else goto cfNWx;
       cfNWw: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfNWx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNWL; else goto cfNWK;
       cfNWL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNWK: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNWs_info" {
     block_cfNWs_info:
         const _cfNWs;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataFirst_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfNWN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfNWR; else goto cfNWQ;
       cfNWR: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNWQ: // global
           I64[Hp - 40] = lvl33_sfCHY_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCI2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cdataCast1_info" {
     Data.Semigroup.$fDataFirst_$cdataCast1_info:
         const Data.Semigroup.$fDataFirst_$cdataCast1_entry;
         const 0;
         const 2882303765812084750;
         const 8589934607;
         const SfCR7_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.67934497 UTC

[section ""data" . Data.Semigroup.$fDataFirst1_closure" {
     Data.Semigroup.$fDataFirst1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.687599009 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapMp_closure" {
     Data.Semigroup.$fDataFirst_$cgmapMp_closure:
         const Data.Semigroup.$fDataFirst_$cgmapMp_info;
 },
 lvl33_sfCI7_entry() //  [R1]
         { []
         }
     {offset
       cfNXq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfNXr; else goto cfNXs;
       cfNXr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNXs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCI7_info" {
     lvl33_sfCI7_info:
         const lvl33_sfCI7_entry;
         const 1;
         const 16;
 },
 sat_sfCIu_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNXF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNXG; else goto cfNXH;
       cfNXG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNXH: // global
           I64[Sp - 24] = block_cfNXC_info;
           _sfCI7::P64 = P64[R1 + 7];
           _sfCI8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCI7::P64;
           P64[Sp - 8] = _sfCI8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufNXZ; else goto cfNXD;
       ufNXZ: // global
           call _cfNXC(R1) args: 0, res: 0, upd: 0;
       cfNXD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCIu_info" {
     sat_sfCIu_info:
         const sat_sfCIu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfNXC() //  [R1]
         { []
         }
     {offset
       cfNXC: // global
           I64[Sp - 8] = block_cfNXK_info;
           _sfCIr::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCIr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufNXY; else goto cfNXM;
       ufNXY: // global
           call _cfNXK(R1) args: 0, res: 0, upd: 0;
       cfNXM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNXC_info" {
     block_cfNXC_info:
         const _cfNXC;
         const 2;
         const 30;
 },
 _cfNXK() //  [R1]
         { []
         }
     {offset
       cfNXK: // global
           if (R1 & 7 == 1) goto cfNXS; else goto cfNXW;
       cfNXS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfNXW: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNXK_info" {
     block_cfNXK_info:
         const _cfNXK;
         const 3;
         const 30;
 },
 sat_sfCIm_entry() //  [R1]
         { []
         }
     {offset
       cfNYl: // global
           _sfCIm::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfNYm; else goto cfNYn;
       cfNYn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNYp; else goto cfNYo;
       cfNYp: // global
           HpAlloc = 56;
           goto cfNYm;
       cfNYm: // global
           R1 = _sfCIm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNYo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCIm::P64;
           _sfCI6::P64 = P64[_sfCIm::P64 + 16];
           _sfCI8::P64 = P64[_sfCIm::P64 + 24];
           _sfCId::P64 = P64[_sfCIm::P64 + 32];
           _sfCIe::P64 = P64[_sfCIm::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCId::P64;
           P64[Hp - 24] = _sfCI6::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCIe::P64;
           R2 = _sfCI8::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIm_info" {
     sat_sfCIm_info:
         const sat_sfCIm_entry;
         const 4;
         const 15;
 },
 sat_sfCIi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNYB: // global
           _sfCIf::P64 = R2;
           _sfCIi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfNYC; else goto cfNYD;
       cfNYD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfNYF; else goto cfNYE;
       cfNYF: // global
           HpAlloc = 56;
           goto cfNYC;
       cfNYC: // global
           R2 = _sfCIf::P64;
           R1 = _sfCIi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNYE: // global
           _sfCI8::P64 = P64[_sfCIi::P64 + 7];
           _sfCId::P64 = P64[_sfCIi::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCId::P64;
           P64[Hp - 24] = _sfCIf::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCI8::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCIi_info" {
     sat_sfCIi_info:
         const sat_sfCIi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCIj_entry() //  [R1]
         { []
         }
     {offset
       cfNYG: // global
           _sfCIj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNYH; else goto cfNYI;
       cfNYI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNYK; else goto cfNYJ;
       cfNYK: // global
           HpAlloc = 24;
           goto cfNYH;
       cfNYH: // global
           R1 = _sfCIj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNYJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCIj::P64;
           _sfCI8::P64 = P64[_sfCIj::P64 + 16];
           _sfCI9::P64 = P64[_sfCIj::P64 + 24];
           _sfCId::P64 = P64[_sfCIj::P64 + 32];
           I64[Hp - 16] = sat_sfCIi_info;
           P64[Hp - 8] = _sfCI8::P64;
           P64[Hp] = _sfCId::P64;
           R2 = _sfCI8::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCI9::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIj_info" {
     sat_sfCIj_info:
         const sat_sfCIj_entry;
         const 3;
         const 15;
 },
 sat_sfCIn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfNYL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfNYM; else goto cfNYN;
       cfNYM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfNYN: // global
           I64[Sp - 40] = block_cfNYa_info;
           _sfCI4::P64 = P64[R1 + 7];
           _sfCI6::P64 = P64[R1 + 15];
           _sfCI8::P64 = P64[R1 + 23];
           _sfCI9::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCI4::P64;
           P64[Sp - 24] = _sfCI6::P64;
           P64[Sp - 16] = _sfCI8::P64;
           P64[Sp - 8] = _sfCI9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufNYR; else goto cfNYb;
       ufNYR: // global
           call _cfNYa(R1) args: 0, res: 0, upd: 0;
       cfNYb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCIn_info" {
     sat_sfCIn_info:
         const sat_sfCIn_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfNYa() //  [R1]
         { []
         }
     {offset
       cfNYa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfNYQ; else goto cfNYP;
       cfNYQ: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNYP: // global
           _sfCId::P64 = P64[R1 + 7];
           _sfCIe::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCIm_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCI8::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCI8::P64;
           P64[Hp - 48] = _sfCId::P64;
           P64[Hp - 40] = _sfCIe::P64;
           I64[Hp - 32] = sat_sfCIj_info;
           P64[Hp - 16] = _sfCI8::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCId::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNYa_info" {
     block_cfNYa_info:
         const _cfNYa;
         const 4;
         const 30;
 },
 sat_sfCIa_entry() //  [R1]
         { []
         }
     {offset
       cfNYW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfNYX; else goto cfNYY;
       cfNYX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNYY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataFirst1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIa_info" {
     sat_sfCIa_info:
         const sat_sfCIa_entry;
         const 1;
         const 16;
 },
 sat_sfCIo_entry() //  [R1]
         { []
         }
     {offset
       cfNYZ: // global
           _sfCIo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfNZ0; else goto cfNZ1;
       cfNZ1: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfNZ3; else goto cfNZ2;
       cfNZ3: // global
           HpAlloc = 104;
           goto cfNZ0;
       cfNZ0: // global
           R1 = _sfCIo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfNZ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCIo::P64;
           _sfCI3::P64 = P64[_sfCIo::P64 + 16];
           _sfCI4::P64 = P64[_sfCIo::P64 + 24];
           _sfCI5::P64 = P64[_sfCIo::P64 + 32];
           _sfCI6::P64 = P64[_sfCIo::P64 + 40];
           _sfCI8::P64 = P64[_sfCIo::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCI5::P64;
           P64[Hp - 72] = _sfCI3::P64;
           P64[Hp - 64] = _sfCI6::P64;
           I64[Hp - 56] = sat_sfCIn_info;
           P64[Hp - 48] = _sfCI4::P64;
           P64[Hp - 40] = _sfCI6::P64;
           P64[Hp - 32] = _sfCI8::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCIa_info;
           P64[Hp] = _sfCI8::P64;
           R2 = _sfCI8::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIo_info" {
     sat_sfCIo_info:
         const sat_sfCIo_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataFirst_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfNZ4: // global
           _sfCI6::P64 = R5;
           _sfCI5::P64 = R4;
           _sfCI4::P64 = R3;
           _sfCI3::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfNZ5; else goto cfNZ6;
       cfNZ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfNZ8; else goto cfNZ7;
       cfNZ8: // global
           HpAlloc = 24;
           goto cfNZ5;
       cfNZ5: // global
           R5 = _sfCI6::P64;
           R4 = _sfCI5::P64;
           R3 = _sfCI4::P64;
           R2 = _sfCI3::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfNZ7: // global
           I64[Hp - 16] = lvl33_sfCI7_info;
           P64[Hp] = _sfCI4::P64;
           I64[Sp - 48] = block_cfNXt_info;
           R2 = _sfCI4::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCI3::P64;
           P64[Sp - 24] = _sfCI4::P64;
           P64[Sp - 16] = _sfCI5::P64;
           P64[Sp - 8] = _sfCI6::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapMp_info" {
     Data.Semigroup.$fDataFirst_$cgmapMp_info:
         const Data.Semigroup.$fDataFirst_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfNXt() //  [R1]
         { []
         }
     {offset
       cfNXt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfNZb; else goto cfNZa;
       cfNZb: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfNZa: // global
           I64[Hp - 72] = sat_sfCIu_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCIo_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfNXt_info" {
     block_cfNXt_info:
         const _cfNXt;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.715983514 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapM_closure" {
     Data.Semigroup.$fDataFirst_$cgmapM_closure:
         const Data.Semigroup.$fDataFirst_$cgmapM_info;
 },
 sat_sfCIE_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO0F: // global
           _sfCIC::P64 = R2;
           _sfCIE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfO0G; else goto cfO0H;
       cfO0H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfO0J; else goto cfO0I;
       cfO0J: // global
           HpAlloc = 32;
           goto cfO0G;
       cfO0G: // global
           R2 = _sfCIC::P64;
           R1 = _sfCIE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO0I: // global
           _sfCIw::P64 = P64[_sfCIE::P64 + 7];
           _sfCIB::P64 = P64[_sfCIE::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCIB::P64;
           P64[Hp] = _sfCIC::P64;
           R2 = _sfCIw::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCIE_info" {
     sat_sfCIE_info:
         const sat_sfCIE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCIF_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO0K: // global
           _sfCIB::P64 = R2;
           _sfCIF::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfO0L; else goto cfO0M;
       cfO0M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfO0O; else goto cfO0N;
       cfO0O: // global
           HpAlloc = 24;
           goto cfO0L;
       cfO0L: // global
           R2 = _sfCIB::P64;
           R1 = _sfCIF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO0N: // global
           _sfCIw::P64 = P64[_sfCIF::P64 + 7];
           _sfCIz::P64 = P64[_sfCIF::P64 + 15];
           I64[Hp - 16] = sat_sfCIE_info;
           P64[Hp - 8] = _sfCIw::P64;
           P64[Hp] = _sfCIB::P64;
           R2 = _sfCIw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCIz::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCIF_info" {
     sat_sfCIF_info:
         const sat_sfCIF_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCIA_entry() //  [R1]
         { []
         }
     {offset
       cfO0T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfO0U; else goto cfO0V;
       cfO0U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO0V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIA_info" {
     sat_sfCIA_info:
         const sat_sfCIA_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataFirst_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfO0W: // global
           _sfCIy::P64 = R5;
           _sfCIx::P64 = R4;
           _sfCIw::P64 = R3;
           _sfCIv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfO0X; else goto cfO0Y;
       cfO0Y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfO10; else goto cfO0Z;
       cfO10: // global
           HpAlloc = 88;
           goto cfO0X;
       cfO0X: // global
           R5 = _sfCIy::P64;
           R4 = _sfCIx::P64;
           R3 = _sfCIw::P64;
           R2 = _sfCIv::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO0Z: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfCIx::P64;
           P64[Hp - 56] = _sfCIv::P64;
           P64[Hp - 48] = _sfCIy::P64;
           I64[Hp - 40] = sat_sfCIF_info;
           P64[Hp - 32] = _sfCIw::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfCIA_info;
           P64[Hp] = _sfCIw::P64;
           R2 = _sfCIw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapM_info" {
     Data.Semigroup.$fDataFirst_$cgmapM_info:
         const Data.Semigroup.$fDataFirst_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.726544954 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapQi_closure" {
     Data.Semigroup.$fDataFirst_$cgmapQi_closure:
         const Data.Semigroup.$fDataFirst_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataFirst_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfO1u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfO1v; else goto cfO1w;
       cfO1v: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO1w: // global
           I64[Sp - 32] = block_cfO1r_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufO1E; else goto cfO1s;
       ufO1E: // global
           call _cfO1r(R1) args: 0, res: 0, upd: 0;
       cfO1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapQi_info" {
     Data.Semigroup.$fDataFirst_$cgmapQi_info:
         const Data.Semigroup.$fDataFirst_$cgmapQi_entry;
         const 0;
         const 1152921508901814286;
         const 17179869208;
         const SfCR7_srt+1168;
 },
 _cfO1r() //  [R1]
         { []
         }
     {offset
       cfO1r: // global
           if (I64[R1 + 7] == 0) goto cfO1D; else goto cfO1C;
       cfO1D: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO1C: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO1r_info" {
     block_cfO1r_info:
         const _cfO1r;
         const 3;
         const 4294967326;
         const SfCR7_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.739130504 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapMo_closure" {
     Data.Semigroup.$fDataFirst_$cgmapMo_closure:
         const Data.Semigroup.$fDataFirst_$cgmapMo_info;
 },
 lvl33_sfCIR_entry() //  [R1]
         { []
         }
     {offset
       cfO1W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfO1X; else goto cfO1Y;
       cfO1X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO1Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCIR_info" {
     lvl33_sfCIR_info:
         const lvl33_sfCIR_entry;
         const 1;
         const 16;
 },
 sat_sfCJh_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO2b: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfO2c; else goto cfO2d;
       cfO2c: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO2d: // global
           I64[Sp - 24] = block_cfO28_info;
           _sfCIR::P64 = P64[R1 + 7];
           _sfCIS::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCIR::P64;
           P64[Sp - 8] = _sfCIS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufO2v; else goto cfO29;
       ufO2v: // global
           call _cfO28(R1) args: 0, res: 0, upd: 0;
       cfO29: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJh_info" {
     sat_sfCJh_info:
         const sat_sfCJh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfO28() //  [R1]
         { []
         }
     {offset
       cfO28: // global
           I64[Sp - 8] = block_cfO2g_info;
           _sfCJe::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCJe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufO2u; else goto cfO2i;
       ufO2u: // global
           call _cfO2g(R1) args: 0, res: 0, upd: 0;
       cfO2i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO28_info" {
     block_cfO28_info:
         const _cfO28;
         const 2;
         const 30;
 },
 _cfO2g() //  [R1]
         { []
         }
     {offset
       cfO2g: // global
           if (R1 & 7 == 1) goto cfO2o; else goto cfO2s;
       cfO2o: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfO2s: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO2g_info" {
     block_cfO2g_info:
         const _cfO2g;
         const 3;
         const 30;
 },
 sat_sfCJ7_entry() //  [R1]
         { []
         }
     {offset
       cfO2W: // global
           _sfCJ7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfO2X; else goto cfO2Y;
       cfO2Y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfO30; else goto cfO2Z;
       cfO30: // global
           HpAlloc = 56;
           goto cfO2X;
       cfO2X: // global
           R1 = _sfCJ7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO2Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCJ7::P64;
           _sfCIQ::P64 = P64[_sfCJ7::P64 + 16];
           _sfCIS::P64 = P64[_sfCJ7::P64 + 24];
           _sfCIX::P64 = P64[_sfCJ7::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCIX::P64;
           P64[Hp - 24] = _sfCIQ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCIS::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCJ7_info" {
     sat_sfCJ7_info:
         const sat_sfCJ7_entry;
         const 3;
         const 15;
 },
 sat_sfCJ3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO3c: // global
           _sfCJ0::P64 = R2;
           _sfCJ3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfO3d; else goto cfO3e;
       cfO3e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfO3g; else goto cfO3f;
       cfO3g: // global
           HpAlloc = 56;
           goto cfO3d;
       cfO3d: // global
           R2 = _sfCJ0::P64;
           R1 = _sfCJ3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO3f: // global
           _sfCIS::P64 = P64[_sfCJ3::P64 + 7];
           _sfCIX::P64 = P64[_sfCJ3::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCIX::P64;
           P64[Hp - 24] = _sfCJ0::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCIS::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJ3_info" {
     sat_sfCJ3_info:
         const sat_sfCJ3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCJ4_entry() //  [R1]
         { []
         }
     {offset
       cfO3h: // global
           _sfCJ4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfO3i; else goto cfO3j;
       cfO3j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfO3l; else goto cfO3k;
       cfO3l: // global
           HpAlloc = 24;
           goto cfO3i;
       cfO3i: // global
           R1 = _sfCJ4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO3k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCJ4::P64;
           _sfCIS::P64 = P64[_sfCJ4::P64 + 16];
           _sfCIT::P64 = P64[_sfCJ4::P64 + 24];
           _sfCIX::P64 = P64[_sfCJ4::P64 + 32];
           I64[Hp - 16] = sat_sfCJ3_info;
           P64[Hp - 8] = _sfCIS::P64;
           P64[Hp] = _sfCIX::P64;
           R2 = _sfCIS::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCIT::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCJ4_info" {
     sat_sfCJ4_info:
         const sat_sfCJ4_entry;
         const 3;
         const 15;
 },
 sat_sfCJa_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO3m: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfO3n; else goto cfO3o;
       cfO3n: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO3o: // global
           I64[Sp - 40] = block_cfO2G_info;
           _sfCIO::P64 = P64[R1 + 7];
           _sfCIQ::P64 = P64[R1 + 15];
           _sfCIS::P64 = P64[R1 + 23];
           _sfCIT::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCIO::P64;
           P64[Sp - 24] = _sfCIQ::P64;
           P64[Sp - 16] = _sfCIS::P64;
           P64[Sp - 8] = _sfCIT::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufO3F; else goto cfO2H;
       ufO3F: // global
           call _cfO2G(R1) args: 0, res: 0, upd: 0;
       cfO2H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJa_info" {
     sat_sfCJa_info:
         const sat_sfCJa_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfO2G() //  [R1]
         { []
         }
     {offset
       cfO2G: // global
           I64[Sp - 8] = block_cfO2L_info;
           _sfCIX::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCIX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufO3E; else goto cfO2M;
       ufO3E: // global
           call _cfO2L(R1) args: 0, res: 0, upd: 0;
       cfO2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO2G_info" {
     block_cfO2G_info:
         const _cfO2G;
         const 4;
         const 30;
 },
 _cfO2L() //  [R1]
         { []
         }
     {offset
       cfO2L: // global
           _sfCIQ::P64 = P64[Sp + 24];
           _sfCIS::P64 = P64[Sp + 32];
           _sfCIX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfO3r; else goto cfO3v;
       cfO3r: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfO3u; else goto cfO3t;
       cfO3u: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfO3t: // global
           I64[Hp - 72] = sat_sfCJ7_info;
           P64[Hp - 56] = _sfCIQ::P64;
           P64[Hp - 48] = _sfCIS::P64;
           P64[Hp - 40] = _sfCIX::P64;
           I64[Hp - 32] = sat_sfCJ4_info;
           P64[Hp - 16] = _sfCIS::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCIX::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfO3v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfO3A; else goto cfO3z;
       cfO3A: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfO3z: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCIX::P64;
           P64[Hp - 24] = _sfCIQ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCIS::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO2L_info" {
     block_cfO2L_info:
         const _cfO2L;
         const 5;
         const 30;
 },
 sat_sfCIU_entry() //  [R1]
         { []
         }
     {offset
       cfO3K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfO3L; else goto cfO3M;
       cfO3L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO3M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataFirst1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCIU_info" {
     sat_sfCIU_info:
         const sat_sfCIU_entry;
         const 1;
         const 16;
 },
 sat_sfCJb_entry() //  [R1]
         { []
         }
     {offset
       cfO3N: // global
           _sfCJb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfO3O; else goto cfO3P;
       cfO3P: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfO3R; else goto cfO3Q;
       cfO3R: // global
           HpAlloc = 104;
           goto cfO3O;
       cfO3O: // global
           R1 = _sfCJb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCJb::P64;
           _sfCIN::P64 = P64[_sfCJb::P64 + 16];
           _sfCIO::P64 = P64[_sfCJb::P64 + 24];
           _sfCIP::P64 = P64[_sfCJb::P64 + 32];
           _sfCIQ::P64 = P64[_sfCJb::P64 + 40];
           _sfCIS::P64 = P64[_sfCJb::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCIP::P64;
           P64[Hp - 72] = _sfCIN::P64;
           P64[Hp - 64] = _sfCIQ::P64;
           I64[Hp - 56] = sat_sfCJa_info;
           P64[Hp - 48] = _sfCIO::P64;
           P64[Hp - 40] = _sfCIQ::P64;
           P64[Hp - 32] = _sfCIS::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCIU_info;
           P64[Hp] = _sfCIS::P64;
           R2 = _sfCIS::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCJb_info" {
     sat_sfCJb_info:
         const sat_sfCJb_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataFirst_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfO3S: // global
           _sfCIQ::P64 = R5;
           _sfCIP::P64 = R4;
           _sfCIO::P64 = R3;
           _sfCIN::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfO3T; else goto cfO3U;
       cfO3U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfO3W; else goto cfO3V;
       cfO3W: // global
           HpAlloc = 24;
           goto cfO3T;
       cfO3T: // global
           R5 = _sfCIQ::P64;
           R4 = _sfCIP::P64;
           R3 = _sfCIO::P64;
           R2 = _sfCIN::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO3V: // global
           I64[Hp - 16] = lvl33_sfCIR_info;
           P64[Hp] = _sfCIO::P64;
           I64[Sp - 48] = block_cfO1Z_info;
           R2 = _sfCIO::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCIN::P64;
           P64[Sp - 24] = _sfCIO::P64;
           P64[Sp - 16] = _sfCIP::P64;
           P64[Sp - 8] = _sfCIQ::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapMo_info" {
     Data.Semigroup.$fDataFirst_$cgmapMo_info:
         const Data.Semigroup.$fDataFirst_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfO1Z() //  [R1]
         { []
         }
     {offset
       cfO1Z: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfO3Z; else goto cfO3Y;
       cfO3Z: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfO3Y: // global
           I64[Hp - 72] = sat_sfCJh_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCJb_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO1Z_info" {
     block_cfO1Z_info:
         const _cfO1Z;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.771852627 UTC

[section ""data" . lvl21_rfC73_closure" {
     lvl21_rfC73_closure:
         const lvl21_rfC73_info;
         const 0;
 },
 lvl21_rfC73_entry() //  []
         { []
         }
     {offset
       cfO5o: // global
           R1 = Data.Semigroup.$cFirst_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl21_rfC73_info" {
     lvl21_rfC73_info:
         const lvl21_rfC73_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.77519348 UTC

[section ""data" . lvl22_rfC74_closure" {
     lvl22_rfC74_closure:
         const lvl22_rfC74_info;
         const 0;
 },
 lvl22_rfC74_entry() //  []
         { []
         }
     {offset
       cfO5A: // global
           R1 = Data.Semigroup.$tFirst_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl22_rfC74_info" {
     lvl22_rfC74_info:
         const lvl22_rfC74_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.778714894 UTC

[section ""data" . lvl23_rfC75_closure" {
     lvl23_rfC75_closure:
         const lvl23_rfC75_info;
 },
 lvl23_rfC75_entry() //  []
         { []
         }
     {offset
       cfO5M: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl23_rfC75_info" {
     lvl23_rfC75_info:
         const lvl23_rfC75_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.787630063 UTC

[section ""data" . Data.Semigroup.$fDataFirst_closure" {
     Data.Semigroup.$fDataFirst_closure:
         const Data.Semigroup.$fDataFirst_info;
         const 0;
 },
 sat_sfCJR_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO63: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapMo_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJR_info" {
     sat_sfCJR_info:
         const sat_sfCJR_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCJQ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO6b: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapMp_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJQ_info" {
     sat_sfCJQ_info:
         const sat_sfCJQ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCJP_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO6j: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapM_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJP_info" {
     sat_sfCJP_info:
         const sat_sfCJP_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCJO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO6r: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapQi_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJO_info" {
     sat_sfCJO_info:
         const sat_sfCJO_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1392;
 },
 sat_sfCJN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfO6B: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfO6F; else goto cfO6E;
       cfO6F: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO6E: // global
           _sfCJm::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfCJm::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJN_info" {
     sat_sfCJN_info:
         const sat_sfCJN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCJJ_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfO6M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfO6Q; else goto cfO6P;
       cfO6Q: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO6P: // global
           _sfCJm::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCJm::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfCJE::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfCJE::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJJ_info" {
     sat_sfCJJ_info:
         const sat_sfCJJ_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCJD_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfO6X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfO71; else goto cfO70;
       cfO71: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO70: // global
           _sfCJm::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCJm::P64;
           P64[Hp] = R5;
           _sfCJz::P64 = R3;
           R3 = Hp - 32;
           _sfCJy::P64 = R2;
           R2 = _sfCJz::P64;
           R1 = _sfCJy::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJD_info" {
     sat_sfCJD_info:
         const sat_sfCJD_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCJx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfO77: // global
           R3 = R3;
           _sfCJv::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfCJv::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJx_info" {
     sat_sfCJx_info:
         const sat_sfCJx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCJu_entry() //  [R1, R2]
         { []
         }
     {offset
       cfO7f: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataFirst_$cdataCast1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJu_info" {
     sat_sfCJu_info:
         const sat_sfCJu_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1384;
 },
 sat_sfCJs_entry() //  [R1]
         { []
         }
     {offset
       cfO7r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfO7s; else goto cfO7t;
       cfO7s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO7t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCJs_info" {
     sat_sfCJs_info:
         const sat_sfCJs_entry;
         const 1;
         const 16;
 },
 sat_sfCJt_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO7u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfO7y; else goto cfO7x;
       cfO7y: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfO7x: // global
           _sfCJm::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCJs_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCJp::P64 = R2;
           R2 = _sfCJm::P64;
           R1 = _sfCJp::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJt_info" {
     sat_sfCJt_info:
         const sat_sfCJt_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCJo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfO7E: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgfoldl_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCJo_info" {
     sat_sfCJo_info:
         const sat_sfCJo_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCJn_entry() //  [R1]
         { []
         }
     {offset
       cfO7L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfO7M; else goto cfO7N;
       cfO7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataFirst8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCJn_info" {
     sat_sfCJn_info:
         const sat_sfCJn_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1376;
 },
 Data.Semigroup.$fDataFirst_entry() //  [R2]
         { []
         }
     {offset
       cfO7P: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfO7T; else goto cfO7S;
       cfO7T: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO7S: // global
           I64[Hp - 320] = sat_sfCJR_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCJQ_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCJP_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCJO_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCJN_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCJJ_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCJD_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCJx_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCJu_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCJt_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCJo_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCJn_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl21_rfC73_closure+1;
           P64[Hp - 80] = lvl22_rfC74_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl23_rfC75_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_info" {
     Data.Semigroup.$fDataFirst_info:
         const Data.Semigroup.$fDataFirst_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfCR7_srt+1376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.813141784 UTC

[section ""data" . Data.Semigroup.$fDataLast3_closure" {
     Data.Semigroup.$fDataLast3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataLast4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.814959566 UTC

[section ""data" . Data.Semigroup.$tcLast_closure" {
     Data.Semigroup.$tcLast_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataLast3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 11434676963974803827;
         const 15911814017027463598;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.816881803 UTC

[section ""data" . $krep11_rfC76_closure" {
     $krep11_rfC76_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcLast_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.818666876 UTC

[section ""data" . Data.Semigroup.$tc'Last1_closure" {
     Data.Semigroup.$tc'Last1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep11_rfC76_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.820410298 UTC

[section ""cstring" . Data.Semigroup.$tc'Last3_bytes" {
     Data.Semigroup.$tc'Last3_bytes:
         I8[] [39,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.822206836 UTC

[section ""data" . Data.Semigroup.$tc'Last2_closure" {
     Data.Semigroup.$tc'Last2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Last3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.823966925 UTC

[section ""data" . Data.Semigroup.$tc'Last_closure" {
     Data.Semigroup.$tc'Last_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Last2_closure+1;
         const Data.Semigroup.$tc'Last1_closure+4;
         const 3320600960953447003;
         const 12383530634546204472;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.827826245 UTC

[section ""data" . Data.Semigroup.$fDataLast2_closure" {
     Data.Semigroup.$fDataLast2_closure:
         const Data.Semigroup.$fDataLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataLast2_entry() //  [R1]
         { []
         }
     {offset
       cfO9a: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfO9b; else goto cfO9c;
       cfO9b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfO9c: // global
           (_cfO92::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfO92::I64 == 0) goto cfO94; else goto cfO93;
       cfO94: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfO93: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfO92::I64;
           I64[Sp - 24] = block_cfO95_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataLast3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 15911814017027463598;
           R2 = 11434676963974803827;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast2_info" {
     Data.Semigroup.$fDataLast2_info:
         const Data.Semigroup.$fDataLast2_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1440;
 },
 _cfO95() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfO95: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfO96() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfO95_info" {
     block_cfO95_info:
         const _cfO95;
         const 0;
         const 30;
 },
 _cfO96() //  []
         { []
         }
     {offset
       cfO96: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfO9f; else goto cfO9e;
       cfO9f: // global
           HpAlloc = 48;
           I64[Sp] = block_cfO96_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfO9e: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfO96_info" {
     block_cfO96_info:
         const _cfO96;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.836544184 UTC

[section ""data" . Data.Semigroup.$fDataLast8_closure" {
     Data.Semigroup.$fDataLast8_closure:
         const Data.Semigroup.$fDataLast8_info;
         const 0;
 },
 Data.Semigroup.$fDataLast8_entry() //  [R2]
         { []
         }
     {offset
       cfO9H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfO9I; else goto cfO9J;
       cfO9I: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfO9J: // global
           I64[Sp - 8] = block_cfO9F_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast8_info" {
     Data.Semigroup.$fDataLast8_info:
         const Data.Semigroup.$fDataLast8_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfCR7_srt+1448;
 },
 _cfO9F() //  [R1]
         { []
         }
     {offset
       cfO9F: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataLast2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfO9F_info" {
     block_cfO9F_info:
         const _cfO9F;
         const 0;
         const 21474836510;
         const SfCR7_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.843253877 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cdataCast1_closure" {
     Data.Semigroup.$fDataLast_$cdataCast1_closure:
         const Data.Semigroup.$fDataLast_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufOaB_srtd" {
     ufOaB_srtd:
         const SfCR7_srt+1152;
         const 38;
         const 137438953473;
 },
 lvl33_sfCK2_entry() //  [R1]
         { []
         }
     {offset
       cfOa3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOa4; else goto cfOa5;
       cfOa4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOa5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataLast2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCK2_info" {
     lvl33_sfCK2_info:
         const lvl33_sfCK2_entry;
         const 1;
         const 18446744069414584336;
         const ufOaB_srtd;
 },
 sat_sfCK6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOai: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfOaj; else goto cfOak;
       cfOaj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOak: // global
           I64[Sp - 24] = block_cfOab_info;
           _sfCK0::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCK0::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOav; else goto cfOac;
       ufOav: // global
           call _cfOab(R1) args: 0, res: 0, upd: 0;
       cfOac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCK6_info" {
     sat_sfCK6_info:
         const sat_sfCK6_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOab() //  [R1]
         { []
         }
     {offset
       cfOab: // global
           if (R1 & 7 == 1) goto cfOaf; else goto cfOag;
       cfOaf: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfOag: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOau; else goto cfOat;
       cfOau: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOat: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOab_info" {
     block_cfOab_info:
         const _cfOab;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufOaC_srtd" {
     ufOaC_srtd:
         const SfCR7_srt+1152;
         const 41;
         const 1236950581249;
 },
 Data.Semigroup.$fDataLast_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfOaw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOaA; else goto cfOaz;
       cfOaA: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOaz: // global
           I64[Hp - 40] = lvl33_sfCK2_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCK6_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cdataCast1_info" {
     Data.Semigroup.$fDataLast_$cdataCast1_info:
         const Data.Semigroup.$fDataLast_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufOaC_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.853411086 UTC

[section ""data" . Data.Semigroup.$fDataLast1_closure" {
     Data.Semigroup.$fDataLast1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.862075234 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapMp_closure" {
     Data.Semigroup.$fDataLast_$cgmapMp_closure:
         const Data.Semigroup.$fDataLast_$cgmapMp_info;
 },
 lvl33_sfCKb_entry() //  [R1]
         { []
         }
     {offset
       cfObd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfObe; else goto cfObf;
       cfObe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfObf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCKb_info" {
     lvl33_sfCKb_info:
         const lvl33_sfCKb_entry;
         const 1;
         const 16;
 },
 sat_sfCKy_entry() //  [R1, R2]
         { []
         }
     {offset
       cfObs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfObt; else goto cfObu;
       cfObt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfObu: // global
           I64[Sp - 24] = block_cfObp_info;
           _sfCKb::P64 = P64[R1 + 7];
           _sfCKc::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCKb::P64;
           P64[Sp - 8] = _sfCKc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufObM; else goto cfObq;
       ufObM: // global
           call _cfObp(R1) args: 0, res: 0, upd: 0;
       cfObq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCKy_info" {
     sat_sfCKy_info:
         const sat_sfCKy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfObp() //  [R1]
         { []
         }
     {offset
       cfObp: // global
           I64[Sp - 8] = block_cfObx_info;
           _sfCKv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCKv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufObL; else goto cfObz;
       ufObL: // global
           call _cfObx(R1) args: 0, res: 0, upd: 0;
       cfObz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfObp_info" {
     block_cfObp_info:
         const _cfObp;
         const 2;
         const 30;
 },
 _cfObx() //  [R1]
         { []
         }
     {offset
       cfObx: // global
           if (R1 & 7 == 1) goto cfObF; else goto cfObJ;
       cfObF: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfObJ: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfObx_info" {
     block_cfObx_info:
         const _cfObx;
         const 3;
         const 30;
 },
 sat_sfCKq_entry() //  [R1]
         { []
         }
     {offset
       cfOc8: // global
           _sfCKq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfOc9; else goto cfOca;
       cfOca: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOcc; else goto cfOcb;
       cfOcc: // global
           HpAlloc = 56;
           goto cfOc9;
       cfOc9: // global
           R1 = _sfCKq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOcb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCKq::P64;
           _sfCKa::P64 = P64[_sfCKq::P64 + 16];
           _sfCKc::P64 = P64[_sfCKq::P64 + 24];
           _sfCKh::P64 = P64[_sfCKq::P64 + 32];
           _sfCKi::P64 = P64[_sfCKq::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCKh::P64;
           P64[Hp - 24] = _sfCKa::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCKi::P64;
           R2 = _sfCKc::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKq_info" {
     sat_sfCKq_info:
         const sat_sfCKq_entry;
         const 4;
         const 15;
 },
 sat_sfCKm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOco: // global
           _sfCKj::P64 = R2;
           _sfCKm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOcp; else goto cfOcq;
       cfOcq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOcs; else goto cfOcr;
       cfOcs: // global
           HpAlloc = 56;
           goto cfOcp;
       cfOcp: // global
           R2 = _sfCKj::P64;
           R1 = _sfCKm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOcr: // global
           _sfCKc::P64 = P64[_sfCKm::P64 + 7];
           _sfCKh::P64 = P64[_sfCKm::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCKh::P64;
           P64[Hp - 24] = _sfCKj::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCKc::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCKm_info" {
     sat_sfCKm_info:
         const sat_sfCKm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCKn_entry() //  [R1]
         { []
         }
     {offset
       cfOct: // global
           _sfCKn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOcu; else goto cfOcv;
       cfOcv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOcx; else goto cfOcw;
       cfOcx: // global
           HpAlloc = 24;
           goto cfOcu;
       cfOcu: // global
           R1 = _sfCKn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOcw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCKn::P64;
           _sfCKc::P64 = P64[_sfCKn::P64 + 16];
           _sfCKd::P64 = P64[_sfCKn::P64 + 24];
           _sfCKh::P64 = P64[_sfCKn::P64 + 32];
           I64[Hp - 16] = sat_sfCKm_info;
           P64[Hp - 8] = _sfCKc::P64;
           P64[Hp] = _sfCKh::P64;
           R2 = _sfCKc::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCKd::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKn_info" {
     sat_sfCKn_info:
         const sat_sfCKn_entry;
         const 3;
         const 15;
 },
 sat_sfCKr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOcy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfOcz; else goto cfOcA;
       cfOcz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOcA: // global
           I64[Sp - 40] = block_cfObX_info;
           _sfCK8::P64 = P64[R1 + 7];
           _sfCKa::P64 = P64[R1 + 15];
           _sfCKc::P64 = P64[R1 + 23];
           _sfCKd::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCK8::P64;
           P64[Sp - 24] = _sfCKa::P64;
           P64[Sp - 16] = _sfCKc::P64;
           P64[Sp - 8] = _sfCKd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOcE; else goto cfObY;
       ufOcE: // global
           call _cfObX(R1) args: 0, res: 0, upd: 0;
       cfObY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCKr_info" {
     sat_sfCKr_info:
         const sat_sfCKr_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfObX() //  [R1]
         { []
         }
     {offset
       cfObX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOcD; else goto cfOcC;
       cfOcD: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOcC: // global
           _sfCKh::P64 = P64[R1 + 7];
           _sfCKi::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCKq_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCKc::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCKc::P64;
           P64[Hp - 48] = _sfCKh::P64;
           P64[Hp - 40] = _sfCKi::P64;
           I64[Hp - 32] = sat_sfCKn_info;
           P64[Hp - 16] = _sfCKc::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCKh::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfObX_info" {
     block_cfObX_info:
         const _cfObX;
         const 4;
         const 30;
 },
 sat_sfCKe_entry() //  [R1]
         { []
         }
     {offset
       cfOcJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOcK; else goto cfOcL;
       cfOcK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataLast1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKe_info" {
     sat_sfCKe_info:
         const sat_sfCKe_entry;
         const 1;
         const 16;
 },
 sat_sfCKs_entry() //  [R1]
         { []
         }
     {offset
       cfOcM: // global
           _sfCKs::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOcN; else goto cfOcO;
       cfOcO: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOcQ; else goto cfOcP;
       cfOcQ: // global
           HpAlloc = 104;
           goto cfOcN;
       cfOcN: // global
           R1 = _sfCKs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOcP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCKs::P64;
           _sfCK7::P64 = P64[_sfCKs::P64 + 16];
           _sfCK8::P64 = P64[_sfCKs::P64 + 24];
           _sfCK9::P64 = P64[_sfCKs::P64 + 32];
           _sfCKa::P64 = P64[_sfCKs::P64 + 40];
           _sfCKc::P64 = P64[_sfCKs::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCK9::P64;
           P64[Hp - 72] = _sfCK7::P64;
           P64[Hp - 64] = _sfCKa::P64;
           I64[Hp - 56] = sat_sfCKr_info;
           P64[Hp - 48] = _sfCK8::P64;
           P64[Hp - 40] = _sfCKa::P64;
           P64[Hp - 32] = _sfCKc::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCKe_info;
           P64[Hp] = _sfCKc::P64;
           R2 = _sfCKc::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKs_info" {
     sat_sfCKs_info:
         const sat_sfCKs_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataLast_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOcR: // global
           _sfCKa::P64 = R5;
           _sfCK9::P64 = R4;
           _sfCK8::P64 = R3;
           _sfCK7::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOcS; else goto cfOcT;
       cfOcT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOcV; else goto cfOcU;
       cfOcV: // global
           HpAlloc = 24;
           goto cfOcS;
       cfOcS: // global
           R5 = _sfCKa::P64;
           R4 = _sfCK9::P64;
           R3 = _sfCK8::P64;
           R2 = _sfCK7::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOcU: // global
           I64[Hp - 16] = lvl33_sfCKb_info;
           P64[Hp] = _sfCK8::P64;
           I64[Sp - 48] = block_cfObg_info;
           R2 = _sfCK8::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCK7::P64;
           P64[Sp - 24] = _sfCK8::P64;
           P64[Sp - 16] = _sfCK9::P64;
           P64[Sp - 8] = _sfCKa::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapMp_info" {
     Data.Semigroup.$fDataLast_$cgmapMp_info:
         const Data.Semigroup.$fDataLast_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfObg() //  [R1]
         { []
         }
     {offset
       cfObg: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOcY; else goto cfOcX;
       cfOcY: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOcX: // global
           I64[Hp - 72] = sat_sfCKy_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCKs_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfObg_info" {
     block_cfObg_info:
         const _cfObg;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.890667235 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapM_closure" {
     Data.Semigroup.$fDataLast_$cgmapM_closure:
         const Data.Semigroup.$fDataLast_$cgmapM_info;
 },
 sat_sfCKI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOes: // global
           _sfCKG::P64 = R2;
           _sfCKI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOet; else goto cfOeu;
       cfOeu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfOew; else goto cfOev;
       cfOew: // global
           HpAlloc = 32;
           goto cfOet;
       cfOet: // global
           R2 = _sfCKG::P64;
           R1 = _sfCKI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOev: // global
           _sfCKA::P64 = P64[_sfCKI::P64 + 7];
           _sfCKF::P64 = P64[_sfCKI::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCKF::P64;
           P64[Hp] = _sfCKG::P64;
           R2 = _sfCKA::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCKI_info" {
     sat_sfCKI_info:
         const sat_sfCKI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCKJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOex: // global
           _sfCKF::P64 = R2;
           _sfCKJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOey; else goto cfOez;
       cfOez: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOeB; else goto cfOeA;
       cfOeB: // global
           HpAlloc = 24;
           goto cfOey;
       cfOey: // global
           R2 = _sfCKF::P64;
           R1 = _sfCKJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOeA: // global
           _sfCKA::P64 = P64[_sfCKJ::P64 + 7];
           _sfCKD::P64 = P64[_sfCKJ::P64 + 15];
           I64[Hp - 16] = sat_sfCKI_info;
           P64[Hp - 8] = _sfCKA::P64;
           P64[Hp] = _sfCKF::P64;
           R2 = _sfCKA::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCKD::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCKJ_info" {
     sat_sfCKJ_info:
         const sat_sfCKJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCKE_entry() //  [R1]
         { []
         }
     {offset
       cfOeG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOeH; else goto cfOeI;
       cfOeH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOeI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKE_info" {
     sat_sfCKE_info:
         const sat_sfCKE_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataLast_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOeJ: // global
           _sfCKC::P64 = R5;
           _sfCKB::P64 = R4;
           _sfCKA::P64 = R3;
           _sfCKz::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOeK; else goto cfOeL;
       cfOeL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOeN; else goto cfOeM;
       cfOeN: // global
           HpAlloc = 88;
           goto cfOeK;
       cfOeK: // global
           R5 = _sfCKC::P64;
           R4 = _sfCKB::P64;
           R3 = _sfCKA::P64;
           R2 = _sfCKz::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOeM: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfCKB::P64;
           P64[Hp - 56] = _sfCKz::P64;
           P64[Hp - 48] = _sfCKC::P64;
           I64[Hp - 40] = sat_sfCKJ_info;
           P64[Hp - 32] = _sfCKA::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfCKE_info;
           P64[Hp] = _sfCKA::P64;
           R2 = _sfCKA::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapM_info" {
     Data.Semigroup.$fDataLast_$cgmapM_info:
         const Data.Semigroup.$fDataLast_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.900855276 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapQi_closure" {
     Data.Semigroup.$fDataLast_$cgmapQi_closure:
         const Data.Semigroup.$fDataLast_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataLast_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOfh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOfi; else goto cfOfj;
       cfOfi: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOfj: // global
           I64[Sp - 32] = block_cfOfe_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufOfr; else goto cfOff;
       ufOfr: // global
           call _cfOfe(R1) args: 0, res: 0, upd: 0;
       cfOff: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapQi_info" {
     Data.Semigroup.$fDataLast_$cgmapQi_info:
         const Data.Semigroup.$fDataLast_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfCR7_srt+1480;
 },
 _cfOfe() //  [R1]
         { []
         }
     {offset
       cfOfe: // global
           if (I64[R1 + 7] == 0) goto cfOfq; else goto cfOfp;
       cfOfq: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOfp: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOfe_info" {
     block_cfOfe_info:
         const _cfOfe;
         const 3;
         const 4294967326;
         const SfCR7_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.913079724 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapMo_closure" {
     Data.Semigroup.$fDataLast_$cgmapMo_closure:
         const Data.Semigroup.$fDataLast_$cgmapMo_info;
 },
 lvl33_sfCKV_entry() //  [R1]
         { []
         }
     {offset
       cfOfJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOfK; else goto cfOfL;
       cfOfK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOfL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCKV_info" {
     lvl33_sfCKV_info:
         const lvl33_sfCKV_entry;
         const 1;
         const 16;
 },
 sat_sfCLl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOfY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOfZ; else goto cfOg0;
       cfOfZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOg0: // global
           I64[Sp - 24] = block_cfOfV_info;
           _sfCKV::P64 = P64[R1 + 7];
           _sfCKW::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCKV::P64;
           P64[Sp - 8] = _sfCKW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOgi; else goto cfOfW;
       ufOgi: // global
           call _cfOfV(R1) args: 0, res: 0, upd: 0;
       cfOfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLl_info" {
     sat_sfCLl_info:
         const sat_sfCLl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOfV() //  [R1]
         { []
         }
     {offset
       cfOfV: // global
           I64[Sp - 8] = block_cfOg3_info;
           _sfCLi::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCLi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOgh; else goto cfOg5;
       ufOgh: // global
           call _cfOg3(R1) args: 0, res: 0, upd: 0;
       cfOg5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOfV_info" {
     block_cfOfV_info:
         const _cfOfV;
         const 2;
         const 30;
 },
 _cfOg3() //  [R1]
         { []
         }
     {offset
       cfOg3: // global
           if (R1 & 7 == 1) goto cfOgb; else goto cfOgf;
       cfOgb: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfOgf: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOg3_info" {
     block_cfOg3_info:
         const _cfOg3;
         const 3;
         const 30;
 },
 sat_sfCLb_entry() //  [R1]
         { []
         }
     {offset
       cfOgJ: // global
           _sfCLb::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfOgK; else goto cfOgL;
       cfOgL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOgN; else goto cfOgM;
       cfOgN: // global
           HpAlloc = 56;
           goto cfOgK;
       cfOgK: // global
           R1 = _sfCLb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOgM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCLb::P64;
           _sfCKU::P64 = P64[_sfCLb::P64 + 16];
           _sfCKW::P64 = P64[_sfCLb::P64 + 24];
           _sfCL1::P64 = P64[_sfCLb::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCL1::P64;
           P64[Hp - 24] = _sfCKU::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCKW::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCLb_info" {
     sat_sfCLb_info:
         const sat_sfCLb_entry;
         const 3;
         const 15;
 },
 sat_sfCL7_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOgZ: // global
           _sfCL4::P64 = R2;
           _sfCL7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOh0; else goto cfOh1;
       cfOh1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOh3; else goto cfOh2;
       cfOh3: // global
           HpAlloc = 56;
           goto cfOh0;
       cfOh0: // global
           R2 = _sfCL4::P64;
           R1 = _sfCL7::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOh2: // global
           _sfCKW::P64 = P64[_sfCL7::P64 + 7];
           _sfCL1::P64 = P64[_sfCL7::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCL1::P64;
           P64[Hp - 24] = _sfCL4::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCKW::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCL7_info" {
     sat_sfCL7_info:
         const sat_sfCL7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCL8_entry() //  [R1]
         { []
         }
     {offset
       cfOh4: // global
           _sfCL8::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOh5; else goto cfOh6;
       cfOh6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOh8; else goto cfOh7;
       cfOh8: // global
           HpAlloc = 24;
           goto cfOh5;
       cfOh5: // global
           R1 = _sfCL8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOh7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCL8::P64;
           _sfCKW::P64 = P64[_sfCL8::P64 + 16];
           _sfCKX::P64 = P64[_sfCL8::P64 + 24];
           _sfCL1::P64 = P64[_sfCL8::P64 + 32];
           I64[Hp - 16] = sat_sfCL7_info;
           P64[Hp - 8] = _sfCKW::P64;
           P64[Hp] = _sfCL1::P64;
           R2 = _sfCKW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCKX::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCL8_info" {
     sat_sfCL8_info:
         const sat_sfCL8_entry;
         const 3;
         const 15;
 },
 sat_sfCLe_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOh9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfOha; else goto cfOhb;
       cfOha: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOhb: // global
           I64[Sp - 40] = block_cfOgt_info;
           _sfCKS::P64 = P64[R1 + 7];
           _sfCKU::P64 = P64[R1 + 15];
           _sfCKW::P64 = P64[R1 + 23];
           _sfCKX::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCKS::P64;
           P64[Sp - 24] = _sfCKU::P64;
           P64[Sp - 16] = _sfCKW::P64;
           P64[Sp - 8] = _sfCKX::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOhs; else goto cfOgu;
       ufOhs: // global
           call _cfOgt(R1) args: 0, res: 0, upd: 0;
       cfOgu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLe_info" {
     sat_sfCLe_info:
         const sat_sfCLe_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfOgt() //  [R1]
         { []
         }
     {offset
       cfOgt: // global
           I64[Sp - 8] = block_cfOgy_info;
           _sfCL1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCL1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOhr; else goto cfOgz;
       ufOhr: // global
           call _cfOgy(R1) args: 0, res: 0, upd: 0;
       cfOgz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOgt_info" {
     block_cfOgt_info:
         const _cfOgt;
         const 4;
         const 30;
 },
 _cfOgy() //  [R1]
         { []
         }
     {offset
       cfOgy: // global
           _sfCKU::P64 = P64[Sp + 24];
           _sfCKW::P64 = P64[Sp + 32];
           _sfCL1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfOhe; else goto cfOhi;
       cfOhe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOhh; else goto cfOhg;
       cfOhh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOhg: // global
           I64[Hp - 72] = sat_sfCLb_info;
           P64[Hp - 56] = _sfCKU::P64;
           P64[Hp - 48] = _sfCKW::P64;
           P64[Hp - 40] = _sfCL1::P64;
           I64[Hp - 32] = sat_sfCL8_info;
           P64[Hp - 16] = _sfCKW::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCL1::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfOhi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOhn; else goto cfOhm;
       cfOhn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOhm: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCL1::P64;
           P64[Hp - 24] = _sfCKU::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCKW::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOgy_info" {
     block_cfOgy_info:
         const _cfOgy;
         const 5;
         const 30;
 },
 sat_sfCKY_entry() //  [R1]
         { []
         }
     {offset
       cfOhx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOhy; else goto cfOhz;
       cfOhy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOhz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataLast1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCKY_info" {
     sat_sfCKY_info:
         const sat_sfCKY_entry;
         const 1;
         const 16;
 },
 sat_sfCLf_entry() //  [R1]
         { []
         }
     {offset
       cfOhA: // global
           _sfCLf::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOhB; else goto cfOhC;
       cfOhC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOhE; else goto cfOhD;
       cfOhE: // global
           HpAlloc = 104;
           goto cfOhB;
       cfOhB: // global
           R1 = _sfCLf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOhD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCLf::P64;
           _sfCKR::P64 = P64[_sfCLf::P64 + 16];
           _sfCKS::P64 = P64[_sfCLf::P64 + 24];
           _sfCKT::P64 = P64[_sfCLf::P64 + 32];
           _sfCKU::P64 = P64[_sfCLf::P64 + 40];
           _sfCKW::P64 = P64[_sfCLf::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCKT::P64;
           P64[Hp - 72] = _sfCKR::P64;
           P64[Hp - 64] = _sfCKU::P64;
           I64[Hp - 56] = sat_sfCLe_info;
           P64[Hp - 48] = _sfCKS::P64;
           P64[Hp - 40] = _sfCKU::P64;
           P64[Hp - 32] = _sfCKW::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCKY_info;
           P64[Hp] = _sfCKW::P64;
           R2 = _sfCKW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCLf_info" {
     sat_sfCLf_info:
         const sat_sfCLf_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataLast_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOhF: // global
           _sfCKU::P64 = R5;
           _sfCKT::P64 = R4;
           _sfCKS::P64 = R3;
           _sfCKR::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOhG; else goto cfOhH;
       cfOhH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOhJ; else goto cfOhI;
       cfOhJ: // global
           HpAlloc = 24;
           goto cfOhG;
       cfOhG: // global
           R5 = _sfCKU::P64;
           R4 = _sfCKT::P64;
           R3 = _sfCKS::P64;
           R2 = _sfCKR::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOhI: // global
           I64[Hp - 16] = lvl33_sfCKV_info;
           P64[Hp] = _sfCKS::P64;
           I64[Sp - 48] = block_cfOfM_info;
           R2 = _sfCKS::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCKR::P64;
           P64[Sp - 24] = _sfCKS::P64;
           P64[Sp - 16] = _sfCKT::P64;
           P64[Sp - 8] = _sfCKU::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapMo_info" {
     Data.Semigroup.$fDataLast_$cgmapMo_info:
         const Data.Semigroup.$fDataLast_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfOfM() //  [R1]
         { []
         }
     {offset
       cfOfM: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOhM; else goto cfOhL;
       cfOhM: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOhL: // global
           I64[Hp - 72] = sat_sfCLl_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCLf_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOfM_info" {
     block_cfOfM_info:
         const _cfOfM;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.941829008 UTC

[section ""data" . lvl24_rfC77_closure" {
     lvl24_rfC77_closure:
         const lvl24_rfC77_info;
         const 0;
 },
 lvl24_rfC77_entry() //  []
         { []
         }
     {offset
       cfOjb: // global
           R1 = Data.Semigroup.$cLast_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl24_rfC77_info" {
     lvl24_rfC77_info:
         const lvl24_rfC77_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.945011027 UTC

[section ""data" . lvl25_rfC78_closure" {
     lvl25_rfC78_closure:
         const lvl25_rfC78_info;
         const 0;
 },
 lvl25_rfC78_entry() //  []
         { []
         }
     {offset
       cfOjn: // global
           R1 = Data.Semigroup.$tLast_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl25_rfC78_info" {
     lvl25_rfC78_info:
         const lvl25_rfC78_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.948332299 UTC

[section ""data" . lvl26_rfC79_closure" {
     lvl26_rfC79_closure:
         const lvl26_rfC79_info;
 },
 lvl26_rfC79_entry() //  []
         { []
         }
     {offset
       cfOjz: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl26_rfC79_info" {
     lvl26_rfC79_info:
         const lvl26_rfC79_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.957324581 UTC

[section ""data" . Data.Semigroup.$fDataLast_closure" {
     Data.Semigroup.$fDataLast_closure:
         const Data.Semigroup.$fDataLast_info;
         const 0;
 },
 sat_sfCLV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOjQ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapMo_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLV_info" {
     sat_sfCLV_info:
         const sat_sfCLV_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCLU_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOjY: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapMp_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLU_info" {
     sat_sfCLU_info:
         const sat_sfCLU_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCLT_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOk6: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapM_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLT_info" {
     sat_sfCLT_info:
         const sat_sfCLT_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCLS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOke: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapQi_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLS_info" {
     sat_sfCLS_info:
         const sat_sfCLS_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1480;
 },
 sat_sfCLR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOko: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfOks; else goto cfOkr;
       cfOks: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOkr: // global
           _sfCLq::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfCLq::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLR_info" {
     sat_sfCLR_info:
         const sat_sfCLR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCLN_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOkz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOkD; else goto cfOkC;
       cfOkD: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOkC: // global
           _sfCLq::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCLq::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfCLI::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfCLI::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLN_info" {
     sat_sfCLN_info:
         const sat_sfCLN_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCLH_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOkK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOkO; else goto cfOkN;
       cfOkO: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOkN: // global
           _sfCLq::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCLq::P64;
           P64[Hp] = R5;
           _sfCLD::P64 = R3;
           R3 = Hp - 32;
           _sfCLC::P64 = R2;
           R2 = _sfCLD::P64;
           R1 = _sfCLC::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLH_info" {
     sat_sfCLH_info:
         const sat_sfCLH_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCLB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOkU: // global
           R3 = R3;
           _sfCLz::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfCLz::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLB_info" {
     sat_sfCLB_info:
         const sat_sfCLB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCLy_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOl2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataLast_$cdataCast1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLy_info" {
     sat_sfCLy_info:
         const sat_sfCLy_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1472;
 },
 sat_sfCLw_entry() //  [R1]
         { []
         }
     {offset
       cfOle: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOlf; else goto cfOlg;
       cfOlf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOlg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCLw_info" {
     sat_sfCLw_info:
         const sat_sfCLw_entry;
         const 1;
         const 16;
 },
 sat_sfCLx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOlh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOll; else goto cfOlk;
       cfOll: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOlk: // global
           _sfCLq::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCLw_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCLt::P64 = R2;
           R2 = _sfCLq::P64;
           R1 = _sfCLt::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLx_info" {
     sat_sfCLx_info:
         const sat_sfCLx_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCLs_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOlr: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgfoldl_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCLs_info" {
     sat_sfCLs_info:
         const sat_sfCLs_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCLr_entry() //  [R1]
         { []
         }
     {offset
       cfOly: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOlz; else goto cfOlA;
       cfOlz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOlA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataLast8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCLr_info" {
     sat_sfCLr_info:
         const sat_sfCLr_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1456;
 },
 Data.Semigroup.$fDataLast_entry() //  [R2]
         { []
         }
     {offset
       cfOlC: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfOlG; else goto cfOlF;
       cfOlG: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOlF: // global
           I64[Hp - 320] = sat_sfCLV_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCLU_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCLT_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCLS_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCLR_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCLN_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCLH_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCLB_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCLy_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCLx_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCLs_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCLr_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl24_rfC77_closure+1;
           P64[Hp - 80] = lvl25_rfC78_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl26_rfC79_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_info" {
     Data.Semigroup.$fDataLast_info:
         const Data.Semigroup.$fDataLast_entry;
         const 0;
         const 3904125272078;
         const 4294967301;
         const SfCR7_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.982166846 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid3_closure" {
     Data.Semigroup.$fDataWrappedMonoid3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataWrappedMonoid4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.983892919 UTC

[section ""data" . Data.Semigroup.$tcWrappedMonoid_closure" {
     Data.Semigroup.$tcWrappedMonoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataWrappedMonoid3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3715640179151546043;
         const 2823802549020348832;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.985730491 UTC

[section ""data" . $krep12_rfC7a_closure" {
     $krep12_rfC7a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcWrappedMonoid_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.987397839 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid1_closure" {
     Data.Semigroup.$tc'WrapMonoid1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep12_rfC7a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.989061812 UTC

[section ""cstring" . Data.Semigroup.$tc'WrapMonoid3_bytes" {
     Data.Semigroup.$tc'WrapMonoid3_bytes:
         I8[] [39,87,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.990984791 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid2_closure" {
     Data.Semigroup.$tc'WrapMonoid2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'WrapMonoid3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.992659113 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid_closure" {
     Data.Semigroup.$tc'WrapMonoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'WrapMonoid2_closure+1;
         const Data.Semigroup.$tc'WrapMonoid1_closure+4;
         const 4283841874858276090;
         const 3445460813926951313;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:24.996463266 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid2_closure" {
     Data.Semigroup.$fDataWrappedMonoid2_closure:
         const Data.Semigroup.$fDataWrappedMonoid2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid2_entry() //  [R1]
         { []
         }
     {offset
       cfOmX: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfOmY; else goto cfOmZ;
       cfOmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOmZ: // global
           (_cfOmP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfOmP::I64 == 0) goto cfOmR; else goto cfOmQ;
       cfOmR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfOmQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfOmP::I64;
           I64[Sp - 24] = block_cfOmS_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataWrappedMonoid3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 2823802549020348832;
           R2 = 3715640179151546043;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid2_info" {
     Data.Semigroup.$fDataWrappedMonoid2_info:
         const Data.Semigroup.$fDataWrappedMonoid2_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1440;
 },
 _cfOmS() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOmS: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfOmT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfOmS_info" {
     block_cfOmS_info:
         const _cfOmS;
         const 0;
         const 30;
 },
 _cfOmT() //  []
         { []
         }
     {offset
       cfOmT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOn2; else goto cfOn1;
       cfOn2: // global
           HpAlloc = 48;
           I64[Sp] = block_cfOmT_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfOn1: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfOmT_info" {
     block_cfOmT_info:
         const _cfOmT;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.004287734 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid8_closure" {
     Data.Semigroup.$fDataWrappedMonoid8_closure:
         const Data.Semigroup.$fDataWrappedMonoid8_info;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid8_entry() //  [R2]
         { []
         }
     {offset
       cfOnu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfOnv; else goto cfOnw;
       cfOnv: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOnw: // global
           I64[Sp - 8] = block_cfOns_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid8_info" {
     Data.Semigroup.$fDataWrappedMonoid8_info:
         const Data.Semigroup.$fDataWrappedMonoid8_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const SfCR7_srt+1464;
 },
 _cfOns() //  [R1]
         { []
         }
     {offset
       cfOns: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataWrappedMonoid2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOns_info" {
     block_cfOns_info:
         const _cfOns;
         const 0;
         const 2203318222878;
         const SfCR7_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.010781644 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufOoo_srtd" {
     ufOoo_srtd:
         const SfCR7_srt+1152;
         const 49;
         const 281474976710657;
 },
 lvl33_sfCM6_entry() //  [R1]
         { []
         }
     {offset
       cfOnQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOnR; else goto cfOnS;
       cfOnR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOnS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataWrappedMonoid2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCM6_info" {
     lvl33_sfCM6_info:
         const lvl33_sfCM6_entry;
         const 1;
         const 18446744069414584336;
         const ufOoo_srtd;
 },
 sat_sfCMa_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOo5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfOo6; else goto cfOo7;
       cfOo6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOo7: // global
           I64[Sp - 24] = block_cfOnY_info;
           _sfCM4::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCM4::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOoi; else goto cfOnZ;
       ufOoi: // global
           call _cfOnY(R1) args: 0, res: 0, upd: 0;
       cfOnZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMa_info" {
     sat_sfCMa_info:
         const sat_sfCMa_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOnY() //  [R1]
         { []
         }
     {offset
       cfOnY: // global
           if (R1 & 7 == 1) goto cfOo2; else goto cfOo3;
       cfOo2: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfOo3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOoh; else goto cfOog;
       cfOoh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOog: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOnY_info" {
     block_cfOnY_info:
         const _cfOnY;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufOop_srtd" {
     ufOop_srtd:
         const SfCR7_srt+1152;
         const 51;
         const 1407374883553281;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfOoj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOon; else goto cfOom;
       cfOon: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOom: // global
           I64[Hp - 40] = lvl33_sfCM6_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCMa_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufOop_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.0205072 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid1_closure" {
     Data.Semigroup.$fDataWrappedMonoid1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.029022871 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info;
 },
 lvl33_sfCMf_entry() //  [R1]
         { []
         }
     {offset
       cfOp0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOp1; else goto cfOp2;
       cfOp1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOp2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCMf_info" {
     lvl33_sfCMf_info:
         const lvl33_sfCMf_entry;
         const 1;
         const 16;
 },
 sat_sfCMC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOpf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOpg; else goto cfOph;
       cfOpg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOph: // global
           I64[Sp - 24] = block_cfOpc_info;
           _sfCMf::P64 = P64[R1 + 7];
           _sfCMg::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCMf::P64;
           P64[Sp - 8] = _sfCMg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOpz; else goto cfOpd;
       ufOpz: // global
           call _cfOpc(R1) args: 0, res: 0, upd: 0;
       cfOpd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMC_info" {
     sat_sfCMC_info:
         const sat_sfCMC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOpc() //  [R1]
         { []
         }
     {offset
       cfOpc: // global
           I64[Sp - 8] = block_cfOpk_info;
           _sfCMz::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCMz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOpy; else goto cfOpm;
       ufOpy: // global
           call _cfOpk(R1) args: 0, res: 0, upd: 0;
       cfOpm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOpc_info" {
     block_cfOpc_info:
         const _cfOpc;
         const 2;
         const 30;
 },
 _cfOpk() //  [R1]
         { []
         }
     {offset
       cfOpk: // global
           if (R1 & 7 == 1) goto cfOps; else goto cfOpw;
       cfOps: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfOpw: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOpk_info" {
     block_cfOpk_info:
         const _cfOpk;
         const 3;
         const 30;
 },
 sat_sfCMu_entry() //  [R1]
         { []
         }
     {offset
       cfOpV: // global
           _sfCMu::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfOpW; else goto cfOpX;
       cfOpX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOpZ; else goto cfOpY;
       cfOpZ: // global
           HpAlloc = 56;
           goto cfOpW;
       cfOpW: // global
           R1 = _sfCMu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOpY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCMu::P64;
           _sfCMe::P64 = P64[_sfCMu::P64 + 16];
           _sfCMg::P64 = P64[_sfCMu::P64 + 24];
           _sfCMl::P64 = P64[_sfCMu::P64 + 32];
           _sfCMm::P64 = P64[_sfCMu::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCMl::P64;
           P64[Hp - 24] = _sfCMe::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCMm::P64;
           R2 = _sfCMg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCMu_info" {
     sat_sfCMu_info:
         const sat_sfCMu_entry;
         const 4;
         const 15;
 },
 sat_sfCMq_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOqb: // global
           _sfCMn::P64 = R2;
           _sfCMq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOqc; else goto cfOqd;
       cfOqd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOqf; else goto cfOqe;
       cfOqf: // global
           HpAlloc = 56;
           goto cfOqc;
       cfOqc: // global
           R2 = _sfCMn::P64;
           R1 = _sfCMq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOqe: // global
           _sfCMg::P64 = P64[_sfCMq::P64 + 7];
           _sfCMl::P64 = P64[_sfCMq::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCMl::P64;
           P64[Hp - 24] = _sfCMn::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCMg::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMq_info" {
     sat_sfCMq_info:
         const sat_sfCMq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCMr_entry() //  [R1]
         { []
         }
     {offset
       cfOqg: // global
           _sfCMr::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOqh; else goto cfOqi;
       cfOqi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOqk; else goto cfOqj;
       cfOqk: // global
           HpAlloc = 24;
           goto cfOqh;
       cfOqh: // global
           R1 = _sfCMr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOqj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCMr::P64;
           _sfCMg::P64 = P64[_sfCMr::P64 + 16];
           _sfCMh::P64 = P64[_sfCMr::P64 + 24];
           _sfCMl::P64 = P64[_sfCMr::P64 + 32];
           I64[Hp - 16] = sat_sfCMq_info;
           P64[Hp - 8] = _sfCMg::P64;
           P64[Hp] = _sfCMl::P64;
           R2 = _sfCMg::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCMh::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCMr_info" {
     sat_sfCMr_info:
         const sat_sfCMr_entry;
         const 3;
         const 15;
 },
 sat_sfCMv_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOql: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfOqm; else goto cfOqn;
       cfOqm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOqn: // global
           I64[Sp - 40] = block_cfOpK_info;
           _sfCMc::P64 = P64[R1 + 7];
           _sfCMe::P64 = P64[R1 + 15];
           _sfCMg::P64 = P64[R1 + 23];
           _sfCMh::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCMc::P64;
           P64[Sp - 24] = _sfCMe::P64;
           P64[Sp - 16] = _sfCMg::P64;
           P64[Sp - 8] = _sfCMh::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOqr; else goto cfOpL;
       ufOqr: // global
           call _cfOpK(R1) args: 0, res: 0, upd: 0;
       cfOpL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMv_info" {
     sat_sfCMv_info:
         const sat_sfCMv_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfOpK() //  [R1]
         { []
         }
     {offset
       cfOpK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOqq; else goto cfOqp;
       cfOqq: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOqp: // global
           _sfCMl::P64 = P64[R1 + 7];
           _sfCMm::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCMu_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCMg::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCMg::P64;
           P64[Hp - 48] = _sfCMl::P64;
           P64[Hp - 40] = _sfCMm::P64;
           I64[Hp - 32] = sat_sfCMr_info;
           P64[Hp - 16] = _sfCMg::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCMl::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOpK_info" {
     block_cfOpK_info:
         const _cfOpK;
         const 4;
         const 30;
 },
 sat_sfCMi_entry() //  [R1]
         { []
         }
     {offset
       cfOqw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOqx; else goto cfOqy;
       cfOqx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOqy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataWrappedMonoid1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCMi_info" {
     sat_sfCMi_info:
         const sat_sfCMi_entry;
         const 1;
         const 16;
 },
 sat_sfCMw_entry() //  [R1]
         { []
         }
     {offset
       cfOqz: // global
           _sfCMw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOqA; else goto cfOqB;
       cfOqB: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOqD; else goto cfOqC;
       cfOqD: // global
           HpAlloc = 104;
           goto cfOqA;
       cfOqA: // global
           R1 = _sfCMw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOqC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCMw::P64;
           _sfCMb::P64 = P64[_sfCMw::P64 + 16];
           _sfCMc::P64 = P64[_sfCMw::P64 + 24];
           _sfCMd::P64 = P64[_sfCMw::P64 + 32];
           _sfCMe::P64 = P64[_sfCMw::P64 + 40];
           _sfCMg::P64 = P64[_sfCMw::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCMd::P64;
           P64[Hp - 72] = _sfCMb::P64;
           P64[Hp - 64] = _sfCMe::P64;
           I64[Hp - 56] = sat_sfCMv_info;
           P64[Hp - 48] = _sfCMc::P64;
           P64[Hp - 40] = _sfCMe::P64;
           P64[Hp - 32] = _sfCMg::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCMi_info;
           P64[Hp] = _sfCMg::P64;
           R2 = _sfCMg::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCMw_info" {
     sat_sfCMw_info:
         const sat_sfCMw_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfOqE: // global
           _sfCMe::P64 = R5;
           _sfCMd::P64 = R4;
           _sfCMc::P64 = R3;
           _sfCMb::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOqF; else goto cfOqG;
       cfOqG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOqI; else goto cfOqH;
       cfOqI: // global
           HpAlloc = 24;
           goto cfOqF;
       cfOqF: // global
           R5 = _sfCMe::P64;
           R4 = _sfCMd::P64;
           R3 = _sfCMc::P64;
           R2 = _sfCMb::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOqH: // global
           I64[Hp - 16] = lvl33_sfCMf_info;
           P64[Hp] = _sfCMc::P64;
           I64[Sp - 48] = block_cfOp3_info;
           R2 = _sfCMc::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCMb::P64;
           P64[Sp - 24] = _sfCMc::P64;
           P64[Sp - 16] = _sfCMd::P64;
           P64[Sp - 8] = _sfCMe::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfOp3() //  [R1]
         { []
         }
     {offset
       cfOp3: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOqL; else goto cfOqK;
       cfOqL: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOqK: // global
           I64[Hp - 72] = sat_sfCMC_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCMw_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOp3_info" {
     block_cfOp3_info:
         const _cfOp3;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.057262528 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info;
 },
 sat_sfCMM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOsf: // global
           _sfCMK::P64 = R2;
           _sfCMM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOsg; else goto cfOsh;
       cfOsh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfOsj; else goto cfOsi;
       cfOsj: // global
           HpAlloc = 32;
           goto cfOsg;
       cfOsg: // global
           R2 = _sfCMK::P64;
           R1 = _sfCMM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOsi: // global
           _sfCME::P64 = P64[_sfCMM::P64 + 7];
           _sfCMJ::P64 = P64[_sfCMM::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCMJ::P64;
           P64[Hp] = _sfCMK::P64;
           R2 = _sfCME::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMM_info" {
     sat_sfCMM_info:
         const sat_sfCMM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCMN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOsk: // global
           _sfCMJ::P64 = R2;
           _sfCMN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOsl; else goto cfOsm;
       cfOsm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOso; else goto cfOsn;
       cfOso: // global
           HpAlloc = 24;
           goto cfOsl;
       cfOsl: // global
           R2 = _sfCMJ::P64;
           R1 = _sfCMN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOsn: // global
           _sfCME::P64 = P64[_sfCMN::P64 + 7];
           _sfCMH::P64 = P64[_sfCMN::P64 + 15];
           I64[Hp - 16] = sat_sfCMM_info;
           P64[Hp - 8] = _sfCME::P64;
           P64[Hp] = _sfCMJ::P64;
           R2 = _sfCME::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCMH::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCMN_info" {
     sat_sfCMN_info:
         const sat_sfCMN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCMI_entry() //  [R1]
         { []
         }
     {offset
       cfOst: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOsu; else goto cfOsv;
       cfOsu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOsv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCMI_info" {
     sat_sfCMI_info:
         const sat_sfCMI_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cfOsw: // global
           _sfCMG::P64 = R5;
           _sfCMF::P64 = R4;
           _sfCME::P64 = R3;
           _sfCMD::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOsx; else goto cfOsy;
       cfOsy: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOsA; else goto cfOsz;
       cfOsA: // global
           HpAlloc = 88;
           goto cfOsx;
       cfOsx: // global
           R5 = _sfCMG::P64;
           R4 = _sfCMF::P64;
           R3 = _sfCME::P64;
           R2 = _sfCMD::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOsz: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfCMF::P64;
           P64[Hp - 56] = _sfCMD::P64;
           P64[Hp - 48] = _sfCMG::P64;
           I64[Hp - 40] = sat_sfCMN_info;
           P64[Hp - 32] = _sfCME::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfCMI_info;
           P64[Hp] = _sfCME::P64;
           R2 = _sfCME::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.067520077 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfOt4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOt5; else goto cfOt6;
       cfOt5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOt6: // global
           I64[Sp - 32] = block_cfOt1_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufOte; else goto cfOt2;
       ufOte: // global
           call _cfOt1(R1) args: 0, res: 0, upd: 0;
       cfOt2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const SfCR7_srt+1488;
 },
 _cfOt1() //  [R1]
         { []
         }
     {offset
       cfOt1: // global
           if (I64[R1 + 7] == 0) goto cfOtd; else goto cfOtc;
       cfOtd: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOtc: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOt1_info" {
     block_cfOt1_info:
         const _cfOt1;
         const 3;
         const 4294967326;
         const SfCR7_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.079576303 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info;
 },
 lvl33_sfCMZ_entry() //  [R1]
         { []
         }
     {offset
       cfOtw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOtx; else goto cfOty;
       cfOtx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOty: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCMZ_info" {
     lvl33_sfCMZ_info:
         const lvl33_sfCMZ_entry;
         const 1;
         const 16;
 },
 sat_sfCNp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOtL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOtM; else goto cfOtN;
       cfOtM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOtN: // global
           I64[Sp - 24] = block_cfOtI_info;
           _sfCMZ::P64 = P64[R1 + 7];
           _sfCN0::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCMZ::P64;
           P64[Sp - 8] = _sfCN0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOu5; else goto cfOtJ;
       ufOu5: // global
           call _cfOtI(R1) args: 0, res: 0, upd: 0;
       cfOtJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNp_info" {
     sat_sfCNp_info:
         const sat_sfCNp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOtI() //  [R1]
         { []
         }
     {offset
       cfOtI: // global
           I64[Sp - 8] = block_cfOtQ_info;
           _sfCNm::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCNm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOu4; else goto cfOtS;
       ufOu4: // global
           call _cfOtQ(R1) args: 0, res: 0, upd: 0;
       cfOtS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOtI_info" {
     block_cfOtI_info:
         const _cfOtI;
         const 2;
         const 30;
 },
 _cfOtQ() //  [R1]
         { []
         }
     {offset
       cfOtQ: // global
           if (R1 & 7 == 1) goto cfOtY; else goto cfOu2;
       cfOtY: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfOu2: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOtQ_info" {
     block_cfOtQ_info:
         const _cfOtQ;
         const 3;
         const 30;
 },
 sat_sfCNf_entry() //  [R1]
         { []
         }
     {offset
       cfOuw: // global
           _sfCNf::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfOux; else goto cfOuy;
       cfOuy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOuA; else goto cfOuz;
       cfOuA: // global
           HpAlloc = 56;
           goto cfOux;
       cfOux: // global
           R1 = _sfCNf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOuz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCNf::P64;
           _sfCMY::P64 = P64[_sfCNf::P64 + 16];
           _sfCN0::P64 = P64[_sfCNf::P64 + 24];
           _sfCN5::P64 = P64[_sfCNf::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCN5::P64;
           P64[Hp - 24] = _sfCMY::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCN0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCNf_info" {
     sat_sfCNf_info:
         const sat_sfCNf_entry;
         const 3;
         const 15;
 },
 sat_sfCNb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOuM: // global
           _sfCN8::P64 = R2;
           _sfCNb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOuN; else goto cfOuO;
       cfOuO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOuQ; else goto cfOuP;
       cfOuQ: // global
           HpAlloc = 56;
           goto cfOuN;
       cfOuN: // global
           R2 = _sfCN8::P64;
           R1 = _sfCNb::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOuP: // global
           _sfCN0::P64 = P64[_sfCNb::P64 + 7];
           _sfCN5::P64 = P64[_sfCNb::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCN5::P64;
           P64[Hp - 24] = _sfCN8::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCN0::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNb_info" {
     sat_sfCNb_info:
         const sat_sfCNb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCNc_entry() //  [R1]
         { []
         }
     {offset
       cfOuR: // global
           _sfCNc::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOuS; else goto cfOuT;
       cfOuT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOuV; else goto cfOuU;
       cfOuV: // global
           HpAlloc = 24;
           goto cfOuS;
       cfOuS: // global
           R1 = _sfCNc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOuU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCNc::P64;
           _sfCN0::P64 = P64[_sfCNc::P64 + 16];
           _sfCN1::P64 = P64[_sfCNc::P64 + 24];
           _sfCN5::P64 = P64[_sfCNc::P64 + 32];
           I64[Hp - 16] = sat_sfCNb_info;
           P64[Hp - 8] = _sfCN0::P64;
           P64[Hp] = _sfCN5::P64;
           R2 = _sfCN0::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCN1::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCNc_info" {
     sat_sfCNc_info:
         const sat_sfCNc_entry;
         const 3;
         const 15;
 },
 sat_sfCNi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOuW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfOuX; else goto cfOuY;
       cfOuX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOuY: // global
           I64[Sp - 40] = block_cfOug_info;
           _sfCMW::P64 = P64[R1 + 7];
           _sfCMY::P64 = P64[R1 + 15];
           _sfCN0::P64 = P64[R1 + 23];
           _sfCN1::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCMW::P64;
           P64[Sp - 24] = _sfCMY::P64;
           P64[Sp - 16] = _sfCN0::P64;
           P64[Sp - 8] = _sfCN1::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOvf; else goto cfOuh;
       ufOvf: // global
           call _cfOug(R1) args: 0, res: 0, upd: 0;
       cfOuh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNi_info" {
     sat_sfCNi_info:
         const sat_sfCNi_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfOug() //  [R1]
         { []
         }
     {offset
       cfOug: // global
           I64[Sp - 8] = block_cfOul_info;
           _sfCN5::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCN5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOve; else goto cfOum;
       ufOve: // global
           call _cfOul(R1) args: 0, res: 0, upd: 0;
       cfOum: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOug_info" {
     block_cfOug_info:
         const _cfOug;
         const 4;
         const 30;
 },
 _cfOul() //  [R1]
         { []
         }
     {offset
       cfOul: // global
           _sfCMY::P64 = P64[Sp + 24];
           _sfCN0::P64 = P64[Sp + 32];
           _sfCN5::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfOv1; else goto cfOv5;
       cfOv1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOv4; else goto cfOv3;
       cfOv4: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOv3: // global
           I64[Hp - 72] = sat_sfCNf_info;
           P64[Hp - 56] = _sfCMY::P64;
           P64[Hp - 48] = _sfCN0::P64;
           P64[Hp - 40] = _sfCN5::P64;
           I64[Hp - 32] = sat_sfCNc_info;
           P64[Hp - 16] = _sfCN0::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCN5::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfOv5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOva; else goto cfOv9;
       cfOva: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOv9: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCN5::P64;
           P64[Hp - 24] = _sfCMY::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCN0::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOul_info" {
     block_cfOul_info:
         const _cfOul;
         const 5;
         const 30;
 },
 sat_sfCN2_entry() //  [R1]
         { []
         }
     {offset
       cfOvk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOvl; else goto cfOvm;
       cfOvl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOvm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataWrappedMonoid1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCN2_info" {
     sat_sfCN2_info:
         const sat_sfCN2_entry;
         const 1;
         const 16;
 },
 sat_sfCNj_entry() //  [R1]
         { []
         }
     {offset
       cfOvn: // global
           _sfCNj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOvo; else goto cfOvp;
       cfOvp: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOvr; else goto cfOvq;
       cfOvr: // global
           HpAlloc = 104;
           goto cfOvo;
       cfOvo: // global
           R1 = _sfCNj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOvq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCNj::P64;
           _sfCMV::P64 = P64[_sfCNj::P64 + 16];
           _sfCMW::P64 = P64[_sfCNj::P64 + 24];
           _sfCMX::P64 = P64[_sfCNj::P64 + 32];
           _sfCMY::P64 = P64[_sfCNj::P64 + 40];
           _sfCN0::P64 = P64[_sfCNj::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfCMX::P64;
           P64[Hp - 72] = _sfCMV::P64;
           P64[Hp - 64] = _sfCMY::P64;
           I64[Hp - 56] = sat_sfCNi_info;
           P64[Hp - 48] = _sfCMW::P64;
           P64[Hp - 40] = _sfCMY::P64;
           P64[Hp - 32] = _sfCN0::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCN2_info;
           P64[Hp] = _sfCN0::P64;
           R2 = _sfCN0::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCNj_info" {
     sat_sfCNj_info:
         const sat_sfCNj_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfOvs: // global
           _sfCMY::P64 = R5;
           _sfCMX::P64 = R4;
           _sfCMW::P64 = R3;
           _sfCMV::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOvt; else goto cfOvu;
       cfOvu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOvw; else goto cfOvv;
       cfOvw: // global
           HpAlloc = 24;
           goto cfOvt;
       cfOvt: // global
           R5 = _sfCMY::P64;
           R4 = _sfCMX::P64;
           R3 = _sfCMW::P64;
           R2 = _sfCMV::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOvv: // global
           I64[Hp - 16] = lvl33_sfCMZ_info;
           P64[Hp] = _sfCMW::P64;
           I64[Sp - 48] = block_cfOtz_info;
           R2 = _sfCMW::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCMV::P64;
           P64[Sp - 24] = _sfCMW::P64;
           P64[Sp - 16] = _sfCMX::P64;
           P64[Sp - 8] = _sfCMY::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfOtz() //  [R1]
         { []
         }
     {offset
       cfOtz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOvz; else goto cfOvy;
       cfOvz: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOvy: // global
           I64[Hp - 72] = sat_sfCNp_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCNj_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOtz_info" {
     block_cfOtz_info:
         const _cfOtz;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.109483488 UTC

[section ""data" . lvl27_rfC7b_closure" {
     lvl27_rfC7b_closure:
         const lvl27_rfC7b_info;
         const 0;
 },
 lvl27_rfC7b_entry() //  []
         { []
         }
     {offset
       cfOwY: // global
           R1 = Data.Semigroup.$cWrapMonoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl27_rfC7b_info" {
     lvl27_rfC7b_info:
         const lvl27_rfC7b_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.112732128 UTC

[section ""data" . lvl28_rfC7c_closure" {
     lvl28_rfC7c_closure:
         const lvl28_rfC7c_info;
         const 0;
 },
 lvl28_rfC7c_entry() //  []
         { []
         }
     {offset
       cfOxa: // global
           R1 = Data.Semigroup.$tWrappedMonoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl28_rfC7c_info" {
     lvl28_rfC7c_info:
         const lvl28_rfC7c_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.11630888 UTC

[section ""data" . lvl29_rfC7d_closure" {
     lvl29_rfC7d_closure:
         const lvl29_rfC7d_info;
 },
 lvl29_rfC7d_entry() //  []
         { []
         }
     {offset
       cfOxm: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl29_rfC7d_info" {
     lvl29_rfC7d_info:
         const lvl29_rfC7d_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.12503025 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_closure" {
     Data.Semigroup.$fDataWrappedMonoid_closure:
         const Data.Semigroup.$fDataWrappedMonoid_info;
         const 0;
 },
 sat_sfCNZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOxD: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNZ_info" {
     sat_sfCNZ_info:
         const sat_sfCNZ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCNY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOxL: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNY_info" {
     sat_sfCNY_info:
         const sat_sfCNY_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCNX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOxT: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNX_info" {
     sat_sfCNX_info:
         const sat_sfCNX_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCNW_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOy1: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNW_info" {
     sat_sfCNW_info:
         const sat_sfCNW_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1560;
 },
 sat_sfCNV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOyb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfOyf; else goto cfOye;
       cfOyf: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOye: // global
           _sfCNu::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfCNu::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNV_info" {
     sat_sfCNV_info:
         const sat_sfCNV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCNR_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOym: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOyq; else goto cfOyp;
       cfOyq: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOyp: // global
           _sfCNu::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCNu::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfCNM::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfCNM::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNR_info" {
     sat_sfCNR_info:
         const sat_sfCNR_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCNL_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOyx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOyB; else goto cfOyA;
       cfOyB: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOyA: // global
           _sfCNu::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfCNu::P64;
           P64[Hp] = R5;
           _sfCNH::P64 = R3;
           R3 = Hp - 32;
           _sfCNG::P64 = R2;
           R2 = _sfCNH::P64;
           R1 = _sfCNG::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNL_info" {
     sat_sfCNL_info:
         const sat_sfCNL_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfCNF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOyH: // global
           R3 = R3;
           _sfCND::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfCND::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNF_info" {
     sat_sfCNF_info:
         const sat_sfCNF_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfCNC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOyP: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNC_info" {
     sat_sfCNC_info:
         const sat_sfCNC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1552;
 },
 sat_sfCNA_entry() //  [R1]
         { []
         }
     {offset
       cfOz1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOz2; else goto cfOz3;
       cfOz2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOz3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCNA_info" {
     sat_sfCNA_info:
         const sat_sfCNA_entry;
         const 1;
         const 16;
 },
 sat_sfCNB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOz4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOz8; else goto cfOz7;
       cfOz8: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOz7: // global
           _sfCNu::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfCNA_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfCNx::P64 = R2;
           R2 = _sfCNu::P64;
           R1 = _sfCNx::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNB_info" {
     sat_sfCNB_info:
         const sat_sfCNB_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCNw_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOze: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCNw_info" {
     sat_sfCNw_info:
         const sat_sfCNw_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfCNv_entry() //  [R1]
         { []
         }
     {offset
       cfOzl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOzm; else goto cfOzn;
       cfOzm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOzn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataWrappedMonoid8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCNv_info" {
     sat_sfCNv_info:
         const sat_sfCNv_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1544;
 },
 Data.Semigroup.$fDataWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfOzp: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfOzt; else goto cfOzs;
       cfOzt: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOzs: // global
           I64[Hp - 320] = sat_sfCNZ_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCNY_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCNX_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCNW_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCNV_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCNR_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCNL_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCNF_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCNC_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfCNB_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfCNw_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCNv_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl27_rfC7b_closure+1;
           P64[Hp - 80] = lvl28_rfC7c_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl29_rfC7d_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_info" {
     Data.Semigroup.$fDataWrappedMonoid_info:
         const Data.Semigroup.$fDataWrappedMonoid_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfCR7_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.150804537 UTC

[section ""data" . Data.Semigroup.$fDataOption5_closure" {
     Data.Semigroup.$fDataOption5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataOption6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.152650782 UTC

[section ""data" . Data.Semigroup.$tcOption_closure" {
     Data.Semigroup.$tcOption_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataOption5_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 10723619047615802556;
         const 16447525423442151350;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.154549861 UTC

[section ""data" . $krep13_rfC7e_closure" {
     $krep13_rfC7e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcOption_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.156298986 UTC

[section ""data" . Data.Semigroup.$tc'Option1_closure" {
     Data.Semigroup.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rfC6M_closure+1;
         const $krep13_rfC7e_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.158016128 UTC

[section ""cstring" . Data.Semigroup.$tc'Option3_bytes" {
     Data.Semigroup.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.160090196 UTC

[section ""data" . Data.Semigroup.$tc'Option2_closure" {
     Data.Semigroup.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Option3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.162287301 UTC

[section ""data" . Data.Semigroup.$tc'Option_closure" {
     Data.Semigroup.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Option2_closure+1;
         const Data.Semigroup.$tc'Option1_closure+4;
         const 10684524870560962689;
         const 6198254930115905464;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.165645693 UTC

[section ""data" . Data.Semigroup.$fDataOption4_closure" {
     Data.Semigroup.$fDataOption4_closure:
         const Data.Semigroup.$fDataOption4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataOption4_entry() //  [R1]
         { []
         }
     {offset
       cfOAK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfOAL; else goto cfOAM;
       cfOAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOAM: // global
           (_cfOAC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfOAC::I64 == 0) goto cfOAE; else goto cfOAD;
       cfOAE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfOAD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfOAC::I64;
           I64[Sp - 24] = block_cfOAF_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataOption5_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 16447525423442151350;
           R2 = 10723619047615802556;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption4_info" {
     Data.Semigroup.$fDataOption4_info:
         const Data.Semigroup.$fDataOption4_entry;
         const 0;
         const 4294967317;
         const SfCR7_srt+1440;
 },
 _cfOAF() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOAF: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfOAG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfOAF_info" {
     block_cfOAF_info:
         const _cfOAF;
         const 0;
         const 30;
 },
 _cfOAG() //  []
         { []
         }
     {offset
       cfOAG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOAP; else goto cfOAO;
       cfOAP: // global
           HpAlloc = 48;
           I64[Sp] = block_cfOAG_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfOAO: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfOAG_info" {
     block_cfOAG_info:
         const _cfOAG;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.17323548 UTC

[section ""data" . Data.Semigroup.$fDataOption10_closure" {
     Data.Semigroup.$fDataOption10_closure:
         const Data.Semigroup.$fDataOption10_info;
         const 0;
 },
 Data.Semigroup.$fDataOption10_entry() //  [R2]
         { []
         }
     {offset
       cfOBh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfOBi; else goto cfOBj;
       cfOBi: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOBj: // global
           I64[Sp - 8] = block_cfOBf_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption10_info" {
     Data.Semigroup.$fDataOption10_info:
         const Data.Semigroup.$fDataOption10_entry;
         const 0;
         const 3377704015495182;
         const 4294967301;
         const SfCR7_srt+1464;
 },
 _cfOBf() //  [R1]
         { []
         }
     {offset
       cfOBf: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataOption4_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOBf_info" {
     block_cfOBf_info:
         const _cfOBf;
         const 0;
         const 1125904201809950;
         const SfCR7_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.180393403 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cdataCast1_closure" {
     Data.Semigroup.$fDataOption_$cdataCast1_closure:
         const Data.Semigroup.$fDataOption_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufOCb_srtd" {
     ufOCb_srtd:
         const SfCR7_srt+1152;
         const 58;
         const 144115188075855873;
 },
 lvl33_sfCOa_entry() //  [R1]
         { []
         }
     {offset
       cfOBD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOBE; else goto cfOBF;
       cfOBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataOption4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCOa_info" {
     lvl33_sfCOa_info:
         const lvl33_sfCOa_entry;
         const 1;
         const 18446744069414584336;
         const ufOCb_srtd;
 },
 sat_sfCOe_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOBS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfOBT; else goto cfOBU;
       cfOBT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOBU: // global
           I64[Sp - 24] = block_cfOBL_info;
           _sfCO8::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfCO8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOC5; else goto cfOBM;
       ufOC5: // global
           call _cfOBL(R1) args: 0, res: 0, upd: 0;
       cfOBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOe_info" {
     sat_sfCOe_info:
         const sat_sfCOe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOBL() //  [R1]
         { []
         }
     {offset
       cfOBL: // global
           if (R1 & 7 == 1) goto cfOBP; else goto cfOBQ;
       cfOBP: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfOBQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOC4; else goto cfOC3;
       cfOC4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOC3: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOBL_info" {
     block_cfOBL_info:
         const _cfOBL;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufOCc_srtd" {
     ufOCc_srtd:
         const SfCR7_srt+1152;
         const 60;
         const 720575940379279361;
 },
 Data.Semigroup.$fDataOption_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfOC6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfOCa; else goto cfOC9;
       cfOCa: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOC9: // global
           I64[Hp - 40] = lvl33_sfCOa_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfCOe_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cdataCast1_info" {
     Data.Semigroup.$fDataOption_$cdataCast1_info:
         const Data.Semigroup.$fDataOption_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufOCc_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.190657822 UTC

[section ""data" . Data.Semigroup.$fDataOption1_closure" {
     Data.Semigroup.$fDataOption1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fDataOption2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.200186202 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapMp_closure" {
     Data.Semigroup.$fDataOption_$cgmapMp_closure:
         const Data.Semigroup.$fDataOption_$cgmapMp_info;
         const 0;
 },
 lvl33_sfCOj_entry() //  [R1]
         { []
         }
     {offset
       cfOCN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOCO; else goto cfOCP;
       cfOCO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOCP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCOj_info" {
     lvl33_sfCOj_info:
         const lvl33_sfCOj_entry;
         const 1;
         const 16;
 },
 sat_sfCOH_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOD2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOD3; else goto cfOD4;
       cfOD3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOD4: // global
           I64[Sp - 24] = block_cfOCZ_info;
           _sfCOj::P64 = P64[R1 + 7];
           _sfCOk::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCOj::P64;
           P64[Sp - 8] = _sfCOk::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufODm; else goto cfOD0;
       ufODm: // global
           call _cfOCZ(R1) args: 0, res: 0, upd: 0;
       cfOD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOH_info" {
     sat_sfCOH_info:
         const sat_sfCOH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOCZ() //  [R1]
         { []
         }
     {offset
       cfOCZ: // global
           I64[Sp - 8] = block_cfOD7_info;
           _sfCOE::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCOE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufODl; else goto cfOD9;
       ufODl: // global
           call _cfOD7(R1) args: 0, res: 0, upd: 0;
       cfOD9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOCZ_info" {
     block_cfOCZ_info:
         const _cfOCZ;
         const 2;
         const 30;
 },
 _cfOD7() //  [R1]
         { []
         }
     {offset
       cfOD7: // global
           if (R1 & 7 == 1) goto cfODf; else goto cfODj;
       cfODf: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfODj: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOD7_info" {
     block_cfOD7_info:
         const _cfOD7;
         const 3;
         const 30;
 },
 sat_sfCOm_entry() //  [R1]
         { []
         }
     {offset
       cfODz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfODA; else goto cfODB;
       cfODA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfODB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCOm_info" {
     sat_sfCOm_info:
         const sat_sfCOm_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 lvl34_sfCOl_entry() //  [R1]
         { []
         }
     {offset
       cfODC: // global
           _sfCOl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfODD; else goto cfODE;
       cfODE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfODG; else goto cfODF;
       cfODG: // global
           HpAlloc = 24;
           goto cfODD;
       cfODD: // global
           R1 = _sfCOl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfODF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCOl::P64;
           _sfCOf::P64 = P64[_sfCOl::P64 + 16];
           _sfCOh::P64 = P64[_sfCOl::P64 + 24];
           _sfCOi::P64 = P64[_sfCOl::P64 + 32];
           I64[Hp - 16] = sat_sfCOm_info;
           P64[Hp] = _sfCOf::P64;
           R3 = _sfCOi::P64;
           R2 = Hp - 16;
           R1 = _sfCOh::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sfCOl_info" {
     lvl34_sfCOl_info:
         const lvl34_sfCOl_entry;
         const 3;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 sat_sfCOz_entry() //  [R1]
         { []
         }
     {offset
       cfODX: // global
           _sfCOz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfODY; else goto cfODZ;
       cfODZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOE1; else goto cfOE0;
       cfOE1: // global
           HpAlloc = 56;
           goto cfODY;
       cfODY: // global
           R1 = _sfCOz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOE0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCOz::P64;
           _sfCOi::P64 = P64[_sfCOz::P64 + 16];
           _sfCOk::P64 = P64[_sfCOz::P64 + 24];
           _sfCOq::P64 = P64[_sfCOz::P64 + 32];
           _sfCOr::P64 = P64[_sfCOz::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCOq::P64;
           P64[Hp - 24] = _sfCOi::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfCOr::P64;
           R2 = _sfCOk::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCOz_info" {
     sat_sfCOz_info:
         const sat_sfCOz_entry;
         const 4;
         const 15;
 },
 sat_sfCOv_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOEd: // global
           _sfCOs::P64 = R2;
           _sfCOv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOEe; else goto cfOEf;
       cfOEf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOEh; else goto cfOEg;
       cfOEh: // global
           HpAlloc = 56;
           goto cfOEe;
       cfOEe: // global
           R2 = _sfCOs::P64;
           R1 = _sfCOv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOEg: // global
           _sfCOk::P64 = P64[_sfCOv::P64 + 7];
           _sfCOq::P64 = P64[_sfCOv::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCOq::P64;
           P64[Hp - 24] = _sfCOs::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCOk::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOv_info" {
     sat_sfCOv_info:
         const sat_sfCOv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCOw_entry() //  [R1]
         { []
         }
     {offset
       cfOEi: // global
           _sfCOw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOEj; else goto cfOEk;
       cfOEk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOEm; else goto cfOEl;
       cfOEm: // global
           HpAlloc = 24;
           goto cfOEj;
       cfOEj: // global
           R1 = _sfCOw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOEl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCOw::P64;
           _sfCOk::P64 = P64[_sfCOw::P64 + 16];
           _sfCOl::P64 = P64[_sfCOw::P64 + 24];
           _sfCOq::P64 = P64[_sfCOw::P64 + 32];
           I64[Hp - 16] = sat_sfCOv_info;
           P64[Hp - 8] = _sfCOk::P64;
           P64[Hp] = _sfCOq::P64;
           R2 = _sfCOk::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCOl::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCOw_info" {
     sat_sfCOw_info:
         const sat_sfCOw_entry;
         const 3;
         const 15;
 },
 sat_sfCOA_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOEn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfOEo; else goto cfOEp;
       cfOEo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOEp: // global
           I64[Sp - 40] = block_cfODM_info;
           _sfCOg::P64 = P64[R1 + 7];
           _sfCOi::P64 = P64[R1 + 15];
           _sfCOk::P64 = P64[R1 + 23];
           _sfCOl::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCOg::P64;
           P64[Sp - 24] = _sfCOi::P64;
           P64[Sp - 16] = _sfCOk::P64;
           P64[Sp - 8] = _sfCOl::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOEt; else goto cfODN;
       ufOEt: // global
           call _cfODM(R1) args: 0, res: 0, upd: 0;
       cfODN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOA_info" {
     sat_sfCOA_info:
         const sat_sfCOA_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfODM() //  [R1]
         { []
         }
     {offset
       cfODM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOEs; else goto cfOEr;
       cfOEs: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOEr: // global
           _sfCOq::P64 = P64[R1 + 7];
           _sfCOr::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfCOz_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfCOk::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfCOk::P64;
           P64[Hp - 48] = _sfCOq::P64;
           P64[Hp - 40] = _sfCOr::P64;
           I64[Hp - 32] = sat_sfCOw_info;
           P64[Hp - 16] = _sfCOk::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfCOq::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfODM_info" {
     block_cfODM_info:
         const _cfODM;
         const 4;
         const 30;
 },
 sat_sfCOn_entry() //  [R1]
         { []
         }
     {offset
       cfOEy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOEz; else goto cfOEA;
       cfOEz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOEA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCOn_info" {
     sat_sfCOn_info:
         const sat_sfCOn_entry;
         const 1;
         const 16;
 },
 sat_sfCOB_entry() //  [R1]
         { []
         }
     {offset
       cfOEB: // global
           _sfCOB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOEC; else goto cfOED;
       cfOED: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOEF; else goto cfOEE;
       cfOEF: // global
           HpAlloc = 104;
           goto cfOEC;
       cfOEC: // global
           R1 = _sfCOB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOEE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCOB::P64;
           _sfCOf::P64 = P64[_sfCOB::P64 + 16];
           _sfCOg::P64 = P64[_sfCOB::P64 + 24];
           _sfCOh::P64 = P64[_sfCOB::P64 + 32];
           _sfCOi::P64 = P64[_sfCOB::P64 + 40];
           _sfCOk::P64 = P64[_sfCOB::P64 + 48];
           I64[Hp - 96] = lvl34_sfCOl_info;
           P64[Hp - 80] = _sfCOf::P64;
           P64[Hp - 72] = _sfCOh::P64;
           P64[Hp - 64] = _sfCOi::P64;
           I64[Hp - 56] = sat_sfCOA_info;
           P64[Hp - 48] = _sfCOg::P64;
           P64[Hp - 40] = _sfCOi::P64;
           P64[Hp - 32] = _sfCOk::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCOn_info;
           P64[Hp] = _sfCOk::P64;
           R2 = _sfCOk::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCOB_info" {
     sat_sfCOB_info:
         const sat_sfCOB_entry;
         const 5;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOEG: // global
           _sfCOi::P64 = R5;
           _sfCOh::P64 = R4;
           _sfCOg::P64 = R3;
           _sfCOf::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOEH; else goto cfOEI;
       cfOEI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOEK; else goto cfOEJ;
       cfOEK: // global
           HpAlloc = 24;
           goto cfOEH;
       cfOEH: // global
           R5 = _sfCOi::P64;
           R4 = _sfCOh::P64;
           R3 = _sfCOg::P64;
           R2 = _sfCOf::P64;
           R1 = Data.Semigroup.$fDataOption_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOEJ: // global
           I64[Hp - 16] = lvl33_sfCOj_info;
           P64[Hp] = _sfCOg::P64;
           I64[Sp - 48] = block_cfOCQ_info;
           R2 = _sfCOg::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCOf::P64;
           P64[Sp - 24] = _sfCOg::P64;
           P64[Sp - 16] = _sfCOh::P64;
           P64[Sp - 8] = _sfCOi::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapMp_info" {
     Data.Semigroup.$fDataOption_$cgmapMp_info:
         const Data.Semigroup.$fDataOption_$cgmapMp_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfCR7_srt+1632;
 },
 _cfOCQ() //  [R1]
         { []
         }
     {offset
       cfOCQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOEN; else goto cfOEM;
       cfOEN: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOEM: // global
           I64[Hp - 72] = sat_sfCOH_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCOB_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOCQ_info" {
     block_cfOCQ_info:
         const _cfOCQ;
         const 5;
         const 4294967326;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.233166414 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapM_closure" {
     Data.Semigroup.$fDataOption_$cgmapM_closure:
         const Data.Semigroup.$fDataOption_$cgmapM_info;
         const 0;
 },
 $dData1_sfCOL_entry() //  [R1]
         { []
         }
     {offset
       cfOGh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOGi; else goto cfOGj;
       cfOGi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOGj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfCOL_info" {
     $dData1_sfCOL_info:
         const $dData1_sfCOL_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 lvl33_sfCOM_entry() //  [R1]
         { []
         }
     {offset
       cfOGo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOGp; else goto cfOGq;
       cfOGp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOGq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCOM_info" {
     lvl33_sfCOM_info:
         const lvl33_sfCOM_entry;
         const 1;
         const 16;
 },
 sat_sfCOS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOGI: // global
           _sfCOQ::P64 = R2;
           _sfCOS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOGJ; else goto cfOGK;
       cfOGK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfOGM; else goto cfOGL;
       cfOGM: // global
           HpAlloc = 32;
           goto cfOGJ;
       cfOGJ: // global
           R2 = _sfCOQ::P64;
           R1 = _sfCOS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOGL: // global
           _sfCOJ::P64 = P64[_sfCOS::P64 + 7];
           _sfCOP::P64 = P64[_sfCOS::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfCOP::P64;
           P64[Hp] = _sfCOQ::P64;
           R2 = _sfCOJ::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOS_info" {
     sat_sfCOS_info:
         const sat_sfCOS_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCOT_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOGN: // global
           _sfCOP::P64 = R2;
           _sfCOT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOGO; else goto cfOGP;
       cfOGP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOGR; else goto cfOGQ;
       cfOGR: // global
           HpAlloc = 24;
           goto cfOGO;
       cfOGO: // global
           R2 = _sfCOP::P64;
           R1 = _sfCOT::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOGQ: // global
           _sfCOJ::P64 = P64[_sfCOT::P64 + 7];
           _sfCOO::P64 = P64[_sfCOT::P64 + 15];
           I64[Hp - 16] = sat_sfCOS_info;
           P64[Hp - 8] = _sfCOJ::P64;
           P64[Hp] = _sfCOP::P64;
           R2 = _sfCOJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCOO::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOT_info" {
     sat_sfCOT_info:
         const sat_sfCOT_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCOU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOGS: // global
           _sfCON::P64 = R2;
           _sfCOU::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfOGT; else goto cfOGU;
       cfOGU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfOGW; else goto cfOGV;
       cfOGW: // global
           HpAlloc = 64;
           goto cfOGT;
       cfOGT: // global
           R2 = _sfCON::P64;
           R1 = _sfCOU::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOGV: // global
           _sfCOJ::P64 = P64[_sfCOU::P64 + 7];
           _sfCOK::P64 = P64[_sfCOU::P64 + 15];
           _sfCOL::P64 = P64[_sfCOU::P64 + 23];
           _sfCOM::P64 = P64[_sfCOU::P64 + 31];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfCOK::P64;
           P64[Hp - 32] = _sfCOL::P64;
           P64[Hp - 24] = _sfCON::P64;
           I64[Hp - 16] = sat_sfCOT_info;
           P64[Hp - 8] = _sfCOJ::P64;
           P64[Hp] = Hp - 56;
           R2 = _sfCOJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfCOM::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCOU_info" {
     sat_sfCOU_info:
         const sat_sfCOU_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Semigroup.$fDataOption_$cgmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfOGX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfOH1; else goto cfOH0;
       cfOH1: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOH0: // global
           I64[Hp - 80] = $dData1_sfCOL_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl33_sfCOM_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = sat_sfCOU_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapM_info" {
     Data.Semigroup.$fDataOption_$cgmapM_info:
         const Data.Semigroup.$fDataOption_$cgmapM_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.248337433 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQi_closure" {
     Data.Semigroup.$fDataOption_$cgmapQi_closure:
         const Data.Semigroup.$fDataOption_$cgmapQi_info;
         const 0;
 },
 sat_sfCP2_entry() //  [R1]
         { []
         }
     {offset
       cfOHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOHO; else goto cfOHP;
       cfOHO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCP2_info" {
     sat_sfCP2_info:
         const sat_sfCP2_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOHQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOHR; else goto cfOHS;
       cfOHR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOHS: // global
           I64[Sp - 32] = block_cfOHB_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufOHZ; else goto cfOHC;
       ufOHZ: // global
           call _cfOHB(R1) args: 0, res: 0, upd: 0;
       cfOHC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQi_info" {
     Data.Semigroup.$fDataOption_$cgmapQi_info:
         const Data.Semigroup.$fDataOption_$cgmapQi_entry;
         const 0;
         const 10133103456550926;
         const 17179869208;
         const SfCR7_srt+1488;
 },
 _cfOHB() //  [R1]
         { []
         }
     {offset
       cfOHB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOHV; else goto cfOHU;
       cfOHV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOHU: // global
           if (I64[R1 + 7] == 0) goto cfOHY; else goto cfOHX;
       cfOHY: // global
           I64[Hp - 16] = sat_sfCP2_info;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOHX: // global
           Hp = Hp - 24;
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOHB_info" {
     block_cfOHB_info:
         const _cfOHB;
         const 3;
         const 1125904201809950;
         const SfCR7_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.256784282 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQr_closure" {
     Data.Semigroup.$fDataOption_$cgmapQr_closure:
         const Data.Semigroup.$fDataOption_$cgmapQr_info;
         const 0;
 },
 sat_sfCP8_entry() //  [R1]
         { []
         }
     {offset
       cfOIq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOIr; else goto cfOIs;
       cfOIr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOIs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCP8_info" {
     sat_sfCP8_info:
         const sat_sfCP8_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 sat_sfCP9_entry() //  [R1]
         { []
         }
     {offset
       cfOIt: // global
           _sfCP9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOIu; else goto cfOIv;
       cfOIv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOIx; else goto cfOIw;
       cfOIx: // global
           HpAlloc = 24;
           goto cfOIu;
       cfOIu: // global
           R1 = _sfCP9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCP9::P64;
           _sfCP3::P64 = P64[_sfCP9::P64 + 16];
           _sfCP6::P64 = P64[_sfCP9::P64 + 24];
           _sfCP7::P64 = P64[_sfCP9::P64 + 32];
           I64[Hp - 16] = sat_sfCP8_info;
           P64[Hp] = _sfCP3::P64;
           R3 = _sfCP7::P64;
           R2 = Hp - 16;
           R1 = _sfCP6::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCP9_info" {
     sat_sfCP9_info:
         const sat_sfCP9_entry;
         const 3;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cfOIy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOIC; else goto cfOIB;
       cfOIC: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOIB: // global
           I64[Hp - 32] = sat_sfCP9_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           _sfCP4::P64 = R3;
           R3 = R4;
           R2 = Hp - 32;
           R1 = _sfCP4::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQr_info" {
     Data.Semigroup.$fDataOption_$cgmapQr_info:
         const Data.Semigroup.$fDataOption_$cgmapQr_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.26502566 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQ_closure" {
     Data.Semigroup.$fDataOption_$cgmapQ_closure:
         const Data.Semigroup.$fDataOption_$cgmapQ_info;
         const 0;
 },
 sat_sfCPd_entry() //  [R1]
         { []
         }
     {offset
       cfOJ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOJ2; else goto cfOJ3;
       cfOJ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOJ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPd_info" {
     sat_sfCPd_info:
         const sat_sfCPd_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 sat_sfCPe_entry() //  [R1]
         { []
         }
     {offset
       cfOJ4: // global
           _sfCPe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOJ5; else goto cfOJ6;
       cfOJ6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOJ8; else goto cfOJ7;
       cfOJ8: // global
           HpAlloc = 24;
           goto cfOJ5;
       cfOJ5: // global
           R1 = _sfCPe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOJ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCPe::P64;
           _sfCPa::P64 = P64[_sfCPe::P64 + 16];
           _sfCPb::P64 = P64[_sfCPe::P64 + 24];
           _sfCPc::P64 = P64[_sfCPe::P64 + 32];
           I64[Hp - 16] = sat_sfCPd_info;
           P64[Hp] = _sfCPa::P64;
           R3 = _sfCPc::P64;
           R2 = Hp - 16;
           R1 = _sfCPb::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPe_info" {
     sat_sfCPe_info:
         const sat_sfCPe_entry;
         const 3;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfOJa: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfOJe; else goto cfOJd;
       cfOJe: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOJd: // global
           I64[Hp - 56] = sat_sfCPe_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQ_info" {
     Data.Semigroup.$fDataOption_$cgmapQ_info:
         const Data.Semigroup.$fDataOption_$cgmapQ_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.27358327 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQl_closure" {
     Data.Semigroup.$fDataOption_$cgmapQl_closure:
         const Data.Semigroup.$fDataOption_$cgmapQl_info;
         const 0;
 },
 $dData1_sfCPj_entry() //  [R1]
         { []
         }
     {offset
       cfOJB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOJC; else goto cfOJD;
       cfOJC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOJD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfCPj_info" {
     $dData1_sfCPj_info:
         const $dData1_sfCPj_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 sat_sfCPm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOJK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfOJO; else goto cfOJN;
       cfOJO: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOJN: // global
           _sfCPg::P64 = P64[R1 + 7];
           _sfCPh::P64 = P64[R1 + 15];
           _sfCPi::P64 = P64[R1 + 23];
           _sfCPj::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfCPi::P64;
           P64[Hp - 8] = _sfCPj::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = _sfCPh::P64;
           R1 = _sfCPg::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCPm_info" {
     sat_sfCPm_info:
         const sat_sfCPm_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Semigroup.$fDataOption_$cgmapQl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOJP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfOJT; else goto cfOJS;
       cfOJT: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOJS: // global
           I64[Hp - 56] = $dData1_sfCPj_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfCPm_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQl_info" {
     Data.Semigroup.$fDataOption_$cgmapQl_info:
         const Data.Semigroup.$fDataOption_$cgmapQl_entry;
         const 0;
         const 279172874254;
         const 17179869208;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.281189201 UTC

[section ""data" . Data.Semigroup.$fDataOption3_closure" {
     Data.Semigroup.$fDataOption3_closure:
         const Data.Semigroup.$fDataOption3_info;
         const 0;
 },
 sat_sfCPq_entry() //  [R1]
         { []
         }
     {offset
       cfOKf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOKg; else goto cfOKh;
       cfOKg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOKh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPq_info" {
     sat_sfCPq_info:
         const sat_sfCPq_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfOKi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOKm; else goto cfOKl;
       cfOKm: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOKl: // global
           I64[Hp - 16] = sat_sfCPq_info;
           P64[Hp] = R2;
           _sfCPo::P64 = R3;
           R3 = R4;
           R2 = Hp - 16;
           R1 = _sfCPo::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption3_info" {
     Data.Semigroup.$fDataOption3_info:
         const Data.Semigroup.$fDataOption3_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.295508763 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapMo_closure" {
     Data.Semigroup.$fDataOption_$cgmapMo_closure:
         const Data.Semigroup.$fDataOption_$cgmapMo_info;
         const 0;
 },
 lvl33_sfCPv_entry() //  [R1]
         { []
         }
     {offset
       cfOKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOKE; else goto cfOKF;
       cfOKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfCPv_info" {
     lvl33_sfCPv_info:
         const lvl33_sfCPv_entry;
         const 1;
         const 16;
 },
 sat_sfCPW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOKS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOKT; else goto cfOKU;
       cfOKT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOKU: // global
           I64[Sp - 24] = block_cfOKP_info;
           _sfCPv::P64 = P64[R1 + 7];
           _sfCPw::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfCPv::P64;
           P64[Sp - 8] = _sfCPw::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufOLc; else goto cfOKQ;
       ufOLc: // global
           call _cfOKP(R1) args: 0, res: 0, upd: 0;
       cfOKQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCPW_info" {
     sat_sfCPW_info:
         const sat_sfCPW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfOKP() //  [R1]
         { []
         }
     {offset
       cfOKP: // global
           I64[Sp - 8] = block_cfOKX_info;
           _sfCPT::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCPT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOLb; else goto cfOKZ;
       ufOLb: // global
           call _cfOKX(R1) args: 0, res: 0, upd: 0;
       cfOKZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOKP_info" {
     block_cfOKP_info:
         const _cfOKP;
         const 2;
         const 30;
 },
 _cfOKX() //  [R1]
         { []
         }
     {offset
       cfOKX: // global
           if (R1 & 7 == 1) goto cfOL5; else goto cfOL9;
       cfOL5: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfOL9: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOKX_info" {
     block_cfOKX_info:
         const _cfOKX;
         const 3;
         const 30;
 },
 sat_sfCPy_entry() //  [R1]
         { []
         }
     {offset
       cfOLp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOLq; else goto cfOLr;
       cfOLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOLr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPy_info" {
     sat_sfCPy_info:
         const sat_sfCPy_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1632;
 },
 lvl34_sfCPx_entry() //  [R1]
         { []
         }
     {offset
       cfOLs: // global
           _sfCPx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOLt; else goto cfOLu;
       cfOLu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOLw; else goto cfOLv;
       cfOLw: // global
           HpAlloc = 24;
           goto cfOLt;
       cfOLt: // global
           R1 = _sfCPx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCPx::P64;
           _sfCPr::P64 = P64[_sfCPx::P64 + 16];
           _sfCPt::P64 = P64[_sfCPx::P64 + 24];
           _sfCPu::P64 = P64[_sfCPx::P64 + 32];
           I64[Hp - 16] = sat_sfCPy_info;
           P64[Hp] = _sfCPr::P64;
           R3 = _sfCPu::P64;
           R2 = Hp - 16;
           R1 = _sfCPt::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sfCPx_info" {
     lvl34_sfCPx_info:
         const lvl34_sfCPx_entry;
         const 3;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 sat_sfCPM_entry() //  [R1]
         { []
         }
     {offset
       cfOLS: // global
           _sfCPM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfOLT; else goto cfOLU;
       cfOLU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOLW; else goto cfOLV;
       cfOLW: // global
           HpAlloc = 56;
           goto cfOLT;
       cfOLT: // global
           R1 = _sfCPM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOLV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCPM::P64;
           _sfCPu::P64 = P64[_sfCPM::P64 + 16];
           _sfCPw::P64 = P64[_sfCPM::P64 + 24];
           _sfCPC::P64 = P64[_sfCPM::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCPC::P64;
           P64[Hp - 24] = _sfCPu::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfCPw::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPM_info" {
     sat_sfCPM_info:
         const sat_sfCPM_entry;
         const 3;
         const 15;
 },
 sat_sfCPI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOM8: // global
           _sfCPF::P64 = R2;
           _sfCPI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfOM9; else goto cfOMa;
       cfOMa: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOMc; else goto cfOMb;
       cfOMc: // global
           HpAlloc = 56;
           goto cfOM9;
       cfOM9: // global
           R2 = _sfCPF::P64;
           R1 = _sfCPI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOMb: // global
           _sfCPw::P64 = P64[_sfCPI::P64 + 7];
           _sfCPC::P64 = P64[_sfCPI::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCPC::P64;
           P64[Hp - 24] = _sfCPF::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCPw::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCPI_info" {
     sat_sfCPI_info:
         const sat_sfCPI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfCPJ_entry() //  [R1]
         { []
         }
     {offset
       cfOMd: // global
           _sfCPJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOMe; else goto cfOMf;
       cfOMf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOMh; else goto cfOMg;
       cfOMh: // global
           HpAlloc = 24;
           goto cfOMe;
       cfOMe: // global
           R1 = _sfCPJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOMg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCPJ::P64;
           _sfCPw::P64 = P64[_sfCPJ::P64 + 16];
           _sfCPx::P64 = P64[_sfCPJ::P64 + 24];
           _sfCPC::P64 = P64[_sfCPJ::P64 + 32];
           I64[Hp - 16] = sat_sfCPI_info;
           P64[Hp - 8] = _sfCPw::P64;
           P64[Hp] = _sfCPC::P64;
           R2 = _sfCPw::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfCPx::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPJ_info" {
     sat_sfCPJ_info:
         const sat_sfCPJ_entry;
         const 3;
         const 15;
 },
 sat_sfCPP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOMi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfOMj; else goto cfOMk;
       cfOMj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOMk: // global
           I64[Sp - 40] = block_cfOLC_info;
           _sfCPs::P64 = P64[R1 + 7];
           _sfCPu::P64 = P64[R1 + 15];
           _sfCPw::P64 = P64[R1 + 23];
           _sfCPx::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfCPs::P64;
           P64[Sp - 24] = _sfCPu::P64;
           P64[Sp - 16] = _sfCPw::P64;
           P64[Sp - 8] = _sfCPx::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufOMB; else goto cfOLD;
       ufOMB: // global
           call _cfOLC(R1) args: 0, res: 0, upd: 0;
       cfOLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCPP_info" {
     sat_sfCPP_info:
         const sat_sfCPP_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfOLC() //  [R1]
         { []
         }
     {offset
       cfOLC: // global
           I64[Sp - 8] = block_cfOLH_info;
           _sfCPC::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfCPC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufOMA; else goto cfOLI;
       ufOMA: // global
           call _cfOLH(R1) args: 0, res: 0, upd: 0;
       cfOLI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOLC_info" {
     block_cfOLC_info:
         const _cfOLC;
         const 4;
         const 30;
 },
 _cfOLH() //  [R1]
         { []
         }
     {offset
       cfOLH: // global
           _sfCPu::P64 = P64[Sp + 24];
           _sfCPw::P64 = P64[Sp + 32];
           _sfCPC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfOMn; else goto cfOMr;
       cfOMn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOMq; else goto cfOMp;
       cfOMq: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOMp: // global
           I64[Hp - 72] = sat_sfCPM_info;
           P64[Hp - 56] = _sfCPu::P64;
           P64[Hp - 48] = _sfCPw::P64;
           P64[Hp - 40] = _sfCPC::P64;
           I64[Hp - 32] = sat_sfCPJ_info;
           P64[Hp - 16] = _sfCPw::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfCPC::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfOMr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfOMw; else goto cfOMv;
       cfOMw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOMv: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfCPC::P64;
           P64[Hp - 24] = _sfCPu::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfCPw::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOLH_info" {
     block_cfOLH_info:
         const _cfOLH;
         const 5;
         const 30;
 },
 sat_sfCPz_entry() //  [R1]
         { []
         }
     {offset
       cfOMG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfOMH; else goto cfOMI;
       cfOMH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOMI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPz_info" {
     sat_sfCPz_info:
         const sat_sfCPz_entry;
         const 1;
         const 16;
 },
 sat_sfCPQ_entry() //  [R1]
         { []
         }
     {offset
       cfOMJ: // global
           _sfCPQ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfOMK; else goto cfOML;
       cfOML: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfOMN; else goto cfOMM;
       cfOMN: // global
           HpAlloc = 104;
           goto cfOMK;
       cfOMK: // global
           R1 = _sfCPQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOMM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfCPQ::P64;
           _sfCPr::P64 = P64[_sfCPQ::P64 + 16];
           _sfCPs::P64 = P64[_sfCPQ::P64 + 24];
           _sfCPt::P64 = P64[_sfCPQ::P64 + 32];
           _sfCPu::P64 = P64[_sfCPQ::P64 + 40];
           _sfCPw::P64 = P64[_sfCPQ::P64 + 48];
           I64[Hp - 96] = lvl34_sfCPx_info;
           P64[Hp - 80] = _sfCPr::P64;
           P64[Hp - 72] = _sfCPt::P64;
           P64[Hp - 64] = _sfCPu::P64;
           I64[Hp - 56] = sat_sfCPP_info;
           P64[Hp - 48] = _sfCPs::P64;
           P64[Hp - 40] = _sfCPu::P64;
           P64[Hp - 32] = _sfCPw::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfCPz_info;
           P64[Hp] = _sfCPw::P64;
           R2 = _sfCPw::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCPQ_info" {
     sat_sfCPQ_info:
         const sat_sfCPQ_entry;
         const 5;
         const 4294967311;
         const SfCR7_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfOMO: // global
           _sfCPu::P64 = R5;
           _sfCPt::P64 = R4;
           _sfCPs::P64 = R3;
           _sfCPr::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfOMP; else goto cfOMQ;
       cfOMQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfOMS; else goto cfOMR;
       cfOMS: // global
           HpAlloc = 24;
           goto cfOMP;
       cfOMP: // global
           R5 = _sfCPu::P64;
           R4 = _sfCPt::P64;
           R3 = _sfCPs::P64;
           R2 = _sfCPr::P64;
           R1 = Data.Semigroup.$fDataOption_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfOMR: // global
           I64[Hp - 16] = lvl33_sfCPv_info;
           P64[Hp] = _sfCPs::P64;
           I64[Sp - 48] = block_cfOKG_info;
           R2 = _sfCPs::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfCPr::P64;
           P64[Sp - 24] = _sfCPs::P64;
           P64[Sp - 16] = _sfCPt::P64;
           P64[Sp - 8] = _sfCPu::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapMo_info" {
     Data.Semigroup.$fDataOption_$cgmapMo_info:
         const Data.Semigroup.$fDataOption_$cgmapMo_entry;
         const 0;
         const 1103806595086;
         const 17179869208;
         const SfCR7_srt+1632;
 },
 _cfOKG() //  [R1]
         { []
         }
     {offset
       cfOKG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfOMV; else goto cfOMU;
       cfOMV: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfOMU: // global
           I64[Hp - 72] = sat_sfCPW_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfCPQ_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfOKG_info" {
     block_cfOKG_info:
         const _cfOKG;
         const 5;
         const 4294967326;
         const SfCR7_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.326534778 UTC

[section ""data" . lvl30_rfC7f_closure" {
     lvl30_rfC7f_closure:
         const lvl30_rfC7f_info;
         const 0;
 },
 lvl30_rfC7f_entry() //  []
         { []
         }
     {offset
       cfOOs: // global
           R1 = Data.Semigroup.$cOption_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl30_rfC7f_info" {
     lvl30_rfC7f_info:
         const lvl30_rfC7f_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.329947972 UTC

[section ""data" . lvl31_rfC7g_closure" {
     lvl31_rfC7g_closure:
         const lvl31_rfC7g_info;
         const 0;
 },
 lvl31_rfC7g_entry() //  []
         { []
         }
     {offset
       cfOOE: // global
           R1 = Data.Semigroup.$tOption_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_rfC7g_info" {
     lvl31_rfC7g_info:
         const lvl31_rfC7g_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfCR7_srt+1712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.333826045 UTC

[section ""data" . lvl32_rfC7h_closure" {
     lvl32_rfC7h_closure:
         const lvl32_rfC7h_info;
 },
 lvl32_rfC7h_entry() //  []
         { []
         }
     {offset
       cfOOQ: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl32_rfC7h_info" {
     lvl32_rfC7h_info:
         const lvl32_rfC7h_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.341717845 UTC

[section ""data" . Data.Semigroup.$fDataOption_closure" {
     Data.Semigroup.$fDataOption_closure:
         const Data.Semigroup.$fDataOption_info;
         const 0;
 },
 sat_sfCQd_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOP7: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapMo_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQd_info" {
     sat_sfCQd_info:
         const sat_sfCQd_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1696;
 },
 sat_sfCQc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOPf: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapMp_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQc_info" {
     sat_sfCQc_info:
         const sat_sfCQc_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1640;
 },
 sat_sfCQb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOPn: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption_$cgmapM_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQb_info" {
     sat_sfCQb_info:
         const sat_sfCQb_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+1648;
 },
 sat_sfCQa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOPv: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapQi_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQa_info" {
     sat_sfCQa_info:
         const sat_sfCQa_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1656;
 },
 sat_sfCQ9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOPD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption_$cgmapQ_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQ9_info" {
     sat_sfCQ9_info:
         const sat_sfCQ9_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+1672;
 },
 sat_sfCQ8_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfOPL: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Semigroup.$fDataOption_$cgmapQr_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQ8_info" {
     sat_sfCQ8_info:
         const sat_sfCQ8_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SfCR7_srt+1664;
 },
 sat_sfCQ7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfOPT: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapQl_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQ7_info" {
     sat_sfCQ7_info:
         const sat_sfCQ7_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfCR7_srt+1680;
 },
 sat_sfCQ6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfOQ1: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption3_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQ6_info" {
     sat_sfCQ6_info:
         const sat_sfCQ6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfCR7_srt+1688;
 },
 sat_sfCQ5_entry() //  [R1, R2]
         { []
         }
     {offset
       cfOQ9: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataOption_$cdataCast1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfCQ5_info" {
     sat_sfCQ5_info:
         const sat_sfCQ5_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfCR7_srt+1624;
 },
 sat_sfCQ4_entry() //  [R1]
         { []
         }
     {offset
       cfOQg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOQh; else goto cfOQi;
       cfOQh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOQi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption_$cgunfold_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCQ4_info" {
     sat_sfCQ4_info:
         const sat_sfCQ4_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1720;
 },
 sat_sfCQ3_entry() //  [R1]
         { []
         }
     {offset
       cfOQn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOQo; else goto cfOQp;
       cfOQo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption_$cgfoldl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCQ3_info" {
     sat_sfCQ3_info:
         const sat_sfCQ3_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1728;
 },
 sat_sfCQ2_entry() //  [R1]
         { []
         }
     {offset
       cfOQu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfOQv; else goto cfOQw;
       cfOQv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfOQw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfCQ2_info" {
     sat_sfCQ2_info:
         const sat_sfCQ2_entry;
         const 1;
         const 4294967312;
         const SfCR7_srt+1616;
 },
 Data.Semigroup.$fDataOption_entry() //  [R2]
         { []
         }
     {offset
       cfOQy: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cfOQC; else goto cfOQB;
       cfOQC: // global
           HpAlloc = 344;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfOQB: // global
           I64[Hp - 336] = sat_sfCQd_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_sfCQc_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfCQb_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfCQa_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfCQ9_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfCQ8_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfCQ7_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfCQ6_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfCQ5_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfCQ4_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfCQ3_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfCQ2_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = lvl30_rfC7f_closure+1;
           P64[Hp - 80] = lvl31_rfC7g_closure+1;
           P64[Hp - 72] = Hp - 207;
           P64[Hp - 64] = lvl32_rfC7h_closure+2;
           P64[Hp - 56] = Hp - 222;
           P64[Hp - 48] = Hp - 237;
           P64[Hp - 40] = Hp - 252;
           P64[Hp - 32] = Hp - 270;
           P64[Hp - 24] = Hp - 285;
           P64[Hp - 16] = Hp - 302;
           P64[Hp - 8] = Hp - 317;
           P64[Hp] = Hp - 333;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_info" {
     Data.Semigroup.$fDataOption_info:
         const Data.Semigroup.$fDataOption_entry;
         const 0;
         const 1099490152939534;
         const 4294967301;
         const SfCR7_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.364945834 UTC

[section ""data" . Data.Semigroup.Arg_closure" {
     Data.Semigroup.Arg_closure:
         const Data.Semigroup.Arg_info;
 },
 Data.Semigroup.Arg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfORC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfORG; else goto cfORF;
       cfORG: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Arg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfORF: // global
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Arg_info" {
     Data.Semigroup.Arg_info:
         const Data.Semigroup.Arg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.369059617 UTC

[section ""cstring" . ifJxr_str" {
     ifJxr_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,83,101,109,105,103,114,111,117,112,46,65,114,103]
 },
 Data.Semigroup.Arg_con_entry() //  [R1]
         { []
         }
     {offset
       cfORM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Arg_con_info" {
     Data.Semigroup.Arg_con_info:
         const Data.Semigroup.Arg_con_entry;
         const 2;
         const 4;
         const ifJxr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:25.374082437 UTC

[section ""relreadonly" . SfCR7_srt" {
     SfCR7_srt:
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const Data.Semigroup.$fSemigroupMin_closure;
         const lvl_rfC66_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Semigroup.$fSemigroupMax_closure;
         const lvl2_rfC68_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const Data.Semigroup.$fMonoidWrappedMonoid_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Semigroup.$fFoldableOption2_closure;
         const Data.Semigroup.$fFoldableOption3_closure;
         const Data.Semigroup.$fFoldableOption4_closure;
         const Data.Semigroup.$fFoldableOption5_closure;
         const Data.Semigroup.$fFoldableOption6_closure;
         const Data.Semigroup.$fFoldableOption_$cfoldl1_closure;
         const Data.Semigroup.$fFoldableOption8_closure;
         const Data.Semigroup.$fFoldableOption_$cfoldr1_closure;
         const Data.Semigroup.$fFoldableOption9_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Semigroup.$fFoldableOption1_closure;
         const Data.Semigroup.$fSemigroupOption2_closure;
         const Data.Semigroup.$fSemigroupOption_$cstimes_closure;
         const Data.Semigroup.$fSemigroupOption1_closure;
         const Data.Semigroup.$fSemigroupOption_closure;
         const Data.Semigroup.$fMonoidOption_closure;
         const Data.Data.$fDataMaybe_closure;
         const Data.Semigroup.$fDataOption_$cgunfold_closure;
         const Data.Semigroup.$fDataOption_$cgfoldl_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.$fReadFirst2_closure;
         const GHC.Read.readField_closure;
         const Data.Semigroup.$fReadOption2_closure;
         const Data.Semigroup.$fReadFirst_lexeme_closure;
         const Data.Semigroup.$fReadOption_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.$fReadOption1_closure;
         const Data.Semigroup.$fReadOption_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.$fReadOption_$creadListPrec_closure;
         const Data.Semigroup.$fReadOption_$creadList_closure;
         const Data.Semigroup.$fReadOption_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const Data.Semigroup.$w$cshowsPrec5_closure;
         const Data.Semigroup.$fShowOption_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const Data.Semigroup.$fReadFirst3_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const Data.Semigroup.$fShowOption3_closure;
         const Data.Semigroup.$fShowOption_$cshow_closure;
         const Data.Semigroup.$fShowOption_$cshowList_closure;
         const Data.Semigroup.$fShowOption_closure;
         const Data.Semigroup.$fReadWrappedMonoid2_closure;
         const Data.Semigroup.$fReadWrappedMonoid_lexeme_closure;
         const Data.Semigroup.$fReadWrappedMonoid1_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_closure;
         const Data.Semigroup.$fReadWrappedMonoid_closure;
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_closure;
         const Data.Semigroup.$fShowWrappedMonoid_closure;
         const Data.Semigroup.$fReadLast2_closure;
         const Data.Semigroup.$fReadLast_lexeme_closure;
         const Data.Semigroup.$fReadLast1_closure;
         const Data.Semigroup.$fReadLast_$creadsPrec_closure;
         const Data.Semigroup.$fReadLast_$creadListPrec_closure;
         const Data.Semigroup.$fReadLast_$creadList_closure;
         const Data.Semigroup.$fReadLast_closure;
         const Data.Semigroup.$fShowLast_$cshow_closure;
         const Data.Semigroup.$fShowLast_closure;
         const Data.Semigroup.$fReadFirst2_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.$fReadFirst5_closure;
         const Data.Semigroup.$fReadFirst_lexeme1_closure;
         const Data.Semigroup.$fReadFirst1_closure;
         const Data.Semigroup.$fReadFirst_$creadsPrec_closure;
         const Data.Semigroup.$fReadFirst_$creadListPrec_closure;
         const Data.Semigroup.$fReadFirst_$creadList_closure;
         const Data.Semigroup.$fReadFirst_closure;
         const Data.Semigroup.$fReadFirst3_closure;
         const Data.Semigroup.$fShowFirst_$cshow_closure;
         const Data.Semigroup.$fShowFirst_closure;
         const Data.Semigroup.$fReadArg_lexeme_closure;
         const Data.Semigroup.$fReadArg1_closure;
         const Data.Semigroup.$fReadArg_$creadsPrec_closure;
         const Data.Semigroup.$fReadArg_$creadListPrec_closure;
         const Data.Semigroup.$fReadArg_$creadList_closure;
         const Data.Semigroup.$fReadArg_closure;
         const Data.Semigroup.$fReadMax2_closure;
         const Data.Semigroup.$fReadMax_lexeme_closure;
         const Data.Semigroup.$fReadMax1_closure;
         const Data.Semigroup.$fReadMax_$creadsPrec_closure;
         const Data.Semigroup.$fReadMax_$creadListPrec_closure;
         const Data.Semigroup.$fReadMax_$creadList_closure;
         const Data.Semigroup.$fReadMax_closure;
         const Data.Semigroup.$fShowMax_$cshow_closure;
         const Data.Semigroup.$fShowMax_closure;
         const Data.Semigroup.$fSemigroupMax_closure;
         const Data.Semigroup.$fMonoidMax_closure;
         const Data.Semigroup.$fReadMin2_closure;
         const Data.Semigroup.$fReadMin_lexeme_closure;
         const Data.Semigroup.$fReadMin1_closure;
         const Data.Semigroup.$fReadMin_$creadsPrec_closure;
         const Data.Semigroup.$fReadMin_$creadListPrec_closure;
         const Data.Semigroup.$fReadMin_$creadList_closure;
         const Data.Semigroup.$fReadMin_closure;
         const Data.Semigroup.$fShowMin_$cshow_closure;
         const Data.Semigroup.$fShowMin_closure;
         const Data.Semigroup.$fSemigroupMin_closure;
         const Data.Semigroup.$fMonoidMin_closure;
         const Control.Monad.Fix.$fMonadFixFirst1_closure;
         const Data.Semigroup.$fMonadFixOption_$cmfix_closure;
         const Data.Semigroup.$fSemigroupOption2_closure;
         const Data.Semigroup.mtimesDefault_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
         const GHC.List.badHead_closure;
         const Data.Semigroup.$fDataMin7_closure;
         const go61_rfC6j_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Semigroup.$fDataMin6_closure;
         const Data.Semigroup.$fDataMax7_closure;
         const go1_rfC6n_closure;
         const Data.Semigroup.$fDataMax6_closure;
         const Data.Semigroup.$fDataArg9_closure;
         const go2_rfC6q_closure;
         const Data.Semigroup.$fDataArg8_closure;
         const Data.Semigroup.$fDataFirst7_closure;
         const go3_rfC6u_closure;
         const Data.Semigroup.$fDataFirst6_closure;
         const Data.Semigroup.$fDataLast7_closure;
         const go4_rfC6y_closure;
         const Data.Semigroup.$fDataLast6_closure;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const go5_rfC6C_closure;
         const Data.Semigroup.$fDataWrappedMonoid6_closure;
         const Data.Semigroup.$fDataOption9_closure;
         const go6_rfC6G_closure;
         const Data.Semigroup.$fDataOption8_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Semigroup.$fDataMin2_closure;
         const Data.Semigroup.$fDataMin8_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Semigroup.$fDataMin_$cdataCast1_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Semigroup.$fDataMin_$cgmapQi_closure;
         const Data.Semigroup.$cMin_closure;
         const Data.Semigroup.$tMin_closure;
         const Data.Semigroup.$fDataMin_closure;
         const lvl12_rfC6O_closure;
         const lvl13_rfC6P_closure;
         const Data.Semigroup.$fDataMax2_closure;
         const Data.Semigroup.$fDataMax8_closure;
         const Data.Semigroup.$fDataMax_$cdataCast1_closure;
         const Data.Semigroup.$fDataMax_$cgmapQi_closure;
         const Data.Semigroup.$cMax_closure;
         const Data.Semigroup.$tMax_closure;
         const Data.Semigroup.$fDataMax_closure;
         const lvl15_rfC6S_closure;
         const lvl16_rfC6T_closure;
         const Data.Semigroup.$fDataArg4_closure;
         const Data.Semigroup.$fDataArg10_closure;
         const Data.Semigroup.$fDataArg_$cdataCast2_closure;
         const Data.Semigroup.$fDataArg_$cgmapQi_closure;
         const Data.Semigroup.$cArg_closure;
         const lvl18_rfC6Z_closure;
         const Data.Semigroup.$tArg_closure;
         const Data.Semigroup.$fDataArg_closure;
         const lvl19_rfC70_closure;
         const Data.Semigroup.$fDataFirst2_closure;
         const Data.Semigroup.$fDataFirst8_closure;
         const Data.Semigroup.$fDataFirst_$cdataCast1_closure;
         const Data.Semigroup.$fDataFirst_$cgmapQi_closure;
         const Data.Semigroup.$cFirst_closure;
         const Data.Semigroup.$tFirst_closure;
         const Data.Semigroup.$fDataFirst_closure;
         const lvl21_rfC73_closure;
         const lvl22_rfC74_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Semigroup.$fDataLast2_closure;
         const Data.Semigroup.$fDataLast8_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Semigroup.$fDataLast_$cdataCast1_closure;
         const Data.Semigroup.$fDataLast_$cgmapQi_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Semigroup.$cLast_closure;
         const Data.Semigroup.$tLast_closure;
         const Data.Semigroup.$fDataLast_closure;
         const lvl24_rfC77_closure;
         const lvl25_rfC78_closure;
         const Data.Semigroup.$fDataWrappedMonoid2_closure;
         const Data.Semigroup.$fDataWrappedMonoid8_closure;
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure;
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure;
         const Data.Semigroup.$cWrapMonoid_closure;
         const Data.Semigroup.$tWrappedMonoid_closure;
         const Data.Semigroup.$fDataWrappedMonoid_closure;
         const lvl27_rfC7b_closure;
         const lvl28_rfC7c_closure;
         const Data.Semigroup.$fDataOption4_closure;
         const Data.Semigroup.$fDataOption10_closure;
         const Data.Semigroup.$fDataOption_$cdataCast1_closure;
         const Data.Data.$fDataMaybe_closure;
         const Data.Semigroup.$fDataOption_$cgmapMp_closure;
         const Data.Semigroup.$fDataOption_$cgmapM_closure;
         const Data.Semigroup.$fDataOption_$cgmapQi_closure;
         const Data.Semigroup.$fDataOption_$cgmapQr_closure;
         const Data.Semigroup.$fDataOption_$cgmapQ_closure;
         const Data.Semigroup.$fDataOption_$cgmapQl_closure;
         const Data.Semigroup.$fDataOption3_closure;
         const Data.Semigroup.$fDataOption_$cgmapMo_closure;
         const Data.Semigroup.$cOption_closure;
         const Data.Semigroup.$tOption_closure;
         const Data.Semigroup.$fDataOption_$cgunfold_closure;
         const Data.Semigroup.$fDataOption_$cgfoldl_closure;
         const Data.Semigroup.$fDataOption_closure;
         const lvl30_rfC7f_closure;
         const lvl31_rfC7g_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.540378933 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:40.543366688 UTC

[section ""data" . Data.Semigroup.$w$csconcat1_closure" {
     Data.Semigroup.$w$csconcat1_closure:
         const Data.Semigroup.$w$csconcat1_info;
 },
 go_sfORW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPB4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfPB5; else goto cfPB6;
       cfPB5: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPB6: // global
           I64[Sp - 32] = block_cfPAX_info;
           _sfORW::P64 = R1;
           _sfORT::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfORT::P64;
           P64[Sp - 16] = _sfORW::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufPBg; else goto cfPAY;
       ufPBg: // global
           call _cfPAX(R1) args: 0, res: 0, upd: 0;
       cfPAY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfORW_info" {
     go_sfORW_info:
         const go_sfORW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfPAX() //  [R1]
         { []
         }
     {offset
       cfPAX: // global
           _sfORX::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfPB1; else goto cfPB2;
       cfPB1: // global
           R1 = _sfORX::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfPB2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfPBe; else goto cfPBd;
       cfPBe: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfPBd: // global
           _sfOS0::P64 = P64[R1 + 6];
           _sfOS1::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfOS0::P64;
           P64[Hp] = _sfOS1::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfORX::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Classes.min_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPAX_info" {
     block_cfPAX_info:
         const _cfPAX;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPBh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfPBl; else goto cfPBk;
       cfPBl: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPBk: // global
           I64[Hp - 8] = go_sfORW_info;
           P64[Hp] = R2;
           _sfORU::P64 = R3;
           R3 = R4;
           R2 = _sfORU::P64;
           R1 = Hp - 6;
           call go_sfORW_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat1_info" {
     Data.Semigroup.$w$csconcat1_info:
         const Data.Semigroup.$w$csconcat1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.551290112 UTC

[section ""data" . Data.Semigroup.$fSemigroupMin_$csconcat_closure" {
     Data.Semigroup.$fSemigroupMin_$csconcat_closure:
         const Data.Semigroup.$fSemigroupMin_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupMin_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPBN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPBO; else goto cfPBP;
       cfPBO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMin_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPBP: // global
           I64[Sp - 16] = block_cfPBK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPBT; else goto cfPBL;
       ufPBT: // global
           call _cfPBK(R1) args: 0, res: 0, upd: 0;
       cfPBL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMin_$csconcat_info" {
     Data.Semigroup.$fSemigroupMin_$csconcat_info:
         const Data.Semigroup.$fSemigroupMin_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPBK() //  [R1]
         { []
         }
     {offset
       cfPBK: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPBK_info" {
     block_cfPBK_info:
         const _cfPBK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.556336147 UTC

[section ""data" . lvl_rfC66_closure" {
     lvl_rfC66_closure:
         const lvl_rfC66_info;
         const 0;
 },
 lvl_rfC66_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPC8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rfC66_info" {
     lvl_rfC66_info:
         const lvl_rfC66_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfPCb_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.560650337 UTC

[section ""data" . Data.Semigroup.$fSemigroupMin_closure" {
     Data.Semigroup.$fSemigroupMin_closure:
         const Data.Semigroup.$fSemigroupMin_info;
         const 0;
 },
 sat_sfOSd_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPCp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupMin_$csconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOSd_info" {
     sat_sfOSd_info:
         const sat_sfOSd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOSc_entry() //  [R1]
         { []
         }
     {offset
       cfPCw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPCx; else goto cfPCy;
       cfPCx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfPCy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfOSc_info" {
     sat_sfOSc_info:
         const sat_sfOSc_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupMin_entry() //  [R2]
         { []
         }
     {offset
       cfPCA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfPCE; else goto cfPCD;
       cfPCE: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPCD: // global
           I64[Hp - 64] = sat_sfOSd_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfOSc_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = lvl_rfC66_closure+3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMin_info" {
     Data.Semigroup.$fSemigroupMin_info:
         const Data.Semigroup.$fSemigroupMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.567356641 UTC

[section ""data" . Data.Semigroup.$fFunctorMin2_closure" {
     Data.Semigroup.$fFunctorMin2_closure:
         const Data.Semigroup.$fFunctorMin2_info;
 },
 Data.Semigroup.$fFunctorMin2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPD2: // global
           _sfOSe::P64 = R2;
           R2 = R3;
           R1 = _sfOSe::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMin2_info" {
     Data.Semigroup.$fFunctorMin2_info:
         const Data.Semigroup.$fFunctorMin2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.570636635 UTC

[section ""data" . Data.Semigroup.$fFunctorMin1_closure" {
     Data.Semigroup.$fFunctorMin1_closure:
         const Data.Semigroup.$fFunctorMin1_info;
 },
 Data.Semigroup.$fFunctorMin1_entry() //  [R2]
         { []
         }
     {offset
       cfPDd: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMin1_info" {
     Data.Semigroup.$fFunctorMin1_info:
         const Data.Semigroup.$fFunctorMin1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.591280566 UTC

[section ""data" . Data.Semigroup.$fFunctorMin_closure" {
     Data.Semigroup.$fFunctorMin_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorMin2_closure+2;
         const Data.Semigroup.$fFunctorMin1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.593974017 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfPDp: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldMap_info" {
     Data.Semigroup.$fFoldableMin_$cfoldMap_info:
         const Data.Semigroup.$fFoldableMin_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.597321263 UTC

[section ""data" . Data.Semigroup.$fFoldableMin4_closure" {
     Data.Semigroup.$fFoldableMin4_closure:
         const Data.Semigroup.$fFoldableMin4_info;
 },
 Data.Semigroup.$fFoldableMin4_entry() //  [R3]
         { []
         }
     {offset
       cfPDA: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin4_info" {
     Data.Semigroup.$fFoldableMin4_info:
         const Data.Semigroup.$fFoldableMin4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.600539327 UTC

[section ""data" . Data.Semigroup.$fFoldableMin1_closure" {
     Data.Semigroup.$fFoldableMin1_closure:
         const Data.Semigroup.$fFoldableMin1_info;
 },
 Data.Semigroup.$fFoldableMin1_entry() //  [R3]
         { []
         }
     {offset
       cfPDL: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin1_info" {
     Data.Semigroup.$fFoldableMin1_info:
         const Data.Semigroup.$fFoldableMin1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.603906656 UTC

[section ""data" . Data.Semigroup.$fFoldableMin2_closure" {
     Data.Semigroup.$fFoldableMin2_closure:
         const Data.Semigroup.$fFoldableMin2_info;
 },
 Data.Semigroup.$fFoldableMin2_entry() //  [R3]
         { []
         }
     {offset
       cfPDW: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin2_info" {
     Data.Semigroup.$fFoldableMin2_info:
         const Data.Semigroup.$fFoldableMin2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.6081031 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$celem_closure" {
     Data.Semigroup.$fFoldableMin_$celem_closure:
         const Data.Semigroup.$fFoldableMin_$celem_info;
 },
 f_sfOSt_entry() //  [R1]
         { []
         }
     {offset
       cfPEb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfPEc; else goto cfPEd;
       cfPEc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfPEd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfOSt_info" {
     f_sfOSt_info:
         const f_sfOSt_entry;
         const 2;
         const 18;
 },
 sat_sfOSv_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPEj: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOSv_info" {
     sat_sfOSv_info:
         const sat_sfOSv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableMin_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPEm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfPEq; else goto cfPEp;
       cfPEq: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMin_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPEp: // global
           I64[Hp - 40] = f_sfOSt_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfOSv_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$celem_info" {
     Data.Semigroup.$fFoldableMin_$celem_info:
         const Data.Semigroup.$fFoldableMin_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.615004618 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldl_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldl_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPEN: // global
           _sfOSx::P64 = R3;
           R3 = R4;
           _sfOSw::P64 = R2;
           R2 = _sfOSx::P64;
           R1 = _sfOSw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldl_info" {
     Data.Semigroup.$fFoldableMin_$cfoldl_info:
         const Data.Semigroup.$fFoldableMin_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.618505872 UTC

[section ""data" . Data.Semigroup.$fFoldableMin3_closure" {
     Data.Semigroup.$fFoldableMin3_closure:
         const Data.Semigroup.$fFoldableMin3_info;
 },
 Data.Semigroup.$fFoldableMin3_entry() //  [R3]
         { []
         }
     {offset
       cfPEY: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin3_info" {
     Data.Semigroup.$fFoldableMin3_info:
         const Data.Semigroup.$fFoldableMin3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.622340598 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableMin_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableMin_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableMin_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPF9: // global
           R3 = R3;
           _sfOSB::P64 = R2;
           R2 = R4;
           R1 = _sfOSB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cfoldr'_info" {
     Data.Semigroup.$fFoldableMin_$cfoldr'_info:
         const Data.Semigroup.$fFoldableMin_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.62595952 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst3_closure" {
     Data.Semigroup.$fFoldableFirst3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.627864076 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$clength_closure" {
     Data.Semigroup.$fFoldableMin_$clength_closure:
         const Data.Semigroup.$fFoldableMin_$clength_info;
 },
 Data.Semigroup.$fFoldableMin_$clength_entry() //  []
         { []
         }
     {offset
       cfPFl: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$clength_info" {
     Data.Semigroup.$fFoldableMin_$clength_info:
         const Data.Semigroup.$fFoldableMin_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.631195232 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$cnull_closure" {
     Data.Semigroup.$fFoldableMin_$cnull_closure:
         const Data.Semigroup.$fFoldableMin_$cnull_info;
 },
 Data.Semigroup.$fFoldableMin_$cnull_entry() //  []
         { []
         }
     {offset
       cfPFx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$cnull_info" {
     Data.Semigroup.$fFoldableMin_$cnull_info:
         const Data.Semigroup.$fFoldableMin_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.634824966 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_$ctoList_closure" {
     Data.Semigroup.$fFoldableMin_$ctoList_closure:
         const Data.Semigroup.$fFoldableMin_$ctoList_info;
 },
 Data.Semigroup.$fFoldableMin_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfPFL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfPFP; else goto cfPFO;
       cfPFP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMin_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPFO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMin_$ctoList_info" {
     Data.Semigroup.$fFoldableMin_$ctoList_info:
         const Data.Semigroup.$fFoldableMin_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.638389351 UTC

[section ""data" . Data.Semigroup.$fFoldableMin_closure" {
     Data.Semigroup.$fFoldableMin_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableMin4_closure+2;
         const Data.Semigroup.$fFoldableMin_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMin_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMin3_closure+2;
         const Data.Semigroup.$fFoldableMin3_closure+2;
         const Data.Semigroup.$fFoldableMin_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableMin_$cnull_closure+1;
         const Data.Semigroup.$fFoldableMin_$clength_closure+1;
         const Data.Semigroup.$fFoldableMin_$celem_closure+2;
         const Data.Semigroup.$fFoldableMin2_closure+2;
         const Data.Semigroup.$fFoldableMin2_closure+2;
         const Data.Semigroup.$fFoldableMin1_closure+2;
         const Data.Semigroup.$fFoldableMin1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.640580681 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst3_closure" {
     Data.Semigroup.$fApplicativeFirst3_closure:
         const Data.Semigroup.$fApplicativeFirst3_info;
 },
 Data.Semigroup.$fApplicativeFirst3_entry() //  [R2]
         { []
         }
     {offset
       cfPG3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst3_info" {
     Data.Semigroup.$fApplicativeFirst3_info:
         const Data.Semigroup.$fApplicativeFirst3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.644585262 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$ctraverse_closure" {
     Data.Semigroup.$fTraversableMin_$ctraverse_closure:
         const Data.Semigroup.$fTraversableMin_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableMin_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPGh: // global
           _sfOSK::P64 = R4;
           _sfOSJ::P64 = R3;
           _sfOSI::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfPGi; else goto cfPGj;
       cfPGj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfPGl; else goto cfPGk;
       cfPGl: // global
           HpAlloc = 32;
           goto cfPGi;
       cfPGi: // global
           R4 = _sfOSK::P64;
           R3 = _sfOSJ::P64;
           R2 = _sfOSI::P64;
           R1 = Data.Semigroup.$fTraversableMin_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPGk: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfOSJ::P64;
           P64[Hp] = _sfOSK::P64;
           I64[Sp - 16] = block_cfPGf_info;
           R2 = _sfOSI::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$ctraverse_info" {
     Data.Semigroup.$fTraversableMin_$ctraverse_info:
         const Data.Semigroup.$fTraversableMin_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPGf() //  [R1]
         { []
         }
     {offset
       cfPGf: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPGf_info" {
     block_cfPGf_info:
         const _cfPGf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.650275081 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$csequenceA_closure" {
     Data.Semigroup.$fTraversableMin_$csequenceA_closure:
         const Data.Semigroup.$fTraversableMin_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableMin_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPGI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPGJ; else goto cfPGK;
       cfPGJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMin_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPGK: // global
           I64[Sp - 16] = block_cfPGG_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$csequenceA_info" {
     Data.Semigroup.$fTraversableMin_$csequenceA_info:
         const Data.Semigroup.$fTraversableMin_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPGG() //  [R1]
         { []
         }
     {offset
       cfPGG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPGG_info" {
     block_cfPGG_info:
         const _cfPGG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.656348805 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$cmapM_closure" {
     Data.Semigroup.$fTraversableMin_$cmapM_closure:
         const Data.Semigroup.$fTraversableMin_$cmapM_info;
 },
 Data.Semigroup.$fTraversableMin_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPH6: // global
           _sfOSS::P64 = R4;
           _sfOSR::P64 = R3;
           _sfOSQ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfPHa; else goto cfPHb;
       cfPHb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfPHd; else goto cfPHc;
       cfPHd: // global
           HpAlloc = 32;
           goto cfPHa;
       cfPHa: // global
           R4 = _sfOSS::P64;
           R3 = _sfOSR::P64;
           R2 = _sfOSQ::P64;
           R1 = Data.Semigroup.$fTraversableMin_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPHc: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfOSR::P64;
           P64[Hp] = _sfOSS::P64;
           I64[Sp - 16] = block_cfPH4_info;
           R2 = _sfOSQ::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$cmapM_info" {
     Data.Semigroup.$fTraversableMin_$cmapM_info:
         const Data.Semigroup.$fTraversableMin_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPH4() //  [R1]
         { []
         }
     {offset
       cfPH4: // global
           I64[Sp] = block_cfPH9_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPH4_info" {
     block_cfPH4_info:
         const _cfPH4;
         const 1;
         const 30;
 },
 _cfPH9() //  [R1]
         { []
         }
     {offset
       cfPH9: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPH9_info" {
     block_cfPH9_info:
         const _cfPH9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.66349806 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_$csequence_closure" {
     Data.Semigroup.$fTraversableMin_$csequence_closure:
         const Data.Semigroup.$fTraversableMin_$csequence_info;
 },
 Data.Semigroup.$fTraversableMin_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPHG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPHK; else goto cfPHL;
       cfPHK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMin_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPHL: // global
           I64[Sp - 16] = block_cfPHE_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMin_$csequence_info" {
     Data.Semigroup.$fTraversableMin_$csequence_info:
         const Data.Semigroup.$fTraversableMin_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPHE() //  [R1]
         { []
         }
     {offset
       cfPHE: // global
           I64[Sp] = block_cfPHJ_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPHE_info" {
     block_cfPHE_info:
         const _cfPHE;
         const 1;
         const 30;
 },
 _cfPHJ() //  [R1]
         { []
         }
     {offset
       cfPHJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPHJ_info" {
     block_cfPHJ_info:
         const _cfPHJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.669959417 UTC

[section ""data" . Data.Semigroup.$fTraversableMin_closure" {
     Data.Semigroup.$fTraversableMin_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorMin_closure+1;
         const Data.Semigroup.$fFoldableMin_closure+1;
         const Data.Semigroup.$fTraversableMin_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableMin_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableMin_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableMin_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.672065397 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_$c<*_closure" {
     Data.Semigroup.$fApplicativeMin_$c<*_closure:
         const Data.Semigroup.$fApplicativeMin_$c<*_info;
 },
 Data.Semigroup.$fApplicativeMin_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfPIb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin_$c<*_info" {
     Data.Semigroup.$fApplicativeMin_$c<*_info:
         const Data.Semigroup.$fApplicativeMin_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.675292847 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_$c*>_closure" {
     Data.Semigroup.$fApplicativeMin_$c*>_closure:
         const Data.Semigroup.$fApplicativeMin_$c*>_info;
 },
 Data.Semigroup.$fApplicativeMin_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfPIm: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin_$c*>_info" {
     Data.Semigroup.$fApplicativeMin_$c*>_info:
         const Data.Semigroup.$fApplicativeMin_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.678620733 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst1_closure" {
     Data.Semigroup.$fApplicativeFirst1_closure:
         const Data.Semigroup.$fApplicativeFirst1_info;
 },
 Data.Semigroup.$fApplicativeFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfPIx: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst1_info" {
     Data.Semigroup.$fApplicativeFirst1_info:
         const Data.Semigroup.$fApplicativeFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.682271202 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin1_closure" {
     Data.Semigroup.$fApplicativeMin1_closure:
         const Data.Semigroup.$fApplicativeMin1_info;
 },
 Data.Semigroup.$fApplicativeMin1_entry() //  [R2]
         { []
         }
     {offset
       cfPII: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMin1_info" {
     Data.Semigroup.$fApplicativeMin1_info:
         const Data.Semigroup.$fApplicativeMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.685867435 UTC

[section ""data" . Data.Semigroup.$fApplicativeMin_closure" {
     Data.Semigroup.$fApplicativeMin_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorMin_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeMin1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeMin_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeMin_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.687936628 UTC

[section ""data" . Data.Semigroup.$fMonadMin_$c>>=_closure" {
     Data.Semigroup.$fMonadMin_$c>>=_closure:
         const Data.Semigroup.$fMonadMin_$c>>=_info;
 },
 Data.Semigroup.$fMonadMin_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPIU: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadMin_$c>>=_info" {
     Data.Semigroup.$fMonadMin_$c>>=_info:
         const Data.Semigroup.$fMonadMin_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.691266497 UTC

[section ""data" . lvl1_rfC67_closure" {
     lvl1_rfC67_closure:
         const lvl1_rfC67_info;
         const 0;
 },
 lvl1_rfC67_entry() //  [R2]
         { []
         }
     {offset
       cfPJ5: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rfC67_info" {
     lvl1_rfC67_info:
         const lvl1_rfC67_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.694574905 UTC

[section ""data" . Data.Semigroup.$fMonadMin_closure" {
     Data.Semigroup.$fMonadMin_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeMin_closure+1;
         const Data.Semigroup.$fMonadMin_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeMin_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl1_rfC67_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.699571374 UTC

[section ""data" . Data.Semigroup.$fNumMin_closure" {
     Data.Semigroup.$fNumMin_closure:
         const Data.Semigroup.$fNumMin_info;
 },
 sat_sfOTq_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPJm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPJn; else goto cfPJo;
       cfPJn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPJo: // global
           _sfOTp::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOTp::P64;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTq_info" {
     sat_sfOTq_info:
         const sat_sfOTq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOTo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPJu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPJv; else goto cfPJw;
       cfPJv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPJw: // global
           _sfOTn::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOTn::P64;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTo_info" {
     sat_sfOTo_info:
         const sat_sfOTo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOTm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPJD; else goto cfPJE;
       cfPJD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPJE: // global
           _sfOTl::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOTl::P64;
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTm_info" {
     sat_sfOTm_info:
         const sat_sfOTm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOTk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPJK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPJL; else goto cfPJM;
       cfPJL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPJM: // global
           _sfOTj::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOTj::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTk_info" {
     sat_sfOTk_info:
         const sat_sfOTk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOTi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPJS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPJT; else goto cfPJU;
       cfPJT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPJU: // global
           _sfOTg::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOTg::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTi_info" {
     sat_sfOTi_info:
         const sat_sfOTi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOTf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPK0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPK1; else goto cfPK2;
       cfPK1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPK2: // global
           _sfOTd::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOTd::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTf_info" {
     sat_sfOTf_info:
         const sat_sfOTf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOTc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPK8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPK9; else goto cfPKa;
       cfPK9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPKa: // global
           _sfOTa::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOTa::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTc_info" {
     sat_sfOTc_info:
         const sat_sfOTc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fNumMin_entry() //  [R2]
         { []
         }
     {offset
       cfPKc: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cfPKg; else goto cfPKf;
       cfPKg: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Semigroup.$fNumMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPKf: // global
           I64[Hp - 168] = sat_sfOTq_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfOTo_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfOTm_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfOTk_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfOTi_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfOTf_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfOTc_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fNumMin_info" {
     Data.Semigroup.$fNumMin_info:
         const Data.Semigroup.$fNumMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.716372614 UTC

[section ""data" . Data.Semigroup.$w$csconcat_closure" {
     Data.Semigroup.$w$csconcat_closure:
         const Data.Semigroup.$w$csconcat_info;
 },
 go_sfOTu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPLq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfPLr; else goto cfPLs;
       cfPLr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPLs: // global
           I64[Sp - 32] = block_cfPLj_info;
           _sfOTu::P64 = R1;
           _sfOTr::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfOTr::P64;
           P64[Sp - 16] = _sfOTu::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufPLC; else goto cfPLk;
       ufPLC: // global
           call _cfPLj(R1) args: 0, res: 0, upd: 0;
       cfPLk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfOTu_info" {
     go_sfOTu_info:
         const go_sfOTu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfPLj() //  [R1]
         { []
         }
     {offset
       cfPLj: // global
           _sfOTv::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfPLn; else goto cfPLo;
       cfPLn: // global
           R1 = _sfOTv::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfPLo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfPLA; else goto cfPLz;
       cfPLA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfPLz: // global
           _sfOTy::P64 = P64[R1 + 6];
           _sfOTz::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfOTy::P64;
           P64[Hp] = _sfOTz::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfOTv::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Classes.max_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPLj_info" {
     block_cfPLj_info:
         const _cfPLj;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPLD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfPLH; else goto cfPLG;
       cfPLH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPLG: // global
           I64[Hp - 8] = go_sfOTu_info;
           P64[Hp] = R2;
           _sfOTs::P64 = R3;
           R3 = R4;
           R2 = _sfOTs::P64;
           R1 = Hp - 6;
           call go_sfOTu_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat_info" {
     Data.Semigroup.$w$csconcat_info:
         const Data.Semigroup.$w$csconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.724769545 UTC

[section ""data" . Data.Semigroup.$fSemigroupMax_$csconcat_closure" {
     Data.Semigroup.$fSemigroupMax_$csconcat_closure:
         const Data.Semigroup.$fSemigroupMax_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupMax_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPM9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPMa; else goto cfPMb;
       cfPMa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMax_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPMb: // global
           I64[Sp - 16] = block_cfPM6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPMf; else goto cfPM7;
       ufPMf: // global
           call _cfPM6(R1) args: 0, res: 0, upd: 0;
       cfPM7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMax_$csconcat_info" {
     Data.Semigroup.$fSemigroupMax_$csconcat_info:
         const Data.Semigroup.$fSemigroupMax_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPM6() //  [R1]
         { []
         }
     {offset
       cfPM6: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPM6_info" {
     block_cfPM6_info:
         const _cfPM6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.730516456 UTC

[section ""data" . lvl2_rfC68_closure" {
     lvl2_rfC68_closure:
         const lvl2_rfC68_info;
         const 0;
 },
 lvl2_rfC68_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPMu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rfC68_info" {
     lvl2_rfC68_info:
         const lvl2_rfC68_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfPCb_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.734633593 UTC

[section ""data" . Data.Semigroup.$fSemigroupMax_closure" {
     Data.Semigroup.$fSemigroupMax_closure:
         const Data.Semigroup.$fSemigroupMax_info;
         const 0;
 },
 sat_sfOTL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPMK: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupMax_$csconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOTL_info" {
     sat_sfOTL_info:
         const sat_sfOTL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOTK_entry() //  [R1]
         { []
         }
     {offset
       cfPMR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPMS; else goto cfPMT;
       cfPMS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfPMT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfOTK_info" {
     sat_sfOTK_info:
         const sat_sfOTK_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupMax_entry() //  [R2]
         { []
         }
     {offset
       cfPMV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfPMZ; else goto cfPMY;
       cfPMZ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPMY: // global
           I64[Hp - 64] = sat_sfOTL_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfOTK_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = lvl2_rfC68_closure+3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupMax_info" {
     Data.Semigroup.$fSemigroupMax_info:
         const Data.Semigroup.$fSemigroupMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.741831456 UTC

[section ""data" . Data.Semigroup.$fFunctorMax2_closure" {
     Data.Semigroup.$fFunctorMax2_closure:
         const Data.Semigroup.$fFunctorMax2_info;
 },
 Data.Semigroup.$fFunctorMax2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPNn: // global
           _sfOTM::P64 = R2;
           R2 = R3;
           R1 = _sfOTM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMax2_info" {
     Data.Semigroup.$fFunctorMax2_info:
         const Data.Semigroup.$fFunctorMax2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.745179443 UTC

[section ""data" . Data.Semigroup.$fFunctorMax1_closure" {
     Data.Semigroup.$fFunctorMax1_closure:
         const Data.Semigroup.$fFunctorMax1_info;
 },
 Data.Semigroup.$fFunctorMax1_entry() //  [R2]
         { []
         }
     {offset
       cfPNy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorMax1_info" {
     Data.Semigroup.$fFunctorMax1_info:
         const Data.Semigroup.$fFunctorMax1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.748218867 UTC

[section ""data" . Data.Semigroup.$fFunctorMax_closure" {
     Data.Semigroup.$fFunctorMax_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorMax2_closure+2;
         const Data.Semigroup.$fFunctorMax1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.750571693 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfPNK: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldMap_info" {
     Data.Semigroup.$fFoldableMax_$cfoldMap_info:
         const Data.Semigroup.$fFoldableMax_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.753862071 UTC

[section ""data" . Data.Semigroup.$fFoldableMax4_closure" {
     Data.Semigroup.$fFoldableMax4_closure:
         const Data.Semigroup.$fFoldableMax4_info;
 },
 Data.Semigroup.$fFoldableMax4_entry() //  [R3]
         { []
         }
     {offset
       cfPNV: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax4_info" {
     Data.Semigroup.$fFoldableMax4_info:
         const Data.Semigroup.$fFoldableMax4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.757563766 UTC

[section ""data" . Data.Semigroup.$fFoldableMax1_closure" {
     Data.Semigroup.$fFoldableMax1_closure:
         const Data.Semigroup.$fFoldableMax1_info;
 },
 Data.Semigroup.$fFoldableMax1_entry() //  [R3]
         { []
         }
     {offset
       cfPO6: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax1_info" {
     Data.Semigroup.$fFoldableMax1_info:
         const Data.Semigroup.$fFoldableMax1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.760674103 UTC

[section ""data" . Data.Semigroup.$fFoldableMax2_closure" {
     Data.Semigroup.$fFoldableMax2_closure:
         const Data.Semigroup.$fFoldableMax2_info;
 },
 Data.Semigroup.$fFoldableMax2_entry() //  [R3]
         { []
         }
     {offset
       cfPOh: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax2_info" {
     Data.Semigroup.$fFoldableMax2_info:
         const Data.Semigroup.$fFoldableMax2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.765182433 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$celem_closure" {
     Data.Semigroup.$fFoldableMax_$celem_closure:
         const Data.Semigroup.$fFoldableMax_$celem_info;
 },
 f_sfOU1_entry() //  [R1]
         { []
         }
     {offset
       cfPOw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfPOx; else goto cfPOy;
       cfPOx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfPOy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfOU1_info" {
     f_sfOU1_info:
         const f_sfOU1_entry;
         const 2;
         const 18;
 },
 sat_sfOU3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPOE: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOU3_info" {
     sat_sfOU3_info:
         const sat_sfOU3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableMax_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPOH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfPOL; else goto cfPOK;
       cfPOL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMax_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPOK: // global
           I64[Hp - 40] = f_sfOU1_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfOU3_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$celem_info" {
     Data.Semigroup.$fFoldableMax_$celem_info:
         const Data.Semigroup.$fFoldableMax_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.771859004 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldl_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldl_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPP8: // global
           _sfOU5::P64 = R3;
           R3 = R4;
           _sfOU4::P64 = R2;
           R2 = _sfOU5::P64;
           R1 = _sfOU4::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldl_info" {
     Data.Semigroup.$fFoldableMax_$cfoldl_info:
         const Data.Semigroup.$fFoldableMax_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.775600054 UTC

[section ""data" . Data.Semigroup.$fFoldableMax3_closure" {
     Data.Semigroup.$fFoldableMax3_closure:
         const Data.Semigroup.$fFoldableMax3_info;
 },
 Data.Semigroup.$fFoldableMax3_entry() //  [R3]
         { []
         }
     {offset
       cfPPj: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax3_info" {
     Data.Semigroup.$fFoldableMax3_info:
         const Data.Semigroup.$fFoldableMax3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.778910711 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableMax_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableMax_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableMax_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPPu: // global
           R3 = R3;
           _sfOU9::P64 = R2;
           R2 = R4;
           R1 = _sfOU9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cfoldr'_info" {
     Data.Semigroup.$fFoldableMax_$cfoldr'_info:
         const Data.Semigroup.$fFoldableMax_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.782235337 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$clength_closure" {
     Data.Semigroup.$fFoldableMax_$clength_closure:
         const Data.Semigroup.$fFoldableMax_$clength_info;
 },
 Data.Semigroup.$fFoldableMax_$clength_entry() //  []
         { []
         }
     {offset
       cfPPF: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$clength_info" {
     Data.Semigroup.$fFoldableMax_$clength_info:
         const Data.Semigroup.$fFoldableMax_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.786379098 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$cnull_closure" {
     Data.Semigroup.$fFoldableMax_$cnull_closure:
         const Data.Semigroup.$fFoldableMax_$cnull_info;
 },
 Data.Semigroup.$fFoldableMax_$cnull_entry() //  []
         { []
         }
     {offset
       cfPPR: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$cnull_info" {
     Data.Semigroup.$fFoldableMax_$cnull_info:
         const Data.Semigroup.$fFoldableMax_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.789944013 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_$ctoList_closure" {
     Data.Semigroup.$fFoldableMax_$ctoList_closure:
         const Data.Semigroup.$fFoldableMax_$ctoList_info;
 },
 Data.Semigroup.$fFoldableMax_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfPQ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfPQ9; else goto cfPQ8;
       cfPQ9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableMax_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPQ8: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableMax_$ctoList_info" {
     Data.Semigroup.$fFoldableMax_$ctoList_info:
         const Data.Semigroup.$fFoldableMax_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.793397133 UTC

[section ""data" . Data.Semigroup.$fFoldableMax_closure" {
     Data.Semigroup.$fFoldableMax_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableMax4_closure+2;
         const Data.Semigroup.$fFoldableMax_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMax_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableMax3_closure+2;
         const Data.Semigroup.$fFoldableMax3_closure+2;
         const Data.Semigroup.$fFoldableMax_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableMax_$cnull_closure+1;
         const Data.Semigroup.$fFoldableMax_$clength_closure+1;
         const Data.Semigroup.$fFoldableMax_$celem_closure+2;
         const Data.Semigroup.$fFoldableMax2_closure+2;
         const Data.Semigroup.$fFoldableMax2_closure+2;
         const Data.Semigroup.$fFoldableMax1_closure+2;
         const Data.Semigroup.$fFoldableMax1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.796053784 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$ctraverse_closure" {
     Data.Semigroup.$fTraversableMax_$ctraverse_closure:
         const Data.Semigroup.$fTraversableMax_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableMax_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPQq: // global
           _sfOUh::P64 = R4;
           _sfOUg::P64 = R3;
           _sfOUf::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfPQr; else goto cfPQs;
       cfPQs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfPQu; else goto cfPQt;
       cfPQu: // global
           HpAlloc = 32;
           goto cfPQr;
       cfPQr: // global
           R4 = _sfOUh::P64;
           R3 = _sfOUg::P64;
           R2 = _sfOUf::P64;
           R1 = Data.Semigroup.$fTraversableMax_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPQt: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfOUg::P64;
           P64[Hp] = _sfOUh::P64;
           I64[Sp - 16] = block_cfPQo_info;
           R2 = _sfOUf::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$ctraverse_info" {
     Data.Semigroup.$fTraversableMax_$ctraverse_info:
         const Data.Semigroup.$fTraversableMax_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPQo() //  [R1]
         { []
         }
     {offset
       cfPQo: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPQo_info" {
     block_cfPQo_info:
         const _cfPQo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.801802934 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$csequenceA_closure" {
     Data.Semigroup.$fTraversableMax_$csequenceA_closure:
         const Data.Semigroup.$fTraversableMax_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableMax_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPQR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPQS; else goto cfPQT;
       cfPQS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMax_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPQT: // global
           I64[Sp - 16] = block_cfPQP_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$csequenceA_info" {
     Data.Semigroup.$fTraversableMax_$csequenceA_info:
         const Data.Semigroup.$fTraversableMax_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPQP() //  [R1]
         { []
         }
     {offset
       cfPQP: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPQP_info" {
     block_cfPQP_info:
         const _cfPQP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.807385806 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$cmapM_closure" {
     Data.Semigroup.$fTraversableMax_$cmapM_closure:
         const Data.Semigroup.$fTraversableMax_$cmapM_info;
 },
 Data.Semigroup.$fTraversableMax_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPRf: // global
           _sfOUp::P64 = R4;
           _sfOUo::P64 = R3;
           _sfOUn::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfPRj; else goto cfPRk;
       cfPRk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfPRm; else goto cfPRl;
       cfPRm: // global
           HpAlloc = 32;
           goto cfPRj;
       cfPRj: // global
           R4 = _sfOUp::P64;
           R3 = _sfOUo::P64;
           R2 = _sfOUn::P64;
           R1 = Data.Semigroup.$fTraversableMax_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPRl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfOUo::P64;
           P64[Hp] = _sfOUp::P64;
           I64[Sp - 16] = block_cfPRd_info;
           R2 = _sfOUn::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$cmapM_info" {
     Data.Semigroup.$fTraversableMax_$cmapM_info:
         const Data.Semigroup.$fTraversableMax_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPRd() //  [R1]
         { []
         }
     {offset
       cfPRd: // global
           I64[Sp] = block_cfPRi_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPRd_info" {
     block_cfPRd_info:
         const _cfPRd;
         const 1;
         const 30;
 },
 _cfPRi() //  [R1]
         { []
         }
     {offset
       cfPRi: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPRi_info" {
     block_cfPRi_info:
         const _cfPRi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.814683894 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_$csequence_closure" {
     Data.Semigroup.$fTraversableMax_$csequence_closure:
         const Data.Semigroup.$fTraversableMax_$csequence_info;
 },
 Data.Semigroup.$fTraversableMax_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPRP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPRT; else goto cfPRU;
       cfPRT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableMax_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPRU: // global
           I64[Sp - 16] = block_cfPRN_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableMax_$csequence_info" {
     Data.Semigroup.$fTraversableMax_$csequence_info:
         const Data.Semigroup.$fTraversableMax_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPRN() //  [R1]
         { []
         }
     {offset
       cfPRN: // global
           I64[Sp] = block_cfPRS_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPRN_info" {
     block_cfPRN_info:
         const _cfPRN;
         const 1;
         const 30;
 },
 _cfPRS() //  [R1]
         { []
         }
     {offset
       cfPRS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPRS_info" {
     block_cfPRS_info:
         const _cfPRS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.821422861 UTC

[section ""data" . Data.Semigroup.$fTraversableMax_closure" {
     Data.Semigroup.$fTraversableMax_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorMax_closure+1;
         const Data.Semigroup.$fFoldableMax_closure+1;
         const Data.Semigroup.$fTraversableMax_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableMax_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableMax_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableMax_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.823510663 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_$c<*_closure" {
     Data.Semigroup.$fApplicativeMax_$c<*_closure:
         const Data.Semigroup.$fApplicativeMax_$c<*_info;
 },
 Data.Semigroup.$fApplicativeMax_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfPSk: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax_$c<*_info" {
     Data.Semigroup.$fApplicativeMax_$c<*_info:
         const Data.Semigroup.$fApplicativeMax_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.826812403 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_$c*>_closure" {
     Data.Semigroup.$fApplicativeMax_$c*>_closure:
         const Data.Semigroup.$fApplicativeMax_$c*>_info;
 },
 Data.Semigroup.$fApplicativeMax_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfPSv: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax_$c*>_info" {
     Data.Semigroup.$fApplicativeMax_$c*>_info:
         const Data.Semigroup.$fApplicativeMax_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.830433103 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax1_closure" {
     Data.Semigroup.$fApplicativeMax1_closure:
         const Data.Semigroup.$fApplicativeMax1_info;
 },
 Data.Semigroup.$fApplicativeMax1_entry() //  [R2]
         { []
         }
     {offset
       cfPSG: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeMax1_info" {
     Data.Semigroup.$fApplicativeMax1_info:
         const Data.Semigroup.$fApplicativeMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.833532618 UTC

[section ""data" . Data.Semigroup.$fApplicativeMax_closure" {
     Data.Semigroup.$fApplicativeMax_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorMax_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeMax1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeMax_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeMax_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.835585153 UTC

[section ""data" . Data.Semigroup.$fMonadMax_$c>>=_closure" {
     Data.Semigroup.$fMonadMax_$c>>=_closure:
         const Data.Semigroup.$fMonadMax_$c>>=_info;
 },
 Data.Semigroup.$fMonadMax_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPSS: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadMax_$c>>=_info" {
     Data.Semigroup.$fMonadMax_$c>>=_info:
         const Data.Semigroup.$fMonadMax_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.838954746 UTC

[section ""data" . lvl3_rfC69_closure" {
     lvl3_rfC69_closure:
         const lvl3_rfC69_info;
         const 0;
 },
 lvl3_rfC69_entry() //  [R2]
         { []
         }
     {offset
       cfPT3: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rfC69_info" {
     lvl3_rfC69_info:
         const lvl3_rfC69_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.842064545 UTC

[section ""data" . Data.Semigroup.$fMonadMax_closure" {
     Data.Semigroup.$fMonadMax_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeMax_closure+1;
         const Data.Semigroup.$fMonadMax_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeMax_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl3_rfC69_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.847697357 UTC

[section ""data" . Data.Semigroup.$fNumMax_closure" {
     Data.Semigroup.$fNumMax_closure:
         const Data.Semigroup.$fNumMax_info;
 },
 sat_sfOUW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPTk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPTl; else goto cfPTm;
       cfPTl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPTm: // global
           _sfOUV::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOUV::P64;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUW_info" {
     sat_sfOUW_info:
         const sat_sfOUW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOUU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPTs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPTt; else goto cfPTu;
       cfPTt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPTu: // global
           _sfOUT::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOUT::P64;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUU_info" {
     sat_sfOUU_info:
         const sat_sfOUU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOUS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPTA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPTB; else goto cfPTC;
       cfPTB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPTC: // global
           _sfOUR::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOUR::P64;
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUS_info" {
     sat_sfOUS_info:
         const sat_sfOUS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOUQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPTI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPTJ; else goto cfPTK;
       cfPTJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPTK: // global
           _sfOUP::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfOUP::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUQ_info" {
     sat_sfOUQ_info:
         const sat_sfOUQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfOUO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPTQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPTR; else goto cfPTS;
       cfPTR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPTS: // global
           _sfOUM::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOUM::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUO_info" {
     sat_sfOUO_info:
         const sat_sfOUO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOUL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPTY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPTZ; else goto cfPU0;
       cfPTZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPU0: // global
           _sfOUJ::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOUJ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUL_info" {
     sat_sfOUL_info:
         const sat_sfOUL_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOUI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfPU6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPU7; else goto cfPU8;
       cfPU7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPU8: // global
           _sfOUG::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfOUG::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOUI_info" {
     sat_sfOUI_info:
         const sat_sfOUI_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fNumMax_entry() //  [R2]
         { []
         }
     {offset
       cfPUa: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cfPUe; else goto cfPUd;
       cfPUe: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = Data.Semigroup.$fNumMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPUd: // global
           I64[Hp - 168] = sat_sfOUW_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfOUU_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfOUS_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfOUQ_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfOUO_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfOUL_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfOUI_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fNumMax_info" {
     Data.Semigroup.$fNumMax_info:
         const Data.Semigroup.$fNumMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.864518702 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_$cfmap_closure" {
     Data.Semigroup.$fFunctorArg_$cfmap_closure:
         const Data.Semigroup.$fFunctorArg_$cfmap_info;
 },
 Data.Semigroup.$fFunctorArg_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPVk; else goto cfPVl;
       cfPVk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorArg_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPVl: // global
           I64[Sp - 16] = block_cfPVc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPVp; else goto cfPVd;
       ufPVp: // global
           call _cfPVc(R1) args: 0, res: 0, upd: 0;
       cfPVd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorArg_$cfmap_info" {
     Data.Semigroup.$fFunctorArg_$cfmap_info:
         const Data.Semigroup.$fFunctorArg_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPVc() //  [R1]
         { []
         }
     {offset
       cfPVc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfPVo; else goto cfPVn;
       cfPVo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfPVn: // global
           _sfOV0::P64 = P64[R1 + 7];
           _sfOV1::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfOV1::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOV0::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPVc_info" {
     block_cfPVc_info:
         const _cfPVc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.870685976 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_$c<$_closure" {
     Data.Semigroup.$fFunctorArg_$c<$_closure:
         const Data.Semigroup.$fFunctorArg_$c<$_info;
 },
 Data.Semigroup.$fFunctorArg_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPVQ; else goto cfPVR;
       cfPVQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorArg_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPVR: // global
           I64[Sp - 16] = block_cfPVJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPVV; else goto cfPVK;
       ufPVV: // global
           call _cfPVJ(R1) args: 0, res: 0, upd: 0;
       cfPVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorArg_$c<$_info" {
     Data.Semigroup.$fFunctorArg_$c<$_info:
         const Data.Semigroup.$fFunctorArg_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPVJ() //  [R1]
         { []
         }
     {offset
       cfPVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfPVU; else goto cfPVT;
       cfPVU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfPVT: // global
           _sfOV6::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOV6::P64;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPVJ_info" {
     block_cfPVJ_info:
         const _cfPVJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.875584166 UTC

[section ""data" . Data.Semigroup.$fFunctorArg_closure" {
     Data.Semigroup.$fFunctorArg_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorArg_$cfmap_closure+2;
         const Data.Semigroup.$fFunctorArg_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.878114955 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPWh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPWi; else goto cfPWj;
       cfPWi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPWj: // global
           I64[Sp - 16] = block_cfPWe_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPWn; else goto cfPWf;
       ufPWn: // global
           call _cfPWe(R1) args: 0, res: 0, upd: 0;
       cfPWf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldMap_info" {
     Data.Semigroup.$fFoldableArg_$cfoldMap_info:
         const Data.Semigroup.$fFoldableArg_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPWe() //  [R1]
         { []
         }
     {offset
       cfPWe: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPWe_info" {
     block_cfPWe_info:
         const _cfPWe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.88361002 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfold_closure" {
     Data.Semigroup.$fFoldableArg_$cfold_closure:
         const Data.Semigroup.$fFoldableArg_$cfold_info;
 },
 Data.Semigroup.$fFoldableArg_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPWF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfPWG; else goto cfPWH;
       cfPWG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPWH: // global
           I64[Sp - 8] = block_cfPWC_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufPWL; else goto cfPWD;
       ufPWL: // global
           call _cfPWC(R1) args: 0, res: 0, upd: 0;
       cfPWD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfold_info" {
     Data.Semigroup.$fFoldableArg_$cfold_info:
         const Data.Semigroup.$fFoldableArg_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPWC() //  [R1]
         { []
         }
     {offset
       cfPWC: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPWC_info" {
     block_cfPWC_info:
         const _cfPWC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.889484056 UTC

[section ""data" . Data.Semigroup.$fFoldableArg2_closure" {
     Data.Semigroup.$fFoldableArg2_closure:
         const Data.Semigroup.$fFoldableArg2_info;
 },
 Data.Semigroup.$fFoldableArg2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPX3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfPX4; else goto cfPX5;
       cfPX4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPX5: // global
           I64[Sp - 8] = block_cfPX0_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufPX9; else goto cfPX1;
       ufPX9: // global
           call _cfPX0(R1) args: 0, res: 0, upd: 0;
       cfPX1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg2_info" {
     Data.Semigroup.$fFoldableArg2_info:
         const Data.Semigroup.$fFoldableArg2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPX0() //  [R1]
         { []
         }
     {offset
       cfPX0: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPX0_info" {
     block_cfPX0_info:
         const _cfPX0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.894802933 UTC

[section ""data" . Data.Semigroup.$fFoldableArg3_closure" {
     Data.Semigroup.$fFoldableArg3_closure:
         const Data.Semigroup.$fFoldableArg3_info;
 },
 Data.Semigroup.$fFoldableArg3_entry() //  [R2]
         { []
         }
     {offset
       cfPXr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfPXs; else goto cfPXt;
       cfPXs: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPXt: // global
           I64[Sp - 8] = block_cfPXo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufPXx; else goto cfPXp;
       ufPXx: // global
           call _cfPXo(R1) args: 0, res: 0, upd: 0;
       cfPXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg3_info" {
     Data.Semigroup.$fFoldableArg3_info:
         const Data.Semigroup.$fFoldableArg3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfPXo() //  [R1]
         { []
         }
     {offset
       cfPXo: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPXo_info" {
     block_cfPXo_info:
         const _cfPXo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.899954287 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cminimum_closure" {
     Data.Semigroup.$fFoldableArg_$cminimum_closure:
         const Data.Semigroup.$fFoldableArg_$cminimum_info;
 },
 Data.Semigroup.$fFoldableArg_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       cfPXM: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableArg3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cminimum_info" {
     Data.Semigroup.$fFoldableArg_$cminimum_info:
         const Data.Semigroup.$fFoldableArg_$cminimum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.904376392 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$celem_closure" {
     Data.Semigroup.$fFoldableArg_$celem_closure:
         const Data.Semigroup.$fFoldableArg_$celem_info;
 },
 f_sfOVv_entry() //  [R1]
         { []
         }
     {offset
       cfPY1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfPY2; else goto cfPY3;
       cfPY2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfPY3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfOVv_info" {
     f_sfOVv_info:
         const f_sfOVv_entry;
         const 2;
         const 18;
 },
 sat_sfOVA_entry() //  [R1, R2]
         { []
         }
     {offset
       cfPYc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfPYd; else goto cfPYe;
       cfPYd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfPYe: // global
           I64[Sp - 16] = block_cfPY9_info;
           _sfOVv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sfOVv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufPYi; else goto cfPYa;
       ufPYi: // global
           call _cfPY9(R1) args: 0, res: 0, upd: 0;
       cfPYa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOVA_info" {
     sat_sfOVA_info:
         const sat_sfOVA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfPY9() //  [R1]
         { []
         }
     {offset
       cfPY9: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPY9_info" {
     block_cfPY9_info:
         const _cfPY9;
         const 1;
         const 30;
 },
 Data.Semigroup.$fFoldableArg_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPYj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfPYn; else goto cfPYm;
       cfPYn: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPYm: // global
           I64[Hp - 40] = f_sfOVv_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfOVA_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$celem_info" {
     Data.Semigroup.$fFoldableArg_$celem_info:
         const Data.Semigroup.$fFoldableArg_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.913534677 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldl_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldl_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPYT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPYU; else goto cfPYV;
       cfPYU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPYV: // global
           I64[Sp - 24] = block_cfPYQ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufPYZ; else goto cfPYR;
       ufPYZ: // global
           call _cfPYQ(R1) args: 0, res: 0, upd: 0;
       cfPYR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldl_info" {
     Data.Semigroup.$fFoldableArg_$cfoldl_info:
         const Data.Semigroup.$fFoldableArg_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPYQ() //  [R1]
         { []
         }
     {offset
       cfPYQ: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPYQ_info" {
     block_cfPYQ_info:
         const _cfPYQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.918845569 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldl1_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldl1_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldl1_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfPZh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfPZi; else goto cfPZj;
       cfPZi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPZj: // global
           I64[Sp - 8] = block_cfPZe_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufPZn; else goto cfPZf;
       ufPZn: // global
           call _cfPZe(R1) args: 0, res: 0, upd: 0;
       cfPZf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldl1_info" {
     Data.Semigroup.$fFoldableArg_$cfoldl1_info:
         const Data.Semigroup.$fFoldableArg_$cfoldl1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfPZe() //  [R1]
         { []
         }
     {offset
       cfPZe: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPZe_info" {
     block_cfPZe_info:
         const _cfPZe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.924794322 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableArg_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableArg_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableArg_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfPZF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfPZG; else goto cfPZH;
       cfPZG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfPZH: // global
           I64[Sp - 24] = block_cfPZC_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufPZL; else goto cfPZD;
       ufPZL: // global
           call _cfPZC(R1) args: 0, res: 0, upd: 0;
       cfPZD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cfoldr'_info" {
     Data.Semigroup.$fFoldableArg_$cfoldr'_info:
         const Data.Semigroup.$fFoldableArg_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfPZC() //  [R1]
         { []
         }
     {offset
       cfPZC: // global
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfPZC_info" {
     block_cfPZC_info:
         const _cfPZC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.930461037 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$clength_closure" {
     Data.Semigroup.$fFoldableArg_$clength_closure:
         const Data.Semigroup.$fFoldableArg_$clength_info;
 },
 Data.Semigroup.$fFoldableArg_$clength_entry() //  [R2]
         { []
         }
     {offset
       cfQ03: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQ04; else goto cfQ05;
       cfQ04: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ05: // global
           I64[Sp - 8] = block_cfQ00_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ09; else goto cfQ01;
       ufQ09: // global
           call _cfQ00() args: 0, res: 0, upd: 0;
       cfQ01: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$clength_info" {
     Data.Semigroup.$fFoldableArg_$clength_info:
         const Data.Semigroup.$fFoldableArg_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQ00() //  []
         { []
         }
     {offset
       cfQ00: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ00_info" {
     block_cfQ00_info:
         const _cfQ00;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.935712675 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$cnull_closure" {
     Data.Semigroup.$fFoldableArg_$cnull_closure:
         const Data.Semigroup.$fFoldableArg_$cnull_info;
 },
 Data.Semigroup.$fFoldableArg_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cfQ0s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQ0t; else goto cfQ0u;
       cfQ0t: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ0u: // global
           I64[Sp - 8] = block_cfQ0p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ0y; else goto cfQ0q;
       ufQ0y: // global
           call _cfQ0p() args: 0, res: 0, upd: 0;
       cfQ0q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$cnull_info" {
     Data.Semigroup.$fFoldableArg_$cnull_info:
         const Data.Semigroup.$fFoldableArg_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQ0p() //  []
         { []
         }
     {offset
       cfQ0p: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ0p_info" {
     block_cfQ0p_info:
         const _cfQ0p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.940931796 UTC

[section ""data" . Data.Semigroup.$fFoldableArg1_closure" {
     Data.Semigroup.$fFoldableArg1_closure:
         const Data.Semigroup.$fFoldableArg1_info;
 },
 Data.Semigroup.$fFoldableArg1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQ0S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQ0T; else goto cfQ0U;
       cfQ0T: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ0U: // global
           I64[Sp - 8] = block_cfQ0P_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ0Y; else goto cfQ0Q;
       ufQ0Y: // global
           call _cfQ0P(R1) args: 0, res: 0, upd: 0;
       cfQ0Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg1_info" {
     Data.Semigroup.$fFoldableArg1_info:
         const Data.Semigroup.$fFoldableArg1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQ0P() //  [R1]
         { []
         }
     {offset
       cfQ0P: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ0P_info" {
     block_cfQ0P_info:
         const _cfQ0P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.946808387 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_$ctoList_closure" {
     Data.Semigroup.$fFoldableArg_$ctoList_closure:
         const Data.Semigroup.$fFoldableArg_$ctoList_info;
 },
 Data.Semigroup.$fFoldableArg_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfQ1g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQ1k; else goto cfQ1l;
       cfQ1k: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableArg_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ1l: // global
           I64[Sp - 8] = block_cfQ1d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ1p; else goto cfQ1e;
       ufQ1p: // global
           call _cfQ1d(R1) args: 0, res: 0, upd: 0;
       cfQ1e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableArg_$ctoList_info" {
     Data.Semigroup.$fFoldableArg_$ctoList_info:
         const Data.Semigroup.$fFoldableArg_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQ1d() //  [R1]
         { []
         }
     {offset
       cfQ1d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQ1o; else goto cfQ1n;
       cfQ1o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQ1n: // global
           _sfOW8::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfOW8::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ1d_info" {
     block_cfQ1d_info:
         const _cfQ1d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.951897538 UTC

[section ""data" . Data.Semigroup.$fFoldableArg_closure" {
     Data.Semigroup.$fFoldableArg_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableArg_$cfold_closure+2;
         const Data.Semigroup.$fFoldableArg_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableArg_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableArg_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableArg_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableArg_$cnull_closure+1;
         const Data.Semigroup.$fFoldableArg_$clength_closure+1;
         const Data.Semigroup.$fFoldableArg_$celem_closure+2;
         const Data.Semigroup.$fFoldableArg_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableArg_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableArg2_closure+2;
         const Data.Semigroup.$fFoldableArg1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.955955866 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$ctraverse_closure" {
     Data.Semigroup.$fTraversableArg_$ctraverse_closure:
         const Data.Semigroup.$fTraversableArg_$ctraverse_info;
 },
 sat_sfOWg_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQ1V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQ1Z; else goto cfQ1Y;
       cfQ1Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ1Y: // global
           _sfOWd::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOWd::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOWg_info" {
     sat_sfOWg_info:
         const sat_sfOWg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$ctraverse_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ20: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQ22; else goto cfQ23;
       cfQ22: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ23: // global
           I64[Sp - 24] = block_cfQ1J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ2b; else goto cfQ1K;
       ufQ2b: // global
           call _cfQ1J(R1) args: 0, res: 0, upd: 0;
       cfQ1K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$ctraverse_info" {
     Data.Semigroup.$fTraversableArg_$ctraverse_info:
         const Data.Semigroup.$fTraversableArg_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ1J() //  [R1]
         { []
         }
     {offset
       cfQ1J: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQ26; else goto cfQ25;
       cfQ26: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQ25: // global
           _sfOWd::P64 = P64[R1 + 7];
           _sfOWe::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sfOWe::P64;
           I64[Hp - 8] = sat_sfOWg_info;
           P64[Hp] = _sfOWd::P64;
           I64[Sp] = block_cfQ21_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ1J_info" {
     block_cfQ1J_info:
         const _cfQ1J;
         const 2;
         const 30;
 },
 _cfQ21() //  [R1]
         { []
         }
     {offset
       cfQ21: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ21_info" {
     block_cfQ21_info:
         const _cfQ21;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.966578486 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$csequenceA_closure" {
     Data.Semigroup.$fTraversableArg_$csequenceA_closure:
         const Data.Semigroup.$fTraversableArg_$csequenceA_info;
 },
 sat_sfOWo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQ2Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQ2U; else goto cfQ2T;
       cfQ2U: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ2T: // global
           _sfOWl::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOWl::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOWo_info" {
     sat_sfOWo_info:
         const sat_sfOWo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQ2V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQ2X; else goto cfQ2Y;
       cfQ2X: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ2Y: // global
           I64[Sp - 16] = block_cfQ2F_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQ36; else goto cfQ2G;
       ufQ36: // global
           call _cfQ2F(R1) args: 0, res: 0, upd: 0;
       cfQ2G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$csequenceA_info" {
     Data.Semigroup.$fTraversableArg_$csequenceA_info:
         const Data.Semigroup.$fTraversableArg_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQ2F() //  [R1]
         { []
         }
     {offset
       cfQ2F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfQ31; else goto cfQ30;
       cfQ31: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQ30: // global
           _sfOWl::P64 = P64[R1 + 7];
           _sfOWm::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfOWo_info;
           P64[Hp] = _sfOWl::P64;
           I64[Sp - 8] = block_cfQ2W_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sfOWm::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ2F_info" {
     block_cfQ2F_info:
         const _cfQ2F;
         const 1;
         const 30;
 },
 _cfQ2W() //  [R1]
         { []
         }
     {offset
       cfQ2W: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfOWm::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfOWm::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ2W_info" {
     block_cfQ2W_info:
         const _cfQ2W;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.976311674 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$cmapM_closure" {
     Data.Semigroup.$fTraversableArg_$cmapM_closure:
         const Data.Semigroup.$fTraversableArg_$cmapM_info;
 },
 sat_sfOWx_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQ3K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQ3O; else goto cfQ3N;
       cfQ3O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ3N: // global
           _sfOWt::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOWt::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOWx_info" {
     sat_sfOWx_info:
         const sat_sfOWx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ3P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQ3V; else goto cfQ3W;
       cfQ3V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ3W: // global
           I64[Sp - 24] = block_cfQ3y_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ45; else goto cfQ3z;
       ufQ45: // global
           call _cfQ3y(R1) args: 0, res: 0, upd: 0;
       cfQ3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$cmapM_info" {
     Data.Semigroup.$fTraversableArg_$cmapM_info:
         const Data.Semigroup.$fTraversableArg_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ3y() //  [R1]
         { []
         }
     {offset
       cfQ3y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQ3Z; else goto cfQ3Y;
       cfQ3Z: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQ3Y: // global
           _sfOWt::P64 = P64[R1 + 7];
           _sfOWu::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = _sfOWu::P64;
           I64[Hp - 8] = sat_sfOWx_info;
           P64[Hp] = _sfOWt::P64;
           I64[Sp] = block_cfQ3Q_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 7;
           P64[Sp + 16] = Hp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ3y_info" {
     block_cfQ3y_info:
         const _cfQ3y;
         const 2;
         const 30;
 },
 _cfQ3Q() //  [R1]
         { []
         }
     {offset
       cfQ3Q: // global
           I64[Sp] = block_cfQ3U_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ3Q_info" {
     block_cfQ3Q_info:
         const _cfQ3Q;
         const 2;
         const 30;
 },
 _cfQ3U() //  [R1]
         { []
         }
     {offset
       cfQ3U: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ3U_info" {
     block_cfQ3U_info:
         const _cfQ3U;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.98780196 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_$csequence_closure" {
     Data.Semigroup.$fTraversableArg_$csequence_closure:
         const Data.Semigroup.$fTraversableArg_$csequence_info;
 },
 sat_sfOWG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQ4O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQ4S; else goto cfQ4R;
       cfQ4S: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ4R: // global
           _sfOWC::P64 = P64[R1 + 7];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOWC::P64;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOWG_info" {
     sat_sfOWG_info:
         const sat_sfOWG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fTraversableArg_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQ4T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQ4Z; else goto cfQ50;
       cfQ4Z: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableArg_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ50: // global
           I64[Sp - 16] = block_cfQ4D_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQ59; else goto cfQ4E;
       ufQ59: // global
           call _cfQ4D(R1) args: 0, res: 0, upd: 0;
       cfQ4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableArg_$csequence_info" {
     Data.Semigroup.$fTraversableArg_$csequence_info:
         const Data.Semigroup.$fTraversableArg_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQ4D() //  [R1]
         { []
         }
     {offset
       cfQ4D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfQ53; else goto cfQ52;
       cfQ53: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQ52: // global
           _sfOWC::P64 = P64[R1 + 7];
           _sfOWD::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfOWG_info;
           P64[Hp] = _sfOWC::P64;
           I64[Sp - 8] = block_cfQ4U_info;
           R2 = P64[Sp + 8];
           P64[Sp] = _sfOWD::P64;
           P64[Sp + 8] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ4D_info" {
     block_cfQ4D_info:
         const _cfQ4D;
         const 1;
         const 30;
 },
 _cfQ4U() //  [R1]
         { []
         }
     {offset
       cfQ4U: // global
           I64[Sp] = block_cfQ4Y_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ4U_info" {
     block_cfQ4U_info:
         const _cfQ4U;
         const 2;
         const 30;
 },
 _cfQ4Y() //  [R1]
         { []
         }
     {offset
       cfQ4Y: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfOWD::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfOWD::P64;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ4Y_info" {
     block_cfQ4Y_info:
         const _cfQ4Y;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:40.998052576 UTC

[section ""data" . Data.Semigroup.$fTraversableArg_closure" {
     Data.Semigroup.$fTraversableArg_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorArg_closure+1;
         const Data.Semigroup.$fFoldableArg_closure+1;
         const Data.Semigroup.$fTraversableArg_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableArg_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableArg_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableArg_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.000854483 UTC

[section ""data" . Data.Semigroup.$fEqArg_$c==_closure" {
     Data.Semigroup.$fEqArg_$c==_closure:
         const Data.Semigroup.$fEqArg_$c==_info;
 },
 Data.Semigroup.$fEqArg_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ5J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQ5N; else goto cfQ5O;
       cfQ5N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ5O: // global
           I64[Sp - 24] = block_cfQ5G_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ5W; else goto cfQ5H;
       ufQ5W: // global
           call _cfQ5G(R1) args: 0, res: 0, upd: 0;
       cfQ5H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_$c==_info" {
     Data.Semigroup.$fEqArg_$c==_info:
         const Data.Semigroup.$fEqArg_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ5G() //  [R1]
         { []
         }
     {offset
       cfQ5G: // global
           I64[Sp] = block_cfQ5M_info;
           _sfOWL::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOWL::P64;
           if (R1 & 7 != 0) goto ufQ5V; else goto cfQ5Q;
       ufQ5V: // global
           call _cfQ5M(R1) args: 0, res: 0, upd: 0;
       cfQ5Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ5G_info" {
     block_cfQ5G_info:
         const _cfQ5G;
         const 2;
         const 30;
 },
 _cfQ5M() //  [R1]
         { []
         }
     {offset
       cfQ5M: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ5M_info" {
     block_cfQ5M_info:
         const _cfQ5M;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.008340424 UTC

[section ""data" . Data.Semigroup.$fEqArg_$c/=_closure" {
     Data.Semigroup.$fEqArg_$c/=_closure:
         const Data.Semigroup.$fEqArg_$c/=_info;
 },
 Data.Semigroup.$fEqArg_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ6m: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQ6q; else goto cfQ6r;
       cfQ6q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ6r: // global
           I64[Sp - 24] = block_cfQ6j_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ6L; else goto cfQ6k;
       ufQ6L: // global
           call _cfQ6j(R1) args: 0, res: 0, upd: 0;
       cfQ6k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_$c/=_info" {
     Data.Semigroup.$fEqArg_$c/=_info:
         const Data.Semigroup.$fEqArg_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ6j() //  [R1]
         { []
         }
     {offset
       cfQ6j: // global
           I64[Sp] = block_cfQ6p_info;
           _sfOWU::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOWU::P64;
           if (R1 & 7 != 0) goto ufQ6K; else goto cfQ6t;
       ufQ6K: // global
           call _cfQ6p(R1) args: 0, res: 0, upd: 0;
       cfQ6t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ6j_info" {
     block_cfQ6j_info:
         const _cfQ6j;
         const 2;
         const 30;
 },
 _cfQ6p() //  [R1]
         { []
         }
     {offset
       cfQ6p: // global
           _sfOWU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfQ6x_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfOWU::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ6p_info" {
     block_cfQ6p_info:
         const _cfQ6p;
         const 2;
         const 30;
 },
 _cfQ6x() //  [R1]
         { []
         }
     {offset
       cfQ6x: // global
           if (R1 & 7 == 1) goto cfQ6E; else goto cfQ6I;
       cfQ6E: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQ6I: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ6x_info" {
     block_cfQ6x_info:
         const _cfQ6x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.017500691 UTC

[section ""data" . Data.Semigroup.$fEqArg_closure" {
     Data.Semigroup.$fEqArg_closure:
         const Data.Semigroup.$fEqArg_info;
 },
 sat_sfOX2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQ7m: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fEqArg_$c/=_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOX2_info" {
     sat_sfOX2_info:
         const sat_sfOX2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOX1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQ7u: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fEqArg_$c==_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOX1_info" {
     sat_sfOX1_info:
         const sat_sfOX1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fEqArg_entry() //  [R2]
         { []
         }
     {offset
       cfQ7y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfQ7C; else goto cfQ7B;
       cfQ7C: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fEqArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQ7B: // global
           I64[Hp - 48] = sat_sfOX2_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfOX1_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqArg_info" {
     Data.Semigroup.$fEqArg_info:
         const Data.Semigroup.$fEqArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.025492601 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cmin_closure" {
     Data.Semigroup.$fOrdArg_$cmin_closure:
         const Data.Semigroup.$fOrdArg_$cmin_info;
 },
 Data.Semigroup.$fOrdArg_$cmin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ80: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfQ84; else goto cfQ85;
       cfQ84: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ85: // global
           I64[Sp - 24] = block_cfQ7X_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ8p; else goto cfQ7Y;
       ufQ8p: // global
           call _cfQ7X(R1) args: 0, res: 0, upd: 0;
       cfQ7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cmin_info" {
     Data.Semigroup.$fOrdArg_$cmin_info:
         const Data.Semigroup.$fOrdArg_$cmin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ7X() //  [R1]
         { []
         }
     {offset
       cfQ7X: // global
           I64[Sp - 8] = block_cfQ83_info;
           _sfOX6::P64 = R1;
           _sfOX7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfOX7::P64;
           P64[Sp + 16] = _sfOX6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ8o; else goto cfQ87;
       ufQ8o: // global
           call _cfQ83(R1) args: 0, res: 0, upd: 0;
       cfQ87: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ7X_info" {
     block_cfQ7X_info:
         const _cfQ7X;
         const 2;
         const 30;
 },
 _cfQ83() //  [R1]
         { []
         }
     {offset
       cfQ83: // global
           _sfOX7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfQ8b_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sfOX7::P64;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ83_info" {
     block_cfQ83_info:
         const _cfQ83;
         const 3;
         const 30;
 },
 _cfQ8b() //  [R1]
         { []
         }
     {offset
       cfQ8b: // global
           if (R1 & 7 == 1) goto cfQ8i; else goto cfQ8m;
       cfQ8i: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfQ8m: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ8b_info" {
     block_cfQ8b_info:
         const _cfQ8b;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.035561739 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cmax_closure" {
     Data.Semigroup.$fOrdArg_$cmax_closure:
         const Data.Semigroup.$fOrdArg_$cmax_info;
 },
 Data.Semigroup.$fOrdArg_$cmax_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ8Y: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfQ92; else goto cfQ93;
       cfQ92: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQ93: // global
           I64[Sp - 24] = block_cfQ8V_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQ9n; else goto cfQ8W;
       ufQ9n: // global
           call _cfQ8V(R1) args: 0, res: 0, upd: 0;
       cfQ8W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cmax_info" {
     Data.Semigroup.$fOrdArg_$cmax_info:
         const Data.Semigroup.$fOrdArg_$cmax_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ8V() //  [R1]
         { []
         }
     {offset
       cfQ8V: // global
           I64[Sp - 8] = block_cfQ91_info;
           _sfOXg::P64 = R1;
           _sfOXh::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfOXh::P64;
           P64[Sp + 16] = _sfOXg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQ9m; else goto cfQ95;
       ufQ9m: // global
           call _cfQ91(R1) args: 0, res: 0, upd: 0;
       cfQ95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ8V_info" {
     block_cfQ8V_info:
         const _cfQ8V;
         const 2;
         const 30;
 },
 _cfQ91() //  [R1]
         { []
         }
     {offset
       cfQ91: // global
           _sfOXh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfQ99_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _sfOXh::P64;
           P64[Sp] = P64[R1 + 7];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ91_info" {
     block_cfQ91_info:
         const _cfQ91;
         const 3;
         const 30;
 },
 _cfQ99() //  [R1]
         { []
         }
     {offset
       cfQ99: // global
           if (R1 & 7 == 1) goto cfQ9g; else goto cfQ9k;
       cfQ9g: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfQ9k: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ99_info" {
     block_cfQ99_info:
         const _cfQ99;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.044672213 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$ccompare_closure" {
     Data.Semigroup.$fOrdArg_$ccompare_closure:
         const Data.Semigroup.$fOrdArg_$ccompare_info;
 },
 Data.Semigroup.$fOrdArg_$ccompare_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQ9W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQa0; else goto cfQa1;
       cfQa0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$ccompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQa1: // global
           I64[Sp - 24] = block_cfQ9T_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQa9; else goto cfQ9U;
       ufQa9: // global
           call _cfQ9T(R1) args: 0, res: 0, upd: 0;
       cfQ9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$ccompare_info" {
     Data.Semigroup.$fOrdArg_$ccompare_info:
         const Data.Semigroup.$fOrdArg_$ccompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQ9T() //  [R1]
         { []
         }
     {offset
       cfQ9T: // global
           I64[Sp] = block_cfQ9Z_info;
           _sfOXr::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOXr::P64;
           if (R1 & 7 != 0) goto ufQa8; else goto cfQa3;
       ufQa8: // global
           call _cfQ9Z(R1) args: 0, res: 0, upd: 0;
       cfQa3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ9T_info" {
     block_cfQ9T_info:
         const _cfQ9T;
         const 2;
         const 30;
 },
 _cfQ9Z() //  [R1]
         { []
         }
     {offset
       cfQ9Z: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQ9Z_info" {
     block_cfQ9Z_info:
         const _cfQ9Z;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.051691908 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$cp1Ord_closure" {
     Data.Semigroup.$fOrdArg_$cp1Ord_closure:
         const Data.Semigroup.$fOrdArg_$cp1Ord_info;
 },
 sat_sfOXx_entry() //  [R1]
         { []
         }
     {offset
       cfQaA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQaB; else goto cfQaC;
       cfQaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQaC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfOXx_info" {
     sat_sfOXx_info:
         const sat_sfOXx_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdArg_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfQaD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQaH; else goto cfQaG;
       cfQaH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQaG: // global
           I64[Hp - 16] = sat_sfOXx_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqArg_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$cp1Ord_info" {
     Data.Semigroup.$fOrdArg_$cp1Ord_info:
         const Data.Semigroup.$fOrdArg_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.058152493 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c<_closure" {
     Data.Semigroup.$fOrdArg_$c<_closure:
         const Data.Semigroup.$fOrdArg_$c<_info;
 },
 Data.Semigroup.$fOrdArg_$c<_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQaZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQb3; else goto cfQb4;
       cfQb3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQb4: // global
           I64[Sp - 24] = block_cfQaW_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQbo; else goto cfQaX;
       ufQbo: // global
           call _cfQaW(R1) args: 0, res: 0, upd: 0;
       cfQaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c<_info" {
     Data.Semigroup.$fOrdArg_$c<_info:
         const Data.Semigroup.$fOrdArg_$c<_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQaW() //  [R1]
         { []
         }
     {offset
       cfQaW: // global
           I64[Sp] = block_cfQb2_info;
           _sfOXC::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOXC::P64;
           if (R1 & 7 != 0) goto ufQbn; else goto cfQb6;
       ufQbn: // global
           call _cfQb2(R1) args: 0, res: 0, upd: 0;
       cfQb6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQaW_info" {
     block_cfQaW_info:
         const _cfQaW;
         const 2;
         const 30;
 },
 _cfQb2() //  [R1]
         { []
         }
     {offset
       cfQb2: // global
           _sfOXC::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfQba_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfOXC::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQb2_info" {
     block_cfQb2_info:
         const _cfQb2;
         const 2;
         const 30;
 },
 _cfQba() //  [R1]
         { []
         }
     {offset
       cfQba: // global
           if (R1 & 7 == 1) goto cfQbl; else goto cfQbh;
       cfQbl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQbh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQba_info" {
     block_cfQba_info:
         const _cfQba;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.067226496 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c>_closure" {
     Data.Semigroup.$fOrdArg_$c>_closure:
         const Data.Semigroup.$fOrdArg_$c>_info;
 },
 Data.Semigroup.$fOrdArg_$c>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQbX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQc1; else goto cfQc2;
       cfQc1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQc2: // global
           I64[Sp - 24] = block_cfQbU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQcm; else goto cfQbV;
       ufQcm: // global
           call _cfQbU(R1) args: 0, res: 0, upd: 0;
       cfQbV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c>_info" {
     Data.Semigroup.$fOrdArg_$c>_info:
         const Data.Semigroup.$fOrdArg_$c>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQbU() //  [R1]
         { []
         }
     {offset
       cfQbU: // global
           I64[Sp] = block_cfQc0_info;
           _sfOXM::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOXM::P64;
           if (R1 & 7 != 0) goto ufQcl; else goto cfQc4;
       ufQcl: // global
           call _cfQc0(R1) args: 0, res: 0, upd: 0;
       cfQc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQbU_info" {
     block_cfQbU_info:
         const _cfQbU;
         const 2;
         const 30;
 },
 _cfQc0() //  [R1]
         { []
         }
     {offset
       cfQc0: // global
           _sfOXM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfQc8_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfOXM::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQc0_info" {
     block_cfQc0_info:
         const _cfQc0;
         const 2;
         const 30;
 },
 _cfQc8() //  [R1]
         { []
         }
     {offset
       cfQc8: // global
           if (R1 & 7 == 3) goto cfQcj; else goto cfQcf;
       cfQcj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQcf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQc8_info" {
     block_cfQc8_info:
         const _cfQc8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.076818961 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c<=_closure" {
     Data.Semigroup.$fOrdArg_$c<=_closure:
         const Data.Semigroup.$fOrdArg_$c<=_info;
 },
 Data.Semigroup.$fOrdArg_$c<=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQcV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQcZ; else goto cfQd0;
       cfQcZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQd0: // global
           I64[Sp - 24] = block_cfQcS_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQdk; else goto cfQcT;
       ufQdk: // global
           call _cfQcS(R1) args: 0, res: 0, upd: 0;
       cfQcT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c<=_info" {
     Data.Semigroup.$fOrdArg_$c<=_info:
         const Data.Semigroup.$fOrdArg_$c<=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQcS() //  [R1]
         { []
         }
     {offset
       cfQcS: // global
           I64[Sp] = block_cfQcY_info;
           _sfOXW::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOXW::P64;
           if (R1 & 7 != 0) goto ufQdj; else goto cfQd2;
       ufQdj: // global
           call _cfQcY(R1) args: 0, res: 0, upd: 0;
       cfQd2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQcS_info" {
     block_cfQcS_info:
         const _cfQcS;
         const 2;
         const 30;
 },
 _cfQcY() //  [R1]
         { []
         }
     {offset
       cfQcY: // global
           _sfOXW::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfQd6_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfOXW::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQcY_info" {
     block_cfQcY_info:
         const _cfQcY;
         const 2;
         const 30;
 },
 _cfQd6() //  [R1]
         { []
         }
     {offset
       cfQd6: // global
           if (R1 & 7 == 3) goto cfQdh; else goto cfQdd;
       cfQdh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQdd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQd6_info" {
     block_cfQd6_info:
         const _cfQd6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.086383624 UTC

[section ""data" . Data.Semigroup.$fOrdArg_$c>=_closure" {
     Data.Semigroup.$fOrdArg_$c>=_closure:
         const Data.Semigroup.$fOrdArg_$c>=_info;
 },
 Data.Semigroup.$fOrdArg_$c>=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQdT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQdX; else goto cfQdY;
       cfQdX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQdY: // global
           I64[Sp - 24] = block_cfQdQ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQei; else goto cfQdR;
       ufQei: // global
           call _cfQdQ(R1) args: 0, res: 0, upd: 0;
       cfQdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_$c>=_info" {
     Data.Semigroup.$fOrdArg_$c>=_info:
         const Data.Semigroup.$fOrdArg_$c>=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQdQ() //  [R1]
         { []
         }
     {offset
       cfQdQ: // global
           I64[Sp] = block_cfQdW_info;
           _sfOY6::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfOY6::P64;
           if (R1 & 7 != 0) goto ufQeh; else goto cfQe0;
       ufQeh: // global
           call _cfQdW(R1) args: 0, res: 0, upd: 0;
       cfQe0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQdQ_info" {
     block_cfQdQ_info:
         const _cfQdQ;
         const 2;
         const 30;
 },
 _cfQdW() //  [R1]
         { []
         }
     {offset
       cfQdW: // global
           _sfOY6::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfQe4_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _sfOY6::P64;
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQdW_info" {
     block_cfQdW_info:
         const _cfQdW;
         const 2;
         const 30;
 },
 _cfQe4() //  [R1]
         { []
         }
     {offset
       cfQe4: // global
           if (R1 & 7 == 1) goto cfQef; else goto cfQeb;
       cfQef: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQeb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQe4_info" {
     block_cfQe4_info:
         const _cfQe4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.097529625 UTC

[section ""data" . Data.Semigroup.$fOrdArg_closure" {
     Data.Semigroup.$fOrdArg_closure:
         const Data.Semigroup.$fOrdArg_info;
 },
 sat_sfOYk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQeT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$cmin_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYk_info" {
     sat_sfOYk_info:
         const sat_sfOYk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQf1: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$cmax_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYj_info" {
     sat_sfOYj_info:
         const sat_sfOYj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQf9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c>=_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYi_info" {
     sat_sfOYi_info:
         const sat_sfOYi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQfh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYh_info" {
     sat_sfOYh_info:
         const sat_sfOYh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQfp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c<=_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYg_info" {
     sat_sfOYg_info:
         const sat_sfOYg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQfx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$c<_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYf_info" {
     sat_sfOYf_info:
         const sat_sfOYf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQfF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fOrdArg_$ccompare_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOYe_info" {
     sat_sfOYe_info:
         const sat_sfOYe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfOYd_entry() //  [R1]
         { []
         }
     {offset
       cfQfM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQfN; else goto cfQfO;
       cfQfN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQfO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdArg_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfOYd_info" {
     sat_sfOYd_info:
         const sat_sfOYd_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdArg_entry() //  [R2]
         { []
         }
     {offset
       cfQfQ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cfQfU; else goto cfQfT;
       cfQfU: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQfT: // global
           I64[Hp - 200] = sat_sfOYk_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfOYj_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfOYi_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfOYh_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfOYg_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfOYf_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfOYe_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfOYd_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdArg_info" {
     Data.Semigroup.$fOrdArg_info:
         const Data.Semigroup.$fOrdArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.114357763 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$cbimap_closure" {
     Data.Semigroup.$fBifunctorArg_$cbimap_closure:
         const Data.Semigroup.$fBifunctorArg_$cbimap_info;
 },
 Data.Semigroup.$fBifunctorArg_$cbimap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQgO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQgU; else goto cfQgV;
       cfQgU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$cbimap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQgV: // global
           I64[Sp - 24] = block_cfQgL_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQgZ; else goto cfQgM;
       ufQgZ: // global
           call _cfQgL(R1) args: 0, res: 0, upd: 0;
       cfQgM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$cbimap_info" {
     Data.Semigroup.$fBifunctorArg_$cbimap_info:
         const Data.Semigroup.$fBifunctorArg_$cbimap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQgL() //  [R1]
         { []
         }
     {offset
       cfQgL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfQgY; else goto cfQgX;
       cfQgY: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQgX: // global
           _sfOYp::P64 = P64[R1 + 7];
           _sfOYq::P64 = P64[R1 + 15];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sfOYq::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfOYp::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQgL_info" {
     block_cfQgL_info:
         const _cfQgL;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.120833433 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$cfirst_closure" {
     Data.Semigroup.$fBifunctorArg_$cfirst_closure:
         const Data.Semigroup.$fBifunctorArg_$cfirst_info;
 },
 Data.Semigroup.$fBifunctorArg_$cfirst_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQhp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQhu; else goto cfQhv;
       cfQhu: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$cfirst_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQhv: // global
           I64[Sp - 16] = block_cfQhm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQhz; else goto cfQhn;
       ufQhz: // global
           call _cfQhm(R1) args: 0, res: 0, upd: 0;
       cfQhn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$cfirst_info" {
     Data.Semigroup.$fBifunctorArg_$cfirst_info:
         const Data.Semigroup.$fBifunctorArg_$cfirst_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQhm() //  [R1]
         { []
         }
     {offset
       cfQhm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfQhy; else goto cfQhx;
       cfQhy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQhx: // global
           _sfOYw::P64 = P64[R1 + 7];
           _sfOYx::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfOYw::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfOYx::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQhm_info" {
     block_cfQhm_info:
         const _cfQhm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.126804322 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_$csecond_closure" {
     Data.Semigroup.$fBifunctorArg_$csecond_closure:
         const Data.Semigroup.$fBifunctorArg_$csecond_info;
 },
 Data.Semigroup.$fBifunctorArg_$csecond_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQhW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQi1; else goto cfQi2;
       cfQi1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifunctorArg_$csecond_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQi2: // global
           I64[Sp - 16] = block_cfQhT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQi6; else goto cfQhU;
       ufQi6: // global
           call _cfQhT(R1) args: 0, res: 0, upd: 0;
       cfQhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifunctorArg_$csecond_info" {
     Data.Semigroup.$fBifunctorArg_$csecond_info:
         const Data.Semigroup.$fBifunctorArg_$csecond_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQhT() //  [R1]
         { []
         }
     {offset
       cfQhT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfQi5; else goto cfQi4;
       cfQi5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQi4: // global
           _sfOYC::P64 = P64[R1 + 7];
           _sfOYD::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfOYD::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfOYC::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQhT_info" {
     block_cfQhT_info:
         const _cfQhT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.132307805 UTC

[section ""data" . Data.Semigroup.$fBifunctorArg_closure" {
     Data.Semigroup.$fBifunctorArg_closure:
         const Data.Bifunctor.C:Bifunctor_con_info;
         const Data.Semigroup.$fBifunctorArg_$cbimap_closure+3;
         const Data.Semigroup.$fBifunctorArg_$cfirst_closure+2;
         const Data.Semigroup.$fBifunctorArg_$csecond_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.135273873 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldMap_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cfQiu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQiA; else goto cfQiB;
       cfQiA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQiB: // global
           I64[Sp - 32] = block_cfQir_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQiJ; else goto cfQis;
       ufQiJ: // global
           call _cfQir(R1) args: 0, res: 0, upd: 0;
       cfQis: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldMap_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldMap_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfQir() //  [R1]
         { []
         }
     {offset
       cfQir: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfQiE; else goto cfQiD;
       cfQiE: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQiD: // global
           _sfOYK::P64 = P64[R1 + 7];
           _sfOYL::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sfOYL::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sfOYK::P64;
           _sfOYF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfQiz_info;
           R2 = _sfOYF::P64;
           P64[Sp + 16] = Hp - 24;
           P64[Sp + 24] = Hp - 56;
           Sp = Sp + 8;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQir_info" {
     block_cfQir_info:
         const _cfQir;
         const 3;
         const 30;
 },
 _cfQiz() //  [R1]
         { []
         }
     {offset
       cfQiz: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQiz_info" {
     block_cfQiz_info:
         const _cfQiz;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.143619306 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifold_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifold_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifold_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQjc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQjg; else goto cfQjh;
       cfQjg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQjh: // global
           I64[Sp - 16] = block_cfQj9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQjn; else goto cfQja;
       ufQjn: // global
           call _cfQj9(R1) args: 0, res: 0, upd: 0;
       cfQja: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifold_info" {
     Data.Semigroup.$fBifoldableArg_$cbifold_info:
         const Data.Semigroup.$fBifoldableArg_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQj9() //  [R1]
         { []
         }
     {offset
       cfQj9: // global
           I64[Sp - 8] = block_cfQjf_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQj9_info" {
     block_cfQj9_info:
         const _cfQj9;
         const 1;
         const 30;
 },
 _cfQjf() //  [R1]
         { []
         }
     {offset
       cfQjf: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sfOYT::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sfOYT::P64;
           call GHC.Base.<>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQjf_info" {
     block_cfQjf_info:
         const _cfQjf;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.150808942 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldr_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldr_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldr_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cfQjN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQjR; else goto cfQjS;
       cfQjR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQjS: // global
           I64[Sp - 32] = block_cfQjK_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQjW; else goto cfQjL;
       ufQjW: // global
           call _cfQjK(R1) args: 0, res: 0, upd: 0;
       cfQjL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldr_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldr_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfQjK() //  [R1]
         { []
         }
     {offset
       cfQjK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfQjV; else goto cfQjU;
       cfQjV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQjU: // global
           _sfOZ0::P64 = P64[R1 + 7];
           _sfOZ1::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfOZ1::P64;
           P64[Hp] = P64[Sp + 24];
           R3 = Hp - 32;
           R2 = _sfOZ0::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQjK_info" {
     block_cfQjK_info:
         const _cfQjK;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.15698194 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_$cbifoldl_closure" {
     Data.Semigroup.$fBifoldableArg_$cbifoldl_closure:
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_info;
 },
 Data.Semigroup.$fBifoldableArg_$cbifoldl_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cfQkh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQkl; else goto cfQkm;
       cfQkl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBifoldableArg_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQkm: // global
           I64[Sp - 32] = block_cfQke_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQkq; else goto cfQkf;
       ufQkq: // global
           call _cfQke(R1) args: 0, res: 0, upd: 0;
       cfQkf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBifoldableArg_$cbifoldl_info" {
     Data.Semigroup.$fBifoldableArg_$cbifoldl_info:
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfQke() //  [R1]
         { []
         }
     {offset
       cfQke: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfQkp; else goto cfQko;
       cfQkp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQko: // global
           _sfOZ8::P64 = P64[R1 + 7];
           _sfOZ9::P64 = P64[R1 + 15];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfOZ8::P64;
           R3 = _sfOZ9::P64;
           R2 = Hp - 32;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQke_info" {
     block_cfQke_info:
         const _cfQke;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.162323176 UTC

[section ""data" . Data.Semigroup.$fBifoldableArg_closure" {
     Data.Semigroup.$fBifoldableArg_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Semigroup.$fBifoldableArg_$cbifold_closure+2;
         const Data.Semigroup.$fBifoldableArg_$cbifoldMap_closure+4;
         const Data.Semigroup.$fBifoldableArg_$cbifoldr_closure+4;
         const Data.Semigroup.$fBifoldableArg_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.165498658 UTC

[section ""data" . Data.Semigroup.$w$cbitraverse_closure" {
     Data.Semigroup.$w$cbitraverse_closure:
         const Data.Semigroup.$w$cbitraverse_info;
 },
 sat_sfOZi_entry() //  [R1]
         { []
         }
     {offset
       cfQkR: // global
           _sfOZi::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfQkS; else goto cfQkT;
       cfQkT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQkV; else goto cfQkU;
       cfQkV: // global
           HpAlloc = 32;
           goto cfQkS;
       cfQkS: // global
           R1 = _sfOZi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQkU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfOZi::P64;
           _sfOZb::P64 = P64[_sfOZi::P64 + 16];
           _sfOZc::P64 = P64[_sfOZi::P64 + 24];
           _sfOZe::P64 = P64[_sfOZi::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfOZc::P64;
           P64[Hp] = _sfOZe::P64;
           I64[Sp - 32] = block_cfQkP_info;
           R2 = _sfOZb::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfOZi_info" {
     sat_sfOZi_info:
         const sat_sfOZi_entry;
         const 3;
         const 15;
 },
 _cfQkP() //  [R1]
         { []
         }
     {offset
       cfQkP: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.Arg_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQkP_info" {
     block_cfQkP_info:
         const _cfQkP;
         const 1;
         const 30;
 },
 Data.Semigroup.$w$cbitraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfQkZ: // global
           _sfOZf::P64 = R6;
           _sfOZe::P64 = R5;
           _sfOZd::P64 = R4;
           _sfOZc::P64 = R3;
           _sfOZb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfQl0; else goto cfQl1;
       cfQl1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfQl3; else goto cfQl2;
       cfQl3: // global
           HpAlloc = 72;
           goto cfQl0;
       cfQl0: // global
           R6 = _sfOZf::P64;
           R5 = _sfOZe::P64;
           R4 = _sfOZd::P64;
           R3 = _sfOZc::P64;
           R2 = _sfOZb::P64;
           R1 = Data.Semigroup.$w$cbitraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQl2: // global
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = _sfOZd::P64;
           P64[Hp - 40] = _sfOZf::P64;
           I64[Hp - 32] = sat_sfOZi_info;
           P64[Hp - 16] = _sfOZb::P64;
           P64[Hp - 8] = _sfOZc::P64;
           P64[Hp] = _sfOZe::P64;
           R2 = _sfOZb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 24;
           call GHC.Base.<*>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cbitraverse_info" {
     Data.Semigroup.$w$cbitraverse_info:
         const Data.Semigroup.$w$cbitraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.173878337 UTC

[section ""data" . Data.Semigroup.$fBitraversableArg_$cbitraverse_closure" {
     Data.Semigroup.$fBitraversableArg_$cbitraverse_closure:
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_info;
 },
 Data.Semigroup.$fBitraversableArg_$cbitraverse_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cfQly: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQlz; else goto cfQlA;
       cfQlz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fBitraversableArg_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQlA: // global
           I64[Sp - 32] = block_cfQlv_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQlE; else goto cfQlw;
       ufQlE: // global
           call _cfQlv(R1) args: 0, res: 0, upd: 0;
       cfQlw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBitraversableArg_$cbitraverse_info" {
     Data.Semigroup.$fBitraversableArg_$cbitraverse_info:
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfQlv() //  [R1]
         { []
         }
     {offset
       cfQlv: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cbitraverse_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQlv_info" {
     block_cfQlv_info:
         const _cfQlv;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.179218994 UTC

[section ""data" . Data.Semigroup.$fBitraversableArg_closure" {
     Data.Semigroup.$fBitraversableArg_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Semigroup.$fBifunctorArg_closure+1;
         const Data.Semigroup.$fBifoldableArg_closure+1;
         const Data.Semigroup.$fBitraversableArg_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.181411656 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$cstimes_closure" {
     Data.Semigroup.$fSemigroupFirst_$cstimes_closure:
         const Data.Semigroup.$fSemigroupFirst_$cstimes_info;
         const 0;
 },
 Data.Semigroup.$fSemigroupFirst_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQlU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$cstimes_info" {
     Data.Semigroup.$fSemigroupFirst_$cstimes_info:
         const Data.Semigroup.$fSemigroupFirst_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfPCb_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.184683021 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$c<>_closure" {
     Data.Semigroup.$fSemigroupFirst_$c<>_closure:
         const Data.Semigroup.$fSemigroupFirst_$c<>_info;
 },
 Data.Semigroup.$fSemigroupFirst_$c<>_entry() //  [R2]
         { []
         }
     {offset
       cfQm5: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$c<>_info" {
     Data.Semigroup.$fSemigroupFirst_$c<>_info:
         const Data.Semigroup.$fSemigroupFirst_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.188802956 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_$csconcat_closure" {
     Data.Semigroup.$fSemigroupFirst_$csconcat_closure:
         const Data.Semigroup.$fSemigroupFirst_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupFirst_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfQmj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQmn; else goto cfQmo;
       cfQmn: // global
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupFirst_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQmo: // global
           I64[Sp - 8] = block_cfQmg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQmw; else goto cfQmh;
       ufQmw: // global
           call _cfQmg(R1) args: 0, res: 0, upd: 0;
       cfQmh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupFirst_$csconcat_info" {
     Data.Semigroup.$fSemigroupFirst_$csconcat_info:
         const Data.Semigroup.$fSemigroupFirst_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQmg() //  [R1]
         { []
         }
     {offset
       cfQmg: // global
           I64[Sp - 8] = block_cfQmm_info;
           _sfOZw::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfOZw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQmv; else goto cfQmq;
       ufQmv: // global
           call _cfQmm() args: 0, res: 0, upd: 0;
       cfQmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQmg_info" {
     block_cfQmg_info:
         const _cfQmg;
         const 0;
         const 30;
 },
 _cfQmm() //  []
         { []
         }
     {offset
       cfQmm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQmm_info" {
     block_cfQmm_info:
         const _cfQmm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.194997203 UTC

[section ""data" . Data.Semigroup.$fSemigroupFirst_closure" {
     Data.Semigroup.$fSemigroupFirst_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Semigroup.$fSemigroupFirst_$c<>_closure+2;
         const Data.Semigroup.$fSemigroupFirst_$csconcat_closure+1;
         const Data.Semigroup.$fSemigroupFirst_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.197073151 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst2_closure" {
     Data.Semigroup.$fFunctorFirst2_closure:
         const Data.Semigroup.$fFunctorFirst2_info;
 },
 Data.Semigroup.$fFunctorFirst2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQmR: // global
           _sfOZz::P64 = R2;
           R2 = R3;
           R1 = _sfOZz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorFirst2_info" {
     Data.Semigroup.$fFunctorFirst2_info:
         const Data.Semigroup.$fFunctorFirst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.200303404 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst1_closure" {
     Data.Semigroup.$fFunctorFirst1_closure:
         const Data.Semigroup.$fFunctorFirst1_info;
 },
 Data.Semigroup.$fFunctorFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfQn2: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorFirst1_info" {
     Data.Semigroup.$fFunctorFirst1_info:
         const Data.Semigroup.$fFunctorFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.203644194 UTC

[section ""data" . Data.Semigroup.$fFunctorFirst_closure" {
     Data.Semigroup.$fFunctorFirst_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorFirst2_closure+2;
         const Data.Semigroup.$fFunctorFirst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.205641948 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfQne: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldMap_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldMap_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.209538088 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst5_closure" {
     Data.Semigroup.$fFoldableFirst5_closure:
         const Data.Semigroup.$fFoldableFirst5_info;
 },
 Data.Semigroup.$fFoldableFirst5_entry() //  [R3]
         { []
         }
     {offset
       cfQnp: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst5_info" {
     Data.Semigroup.$fFoldableFirst5_info:
         const Data.Semigroup.$fFoldableFirst5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.212707361 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst1_closure" {
     Data.Semigroup.$fFoldableFirst1_closure:
         const Data.Semigroup.$fFoldableFirst1_info;
 },
 Data.Semigroup.$fFoldableFirst1_entry() //  [R3]
         { []
         }
     {offset
       cfQnA: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst1_info" {
     Data.Semigroup.$fFoldableFirst1_info:
         const Data.Semigroup.$fFoldableFirst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.216403075 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst2_closure" {
     Data.Semigroup.$fFoldableFirst2_closure:
         const Data.Semigroup.$fFoldableFirst2_info;
 },
 Data.Semigroup.$fFoldableFirst2_entry() //  [R3]
         { []
         }
     {offset
       cfQnL: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst2_info" {
     Data.Semigroup.$fFoldableFirst2_info:
         const Data.Semigroup.$fFoldableFirst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.220503967 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$celem_closure" {
     Data.Semigroup.$fFoldableFirst_$celem_closure:
         const Data.Semigroup.$fFoldableFirst_$celem_info;
 },
 f_sfOZO_entry() //  [R1]
         { []
         }
     {offset
       cfQo0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQo1; else goto cfQo2;
       cfQo1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQo2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfOZO_info" {
     f_sfOZO_info:
         const f_sfOZO_entry;
         const 2;
         const 18;
 },
 sat_sfOZQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQo8: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfOZQ_info" {
     sat_sfOZQ_info:
         const sat_sfOZQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableFirst_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQob: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQof; else goto cfQoe;
       cfQof: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableFirst_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQoe: // global
           I64[Hp - 40] = f_sfOZO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfOZQ_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$celem_info" {
     Data.Semigroup.$fFoldableFirst_$celem_info:
         const Data.Semigroup.$fFoldableFirst_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.227160063 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldl_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldl_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQoC: // global
           _sfOZS::P64 = R3;
           R3 = R4;
           _sfOZR::P64 = R2;
           R2 = _sfOZS::P64;
           R1 = _sfOZR::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldl_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldl_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.230867785 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst4_closure" {
     Data.Semigroup.$fFoldableFirst4_closure:
         const Data.Semigroup.$fFoldableFirst4_info;
 },
 Data.Semigroup.$fFoldableFirst4_entry() //  [R3]
         { []
         }
     {offset
       cfQoN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst4_info" {
     Data.Semigroup.$fFoldableFirst4_info:
         const Data.Semigroup.$fFoldableFirst4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.23401909 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableFirst_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableFirst_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQoY: // global
           R3 = R3;
           _sfOZW::P64 = R2;
           R2 = R4;
           R1 = _sfOZW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cfoldr'_info" {
     Data.Semigroup.$fFoldableFirst_$cfoldr'_info:
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.237213899 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$clength_closure" {
     Data.Semigroup.$fFoldableFirst_$clength_closure:
         const Data.Semigroup.$fFoldableFirst_$clength_info;
 },
 Data.Semigroup.$fFoldableFirst_$clength_entry() //  []
         { []
         }
     {offset
       cfQp9: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$clength_info" {
     Data.Semigroup.$fFoldableFirst_$clength_info:
         const Data.Semigroup.$fFoldableFirst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.240933218 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$cnull_closure" {
     Data.Semigroup.$fFoldableFirst_$cnull_closure:
         const Data.Semigroup.$fFoldableFirst_$cnull_info;
 },
 Data.Semigroup.$fFoldableFirst_$cnull_entry() //  []
         { []
         }
     {offset
       cfQpl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$cnull_info" {
     Data.Semigroup.$fFoldableFirst_$cnull_info:
         const Data.Semigroup.$fFoldableFirst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.244357518 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_$ctoList_closure" {
     Data.Semigroup.$fFoldableFirst_$ctoList_closure:
         const Data.Semigroup.$fFoldableFirst_$ctoList_info;
 },
 Data.Semigroup.$fFoldableFirst_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfQpz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQpD; else goto cfQpC;
       cfQpD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableFirst_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQpC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableFirst_$ctoList_info" {
     Data.Semigroup.$fFoldableFirst_$ctoList_info:
         const Data.Semigroup.$fFoldableFirst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.248222482 UTC

[section ""data" . Data.Semigroup.$fFoldableFirst_closure" {
     Data.Semigroup.$fFoldableFirst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableFirst5_closure+2;
         const Data.Semigroup.$fFoldableFirst_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableFirst_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableFirst4_closure+2;
         const Data.Semigroup.$fFoldableFirst4_closure+2;
         const Data.Semigroup.$fFoldableFirst_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableFirst_$cnull_closure+1;
         const Data.Semigroup.$fFoldableFirst_$clength_closure+1;
         const Data.Semigroup.$fFoldableFirst_$celem_closure+2;
         const Data.Semigroup.$fFoldableFirst2_closure+2;
         const Data.Semigroup.$fFoldableFirst2_closure+2;
         const Data.Semigroup.$fFoldableFirst1_closure+2;
         const Data.Semigroup.$fFoldableFirst1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.250799125 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$ctraverse_closure" {
     Data.Semigroup.$fTraversableFirst_$ctraverse_closure:
         const Data.Semigroup.$fTraversableFirst_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableFirst_$ctraverse_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cfQpU: // global
           _sfP04::P64 = R4;
           _sfP03::P64 = R3;
           _sfP02::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfQpV; else goto cfQpW;
       cfQpW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQpY; else goto cfQpX;
       cfQpY: // global
           HpAlloc = 32;
           goto cfQpV;
       cfQpV: // global
           R4 = _sfP04::P64;
           R3 = _sfP03::P64;
           R2 = _sfP02::P64;
           R1 = Data.Semigroup.$fTraversableFirst_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQpX: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfP03::P64;
           P64[Hp] = _sfP04::P64;
           I64[Sp - 16] = block_cfQpS_info;
           R2 = _sfP02::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$ctraverse_info" {
     Data.Semigroup.$fTraversableFirst_$ctraverse_info:
         const Data.Semigroup.$fTraversableFirst_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQpS() //  [R1]
         { []
         }
     {offset
       cfQpS: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQpS_info" {
     block_cfQpS_info:
         const _cfQpS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.256368372 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$csequenceA_closure" {
     Data.Semigroup.$fTraversableFirst_$csequenceA_closure:
         const Data.Semigroup.$fTraversableFirst_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableFirst_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQql: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQqm; else goto cfQqn;
       cfQqm: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableFirst_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQqn: // global
           I64[Sp - 16] = block_cfQqj_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$csequenceA_info" {
     Data.Semigroup.$fTraversableFirst_$csequenceA_info:
         const Data.Semigroup.$fTraversableFirst_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQqj() //  [R1]
         { []
         }
     {offset
       cfQqj: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQqj_info" {
     block_cfQqj_info:
         const _cfQqj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.262462278 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$cmapM_closure" {
     Data.Semigroup.$fTraversableFirst_$cmapM_closure:
         const Data.Semigroup.$fTraversableFirst_$cmapM_info;
 },
 Data.Semigroup.$fTraversableFirst_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQqJ: // global
           _sfP0c::P64 = R4;
           _sfP0b::P64 = R3;
           _sfP0a::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfQqN; else goto cfQqO;
       cfQqO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQqQ; else goto cfQqP;
       cfQqQ: // global
           HpAlloc = 32;
           goto cfQqN;
       cfQqN: // global
           R4 = _sfP0c::P64;
           R3 = _sfP0b::P64;
           R2 = _sfP0a::P64;
           R1 = Data.Semigroup.$fTraversableFirst_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQqP: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfP0b::P64;
           P64[Hp] = _sfP0c::P64;
           I64[Sp - 16] = block_cfQqH_info;
           R2 = _sfP0a::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$cmapM_info" {
     Data.Semigroup.$fTraversableFirst_$cmapM_info:
         const Data.Semigroup.$fTraversableFirst_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQqH() //  [R1]
         { []
         }
     {offset
       cfQqH: // global
           I64[Sp] = block_cfQqM_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQqH_info" {
     block_cfQqH_info:
         const _cfQqH;
         const 1;
         const 30;
 },
 _cfQqM() //  [R1]
         { []
         }
     {offset
       cfQqM: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQqM_info" {
     block_cfQqM_info:
         const _cfQqM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.273174204 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_$csequence_closure" {
     Data.Semigroup.$fTraversableFirst_$csequence_closure:
         const Data.Semigroup.$fTraversableFirst_$csequence_info;
 },
 Data.Semigroup.$fTraversableFirst_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQrj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQrn; else goto cfQro;
       cfQrn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableFirst_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQro: // global
           I64[Sp - 16] = block_cfQrh_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableFirst_$csequence_info" {
     Data.Semigroup.$fTraversableFirst_$csequence_info:
         const Data.Semigroup.$fTraversableFirst_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQrh() //  [R1]
         { []
         }
     {offset
       cfQrh: // global
           I64[Sp] = block_cfQrm_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQrh_info" {
     block_cfQrh_info:
         const _cfQrh;
         const 1;
         const 30;
 },
 _cfQrm() //  [R1]
         { []
         }
     {offset
       cfQrm: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQrm_info" {
     block_cfQrm_info:
         const _cfQrm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.281067223 UTC

[section ""data" . Data.Semigroup.$fTraversableFirst_closure" {
     Data.Semigroup.$fTraversableFirst_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorFirst_closure+1;
         const Data.Semigroup.$fFoldableFirst_closure+1;
         const Data.Semigroup.$fTraversableFirst_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableFirst_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableFirst_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableFirst_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.283594362 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_$c<*_closure" {
     Data.Semigroup.$fApplicativeFirst_$c<*_closure:
         const Data.Semigroup.$fApplicativeFirst_$c<*_info;
 },
 Data.Semigroup.$fApplicativeFirst_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfQrO: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst_$c<*_info" {
     Data.Semigroup.$fApplicativeFirst_$c<*_info:
         const Data.Semigroup.$fApplicativeFirst_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.287539113 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_$c*>_closure" {
     Data.Semigroup.$fApplicativeFirst_$c*>_closure:
         const Data.Semigroup.$fApplicativeFirst_$c*>_info;
 },
 Data.Semigroup.$fApplicativeFirst_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfQrZ: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst_$c*>_info" {
     Data.Semigroup.$fApplicativeFirst_$c*>_info:
         const Data.Semigroup.$fApplicativeFirst_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.29116554 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst2_closure" {
     Data.Semigroup.$fApplicativeFirst2_closure:
         const Data.Semigroup.$fApplicativeFirst2_info;
 },
 Data.Semigroup.$fApplicativeFirst2_entry() //  [R2]
         { []
         }
     {offset
       cfQsa: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeFirst2_info" {
     Data.Semigroup.$fApplicativeFirst2_info:
         const Data.Semigroup.$fApplicativeFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.294525788 UTC

[section ""data" . Data.Semigroup.$fApplicativeFirst_closure" {
     Data.Semigroup.$fApplicativeFirst_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorFirst_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeFirst2_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeFirst_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst_$c<*_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.296817722 UTC

[section ""data" . Data.Semigroup.$fMonadFirst_$c>>=_closure" {
     Data.Semigroup.$fMonadFirst_$c>>=_closure:
         const Data.Semigroup.$fMonadFirst_$c>>=_info;
 },
 Data.Semigroup.$fMonadFirst_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQsm: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFirst_$c>>=_info" {
     Data.Semigroup.$fMonadFirst_$c>>=_info:
         const Data.Semigroup.$fMonadFirst_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.300682764 UTC

[section ""data" . lvl4_rfC6a_closure" {
     lvl4_rfC6a_closure:
         const lvl4_rfC6a_info;
         const 0;
 },
 lvl4_rfC6a_entry() //  [R2]
         { []
         }
     {offset
       cfQsx: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rfC6a_info" {
     lvl4_rfC6a_info:
         const lvl4_rfC6a_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.304080568 UTC

[section ""data" . Data.Semigroup.$fMonadFirst_closure" {
     Data.Semigroup.$fMonadFirst_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeFirst_closure+1;
         const Data.Semigroup.$fMonadFirst_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeFirst_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl4_rfC6a_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.306195085 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$cstimes_closure" {
     Data.Semigroup.$fSemigroupLast_$cstimes_closure:
         const Data.Semigroup.$fSemigroupLast_$cstimes_info;
         const 0;
 },
 Data.Semigroup.$fSemigroupLast_$cstimes_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQsJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.Internal.stimesIdempotent_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$cstimes_info" {
     Data.Semigroup.$fSemigroupLast_$cstimes_info:
         const Data.Semigroup.$fSemigroupLast_$cstimes_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SfPCb_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.310486265 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$c<>_closure" {
     Data.Semigroup.$fSemigroupLast_$c<>_closure:
         const Data.Semigroup.$fSemigroupLast_$c<>_info;
 },
 Data.Semigroup.$fSemigroupLast_$c<>_entry() //  [R3]
         { []
         }
     {offset
       cfQsU: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$c<>_info" {
     Data.Semigroup.$fSemigroupLast_$c<>_info:
         const Data.Semigroup.$fSemigroupLast_$c<>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.314581312 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast1_closure" {
     Data.Semigroup.$fSemigroupLast1_closure:
         const Data.Semigroup.$fSemigroupLast1_info;
 },
 Data.Semigroup.$fSemigroupLast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQtc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQtd; else goto ufQtl;
       cfQtd: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupLast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufQtl: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfQt2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast1_info" {
     Data.Semigroup.$fSemigroupLast1_info:
         const Data.Semigroup.$fSemigroupLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQt2() //  []
         { []
         }
     {offset
       cfQt2: // global
           I64[Sp - 8] = block_cfQt5_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQtn; else goto cfQt6;
       ufQtn: // global
           call _cfQt5(R1) args: 0, res: 0, upd: 0;
       cfQt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfQt5() //  [R1]
         { []
         }
     {offset
       cfQt5: // global
           if (R1 & 7 == 1) goto cfQt9; else goto cfQta;
       cfQt9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQta: // global
           P64[Sp + 8] = P64[R1 + 6];
           P64[Sp + 16] = P64[R1 + 14];
           Sp = Sp + 8;
           call _cfQt2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfQt5_info" {
     block_cfQt5_info:
         const _cfQt5;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.320825195 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_$csconcat_closure" {
     Data.Semigroup.$fSemigroupLast_$csconcat_closure:
         const Data.Semigroup.$fSemigroupLast_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupLast_$csconcat_entry() //  [R2]
         { []
         }
     {offset
       cfQtN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQtO; else goto cfQtP;
       cfQtO: // global
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupLast_$csconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQtP: // global
           I64[Sp - 8] = block_cfQtK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQtT; else goto cfQtL;
       ufQtT: // global
           call _cfQtK(R1) args: 0, res: 0, upd: 0;
       cfQtL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupLast_$csconcat_info" {
     Data.Semigroup.$fSemigroupLast_$csconcat_info:
         const Data.Semigroup.$fSemigroupLast_$csconcat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQtK() //  [R1]
         { []
         }
     {offset
       cfQtK: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Semigroup.$fSemigroupLast1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQtK_info" {
     block_cfQtK_info:
         const _cfQtK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.325836336 UTC

[section ""data" . Data.Semigroup.$fSemigroupLast_closure" {
     Data.Semigroup.$fSemigroupLast_closure:
         const GHC.Base.C:Semigroup_con_info;
         const Data.Semigroup.$fSemigroupLast_$c<>_closure+2;
         const Data.Semigroup.$fSemigroupLast_$csconcat_closure+1;
         const Data.Semigroup.$fSemigroupLast_$cstimes_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.327817471 UTC

[section ""data" . Data.Semigroup.$fFunctorLast1_closure" {
     Data.Semigroup.$fFunctorLast1_closure:
         const Data.Semigroup.$fFunctorLast1_info;
 },
 Data.Semigroup.$fFunctorLast1_entry() //  [R2]
         { []
         }
     {offset
       cfQu9: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorLast1_info" {
     Data.Semigroup.$fFunctorLast1_info:
         const Data.Semigroup.$fFunctorLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.331027482 UTC

[section ""data" . Data.Semigroup.$fFunctorLast2_closure" {
     Data.Semigroup.$fFunctorLast2_closure:
         const Data.Semigroup.$fFunctorLast2_info;
 },
 Data.Semigroup.$fFunctorLast2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQuk: // global
           _sfP0G::P64 = R2;
           R2 = R3;
           R1 = _sfP0G::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorLast2_info" {
     Data.Semigroup.$fFunctorLast2_info:
         const Data.Semigroup.$fFunctorLast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.334355136 UTC

[section ""data" . Data.Semigroup.$fFunctorLast_closure" {
     Data.Semigroup.$fFunctorLast_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Semigroup.$fFunctorLast2_closure+2;
         const Data.Semigroup.$fFunctorLast1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.336293344 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldMap_entry() //  [R3, R4]
         { []
         }
     {offset
       cfQuw: // global
           R2 = R4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldMap_info" {
     Data.Semigroup.$fFoldableLast_$cfoldMap_info:
         const Data.Semigroup.$fFoldableLast_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.339671594 UTC

[section ""data" . Data.Semigroup.$fFoldableLast4_closure" {
     Data.Semigroup.$fFoldableLast4_closure:
         const Data.Semigroup.$fFoldableLast4_info;
 },
 Data.Semigroup.$fFoldableLast4_entry() //  [R3]
         { []
         }
     {offset
       cfQuH: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast4_info" {
     Data.Semigroup.$fFoldableLast4_info:
         const Data.Semigroup.$fFoldableLast4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.343526452 UTC

[section ""data" . Data.Semigroup.$fFoldableLast1_closure" {
     Data.Semigroup.$fFoldableLast1_closure:
         const Data.Semigroup.$fFoldableLast1_info;
 },
 Data.Semigroup.$fFoldableLast1_entry() //  [R3]
         { []
         }
     {offset
       cfQuS: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast1_info" {
     Data.Semigroup.$fFoldableLast1_info:
         const Data.Semigroup.$fFoldableLast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.347203712 UTC

[section ""data" . Data.Semigroup.$fFoldableLast2_closure" {
     Data.Semigroup.$fFoldableLast2_closure:
         const Data.Semigroup.$fFoldableLast2_info;
 },
 Data.Semigroup.$fFoldableLast2_entry() //  [R3]
         { []
         }
     {offset
       cfQv3: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast2_info" {
     Data.Semigroup.$fFoldableLast2_info:
         const Data.Semigroup.$fFoldableLast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.351382815 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$celem_closure" {
     Data.Semigroup.$fFoldableLast_$celem_closure:
         const Data.Semigroup.$fFoldableLast_$celem_info;
 },
 f_sfP0T_entry() //  [R1]
         { []
         }
     {offset
       cfQvi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQvj; else goto cfQvk;
       cfQvj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQvk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfP0T_info" {
     f_sfP0T_info:
         const f_sfP0T_entry;
         const 2;
         const 18;
 },
 sat_sfP0V_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQvq: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP0V_info" {
     sat_sfP0V_info:
         const sat_sfP0V_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fFoldableLast_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQvt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQvx; else goto cfQvw;
       cfQvx: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableLast_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQvw: // global
           I64[Hp - 40] = f_sfP0T_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfP0V_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$celem_info" {
     Data.Semigroup.$fFoldableLast_$celem_info:
         const Data.Semigroup.$fFoldableLast_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.358639637 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldl_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldl_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQvU: // global
           _sfP0X::P64 = R3;
           R3 = R4;
           _sfP0W::P64 = R2;
           R2 = _sfP0X::P64;
           R1 = _sfP0W::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldl_info" {
     Data.Semigroup.$fFoldableLast_$cfoldl_info:
         const Data.Semigroup.$fFoldableLast_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.361921625 UTC

[section ""data" . Data.Semigroup.$fFoldableLast3_closure" {
     Data.Semigroup.$fFoldableLast3_closure:
         const Data.Semigroup.$fFoldableLast3_info;
 },
 Data.Semigroup.$fFoldableLast3_entry() //  [R3]
         { []
         }
     {offset
       cfQw5: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast3_info" {
     Data.Semigroup.$fFoldableLast3_info:
         const Data.Semigroup.$fFoldableLast3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.365213462 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableLast_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableLast_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableLast_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQwg: // global
           R3 = R3;
           _sfP11::P64 = R2;
           R2 = R4;
           R1 = _sfP11::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cfoldr'_info" {
     Data.Semigroup.$fFoldableLast_$cfoldr'_info:
         const Data.Semigroup.$fFoldableLast_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.368617636 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$clength_closure" {
     Data.Semigroup.$fFoldableLast_$clength_closure:
         const Data.Semigroup.$fFoldableLast_$clength_info;
 },
 Data.Semigroup.$fFoldableLast_$clength_entry() //  []
         { []
         }
     {offset
       cfQwr: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$clength_info" {
     Data.Semigroup.$fFoldableLast_$clength_info:
         const Data.Semigroup.$fFoldableLast_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.37246137 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$cnull_closure" {
     Data.Semigroup.$fFoldableLast_$cnull_closure:
         const Data.Semigroup.$fFoldableLast_$cnull_info;
 },
 Data.Semigroup.$fFoldableLast_$cnull_entry() //  []
         { []
         }
     {offset
       cfQwD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$cnull_info" {
     Data.Semigroup.$fFoldableLast_$cnull_info:
         const Data.Semigroup.$fFoldableLast_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.376387876 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_$ctoList_closure" {
     Data.Semigroup.$fFoldableLast_$ctoList_closure:
         const Data.Semigroup.$fFoldableLast_$ctoList_info;
 },
 Data.Semigroup.$fFoldableLast_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfQwR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQwV; else goto cfQwU;
       cfQwV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableLast_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQwU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableLast_$ctoList_info" {
     Data.Semigroup.$fFoldableLast_$ctoList_info:
         const Data.Semigroup.$fFoldableLast_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.379902196 UTC

[section ""data" . Data.Semigroup.$fFoldableLast_closure" {
     Data.Semigroup.$fFoldableLast_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableLast4_closure+2;
         const Data.Semigroup.$fFoldableLast_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableLast_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableLast3_closure+2;
         const Data.Semigroup.$fFoldableLast3_closure+2;
         const Data.Semigroup.$fFoldableLast_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableLast_$cnull_closure+1;
         const Data.Semigroup.$fFoldableLast_$clength_closure+1;
         const Data.Semigroup.$fFoldableLast_$celem_closure+2;
         const Data.Semigroup.$fFoldableLast2_closure+2;
         const Data.Semigroup.$fFoldableLast2_closure+2;
         const Data.Semigroup.$fFoldableLast1_closure+2;
         const Data.Semigroup.$fFoldableLast1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.382687715 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$ctraverse_closure" {
     Data.Semigroup.$fTraversableLast_$ctraverse_closure:
         const Data.Semigroup.$fTraversableLast_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableLast_$ctraverse_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cfQxc: // global
           _sfP19::P64 = R4;
           _sfP18::P64 = R3;
           _sfP17::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfQxd; else goto cfQxe;
       cfQxe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQxg; else goto cfQxf;
       cfQxg: // global
           HpAlloc = 32;
           goto cfQxd;
       cfQxd: // global
           R4 = _sfP19::P64;
           R3 = _sfP18::P64;
           R2 = _sfP17::P64;
           R1 = Data.Semigroup.$fTraversableLast_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQxf: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfP18::P64;
           P64[Hp] = _sfP19::P64;
           I64[Sp - 16] = block_cfQxa_info;
           R2 = _sfP17::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$ctraverse_info" {
     Data.Semigroup.$fTraversableLast_$ctraverse_info:
         const Data.Semigroup.$fTraversableLast_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQxa() //  [R1]
         { []
         }
     {offset
       cfQxa: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQxa_info" {
     block_cfQxa_info:
         const _cfQxa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.388240507 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$csequenceA_closure" {
     Data.Semigroup.$fTraversableLast_$csequenceA_closure:
         const Data.Semigroup.$fTraversableLast_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableLast_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQxD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQxE; else goto cfQxF;
       cfQxE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableLast_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQxF: // global
           I64[Sp - 16] = block_cfQxB_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$csequenceA_info" {
     Data.Semigroup.$fTraversableLast_$csequenceA_info:
         const Data.Semigroup.$fTraversableLast_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQxB() //  [R1]
         { []
         }
     {offset
       cfQxB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQxB_info" {
     block_cfQxB_info:
         const _cfQxB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.39433023 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$cmapM_closure" {
     Data.Semigroup.$fTraversableLast_$cmapM_closure:
         const Data.Semigroup.$fTraversableLast_$cmapM_info;
 },
 Data.Semigroup.$fTraversableLast_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQy1: // global
           _sfP1h::P64 = R4;
           _sfP1g::P64 = R3;
           _sfP1f::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfQy5; else goto cfQy6;
       cfQy6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQy8; else goto cfQy7;
       cfQy8: // global
           HpAlloc = 32;
           goto cfQy5;
       cfQy5: // global
           R4 = _sfP1h::P64;
           R3 = _sfP1g::P64;
           R2 = _sfP1f::P64;
           R1 = Data.Semigroup.$fTraversableLast_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQy7: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfP1g::P64;
           P64[Hp] = _sfP1h::P64;
           I64[Sp - 16] = block_cfQxZ_info;
           R2 = _sfP1f::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$cmapM_info" {
     Data.Semigroup.$fTraversableLast_$cmapM_info:
         const Data.Semigroup.$fTraversableLast_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQxZ() //  [R1]
         { []
         }
     {offset
       cfQxZ: // global
           I64[Sp] = block_cfQy4_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQxZ_info" {
     block_cfQxZ_info:
         const _cfQxZ;
         const 1;
         const 30;
 },
 _cfQy4() //  [R1]
         { []
         }
     {offset
       cfQy4: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQy4_info" {
     block_cfQy4_info:
         const _cfQy4;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.401812818 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_$csequence_closure" {
     Data.Semigroup.$fTraversableLast_$csequence_closure:
         const Data.Semigroup.$fTraversableLast_$csequence_info;
 },
 Data.Semigroup.$fTraversableLast_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQyB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQyF; else goto cfQyG;
       cfQyF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableLast_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQyG: // global
           I64[Sp - 16] = block_cfQyz_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableLast_$csequence_info" {
     Data.Semigroup.$fTraversableLast_$csequence_info:
         const Data.Semigroup.$fTraversableLast_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQyz() //  [R1]
         { []
         }
     {offset
       cfQyz: // global
           I64[Sp] = block_cfQyE_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQyz_info" {
     block_cfQyz_info:
         const _cfQyz;
         const 1;
         const 30;
 },
 _cfQyE() //  [R1]
         { []
         }
     {offset
       cfQyE: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQyE_info" {
     block_cfQyE_info:
         const _cfQyE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.408433936 UTC

[section ""data" . Data.Semigroup.$fTraversableLast_closure" {
     Data.Semigroup.$fTraversableLast_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorLast_closure+1;
         const Data.Semigroup.$fFoldableLast_closure+1;
         const Data.Semigroup.$fTraversableLast_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableLast_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableLast_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableLast_$csequence_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.410509033 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_$c<*_closure" {
     Data.Semigroup.$fApplicativeLast_$c<*_closure:
         const Data.Semigroup.$fApplicativeLast_$c<*_info;
 },
 Data.Semigroup.$fApplicativeLast_$c<*_entry() //  [R2]
         { []
         }
     {offset
       cfQz6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast_$c<*_info" {
     Data.Semigroup.$fApplicativeLast_$c<*_info:
         const Data.Semigroup.$fApplicativeLast_$c<*_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.414084289 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_$c*>_closure" {
     Data.Semigroup.$fApplicativeLast_$c*>_closure:
         const Data.Semigroup.$fApplicativeLast_$c*>_info;
 },
 Data.Semigroup.$fApplicativeLast_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cfQzh: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast_$c*>_info" {
     Data.Semigroup.$fApplicativeLast_$c*>_info:
         const Data.Semigroup.$fApplicativeLast_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.417383206 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast1_closure" {
     Data.Semigroup.$fApplicativeLast1_closure:
         const Data.Semigroup.$fApplicativeLast1_info;
 },
 Data.Semigroup.$fApplicativeLast1_entry() //  [R2]
         { []
         }
     {offset
       cfQzs: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeLast1_info" {
     Data.Semigroup.$fApplicativeLast1_info:
         const Data.Semigroup.$fApplicativeLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.420481769 UTC

[section ""data" . Data.Semigroup.$fApplicativeLast_closure" {
     Data.Semigroup.$fApplicativeLast_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorLast_closure+1;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const Data.Semigroup.$fApplicativeLast1_closure+1;
         const Data.Semigroup.$fApplicativeFirst1_closure+1;
         const Data.Semigroup.$fApplicativeLast_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeLast_$c<*_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.422591363 UTC

[section ""data" . Data.Semigroup.$fMonadLast_$c>>=_closure" {
     Data.Semigroup.$fMonadLast_$c>>=_closure:
         const Data.Semigroup.$fMonadLast_$c>>=_info;
 },
 Data.Semigroup.$fMonadLast_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQzE: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadLast_$c>>=_info" {
     Data.Semigroup.$fMonadLast_$c>>=_info:
         const Data.Semigroup.$fMonadLast_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.425863794 UTC

[section ""data" . lvl5_rfC6b_closure" {
     lvl5_rfC6b_closure:
         const lvl5_rfC6b_info;
         const 0;
 },
 lvl5_rfC6b_entry() //  [R2]
         { []
         }
     {offset
       cfQzP: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rfC6b_info" {
     lvl5_rfC6b_info:
         const lvl5_rfC6b_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.428799008 UTC

[section ""data" . Data.Semigroup.$fMonadLast_closure" {
     Data.Semigroup.$fMonadLast_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeLast_closure+1;
         const Data.Semigroup.$fMonadLast_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeLast_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const lvl5_rfC6b_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.432542075 UTC

[section ""data" . Data.Semigroup.$w$csconcat3_closure" {
     Data.Semigroup.$w$csconcat3_closure:
         const Data.Semigroup.$w$csconcat3_info;
 },
 go_sfP1A_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfQAd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQAe; else goto cfQAf;
       cfQAe: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQAf: // global
           I64[Sp - 32] = block_cfQA6_info;
           _sfP1A::P64 = R1;
           _sfP1x::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _sfP1x::P64;
           P64[Sp - 16] = _sfP1A::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQAp; else goto cfQA7;
       ufQAp: // global
           call _cfQA6(R1) args: 0, res: 0, upd: 0;
       cfQA7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfP1A_info" {
     go_sfP1A_info:
         const go_sfP1A_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfQA6() //  [R1]
         { []
         }
     {offset
       cfQA6: // global
           _sfP1B::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cfQAa; else goto cfQAb;
       cfQAa: // global
           R1 = _sfP1B::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQAb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfQAn; else goto cfQAm;
       cfQAn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQAm: // global
           _sfP1E::P64 = P64[R1 + 6];
           _sfP1F::P64 = P64[R1 + 14];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sfP1E::P64;
           P64[Hp] = _sfP1F::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfP1B::P64;
           P64[Sp + 24] = Hp - 32;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQA6_info" {
     block_cfQA6_info:
         const _cfQA6;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQAq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfQAu; else goto cfQAt;
       cfQAu: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQAt: // global
           I64[Hp - 8] = go_sfP1A_info;
           P64[Hp] = R2;
           _sfP1y::P64 = R3;
           R3 = R4;
           R2 = _sfP1y::P64;
           R1 = Hp - 6;
           call go_sfP1A_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat3_info" {
     Data.Semigroup.$w$csconcat3_info:
         const Data.Semigroup.$w$csconcat3_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.440970553 UTC

[section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cfQAW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQAX; else goto cfQAY;
       cfQAX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQAY: // global
           I64[Sp - 16] = block_cfQAT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQB2; else goto cfQAU;
       ufQB2: // global
           call _cfQAT(R1) args: 0, res: 0, upd: 0;
       cfQAU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQAT() //  [R1]
         { []
         }
     {offset
       cfQAT: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat3_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQAT_info" {
     block_cfQAT_info:
         const _cfQAT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.4485664 UTC

[section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_info;
         const 0;
 },
 sat_sfP1P_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQBm: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP1P_info" {
     sat_sfP1P_info:
         const sat_sfP1P_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+48;
 },
 sat_sfP1O_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQBu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupWrappedMonoid_$csconcat_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP1O_info" {
     sat_sfP1O_info:
         const sat_sfP1O_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP1N_entry() //  [R1]
         { []
         }
     {offset
       cfQBB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQBC; else goto cfQBD;
       cfQBC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQBD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP1N_info" {
     sat_sfP1N_info:
         const sat_sfP1N_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfQBF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfQBJ; else goto cfQBI;
       cfQBJ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQBI: // global
           I64[Hp - 80] = sat_sfP1P_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sfP1O_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfP1N_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+48;
 },
 section ""data" . Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info;
         const 0;
 },
 sat_sfP1S_entry() //  [R1]
         { []
         }
     {offset
       cfQBS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQBT; else goto cfQBU;
       cfQBT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQBU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP1S_info" {
     sat_sfP1S_info:
         const sat_sfP1S_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+56;
 },
 Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cfQBV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQBZ; else goto cfQBY;
       cfQBZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQBY: // global
           I64[Hp - 16] = sat_sfP1S_info;
           P64[Hp] = R2;
           _sfP1R::P64 = R3;
           R3 = Hp - 16;
           R2 = _sfP1R::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info" {
     Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_info:
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfPCb_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.462511331 UTC

[section ""data" . Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure" {
     Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure:
         const Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info;
 },
 z_sfP1V_entry() //  [R1]
         { []
         }
     {offset
       cfQCG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQCH; else goto cfQCI;
       cfQCH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQCI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfP1V_info" {
     z_sfP1V_info:
         const z_sfP1V_entry;
         const 1;
         const 16;
 },
 go_sfP1W_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQCV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQCW; else goto cfQCX;
       cfQCW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQCX: // global
           I64[Sp - 32] = block_cfQCO_info;
           _sfP1W::P64 = R1;
           _sfP1T::P64 = P64[R1 + 7];
           _sfP1V::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfP1T::P64;
           P64[Sp - 16] = _sfP1V::P64;
           P64[Sp - 8] = _sfP1W::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQD7; else goto cfQCP;
       ufQD7: // global
           call _cfQCO(R1) args: 0, res: 0, upd: 0;
       cfQCP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfP1W_info" {
     go_sfP1W_info:
         const go_sfP1W_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfQCO() //  [R1]
         { []
         }
     {offset
       cfQCO: // global
           if (R1 & 7 == 1) goto cfQCS; else goto cfQCT;
       cfQCS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQCT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQD5; else goto cfQD4;
       cfQD5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQD4: // global
           _sfP1Z::P64 = P64[R1 + 6];
           _sfP20::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfP20::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfP1Z::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQCO_info" {
     block_cfQCO_info:
         const _cfQCO;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQD8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQDc; else goto cfQDb;
       cfQDc: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQDb: // global
           I64[Hp - 40] = z_sfP1V_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_sfP1W_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 15;
           call go_sfP1W_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info" {
     Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_info:
         const Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.472986755 UTC

[section ""data" . Data.Semigroup.$fMonoidWrappedMonoid_closure" {
     Data.Semigroup.$fMonoidWrappedMonoid_closure:
         const Data.Semigroup.$fMonoidWrappedMonoid_info;
         const 0;
 },
 sat_sfP26_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQDN: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidWrappedMonoid_$cmconcat_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP26_info" {
     sat_sfP26_info:
         const sat_sfP26_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP25_entry() //  [R1]
         { []
         }
     {offset
       cfQDU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQDV; else goto cfQDW;
       cfQDV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQDW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP25_info" {
     sat_sfP25_info:
         const sat_sfP25_entry;
         const 1;
         const 16;
 },
 sat_sfP24_entry() //  [R1]
         { []
         }
     {offset
       cfQE1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQE2; else goto cfQE3;
       cfQE2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP24_info" {
     sat_sfP24_info:
         const sat_sfP24_entry;
         const 1;
         const 16;
 },
 sat_sfP23_entry() //  [R1]
         { []
         }
     {offset
       cfQE8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQE9; else goto cfQEa;
       cfQE9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQEa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP23_info" {
     sat_sfP23_info:
         const sat_sfP23_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+56;
 },
 Data.Semigroup.$fMonoidWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfQEc: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfQEg; else goto cfQEf;
       cfQEg: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQEf: // global
           I64[Hp - 120] = sat_sfP26_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfP25_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfP24_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP23_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 119;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidWrappedMonoid_info" {
     Data.Semigroup.$fMonoidWrappedMonoid_info:
         const Data.Semigroup.$fMonoidWrappedMonoid_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfPCb_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.484821658 UTC

[section ""data" . Data.Semigroup.$fFunctorOption1_closure" {
     Data.Semigroup.$fFunctorOption1_closure:
         const Data.Semigroup.$fFunctorOption1_info;
 },
 Data.Semigroup.$fFunctorOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQEY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQEZ; else goto cfQF0;
       cfQEZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFunctorOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQF0: // global
           I64[Sp - 16] = block_cfQER_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQFa; else goto cfQES;
       ufQFa: // global
           call _cfQER(R1) args: 0, res: 0, upd: 0;
       cfQES: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFunctorOption1_info" {
     Data.Semigroup.$fFunctorOption1_info:
         const Data.Semigroup.$fFunctorOption1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQER() //  [R1]
         { []
         }
     {offset
       cfQER: // global
           if (R1 & 7 == 1) goto cfQEV; else goto cfQEW;
       cfQEV: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQEW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfQF9; else goto cfQF8;
       cfQF9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQF8: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQER_info" {
     block_cfQER_info:
         const _cfQER;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.490207483 UTC

[section ""data" . Data.Semigroup.$fFunctorOption_closure" {
     Data.Semigroup.$fFunctorOption_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.$fApplicativeMaybe_$cfmap_closure+2;
         const Data.Semigroup.$fFunctorOption1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.492735653 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption_$c*>_closure" {
     Data.Semigroup.$fApplicativeOption_$c*>_closure:
         const Data.Semigroup.$fApplicativeOption_$c*>_info;
 },
 Data.Semigroup.$fApplicativeOption_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQFE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQFF; else goto cfQFG;
       cfQFF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fApplicativeOption_$c*>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQFG: // global
           I64[Sp - 16] = block_cfQFx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQFN; else goto cfQFy;
       ufQFN: // global
           call _cfQFx(R1) args: 0, res: 0, upd: 0;
       cfQFy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeOption_$c*>_info" {
     Data.Semigroup.$fApplicativeOption_$c*>_info:
         const Data.Semigroup.$fApplicativeOption_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQFx() //  [R1]
         { []
         }
     {offset
       cfQFx: // global
           if (R1 & 7 == 1) goto cfQFB; else goto cfQFC;
       cfQFB: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQFC: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQFx_info" {
     block_cfQFx_info:
         const _cfQFx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.499165015 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption1_closure" {
     Data.Semigroup.$fApplicativeOption1_closure:
         const Data.Semigroup.$fApplicativeOption1_info;
 },
 Data.Semigroup.$fApplicativeOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQGg; else goto cfQGh;
       cfQGg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fApplicativeOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQGh: // global
           I64[Sp - 16] = block_cfQG8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQGF; else goto cfQG9;
       ufQGF: // global
           call _cfQG8(R1) args: 0, res: 0, upd: 0;
       cfQG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fApplicativeOption1_info" {
     Data.Semigroup.$fApplicativeOption1_info:
         const Data.Semigroup.$fApplicativeOption1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQG8() //  [R1]
         { []
         }
     {offset
       cfQG8: // global
           if (R1 & 7 == 1) goto ufQGB; else goto cfQGd;
       ufQGB: // global
           Sp = Sp + 16;
           call _cfQGv() args: 0, res: 0, upd: 0;
       cfQGd: // global
           I64[Sp] = block_cfQGn_info;
           _sfP2h::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfP2h::P64;
           if (R1 & 7 != 0) goto ufQGD; else goto cfQGp;
       ufQGD: // global
           call _cfQGn(R1) args: 0, res: 0, upd: 0;
       cfQGp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQG8_info" {
     block_cfQG8_info:
         const _cfQG8;
         const 1;
         const 30;
 },
 _cfQGn() //  [R1]
         { []
         }
     {offset
       cfQGn: // global
           if (R1 & 7 == 1) goto ufQGC; else goto cfQGz;
       ufQGC: // global
           Sp = Sp + 16;
           call _cfQGv() args: 0, res: 0, upd: 0;
       cfQGz: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQGn_info" {
     block_cfQGn_info:
         const _cfQGn;
         const 1;
         const 30;
 },
 _cfQGv() //  []
         { []
         }
     {offset
       cfQGv: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.506361712 UTC

[section ""data" . Data.Semigroup.$fApplicativeOption_closure" {
     Data.Semigroup.$fApplicativeOption_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Semigroup.$fFunctorOption_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Base.$fApplicativeMaybe_$c<*>_closure+2;
         const GHC.Base.$fApplicativeMaybe_$cliftA2_closure+3;
         const Data.Semigroup.$fApplicativeOption_$c*>_closure+2;
         const Data.Semigroup.$fApplicativeOption1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.508974239 UTC

[section ""data" . Data.Semigroup.$fMonadOption_$c>>=_closure" {
     Data.Semigroup.$fMonadOption_$c>>=_closure:
         const Data.Semigroup.$fMonadOption_$c>>=_info;
 },
 Data.Semigroup.$fMonadOption_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQHi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQHj; else goto cfQHk;
       cfQHj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadOption_$c>>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQHk: // global
           I64[Sp - 16] = block_cfQHb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQHr; else goto cfQHc;
       ufQHr: // global
           call _cfQHb(R1) args: 0, res: 0, upd: 0;
       cfQHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadOption_$c>>=_info" {
     Data.Semigroup.$fMonadOption_$c>>=_info:
         const Data.Semigroup.$fMonadOption_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQHb() //  [R1]
         { []
         }
     {offset
       cfQHb: // global
           if (R1 & 7 == 1) goto cfQHf; else goto cfQHg;
       cfQHf: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQHg: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQHb_info" {
     block_cfQHb_info:
         const _cfQHb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.515074473 UTC

[section ""data" . lvl6_rfC6c_closure" {
     lvl6_rfC6c_closure:
         const lvl6_rfC6c_info;
         const 0;
 },
 lvl6_rfC6c_entry() //  [R2]
         { []
         }
     {offset
       cfQHK: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rfC6c_info" {
     lvl6_rfC6c_info:
         const lvl6_rfC6c_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.518026023 UTC

[section ""data" . Data.Semigroup.$fMonadOption_closure" {
     Data.Semigroup.$fMonadOption_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Semigroup.$fApplicativeOption_closure+1;
         const Data.Semigroup.$fMonadOption_$c>>=_closure+2;
         const Data.Semigroup.$fApplicativeOption_$c*>_closure+2;
         const GHC.Base.Just_closure+1;
         const lvl6_rfC6c_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.520620308 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$c<|>_closure" {
     Data.Semigroup.$fAlternativeOption_$c<|>_closure:
         const Data.Semigroup.$fAlternativeOption_$c<|>_info;
 },
 Data.Semigroup.$fAlternativeOption_$c<|>_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQI4; else goto cfQI5;
       cfQI4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$c<|>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQI5: // global
           I64[Sp - 16] = block_cfQHW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQIc; else goto cfQHX;
       ufQIc: // global
           call _cfQHW(R1) args: 0, res: 0, upd: 0;
       cfQHX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$c<|>_info" {
     Data.Semigroup.$fAlternativeOption_$c<|>_info:
         const Data.Semigroup.$fAlternativeOption_$c<|>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQHW() //  [R1]
         { []
         }
     {offset
       cfQHW: // global
           if (R1 & 7 == 1) goto cfQI0; else goto cfQI1;
       cfQI0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfQI1: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQHW_info" {
     block_cfQHW_info:
         const _cfQHW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.527790742 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$csome_closure" {
     Data.Semigroup.$fAlternativeOption_$csome_closure:
         const Data.Semigroup.$fAlternativeOption_$csome_info;
 },
 some_v_sfP2v_entry() //  [R1]
         { []
         }
     {offset
       cfQII: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQIJ; else goto cfQIK;
       cfQIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfQIB_info;
           _sfP2v::P64 = R1;
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfP2v::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQJd; else goto cfQIC;
       ufQJd: // global
           call _cfQIB(R1) args: 0, res: 0, upd: 0;
       cfQIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sfP2v_info" {
     some_v_sfP2v_info:
         const some_v_sfP2v_entry;
         const 1;
         const 16;
 },
 _cfQIB() //  [R1]
         { []
         }
     {offset
       cfQIB: // global
           if (R1 & 7 == 1) goto cfQIF; else goto cfQIG;
       cfQIF: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cfQIG: // global
           I64[Sp] = block_cfQIQ_info;
           _sfP2x::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfP2x::P64;
           if (R1 & 7 != 0) goto ufQJc; else goto cfQIS;
       ufQJc: // global
           call _cfQIQ(R1) args: 0, res: 0, upd: 0;
       cfQIS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQIB_info" {
     block_cfQIB_info:
         const _cfQIB;
         const 1;
         const 30;
 },
 _cfQIQ() //  [R1]
         { []
         }
     {offset
       cfQIQ: // global
           _sfP2x::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfQIZ; else goto cfQJ7;
       cfQIZ: // global
           Hp = Hp + 40;
           _sfP2y::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cfQJa; else goto cfQJ1;
       cfQJ1: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _sfP2x::P64;
           P64[Hp - 16] = GHC.Types.[]_closure+1;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cfQJ7: // global
           Hp = Hp + 40;
           _sfP2y::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cfQJa; else goto cfQJ9;
       cfQJa: // global
           HpAlloc = 40;
           R1 = _sfP2y::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfQJ9: // global
           _sfP2A::P64 = P64[_sfP2y::P64 + 6];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = _sfP2x::P64;
           P64[Hp - 16] = _sfP2A::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQIQ_info" {
     block_cfQIQ_info:
         const _cfQIQ;
         const 1;
         const 30;
 },
 Data.Semigroup.$fAlternativeOption_$csome_entry() //  [R2]
         { []
         }
     {offset
       cfQJe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQJi; else goto cfQJh;
       cfQJi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQJh: // global
           I64[Hp - 16] = some_v_sfP2v_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$csome_info" {
     Data.Semigroup.$fAlternativeOption_$csome_info:
         const Data.Semigroup.$fAlternativeOption_$csome_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.536743826 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption1_closure" {
     Data.Semigroup.$fAlternativeOption1_closure:
         const GHC.Base.Just_con_info;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.540425813 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_$cmany_closure" {
     Data.Semigroup.$fAlternativeOption_$cmany_closure:
         const Data.Semigroup.$fAlternativeOption_$cmany_info;
 },
 many_v_sfP2D_entry() //  [R1]
         { []
         }
     {offset
       cfQKb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQKc; else goto cfQKd;
       cfQKc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQKd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfQK4_info;
           _sfP2D::P64 = R1;
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfP2D::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufQKF; else goto cfQK5;
       ufQKF: // global
           call _cfQK4(R1) args: 0, res: 0, upd: 0;
       cfQK5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sfP2D_info" {
     many_v_sfP2D_info:
         const many_v_sfP2D_entry;
         const 1;
         const 16;
 },
 _cfQK4() //  [R1]
         { []
         }
     {offset
       cfQK4: // global
           if (R1 & 7 == 1) goto ufQKB; else goto cfQK9;
       ufQKB: // global
           Sp = Sp + 16;
           call _cfQKr() args: 0, res: 0, upd: 0;
       cfQK9: // global
           I64[Sp] = block_cfQKj_info;
           _sfP2F::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfP2F::P64;
           if (R1 & 7 != 0) goto ufQKD; else goto cfQKl;
       ufQKD: // global
           call _cfQKj(R1) args: 0, res: 0, upd: 0;
       cfQKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQK4_info" {
     block_cfQK4_info:
         const _cfQK4;
         const 1;
         const 30;
 },
 _cfQKj() //  [R1]
         { []
         }
     {offset
       cfQKj: // global
           if (R1 & 7 == 1) goto ufQKC; else goto cfQKw;
       ufQKC: // global
           Sp = Sp + 16;
           call _cfQKr() args: 0, res: 0, upd: 0;
       cfQKw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfQKz; else goto cfQKy;
       cfQKz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfQKy: // global
           _sfP2H::P64 = P64[R1 + 6];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfP2H::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 30;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQKj_info" {
     block_cfQKj_info:
         const _cfQKj;
         const 1;
         const 30;
 },
 _cfQKr() //  []
         { []
         }
     {offset
       cfQKr: // global
           R1 = Data.Semigroup.$fAlternativeOption1_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 Data.Semigroup.$fAlternativeOption_$cmany_entry() //  [R2]
         { []
         }
     {offset
       cfQKH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQKL; else goto cfQKK;
       cfQKL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fAlternativeOption_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQKK: // global
           I64[Hp - 16] = many_v_sfP2D_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fAlternativeOption_$cmany_info" {
     Data.Semigroup.$fAlternativeOption_$cmany_info:
         const Data.Semigroup.$fAlternativeOption_$cmany_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.550109158 UTC

[section ""data" . Data.Semigroup.$fAlternativeOption_closure" {
     Data.Semigroup.$fAlternativeOption_closure:
         const GHC.Base.C:Alternative_con_info;
         const Data.Semigroup.$fApplicativeOption_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Semigroup.$fAlternativeOption_$c<|>_closure+2;
         const Data.Semigroup.$fAlternativeOption_$csome_closure+1;
         const Data.Semigroup.$fAlternativeOption_$cmany_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.552063058 UTC

[section ""data" . Data.Semigroup.$fMonadPlusOption_closure" {
     Data.Semigroup.$fMonadPlusOption_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const Data.Semigroup.$fAlternativeOption_closure+1;
         const Data.Semigroup.$fMonadOption_closure+1;
         const GHC.Base.Nothing_closure+1;
         const Data.Semigroup.$fAlternativeOption_$c<|>_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.555073324 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldMap_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldMap_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldMap_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldMap_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQLx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQLy; else goto cfQLz;
       cfQLy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldMap_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQLz: // global
           I64[Sp - 24] = block_cfQLq_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQLG; else goto cfQLr;
       ufQLG: // global
           call _cfQLq(R1) args: 0, res: 0, upd: 0;
       cfQLr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldMap_info" {
     Data.Semigroup.$fFoldableOption_$cfoldMap_info:
         const Data.Semigroup.$fFoldableOption_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQLq() //  [R1]
         { []
         }
     {offset
       cfQLq: // global
           if (R1 & 7 == 1) goto cfQLu; else goto cfQLv;
       cfQLu: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       cfQLv: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQLq_info" {
     block_cfQLq_info:
         const _cfQLq;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.560923348 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfold_closure" {
     Data.Semigroup.$fFoldableOption_$cfold_closure:
         const Data.Semigroup.$fFoldableOption_$cfold_info;
 },
 Data.Semigroup.$fFoldableOption_$cfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQM4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQM5; else goto cfQM6;
       cfQM5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQM6: // global
           I64[Sp - 16] = block_cfQLX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQMd; else goto cfQLY;
       ufQMd: // global
           call _cfQLX(R1) args: 0, res: 0, upd: 0;
       cfQLY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfold_info" {
     Data.Semigroup.$fFoldableOption_$cfold_info:
         const Data.Semigroup.$fFoldableOption_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQLX() //  [R1]
         { []
         }
     {offset
       cfQLX: // global
           if (R1 & 7 == 1) goto cfQM1; else goto cfQM2;
       cfQM1: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
       cfQM2: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQLX_info" {
     block_cfQLX_info:
         const _cfQLX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.566598388 UTC

[section ""data" . Data.Semigroup.$fFoldableOption2_closure" {
     Data.Semigroup.$fFoldableOption2_closure:
         const Data.Semigroup.$fFoldableOption2_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption2_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQMC; else goto cfQMD;
       cfQMC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQMD: // global
           I64[Sp - 16] = block_cfQMu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQMK; else goto cfQMv;
       ufQMK: // global
           call _cfQMu(R1) args: 0, res: 0, upd: 0;
       cfQMv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption2_info" {
     Data.Semigroup.$fFoldableOption2_info:
         const Data.Semigroup.$fFoldableOption2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+80;
 },
 _cfQMu() //  [R1]
         { []
         }
     {offset
       cfQMu: // global
           if (R1 & 7 == 1) goto cfQMy; else goto cfQMz;
       cfQMy: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
       cfQMz: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQMu_info" {
     block_cfQMu_info:
         const _cfQMu;
         const 1;
         const 4294967326;
         const SfPCb_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.571515117 UTC

[section ""cstring" . lvl7_rfC6d_bytes" {
     lvl7_rfC6d_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.574433647 UTC

[section ""data" . Data.Semigroup.$fFoldableOption4_closure" {
     Data.Semigroup.$fFoldableOption4_closure:
         const Data.Semigroup.$fFoldableOption4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption4_entry() //  [R1]
         { []
         }
     {offset
       cfQN6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQN7; else goto cfQN8;
       cfQN7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQN8: // global
           (_cfQN1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQN1::I64 == 0) goto cfQN3; else goto cfQN2;
       cfQN3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQN2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQN1::I64;
           I64[Sp - 24] = block_cfQN4_info;
           R2 = lvl7_rfC6d_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption4_info" {
     Data.Semigroup.$fFoldableOption4_info:
         const Data.Semigroup.$fFoldableOption4_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+24;
 },
 _cfQN4() //  [R1]
         { []
         }
     {offset
       cfQN4: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQN4_info" {
     block_cfQN4_info:
         const _cfQN4;
         const 0;
         const 4294967326;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.580195258 UTC

[section ""data" . Data.Semigroup.$fFoldableOption3_closure" {
     Data.Semigroup.$fFoldableOption3_closure:
         const Data.Semigroup.$fFoldableOption3_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption3_entry() //  [R2]
         { []
         }
     {offset
       cfQNz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQNA; else goto cfQNB;
       cfQNA: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQNB: // global
           I64[Sp - 8] = block_cfQNs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQNI; else goto cfQNt;
       ufQNI: // global
           call _cfQNs(R1) args: 0, res: 0, upd: 0;
       cfQNt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption3_info" {
     Data.Semigroup.$fFoldableOption3_info:
         const Data.Semigroup.$fFoldableOption3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+96;
 },
 _cfQNs() //  [R1]
         { []
         }
     {offset
       cfQNs: // global
           if (R1 & 7 == 1) goto cfQNw; else goto cfQNx;
       cfQNw: // global
           R1 = Data.Semigroup.$fFoldableOption4_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQNx: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQNs_info" {
     block_cfQNs_info:
         const _cfQNs;
         const 0;
         const 4294967326;
         const SfPCb_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.586023033 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cminimum_closure" {
     Data.Semigroup.$fFoldableOption_$cminimum_closure:
         const Data.Semigroup.$fFoldableOption_$cminimum_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cminimum_entry() //  [R3]
         { []
         }
     {offset
       cfQNZ: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableOption3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cminimum_info" {
     Data.Semigroup.$fFoldableOption_$cminimum_info:
         const Data.Semigroup.$fFoldableOption_$cminimum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfPCb_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.589142068 UTC

[section ""cstring" . lvl8_rfC6e_bytes" {
     lvl8_rfC6e_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.592089046 UTC

[section ""data" . Data.Semigroup.$fFoldableOption6_closure" {
     Data.Semigroup.$fFoldableOption6_closure:
         const Data.Semigroup.$fFoldableOption6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption6_entry() //  [R1]
         { []
         }
     {offset
       cfQOf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQOg; else goto cfQOh;
       cfQOg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQOh: // global
           (_cfQOa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQOa::I64 == 0) goto cfQOc; else goto cfQOb;
       cfQOc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQOb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQOa::I64;
           I64[Sp - 24] = block_cfQOd_info;
           R2 = lvl8_rfC6e_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption6_info" {
     Data.Semigroup.$fFoldableOption6_info:
         const Data.Semigroup.$fFoldableOption6_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+24;
 },
 _cfQOd() //  [R1]
         { []
         }
     {offset
       cfQOd: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQOd_info" {
     block_cfQOd_info:
         const _cfQOd;
         const 0;
         const 4294967326;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.597788919 UTC

[section ""data" . Data.Semigroup.$fFoldableOption5_closure" {
     Data.Semigroup.$fFoldableOption5_closure:
         const Data.Semigroup.$fFoldableOption5_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption5_entry() //  [R2]
         { []
         }
     {offset
       cfQOI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQOJ; else goto cfQOK;
       cfQOJ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQOK: // global
           I64[Sp - 8] = block_cfQOB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQOR; else goto cfQOC;
       ufQOR: // global
           call _cfQOB(R1) args: 0, res: 0, upd: 0;
       cfQOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption5_info" {
     Data.Semigroup.$fFoldableOption5_info:
         const Data.Semigroup.$fFoldableOption5_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+112;
 },
 _cfQOB() //  [R1]
         { []
         }
     {offset
       cfQOB: // global
           if (R1 & 7 == 1) goto cfQOF; else goto cfQOG;
       cfQOF: // global
           R1 = Data.Semigroup.$fFoldableOption6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQOG: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQOB_info" {
     block_cfQOB_info:
         const _cfQOB;
         const 0;
         const 4294967326;
         const SfPCb_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.603380249 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cmaximum_closure" {
     Data.Semigroup.$fFoldableOption_$cmaximum_closure:
         const Data.Semigroup.$fFoldableOption_$cmaximum_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cmaximum_entry() //  [R3]
         { []
         }
     {offset
       cfQP8: // global
           R2 = R3;
           call Data.Semigroup.$fFoldableOption5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cmaximum_info" {
     Data.Semigroup.$fFoldableOption_$cmaximum_info:
         const Data.Semigroup.$fFoldableOption_$cmaximum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfPCb_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.608113008 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$celem_closure" {
     Data.Semigroup.$fFoldableOption_$celem_closure:
         const Data.Semigroup.$fFoldableOption_$celem_info;
 },
 f_sfP38_entry() //  [R1]
         { []
         }
     {offset
       cfQPn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQPo; else goto cfQPp;
       cfQPo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQPp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfP38_info" {
     f_sfP38_info:
         const f_sfP38_entry;
         const 2;
         const 18;
 },
 sat_sfP3c_entry() //  [R1, R2]
         { []
         }
     {offset
       cfQPC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQPD; else goto cfQPE;
       cfQPD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQPE: // global
           I64[Sp - 16] = block_cfQPv_info;
           _sfP38::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sfP38::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQPL; else goto cfQPw;
       ufQPL: // global
           call _cfQPv(R1) args: 0, res: 0, upd: 0;
       cfQPw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP3c_info" {
     sat_sfP3c_info:
         const sat_sfP3c_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfQPv() //  [R1]
         { []
         }
     {offset
       cfQPv: // global
           if (R1 & 7 == 1) goto cfQPz; else goto cfQPA;
       cfQPz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQPA: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQPv_info" {
     block_cfQPv_info:
         const _cfQPv;
         const 1;
         const 30;
 },
 Data.Semigroup.$fFoldableOption_$celem_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQPM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfQPQ; else goto cfQPP;
       cfQPQ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$celem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQPP: // global
           I64[Hp - 40] = f_sfP38_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sfP3c_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$celem_info" {
     Data.Semigroup.$fFoldableOption_$celem_info:
         const Data.Semigroup.$fFoldableOption_$celem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.61629558 UTC

[section ""data" . Data.Semigroup.$fFoldableOption7_closure" {
     Data.Semigroup.$fFoldableOption7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.619346721 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldl_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldl_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldl_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQQv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQQw; else goto cfQQx;
       cfQQw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQQx: // global
           I64[Sp - 24] = block_cfQQo_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQQE; else goto cfQQp;
       ufQQE: // global
           call _cfQQo(R1) args: 0, res: 0, upd: 0;
       cfQQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldl_info" {
     Data.Semigroup.$fFoldableOption_$cfoldl_info:
         const Data.Semigroup.$fFoldableOption_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQQo() //  [R1]
         { []
         }
     {offset
       cfQQo: // global
           _sfP3e::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfQQs; else goto cfQQt;
       cfQQs: // global
           R1 = _sfP3e::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQQt: // global
           R3 = P64[R1 + 6];
           R2 = _sfP3e::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQQo_info" {
     block_cfQQo_info:
         const _cfQQo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.625107231 UTC

[section ""cstring" . lvl9_rfC6f_bytes" {
     lvl9_rfC6f_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.627548508 UTC

[section ""data" . Data.Semigroup.$fFoldableOption8_closure" {
     Data.Semigroup.$fFoldableOption8_closure:
         const Data.Semigroup.$fFoldableOption8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption8_entry() //  [R1]
         { []
         }
     {offset
       cfQR0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQR1; else goto cfQR2;
       cfQR1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQR2: // global
           (_cfQQV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQQV::I64 == 0) goto cfQQX; else goto cfQQW;
       cfQQX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQQW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQQV::I64;
           I64[Sp - 24] = block_cfQQY_info;
           R2 = lvl9_rfC6f_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption8_info" {
     Data.Semigroup.$fFoldableOption8_info:
         const Data.Semigroup.$fFoldableOption8_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+24;
 },
 _cfQQY() //  [R1]
         { []
         }
     {offset
       cfQQY: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQQY_info" {
     block_cfQQY_info:
         const _cfQQY;
         const 0;
         const 4294967326;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.633234732 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldl1_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldl1_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldl1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cfoldl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQRt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQRu; else goto cfQRv;
       cfQRu: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQRv: // global
           I64[Sp - 8] = block_cfQRm_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQRC; else goto cfQRn;
       ufQRC: // global
           call _cfQRm(R1) args: 0, res: 0, upd: 0;
       cfQRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldl1_info" {
     Data.Semigroup.$fFoldableOption_$cfoldl1_info:
         const Data.Semigroup.$fFoldableOption_$cfoldl1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+128;
 },
 _cfQRm() //  [R1]
         { []
         }
     {offset
       cfQRm: // global
           if (R1 & 7 == 1) goto cfQRq; else goto cfQRr;
       cfQRq: // global
           R1 = Data.Semigroup.$fFoldableOption8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQRr: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQRm_info" {
     block_cfQRm_info:
         const _cfQRm;
         const 0;
         const 4294967326;
         const SfPCb_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.639380502 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldr'_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldr'_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldr'_info;
 },
 Data.Semigroup.$fFoldableOption_$cfoldr'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQS0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQS1; else goto cfQS2;
       cfQS1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldr'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQS2: // global
           I64[Sp - 24] = block_cfQRT_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQS9; else goto cfQRU;
       ufQS9: // global
           call _cfQRT(R1) args: 0, res: 0, upd: 0;
       cfQRU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldr'_info" {
     Data.Semigroup.$fFoldableOption_$cfoldr'_info:
         const Data.Semigroup.$fFoldableOption_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQRT() //  [R1]
         { []
         }
     {offset
       cfQRT: // global
           _sfP3o::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfQRX; else goto cfQRY;
       cfQRX: // global
           R1 = _sfP3o::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQRY: // global
           R3 = _sfP3o::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQRT_info" {
     block_cfQRT_info:
         const _cfQRT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.645202371 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$clength_closure" {
     Data.Semigroup.$fFoldableOption_$clength_closure:
         const Data.Semigroup.$fFoldableOption_$clength_info;
 },
 Data.Semigroup.$fFoldableOption_$clength_entry() //  [R2]
         { []
         }
     {offset
       cfQSx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQSy; else goto cfQSz;
       cfQSy: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$clength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQSz: // global
           I64[Sp - 8] = block_cfQSq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQSG; else goto cfQSr;
       ufQSG: // global
           call _cfQSq(R1) args: 0, res: 0, upd: 0;
       cfQSr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$clength_info" {
     Data.Semigroup.$fFoldableOption_$clength_info:
         const Data.Semigroup.$fFoldableOption_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQSq() //  [R1]
         { []
         }
     {offset
       cfQSq: // global
           if (R1 & 7 == 1) goto cfQSu; else goto cfQSv;
       cfQSu: // global
           R1 = Data.Semigroup.$fFoldableOption7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQSv: // global
           R1 = Data.Semigroup.$fFoldableFirst3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQSq_info" {
     block_cfQSq_info:
         const _cfQSq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.650247791 UTC

[section ""cstring" . lvl10_rfC6g_bytes" {
     lvl10_rfC6g_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.652734476 UTC

[section ""data" . Data.Semigroup.$fFoldableOption9_closure" {
     Data.Semigroup.$fFoldableOption9_closure:
         const Data.Semigroup.$fFoldableOption9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fFoldableOption9_entry() //  [R1]
         { []
         }
     {offset
       cfQT4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQT5; else goto cfQT6;
       cfQT5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQT6: // global
           (_cfQSZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQSZ::I64 == 0) goto cfQT1; else goto cfQT0;
       cfQT1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQT0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQSZ::I64;
           I64[Sp - 24] = block_cfQT2_info;
           R2 = lvl10_rfC6g_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption9_info" {
     Data.Semigroup.$fFoldableOption9_info:
         const Data.Semigroup.$fFoldableOption9_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+24;
 },
 _cfQT2() //  [R1]
         { []
         }
     {offset
       cfQT2: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQT2_info" {
     block_cfQT2_info:
         const _cfQT2;
         const 0;
         const 4294967326;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.659133551 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cfoldr1_closure" {
     Data.Semigroup.$fFoldableOption_$cfoldr1_closure:
         const Data.Semigroup.$fFoldableOption_$cfoldr1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption_$cfoldr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQTx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQTy; else goto cfQTz;
       cfQTy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cfoldr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQTz: // global
           I64[Sp - 8] = block_cfQTq_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQTG; else goto cfQTr;
       ufQTG: // global
           call _cfQTq(R1) args: 0, res: 0, upd: 0;
       cfQTr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cfoldr1_info" {
     Data.Semigroup.$fFoldableOption_$cfoldr1_info:
         const Data.Semigroup.$fFoldableOption_$cfoldr1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+144;
 },
 _cfQTq() //  [R1]
         { []
         }
     {offset
       cfQTq: // global
           if (R1 & 7 == 1) goto cfQTu; else goto cfQTv;
       cfQTu: // global
           R1 = Data.Semigroup.$fFoldableOption9_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfQTv: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQTq_info" {
     block_cfQTq_info:
         const _cfQTq;
         const 0;
         const 4294967326;
         const SfPCb_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.665086539 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$cnull_closure" {
     Data.Semigroup.$fFoldableOption_$cnull_closure:
         const Data.Semigroup.$fFoldableOption_$cnull_info;
 },
 Data.Semigroup.$fFoldableOption_$cnull_entry() //  [R2]
         { []
         }
     {offset
       cfQU4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQU5; else goto cfQU6;
       cfQU5: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$cnull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQU6: // global
           I64[Sp - 8] = block_cfQTX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQUd; else goto cfQTY;
       ufQUd: // global
           call _cfQTX(R1) args: 0, res: 0, upd: 0;
       cfQTY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$cnull_info" {
     Data.Semigroup.$fFoldableOption_$cnull_info:
         const Data.Semigroup.$fFoldableOption_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQTX() //  [R1]
         { []
         }
     {offset
       cfQTX: // global
           if (R1 & 7 == 1) goto cfQU1; else goto cfQU2;
       cfQU1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQU2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQTX_info" {
     block_cfQTX_info:
         const _cfQTX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.670693467 UTC

[section ""data" . Data.Semigroup.$fFoldableOption1_closure" {
     Data.Semigroup.$fFoldableOption1_closure:
         const Data.Semigroup.$fFoldableOption1_info;
         const 0;
 },
 Data.Semigroup.$fFoldableOption1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQUF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQUG; else goto cfQUH;
       cfQUG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQUH: // global
           I64[Sp - 16] = block_cfQUy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQUO; else goto cfQUz;
       ufQUO: // global
           call _cfQUy(R1) args: 0, res: 0, upd: 0;
       cfQUz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption1_info" {
     Data.Semigroup.$fFoldableOption1_info:
         const Data.Semigroup.$fFoldableOption1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+160;
 },
 _cfQUy() //  [R1]
         { []
         }
     {offset
       cfQUy: // global
           if (R1 & 7 == 1) goto cfQUC; else goto cfQUD;
       cfQUC: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
       cfQUD: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQUy_info" {
     block_cfQUy_info:
         const _cfQUy;
         const 1;
         const 4294967326;
         const SfPCb_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.676794157 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_$ctoList_closure" {
     Data.Semigroup.$fFoldableOption_$ctoList_closure:
         const Data.Semigroup.$fFoldableOption_$ctoList_info;
 },
 Data.Semigroup.$fFoldableOption_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cfQVc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfQVd; else goto cfQVe;
       cfQVd: // global
           R2 = R2;
           R1 = Data.Semigroup.$fFoldableOption_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfQVe: // global
           I64[Sp - 8] = block_cfQV5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufQVo; else goto cfQV6;
       ufQVo: // global
           call _cfQV5(R1) args: 0, res: 0, upd: 0;
       cfQV6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fFoldableOption_$ctoList_info" {
     Data.Semigroup.$fFoldableOption_$ctoList_info:
         const Data.Semigroup.$fFoldableOption_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfQV5() //  [R1]
         { []
         }
     {offset
       cfQV5: // global
           if (R1 & 7 == 1) goto cfQV9; else goto cfQVa;
       cfQV9: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfQVa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfQVn; else goto cfQVm;
       cfQVn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQVm: // global
           _sfP3J::P64 = P64[R1 + 6];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfP3J::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQV5_info" {
     block_cfQV5_info:
         const _cfQV5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.682196119 UTC

[section ""data" . Data.Semigroup.$fFoldableOption_closure" {
     Data.Semigroup.$fFoldableOption_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Semigroup.$fFoldableOption_$cfold_closure+2;
         const Data.Semigroup.$fFoldableOption_$cfoldMap_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr'_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldl_closure+3;
         const Data.Semigroup.$fFoldableOption_$cfoldr1_closure+2;
         const Data.Semigroup.$fFoldableOption_$cfoldl1_closure+2;
         const Data.Semigroup.$fFoldableOption_$ctoList_closure+1;
         const Data.Semigroup.$fFoldableOption_$cnull_closure+1;
         const Data.Semigroup.$fFoldableOption_$clength_closure+1;
         const Data.Semigroup.$fFoldableOption_$celem_closure+2;
         const Data.Semigroup.$fFoldableOption_$cmaximum_closure+2;
         const Data.Semigroup.$fFoldableOption_$cminimum_closure+2;
         const Data.Semigroup.$fFoldableOption2_closure+2;
         const Data.Semigroup.$fFoldableOption1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.685843341 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$ctraverse_closure" {
     Data.Semigroup.$fTraversableOption_$ctraverse_closure:
         const Data.Semigroup.$fTraversableOption_$ctraverse_info;
 },
 Data.Semigroup.$fTraversableOption_$ctraverse_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfQVT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQVU; else goto cfQVV;
       cfQVU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$ctraverse_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQVV: // global
           I64[Sp - 24] = block_cfQVM_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufQWa; else goto cfQVN;
       ufQWa: // global
           call _cfQVM(R1) args: 0, res: 0, upd: 0;
       cfQVN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$ctraverse_info" {
     Data.Semigroup.$fTraversableOption_$ctraverse_info:
         const Data.Semigroup.$fTraversableOption_$ctraverse_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQVM() //  [R1]
         { []
         }
     {offset
       cfQVM: // global
           _sfP3K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfQVQ; else goto cfQVR;
       cfQVQ: // global
           R2 = _sfP3K::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cfQVR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfQW5; else goto cfQW4;
       cfQW5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfQW4: // global
           _sfP3O::P64 = P64[R1 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sfP3O::P64;
           I64[Sp + 8] = block_cfQW2_info;
           R2 = _sfP3K::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQVM_info" {
     block_cfQVM_info:
         const _cfQVM;
         const 2;
         const 30;
 },
 _cfQW2() //  [R1]
         { []
         }
     {offset
       cfQW2: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQW2_info" {
     block_cfQW2_info:
         const _cfQW2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.694614708 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$csequenceA_closure" {
     Data.Semigroup.$fTraversableOption_$csequenceA_closure:
         const Data.Semigroup.$fTraversableOption_$csequenceA_info;
 },
 Data.Semigroup.$fTraversableOption_$csequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQWL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQWM; else goto cfQWN;
       cfQWM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$csequenceA_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQWN: // global
           I64[Sp - 16] = block_cfQWE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQWZ; else goto cfQWF;
       ufQWZ: // global
           call _cfQWE(R1) args: 0, res: 0, upd: 0;
       cfQWF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$csequenceA_info" {
     Data.Semigroup.$fTraversableOption_$csequenceA_info:
         const Data.Semigroup.$fTraversableOption_$csequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQWE() //  [R1]
         { []
         }
     {offset
       cfQWE: // global
           _sfP3R::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfQWI; else goto cfQWJ;
       cfQWI: // global
           R2 = _sfP3R::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
       cfQWJ: // global
           I64[Sp] = block_cfQWT_info;
           R2 = _sfP3R::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQWE_info" {
     block_cfQWE_info:
         const _cfQWE;
         const 1;
         const 30;
 },
 _cfQWT() //  [R1]
         { []
         }
     {offset
       cfQWT: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQWT_info" {
     block_cfQWT_info:
         const _cfQWT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.702049347 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$cmapM_closure" {
     Data.Semigroup.$fTraversableOption_$cmapM_closure:
         const Data.Semigroup.$fTraversableOption_$cmapM_info;
 },
 Data.Semigroup.$fTraversableOption_$cmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfQXt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQXu; else goto cfQXv;
       cfQXu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$cmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQXv: // global
           I64[Sp - 24] = block_cfQXr_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$cmapM_info" {
     Data.Semigroup.$fTraversableOption_$cmapM_info:
         const Data.Semigroup.$fTraversableOption_$cmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfQXr() //  [R1]
         { []
         }
     {offset
       cfQXr: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call Data.Semigroup.$fTraversableOption_$ctraverse_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQXr_info" {
     block_cfQXr_info:
         const _cfQXr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.70814764 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_$csequence_closure" {
     Data.Semigroup.$fTraversableOption_$csequence_closure:
         const Data.Semigroup.$fTraversableOption_$csequence_info;
 },
 Data.Semigroup.$fTraversableOption_$csequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cfQXT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQXU; else goto cfQXV;
       cfQXU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fTraversableOption_$csequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfQXV: // global
           I64[Sp - 16] = block_cfQXM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufQYh; else goto cfQXN;
       ufQYh: // global
           call _cfQXM(R1) args: 0, res: 0, upd: 0;
       cfQXN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fTraversableOption_$csequence_info" {
     Data.Semigroup.$fTraversableOption_$csequence_info:
         const Data.Semigroup.$fTraversableOption_$csequence_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfQXM() //  [R1]
         { []
         }
     {offset
       cfQXM: // global
           _sfP40::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfQXQ; else goto cfQXR;
       cfQXQ: // global
           I64[Sp + 8] = block_cfQXY_info;
           R2 = _sfP40::P64;
           Sp = Sp + 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
       cfQXR: // global
           I64[Sp] = block_cfQY6_info;
           R2 = _sfP40::P64;
           P64[Sp + 8] = P64[R1 + 6];
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQXM_info" {
     block_cfQXM_info:
         const _cfQXM;
         const 1;
         const 30;
 },
 _cfQXY() //  [R1]
         { []
         }
     {offset
       cfQXY: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQXY_info" {
     block_cfQXY_info:
         const _cfQXY;
         const 0;
         const 30;
 },
 _cfQY6() //  [R1]
         { []
         }
     {offset
       cfQY6: // global
           I64[Sp] = block_cfQYa_info;
           R2 = R1;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQY6_info" {
     block_cfQY6_info:
         const _cfQY6;
         const 1;
         const 30;
 },
 _cfQYa() //  [R1]
         { []
         }
     {offset
       cfQYa: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQYa_info" {
     block_cfQYa_info:
         const _cfQYa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.717838296 UTC

[section ""data" . Data.Semigroup.$fTraversableOption_closure" {
     Data.Semigroup.$fTraversableOption_closure:
         const Data.Traversable.C:Traversable_con_info;
         const Data.Semigroup.$fFunctorOption_closure+1;
         const Data.Semigroup.$fFoldableOption_closure+1;
         const Data.Semigroup.$fTraversableOption_$ctraverse_closure+3;
         const Data.Semigroup.$fTraversableOption_$csequenceA_closure+2;
         const Data.Semigroup.$fTraversableOption_$cmapM_closure+3;
         const Data.Semigroup.$fTraversableOption_$csequence_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.719600767 UTC

[section ""cstring" . lvl11_rfC6h_bytes" {
     lvl11_rfC6h_bytes:
         I8[] [115,116,105,109,101,115,58,32,79,112,116,105,111,110,44,32,110,101,103,97,116,105,118,101,32,109,117,108,116,105,112,108,105,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.722198579 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption1_closure" {
     Data.Semigroup.$fSemigroupOption1_closure:
         const Data.Semigroup.$fSemigroupOption1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fSemigroupOption1_entry() //  [R1]
         { []
         }
     {offset
       cfQYX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfQYY; else goto cfQYZ;
       cfQYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQYZ: // global
           (_cfQYS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQYS::I64 == 0) goto cfQYU; else goto cfQYT;
       cfQYU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQYT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQYS::I64;
           I64[Sp - 24] = block_cfQYV_info;
           R2 = lvl11_rfC6h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption1_info" {
     Data.Semigroup.$fSemigroupOption1_info:
         const Data.Semigroup.$fSemigroupOption1_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+24;
 },
 _cfQYV() //  [R1]
         { []
         }
     {offset
       cfQYV: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQYV_info" {
     block_cfQYV_info:
         const _cfQYV;
         const 0;
         const 4294967326;
         const SfPCb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.728405253 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption2_closure" {
     Data.Semigroup.$fSemigroupOption2_closure:
         const Data.Semigroup.$fSemigroupOption2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fSemigroupOption2_entry() //  [R1]
         { []
         }
     {offset
       cfQZl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfQZm; else goto cfQZn;
       cfQZm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQZn: // global
           (_cfQZi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfQZi::I64 == 0) goto cfQZk; else goto cfQZj;
       cfQZk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfQZj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfQZi::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption2_info" {
     Data.Semigroup.$fSemigroupOption2_info:
         const Data.Semigroup.$fSemigroupOption2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.735885322 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_$cstimes_closure" {
     Data.Semigroup.$fSemigroupOption_$cstimes_closure:
         const Data.Semigroup.$fSemigroupOption_$cstimes_info;
         const 0;
 },
 sat_sfP4h_entry() //  [R1]
         { []
         }
     {offset
       cfQZS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfQZT; else goto cfQZU;
       cfQZT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfQZU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfQZQ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP4h_info" {
     sat_sfP4h_info:
         const sat_sfP4h_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+176;
 },
 _cfQZQ() //  [R1]
         { []
         }
     {offset
       cfQZQ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.$fSemigroupOption2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfQZQ_info" {
     block_cfQZQ_info:
         const _cfQZQ;
         const 0;
         const 4294967326;
         const SfPCb_srt+176;
 },
 sat_sfP4j_entry() //  [R1]
         { []
         }
     {offset
       cfR0c: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfR0d; else goto cfR0e;
       cfR0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.stimes_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP4j_info" {
     sat_sfP4j_info:
         const sat_sfP4j_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$fSemigroupOption_$cstimes_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cfR0j: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfR0k; else goto cfR0l;
       cfR0k: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_$cstimes_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfR0l: // global
           I64[Sp - 32] = block_cfQZC_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufR0L; else goto cfQZD;
       ufR0L: // global
           call _cfQZC(R1) args: 0, res: 0, upd: 0;
       cfQZD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_$cstimes_info" {
     Data.Semigroup.$fSemigroupOption_$cstimes_info:
         const Data.Semigroup.$fSemigroupOption_$cstimes_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SfPCb_srt+176;
 },
 _cfQZC() //  [R1]
         { []
         }
     {offset
       cfQZC: // global
           if (R1 & 7 == 1) goto ufR0H; else goto cfR0h;
       ufR0H: // global
           Sp = Sp + 32;
           call _cfR0z() args: 0, res: 0, upd: 0;
       cfR0h: // global
           I64[Sp - 8] = block_cfQZI_info;
           R2 = P64[Sp + 16];
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQZC_info" {
     block_cfQZC_info:
         const _cfQZC;
         const 3;
         const 21474836510;
         const SfPCb_srt+176;
 },
 _cfQZI() //  [R1]
         { []
         }
     {offset
       cfQZI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfR0r; else goto cfR0q;
       cfR0r: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfR0q: // global
           I64[Hp - 16] = sat_sfP4h_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cfQZY_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQZI_info" {
     block_cfQZI_info:
         const _cfQZI;
         const 4;
         const 21474836510;
         const SfPCb_srt+176;
 },
 _cfQZY() //  [R1]
         { []
         }
     {offset
       cfQZY: // global
           _cfQZM::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfR02_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _cfQZM::P64;
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfQZY_info" {
     block_cfQZY_info:
         const _cfQZY;
         const 5;
         const 4294967326;
         const SfPCb_srt+192;
 },
 _cfR02() //  [R1]
         { []
         }
     {offset
       cfR02: // global
           _cfR0F::P64 = R1 & 7;
           if (_cfR0F::P64 < 3) goto ufR0G; else goto cfR0B;
       ufR0G: // global
           if (_cfR0F::P64 < 2) goto cfR0w; else goto ufR0I;
       cfR0w: // global
           R1 = Data.Semigroup.$fSemigroupOption1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ufR0I: // global
           Sp = Sp + 40;
           call _cfR0z() args: 0, res: 0, upd: 0;
       cfR0B: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfR0E; else goto cfR0D;
       cfR0E: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfR0D: // global
           I64[Hp - 56] = sat_sfP4j_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR02_info" {
     block_cfR02_info:
         const _cfR02;
         const 4;
         const 4294967326;
         const SfPCb_srt+192;
 },
 _cfR0z() //  []
         { []
         }
     {offset
       cfR0z: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.754888677 UTC

[section ""data" . Data.Semigroup.$w$csconcat2_closure" {
     Data.Semigroup.$w$csconcat2_closure:
         const Data.Semigroup.$w$csconcat2_info;
 },
 sat_sfP4x_entry() //  [R1]
         { []
         }
     {offset
       cfR2h: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfR2i; else goto cfR2j;
       cfR2i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR2j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP4x_info" {
     sat_sfP4x_info:
         const sat_sfP4x_entry;
         const 3;
         const 15;
 },
 go_sfP4n_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfR2o: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfR2p; else goto ufR2L;
       cfR2p: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufR2L: // global
           P64[Sp - 24] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call _cfR1T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sfP4n_info" {
     go_sfP4n_info:
         const go_sfP4n_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cfR1T() //  []
         { []
         }
     {offset
       cfR1T: // global
           _sfP4k::P64 = P64[P64[Sp] + 6];
           I64[Sp - 8] = block_cfR1W_info;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfP4k::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufR2N; else goto cfR1X;
       ufR2N: // global
           call _cfR1W(R1) args: 0, res: 0, upd: 0;
       cfR1X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfR1W() //  [R1]
         { []
         }
     {offset
       cfR1W: // global
           _sfP4o::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfR2l; else goto cfR2m;
       cfR2l: // global
           R1 = _sfP4o::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfR2m: // global
           I64[Sp - 8] = block_cfR22_info;
           _sfP4r::P64 = P64[R1 + 6];
           _sfP4s::P64 = P64[R1 + 14];
           R1 = _sfP4o::P64;
           P64[Sp] = _sfP4s::P64;
           P64[Sp + 16] = _sfP4r::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufR2O; else goto cfR23;
       ufR2O: // global
           call _cfR22(R1) args: 0, res: 0, upd: 0;
       cfR23: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR1W_info" {
     block_cfR1W_info:
         const _cfR1W;
         const 3;
         const 30;
 },
 _cfR22() //  [R1]
         { []
         }
     {offset
       cfR22: // global
           _sfP4r::P64 = P64[Sp + 24];
           _sfP4s::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfR2x; else goto cfR2z;
       cfR2x: // global
           P64[Sp + 24] = _sfP4r::P64;
           P64[Sp + 32] = _sfP4s::P64;
           Sp = Sp + 16;
           call _cfR1T() args: 0, res: 0, upd: 0;
       cfR2z: // global
           I64[Sp + 8] = block_cfR28_info;
           R3 = _sfP4s::P64;
           R2 = _sfP4r::P64;
           _sfP4t::P64 = R1;
           _sfP4u::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sfP4u::P64;
           P64[Sp + 24] = _sfP4t::P64;
           Sp = Sp + 8;
           call go_sfP4n_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR22_info" {
     block_cfR22_info:
         const _cfR22;
         const 4;
         const 30;
 },
 _cfR28() //  [R1]
         { []
         }
     {offset
       cfR28: // global
           if (R1 & 7 == 1) goto cfR2D; else goto cfR2F;
       cfR2D: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfR2F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfR2I; else goto cfR2H;
       cfR2I: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfR2H: // global
           _sfP4w::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfP4x_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfP4w::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR28_info" {
     block_cfR28_info:
         const _cfR28;
         const 3;
         const 30;
 },
 Data.Semigroup.$w$csconcat2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfR2R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfR2V; else goto cfR2U;
       cfR2V: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$csconcat2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfR2U: // global
           I64[Hp - 8] = go_sfP4n_info;
           P64[Hp] = R2;
           _sfP4l::P64 = R3;
           R3 = R4;
           R2 = _sfP4l::P64;
           R1 = Hp - 6;
           call go_sfP4n_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$csconcat2_info" {
     Data.Semigroup.$w$csconcat2_info:
         const Data.Semigroup.$w$csconcat2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.769740833 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_$csconcat_closure" {
     Data.Semigroup.$fSemigroupOption_$csconcat_closure:
         const Data.Semigroup.$fSemigroupOption_$csconcat_info;
 },
 Data.Semigroup.$fSemigroupOption_$csconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfR3R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfR3S; else goto cfR3T;
       cfR3S: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_$csconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfR3T: // global
           I64[Sp - 16] = block_cfR3O_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufR3X; else goto cfR3P;
       ufR3X: // global
           call _cfR3O(R1) args: 0, res: 0, upd: 0;
       cfR3P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_$csconcat_info" {
     Data.Semigroup.$fSemigroupOption_$csconcat_info:
         const Data.Semigroup.$fSemigroupOption_$csconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfR3O() //  [R1]
         { []
         }
     {offset
       cfR3O: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Semigroup.$w$csconcat2_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR3O_info" {
     block_cfR3O_info:
         const _cfR3O;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.776049087 UTC

[section ""data" . Data.Semigroup.$fSemigroupOption_closure" {
     Data.Semigroup.$fSemigroupOption_closure:
         const Data.Semigroup.$fSemigroupOption_info;
         const 0;
 },
 sat_sfP4G_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfR4h: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fSemigroupOption_$cstimes_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP4G_info" {
     sat_sfP4G_info:
         const sat_sfP4G_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+184;
 },
 sat_sfP4F_entry() //  [R1, R2]
         { []
         }
     {offset
       cfR4p: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fSemigroupOption_$csconcat_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP4F_info" {
     sat_sfP4F_info:
         const sat_sfP4F_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP4E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfR4x: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fMonoidMaybe_$c<>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP4E_info" {
     sat_sfP4E_info:
         const sat_sfP4E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fSemigroupOption_entry() //  [R2]
         { []
         }
     {offset
       cfR4B: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfR4F; else goto cfR4E;
       cfR4F: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fSemigroupOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfR4E: // global
           I64[Hp - 72] = sat_sfP4G_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP4F_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP4E_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 69;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fSemigroupOption_info" {
     Data.Semigroup.$fSemigroupOption_info:
         const Data.Semigroup.$fSemigroupOption_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfPCb_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.787038615 UTC

[section ""data" . Data.Semigroup.$fMonoidOption_$cmconcat_closure" {
     Data.Semigroup.$fMonoidOption_$cmconcat_closure:
         const Data.Semigroup.$fMonoidOption_$cmconcat_info;
 },
 sat_sfP4S_entry() //  [R1]
         { []
         }
     {offset
       cfR5v: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfR5w; else goto cfR5x;
       cfR5w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR5x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP4S_info" {
     sat_sfP4S_info:
         const sat_sfP4S_entry;
         const 3;
         const 15;
 },
 go_sfP4J_entry() //  [R1, R2]
         { []
         }
     {offset
       cfR5C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfR5D; else goto ufR5Z;
       cfR5D: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ufR5Z: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cfR57() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sfP4J_info" {
     go_sfP4J_info:
         const go_sfP4J_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfR57() //  []
         { []
         }
     {offset
       cfR57: // global
           _sfP4H::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cfR5a_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sfP4H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufR61; else goto cfR5b;
       ufR61: // global
           call _cfR5a(R1) args: 0, res: 0, upd: 0;
       cfR5b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfR5a() //  [R1]
         { []
         }
     {offset
       cfR5a: // global
           if (R1 & 7 == 1) goto cfR5z; else goto cfR5A;
       cfR5z: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfR5A: // global
           I64[Sp - 8] = block_cfR5g_info;
           _sfP4N::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sfP4N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufR62; else goto cfR5h;
       ufR62: // global
           call _cfR5g(R1) args: 0, res: 0, upd: 0;
       cfR5h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR5a_info" {
     block_cfR5a_info:
         const _cfR5a;
         const 2;
         const 30;
 },
 _cfR5g() //  [R1]
         { []
         }
     {offset
       cfR5g: // global
           _sfP4N::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfR5L; else goto cfR5N;
       cfR5L: // global
           P64[Sp + 24] = _sfP4N::P64;
           Sp = Sp + 16;
           call _cfR57() args: 0, res: 0, upd: 0;
       cfR5N: // global
           I64[Sp] = block_cfR5m_info;
           R2 = _sfP4N::P64;
           _sfP4O::P64 = R1;
           _sfP4P::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _sfP4P::P64;
           P64[Sp + 16] = _sfP4O::P64;
           call go_sfP4J_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR5g_info" {
     block_cfR5g_info:
         const _cfR5g;
         const 3;
         const 30;
 },
 _cfR5m() //  [R1]
         { []
         }
     {offset
       cfR5m: // global
           if (R1 & 7 == 1) goto cfR5R; else goto cfR5T;
       cfR5R: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfR5T: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfR5W; else goto cfR5V;
       cfR5W: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfR5V: // global
           _sfP4R::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sfP4S_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfP4R::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfR5m_info" {
     block_cfR5m_info:
         const _cfR5m;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidOption_$cmconcat_entry() //  [R2, R3]
         { []
         }
     {offset
       cfR65: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfR69; else goto cfR68;
       cfR69: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidOption_$cmconcat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfR68: // global
           I64[Hp - 8] = go_sfP4J_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_sfP4J_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidOption_$cmconcat_info" {
     Data.Semigroup.$fMonoidOption_$cmconcat_info:
         const Data.Semigroup.$fMonoidOption_$cmconcat_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.80179762 UTC

[section ""data" . Data.Semigroup.$fMonoidOption_closure" {
     Data.Semigroup.$fMonoidOption_closure:
         const Data.Semigroup.$fMonoidOption_info;
         const 0;
 },
 sat_sfP4W_entry() //  [R1, R2]
         { []
         }
     {offset
       cfR77: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidOption_$cmconcat_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP4W_info" {
     sat_sfP4W_info:
         const sat_sfP4W_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP4V_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfR7f: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fMonoidMaybe_$c<>_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP4V_info" {
     sat_sfP4V_info:
         const sat_sfP4V_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP4U_entry() //  [R1]
         { []
         }
     {offset
       cfR7m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfR7n; else goto cfR7o;
       cfR7n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR7o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupOption_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP4U_info" {
     sat_sfP4U_info:
         const sat_sfP4U_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+200;
 },
 Data.Semigroup.$fMonoidOption_entry() //  [R2]
         { []
         }
     {offset
       cfR7q: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfR7u; else goto cfR7t;
       cfR7u: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfR7t: // global
           I64[Hp - 88] = sat_sfP4W_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfP4V_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP4U_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = GHC.Base.Nothing_closure+1;
           P64[Hp - 8] = Hp - 70;
           P64[Hp] = Hp - 87;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidOption_info" {
     Data.Semigroup.$fMonoidOption_info:
         const Data.Semigroup.$fMonoidOption_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.810661531 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option1_closure" {
     Data.Semigroup.$fGeneric1Option1_closure:
         const Data.Semigroup.$fGeneric1Option1_info;
 },
 Data.Semigroup.$fGeneric1Option1_entry() //  [R2]
         { []
         }
     {offset
       cfR7Y: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Option1_info" {
     Data.Semigroup.$fGeneric1Option1_info:
         const Data.Semigroup.$fGeneric1Option1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.813944093 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option2_closure" {
     Data.Semigroup.$fGeneric1Option2_closure:
         const Data.Semigroup.$fGeneric1Option2_info;
 },
 Data.Semigroup.$fGeneric1Option2_entry() //  [R2]
         { []
         }
     {offset
       cfR89: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Option2_info" {
     Data.Semigroup.$fGeneric1Option2_info:
         const Data.Semigroup.$fGeneric1Option2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.817005031 UTC

[section ""data" . Data.Semigroup.$fGeneric1Option_closure" {
     Data.Semigroup.$fGeneric1Option_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Option2_closure+1;
         const Data.Semigroup.$fGeneric1Option1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.818959184 UTC

[section ""data" . Data.Semigroup.$fGenericOption1_closure" {
     Data.Semigroup.$fGenericOption1_closure:
         const Data.Semigroup.$fGenericOption1_info;
 },
 Data.Semigroup.$fGenericOption1_entry() //  [R2]
         { []
         }
     {offset
       cfR8n: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericOption1_info" {
     Data.Semigroup.$fGenericOption1_info:
         const Data.Semigroup.$fGenericOption1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.822580718 UTC

[section ""data" . Data.Semigroup.$fGenericOption2_closure" {
     Data.Semigroup.$fGenericOption2_closure:
         const Data.Semigroup.$fGenericOption2_info;
 },
 Data.Semigroup.$fGenericOption2_entry() //  [R2]
         { []
         }
     {offset
       cfR8y: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericOption2_info" {
     Data.Semigroup.$fGenericOption2_info:
         const Data.Semigroup.$fGenericOption2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.825620463 UTC

[section ""data" . Data.Semigroup.$fGenericOption_closure" {
     Data.Semigroup.$fGenericOption_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericOption2_closure+1;
         const Data.Semigroup.$fGenericOption1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.827537951 UTC

[section ""data" . Data.Semigroup.$fDataOption2_closure" {
     Data.Semigroup.$fDataOption2_closure:
         const Data.Semigroup.$fDataOption2_info;
 },
 Data.Semigroup.$fDataOption2_entry() //  [R2]
         { []
         }
     {offset
       cfR8M: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption2_info" {
     Data.Semigroup.$fDataOption2_info:
         const Data.Semigroup.$fDataOption2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.832899687 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgunfold_closure" {
     Data.Semigroup.$fDataOption_$cgunfold_closure:
         const Data.Semigroup.$fDataOption_$cgunfold_info;
         const 0;
 },
 $dData1_sfP53_entry() //  [R1]
         { []
         }
     {offset
       cfR93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfR94; else goto cfR95;
       cfR94: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR95: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfP53_info" {
     $dData1_sfP53_info:
         const $dData1_sfP53_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+216;
 },
 sat_sfP57_entry() //  [R1]
         { []
         }
     {offset
       cfR9f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfR9g; else goto cfR9h;
       cfR9g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR9h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fDataOption2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP57_info" {
     sat_sfP57_info:
         const sat_sfP57_entry;
         const 1;
         const 16;
 },
 sat_sfP58_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfR9i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfR9m; else goto cfR9l;
       cfR9m: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfR9l: // global
           _sfP53::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfP57_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfP54::P64 = R2;
           R2 = _sfP53::P64;
           R1 = _sfP54::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP58_info" {
     sat_sfP58_info:
         const sat_sfP58_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Semigroup.$fDataOption_$cgunfold_entry() //  [R2]
         { []
         }
     {offset
       cfR9n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfR9r; else goto cfR9q;
       cfR9r: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgunfold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfR9q: // global
           I64[Hp - 32] = $dData1_sfP53_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfP58_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgunfold_info" {
     Data.Semigroup.$fDataOption_$cgunfold_info:
         const Data.Semigroup.$fDataOption_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.843397865 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgfoldl_closure" {
     Data.Semigroup.$fDataOption_$cgfoldl_closure:
         const Data.Semigroup.$fDataOption_$cgfoldl_info;
         const 0;
 },
 $dData1_sfP5a_entry() //  [R1]
         { []
         }
     {offset
       cfR9W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfR9X; else goto cfR9Y;
       cfR9X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfR9Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfP5a_info" {
     $dData1_sfP5a_info:
         const $dData1_sfP5a_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+216;
 },
 sat_sfP5e_entry() //  [R1]
         { []
         }
     {offset
       cfRa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRa9; else goto cfRaa;
       cfRa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRaa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fDataOption2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5e_info" {
     sat_sfP5e_info:
         const sat_sfP5e_entry;
         const 1;
         const 16;
 },
 sat_sfP5f_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfRab: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRaf; else goto cfRae;
       cfRaf: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRae: // global
           _sfP5a::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfP5e_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           _sfP5b::P64 = R2;
           R2 = _sfP5a::P64;
           R1 = _sfP5b::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5f_info" {
     sat_sfP5f_info:
         const sat_sfP5f_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Semigroup.$fDataOption_$cgfoldl_entry() //  [R2]
         { []
         }
     {offset
       cfRag: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfRak; else goto cfRaj;
       cfRak: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgfoldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRaj: // global
           I64[Hp - 32] = $dData1_sfP5a_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfP5f_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgfoldl_info" {
     Data.Semigroup.$fDataOption_$cgfoldl_info:
         const Data.Semigroup.$fDataOption_$cgfoldl_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfPCb_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.851630259 UTC

[section ""cstring" . Data.Semigroup.$fDataOption6_bytes" {
     Data.Semigroup.$fDataOption6_bytes:
         I8[] [79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.85425733 UTC

[section ""data" . Data.Semigroup.$fDataOption9_closure" {
     Data.Semigroup.$fDataOption9_closure:
         const Data.Semigroup.$fDataOption9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataOption9_entry() //  [R1]
         { []
         }
     {offset
       cfRaO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRaP; else goto cfRaQ;
       cfRaP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRaQ: // global
           (_cfRaL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRaL::I64 == 0) goto cfRaN; else goto cfRaM;
       cfRaN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRaM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRaL::I64;
           R2 = Data.Semigroup.$fDataOption6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption9_info" {
     Data.Semigroup.$fDataOption9_info:
         const Data.Semigroup.$fDataOption9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.85781072 UTC

[section ""data" . Data.Semigroup.$fReadOption_lexeme_closure" {
     Data.Semigroup.$fReadOption_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataOption9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.85949451 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst8_bytes" {
     Data.Semigroup.$fReadFirst8_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.861741673 UTC

[section ""data" . Data.Semigroup.$fReadFirst7_closure" {
     Data.Semigroup.$fReadFirst7_closure:
         const Data.Semigroup.$fReadFirst7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst7_entry() //  [R1]
         { []
         }
     {offset
       cfRb7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRb8; else goto cfRb9;
       cfRb8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRb9: // global
           (_cfRb4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRb4::I64 == 0) goto cfRb6; else goto cfRb5;
       cfRb6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRb5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRb4::I64;
           R2 = Data.Semigroup.$fReadFirst8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst7_info" {
     Data.Semigroup.$fReadFirst7_info:
         const Data.Semigroup.$fReadFirst7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.865896214 UTC

[section ""data" . Data.Semigroup.$fReadFirst_lexeme_closure" {
     Data.Semigroup.$fReadFirst_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.$fReadFirst7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.867599682 UTC

[section ""cstring" . Data.Semigroup.$fReadOption3_bytes" {
     Data.Semigroup.$fReadOption3_bytes:
         I8[] [103,101,116,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.869936067 UTC

[section ""data" . Data.Semigroup.$fReadOption2_closure" {
     Data.Semigroup.$fReadOption2_closure:
         const Data.Semigroup.$fReadOption2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadOption2_entry() //  [R1]
         { []
         }
     {offset
       cfRbq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRbr; else goto cfRbs;
       cfRbr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRbs: // global
           (_cfRbn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRbn::I64 == 0) goto cfRbp; else goto cfRbo;
       cfRbp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRbo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRbn::I64;
           R2 = Data.Semigroup.$fReadOption3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption2_info" {
     Data.Semigroup.$fReadOption2_info:
         const Data.Semigroup.$fReadOption2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.874056354 UTC

[section ""data" . Data.Semigroup.$fReadArg2_closure" {
     Data.Semigroup.$fReadArg2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.875810244 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst4_bytes" {
     Data.Semigroup.$fReadFirst4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.878031903 UTC

[section ""data" . Data.Semigroup.$fReadFirst3_closure" {
     Data.Semigroup.$fReadFirst3_closure:
         const Data.Semigroup.$fReadFirst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst3_entry() //  [R1]
         { []
         }
     {offset
       cfRbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRbK; else goto cfRbL;
       cfRbK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRbL: // global
           (_cfRbG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRbG::I64 == 0) goto cfRbI; else goto cfRbH;
       cfRbI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRbH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRbG::I64;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst3_info" {
     Data.Semigroup.$fReadFirst3_info:
         const Data.Semigroup.$fReadFirst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.881640687 UTC

[section ""data" . Data.Semigroup.$fReadFirst2_closure" {
     Data.Semigroup.$fReadFirst2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Semigroup.$fReadFirst3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.888315236 UTC

[section ""data" . Data.Semigroup.$fReadOption1_closure" {
     Data.Semigroup.$fReadOption1_closure:
         const Data.Semigroup.$fReadOption1_info;
         const 0;
 },
 ds_sfP5j_entry() //  [R1, R3]
         { []
         }
     {offset
       cfRc4: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfP5j_info" {
     ds_sfP5j_info:
         const ds_sfP5j_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+240;
 },
 sat_sfP5v_entry() //  [R1]
         { []
         }
     {offset
       cfRcF: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5v_info" {
     sat_sfP5v_info:
         const sat_sfP5v_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfP5y_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRcL: // global
           _sfP5t::P64 = R2;
           _sfP5y::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRcM; else goto cfRcN;
       cfRcN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRcP; else goto cfRcO;
       cfRcP: // global
           HpAlloc = 24;
           goto cfRcM;
       cfRcM: // global
           R2 = _sfP5t::P64;
           R1 = _sfP5y::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRcO: // global
           _sfP5n::P64 = P64[_sfP5y::P64 + 7];
           I64[Hp - 16] = sat_sfP5v_info;
           P64[Hp - 8] = _sfP5n::P64;
           P64[Hp] = _sfP5t::P64;
           I64[Sp - 8] = block_cfRcI_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5y_info" {
     sat_sfP5y_info:
         const sat_sfP5y_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+248;
 },
 _cfRcI() //  [R1]
         { []
         }
     {offset
       cfRcI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRcS; else goto cfRcR;
       cfRcS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRcR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRcI_info" {
     block_cfRcI_info:
         const _cfRcI;
         const 0;
         const 30;
 },
 sat_sfP5z_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRcT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRcX; else goto cfRcW;
       cfRcX: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRcW: // global
           _sfP5j::P64 = P64[R1 + 7];
           _sfP5n::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfP5y_info;
           P64[Hp] = _sfP5n::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfP5j::P64;
           R2 = Data.Semigroup.$fReadOption2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5z_info" {
     sat_sfP5z_info:
         const sat_sfP5z_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const SfPCb_srt+248;
 },
 sat_sfP5C_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRd1: // global
           _sfP5r::P64 = R2;
           _sfP5C::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRd2; else goto cfRd3;
       cfRd3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRd5; else goto cfRd4;
       cfRd5: // global
           HpAlloc = 24;
           goto cfRd2;
       cfRd2: // global
           R2 = _sfP5r::P64;
           R1 = _sfP5C::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRd4: // global
           _sfP5j::P64 = P64[_sfP5C::P64 + 7];
           _sfP5n::P64 = P64[_sfP5C::P64 + 15];
           I64[Hp - 16] = sat_sfP5z_info;
           P64[Hp - 8] = _sfP5j::P64;
           P64[Hp] = _sfP5n::P64;
           I64[Sp - 8] = block_cfRcY_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5C_info" {
     sat_sfP5C_info:
         const sat_sfP5C_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const SfPCb_srt+248;
 },
 _cfRcY() //  [R1]
         { []
         }
     {offset
       cfRcY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRd8; else goto cfRd7;
       cfRd8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRd7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRcY_info" {
     block_cfRcY_info:
         const _cfRcY;
         const 0;
         const 30;
 },
 sat_sfP5F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRd9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRda; else goto cfRdb;
       cfRda: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRdb: // global
           I64[Sp - 24] = block_cfRcc_info;
           _sfP5j::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfP5j::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRdo; else goto cfRcd;
       ufRdo: // global
           call _cfRcc(R1) args: 0, res: 0, upd: 0;
       cfRcd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5F_info" {
     sat_sfP5F_info:
         const sat_sfP5F_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const SfPCb_srt+248;
 },
 _cfRcc() //  [R1]
         { []
         }
     {offset
       cfRcc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRde; else goto cfRdd;
       cfRde: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRdd: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfRdg; else goto cfRdk;
       cfRdg: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRdk: // global
           I64[Hp - 16] = sat_sfP5C_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfRdh_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadOption_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRcc_info" {
     block_cfRcc_info:
         const _cfRcc;
         const 2;
         const 270582939678;
         const SfPCb_srt+248;
 },
 _cfRdh() //  [R1]
         { []
         }
     {offset
       cfRdh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRdn; else goto cfRdm;
       cfRdn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRdm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRdh_info" {
     block_cfRdh_info:
         const _cfRdh;
         const 0;
         const 30;
 },
 Data.Semigroup.$fReadOption1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRdp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRdt; else goto cfRds;
       cfRdt: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRds: // global
           I64[Hp - 24] = ds_sfP5j_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfP5F_info;
           P64[Hp] = Hp - 22;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption1_info" {
     Data.Semigroup.$fReadOption1_info:
         const Data.Semigroup.$fReadOption1_entry;
         const 0;
         const 2194728288270;
         const 12884901911;
         const SfPCb_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.909925365 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadsPrec_closure" {
     Data.Semigroup.$fReadOption_$creadsPrec_closure:
         const Data.Semigroup.$fReadOption_$creadsPrec_info;
         const 0;
 },
 sat_sfP5I_entry() //  [R1]
         { []
         }
     {offset
       cfRez: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfReA; else goto cfReB;
       cfReA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfReB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5I_info" {
     sat_sfP5I_info:
         const sat_sfP5I_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cfReC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfReG; else goto cfReF;
       cfReG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfReF: // global
           I64[Hp - 24] = sat_sfP5I_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadsPrec_info" {
     Data.Semigroup.$fReadOption_$creadsPrec_info:
         const Data.Semigroup.$fReadOption_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.916297582 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadListPrec_closure" {
     Data.Semigroup.$fReadOption_$creadListPrec_closure:
         const Data.Semigroup.$fReadOption_$creadListPrec_info;
         const 0;
 },
 sat_sfP5K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRf2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5K_info" {
     sat_sfP5K_info:
         const sat_sfP5K_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfRf5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRf9; else goto cfRf8;
       cfRf9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRf8: // global
           I64[Hp - 8] = sat_sfP5K_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadListPrec_info" {
     Data.Semigroup.$fReadOption_$creadListPrec_info:
         const Data.Semigroup.$fReadOption_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SfPCb_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.922617185 UTC

[section ""data" . Data.Semigroup.$fReadOption_$creadList_closure" {
     Data.Semigroup.$fReadOption_$creadList_closure:
         const Data.Semigroup.$fReadOption_$creadList_info;
         const 0;
 },
 sat_sfP5M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRfv: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5M_info" {
     sat_sfP5M_info:
         const sat_sfP5M_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+304;
 },
 sat_sfP5N_entry() //  [R1]
         { []
         }
     {offset
       cfRfy: // global
           _sfP5N::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfRfz; else goto cfRfA;
       cfRfA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRfC; else goto cfRfB;
       cfRfC: // global
           HpAlloc = 16;
           goto cfRfz;
       cfRfz: // global
           R1 = _sfP5N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRfB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP5N::P64;
           _sfP5L::P64 = P64[_sfP5N::P64 + 16];
           I64[Hp - 8] = sat_sfP5M_info;
           P64[Hp] = _sfP5L::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5N_info" {
     sat_sfP5N_info:
         const sat_sfP5N_entry;
         const 1;
         const 21474836496;
         const SfPCb_srt+304;
 },
 Data.Semigroup.$fReadOption_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfRfD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRfH; else goto cfRfG;
       cfRfH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRfG: // global
           I64[Hp - 16] = sat_sfP5N_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_$creadList_info" {
     Data.Semigroup.$fReadOption_$creadList_info:
         const Data.Semigroup.$fReadOption_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SfPCb_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.930970902 UTC

[section ""data" . Data.Semigroup.$fReadOption_closure" {
     Data.Semigroup.$fReadOption_closure:
         const Data.Semigroup.$fReadOption_info;
         const 0;
 },
 sat_sfP5S_entry() //  [R1]
         { []
         }
     {offset
       cfRg9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRga; else goto cfRgb;
       cfRga: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRgb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5S_info" {
     sat_sfP5S_info:
         const sat_sfP5S_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+328;
 },
 sat_sfP5R_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRgh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadOption1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5R_info" {
     sat_sfP5R_info:
         const sat_sfP5R_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+304;
 },
 sat_sfP5Q_entry() //  [R1]
         { []
         }
     {offset
       cfRgo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRgp; else goto cfRgq;
       cfRgp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRgq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadOption_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5Q_info" {
     sat_sfP5Q_info:
         const sat_sfP5Q_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+336;
 },
 sat_sfP5P_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRgw: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fReadOption_$creadsPrec_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP5P_info" {
     sat_sfP5P_info:
         const sat_sfP5P_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+312;
 },
 Data.Semigroup.$fReadOption_entry() //  [R2]
         { []
         }
     {offset
       cfRgA: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfRgE; else goto cfRgD;
       cfRgE: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Semigroup.$fReadOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRgD: // global
           I64[Hp - 112] = sat_sfP5S_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfP5R_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sfP5Q_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sfP5P_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadOption_info" {
     Data.Semigroup.$fReadOption_info:
         const Data.Semigroup.$fReadOption_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SfPCb_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.940355768 UTC

[section ""cstring" . Data.Semigroup.$fShowOption2_bytes" {
     Data.Semigroup.$fShowOption2_bytes:
         I8[] [79,112,116,105,111,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.942230719 UTC

[section ""cstring" . Data.Semigroup.$fShowOption1_bytes" {
     Data.Semigroup.$fShowOption1_bytes:
         I8[] [103,101,116,79,112,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.949333842 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec5_closure" {
     Data.Semigroup.$w$cshowsPrec5_closure:
         const Data.Semigroup.$w$cshowsPrec5_info;
         const 0;
 },
 f_sfP5W_entry() //  [R1]
         { []
         }
     {offset
       cfRhj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRhk; else goto cfRhl;
       cfRhk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRhl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 24];
           R3 = Data.Semigroup.$fFoldableOption7_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfP5W_info" {
     f_sfP5W_info:
         const f_sfP5W_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+352;
 },
 sat_sfP5Z_entry() //  [R1]
         { []
         }
     {offset
       cfRhG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRhH; else goto cfRhI;
       cfRhH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP5Z_info" {
     sat_sfP5Z_info:
         const sat_sfP5Z_entry;
         const 1;
         const 16;
 },
 sat_sfP60_entry() //  [R1]
         { []
         }
     {offset
       cfRhJ: // global
           _sfP60::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRhK; else goto cfRhL;
       cfRhL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRhN; else goto cfRhM;
       cfRhN: // global
           HpAlloc = 24;
           goto cfRhK;
       cfRhK: // global
           R1 = _sfP60::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRhM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP60::P64;
           _sfP5W::P64 = P64[_sfP60::P64 + 16];
           _sfP5Y::P64 = P64[_sfP60::P64 + 24];
           I64[Hp - 16] = sat_sfP5Z_info;
           P64[Hp] = _sfP5Y::P64;
           R2 = Hp - 16;
           R1 = _sfP5W::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP60_info" {
     sat_sfP60_info:
         const sat_sfP60_entry;
         const 2;
         const 18;
 },
 sat_sfP61_entry() //  [R1]
         { []
         }
     {offset
       cfRhO: // global
           _sfP61::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRhP; else goto cfRhQ;
       cfRhQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRhS; else goto cfRhR;
       cfRhS: // global
           HpAlloc = 32;
           goto cfRhP;
       cfRhP: // global
           R1 = _sfP61::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRhR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP61::P64;
           _sfP5W::P64 = P64[_sfP61::P64 + 16];
           _sfP5Y::P64 = P64[_sfP61::P64 + 24];
           I64[Hp - 24] = sat_sfP60_info;
           P64[Hp - 8] = _sfP5W::P64;
           P64[Hp] = _sfP5Y::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP61_info" {
     sat_sfP61_info:
         const sat_sfP61_entry;
         const 2;
         const 18;
 },
 sat_sfP62_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRhT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRhX; else goto cfRhW;
       cfRhX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRhW: // global
           _sfP5W::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfP61_info;
           P64[Hp - 8] = _sfP5W::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP62_info" {
     sat_sfP62_info:
         const sat_sfP62_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP65_entry() //  [R1]
         { []
         }
     {offset
       cfRil: // global
           _sfP65::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRim; else goto cfRin;
       cfRin: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRip; else goto cfRio;
       cfRip: // global
           HpAlloc = 24;
           goto cfRim;
       cfRim: // global
           R1 = _sfP65::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRio: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP65::P64;
           _sfP63::P64 = P64[_sfP65::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfP63::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP65_info" {
     sat_sfP65_info:
         const sat_sfP65_entry;
         const 1;
         const 16;
 },
 sat_sfP66_entry() //  [R1]
         { []
         }
     {offset
       cfRiq: // global
           _sfP66::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRir; else goto cfRis;
       cfRis: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRiu; else goto cfRit;
       cfRiu: // global
           HpAlloc = 24;
           goto cfRir;
       cfRir: // global
           R1 = _sfP66::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP66::P64;
           _sfP5W::P64 = P64[_sfP66::P64 + 16];
           _sfP63::P64 = P64[_sfP66::P64 + 24];
           I64[Hp - 16] = sat_sfP65_info;
           P64[Hp] = _sfP63::P64;
           R2 = Hp - 16;
           R1 = _sfP5W::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP66_info" {
     sat_sfP66_info:
         const sat_sfP66_entry;
         const 2;
         const 18;
 },
 sat_sfP67_entry() //  [R1]
         { []
         }
     {offset
       cfRiv: // global
           _sfP67::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRiw; else goto cfRix;
       cfRix: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRiz; else goto cfRiy;
       cfRiz: // global
           HpAlloc = 32;
           goto cfRiw;
       cfRiw: // global
           R1 = _sfP67::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRiy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP67::P64;
           _sfP5W::P64 = P64[_sfP67::P64 + 16];
           _sfP63::P64 = P64[_sfP67::P64 + 24];
           I64[Hp - 24] = sat_sfP66_info;
           P64[Hp - 8] = _sfP5W::P64;
           P64[Hp] = _sfP63::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP67_info" {
     sat_sfP67_info:
         const sat_sfP67_entry;
         const 2;
         const 18;
 },
 sat_sfP68_entry() //  [R1]
         { []
         }
     {offset
       cfRiA: // global
           _sfP68::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRiB; else goto cfRiC;
       cfRiC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRiE; else goto cfRiD;
       cfRiE: // global
           HpAlloc = 32;
           goto cfRiB;
       cfRiB: // global
           R1 = _sfP68::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP68::P64;
           _sfP5W::P64 = P64[_sfP68::P64 + 16];
           _sfP63::P64 = P64[_sfP68::P64 + 24];
           I64[Hp - 24] = sat_sfP67_info;
           P64[Hp - 8] = _sfP5W::P64;
           P64[Hp] = _sfP63::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP68_info" {
     sat_sfP68_info:
         const sat_sfP68_entry;
         const 2;
         const 18;
 },
 sat_sfP69_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRiG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRiK; else goto cfRiJ;
       cfRiK: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRiJ: // global
           _sfP5W::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfP68_info;
           P64[Hp - 32] = _sfP5W::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP69_info" {
     sat_sfP69_info:
         const sat_sfP69_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRiO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfRiS; else goto cfRiR;
       cfRiS: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRiR: // global
           I64[Hp - 40] = f_sfP5W_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfRhf::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfRiM; else goto cfRiN;
       cfRiM: // global
           I64[Hp - 8] = sat_sfP62_info;
           P64[Hp] = _cfRhf::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRiN: // global
           I64[Hp - 8] = sat_sfP69_info;
           P64[Hp] = _cfRhf::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec5_info" {
     Data.Semigroup.$w$cshowsPrec5_info:
         const Data.Semigroup.$w$cshowsPrec5_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const SfPCb_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.972488019 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshowsPrec_closure" {
     Data.Semigroup.$fShowOption_$cshowsPrec_closure:
         const Data.Semigroup.$fShowOption_$cshowsPrec_info;
         const 0;
 },
 Data.Semigroup.$fShowOption_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRk6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRk7; else goto cfRk8;
       cfRk7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRk8: // global
           I64[Sp - 24] = block_cfRk3_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRkc; else goto cfRk4;
       ufRkc: // global
           call _cfRk3(R1) args: 0, res: 0, upd: 0;
       cfRk4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshowsPrec_info" {
     Data.Semigroup.$fShowOption_$cshowsPrec_info:
         const Data.Semigroup.$fShowOption_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfPCb_srt+360;
 },
 _cfRk3() //  [R1]
         { []
         }
     {offset
       cfRk3: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec5_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRk3_info" {
     block_cfRk3_info:
         const _cfRk3;
         const 2;
         const 4294967326;
         const SfPCb_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.977880544 UTC

[section ""data" . Data.Semigroup.$fShowOption3_closure" {
     Data.Semigroup.$fShowOption3_closure:
         const Data.Semigroup.$fShowOption3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fShowOption3_entry() //  [R1]
         { []
         }
     {offset
       cfRkt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRku; else goto cfRkv;
       cfRku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRkv: // global
           (_cfRkq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRkq::I64 == 0) goto cfRks; else goto cfRkr;
       cfRks: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRkr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRkq::I64;
           R3 = Data.Semigroup.$fReadFirst3_closure;
           R2 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption3_info" {
     Data.Semigroup.$fShowOption3_info:
         const Data.Semigroup.$fShowOption3_entry;
         const 0;
         const 12884901909;
         const SfPCb_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.984152444 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshow_closure" {
     Data.Semigroup.$fShowOption_$cshow_closure:
         const Data.Semigroup.$fShowOption_$cshow_info;
         const 0;
 },
 sat_sfP6j_entry() //  [R1]
         { []
         }
     {offset
       cfRl0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfRl1; else goto cfRl2;
       cfRl1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRl2: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Show.appPrec1_closure;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6j_info" {
     sat_sfP6j_info:
         const sat_sfP6j_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+384;
 },
 sat_sfP6k_entry() //  [R1]
         { []
         }
     {offset
       cfRl7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfRl8; else goto cfRl9;
       cfRl8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRl9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfRkQ_info;
           _sfP6f::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfP6f::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufRlf; else goto cfRkR;
       ufRlf: // global
           call _cfRkQ(R1) args: 0, res: 0, upd: 0;
       cfRkR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP6k_info" {
     sat_sfP6k_info:
         const sat_sfP6k_entry;
         const 2;
         const 30064771090;
         const SfPCb_srt+384;
 },
 _cfRkQ() //  [R1]
         { []
         }
     {offset
       cfRkQ: // global
           if (R1 & 7 == 1) goto cfRl4; else goto cfRl5;
       cfRl4: // global
           R1 = Data.Semigroup.$fShowOption3_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cfRl5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRle; else goto cfRld;
       cfRle: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfRld: // global
           _sfP6i::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sfP6j_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfP6i::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfRkQ_info" {
     block_cfRkQ_info:
         const _cfRkQ;
         const 1;
         const 30064771102;
         const SfPCb_srt+384;
 },
 sat_sfP6l_entry() //  [R1]
         { []
         }
     {offset
       cfRlg: // global
           _sfP6l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRlh; else goto cfRli;
       cfRli: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRlk; else goto cfRlj;
       cfRlk: // global
           HpAlloc = 32;
           goto cfRlh;
       cfRlh: // global
           R1 = _sfP6l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRlj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP6l::P64;
           _sfP6f::P64 = P64[_sfP6l::P64 + 16];
           _sfP6g::P64 = P64[_sfP6l::P64 + 24];
           I64[Hp - 24] = sat_sfP6k_info;
           P64[Hp - 8] = _sfP6f::P64;
           P64[Hp] = _sfP6g::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP6l_info" {
     sat_sfP6l_info:
         const sat_sfP6l_entry;
         const 2;
         const 30064771090;
         const SfPCb_srt+384;
 },
 Data.Semigroup.$fShowOption_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfRll: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRlp; else goto cfRlo;
       cfRlp: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRlo: // global
           I64[Hp - 24] = sat_sfP6l_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowOption2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshow_info" {
     Data.Semigroup.$fShowOption_$cshow_info:
         const Data.Semigroup.$fShowOption_$cshow_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SfPCb_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:41.996557293 UTC

[section ""data" . Data.Semigroup.$fShowOption_$cshowList_closure" {
     Data.Semigroup.$fShowOption_$cshowList_closure:
         const Data.Semigroup.$fShowOption_$cshowList_info;
         const 0;
 },
 sat_sfP6q_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRm7: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec5_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6q_info" {
     sat_sfP6q_info:
         const sat_sfP6q_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+360;
 },
 Data.Semigroup.$fShowOption_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRma: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRme; else goto cfRmd;
       cfRme: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRmd: // global
           I64[Hp - 8] = sat_sfP6q_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_$cshowList_info" {
     Data.Semigroup.$fShowOption_$cshowList_info:
         const Data.Semigroup.$fShowOption_$cshowList_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SfPCb_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.002550257 UTC

[section ""data" . Data.Semigroup.$fShowOption_closure" {
     Data.Semigroup.$fShowOption_closure:
         const Data.Semigroup.$fShowOption_info;
         const 0;
 },
 sat_sfP6u_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRmw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowOption_$cshowList_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6u_info" {
     sat_sfP6u_info:
         const sat_sfP6u_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+416;
 },
 sat_sfP6t_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRmE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowOption_$cshow_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6t_info" {
     sat_sfP6t_info:
         const sat_sfP6t_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+408;
 },
 sat_sfP6s_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRmM: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowOption_$cshowsPrec_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6s_info" {
     sat_sfP6s_info:
         const sat_sfP6s_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+368;
 },
 Data.Semigroup.$fShowOption_entry() //  [R2]
         { []
         }
     {offset
       cfRmQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfRmU; else goto cfRmT;
       cfRmU: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRmT: // global
           I64[Hp - 72] = sat_sfP6u_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP6t_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP6s_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowOption_info" {
     Data.Semigroup.$fShowOption_info:
         const Data.Semigroup.$fShowOption_entry;
         const 0;
         const 966367641614;
         const 4294967301;
         const SfPCb_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.011376454 UTC

[section ""data" . Data.Semigroup.$fEqOption_closure" {
     Data.Semigroup.$fEqOption_closure:
         const Data.Semigroup.$fEqOption_info;
 },
 sat_sfP6x_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRnp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6x_info" {
     sat_sfP6x_info:
         const sat_sfP6x_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6w_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRnx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fEqMaybe_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6w_info" {
     sat_sfP6w_info:
         const sat_sfP6w_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fEqOption_entry() //  [R2]
         { []
         }
     {offset
       cfRnB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRnF; else goto cfRnE;
       cfRnF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fEqOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRnE: // global
           I64[Hp - 48] = sat_sfP6x_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfP6w_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqOption_info" {
     Data.Semigroup.$fEqOption_info:
         const Data.Semigroup.$fEqOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.018319782 UTC

[section ""data" . Data.Semigroup.$fOrdOption_$cp1Ord_closure" {
     Data.Semigroup.$fOrdOption_$cp1Ord_closure:
         const Data.Semigroup.$fOrdOption_$cp1Ord_info;
 },
 sat_sfP6z_entry() //  [R1]
         { []
         }
     {offset
       cfRo4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRo5; else goto cfRo6;
       cfRo5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRo6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP6z_info" {
     sat_sfP6z_info:
         const sat_sfP6z_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdOption_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfRo7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRob; else goto cfRoa;
       cfRob: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdOption_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRoa: // global
           I64[Hp - 16] = sat_sfP6z_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqOption_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdOption_$cp1Ord_info" {
     Data.Semigroup.$fOrdOption_$cp1Ord_info:
         const Data.Semigroup.$fOrdOption_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.026418945 UTC

[section ""data" . Data.Semigroup.$fOrdOption_closure" {
     Data.Semigroup.$fOrdOption_closure:
         const Data.Semigroup.$fOrdOption_info;
 },
 sat_sfP6K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRov: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6K_info" {
     sat_sfP6K_info:
         const sat_sfP6K_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6J_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRoD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6J_info" {
     sat_sfP6J_info:
         const sat_sfP6J_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6I_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRoL: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6I_info" {
     sat_sfP6I_info:
         const sat_sfP6I_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRoT: // global
           R4 = R2;
           R3 = R3;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6H_info" {
     sat_sfP6H_info:
         const sat_sfP6H_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRp1: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6E_info" {
     sat_sfP6E_info:
         const sat_sfP6E_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6D_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRp9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6D_info" {
     sat_sfP6D_info:
         const sat_sfP6D_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6C_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRph: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.$fOrdMaybe_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP6C_info" {
     sat_sfP6C_info:
         const sat_sfP6C_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP6B_entry() //  [R1]
         { []
         }
     {offset
       cfRpo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRpp; else goto cfRpq;
       cfRpp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRpq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdOption_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP6B_info" {
     sat_sfP6B_info:
         const sat_sfP6B_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdOption_entry() //  [R2]
         { []
         }
     {offset
       cfRps: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cfRpw; else goto cfRpv;
       cfRpw: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRpv: // global
           I64[Hp - 200] = sat_sfP6K_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfP6J_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfP6I_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sfP6H_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfP6E_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sfP6D_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfP6C_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfP6B_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdOption_info" {
     Data.Semigroup.$fOrdOption_info:
         const Data.Semigroup.$fOrdOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.04260064 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid1_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid1_closure:
         const Data.Semigroup.$fGeneric1WrappedMonoid1_info;
 },
 Data.Semigroup.$fGeneric1WrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfRqn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1WrappedMonoid1_info" {
     Data.Semigroup.$fGeneric1WrappedMonoid1_info:
         const Data.Semigroup.$fGeneric1WrappedMonoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.045918315 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid2_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid2_closure:
         const Data.Semigroup.$fGeneric1WrappedMonoid2_info;
 },
 Data.Semigroup.$fGeneric1WrappedMonoid2_entry() //  [R2]
         { []
         }
     {offset
       cfRqy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1WrappedMonoid2_info" {
     Data.Semigroup.$fGeneric1WrappedMonoid2_info:
         const Data.Semigroup.$fGeneric1WrappedMonoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.048908189 UTC

[section ""data" . Data.Semigroup.$fGeneric1WrappedMonoid_closure" {
     Data.Semigroup.$fGeneric1WrappedMonoid_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1WrappedMonoid2_closure+1;
         const Data.Semigroup.$fGeneric1WrappedMonoid1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.051374 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid1_closure" {
     Data.Semigroup.$fGenericWrappedMonoid1_closure:
         const Data.Semigroup.$fGenericWrappedMonoid1_info;
 },
 Data.Semigroup.$fGenericWrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfRqK: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericWrappedMonoid1_info" {
     Data.Semigroup.$fGenericWrappedMonoid1_info:
         const Data.Semigroup.$fGenericWrappedMonoid1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.054571257 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid2_closure" {
     Data.Semigroup.$fGenericWrappedMonoid2_closure:
         const Data.Semigroup.$fGenericWrappedMonoid2_info;
 },
 Data.Semigroup.$fGenericWrappedMonoid2_entry() //  [R2]
         { []
         }
     {offset
       cfRqV: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericWrappedMonoid2_info" {
     Data.Semigroup.$fGenericWrappedMonoid2_info:
         const Data.Semigroup.$fGenericWrappedMonoid2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.057579087 UTC

[section ""data" . Data.Semigroup.$fGenericWrappedMonoid_closure" {
     Data.Semigroup.$fGenericWrappedMonoid_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericWrappedMonoid2_closure+1;
         const Data.Semigroup.$fGenericWrappedMonoid1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.060311901 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info;
 },
 sat_sfP6T_entry() //  [R1]
         { []
         }
     {offset
       cfRrb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRrc; else goto cfRrd;
       cfRrc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRrd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP6T_info" {
     sat_sfP6T_info:
         const sat_sfP6T_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfRre: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRri; else goto cfRrh;
       cfRri: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRrh: // global
           I64[Hp - 16] = sat_sfP6T_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfP6Q::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfP6Q::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.066554087 UTC

[section ""cstring" . Data.Semigroup.$fReadWrappedMonoid5_bytes" {
     Data.Semigroup.$fReadWrappedMonoid5_bytes:
         I8[] [87,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.068787143 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid4_closure" {
     Data.Semigroup.$fReadWrappedMonoid4_closure:
         const Data.Semigroup.$fReadWrappedMonoid4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadWrappedMonoid4_entry() //  [R1]
         { []
         }
     {offset
       cfRrA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRrB; else goto cfRrC;
       cfRrB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRrC: // global
           (_cfRrx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRrx::I64 == 0) goto cfRrz; else goto cfRry;
       cfRrz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRry: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRrx::I64;
           R2 = Data.Semigroup.$fReadWrappedMonoid5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid4_info" {
     Data.Semigroup.$fReadWrappedMonoid4_info:
         const Data.Semigroup.$fReadWrappedMonoid4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.07232149 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_lexeme_closure" {
     Data.Semigroup.$fReadWrappedMonoid_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.074361169 UTC

[section ""cstring" . Data.Semigroup.$fReadWrappedMonoid3_bytes" {
     Data.Semigroup.$fReadWrappedMonoid3_bytes:
         I8[] [117,110,119,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.076583192 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid2_closure" {
     Data.Semigroup.$fReadWrappedMonoid2_closure:
         const Data.Semigroup.$fReadWrappedMonoid2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadWrappedMonoid2_entry() //  [R1]
         { []
         }
     {offset
       cfRrT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRrU; else goto cfRrV;
       cfRrU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRrV: // global
           (_cfRrQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRrQ::I64 == 0) goto cfRrS; else goto cfRrR;
       cfRrS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRrR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRrQ::I64;
           R2 = Data.Semigroup.$fReadWrappedMonoid3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid2_info" {
     Data.Semigroup.$fReadWrappedMonoid2_info:
         const Data.Semigroup.$fReadWrappedMonoid2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.085092165 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid1_closure" {
     Data.Semigroup.$fReadWrappedMonoid1_closure:
         const Data.Semigroup.$fReadWrappedMonoid1_info;
         const 0;
 },
 lvl33_sfP6V_entry() //  [R1]
         { []
         }
     {offset
       cfRsc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfRsd; else goto cfRse;
       cfRsd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRse: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfP6V_info" {
     lvl33_sfP6V_info:
         const lvl33_sfP6V_entry;
         const 1;
         const 16;
 },
 ds_sfP6W_entry() //  [R1]
         { []
         }
     {offset
       cfRsk: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfP6W_info" {
     ds_sfP6W_info:
         const ds_sfP6W_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP77_entry() //  [R1]
         { []
         }
     {offset
       cfRsV: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP77_info" {
     sat_sfP77_info:
         const sat_sfP77_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfP7a_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRt1: // global
           _sfP75::P64 = R2;
           _sfP7a::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRt2; else goto cfRt3;
       cfRt3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRt5; else goto cfRt4;
       cfRt5: // global
           HpAlloc = 24;
           goto cfRt2;
       cfRt2: // global
           R2 = _sfP75::P64;
           R1 = _sfP7a::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRt4: // global
           _sfP6Z::P64 = P64[_sfP7a::P64 + 7];
           I64[Hp - 16] = sat_sfP77_info;
           P64[Hp - 8] = _sfP6Z::P64;
           P64[Hp] = _sfP75::P64;
           I64[Sp - 8] = block_cfRsY_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7a_info" {
     sat_sfP7a_info:
         const sat_sfP7a_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+248;
 },
 _cfRsY() //  [R1]
         { []
         }
     {offset
       cfRsY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRt8; else goto cfRt7;
       cfRt8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRt7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRsY_info" {
     block_cfRsY_info:
         const _cfRsY;
         const 0;
         const 30;
 },
 sat_sfP7b_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRt9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRtd; else goto cfRtc;
       cfRtd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRtc: // global
           _sfP6W::P64 = P64[R1 + 7];
           _sfP6Z::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfP7a_info;
           P64[Hp] = _sfP6Z::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfP6W::P64;
           R2 = Data.Semigroup.$fReadWrappedMonoid2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7b_info" {
     sat_sfP7b_info:
         const sat_sfP7b_entry;
         const 2;
         const 36028827083735051;
         const 4294967301;
         const SfPCb_srt+248;
 },
 sat_sfP7e_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRth: // global
           _sfP73::P64 = R2;
           _sfP7e::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRti; else goto cfRtj;
       cfRtj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRtl; else goto cfRtk;
       cfRtl: // global
           HpAlloc = 24;
           goto cfRti;
       cfRti: // global
           R2 = _sfP73::P64;
           R1 = _sfP7e::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRtk: // global
           _sfP6W::P64 = P64[_sfP7e::P64 + 7];
           _sfP6Z::P64 = P64[_sfP7e::P64 + 15];
           I64[Hp - 16] = sat_sfP7b_info;
           P64[Hp - 8] = _sfP6W::P64;
           P64[Hp] = _sfP6Z::P64;
           I64[Sp - 8] = block_cfRte_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7e_info" {
     sat_sfP7e_info:
         const sat_sfP7e_entry;
         const 2;
         const 36028895803211787;
         const 4294967301;
         const SfPCb_srt+248;
 },
 _cfRte() //  [R1]
         { []
         }
     {offset
       cfRte: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRto; else goto cfRtn;
       cfRto: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRtn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRte_info" {
     block_cfRte_info:
         const _cfRte;
         const 0;
         const 30;
 },
 sat_sfP7h_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRtp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRtq; else goto cfRtr;
       cfRtq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRtr: // global
           I64[Sp - 24] = block_cfRss_info;
           _sfP6W::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfP6W::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRtE; else goto cfRst;
       ufRtE: // global
           call _cfRss(R1) args: 0, res: 0, upd: 0;
       cfRst: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7h_info" {
     sat_sfP7h_info:
         const sat_sfP7h_entry;
         const 1;
         const 108086489841139721;
         const 8589934607;
         const SfPCb_srt+248;
 },
 _cfRss() //  [R1]
         { []
         }
     {offset
       cfRss: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRtu; else goto cfRtt;
       cfRtu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRtt: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfRtw; else goto cfRtA;
       cfRtw: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRtA: // global
           I64[Hp - 16] = sat_sfP7e_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfRtx_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadWrappedMonoid_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRss_info" {
     block_cfRss_info:
         const _cfRss;
         const 2;
         const 108086489841139742;
         const SfPCb_srt+248;
 },
 _cfRtx() //  [R1]
         { []
         }
     {offset
       cfRtx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRtD; else goto cfRtC;
       cfRtD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRtC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRtx_info" {
     block_cfRtx_info:
         const _cfRtx;
         const 0;
         const 30;
 },
 Data.Semigroup.$fReadWrappedMonoid1_entry() //  [R2]
         { []
         }
     {offset
       cfRtF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRtJ; else goto cfRtI;
       cfRtJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRtI: // global
           I64[Hp - 48] = lvl33_sfP6V_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfP6W_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfP7h_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid1_info" {
     Data.Semigroup.$fReadWrappedMonoid1_info:
         const Data.Semigroup.$fReadWrappedMonoid1_entry;
         const 0;
         const 252201952794902542;
         const 4294967301;
         const SfPCb_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.109659259 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info;
         const 0;
 },
 ds_sfP7j_entry() //  [R1]
         { []
         }
     {offset
       cfRuZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRv0; else goto cfRv1;
       cfRv0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRv1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfP7j_info" {
     ds_sfP7j_info:
         const ds_sfP7j_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+448;
 },
 sat_sfP7l_entry() //  [R1]
         { []
         }
     {offset
       cfRvb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRvc; else goto cfRvd;
       cfRvc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRvd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7l_info" {
     sat_sfP7l_info:
         const sat_sfP7l_entry;
         const 2;
         const 18;
 },
 sat_sfP7m_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRve: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRvi; else goto cfRvh;
       cfRvi: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRvh: // global
           _sfP7j::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfP7l_info;
           P64[Hp - 8] = _sfP7j::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7m_info" {
     sat_sfP7m_info:
         const sat_sfP7m_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfRvj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfRvn; else goto cfRvm;
       cfRvn: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRvm: // global
           I64[Hp - 32] = ds_sfP7j_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfP7m_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.118626185 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info;
         const 0;
 },
 sat_sfP7o_entry() //  [R1]
         { []
         }
     {offset
       cfRvU: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7o_info" {
     sat_sfP7o_info:
         const sat_sfP7o_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+448;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfRvX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRw1; else goto cfRw0;
       cfRw1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRw0: // global
           I64[Hp - 16] = sat_sfP7o_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry;
         const 0;
         const 1407379178520590;
         const 4294967301;
         const SfPCb_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.124517546 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_$creadList_closure" {
     Data.Semigroup.$fReadWrappedMonoid_$creadList_closure:
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_info;
         const 0;
 },
 sat_sfP7q_entry() //  [R1]
         { []
         }
     {offset
       cfRwm: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7q_info" {
     sat_sfP7q_info:
         const sat_sfP7q_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+448;
 },
 sat_sfP7r_entry() //  [R1]
         { []
         }
     {offset
       cfRwp: // global
           _sfP7r::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfRwq; else goto cfRwr;
       cfRwr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRwt; else goto cfRws;
       cfRwt: // global
           HpAlloc = 24;
           goto cfRwq;
       cfRwq: // global
           R1 = _sfP7r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRws: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7r::P64;
           _sfP7p::P64 = P64[_sfP7r::P64 + 16];
           I64[Hp - 16] = sat_sfP7q_info;
           P64[Hp] = _sfP7p::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7r_info" {
     sat_sfP7r_info:
         const sat_sfP7r_entry;
         const 1;
         const 281479271677968;
         const SfPCb_srt+320;
 },
 Data.Semigroup.$fReadWrappedMonoid_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfRwu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRwy; else goto cfRwx;
       cfRwy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRwx: // global
           I64[Hp - 16] = sat_sfP7r_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_$creadList_info" {
     Data.Semigroup.$fReadWrappedMonoid_$creadList_info:
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_entry;
         const 0;
         const 2533279085363214;
         const 4294967301;
         const SfPCb_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.133747066 UTC

[section ""data" . Data.Semigroup.$fReadWrappedMonoid_closure" {
     Data.Semigroup.$fReadWrappedMonoid_closure:
         const Data.Semigroup.$fReadWrappedMonoid_info;
         const 0;
 },
 sat_sfP7w_entry() //  [R1]
         { []
         }
     {offset
       cfRx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRx1; else goto cfRx2;
       cfRx1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRx2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7w_info" {
     sat_sfP7w_info:
         const sat_sfP7w_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+464;
 },
 sat_sfP7v_entry() //  [R1]
         { []
         }
     {offset
       cfRx7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRx8; else goto cfRx9;
       cfRx8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRx9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7v_info" {
     sat_sfP7v_info:
         const sat_sfP7v_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+448;
 },
 sat_sfP7u_entry() //  [R1]
         { []
         }
     {offset
       cfRxe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRxf; else goto cfRxg;
       cfRxf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRxg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7u_info" {
     sat_sfP7u_info:
         const sat_sfP7u_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+472;
 },
 sat_sfP7t_entry() //  [R1]
         { []
         }
     {offset
       cfRxl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRxm; else goto cfRxn;
       cfRxm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRxn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7t_info" {
     sat_sfP7t_info:
         const sat_sfP7t_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+456;
 },
 Data.Semigroup.$fReadWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfRxp: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfRxt; else goto cfRxs;
       cfRxt: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRxs: // global
           I64[Hp - 128] = sat_sfP7w_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfP7v_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfP7u_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP7t_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadWrappedMonoid_info" {
     Data.Semigroup.$fReadWrappedMonoid_info:
         const Data.Semigroup.$fReadWrappedMonoid_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfPCb_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.144378198 UTC

[section ""cstring" . Data.Semigroup.$fShowWrappedMonoid2_bytes" {
     Data.Semigroup.$fShowWrappedMonoid2_bytes:
         I8[] [87,114,97,112,77,111,110,111,105,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.146505657 UTC

[section ""cstring" . Data.Semigroup.$fShowWrappedMonoid1_bytes" {
     Data.Semigroup.$fShowWrappedMonoid1_bytes:
         I8[] [117,110,119,114,97,112,77,111,110,111,105,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.153544026 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec6_closure" {
     Data.Semigroup.$w$cshowsPrec6_closure:
         const Data.Semigroup.$w$cshowsPrec6_info;
 },
 f_sfP7A_entry() //  [R1]
         { []
         }
     {offset
       cfRyc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfRyd; else goto cfRye;
       cfRyd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRye: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfP7A_info" {
     f_sfP7A_info:
         const f_sfP7A_entry;
         const 2;
         const 18;
 },
 sat_sfP7D_entry() //  [R1]
         { []
         }
     {offset
       cfRyz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRyA; else goto cfRyB;
       cfRyA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7D_info" {
     sat_sfP7D_info:
         const sat_sfP7D_entry;
         const 1;
         const 16;
 },
 sat_sfP7E_entry() //  [R1]
         { []
         }
     {offset
       cfRyC: // global
           _sfP7E::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRyD; else goto cfRyE;
       cfRyE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRyG; else goto cfRyF;
       cfRyG: // global
           HpAlloc = 24;
           goto cfRyD;
       cfRyD: // global
           R1 = _sfP7E::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRyF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7E::P64;
           _sfP7A::P64 = P64[_sfP7E::P64 + 16];
           _sfP7C::P64 = P64[_sfP7E::P64 + 24];
           I64[Hp - 16] = sat_sfP7D_info;
           P64[Hp] = _sfP7C::P64;
           R2 = Hp - 16;
           R1 = _sfP7A::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7E_info" {
     sat_sfP7E_info:
         const sat_sfP7E_entry;
         const 2;
         const 18;
 },
 sat_sfP7F_entry() //  [R1]
         { []
         }
     {offset
       cfRyH: // global
           _sfP7F::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRyI; else goto cfRyJ;
       cfRyJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRyL; else goto cfRyK;
       cfRyL: // global
           HpAlloc = 32;
           goto cfRyI;
       cfRyI: // global
           R1 = _sfP7F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRyK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7F::P64;
           _sfP7A::P64 = P64[_sfP7F::P64 + 16];
           _sfP7C::P64 = P64[_sfP7F::P64 + 24];
           I64[Hp - 24] = sat_sfP7E_info;
           P64[Hp - 8] = _sfP7A::P64;
           P64[Hp] = _sfP7C::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7F_info" {
     sat_sfP7F_info:
         const sat_sfP7F_entry;
         const 2;
         const 18;
 },
 sat_sfP7G_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRyM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRyQ; else goto cfRyP;
       cfRyQ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRyP: // global
           _sfP7A::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfP7F_info;
           P64[Hp - 8] = _sfP7A::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7G_info" {
     sat_sfP7G_info:
         const sat_sfP7G_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP7J_entry() //  [R1]
         { []
         }
     {offset
       cfRze: // global
           _sfP7J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRzf; else goto cfRzg;
       cfRzg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRzi; else goto cfRzh;
       cfRzi: // global
           HpAlloc = 24;
           goto cfRzf;
       cfRzf: // global
           R1 = _sfP7J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRzh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7J::P64;
           _sfP7H::P64 = P64[_sfP7J::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfP7H::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7J_info" {
     sat_sfP7J_info:
         const sat_sfP7J_entry;
         const 1;
         const 16;
 },
 sat_sfP7K_entry() //  [R1]
         { []
         }
     {offset
       cfRzj: // global
           _sfP7K::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRzk; else goto cfRzl;
       cfRzl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRzn; else goto cfRzm;
       cfRzn: // global
           HpAlloc = 24;
           goto cfRzk;
       cfRzk: // global
           R1 = _sfP7K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRzm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7K::P64;
           _sfP7A::P64 = P64[_sfP7K::P64 + 16];
           _sfP7H::P64 = P64[_sfP7K::P64 + 24];
           I64[Hp - 16] = sat_sfP7J_info;
           P64[Hp] = _sfP7H::P64;
           R2 = Hp - 16;
           R1 = _sfP7A::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7K_info" {
     sat_sfP7K_info:
         const sat_sfP7K_entry;
         const 2;
         const 18;
 },
 sat_sfP7L_entry() //  [R1]
         { []
         }
     {offset
       cfRzo: // global
           _sfP7L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRzp; else goto cfRzq;
       cfRzq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRzs; else goto cfRzr;
       cfRzs: // global
           HpAlloc = 32;
           goto cfRzp;
       cfRzp: // global
           R1 = _sfP7L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRzr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7L::P64;
           _sfP7A::P64 = P64[_sfP7L::P64 + 16];
           _sfP7H::P64 = P64[_sfP7L::P64 + 24];
           I64[Hp - 24] = sat_sfP7K_info;
           P64[Hp - 8] = _sfP7A::P64;
           P64[Hp] = _sfP7H::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7L_info" {
     sat_sfP7L_info:
         const sat_sfP7L_entry;
         const 2;
         const 18;
 },
 sat_sfP7M_entry() //  [R1]
         { []
         }
     {offset
       cfRzt: // global
           _sfP7M::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRzu; else goto cfRzv;
       cfRzv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRzx; else goto cfRzw;
       cfRzx: // global
           HpAlloc = 32;
           goto cfRzu;
       cfRzu: // global
           R1 = _sfP7M::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRzw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7M::P64;
           _sfP7A::P64 = P64[_sfP7M::P64 + 16];
           _sfP7H::P64 = P64[_sfP7M::P64 + 24];
           I64[Hp - 24] = sat_sfP7L_info;
           P64[Hp - 8] = _sfP7A::P64;
           P64[Hp] = _sfP7H::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7M_info" {
     sat_sfP7M_info:
         const sat_sfP7M_entry;
         const 2;
         const 18;
 },
 sat_sfP7N_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRzz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRzD; else goto cfRzC;
       cfRzD: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRzC: // global
           _sfP7A::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfP7M_info;
           P64[Hp - 32] = _sfP7A::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP7N_info" {
     sat_sfP7N_info:
         const sat_sfP7N_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRzH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfRzL; else goto cfRzK;
       cfRzL: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRzK: // global
           I64[Hp - 40] = f_sfP7A_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfRy8::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfRzF; else goto cfRzG;
       cfRzF: // global
           I64[Hp - 8] = sat_sfP7G_info;
           P64[Hp] = _cfRy8::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRzG: // global
           I64[Hp - 8] = sat_sfP7N_info;
           P64[Hp] = _cfRy8::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec6_info" {
     Data.Semigroup.$w$cshowsPrec6_info:
         const Data.Semigroup.$w$cshowsPrec6_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.176105292 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cfRB2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRB3; else goto cfRB4;
       cfRB3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRB4: // global
           I64[Sp - 24] = block_cfRAZ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRB8; else goto cfRB0;
       ufRB8: // global
           call _cfRAZ(R1) args: 0, res: 0, upd: 0;
       cfRB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfRAZ() //  [R1]
         { []
         }
     {offset
       cfRAZ: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec6_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRAZ_info" {
     block_cfRAZ_info:
         const _cfRAZ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.183144987 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshow_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshow_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_info;
         const 0;
 },
 sat_sfP7V_entry() //  [R1]
         { []
         }
     {offset
       cfRBv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfRBw; else goto cfRBx;
       cfRBw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRBx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7V_info" {
     sat_sfP7V_info:
         const sat_sfP7V_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+384;
 },
 sat_sfP7W_entry() //  [R1]
         { []
         }
     {offset
       cfRBy: // global
           _sfP7W::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRBz; else goto cfRBA;
       cfRBA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRBC; else goto cfRBB;
       cfRBC: // global
           HpAlloc = 32;
           goto cfRBz;
       cfRBz: // global
           R1 = _sfP7W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRBB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP7W::P64;
           _sfP7T::P64 = P64[_sfP7W::P64 + 16];
           _sfP7U::P64 = P64[_sfP7W::P64 + 24];
           I64[Hp - 24] = sat_sfP7V_info;
           P64[Hp - 8] = _sfP7T::P64;
           P64[Hp] = _sfP7U::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP7W_info" {
     sat_sfP7W_info:
         const sat_sfP7W_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+384;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfRBD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRBH; else goto cfRBG;
       cfRBH: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRBG: // global
           I64[Hp - 24] = sat_sfP7W_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowWrappedMonoid2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshow_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshow_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_entry;
         const 0;
         const 35188667056142;
         const 8589934607;
         const SfPCb_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.191269716 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowList_info;
 },
 sat_sfP81_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRCb: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec6_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP81_info" {
     sat_sfP81_info:
         const sat_sfP81_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfRCe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRCi; else goto cfRCh;
       cfRCi: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRCh: // global
           I64[Hp - 8] = sat_sfP81_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_$cshowList_info" {
     Data.Semigroup.$fShowWrappedMonoid_$cshowList_info:
         const Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.197441181 UTC

[section ""data" . Data.Semigroup.$fShowWrappedMonoid_closure" {
     Data.Semigroup.$fShowWrappedMonoid_closure:
         const Data.Semigroup.$fShowWrappedMonoid_info;
         const 0;
 },
 sat_sfP85_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRCA: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowWrappedMonoid_$cshowList_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP85_info" {
     sat_sfP85_info:
         const sat_sfP85_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP84_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRCI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowWrappedMonoid_$cshow_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP84_info" {
     sat_sfP84_info:
         const sat_sfP84_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+488;
 },
 sat_sfP83_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRCQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowWrappedMonoid_$cshowsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP83_info" {
     sat_sfP83_info:
         const sat_sfP83_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfRCU: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfRCY; else goto cfRCX;
       cfRCY: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRCX: // global
           I64[Hp - 72] = sat_sfP85_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP84_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP83_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowWrappedMonoid_info" {
     Data.Semigroup.$fShowWrappedMonoid_info:
         const Data.Semigroup.$fShowWrappedMonoid_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.206688695 UTC

[section ""data" . Data.Semigroup.$fEqWrappedMonoid_closure" {
     Data.Semigroup.$fEqWrappedMonoid_closure:
         const Data.Semigroup.$fEqWrappedMonoid_info;
 },
 sat_sfP88_entry() //  [R1]
         { []
         }
     {offset
       cfRDs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRDt; else goto cfRDu;
       cfRDt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRDu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP88_info" {
     sat_sfP88_info:
         const sat_sfP88_entry;
         const 1;
         const 16;
 },
 sat_sfP87_entry() //  [R1]
         { []
         }
     {offset
       cfRDz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRDA; else goto cfRDB;
       cfRDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRDB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP87_info" {
     sat_sfP87_info:
         const sat_sfP87_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfRDD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfRDH; else goto cfRDG;
       cfRDH: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRDG: // global
           I64[Hp - 64] = sat_sfP88_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP87_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqWrappedMonoid_info" {
     Data.Semigroup.$fEqWrappedMonoid_info:
         const Data.Semigroup.$fEqWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.214039382 UTC

[section ""data" . Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure" {
     Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure:
         const Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info;
 },
 sat_sfP8a_entry() //  [R1]
         { []
         }
     {offset
       cfREa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfREb; else goto cfREc;
       cfREb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfREc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8a_info" {
     sat_sfP8a_info:
         const sat_sfP8a_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfREd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfREh; else goto cfREg;
       cfREh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfREg: // global
           I64[Hp - 16] = sat_sfP8a_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqWrappedMonoid_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info" {
     Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_info:
         const Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.222757497 UTC

[section ""data" . Data.Semigroup.$fOrdWrappedMonoid_closure" {
     Data.Semigroup.$fOrdWrappedMonoid_closure:
         const Data.Semigroup.$fOrdWrappedMonoid_info;
 },
 sat_sfP8j_entry() //  [R1]
         { []
         }
     {offset
       cfREA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfREB; else goto cfREC;
       cfREB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfREC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8j_info" {
     sat_sfP8j_info:
         const sat_sfP8j_entry;
         const 1;
         const 16;
 },
 sat_sfP8i_entry() //  [R1]
         { []
         }
     {offset
       cfREH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfREI; else goto cfREJ;
       cfREI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfREJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8i_info" {
     sat_sfP8i_info:
         const sat_sfP8i_entry;
         const 1;
         const 16;
 },
 sat_sfP8h_entry() //  [R1]
         { []
         }
     {offset
       cfREO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfREP; else goto cfREQ;
       cfREP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfREQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8h_info" {
     sat_sfP8h_info:
         const sat_sfP8h_entry;
         const 1;
         const 16;
 },
 sat_sfP8g_entry() //  [R1]
         { []
         }
     {offset
       cfREV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfREW; else goto cfREX;
       cfREW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfREX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8g_info" {
     sat_sfP8g_info:
         const sat_sfP8g_entry;
         const 1;
         const 16;
 },
 sat_sfP8f_entry() //  [R1]
         { []
         }
     {offset
       cfRF2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRF3; else goto cfRF4;
       cfRF3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8f_info" {
     sat_sfP8f_info:
         const sat_sfP8f_entry;
         const 1;
         const 16;
 },
 sat_sfP8e_entry() //  [R1]
         { []
         }
     {offset
       cfRF9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRFa; else goto cfRFb;
       cfRFa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRFb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8e_info" {
     sat_sfP8e_info:
         const sat_sfP8e_entry;
         const 1;
         const 16;
 },
 sat_sfP8d_entry() //  [R1]
         { []
         }
     {offset
       cfRFg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRFh; else goto cfRFi;
       cfRFh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRFi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8d_info" {
     sat_sfP8d_info:
         const sat_sfP8d_entry;
         const 1;
         const 16;
 },
 sat_sfP8c_entry() //  [R1]
         { []
         }
     {offset
       cfRFn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRFo; else goto cfRFp;
       cfRFo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRFp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdWrappedMonoid_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8c_info" {
     sat_sfP8c_info:
         const sat_sfP8c_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfRFr: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfRFv; else goto cfRFu;
       cfRFv: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRFu: // global
           I64[Hp - 256] = sat_sfP8j_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfP8i_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfP8h_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfP8g_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfP8f_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfP8e_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfP8d_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfP8c_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdWrappedMonoid_info" {
     Data.Semigroup.$fOrdWrappedMonoid_info:
         const Data.Semigroup.$fOrdWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.240608069 UTC

[section ""data" . Data.Semigroup.$fBoundedWrappedMonoid_closure" {
     Data.Semigroup.$fBoundedWrappedMonoid_closure:
         const Data.Semigroup.$fBoundedWrappedMonoid_info;
 },
 sat_sfP8m_entry() //  [R1]
         { []
         }
     {offset
       cfRGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRGF; else goto cfRGG;
       cfRGF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRGG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8m_info" {
     sat_sfP8m_info:
         const sat_sfP8m_entry;
         const 1;
         const 16;
 },
 sat_sfP8l_entry() //  [R1]
         { []
         }
     {offset
       cfRGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRGM; else goto cfRGN;
       cfRGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8l_info" {
     sat_sfP8l_info:
         const sat_sfP8l_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfRGP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfRGT; else goto cfRGS;
       cfRGT: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRGS: // global
           I64[Hp - 64] = sat_sfP8m_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP8l_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedWrappedMonoid_info" {
     Data.Semigroup.$fBoundedWrappedMonoid_info:
         const Data.Semigroup.$fBoundedWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.24777306 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last1_closure" {
     Data.Semigroup.$fGeneric1Last1_closure:
         const Data.Semigroup.$fGeneric1Last1_info;
 },
 Data.Semigroup.$fGeneric1Last1_entry() //  [R2]
         { []
         }
     {offset
       cfRHi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Last1_info" {
     Data.Semigroup.$fGeneric1Last1_info:
         const Data.Semigroup.$fGeneric1Last1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.251106339 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last2_closure" {
     Data.Semigroup.$fGeneric1Last2_closure:
         const Data.Semigroup.$fGeneric1Last2_info;
 },
 Data.Semigroup.$fGeneric1Last2_entry() //  [R2]
         { []
         }
     {offset
       cfRHt: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Last2_info" {
     Data.Semigroup.$fGeneric1Last2_info:
         const Data.Semigroup.$fGeneric1Last2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.254243332 UTC

[section ""data" . Data.Semigroup.$fGeneric1Last_closure" {
     Data.Semigroup.$fGeneric1Last_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Last2_closure+1;
         const Data.Semigroup.$fGeneric1Last1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.256816247 UTC

[section ""data" . Data.Semigroup.$fGenericLast1_closure" {
     Data.Semigroup.$fGenericLast1_closure:
         const Data.Semigroup.$fGenericLast1_info;
 },
 Data.Semigroup.$fGenericLast1_entry() //  [R2]
         { []
         }
     {offset
       cfRHF: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericLast1_info" {
     Data.Semigroup.$fGenericLast1_info:
         const Data.Semigroup.$fGenericLast1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.260248629 UTC

[section ""data" . Data.Semigroup.$fGenericLast2_closure" {
     Data.Semigroup.$fGenericLast2_closure:
         const Data.Semigroup.$fGenericLast2_info;
 },
 Data.Semigroup.$fGenericLast2_entry() //  [R2]
         { []
         }
     {offset
       cfRHQ: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericLast2_info" {
     Data.Semigroup.$fGenericLast2_info:
         const Data.Semigroup.$fGenericLast2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.263430878 UTC

[section ""data" . Data.Semigroup.$fGenericLast_closure" {
     Data.Semigroup.$fGenericLast_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericLast2_closure+1;
         const Data.Semigroup.$fGenericLast1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.266701655 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgfoldl_closure" {
     Data.Semigroup.$fDataLast_$cgfoldl_closure:
         const Data.Semigroup.$fDataLast_$cgfoldl_info;
 },
 sat_sfP8v_entry() //  [R1]
         { []
         }
     {offset
       cfRI6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRI7; else goto cfRI8;
       cfRI7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRI8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8v_info" {
     sat_sfP8v_info:
         const sat_sfP8v_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataLast_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfRI9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRId; else goto cfRIc;
       cfRId: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRIc: // global
           I64[Hp - 16] = sat_sfP8v_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfP8s::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfP8s::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgfoldl_info" {
     Data.Semigroup.$fDataLast_$cgfoldl_info:
         const Data.Semigroup.$fDataLast_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.271818054 UTC

[section ""cstring" . Data.Semigroup.$fDataLast4_bytes" {
     Data.Semigroup.$fDataLast4_bytes:
         I8[] [76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.274060369 UTC

[section ""data" . Data.Semigroup.$fDataLast7_closure" {
     Data.Semigroup.$fDataLast7_closure:
         const Data.Semigroup.$fDataLast7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataLast7_entry() //  [R1]
         { []
         }
     {offset
       cfRIv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRIw; else goto cfRIx;
       cfRIw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRIx: // global
           (_cfRIs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRIs::I64 == 0) goto cfRIu; else goto cfRIt;
       cfRIu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRIt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRIs::I64;
           R2 = Data.Semigroup.$fDataLast4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast7_info" {
     Data.Semigroup.$fDataLast7_info:
         const Data.Semigroup.$fDataLast7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.277713608 UTC

[section ""data" . Data.Semigroup.$fReadLast_lexeme_closure" {
     Data.Semigroup.$fReadLast_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataLast7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.279420404 UTC

[section ""cstring" . Data.Semigroup.$fReadLast3_bytes" {
     Data.Semigroup.$fReadLast3_bytes:
         I8[] [103,101,116,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.282251803 UTC

[section ""data" . Data.Semigroup.$fReadLast2_closure" {
     Data.Semigroup.$fReadLast2_closure:
         const Data.Semigroup.$fReadLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadLast2_entry() //  [R1]
         { []
         }
     {offset
       cfRIO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRIP; else goto cfRIQ;
       cfRIP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRIQ: // global
           (_cfRIL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRIL::I64 == 0) goto cfRIN; else goto cfRIM;
       cfRIN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRIM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRIL::I64;
           R2 = Data.Semigroup.$fReadLast3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast2_info" {
     Data.Semigroup.$fReadLast2_info:
         const Data.Semigroup.$fReadLast2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.290954321 UTC

[section ""data" . Data.Semigroup.$fReadLast1_closure" {
     Data.Semigroup.$fReadLast1_closure:
         const Data.Semigroup.$fReadLast1_info;
         const 0;
 },
 lvl33_sfP8x_entry() //  [R1]
         { []
         }
     {offset
       cfRJ7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfRJ8; else goto cfRJ9;
       cfRJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfP8x_info" {
     lvl33_sfP8x_info:
         const lvl33_sfP8x_entry;
         const 1;
         const 16;
 },
 ds_sfP8y_entry() //  [R1]
         { []
         }
     {offset
       cfRJf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfP8y_info" {
     ds_sfP8y_info:
         const ds_sfP8y_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP8J_entry() //  [R1]
         { []
         }
     {offset
       cfRJQ: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8J_info" {
     sat_sfP8J_info:
         const sat_sfP8J_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfP8M_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRJW: // global
           _sfP8H::P64 = R2;
           _sfP8M::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRJX; else goto cfRJY;
       cfRJY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRK0; else goto cfRJZ;
       cfRK0: // global
           HpAlloc = 24;
           goto cfRJX;
       cfRJX: // global
           R2 = _sfP8H::P64;
           R1 = _sfP8M::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRJZ: // global
           _sfP8B::P64 = P64[_sfP8M::P64 + 7];
           I64[Hp - 16] = sat_sfP8J_info;
           P64[Hp - 8] = _sfP8B::P64;
           P64[Hp] = _sfP8H::P64;
           I64[Sp - 8] = block_cfRJT_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8M_info" {
     sat_sfP8M_info:
         const sat_sfP8M_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+248;
 },
 _cfRJT() //  [R1]
         { []
         }
     {offset
       cfRJT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRK3; else goto cfRK2;
       cfRK3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRK2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRJT_info" {
     block_cfRJT_info:
         const _cfRJT;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufRKF_srtd" {
     ufRKF_srtd:
         const SfPCb_srt+248;
         const 33;
         const 4294967303;
 },
 sat_sfP8N_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRK4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRK8; else goto cfRK7;
       cfRK8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRK7: // global
           _sfP8y::P64 = P64[R1 + 7];
           _sfP8B::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfP8M_info;
           P64[Hp] = _sfP8B::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfP8y::P64;
           R2 = Data.Semigroup.$fReadLast2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8N_info" {
     sat_sfP8N_info:
         const sat_sfP8N_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufRKF_srtd;
 },
 section ""relreadonly" . ufRKG_srtd" {
     ufRKG_srtd:
         const SfPCb_srt+248;
         const 33;
         const 4294967319;
 },
 sat_sfP8Q_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRKc: // global
           _sfP8F::P64 = R2;
           _sfP8Q::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfRKd; else goto cfRKe;
       cfRKe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRKg; else goto cfRKf;
       cfRKg: // global
           HpAlloc = 24;
           goto cfRKd;
       cfRKd: // global
           R2 = _sfP8F::P64;
           R1 = _sfP8Q::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRKf: // global
           _sfP8y::P64 = P64[_sfP8Q::P64 + 7];
           _sfP8B::P64 = P64[_sfP8Q::P64 + 15];
           I64[Hp - 16] = sat_sfP8N_info;
           P64[Hp - 8] = _sfP8y::P64;
           P64[Hp] = _sfP8B::P64;
           I64[Sp - 8] = block_cfRK9_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8Q_info" {
     sat_sfP8Q_info:
         const sat_sfP8Q_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufRKG_srtd;
 },
 _cfRK9() //  [R1]
         { []
         }
     {offset
       cfRK9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRKj; else goto cfRKi;
       cfRKj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRKi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRK9_info" {
     block_cfRK9_info:
         const _cfRK9;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufRKH_srtd" {
     ufRKH_srtd:
         const SfPCb_srt+248;
         const 34;
         const 12884901911;
 },
 sat_sfP8T_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRKk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRKl; else goto cfRKm;
       cfRKl: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRKm: // global
           I64[Sp - 24] = block_cfRJn_info;
           _sfP8y::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfP8y::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRKz; else goto cfRJo;
       ufRKz: // global
           call _cfRJn(R1) args: 0, res: 0, upd: 0;
       cfRJo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8T_info" {
     sat_sfP8T_info:
         const sat_sfP8T_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufRKH_srtd;
 },
 section ""relreadonly" . ufRKI_srtd" {
     ufRKI_srtd:
         const SfPCb_srt+248;
         const 34;
         const 12884901911;
 },
 _cfRJn() //  [R1]
         { []
         }
     {offset
       cfRJn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRKp; else goto cfRKo;
       cfRKp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRKo: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfRKr; else goto cfRKv;
       cfRKr: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRKv: // global
           I64[Hp - 16] = sat_sfP8Q_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfRKs_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadLast_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRJn_info" {
     block_cfRJn_info:
         const _cfRJn;
         const 2;
         const 18446744069414584350;
         const ufRKI_srtd;
 },
 _cfRKs() //  [R1]
         { []
         }
     {offset
       cfRKs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRKy; else goto cfRKx;
       cfRKy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfRKx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRKs_info" {
     block_cfRKs_info:
         const _cfRKs;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufRKJ_srtd" {
     ufRKJ_srtd:
         const SfPCb_srt+248;
         const 35;
         const 30064771159;
 },
 Data.Semigroup.$fReadLast1_entry() //  [R2]
         { []
         }
     {offset
       cfRKA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRKE; else goto cfRKD;
       cfRKE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRKD: // global
           I64[Hp - 48] = lvl33_sfP8x_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfP8y_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfP8T_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast1_info" {
     Data.Semigroup.$fReadLast1_info:
         const Data.Semigroup.$fReadLast1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufRKJ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.319003761 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadsPrec_closure" {
     Data.Semigroup.$fReadLast_$creadsPrec_closure:
         const Data.Semigroup.$fReadLast_$creadsPrec_info;
         const 0;
 },
 ds_sfP8V_entry() //  [R1]
         { []
         }
     {offset
       cfRM4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRM5; else goto cfRM6;
       cfRM5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRM6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfP8V_info" {
     ds_sfP8V_info:
         const ds_sfP8V_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+520;
 },
 sat_sfP8X_entry() //  [R1]
         { []
         }
     {offset
       cfRMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRMh; else goto cfRMi;
       cfRMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRMi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP8X_info" {
     sat_sfP8X_info:
         const sat_sfP8X_entry;
         const 2;
         const 18;
 },
 sat_sfP8Y_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRMj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRMn; else goto cfRMm;
       cfRMn: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRMm: // global
           _sfP8V::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfP8X_info;
           P64[Hp - 8] = _sfP8V::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP8Y_info" {
     sat_sfP8Y_info:
         const sat_sfP8Y_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadLast_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfRMo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfRMs; else goto cfRMr;
       cfRMs: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRMr: // global
           I64[Hp - 32] = ds_sfP8V_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfP8Y_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadsPrec_info" {
     Data.Semigroup.$fReadLast_$creadsPrec_info:
         const Data.Semigroup.$fReadLast_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.32792365 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadListPrec_closure" {
     Data.Semigroup.$fReadLast_$creadListPrec_closure:
         const Data.Semigroup.$fReadLast_$creadListPrec_info;
         const 0;
 },
 sat_sfP90_entry() //  [R1]
         { []
         }
     {offset
       cfRMZ: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadLast1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP90_info" {
     sat_sfP90_info:
         const sat_sfP90_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+520;
 },
 Data.Semigroup.$fReadLast_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfRN2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRN6; else goto cfRN5;
       cfRN6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRN5: // global
           I64[Hp - 16] = sat_sfP90_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadListPrec_info" {
     Data.Semigroup.$fReadLast_$creadListPrec_info:
         const Data.Semigroup.$fReadLast_$creadListPrec_entry;
         const 0;
         const 720575944674246670;
         const 4294967301;
         const SfPCb_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.33474628 UTC

[section ""data" . Data.Semigroup.$fReadLast_$creadList_closure" {
     Data.Semigroup.$fReadLast_$creadList_closure:
         const Data.Semigroup.$fReadLast_$creadList_info;
         const 0;
 },
 sat_sfP92_entry() //  [R1]
         { []
         }
     {offset
       cfRNr: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadLast1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP92_info" {
     sat_sfP92_info:
         const sat_sfP92_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+520;
 },
 sat_sfP93_entry() //  [R1]
         { []
         }
     {offset
       cfRNu: // global
           _sfP93::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfRNv; else goto cfRNw;
       cfRNw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRNy; else goto cfRNx;
       cfRNy: // global
           HpAlloc = 24;
           goto cfRNv;
       cfRNv: // global
           R1 = _sfP93::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRNx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP93::P64;
           _sfP91::P64 = P64[_sfP93::P64 + 16];
           I64[Hp - 16] = sat_sfP92_info;
           P64[Hp] = _sfP91::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP93_info" {
     sat_sfP93_info:
         const sat_sfP93_entry;
         const 1;
         const 144115192370823184;
         const SfPCb_srt+320;
 },
 Data.Semigroup.$fReadLast_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfRNz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRND; else goto cfRNC;
       cfRND: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRNC: // global
           I64[Hp - 16] = sat_sfP93_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_$creadList_info" {
     Data.Semigroup.$fReadLast_$creadList_info:
         const Data.Semigroup.$fReadLast_$creadList_entry;
         const 0;
         const 1297036696977670158;
         const 4294967301;
         const SfPCb_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.343142836 UTC

[section ""data" . Data.Semigroup.$fReadLast_closure" {
     Data.Semigroup.$fReadLast_closure:
         const Data.Semigroup.$fReadLast_info;
         const 0;
 },
 sat_sfP98_entry() //  [R1]
         { []
         }
     {offset
       cfRO5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRO6; else goto cfRO7;
       cfRO6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRO7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP98_info" {
     sat_sfP98_info:
         const sat_sfP98_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+536;
 },
 sat_sfP97_entry() //  [R1]
         { []
         }
     {offset
       cfROc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfROd; else goto cfROe;
       cfROd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfROe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP97_info" {
     sat_sfP97_info:
         const sat_sfP97_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+520;
 },
 sat_sfP96_entry() //  [R1]
         { []
         }
     {offset
       cfROj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfROk; else goto cfROl;
       cfROk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfROl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP96_info" {
     sat_sfP96_info:
         const sat_sfP96_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+544;
 },
 sat_sfP95_entry() //  [R1]
         { []
         }
     {offset
       cfROq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfROr; else goto cfROs;
       cfROr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfROs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadLast_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP95_info" {
     sat_sfP95_info:
         const sat_sfP95_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+528;
 },
 Data.Semigroup.$fReadLast_entry() //  [R2]
         { []
         }
     {offset
       cfROu: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfROy; else goto cfROx;
       cfROy: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfROx: // global
           I64[Hp - 128] = sat_sfP98_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfP97_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfP96_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP95_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadLast_info" {
     Data.Semigroup.$fReadLast_info:
         const Data.Semigroup.$fReadLast_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfPCb_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.352804511 UTC

[section ""cstring" . Data.Semigroup.$fShowLast2_bytes" {
     Data.Semigroup.$fShowLast2_bytes:
         I8[] [76,97,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.354861044 UTC

[section ""cstring" . Data.Semigroup.$fShowLast1_bytes" {
     Data.Semigroup.$fShowLast1_bytes:
         I8[] [103,101,116,76,97,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.36180957 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec2_closure" {
     Data.Semigroup.$w$cshowsPrec2_closure:
         const Data.Semigroup.$w$cshowsPrec2_info;
 },
 f_sfP9c_entry() //  [R1]
         { []
         }
     {offset
       cfRPh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfRPi; else goto cfRPj;
       cfRPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfP9c_info" {
     f_sfP9c_info:
         const f_sfP9c_entry;
         const 2;
         const 18;
 },
 sat_sfP9f_entry() //  [R1]
         { []
         }
     {offset
       cfRPE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRPF; else goto cfRPG;
       cfRPF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRPG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9f_info" {
     sat_sfP9f_info:
         const sat_sfP9f_entry;
         const 1;
         const 16;
 },
 sat_sfP9g_entry() //  [R1]
         { []
         }
     {offset
       cfRPH: // global
           _sfP9g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRPI; else goto cfRPJ;
       cfRPJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRPL; else goto cfRPK;
       cfRPL: // global
           HpAlloc = 24;
           goto cfRPI;
       cfRPI: // global
           R1 = _sfP9g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRPK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9g::P64;
           _sfP9c::P64 = P64[_sfP9g::P64 + 16];
           _sfP9e::P64 = P64[_sfP9g::P64 + 24];
           I64[Hp - 16] = sat_sfP9f_info;
           P64[Hp] = _sfP9e::P64;
           R2 = Hp - 16;
           R1 = _sfP9c::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9g_info" {
     sat_sfP9g_info:
         const sat_sfP9g_entry;
         const 2;
         const 18;
 },
 sat_sfP9h_entry() //  [R1]
         { []
         }
     {offset
       cfRPM: // global
           _sfP9h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRPN; else goto cfRPO;
       cfRPO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRPQ; else goto cfRPP;
       cfRPQ: // global
           HpAlloc = 32;
           goto cfRPN;
       cfRPN: // global
           R1 = _sfP9h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRPP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9h::P64;
           _sfP9c::P64 = P64[_sfP9h::P64 + 16];
           _sfP9e::P64 = P64[_sfP9h::P64 + 24];
           I64[Hp - 24] = sat_sfP9g_info;
           P64[Hp - 8] = _sfP9c::P64;
           P64[Hp] = _sfP9e::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9h_info" {
     sat_sfP9h_info:
         const sat_sfP9h_entry;
         const 2;
         const 18;
 },
 sat_sfP9i_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRPR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRPV; else goto cfRPU;
       cfRPV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRPU: // global
           _sfP9c::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfP9h_info;
           P64[Hp - 8] = _sfP9c::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9i_info" {
     sat_sfP9i_info:
         const sat_sfP9i_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfP9l_entry() //  [R1]
         { []
         }
     {offset
       cfRQj: // global
           _sfP9l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRQk; else goto cfRQl;
       cfRQl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRQn; else goto cfRQm;
       cfRQn: // global
           HpAlloc = 24;
           goto cfRQk;
       cfRQk: // global
           R1 = _sfP9l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRQm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9l::P64;
           _sfP9j::P64 = P64[_sfP9l::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfP9j::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9l_info" {
     sat_sfP9l_info:
         const sat_sfP9l_entry;
         const 1;
         const 16;
 },
 sat_sfP9m_entry() //  [R1]
         { []
         }
     {offset
       cfRQo: // global
           _sfP9m::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRQp; else goto cfRQq;
       cfRQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRQs; else goto cfRQr;
       cfRQs: // global
           HpAlloc = 24;
           goto cfRQp;
       cfRQp: // global
           R1 = _sfP9m::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRQr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9m::P64;
           _sfP9c::P64 = P64[_sfP9m::P64 + 16];
           _sfP9j::P64 = P64[_sfP9m::P64 + 24];
           I64[Hp - 16] = sat_sfP9l_info;
           P64[Hp] = _sfP9j::P64;
           R2 = Hp - 16;
           R1 = _sfP9c::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9m_info" {
     sat_sfP9m_info:
         const sat_sfP9m_entry;
         const 2;
         const 18;
 },
 sat_sfP9n_entry() //  [R1]
         { []
         }
     {offset
       cfRQt: // global
           _sfP9n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRQu; else goto cfRQv;
       cfRQv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRQx; else goto cfRQw;
       cfRQx: // global
           HpAlloc = 32;
           goto cfRQu;
       cfRQu: // global
           R1 = _sfP9n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRQw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9n::P64;
           _sfP9c::P64 = P64[_sfP9n::P64 + 16];
           _sfP9j::P64 = P64[_sfP9n::P64 + 24];
           I64[Hp - 24] = sat_sfP9m_info;
           P64[Hp - 8] = _sfP9c::P64;
           P64[Hp] = _sfP9j::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9n_info" {
     sat_sfP9n_info:
         const sat_sfP9n_entry;
         const 2;
         const 18;
 },
 sat_sfP9o_entry() //  [R1]
         { []
         }
     {offset
       cfRQy: // global
           _sfP9o::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRQz; else goto cfRQA;
       cfRQA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRQC; else goto cfRQB;
       cfRQC: // global
           HpAlloc = 32;
           goto cfRQz;
       cfRQz: // global
           R1 = _sfP9o::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRQB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9o::P64;
           _sfP9c::P64 = P64[_sfP9o::P64 + 16];
           _sfP9j::P64 = P64[_sfP9o::P64 + 24];
           I64[Hp - 24] = sat_sfP9n_info;
           P64[Hp - 8] = _sfP9c::P64;
           P64[Hp] = _sfP9j::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9o_info" {
     sat_sfP9o_info:
         const sat_sfP9o_entry;
         const 2;
         const 18;
 },
 sat_sfP9p_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRQE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfRQI; else goto cfRQH;
       cfRQI: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRQH: // global
           _sfP9c::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfP9o_info;
           P64[Hp - 32] = _sfP9c::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9p_info" {
     sat_sfP9p_info:
         const sat_sfP9p_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRQM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfRQQ; else goto cfRQP;
       cfRQQ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRQP: // global
           I64[Hp - 40] = f_sfP9c_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfRPd::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfRQK; else goto cfRQL;
       cfRQK: // global
           I64[Hp - 8] = sat_sfP9i_info;
           P64[Hp] = _cfRPd::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfRQL: // global
           I64[Hp - 8] = sat_sfP9p_info;
           P64[Hp] = _cfRPd::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec2_info" {
     Data.Semigroup.$w$cshowsPrec2_info:
         const Data.Semigroup.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.385571952 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshowsPrec_closure" {
     Data.Semigroup.$fShowLast_$cshowsPrec_closure:
         const Data.Semigroup.$fShowLast_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowLast_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRS7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfRS8; else goto cfRS9;
       cfRS8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRS9: // global
           I64[Sp - 24] = block_cfRS4_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufRSd; else goto cfRS5;
       ufRSd: // global
           call _cfRS4(R1) args: 0, res: 0, upd: 0;
       cfRS5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshowsPrec_info" {
     Data.Semigroup.$fShowLast_$cshowsPrec_info:
         const Data.Semigroup.$fShowLast_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfRS4() //  [R1]
         { []
         }
     {offset
       cfRS4: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec2_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfRS4_info" {
     block_cfRS4_info:
         const _cfRS4;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.391877198 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshow_closure" {
     Data.Semigroup.$fShowLast_$cshow_closure:
         const Data.Semigroup.$fShowLast_$cshow_info;
         const 0;
 },
 sat_sfP9x_entry() //  [R1]
         { []
         }
     {offset
       cfRSA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfRSB; else goto cfRSC;
       cfRSB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRSC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9x_info" {
     sat_sfP9x_info:
         const sat_sfP9x_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+384;
 },
 sat_sfP9y_entry() //  [R1]
         { []
         }
     {offset
       cfRSD: // global
           _sfP9y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfRSE; else goto cfRSF;
       cfRSF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRSH; else goto cfRSG;
       cfRSH: // global
           HpAlloc = 32;
           goto cfRSE;
       cfRSE: // global
           R1 = _sfP9y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRSG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfP9y::P64;
           _sfP9v::P64 = P64[_sfP9y::P64 + 16];
           _sfP9w::P64 = P64[_sfP9y::P64 + 24];
           I64[Hp - 24] = sat_sfP9x_info;
           P64[Hp - 8] = _sfP9v::P64;
           P64[Hp] = _sfP9w::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9y_info" {
     sat_sfP9y_info:
         const sat_sfP9y_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+384;
 },
 Data.Semigroup.$fShowLast_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfRSI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfRSM; else goto cfRSL;
       cfRSM: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRSL: // global
           I64[Hp - 24] = sat_sfP9y_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowLast2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshow_info" {
     Data.Semigroup.$fShowLast_$cshow_info:
         const Data.Semigroup.$fShowLast_$cshow_entry;
         const 0;
         const 18014402804449294;
         const 8589934607;
         const SfPCb_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.399817175 UTC

[section ""data" . Data.Semigroup.$fShowLast_$cshowList_closure" {
     Data.Semigroup.$fShowLast_$cshowList_closure:
         const Data.Semigroup.$fShowLast_$cshowList_info;
 },
 sat_sfP9D_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRTg: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec2_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9D_info" {
     sat_sfP9D_info:
         const sat_sfP9D_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowLast_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfRTj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfRTn; else goto cfRTm;
       cfRTn: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRTm: // global
           I64[Hp - 8] = sat_sfP9D_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_$cshowList_info" {
     Data.Semigroup.$fShowLast_$cshowList_info:
         const Data.Semigroup.$fShowLast_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.406315167 UTC

[section ""data" . Data.Semigroup.$fShowLast_closure" {
     Data.Semigroup.$fShowLast_closure:
         const Data.Semigroup.$fShowLast_info;
         const 0;
 },
 sat_sfP9H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRTF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowLast_$cshowList_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9H_info" {
     sat_sfP9H_info:
         const sat_sfP9H_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfP9G_entry() //  [R1, R2]
         { []
         }
     {offset
       cfRTN: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowLast_$cshow_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9G_info" {
     sat_sfP9G_info:
         const sat_sfP9G_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+560;
 },
 sat_sfP9F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfRTV: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowLast_$cshowsPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfP9F_info" {
     sat_sfP9F_info:
         const sat_sfP9F_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowLast_entry() //  [R2]
         { []
         }
     {offset
       cfRTZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfRU3; else goto cfRU2;
       cfRU3: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRU2: // global
           I64[Hp - 72] = sat_sfP9H_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfP9G_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP9F_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowLast_info" {
     Data.Semigroup.$fShowLast_info:
         const Data.Semigroup.$fShowLast_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.416318687 UTC

[section ""data" . Data.Semigroup.$fEqLast_closure" {
     Data.Semigroup.$fEqLast_closure:
         const Data.Semigroup.$fEqLast_info;
 },
 sat_sfP9K_entry() //  [R1]
         { []
         }
     {offset
       cfRUx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRUy; else goto cfRUz;
       cfRUy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRUz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9K_info" {
     sat_sfP9K_info:
         const sat_sfP9K_entry;
         const 1;
         const 16;
 },
 sat_sfP9J_entry() //  [R1]
         { []
         }
     {offset
       cfRUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRUF; else goto cfRUG;
       cfRUF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRUG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9J_info" {
     sat_sfP9J_info:
         const sat_sfP9J_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqLast_entry() //  [R2]
         { []
         }
     {offset
       cfRUI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfRUM; else goto cfRUL;
       cfRUM: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRUL: // global
           I64[Hp - 64] = sat_sfP9K_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP9J_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqLast_info" {
     Data.Semigroup.$fEqLast_info:
         const Data.Semigroup.$fEqLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.423765804 UTC

[section ""data" . Data.Semigroup.$fOrdLast_$cp1Ord_closure" {
     Data.Semigroup.$fOrdLast_$cp1Ord_closure:
         const Data.Semigroup.$fOrdLast_$cp1Ord_info;
 },
 sat_sfP9M_entry() //  [R1]
         { []
         }
     {offset
       cfRVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRVg; else goto cfRVh;
       cfRVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRVh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9M_info" {
     sat_sfP9M_info:
         const sat_sfP9M_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdLast_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfRVi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRVm; else goto cfRVl;
       cfRVm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdLast_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRVl: // global
           I64[Hp - 16] = sat_sfP9M_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqLast_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdLast_$cp1Ord_info" {
     Data.Semigroup.$fOrdLast_$cp1Ord_info:
         const Data.Semigroup.$fOrdLast_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.432063893 UTC

[section ""data" . Data.Semigroup.$fOrdLast_closure" {
     Data.Semigroup.$fOrdLast_closure:
         const Data.Semigroup.$fOrdLast_info;
 },
 sat_sfP9V_entry() //  [R1]
         { []
         }
     {offset
       cfRVF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRVG; else goto cfRVH;
       cfRVG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRVH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9V_info" {
     sat_sfP9V_info:
         const sat_sfP9V_entry;
         const 1;
         const 16;
 },
 sat_sfP9U_entry() //  [R1]
         { []
         }
     {offset
       cfRVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRVN; else goto cfRVO;
       cfRVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9U_info" {
     sat_sfP9U_info:
         const sat_sfP9U_entry;
         const 1;
         const 16;
 },
 sat_sfP9T_entry() //  [R1]
         { []
         }
     {offset
       cfRVT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRVU; else goto cfRVV;
       cfRVU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRVV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9T_info" {
     sat_sfP9T_info:
         const sat_sfP9T_entry;
         const 1;
         const 16;
 },
 sat_sfP9S_entry() //  [R1]
         { []
         }
     {offset
       cfRW0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRW1; else goto cfRW2;
       cfRW1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRW2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9S_info" {
     sat_sfP9S_info:
         const sat_sfP9S_entry;
         const 1;
         const 16;
 },
 sat_sfP9R_entry() //  [R1]
         { []
         }
     {offset
       cfRW7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRW8; else goto cfRW9;
       cfRW8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRW9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9R_info" {
     sat_sfP9R_info:
         const sat_sfP9R_entry;
         const 1;
         const 16;
 },
 sat_sfP9Q_entry() //  [R1]
         { []
         }
     {offset
       cfRWe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRWf; else goto cfRWg;
       cfRWf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRWg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9Q_info" {
     sat_sfP9Q_info:
         const sat_sfP9Q_entry;
         const 1;
         const 16;
 },
 sat_sfP9P_entry() //  [R1]
         { []
         }
     {offset
       cfRWl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRWm; else goto cfRWn;
       cfRWm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRWn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9P_info" {
     sat_sfP9P_info:
         const sat_sfP9P_entry;
         const 1;
         const 16;
 },
 sat_sfP9O_entry() //  [R1]
         { []
         }
     {offset
       cfRWs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRWt; else goto cfRWu;
       cfRWt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRWu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdLast_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9O_info" {
     sat_sfP9O_info:
         const sat_sfP9O_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdLast_entry() //  [R2]
         { []
         }
     {offset
       cfRWw: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfRWA; else goto cfRWz;
       cfRWA: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRWz: // global
           I64[Hp - 256] = sat_sfP9V_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfP9U_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfP9T_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfP9S_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfP9R_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfP9Q_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfP9P_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfP9O_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdLast_info" {
     Data.Semigroup.$fOrdLast_info:
         const Data.Semigroup.$fOrdLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.450607618 UTC

[section ""data" . Data.Semigroup.$fBoundedLast_closure" {
     Data.Semigroup.$fBoundedLast_closure:
         const Data.Semigroup.$fBoundedLast_info;
 },
 sat_sfP9Y_entry() //  [R1]
         { []
         }
     {offset
       cfRXJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRXK; else goto cfRXL;
       cfRXK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRXL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9Y_info" {
     sat_sfP9Y_info:
         const sat_sfP9Y_entry;
         const 1;
         const 16;
 },
 sat_sfP9X_entry() //  [R1]
         { []
         }
     {offset
       cfRXQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRXR; else goto cfRXS;
       cfRXR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRXS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfP9X_info" {
     sat_sfP9X_info:
         const sat_sfP9X_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedLast_entry() //  [R2]
         { []
         }
     {offset
       cfRXU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfRXY; else goto cfRXX;
       cfRXY: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfRXX: // global
           I64[Hp - 64] = sat_sfP9Y_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfP9X_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedLast_info" {
     Data.Semigroup.$fBoundedLast_info:
         const Data.Semigroup.$fBoundedLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.457760525 UTC

[section ""data" . Data.Semigroup.$fGeneric1First1_closure" {
     Data.Semigroup.$fGeneric1First1_closure:
         const Data.Semigroup.$fGeneric1First1_info;
 },
 Data.Semigroup.$fGeneric1First1_entry() //  [R2]
         { []
         }
     {offset
       cfRYn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1First1_info" {
     Data.Semigroup.$fGeneric1First1_info:
         const Data.Semigroup.$fGeneric1First1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.461041222 UTC

[section ""data" . Data.Semigroup.$fGeneric1First2_closure" {
     Data.Semigroup.$fGeneric1First2_closure:
         const Data.Semigroup.$fGeneric1First2_info;
 },
 Data.Semigroup.$fGeneric1First2_entry() //  [R2]
         { []
         }
     {offset
       cfRYy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1First2_info" {
     Data.Semigroup.$fGeneric1First2_info:
         const Data.Semigroup.$fGeneric1First2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.464080997 UTC

[section ""data" . Data.Semigroup.$fGeneric1First_closure" {
     Data.Semigroup.$fGeneric1First_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1First2_closure+1;
         const Data.Semigroup.$fGeneric1First1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.466486584 UTC

[section ""data" . Data.Semigroup.$fGenericFirst1_closure" {
     Data.Semigroup.$fGenericFirst1_closure:
         const Data.Semigroup.$fGenericFirst1_info;
 },
 Data.Semigroup.$fGenericFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfRYK: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericFirst1_info" {
     Data.Semigroup.$fGenericFirst1_info:
         const Data.Semigroup.$fGenericFirst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.469893287 UTC

[section ""data" . Data.Semigroup.$fGenericFirst2_closure" {
     Data.Semigroup.$fGenericFirst2_closure:
         const Data.Semigroup.$fGenericFirst2_info;
 },
 Data.Semigroup.$fGenericFirst2_entry() //  [R2]
         { []
         }
     {offset
       cfRYV: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericFirst2_info" {
     Data.Semigroup.$fGenericFirst2_info:
         const Data.Semigroup.$fGenericFirst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.472921431 UTC

[section ""data" . Data.Semigroup.$fGenericFirst_closure" {
     Data.Semigroup.$fGenericFirst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericFirst2_closure+1;
         const Data.Semigroup.$fGenericFirst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.475602112 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgfoldl_closure" {
     Data.Semigroup.$fDataFirst_$cgfoldl_closure:
         const Data.Semigroup.$fDataFirst_$cgfoldl_info;
 },
 sat_sfPa7_entry() //  [R1]
         { []
         }
     {offset
       cfRZb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRZc; else goto cfRZd;
       cfRZc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRZd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPa7_info" {
     sat_sfPa7_info:
         const sat_sfPa7_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataFirst_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfRZe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfRZi; else goto cfRZh;
       cfRZi: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfRZh: // global
           I64[Hp - 16] = sat_sfPa7_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfPa4::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfPa4::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgfoldl_info" {
     Data.Semigroup.$fDataFirst_$cgfoldl_info:
         const Data.Semigroup.$fDataFirst_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.481579999 UTC

[section ""cstring" . Data.Semigroup.$fDataFirst4_bytes" {
     Data.Semigroup.$fDataFirst4_bytes:
         I8[] [70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.483890698 UTC

[section ""data" . Data.Semigroup.$fDataFirst7_closure" {
     Data.Semigroup.$fDataFirst7_closure:
         const Data.Semigroup.$fDataFirst7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataFirst7_entry() //  [R1]
         { []
         }
     {offset
       cfRZA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRZB; else goto cfRZC;
       cfRZB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRZC: // global
           (_cfRZx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRZx::I64 == 0) goto cfRZz; else goto cfRZy;
       cfRZz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRZy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRZx::I64;
           R2 = Data.Semigroup.$fDataFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst7_info" {
     Data.Semigroup.$fDataFirst7_info:
         const Data.Semigroup.$fDataFirst7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.487386823 UTC

[section ""data" . Data.Semigroup.$fReadFirst_lexeme1_closure" {
     Data.Semigroup.$fReadFirst_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataFirst7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.48905235 UTC

[section ""cstring" . Data.Semigroup.$fReadFirst6_bytes" {
     Data.Semigroup.$fReadFirst6_bytes:
         I8[] [103,101,116,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.491591818 UTC

[section ""data" . Data.Semigroup.$fReadFirst5_closure" {
     Data.Semigroup.$fReadFirst5_closure:
         const Data.Semigroup.$fReadFirst5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadFirst5_entry() //  [R1]
         { []
         }
     {offset
       cfRZT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfRZU; else goto cfRZV;
       cfRZU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfRZV: // global
           (_cfRZQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfRZQ::I64 == 0) goto cfRZS; else goto cfRZR;
       cfRZS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfRZR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfRZQ::I64;
           R2 = Data.Semigroup.$fReadFirst6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst5_info" {
     Data.Semigroup.$fReadFirst5_info:
         const Data.Semigroup.$fReadFirst5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.500300386 UTC

[section ""data" . Data.Semigroup.$fReadFirst1_closure" {
     Data.Semigroup.$fReadFirst1_closure:
         const Data.Semigroup.$fReadFirst1_info;
         const 0;
 },
 lvl33_sfPa9_entry() //  [R1]
         { []
         }
     {offset
       cfS0c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfS0d; else goto cfS0e;
       cfS0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPa9_info" {
     lvl33_sfPa9_info:
         const lvl33_sfPa9_entry;
         const 1;
         const 16;
 },
 ds_sfPaa_entry() //  [R1]
         { []
         }
     {offset
       cfS0k: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfPaa_info" {
     ds_sfPaa_info:
         const ds_sfPaa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPal_entry() //  [R1]
         { []
         }
     {offset
       cfS0V: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPal_info" {
     sat_sfPal_info:
         const sat_sfPal_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPao_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS11: // global
           _sfPaj::P64 = R2;
           _sfPao::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfS12; else goto cfS13;
       cfS13: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS15; else goto cfS14;
       cfS15: // global
           HpAlloc = 24;
           goto cfS12;
       cfS12: // global
           R2 = _sfPaj::P64;
           R1 = _sfPao::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS14: // global
           _sfPad::P64 = P64[_sfPao::P64 + 7];
           I64[Hp - 16] = sat_sfPal_info;
           P64[Hp - 8] = _sfPad::P64;
           P64[Hp] = _sfPaj::P64;
           I64[Sp - 8] = block_cfS0Y_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPao_info" {
     sat_sfPao_info:
         const sat_sfPao_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+576;
 },
 _cfS0Y() //  [R1]
         { []
         }
     {offset
       cfS0Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfS18; else goto cfS17;
       cfS18: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfS17: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfS0Y_info" {
     block_cfS0Y_info:
         const _cfS0Y;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufS1K_srtd" {
     ufS1K_srtd:
         const SfPCb_srt+264;
         const 42;
         const 3848290697217;
 },
 sat_sfPap_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS19: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfS1d; else goto cfS1c;
       cfS1d: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS1c: // global
           _sfPaa::P64 = P64[R1 + 7];
           _sfPad::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfPao_info;
           P64[Hp] = _sfPad::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfPaa::P64;
           R2 = Data.Semigroup.$fReadFirst5_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPap_info" {
     sat_sfPap_info:
         const sat_sfPap_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufS1K_srtd;
 },
 section ""relreadonly" . ufS1L_srtd" {
     ufS1L_srtd:
         const SfPCb_srt+264;
         const 42;
         const 3848290697221;
 },
 sat_sfPas_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS1h: // global
           _sfPah::P64 = R2;
           _sfPas::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfS1i; else goto cfS1j;
       cfS1j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS1l; else goto cfS1k;
       cfS1l: // global
           HpAlloc = 24;
           goto cfS1i;
       cfS1i: // global
           R2 = _sfPah::P64;
           R1 = _sfPas::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS1k: // global
           _sfPaa::P64 = P64[_sfPas::P64 + 7];
           _sfPad::P64 = P64[_sfPas::P64 + 15];
           I64[Hp - 16] = sat_sfPap_info;
           P64[Hp - 8] = _sfPaa::P64;
           P64[Hp] = _sfPad::P64;
           I64[Sp - 8] = block_cfS1e_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPas_info" {
     sat_sfPas_info:
         const sat_sfPas_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufS1L_srtd;
 },
 _cfS1e() //  [R1]
         { []
         }
     {offset
       cfS1e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfS1o; else goto cfS1n;
       cfS1o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfS1n: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfS1e_info" {
     block_cfS1e_info:
         const _cfS1e;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufS1M_srtd" {
     ufS1M_srtd:
         const SfPCb_srt+264;
         const 43;
         const 8246337208325;
 },
 sat_sfPav_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfS1p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfS1q; else goto cfS1r;
       cfS1q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfS1r: // global
           I64[Sp - 24] = block_cfS0s_info;
           _sfPaa::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfPaa::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufS1E; else goto cfS0t;
       ufS1E: // global
           call _cfS0s(R1) args: 0, res: 0, upd: 0;
       cfS0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPav_info" {
     sat_sfPav_info:
         const sat_sfPav_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufS1M_srtd;
 },
 section ""relreadonly" . ufS1N_srtd" {
     ufS1N_srtd:
         const SfPCb_srt+264;
         const 43;
         const 8246337208325;
 },
 _cfS0s() //  [R1]
         { []
         }
     {offset
       cfS0s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS1u; else goto cfS1t;
       cfS1u: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfS1t: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfS1w; else goto cfS1A;
       cfS1w: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfS1A: // global
           I64[Hp - 16] = sat_sfPas_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfS1x_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfS0s_info" {
     block_cfS0s_info:
         const _cfS0s;
         const 2;
         const 18446744069414584350;
         const ufS1N_srtd;
 },
 _cfS1x() //  [R1]
         { []
         }
     {offset
       cfS1x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfS1D; else goto cfS1C;
       cfS1D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfS1C: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfS1x_info" {
     block_cfS1x_info:
         const _cfS1x;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufS1O_srtd" {
     ufS1O_srtd:
         const SfPCb_srt+264;
         const 44;
         const 17042430230549;
 },
 Data.Semigroup.$fReadFirst1_entry() //  [R2]
         { []
         }
     {offset
       cfS1F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfS1J; else goto cfS1I;
       cfS1J: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS1I: // global
           I64[Hp - 48] = lvl33_sfPa9_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfPaa_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfPav_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst1_info" {
     Data.Semigroup.$fReadFirst1_info:
         const Data.Semigroup.$fReadFirst1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufS1O_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.527890741 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadsPrec_closure" {
     Data.Semigroup.$fReadFirst_$creadsPrec_closure:
         const Data.Semigroup.$fReadFirst_$creadsPrec_info;
         const 0;
 },
 ds_sfPax_entry() //  [R1]
         { []
         }
     {offset
       cfS39: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS3a; else goto cfS3b;
       cfS3a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS3b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfPax_info" {
     ds_sfPax_info:
         const ds_sfPax_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+608;
 },
 sat_sfPaz_entry() //  [R1]
         { []
         }
     {offset
       cfS3l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS3m; else goto cfS3n;
       cfS3m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS3n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaz_info" {
     sat_sfPaz_info:
         const sat_sfPaz_entry;
         const 2;
         const 18;
 },
 sat_sfPaA_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS3o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS3s; else goto cfS3r;
       cfS3s: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS3r: // global
           _sfPax::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPaz_info;
           P64[Hp - 8] = _sfPax::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPaA_info" {
     sat_sfPaA_info:
         const sat_sfPaA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadFirst_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfS3t: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfS3x; else goto cfS3w;
       cfS3x: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS3w: // global
           I64[Hp - 32] = ds_sfPax_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfPaA_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadsPrec_info" {
     Data.Semigroup.$fReadFirst_$creadsPrec_info:
         const Data.Semigroup.$fReadFirst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.537484649 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadListPrec_closure" {
     Data.Semigroup.$fReadFirst_$creadListPrec_closure:
         const Data.Semigroup.$fReadFirst_$creadListPrec_info;
         const 0;
 },
 sat_sfPaC_entry() //  [R1]
         { []
         }
     {offset
       cfS44: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPaC_info" {
     sat_sfPaC_info:
         const sat_sfPaC_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+608;
 },
 section ""relreadonly" . ufS4c_srtd" {
     ufS4c_srtd:
         const SfPCb_srt+320;
         const 39;
         const 343597383681;
 },
 Data.Semigroup.$fReadFirst_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfS47: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS4b; else goto cfS4a;
       cfS4b: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS4a: // global
           I64[Hp - 16] = sat_sfPaC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadListPrec_info" {
     Data.Semigroup.$fReadFirst_$creadListPrec_info:
         const Data.Semigroup.$fReadFirst_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufS4c_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.544101434 UTC

[section ""data" . Data.Semigroup.$fReadFirst_$creadList_closure" {
     Data.Semigroup.$fReadFirst_$creadList_closure:
         const Data.Semigroup.$fReadFirst_$creadList_info;
         const 0;
 },
 sat_sfPaE_entry() //  [R1]
         { []
         }
     {offset
       cfS4y: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPaE_info" {
     sat_sfPaE_info:
         const sat_sfPaE_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+608;
 },
 section ""relreadonly" . ufS4L_srtd" {
     ufS4L_srtd:
         const SfPCb_srt+320;
         const 37;
         const 68719476737;
 },
 sat_sfPaF_entry() //  [R1]
         { []
         }
     {offset
       cfS4B: // global
           _sfPaF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfS4C; else goto cfS4D;
       cfS4D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS4F; else goto cfS4E;
       cfS4F: // global
           HpAlloc = 24;
           goto cfS4C;
       cfS4C: // global
           R1 = _sfPaF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS4E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaF::P64;
           _sfPaD::P64 = P64[_sfPaF::P64 + 16];
           I64[Hp - 16] = sat_sfPaE_info;
           P64[Hp] = _sfPaD::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaF_info" {
     sat_sfPaF_info:
         const sat_sfPaF_entry;
         const 1;
         const 18446744069414584336;
         const ufS4L_srtd;
 },
 section ""relreadonly" . ufS4M_srtd" {
     ufS4M_srtd:
         const SfPCb_srt+320;
         const 40;
         const 618475290625;
 },
 Data.Semigroup.$fReadFirst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfS4G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS4K; else goto cfS4J;
       cfS4K: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS4J: // global
           I64[Hp - 16] = sat_sfPaF_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_$creadList_info" {
     Data.Semigroup.$fReadFirst_$creadList_info:
         const Data.Semigroup.$fReadFirst_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufS4M_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.554347294 UTC

[section ""data" . Data.Semigroup.$fReadFirst_closure" {
     Data.Semigroup.$fReadFirst_closure:
         const Data.Semigroup.$fReadFirst_info;
         const 0;
 },
 sat_sfPaK_entry() //  [R1]
         { []
         }
     {offset
       cfS5g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS5h; else goto cfS5i;
       cfS5h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS5i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaK_info" {
     sat_sfPaK_info:
         const sat_sfPaK_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+624;
 },
 sat_sfPaJ_entry() //  [R1]
         { []
         }
     {offset
       cfS5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS5o; else goto cfS5p;
       cfS5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaJ_info" {
     sat_sfPaJ_info:
         const sat_sfPaJ_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+608;
 },
 sat_sfPaI_entry() //  [R1]
         { []
         }
     {offset
       cfS5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS5v; else goto cfS5w;
       cfS5v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS5w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaI_info" {
     sat_sfPaI_info:
         const sat_sfPaI_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+632;
 },
 sat_sfPaH_entry() //  [R1]
         { []
         }
     {offset
       cfS5B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS5C; else goto cfS5D;
       cfS5C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS5D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadFirst_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaH_info" {
     sat_sfPaH_info:
         const sat_sfPaH_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+616;
 },
 Data.Semigroup.$fReadFirst_entry() //  [R2]
         { []
         }
     {offset
       cfS5F: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfS5J; else goto cfS5I;
       cfS5J: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS5I: // global
           I64[Hp - 128] = sat_sfPaK_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfPaJ_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPaI_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPaH_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadFirst_info" {
     Data.Semigroup.$fReadFirst_info:
         const Data.Semigroup.$fReadFirst_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfPCb_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.564818836 UTC

[section ""cstring" . Data.Semigroup.$fShowFirst2_bytes" {
     Data.Semigroup.$fShowFirst2_bytes:
         I8[] [70,105,114,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.566618367 UTC

[section ""cstring" . Data.Semigroup.$fShowFirst1_bytes" {
     Data.Semigroup.$fShowFirst1_bytes:
         I8[] [103,101,116,70,105,114,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.574491258 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec1_closure" {
     Data.Semigroup.$w$cshowsPrec1_closure:
         const Data.Semigroup.$w$cshowsPrec1_info;
 },
 f_sfPaO_entry() //  [R1]
         { []
         }
     {offset
       cfS6s: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfS6t; else goto cfS6u;
       cfS6t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS6u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfPaO_info" {
     f_sfPaO_info:
         const f_sfPaO_entry;
         const 2;
         const 18;
 },
 sat_sfPaR_entry() //  [R1]
         { []
         }
     {offset
       cfS6P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfS6Q; else goto cfS6R;
       cfS6Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS6R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaR_info" {
     sat_sfPaR_info:
         const sat_sfPaR_entry;
         const 1;
         const 16;
 },
 sat_sfPaS_entry() //  [R1]
         { []
         }
     {offset
       cfS6S: // global
           _sfPaS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS6T; else goto cfS6U;
       cfS6U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS6W; else goto cfS6V;
       cfS6W: // global
           HpAlloc = 24;
           goto cfS6T;
       cfS6T: // global
           R1 = _sfPaS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS6V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaS::P64;
           _sfPaO::P64 = P64[_sfPaS::P64 + 16];
           _sfPaQ::P64 = P64[_sfPaS::P64 + 24];
           I64[Hp - 16] = sat_sfPaR_info;
           P64[Hp] = _sfPaQ::P64;
           R2 = Hp - 16;
           R1 = _sfPaO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaS_info" {
     sat_sfPaS_info:
         const sat_sfPaS_entry;
         const 2;
         const 18;
 },
 sat_sfPaT_entry() //  [R1]
         { []
         }
     {offset
       cfS6X: // global
           _sfPaT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS6Y; else goto cfS6Z;
       cfS6Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS71; else goto cfS70;
       cfS71: // global
           HpAlloc = 32;
           goto cfS6Y;
       cfS6Y: // global
           R1 = _sfPaT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS70: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaT::P64;
           _sfPaO::P64 = P64[_sfPaT::P64 + 16];
           _sfPaQ::P64 = P64[_sfPaT::P64 + 24];
           I64[Hp - 24] = sat_sfPaS_info;
           P64[Hp - 8] = _sfPaO::P64;
           P64[Hp] = _sfPaQ::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaT_info" {
     sat_sfPaT_info:
         const sat_sfPaT_entry;
         const 2;
         const 18;
 },
 sat_sfPaU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS72: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS76; else goto cfS75;
       cfS76: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS75: // global
           _sfPaO::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPaT_info;
           P64[Hp - 8] = _sfPaO::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPaU_info" {
     sat_sfPaU_info:
         const sat_sfPaU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPaX_entry() //  [R1]
         { []
         }
     {offset
       cfS7u: // global
           _sfPaX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS7v; else goto cfS7w;
       cfS7w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS7y; else goto cfS7x;
       cfS7y: // global
           HpAlloc = 24;
           goto cfS7v;
       cfS7v: // global
           R1 = _sfPaX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS7x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaX::P64;
           _sfPaV::P64 = P64[_sfPaX::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfPaV::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaX_info" {
     sat_sfPaX_info:
         const sat_sfPaX_entry;
         const 1;
         const 16;
 },
 sat_sfPaY_entry() //  [R1]
         { []
         }
     {offset
       cfS7z: // global
           _sfPaY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS7A; else goto cfS7B;
       cfS7B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfS7D; else goto cfS7C;
       cfS7D: // global
           HpAlloc = 24;
           goto cfS7A;
       cfS7A: // global
           R1 = _sfPaY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaY::P64;
           _sfPaO::P64 = P64[_sfPaY::P64 + 16];
           _sfPaV::P64 = P64[_sfPaY::P64 + 24];
           I64[Hp - 16] = sat_sfPaX_info;
           P64[Hp] = _sfPaV::P64;
           R2 = Hp - 16;
           R1 = _sfPaO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaY_info" {
     sat_sfPaY_info:
         const sat_sfPaY_entry;
         const 2;
         const 18;
 },
 sat_sfPaZ_entry() //  [R1]
         { []
         }
     {offset
       cfS7E: // global
           _sfPaZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS7F; else goto cfS7G;
       cfS7G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS7I; else goto cfS7H;
       cfS7I: // global
           HpAlloc = 32;
           goto cfS7F;
       cfS7F: // global
           R1 = _sfPaZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS7H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPaZ::P64;
           _sfPaO::P64 = P64[_sfPaZ::P64 + 16];
           _sfPaV::P64 = P64[_sfPaZ::P64 + 24];
           I64[Hp - 24] = sat_sfPaY_info;
           P64[Hp - 8] = _sfPaO::P64;
           P64[Hp] = _sfPaV::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPaZ_info" {
     sat_sfPaZ_info:
         const sat_sfPaZ_entry;
         const 2;
         const 18;
 },
 sat_sfPb0_entry() //  [R1]
         { []
         }
     {offset
       cfS7J: // global
           _sfPb0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS7K; else goto cfS7L;
       cfS7L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS7N; else goto cfS7M;
       cfS7N: // global
           HpAlloc = 32;
           goto cfS7K;
       cfS7K: // global
           R1 = _sfPb0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS7M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPb0::P64;
           _sfPaO::P64 = P64[_sfPb0::P64 + 16];
           _sfPaV::P64 = P64[_sfPb0::P64 + 24];
           I64[Hp - 24] = sat_sfPaZ_info;
           P64[Hp - 8] = _sfPaO::P64;
           P64[Hp] = _sfPaV::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPb0_info" {
     sat_sfPb0_info:
         const sat_sfPb0_entry;
         const 2;
         const 18;
 },
 sat_sfPb1_entry() //  [R1, R2]
         { []
         }
     {offset
       cfS7P: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfS7T; else goto cfS7S;
       cfS7T: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfS7S: // global
           _sfPaO::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfPb0_info;
           P64[Hp - 32] = _sfPaO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPb1_info" {
     sat_sfPb1_info:
         const sat_sfPb1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfS7X: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfS81; else goto cfS80;
       cfS81: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfS80: // global
           I64[Hp - 40] = f_sfPaO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfS6o::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfS7V; else goto cfS7W;
       cfS7V: // global
           I64[Hp - 8] = sat_sfPaU_info;
           P64[Hp] = _cfS6o::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfS7W: // global
           I64[Hp - 8] = sat_sfPb1_info;
           P64[Hp] = _cfS6o::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec1_info" {
     Data.Semigroup.$w$cshowsPrec1_info:
         const Data.Semigroup.$w$cshowsPrec1_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.597018606 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshowsPrec_closure" {
     Data.Semigroup.$fShowFirst_$cshowsPrec_closure:
         const Data.Semigroup.$fShowFirst_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowFirst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfS9i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfS9j; else goto cfS9k;
       cfS9j: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfS9k: // global
           I64[Sp - 24] = block_cfS9f_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufS9o; else goto cfS9g;
       ufS9o: // global
           call _cfS9f(R1) args: 0, res: 0, upd: 0;
       cfS9g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshowsPrec_info" {
     Data.Semigroup.$fShowFirst_$cshowsPrec_info:
         const Data.Semigroup.$fShowFirst_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfS9f() //  [R1]
         { []
         }
     {offset
       cfS9f: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfS9f_info" {
     block_cfS9f_info:
         const _cfS9f;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.604556312 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshow_closure" {
     Data.Semigroup.$fShowFirst_$cshow_closure:
         const Data.Semigroup.$fShowFirst_$cshow_info;
         const 0;
 },
 sat_sfPb9_entry() //  [R1]
         { []
         }
     {offset
       cfS9L: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfS9M; else goto cfS9N;
       cfS9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPb9_info" {
     sat_sfPb9_info:
         const sat_sfPb9_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 sat_sfPba_entry() //  [R1]
         { []
         }
     {offset
       cfS9O: // global
           _sfPba::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfS9P; else goto cfS9Q;
       cfS9Q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS9S; else goto cfS9R;
       cfS9S: // global
           HpAlloc = 32;
           goto cfS9P;
       cfS9P: // global
           R1 = _sfPba::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfS9R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPba::P64;
           _sfPb7::P64 = P64[_sfPba::P64 + 16];
           _sfPb8::P64 = P64[_sfPba::P64 + 24];
           I64[Hp - 24] = sat_sfPb9_info;
           P64[Hp - 8] = _sfPb7::P64;
           P64[Hp] = _sfPb8::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPba_info" {
     sat_sfPba_info:
         const sat_sfPba_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 Data.Semigroup.$fShowFirst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfS9T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfS9X; else goto cfS9W;
       cfS9X: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfS9W: // global
           I64[Hp - 24] = sat_sfPba_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowFirst2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshow_info" {
     Data.Semigroup.$fShowFirst_$cshow_info:
         const Data.Semigroup.$fShowFirst_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.612481019 UTC

[section ""data" . Data.Semigroup.$fShowFirst_$cshowList_closure" {
     Data.Semigroup.$fShowFirst_$cshowList_closure:
         const Data.Semigroup.$fShowFirst_$cshowList_info;
 },
 sat_sfPbf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSar: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPbf_info" {
     sat_sfPbf_info:
         const sat_sfPbf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowFirst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSau: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSay; else goto cfSax;
       cfSay: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSax: // global
           I64[Hp - 8] = sat_sfPbf_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_$cshowList_info" {
     Data.Semigroup.$fShowFirst_$cshowList_info:
         const Data.Semigroup.$fShowFirst_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.618696317 UTC

[section ""data" . Data.Semigroup.$fShowFirst_closure" {
     Data.Semigroup.$fShowFirst_closure:
         const Data.Semigroup.$fShowFirst_info;
         const 0;
 },
 sat_sfPbj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSaQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowFirst_$cshowList_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPbj_info" {
     sat_sfPbj_info:
         const sat_sfPbj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPbi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSaY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowFirst_$cshow_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPbi_info" {
     sat_sfPbi_info:
         const sat_sfPbi_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+656;
 },
 sat_sfPbh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSb6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowFirst_$cshowsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPbh_info" {
     sat_sfPbh_info:
         const sat_sfPbh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowFirst_entry() //  [R2]
         { []
         }
     {offset
       cfSba: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfSbe; else goto cfSbd;
       cfSbe: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSbd: // global
           I64[Hp - 72] = sat_sfPbj_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPbi_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPbh_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowFirst_info" {
     Data.Semigroup.$fShowFirst_info:
         const Data.Semigroup.$fShowFirst_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.628081205 UTC

[section ""data" . Data.Semigroup.$fEqFirst_closure" {
     Data.Semigroup.$fEqFirst_closure:
         const Data.Semigroup.$fEqFirst_info;
 },
 sat_sfPbm_entry() //  [R1]
         { []
         }
     {offset
       cfSbI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSbJ; else goto cfSbK;
       cfSbJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbm_info" {
     sat_sfPbm_info:
         const sat_sfPbm_entry;
         const 1;
         const 16;
 },
 sat_sfPbl_entry() //  [R1]
         { []
         }
     {offset
       cfSbP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSbQ; else goto cfSbR;
       cfSbQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbl_info" {
     sat_sfPbl_info:
         const sat_sfPbl_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqFirst_entry() //  [R2]
         { []
         }
     {offset
       cfSbT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfSbX; else goto cfSbW;
       cfSbX: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSbW: // global
           I64[Hp - 64] = sat_sfPbm_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPbl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqFirst_info" {
     Data.Semigroup.$fEqFirst_info:
         const Data.Semigroup.$fEqFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.639624367 UTC

[section ""data" . Data.Semigroup.$fOrdFirst_$cp1Ord_closure" {
     Data.Semigroup.$fOrdFirst_$cp1Ord_closure:
         const Data.Semigroup.$fOrdFirst_$cp1Ord_info;
 },
 sat_sfPbo_entry() //  [R1]
         { []
         }
     {offset
       cfScq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfScr; else goto cfScs;
       cfScr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfScs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbo_info" {
     sat_sfPbo_info:
         const sat_sfPbo_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdFirst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfSct: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfScx; else goto cfScw;
       cfScx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdFirst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfScw: // global
           I64[Hp - 16] = sat_sfPbo_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqFirst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdFirst_$cp1Ord_info" {
     Data.Semigroup.$fOrdFirst_$cp1Ord_info:
         const Data.Semigroup.$fOrdFirst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.64875806 UTC

[section ""data" . Data.Semigroup.$fOrdFirst_closure" {
     Data.Semigroup.$fOrdFirst_closure:
         const Data.Semigroup.$fOrdFirst_info;
 },
 sat_sfPbx_entry() //  [R1]
         { []
         }
     {offset
       cfScQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfScR; else goto cfScS;
       cfScR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfScS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbx_info" {
     sat_sfPbx_info:
         const sat_sfPbx_entry;
         const 1;
         const 16;
 },
 sat_sfPbw_entry() //  [R1]
         { []
         }
     {offset
       cfScX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfScY; else goto cfScZ;
       cfScY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfScZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbw_info" {
     sat_sfPbw_info:
         const sat_sfPbw_entry;
         const 1;
         const 16;
 },
 sat_sfPbv_entry() //  [R1]
         { []
         }
     {offset
       cfSd4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSd5; else goto cfSd6;
       cfSd5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSd6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbv_info" {
     sat_sfPbv_info:
         const sat_sfPbv_entry;
         const 1;
         const 16;
 },
 sat_sfPbu_entry() //  [R1]
         { []
         }
     {offset
       cfSdb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSdc; else goto cfSdd;
       cfSdc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSdd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbu_info" {
     sat_sfPbu_info:
         const sat_sfPbu_entry;
         const 1;
         const 16;
 },
 sat_sfPbt_entry() //  [R1]
         { []
         }
     {offset
       cfSdi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSdj; else goto cfSdk;
       cfSdj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSdk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbt_info" {
     sat_sfPbt_info:
         const sat_sfPbt_entry;
         const 1;
         const 16;
 },
 sat_sfPbs_entry() //  [R1]
         { []
         }
     {offset
       cfSdp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSdq; else goto cfSdr;
       cfSdq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSdr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbs_info" {
     sat_sfPbs_info:
         const sat_sfPbs_entry;
         const 1;
         const 16;
 },
 sat_sfPbr_entry() //  [R1]
         { []
         }
     {offset
       cfSdw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSdx; else goto cfSdy;
       cfSdx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbr_info" {
     sat_sfPbr_info:
         const sat_sfPbr_entry;
         const 1;
         const 16;
 },
 sat_sfPbq_entry() //  [R1]
         { []
         }
     {offset
       cfSdD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSdE; else goto cfSdF;
       cfSdE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSdF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdFirst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbq_info" {
     sat_sfPbq_info:
         const sat_sfPbq_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdFirst_entry() //  [R2]
         { []
         }
     {offset
       cfSdH: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfSdL; else goto cfSdK;
       cfSdL: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSdK: // global
           I64[Hp - 256] = sat_sfPbx_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfPbw_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPbv_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfPbu_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPbt_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfPbs_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPbr_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfPbq_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdFirst_info" {
     Data.Semigroup.$fOrdFirst_info:
         const Data.Semigroup.$fOrdFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.666635375 UTC

[section ""data" . Data.Semigroup.$fBoundedFirst_closure" {
     Data.Semigroup.$fBoundedFirst_closure:
         const Data.Semigroup.$fBoundedFirst_info;
 },
 sat_sfPbA_entry() //  [R1]
         { []
         }
     {offset
       cfSeU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSeV; else goto cfSeW;
       cfSeV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSeW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbA_info" {
     sat_sfPbA_info:
         const sat_sfPbA_entry;
         const 1;
         const 16;
 },
 sat_sfPbz_entry() //  [R1]
         { []
         }
     {offset
       cfSf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSf2; else goto cfSf3;
       cfSf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSf3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbz_info" {
     sat_sfPbz_info:
         const sat_sfPbz_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedFirst_entry() //  [R2]
         { []
         }
     {offset
       cfSf5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfSf9; else goto cfSf8;
       cfSf9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSf8: // global
           I64[Hp - 64] = sat_sfPbA_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPbz_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedFirst_info" {
     Data.Semigroup.$fBoundedFirst_info:
         const Data.Semigroup.$fBoundedFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.6743602 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg_$cto1_closure" {
     Data.Semigroup.$fGeneric1Arg_$cto1_closure:
         const Data.Semigroup.$fGeneric1Arg_$cto1_info;
 },
 Data.Semigroup.$fGeneric1Arg_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cfSfA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfSfE; else goto cfSfF;
       cfSfE: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGeneric1Arg_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSfF: // global
           I64[Sp - 8] = block_cfSfy_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Arg_$cto1_info" {
     Data.Semigroup.$fGeneric1Arg_$cto1_info:
         const Data.Semigroup.$fGeneric1Arg_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfSfy() //  [R1]
         { []
         }
     {offset
       cfSfy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSfI; else goto cfSfH;
       cfSfI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSfH: // global
           _sfPbD::P64 = P64[R1 + 7];
           _sfPbE::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfPbD::P64;
           P64[Hp] = _sfPbE::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSfy_info" {
     block_cfSfy_info:
         const _cfSfy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.680572603 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg1_closure" {
     Data.Semigroup.$fGeneric1Arg1_closure:
         const Data.Semigroup.$fGeneric1Arg1_info;
 },
 Data.Semigroup.$fGeneric1Arg1_entry() //  [R2]
         { []
         }
     {offset
       cfSg1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfSg5; else goto cfSg6;
       cfSg5: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGeneric1Arg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSg6: // global
           I64[Sp - 8] = block_cfSfY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufSga; else goto cfSfZ;
       ufSga: // global
           call _cfSfY(R1) args: 0, res: 0, upd: 0;
       cfSfZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Arg1_info" {
     Data.Semigroup.$fGeneric1Arg1_info:
         const Data.Semigroup.$fGeneric1Arg1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfSfY() //  [R1]
         { []
         }
     {offset
       cfSfY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSg9; else goto cfSg8;
       cfSg9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSg8: // global
           _sfPbH::P64 = P64[R1 + 7];
           _sfPbI::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sfPbH::P64;
           P64[Hp] = _sfPbI::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSfY_info" {
     block_cfSfY_info:
         const _cfSfY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.68586657 UTC

[section ""data" . Data.Semigroup.$fGeneric1Arg_closure" {
     Data.Semigroup.$fGeneric1Arg_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Arg1_closure+1;
         const Data.Semigroup.$fGeneric1Arg_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.688403153 UTC

[section ""data" . Data.Semigroup.$fGenericArg_$cto_closure" {
     Data.Semigroup.$fGenericArg_$cto_closure:
         const Data.Semigroup.$fGenericArg_$cto_info;
 },
 Data.Semigroup.$fGenericArg_$cto_entry() //  [R2]
         { []
         }
     {offset
       cfSgu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfSgy; else goto cfSgz;
       cfSgy: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGenericArg_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSgz: // global
           I64[Sp - 8] = block_cfSgs_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericArg_$cto_info" {
     Data.Semigroup.$fGenericArg_$cto_info:
         const Data.Semigroup.$fGenericArg_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfSgs() //  [R1]
         { []
         }
     {offset
       cfSgs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSgC; else goto cfSgB;
       cfSgC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSgB: // global
           _sfPbL::P64 = P64[R1 + 7];
           _sfPbM::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfPbL::P64;
           P64[Hp] = _sfPbM::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSgs_info" {
     block_cfSgs_info:
         const _cfSgs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.694226267 UTC

[section ""data" . Data.Semigroup.$fGenericArg1_closure" {
     Data.Semigroup.$fGenericArg1_closure:
         const Data.Semigroup.$fGenericArg1_info;
 },
 Data.Semigroup.$fGenericArg1_entry() //  [R2]
         { []
         }
     {offset
       cfSgV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfSgZ; else goto cfSh0;
       cfSgZ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fGenericArg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSh0: // global
           I64[Sp - 8] = block_cfSgS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufSh4; else goto cfSgT;
       ufSh4: // global
           call _cfSgS(R1) args: 0, res: 0, upd: 0;
       cfSgT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericArg1_info" {
     Data.Semigroup.$fGenericArg1_info:
         const Data.Semigroup.$fGenericArg1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfSgS() //  [R1]
         { []
         }
     {offset
       cfSgS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSh3; else goto cfSh2;
       cfSh3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSh2: // global
           _sfPbP::P64 = P64[R1 + 7];
           _sfPbQ::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sfPbP::P64;
           P64[Hp] = _sfPbQ::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSgS_info" {
     block_cfSgS_info:
         const _cfSgS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.699689481 UTC

[section ""data" . Data.Semigroup.$fGenericArg_closure" {
     Data.Semigroup.$fGenericArg_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericArg1_closure+1;
         const Data.Semigroup.$fGenericArg_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.702938253 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgunfold_closure" {
     Data.Semigroup.$fDataArg_$cgunfold_closure:
         const Data.Semigroup.$fDataArg_$cgunfold_info;
 },
 sat_sfPbW_entry() //  [R1]
         { []
         }
     {offset
       cfShu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfShv; else goto cfShw;
       cfShv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfShw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.Arg_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbW_info" {
     sat_sfPbW_info:
         const sat_sfPbW_entry;
         const 1;
         const 16;
 },
 sat_sfPbX_entry() //  [R1]
         { []
         }
     {offset
       cfShx: // global
           _sfPbX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfShy; else goto cfShz;
       cfShz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfShB; else goto cfShA;
       cfShB: // global
           HpAlloc = 24;
           goto cfShy;
       cfShy: // global
           R1 = _sfPbX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfShA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPbX::P64;
           _sfPbR::P64 = P64[_sfPbX::P64 + 16];
           _sfPbT::P64 = P64[_sfPbX::P64 + 24];
           _sfPbU::P64 = P64[_sfPbX::P64 + 32];
           I64[Hp - 16] = sat_sfPbW_info;
           P64[Hp] = _sfPbU::P64;
           R3 = Hp - 16;
           R2 = _sfPbR::P64;
           R1 = _sfPbT::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPbX_info" {
     sat_sfPbX_info:
         const sat_sfPbX_entry;
         const 3;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgunfold_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfShC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfShG; else goto cfShF;
       cfShG: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgunfold_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfShF: // global
           I64[Hp - 32] = sat_sfPbX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sfPbS::P64 = R3;
           R3 = Hp - 32;
           R2 = _sfPbS::P64;
           R1 = R4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgunfold_info" {
     Data.Semigroup.$fDataArg_$cgunfold_info:
         const Data.Semigroup.$fDataArg_$cgunfold_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.712489017 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgfoldl_closure" {
     Data.Semigroup.$fDataArg_$cgfoldl_closure:
         const Data.Semigroup.$fDataArg_$cgfoldl_info;
 },
 sat_sfPc6_entry() //  [R1]
         { []
         }
     {offset
       cfSie: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSif; else goto cfSig;
       cfSif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.Arg_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPc6_info" {
     sat_sfPc6_info:
         const sat_sfPc6_entry;
         const 1;
         const 16;
 },
 sat_sfPc7_entry() //  [R1]
         { []
         }
     {offset
       cfSih: // global
           _sfPc7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSii; else goto cfSij;
       cfSij: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSil; else goto cfSik;
       cfSil: // global
           HpAlloc = 24;
           goto cfSii;
       cfSii: // global
           R1 = _sfPc7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPc7::P64;
           _sfPbY::P64 = P64[_sfPc7::P64 + 16];
           _sfPc0::P64 = P64[_sfPc7::P64 + 24];
           _sfPc1::P64 = P64[_sfPc7::P64 + 32];
           _sfPc4::P64 = P64[_sfPc7::P64 + 40];
           I64[Hp - 16] = sat_sfPc6_info;
           P64[Hp] = _sfPc1::P64;
           R4 = _sfPc4::P64;
           R3 = Hp - 16;
           R2 = _sfPbY::P64;
           R1 = _sfPc0::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPc7_info" {
     sat_sfPc7_info:
         const sat_sfPc7_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfSim: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfSin; else goto cfSio;
       cfSin: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSio: // global
           I64[Sp - 40] = block_cfSi1_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufSis; else goto cfSi2;
       ufSis: // global
           call _cfSi1(R1) args: 0, res: 0, upd: 0;
       cfSi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgfoldl_info" {
     Data.Semigroup.$fDataArg_$cgfoldl_info:
         const Data.Semigroup.$fDataArg_$cgfoldl_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfSi1() //  [R1]
         { []
         }
     {offset
       cfSi1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfSir; else goto cfSiq;
       cfSir: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSiq: // global
           _sfPc4::P64 = P64[R1 + 7];
           _sfPc5::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sfPc7_info;
           P64[Hp - 24] = P64[Sp + 8];
           _sfPc0::P64 = P64[Sp + 24];
           P64[Hp - 16] = _sfPc0::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPc4::P64;
           R4 = _sfPc5::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _sfPc0::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSi1_info" {
     block_cfSi1_info:
         const _cfSi1;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.722015766 UTC

[section ""cstring" . Data.Semigroup.$fDataArg6_bytes" {
     Data.Semigroup.$fDataArg6_bytes:
         I8[] [65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.724400509 UTC

[section ""data" . Data.Semigroup.$fDataArg9_closure" {
     Data.Semigroup.$fDataArg9_closure:
         const Data.Semigroup.$fDataArg9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataArg9_entry() //  [R1]
         { []
         }
     {offset
       cfSiY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSiZ; else goto cfSj0;
       cfSiZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSj0: // global
           (_cfSiV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfSiV::I64 == 0) goto cfSiX; else goto cfSiW;
       cfSiX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfSiW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfSiV::I64;
           R2 = Data.Semigroup.$fDataArg6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg9_info" {
     Data.Semigroup.$fDataArg9_info:
         const Data.Semigroup.$fDataArg9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.727995258 UTC

[section ""data" . Data.Semigroup.$fReadArg_lexeme_closure" {
     Data.Semigroup.$fReadArg_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataArg9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.733469815 UTC

[section ""data" . Data.Semigroup.$fReadArg1_closure" {
     Data.Semigroup.$fReadArg1_closure:
         const Data.Semigroup.$fReadArg1_info;
         const 0;
 },
 sat_sfPcl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSjI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSjM; else goto cfSjL;
       cfSjM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSjL: // global
           _sfPcd::P64 = P64[R1 + 7];
           _sfPci::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = _sfPci::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sfPcd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcl_info" {
     sat_sfPcl_info:
         const sat_sfPcl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPcm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSjN: // global
           _sfPci::P64 = R2;
           _sfPcm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfSjO; else goto cfSjP;
       cfSjP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSjR; else goto cfSjQ;
       cfSjR: // global
           HpAlloc = 24;
           goto cfSjO;
       cfSjO: // global
           R2 = _sfPci::P64;
           R1 = _sfPcm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSjQ: // global
           _sfPc9::P64 = P64[_sfPcm::P64 + 7];
           _sfPcd::P64 = P64[_sfPcm::P64 + 15];
           I64[Hp - 16] = sat_sfPcl_info;
           P64[Hp - 8] = _sfPcd::P64;
           P64[Hp] = _sfPci::P64;
           R2 = _sfPc9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcm_info" {
     sat_sfPcm_info:
         const sat_sfPcm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPcn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSjS: // global
           _sfPch::P64 = R2;
           _sfPcn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfSjT; else goto cfSjU;
       cfSjU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSjW; else goto cfSjV;
       cfSjW: // global
           HpAlloc = 24;
           goto cfSjT;
       cfSjT: // global
           R2 = _sfPch::P64;
           R1 = _sfPcn::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSjV: // global
           _sfPc8::P64 = P64[_sfPcn::P64 + 7];
           _sfPc9::P64 = P64[_sfPcn::P64 + 15];
           _sfPcd::P64 = P64[_sfPcn::P64 + 23];
           I64[Hp - 16] = sat_sfPcm_info;
           P64[Hp - 8] = _sfPc9::P64;
           P64[Hp] = _sfPcd::P64;
           R2 = _sfPc8::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcn_info" {
     sat_sfPcn_info:
         const sat_sfPcn_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sfPcq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSjX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfSjY; else goto cfSjZ;
       cfSjY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSjZ: // global
           I64[Sp - 32] = block_cfSjj_info;
           _sfPc8::P64 = P64[R1 + 6];
           _sfPc9::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sfPc8::P64;
           P64[Sp - 16] = _sfPc9::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufSkc; else goto cfSjk;
       ufSkc: // global
           call _cfSjj(R1) args: 0, res: 0, upd: 0;
       cfSjk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcq_info" {
     sat_sfPcq_info:
         const sat_sfPcq_entry;
         const 2;
         const 8800387989515;
         const 8589934607;
         const SfPCb_srt+584;
 },
 _cfSjj() //  [R1]
         { []
         }
     {offset
       cfSjj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSk2; else goto cfSk1;
       cfSk2: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSk1: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cfSk4; else goto cfSk8;
       cfSk4: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSk8: // global
           I64[Hp - 24] = sat_sfPcn_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cfSk5_info;
           R3 = Hp - 23;
           R2 = Data.Semigroup.$fReadArg_lexeme_closure+4;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSjj_info" {
     block_cfSjj_info:
         const _cfSjj;
         const 3;
         const 8800387989534;
         const SfPCb_srt+584;
 },
 _cfSk5() //  [R1]
         { []
         }
     {offset
       cfSk5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSkb; else goto cfSka;
       cfSkb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSka: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSk5_info" {
     block_cfSk5_info:
         const _cfSk5;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSki_srtd" {
     ufSki_srtd:
         const SfPCb_srt+296;
         const 49;
         const 422281184542721;
 },
 Data.Semigroup.$fReadArg1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfSkd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSkh; else goto cfSkg;
       cfSkh: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSkg: // global
           I64[Hp - 16] = sat_sfPcq_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sfPca::P64 = R4;
           R4 = R5;
           R3 = _sfPca::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg1_info" {
     Data.Semigroup.$fReadArg1_info:
         const Data.Semigroup.$fReadArg1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ufSki_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.749368634 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadsPrec_closure" {
     Data.Semigroup.$fReadArg_$creadsPrec_closure:
         const Data.Semigroup.$fReadArg_$creadsPrec_info;
         const 0;
 },
 sat_sfPcu_entry() //  [R1]
         { []
         }
     {offset
       cfSlc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSld; else goto cfSle;
       cfSld: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSle: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcu_info" {
     sat_sfPcu_info:
         const sat_sfPcu_entry;
         const 3;
         const 4294967311;
         const SfPCb_srt+680;
 },
 Data.Semigroup.$fReadArg_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSlf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfSlj; else goto cfSli;
       cfSlj: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSli: // global
           I64[Hp - 32] = sat_sfPcu_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadsPrec_info" {
     Data.Semigroup.$fReadArg_$creadsPrec_info:
         const Data.Semigroup.$fReadArg_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfPCb_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.756027266 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadListPrec_closure" {
     Data.Semigroup.$fReadArg_$creadListPrec_closure:
         const Data.Semigroup.$fReadArg_$creadListPrec_info;
         const 0;
 },
 sat_sfPcx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSlF: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcx_info" {
     sat_sfPcx_info:
         const sat_sfPcx_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfPCb_srt+680;
 },
 section ""relreadonly" . ufSlN_srtd" {
     ufSlN_srtd:
         const SfPCb_srt+320;
         const 48;
         const 175921860444161;
 },
 Data.Semigroup.$fReadArg_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSlI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSlM; else goto cfSlL;
       cfSlM: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSlL: // global
           I64[Hp - 16] = sat_sfPcx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadListPrec_info" {
     Data.Semigroup.$fReadArg_$creadListPrec_info:
         const Data.Semigroup.$fReadArg_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufSlN_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.76382897 UTC

[section ""data" . Data.Semigroup.$fReadArg_$creadList_closure" {
     Data.Semigroup.$fReadArg_$creadList_closure:
         const Data.Semigroup.$fReadArg_$creadList_info;
         const 0;
 },
 sat_sfPcA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSma: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcA_info" {
     sat_sfPcA_info:
         const sat_sfPcA_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfPCb_srt+680;
 },
 section ""relreadonly" . ufSmn_srtd" {
     ufSmn_srtd:
         const SfPCb_srt+320;
         const 46;
         const 35184372088833;
 },
 sat_sfPcB_entry() //  [R1]
         { []
         }
     {offset
       cfSmd: // global
           _sfPcB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfSme; else goto cfSmf;
       cfSmf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSmh; else goto cfSmg;
       cfSmh: // global
           HpAlloc = 24;
           goto cfSme;
       cfSme: // global
           R1 = _sfPcB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSmg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPcB::P64;
           _sfPcy::P64 = P64[_sfPcB::P64 + 16];
           _sfPcz::P64 = P64[_sfPcB::P64 + 24];
           I64[Hp - 16] = sat_sfPcA_info;
           P64[Hp - 8] = _sfPcy::P64;
           P64[Hp] = _sfPcz::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcB_info" {
     sat_sfPcB_info:
         const sat_sfPcB_entry;
         const 2;
         const 18446744069414584338;
         const ufSmn_srtd;
 },
 section ""relreadonly" . ufSmo_srtd" {
     ufSmo_srtd:
         const SfPCb_srt+320;
         const 49;
         const 316659348799489;
 },
 Data.Semigroup.$fReadArg_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSmi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSmm; else goto cfSml;
       cfSmm: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSml: // global
           I64[Hp - 24] = sat_sfPcB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_$creadList_info" {
     Data.Semigroup.$fReadArg_$creadList_info:
         const Data.Semigroup.$fReadArg_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufSmo_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.774112899 UTC

[section ""data" . Data.Semigroup.$fReadArg_closure" {
     Data.Semigroup.$fReadArg_closure:
         const Data.Semigroup.$fReadArg_info;
         const 0;
 },
 sat_sfPcH_entry() //  [R1]
         { []
         }
     {offset
       cfSmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSmT; else goto cfSmU;
       cfSmT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSmU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg_$creadListPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcH_info" {
     sat_sfPcH_info:
         const sat_sfPcH_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+696;
 },
 sat_sfPcG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSn0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fReadArg1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcG_info" {
     sat_sfPcG_info:
         const sat_sfPcG_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SfPCb_srt+680;
 },
 sat_sfPcF_entry() //  [R1]
         { []
         }
     {offset
       cfSn7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSn8; else goto cfSn9;
       cfSn8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSn9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadArg_$creadList_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcF_info" {
     sat_sfPcF_info:
         const sat_sfPcF_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+704;
 },
 sat_sfPcE_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSnf: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fReadArg_$creadsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcE_info" {
     sat_sfPcE_info:
         const sat_sfPcE_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfPCb_srt+688;
 },
 Data.Semigroup.$fReadArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSnj: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfSnn; else goto cfSnm;
       cfSnn: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fReadArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSnm: // global
           I64[Hp - 144] = sat_sfPcH_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sfPcG_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sfPcF_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfPcE_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadArg_info" {
     Data.Semigroup.$fReadArg_info:
         const Data.Semigroup.$fReadArg_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const SfPCb_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.784273726 UTC

[section ""cstring" . Data.Semigroup.$fShowArg1_bytes" {
     Data.Semigroup.$fShowArg1_bytes:
         I8[] [65,114,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.791692853 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec_closure" {
     Data.Semigroup.$w$cshowsPrec_closure:
         const Data.Semigroup.$w$cshowsPrec_info;
 },
 Data.Semigroup.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cfSnU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sfPcN_entry() //  [R1]
         { []
         }
     {offset
       cfSo2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfSo3; else goto cfSo4;
       cfSo3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSo4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfPcN_info" {
     f_sfPcN_info:
         const f_sfPcN_entry;
         const 2;
         const 18;
 },
 g_sfPcO_entry() //  [R1]
         { []
         }
     {offset
       cfSo9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfSoa; else goto cfSob;
       cfSoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSob: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fReadArg2_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sfPcO_info" {
     g_sfPcO_info:
         const g_sfPcO_entry;
         const 2;
         const 18;
 },
 sat_sfPcT_entry() //  [R1]
         { []
         }
     {offset
       cfSoq: // global
           _sfPcT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSor; else goto cfSos;
       cfSos: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSou; else goto cfSot;
       cfSou: // global
           HpAlloc = 56;
           goto cfSor;
       cfSor: // global
           R1 = _sfPcT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPcT::P64;
           _sfPcN::P64 = P64[_sfPcT::P64 + 16];
           _sfPcO::P64 = P64[_sfPcT::P64 + 24];
           _sfPcQ::P64 = P64[_sfPcT::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPcO::P64;
           P64[Hp - 24] = _sfPcQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sfPcN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcT_info" {
     sat_sfPcT_info:
         const sat_sfPcT_entry;
         const 3;
         const 15;
 },
 sat_sfPcU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSov: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfSoz; else goto cfSoy;
       cfSoz: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSoy: // global
           _sfPcN::P64 = P64[R1 + 7];
           _sfPcO::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sfPcT_info;
           P64[Hp - 16] = _sfPcN::P64;
           P64[Hp - 8] = _sfPcO::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = Data.Semigroup.$fShowArg1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPcU_info" {
     sat_sfPcU_info:
         const sat_sfPcU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPcX_entry() //  [R1]
         { []
         }
     {offset
       cfSoT: // global
           _sfPcX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSoU; else goto cfSoV;
       cfSoV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSoX; else goto cfSoW;
       cfSoX: // global
           HpAlloc = 24;
           goto cfSoU;
       cfSoU: // global
           R1 = _sfPcX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSoW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPcX::P64;
           _sfPcO::P64 = P64[_sfPcX::P64 + 16];
           _sfPcV::P64 = P64[_sfPcX::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfPcV::P64;
           R2 = Hp - 14;
           R1 = _sfPcO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcX_info" {
     sat_sfPcX_info:
         const sat_sfPcX_entry;
         const 2;
         const 18;
 },
 sat_sfPcZ_entry() //  [R1]
         { []
         }
     {offset
       cfSoZ: // global
           _sfPcZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSp0; else goto cfSp1;
       cfSp1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSp3; else goto cfSp2;
       cfSp3: // global
           HpAlloc = 56;
           goto cfSp0;
       cfSp0: // global
           R1 = _sfPcZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSp2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPcZ::P64;
           _sfPcN::P64 = P64[_sfPcZ::P64 + 16];
           _sfPcO::P64 = P64[_sfPcZ::P64 + 24];
           _sfPcV::P64 = P64[_sfPcZ::P64 + 32];
           I64[Hp - 48] = sat_sfPcX_info;
           P64[Hp - 32] = _sfPcO::P64;
           P64[Hp - 24] = _sfPcV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sfPcN::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPcZ_info" {
     sat_sfPcZ_info:
         const sat_sfPcZ_entry;
         const 3;
         const 15;
 },
 sat_sfPd0_entry() //  [R1]
         { []
         }
     {offset
       cfSp4: // global
           _sfPd0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSp5; else goto cfSp6;
       cfSp6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfSp8; else goto cfSp7;
       cfSp8: // global
           HpAlloc = 40;
           goto cfSp5;
       cfSp5: // global
           R1 = _sfPd0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSp7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPd0::P64;
           _sfPcN::P64 = P64[_sfPd0::P64 + 16];
           _sfPcO::P64 = P64[_sfPd0::P64 + 24];
           _sfPcV::P64 = P64[_sfPd0::P64 + 32];
           I64[Hp - 32] = sat_sfPcZ_info;
           P64[Hp - 16] = _sfPcN::P64;
           P64[Hp - 8] = _sfPcO::P64;
           P64[Hp] = _sfPcV::P64;
           R3 = Hp - 32;
           R2 = Data.Semigroup.$fShowArg1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPd0_info" {
     sat_sfPd0_info:
         const sat_sfPd0_entry;
         const 3;
         const 15;
 },
 sat_sfPd1_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSpa: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfSpe; else goto cfSpd;
       cfSpe: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSpd: // global
           _sfPcN::P64 = P64[R1 + 7];
           _sfPcO::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sfPd0_info;
           P64[Hp - 40] = _sfPcN::P64;
           P64[Hp - 32] = _sfPcO::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPd1_info" {
     sat_sfPd1_info:
         const sat_sfPd1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfSpi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfSpm; else goto cfSpl;
       cfSpm: // global
           HpAlloc = 88;
           R1 = Data.Semigroup.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cfSpl: // global
           I64[Hp - 80] = f_sfPcN_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = g_sfPcO_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cfSnY::P64 = Hp - 80;
           _cfSo5::P64 = Hp - 48;
           if (%MO_S_Lt_W64(R4, 11)) goto cfSpg; else goto cfSph;
       cfSpg: // global
           I64[Hp - 16] = sat_sfPcU_info;
           P64[Hp - 8] = _cfSnY::P64;
           P64[Hp] = _cfSo5::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSph: // global
           I64[Hp - 16] = sat_sfPd1_info;
           P64[Hp - 8] = _cfSnY::P64;
           P64[Hp] = _cfSo5::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec_info" {
     Data.Semigroup.$w$cshowsPrec_info:
         const Data.Semigroup.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 261;
         const Data.Semigroup.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.813417073 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshowsPrec_closure" {
     Data.Semigroup.$fShowArg_$cshowsPrec_closure:
         const Data.Semigroup.$fShowArg_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowArg_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfSqD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfSqH; else goto cfSqI;
       cfSqH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSqI: // global
           I64[Sp - 32] = block_cfSqA_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufSqQ; else goto cfSqB;
       ufSqQ: // global
           call _cfSqA(R1) args: 0, res: 0, upd: 0;
       cfSqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshowsPrec_info" {
     Data.Semigroup.$fShowArg_$cshowsPrec_info:
         const Data.Semigroup.$fShowArg_$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfSqA() //  [R1]
         { []
         }
     {offset
       cfSqA: // global
           I64[Sp] = block_cfSqG_info;
           _sfPd7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sfPd7::I64;
           if (R1 & 7 != 0) goto ufSqP; else goto cfSqK;
       ufSqP: // global
           call _cfSqG(R1) args: 0, res: 0, upd: 0;
       cfSqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSqA_info" {
     block_cfSqA_info:
         const _cfSqA;
         const 3;
         const 30;
 },
 _cfSqG() //  [R1]
         { []
         }
     {offset
       cfSqG: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSqG_info" {
     block_cfSqG_info:
         const _cfSqG;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.82103507 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshow_closure" {
     Data.Semigroup.$fShowArg_$cshow_closure:
         const Data.Semigroup.$fShowArg_$cshow_info;
 },
 Data.Semigroup.$fShowArg_$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSrd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSre; else goto cfSrf;
       cfSre: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSrf: // global
           I64[Sp - 24] = block_cfSra_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSrj; else goto cfSrb;
       ufSrj: // global
           call _cfSra(R1) args: 0, res: 0, upd: 0;
       cfSrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshow_info" {
     Data.Semigroup.$fShowArg_$cshow_info:
         const Data.Semigroup.$fShowArg_$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfSra() //  [R1]
         { []
         }
     {offset
       cfSra: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSra_info" {
     block_cfSra_info:
         const _cfSra;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.827610388 UTC

[section ""data" . Data.Semigroup.$fShowArg_$cshowList_closure" {
     Data.Semigroup.$fShowArg_$cshowList_closure:
         const Data.Semigroup.$fShowArg_$cshowList_info;
 },
 sat_sfPdp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSrJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSrK; else goto cfSrL;
       cfSrK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSrL: // global
           I64[Sp - 24] = block_cfSrG_info;
           _sfPdh::P64 = P64[R1 + 7];
           _sfPdi::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPdh::P64;
           P64[Sp - 8] = _sfPdi::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSrP; else goto cfSrH;
       ufSrP: // global
           call _cfSrG(R1) args: 0, res: 0, upd: 0;
       cfSrH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdp_info" {
     sat_sfPdp_info:
         const sat_sfPdp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfSrG() //  [R1]
         { []
         }
     {offset
       cfSrG: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSrG_info" {
     block_cfSrG_info:
         const _cfSrG;
         const 2;
         const 30;
 },
 Data.Semigroup.$fShowArg_$cshowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfSrQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSrU; else goto cfSrT;
       cfSrU: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_$cshowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSrT: // global
           I64[Hp - 16] = sat_sfPdp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sfPdj::P64 = R4;
           R4 = R5;
           R3 = _sfPdj::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_$cshowList_info" {
     Data.Semigroup.$fShowArg_$cshowList_info:
         const Data.Semigroup.$fShowArg_$cshowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.836176125 UTC

[section ""data" . Data.Semigroup.$fShowArg_closure" {
     Data.Semigroup.$fShowArg_closure:
         const Data.Semigroup.$fShowArg_info;
 },
 sat_sfPdu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSsi: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowArg_$cshowList_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdu_info" {
     sat_sfPdu_info:
         const sat_sfPdu_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfPdt_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSsq: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowArg_$cshow_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdt_info" {
     sat_sfPdt_info:
         const sat_sfPdt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPds_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSsy: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowArg_$cshowsPrec_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPds_info" {
     sat_sfPds_info:
         const sat_sfPds_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Semigroup.$fShowArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSsC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfSsG; else goto cfSsF;
       cfSsG: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSsF: // global
           I64[Hp - 96] = sat_sfPdu_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sfPdt_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sfPds_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 94;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowArg_info" {
     Data.Semigroup.$fShowArg_info:
         const Data.Semigroup.$fShowArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.84514795 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max1_closure" {
     Data.Semigroup.$fGeneric1Max1_closure:
         const Data.Semigroup.$fGeneric1Max1_info;
 },
 Data.Semigroup.$fGeneric1Max1_entry() //  [R2]
         { []
         }
     {offset
       cfSt6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Max1_info" {
     Data.Semigroup.$fGeneric1Max1_info:
         const Data.Semigroup.$fGeneric1Max1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.84859122 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max2_closure" {
     Data.Semigroup.$fGeneric1Max2_closure:
         const Data.Semigroup.$fGeneric1Max2_info;
 },
 Data.Semigroup.$fGeneric1Max2_entry() //  [R2]
         { []
         }
     {offset
       cfSth: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Max2_info" {
     Data.Semigroup.$fGeneric1Max2_info:
         const Data.Semigroup.$fGeneric1Max2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.85164926 UTC

[section ""data" . Data.Semigroup.$fGeneric1Max_closure" {
     Data.Semigroup.$fGeneric1Max_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Max2_closure+1;
         const Data.Semigroup.$fGeneric1Max1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.853895159 UTC

[section ""data" . Data.Semigroup.$fGenericMax1_closure" {
     Data.Semigroup.$fGenericMax1_closure:
         const Data.Semigroup.$fGenericMax1_info;
 },
 Data.Semigroup.$fGenericMax1_entry() //  [R2]
         { []
         }
     {offset
       cfStt: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMax1_info" {
     Data.Semigroup.$fGenericMax1_info:
         const Data.Semigroup.$fGenericMax1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.857200572 UTC

[section ""data" . Data.Semigroup.$fGenericMax2_closure" {
     Data.Semigroup.$fGenericMax2_closure:
         const Data.Semigroup.$fGenericMax2_info;
 },
 Data.Semigroup.$fGenericMax2_entry() //  [R2]
         { []
         }
     {offset
       cfStE: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMax2_info" {
     Data.Semigroup.$fGenericMax2_info:
         const Data.Semigroup.$fGenericMax2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.860303107 UTC

[section ""data" . Data.Semigroup.$fGenericMax_closure" {
     Data.Semigroup.$fGenericMax_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericMax2_closure+1;
         const Data.Semigroup.$fGenericMax1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.863450988 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgfoldl_closure" {
     Data.Semigroup.$fDataMax_$cgfoldl_closure:
         const Data.Semigroup.$fDataMax_$cgfoldl_info;
 },
 sat_sfPdD_entry() //  [R1]
         { []
         }
     {offset
       cfStU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfStV; else goto cfStW;
       cfStV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfStW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPdD_info" {
     sat_sfPdD_info:
         const sat_sfPdD_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMax_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfStX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSu1; else goto cfSu0;
       cfSu1: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSu0: // global
           I64[Hp - 16] = sat_sfPdD_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfPdA::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfPdA::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgfoldl_info" {
     Data.Semigroup.$fDataMax_$cgfoldl_info:
         const Data.Semigroup.$fDataMax_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.868659633 UTC

[section ""cstring" . Data.Semigroup.$fDataMax4_bytes" {
     Data.Semigroup.$fDataMax4_bytes:
         I8[] [77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.871199921 UTC

[section ""data" . Data.Semigroup.$fDataMax7_closure" {
     Data.Semigroup.$fDataMax7_closure:
         const Data.Semigroup.$fDataMax7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMax7_entry() //  [R1]
         { []
         }
     {offset
       cfSuj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSuk; else goto cfSul;
       cfSuk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSul: // global
           (_cfSug::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfSug::I64 == 0) goto cfSui; else goto cfSuh;
       cfSui: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfSuh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfSug::I64;
           R2 = Data.Semigroup.$fDataMax4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax7_info" {
     Data.Semigroup.$fDataMax7_info:
         const Data.Semigroup.$fDataMax7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.875819065 UTC

[section ""data" . Data.Semigroup.$fReadMax_lexeme_closure" {
     Data.Semigroup.$fReadMax_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataMax7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.878093268 UTC

[section ""cstring" . Data.Semigroup.$fReadMax3_bytes" {
     Data.Semigroup.$fReadMax3_bytes:
         I8[] [103,101,116,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.880419649 UTC

[section ""data" . Data.Semigroup.$fReadMax2_closure" {
     Data.Semigroup.$fReadMax2_closure:
         const Data.Semigroup.$fReadMax2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadMax2_entry() //  [R1]
         { []
         }
     {offset
       cfSuC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSuD; else goto cfSuE;
       cfSuD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSuE: // global
           (_cfSuz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfSuz::I64 == 0) goto cfSuB; else goto cfSuA;
       cfSuB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfSuA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfSuz::I64;
           R2 = Data.Semigroup.$fReadMax3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax2_info" {
     Data.Semigroup.$fReadMax2_info:
         const Data.Semigroup.$fReadMax2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.889491035 UTC

[section ""data" . Data.Semigroup.$fReadMax1_closure" {
     Data.Semigroup.$fReadMax1_closure:
         const Data.Semigroup.$fReadMax1_info;
         const 0;
 },
 lvl33_sfPdF_entry() //  [R1]
         { []
         }
     {offset
       cfSuV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfSuW; else goto cfSuX;
       cfSuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSuX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPdF_info" {
     lvl33_sfPdF_info:
         const lvl33_sfPdF_entry;
         const 1;
         const 16;
 },
 ds_sfPdG_entry() //  [R1]
         { []
         }
     {offset
       cfSv3: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfPdG_info" {
     ds_sfPdG_info:
         const ds_sfPdG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPdR_entry() //  [R1]
         { []
         }
     {offset
       cfSvE: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdR_info" {
     sat_sfPdR_info:
         const sat_sfPdR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPdU_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSvK: // global
           _sfPdP::P64 = R2;
           _sfPdU::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfSvL; else goto cfSvM;
       cfSvM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSvO; else goto cfSvN;
       cfSvO: // global
           HpAlloc = 24;
           goto cfSvL;
       cfSvL: // global
           R2 = _sfPdP::P64;
           R1 = _sfPdU::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSvN: // global
           _sfPdJ::P64 = P64[_sfPdU::P64 + 7];
           I64[Hp - 16] = sat_sfPdR_info;
           P64[Hp - 8] = _sfPdJ::P64;
           P64[Hp] = _sfPdP::P64;
           I64[Sp - 8] = block_cfSvH_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdU_info" {
     sat_sfPdU_info:
         const sat_sfPdU_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+576;
 },
 _cfSvH() //  [R1]
         { []
         }
     {offset
       cfSvH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSvR; else goto cfSvQ;
       cfSvR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSvQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSvH_info" {
     block_cfSvH_info:
         const _cfSvH;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSwt_srtd" {
     ufSwt_srtd:
         const SfPCb_srt+264;
         const 58;
         const 144116837343297537;
 },
 sat_sfPdV_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSvS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSvW; else goto cfSvV;
       cfSvW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSvV: // global
           _sfPdG::P64 = P64[R1 + 7];
           _sfPdJ::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfPdU_info;
           P64[Hp] = _sfPdJ::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfPdG::P64;
           R2 = Data.Semigroup.$fReadMax2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdV_info" {
     sat_sfPdV_info:
         const sat_sfPdV_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufSwt_srtd;
 },
 section ""relreadonly" . ufSwu_srtd" {
     ufSwu_srtd:
         const SfPCb_srt+264;
         const 58;
         const 144116837343297541;
 },
 sat_sfPdY_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSw0: // global
           _sfPdN::P64 = R2;
           _sfPdY::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfSw1; else goto cfSw2;
       cfSw2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSw4; else goto cfSw3;
       cfSw4: // global
           HpAlloc = 24;
           goto cfSw1;
       cfSw1: // global
           R2 = _sfPdN::P64;
           R1 = _sfPdY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSw3: // global
           _sfPdG::P64 = P64[_sfPdY::P64 + 7];
           _sfPdJ::P64 = P64[_sfPdY::P64 + 15];
           I64[Hp - 16] = sat_sfPdV_info;
           P64[Hp - 8] = _sfPdG::P64;
           P64[Hp] = _sfPdJ::P64;
           I64[Sp - 8] = block_cfSvX_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPdY_info" {
     sat_sfPdY_info:
         const sat_sfPdY_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufSwu_srtd;
 },
 _cfSvX() //  [R1]
         { []
         }
     {offset
       cfSvX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSw7; else goto cfSw6;
       cfSw7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSw6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSvX_info" {
     block_cfSvX_info:
         const _cfSvX;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSwv_srtd" {
     ufSwv_srtd:
         const SfPCb_srt+264;
         const 59;
         const 432347213495009285;
 },
 sat_sfPe1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSw8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSw9; else goto cfSwa;
       cfSw9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSwa: // global
           I64[Sp - 24] = block_cfSvb_info;
           _sfPdG::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfPdG::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSwn; else goto cfSvc;
       ufSwn: // global
           call _cfSvb(R1) args: 0, res: 0, upd: 0;
       cfSvc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPe1_info" {
     sat_sfPe1_info:
         const sat_sfPe1_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufSwv_srtd;
 },
 section ""relreadonly" . ufSww_srtd" {
     ufSww_srtd:
         const SfPCb_srt+264;
         const 59;
         const 432347213495009285;
 },
 _cfSvb() //  [R1]
         { []
         }
     {offset
       cfSvb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSwd; else goto cfSwc;
       cfSwd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSwc: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfSwf; else goto cfSwj;
       cfSwf: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSwj: // global
           I64[Hp - 16] = sat_sfPdY_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfSwg_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadMax_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSvb_info" {
     block_cfSvb_info:
         const _cfSvb;
         const 2;
         const 18446744069414584350;
         const ufSww_srtd;
 },
 _cfSwg() //  [R1]
         { []
         }
     {offset
       cfSwg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSwm; else goto cfSwl;
       cfSwm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSwl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSwg_info" {
     block_cfSwg_info:
         const _cfSwg;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSwx_srtd" {
     ufSwx_srtd:
         const SfPCb_srt+264;
         const 60;
         const 1008807965798432789;
 },
 Data.Semigroup.$fReadMax1_entry() //  [R2]
         { []
         }
     {offset
       cfSwo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSws; else goto cfSwr;
       cfSws: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSwr: // global
           I64[Hp - 48] = lvl33_sfPdF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfPdG_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfPe1_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax1_info" {
     Data.Semigroup.$fReadMax1_info:
         const Data.Semigroup.$fReadMax1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSwx_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.91790412 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadsPrec_closure" {
     Data.Semigroup.$fReadMax_$creadsPrec_closure:
         const Data.Semigroup.$fReadMax_$creadsPrec_info;
         const 0;
 },
 ds_sfPe3_entry() //  [R1]
         { []
         }
     {offset
       cfSxS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSxT; else goto cfSxU;
       cfSxT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSxU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfPe3_info" {
     ds_sfPe3_info:
         const ds_sfPe3_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+736;
 },
 sat_sfPe5_entry() //  [R1]
         { []
         }
     {offset
       cfSy4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSy5; else goto cfSy6;
       cfSy5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSy6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPe5_info" {
     sat_sfPe5_info:
         const sat_sfPe5_entry;
         const 2;
         const 18;
 },
 sat_sfPe6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSy7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSyb; else goto cfSya;
       cfSyb: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSya: // global
           _sfPe3::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPe5_info;
           P64[Hp - 8] = _sfPe3::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPe6_info" {
     sat_sfPe6_info:
         const sat_sfPe6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadMax_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfSyc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfSyg; else goto cfSyf;
       cfSyg: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSyf: // global
           I64[Hp - 32] = ds_sfPe3_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfPe6_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadsPrec_info" {
     Data.Semigroup.$fReadMax_$creadsPrec_info:
         const Data.Semigroup.$fReadMax_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.927270873 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadListPrec_closure" {
     Data.Semigroup.$fReadMax_$creadListPrec_closure:
         const Data.Semigroup.$fReadMax_$creadListPrec_info;
         const 0;
 },
 sat_sfPe8_entry() //  [R1]
         { []
         }
     {offset
       cfSyN: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPe8_info" {
     sat_sfPe8_info:
         const sat_sfPe8_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+736;
 },
 section ""relreadonly" . ufSyV_srtd" {
     ufSyV_srtd:
         const SfPCb_srt+320;
         const 55;
         const 22517998136852481;
 },
 Data.Semigroup.$fReadMax_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfSyQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSyU; else goto cfSyT;
       cfSyU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSyT: // global
           I64[Hp - 16] = sat_sfPe8_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadListPrec_info" {
     Data.Semigroup.$fReadMax_$creadListPrec_info:
         const Data.Semigroup.$fReadMax_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSyV_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.93447576 UTC

[section ""data" . Data.Semigroup.$fReadMax_$creadList_closure" {
     Data.Semigroup.$fReadMax_$creadList_closure:
         const Data.Semigroup.$fReadMax_$creadList_info;
         const 0;
 },
 sat_sfPea_entry() //  [R1]
         { []
         }
     {offset
       cfSzh: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMax1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPea_info" {
     sat_sfPea_info:
         const sat_sfPea_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+736;
 },
 section ""relreadonly" . ufSzu_srtd" {
     ufSzu_srtd:
         const SfPCb_srt+320;
         const 53;
         const 4503599627370497;
 },
 sat_sfPeb_entry() //  [R1]
         { []
         }
     {offset
       cfSzk: // global
           _sfPeb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfSzl; else goto cfSzm;
       cfSzm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSzo; else goto cfSzn;
       cfSzo: // global
           HpAlloc = 24;
           goto cfSzl;
       cfSzl: // global
           R1 = _sfPeb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSzn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPeb::P64;
           _sfPe9::P64 = P64[_sfPeb::P64 + 16];
           I64[Hp - 16] = sat_sfPea_info;
           P64[Hp] = _sfPe9::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeb_info" {
     sat_sfPeb_info:
         const sat_sfPeb_entry;
         const 1;
         const 18446744069414584336;
         const ufSzu_srtd;
 },
 section ""relreadonly" . ufSzv_srtd" {
     ufSzv_srtd:
         const SfPCb_srt+320;
         const 56;
         const 40532396646334465;
 },
 Data.Semigroup.$fReadMax_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfSzp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSzt; else goto cfSzs;
       cfSzt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSzs: // global
           I64[Hp - 16] = sat_sfPeb_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_$creadList_info" {
     Data.Semigroup.$fReadMax_$creadList_info:
         const Data.Semigroup.$fReadMax_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSzv_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.944613599 UTC

[section ""data" . Data.Semigroup.$fReadMax_closure" {
     Data.Semigroup.$fReadMax_closure:
         const Data.Semigroup.$fReadMax_info;
         const 0;
 },
 sat_sfPeg_entry() //  [R1]
         { []
         }
     {offset
       cfSzZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSA0; else goto cfSA1;
       cfSA0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSA1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeg_info" {
     sat_sfPeg_info:
         const sat_sfPeg_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+752;
 },
 sat_sfPef_entry() //  [R1]
         { []
         }
     {offset
       cfSA6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSA7; else goto cfSA8;
       cfSA7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSA8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPef_info" {
     sat_sfPef_info:
         const sat_sfPef_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+736;
 },
 sat_sfPee_entry() //  [R1]
         { []
         }
     {offset
       cfSAd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSAe; else goto cfSAf;
       cfSAe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSAf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPee_info" {
     sat_sfPee_info:
         const sat_sfPee_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+760;
 },
 sat_sfPed_entry() //  [R1]
         { []
         }
     {offset
       cfSAk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSAl; else goto cfSAm;
       cfSAl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSAm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMax_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPed_info" {
     sat_sfPed_info:
         const sat_sfPed_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+744;
 },
 Data.Semigroup.$fReadMax_entry() //  [R2]
         { []
         }
     {offset
       cfSAo: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfSAs; else goto cfSAr;
       cfSAs: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSAr: // global
           I64[Hp - 128] = sat_sfPeg_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfPef_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPee_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPed_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMax_info" {
     Data.Semigroup.$fReadMax_info:
         const Data.Semigroup.$fReadMax_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfPCb_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.956037096 UTC

[section ""cstring" . Data.Semigroup.$fShowMax2_bytes" {
     Data.Semigroup.$fShowMax2_bytes:
         I8[] [77,97,120,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.957704742 UTC

[section ""cstring" . Data.Semigroup.$fShowMax1_bytes" {
     Data.Semigroup.$fShowMax1_bytes:
         I8[] [103,101,116,77,97,120,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.964817403 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec3_closure" {
     Data.Semigroup.$w$cshowsPrec3_closure:
         const Data.Semigroup.$w$cshowsPrec3_info;
 },
 f_sfPek_entry() //  [R1]
         { []
         }
     {offset
       cfSBb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfSBc; else goto cfSBd;
       cfSBc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSBd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfPek_info" {
     f_sfPek_info:
         const f_sfPek_entry;
         const 2;
         const 18;
 },
 sat_sfPen_entry() //  [R1]
         { []
         }
     {offset
       cfSBy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSBz; else goto cfSBA;
       cfSBz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSBA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPen_info" {
     sat_sfPen_info:
         const sat_sfPen_entry;
         const 1;
         const 16;
 },
 sat_sfPeo_entry() //  [R1]
         { []
         }
     {offset
       cfSBB: // global
           _sfPeo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSBC; else goto cfSBD;
       cfSBD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSBF; else goto cfSBE;
       cfSBF: // global
           HpAlloc = 24;
           goto cfSBC;
       cfSBC: // global
           R1 = _sfPeo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSBE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPeo::P64;
           _sfPek::P64 = P64[_sfPeo::P64 + 16];
           _sfPem::P64 = P64[_sfPeo::P64 + 24];
           I64[Hp - 16] = sat_sfPen_info;
           P64[Hp] = _sfPem::P64;
           R2 = Hp - 16;
           R1 = _sfPek::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeo_info" {
     sat_sfPeo_info:
         const sat_sfPeo_entry;
         const 2;
         const 18;
 },
 sat_sfPep_entry() //  [R1]
         { []
         }
     {offset
       cfSBG: // global
           _sfPep::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSBH; else goto cfSBI;
       cfSBI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSBK; else goto cfSBJ;
       cfSBK: // global
           HpAlloc = 32;
           goto cfSBH;
       cfSBH: // global
           R1 = _sfPep::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPep::P64;
           _sfPek::P64 = P64[_sfPep::P64 + 16];
           _sfPem::P64 = P64[_sfPep::P64 + 24];
           I64[Hp - 24] = sat_sfPeo_info;
           P64[Hp - 8] = _sfPek::P64;
           P64[Hp] = _sfPem::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPep_info" {
     sat_sfPep_info:
         const sat_sfPep_entry;
         const 2;
         const 18;
 },
 sat_sfPeq_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSBL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSBP; else goto cfSBO;
       cfSBP: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSBO: // global
           _sfPek::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPep_info;
           P64[Hp - 8] = _sfPek::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPeq_info" {
     sat_sfPeq_info:
         const sat_sfPeq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPet_entry() //  [R1]
         { []
         }
     {offset
       cfSCd: // global
           _sfPet::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSCe; else goto cfSCf;
       cfSCf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSCh; else goto cfSCg;
       cfSCh: // global
           HpAlloc = 24;
           goto cfSCe;
       cfSCe: // global
           R1 = _sfPet::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSCg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPet::P64;
           _sfPer::P64 = P64[_sfPet::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfPer::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPet_info" {
     sat_sfPet_info:
         const sat_sfPet_entry;
         const 1;
         const 16;
 },
 sat_sfPeu_entry() //  [R1]
         { []
         }
     {offset
       cfSCi: // global
           _sfPeu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSCj; else goto cfSCk;
       cfSCk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSCm; else goto cfSCl;
       cfSCm: // global
           HpAlloc = 24;
           goto cfSCj;
       cfSCj: // global
           R1 = _sfPeu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSCl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPeu::P64;
           _sfPek::P64 = P64[_sfPeu::P64 + 16];
           _sfPer::P64 = P64[_sfPeu::P64 + 24];
           I64[Hp - 16] = sat_sfPet_info;
           P64[Hp] = _sfPer::P64;
           R2 = Hp - 16;
           R1 = _sfPek::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeu_info" {
     sat_sfPeu_info:
         const sat_sfPeu_entry;
         const 2;
         const 18;
 },
 sat_sfPev_entry() //  [R1]
         { []
         }
     {offset
       cfSCn: // global
           _sfPev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSCo; else goto cfSCp;
       cfSCp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSCr; else goto cfSCq;
       cfSCr: // global
           HpAlloc = 32;
           goto cfSCo;
       cfSCo: // global
           R1 = _sfPev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSCq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPev::P64;
           _sfPek::P64 = P64[_sfPev::P64 + 16];
           _sfPer::P64 = P64[_sfPev::P64 + 24];
           I64[Hp - 24] = sat_sfPeu_info;
           P64[Hp - 8] = _sfPek::P64;
           P64[Hp] = _sfPer::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPev_info" {
     sat_sfPev_info:
         const sat_sfPev_entry;
         const 2;
         const 18;
 },
 sat_sfPew_entry() //  [R1]
         { []
         }
     {offset
       cfSCs: // global
           _sfPew::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSCt; else goto cfSCu;
       cfSCu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSCw; else goto cfSCv;
       cfSCw: // global
           HpAlloc = 32;
           goto cfSCt;
       cfSCt: // global
           R1 = _sfPew::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSCv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPew::P64;
           _sfPek::P64 = P64[_sfPew::P64 + 16];
           _sfPer::P64 = P64[_sfPew::P64 + 24];
           I64[Hp - 24] = sat_sfPev_info;
           P64[Hp - 8] = _sfPek::P64;
           P64[Hp] = _sfPer::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPew_info" {
     sat_sfPew_info:
         const sat_sfPew_entry;
         const 2;
         const 18;
 },
 sat_sfPex_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSCy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSCC; else goto cfSCB;
       cfSCC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSCB: // global
           _sfPek::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfPew_info;
           P64[Hp - 32] = _sfPek::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPex_info" {
     sat_sfPex_info:
         const sat_sfPex_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSCG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfSCK; else goto cfSCJ;
       cfSCK: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSCJ: // global
           I64[Hp - 40] = f_sfPek_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfSB7::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfSCE; else goto cfSCF;
       cfSCE: // global
           I64[Hp - 8] = sat_sfPeq_info;
           P64[Hp] = _cfSB7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSCF: // global
           I64[Hp - 8] = sat_sfPex_info;
           P64[Hp] = _cfSB7::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec3_info" {
     Data.Semigroup.$w$cshowsPrec3_info:
         const Data.Semigroup.$w$cshowsPrec3_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.987826642 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshowsPrec_closure" {
     Data.Semigroup.$fShowMax_$cshowsPrec_closure:
         const Data.Semigroup.$fShowMax_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowMax_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSE1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSE2; else goto cfSE3;
       cfSE2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSE3: // global
           I64[Sp - 24] = block_cfSDY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSE7; else goto cfSDZ;
       ufSE7: // global
           call _cfSDY(R1) args: 0, res: 0, upd: 0;
       cfSDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshowsPrec_info" {
     Data.Semigroup.$fShowMax_$cshowsPrec_info:
         const Data.Semigroup.$fShowMax_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfSDY() //  [R1]
         { []
         }
     {offset
       cfSDY: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSDY_info" {
     block_cfSDY_info:
         const _cfSDY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:42.994585607 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshow_closure" {
     Data.Semigroup.$fShowMax_$cshow_closure:
         const Data.Semigroup.$fShowMax_$cshow_info;
         const 0;
 },
 sat_sfPeF_entry() //  [R1]
         { []
         }
     {offset
       cfSEu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfSEv; else goto cfSEw;
       cfSEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSEw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeF_info" {
     sat_sfPeF_info:
         const sat_sfPeF_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 sat_sfPeG_entry() //  [R1]
         { []
         }
     {offset
       cfSEx: // global
           _sfPeG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSEy; else goto cfSEz;
       cfSEz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSEB; else goto cfSEA;
       cfSEB: // global
           HpAlloc = 32;
           goto cfSEy;
       cfSEy: // global
           R1 = _sfPeG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSEA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPeG::P64;
           _sfPeD::P64 = P64[_sfPeG::P64 + 16];
           _sfPeE::P64 = P64[_sfPeG::P64 + 24];
           I64[Hp - 24] = sat_sfPeF_info;
           P64[Hp - 8] = _sfPeD::P64;
           P64[Hp] = _sfPeE::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeG_info" {
     sat_sfPeG_info:
         const sat_sfPeG_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 Data.Semigroup.$fShowMax_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSEC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSEG; else goto cfSEF;
       cfSEG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSEF: // global
           I64[Hp - 24] = sat_sfPeG_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMax2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshow_info" {
     Data.Semigroup.$fShowMax_$cshow_info:
         const Data.Semigroup.$fShowMax_$cshow_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const SfPCb_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.003504395 UTC

[section ""data" . Data.Semigroup.$fShowMax_$cshowList_closure" {
     Data.Semigroup.$fShowMax_$cshowList_closure:
         const Data.Semigroup.$fShowMax_$cshowList_info;
 },
 sat_sfPeL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSFa: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPeL_info" {
     sat_sfPeL_info:
         const sat_sfPeL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowMax_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSFd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSFh; else goto cfSFg;
       cfSFh: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSFg: // global
           I64[Hp - 8] = sat_sfPeL_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_$cshowList_info" {
     Data.Semigroup.$fShowMax_$cshowList_info:
         const Data.Semigroup.$fShowMax_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.009736125 UTC

[section ""data" . Data.Semigroup.$fShowMax_closure" {
     Data.Semigroup.$fShowMax_closure:
         const Data.Semigroup.$fShowMax_info;
         const 0;
 },
 sat_sfPeP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSFz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMax_$cshowList_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPeP_info" {
     sat_sfPeP_info:
         const sat_sfPeP_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPeO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSFH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowMax_$cshow_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPeO_info" {
     sat_sfPeO_info:
         const sat_sfPeO_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+776;
 },
 sat_sfPeN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSFP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMax_$cshowsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPeN_info" {
     sat_sfPeN_info:
         const sat_sfPeN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowMax_entry() //  [R2]
         { []
         }
     {offset
       cfSFT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfSFX; else goto cfSFW;
       cfSFX: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSFW: // global
           I64[Hp - 72] = sat_sfPeP_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPeO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPeN_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMax_info" {
     Data.Semigroup.$fShowMax_info:
         const Data.Semigroup.$fShowMax_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.019058351 UTC

[section ""data" . Data.Semigroup.$fEqMax_closure" {
     Data.Semigroup.$fEqMax_closure:
         const Data.Semigroup.$fEqMax_info;
 },
 sat_sfPeS_entry() //  [R1]
         { []
         }
     {offset
       cfSGr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSGs; else goto cfSGt;
       cfSGs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeS_info" {
     sat_sfPeS_info:
         const sat_sfPeS_entry;
         const 1;
         const 16;
 },
 sat_sfPeR_entry() //  [R1]
         { []
         }
     {offset
       cfSGy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSGz; else goto cfSGA;
       cfSGz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSGA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeR_info" {
     sat_sfPeR_info:
         const sat_sfPeR_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqMax_entry() //  [R2]
         { []
         }
     {offset
       cfSGC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfSGG; else goto cfSGF;
       cfSGG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSGF: // global
           I64[Hp - 64] = sat_sfPeS_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPeR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqMax_info" {
     Data.Semigroup.$fEqMax_info:
         const Data.Semigroup.$fEqMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.026755302 UTC

[section ""data" . Data.Semigroup.$fOrdMax_$cp1Ord_closure" {
     Data.Semigroup.$fOrdMax_$cp1Ord_closure:
         const Data.Semigroup.$fOrdMax_$cp1Ord_info;
 },
 sat_sfPeU_entry() //  [R1]
         { []
         }
     {offset
       cfSH9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSHa; else goto cfSHb;
       cfSHa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSHb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeU_info" {
     sat_sfPeU_info:
         const sat_sfPeU_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMax_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfSHc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSHg; else goto cfSHf;
       cfSHg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMax_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSHf: // global
           I64[Hp - 16] = sat_sfPeU_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqMax_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMax_$cp1Ord_info" {
     Data.Semigroup.$fOrdMax_$cp1Ord_info:
         const Data.Semigroup.$fOrdMax_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.03568547 UTC

[section ""data" . Data.Semigroup.$fOrdMax_closure" {
     Data.Semigroup.$fOrdMax_closure:
         const Data.Semigroup.$fOrdMax_info;
 },
 sat_sfPf3_entry() //  [R1]
         { []
         }
     {offset
       cfSHz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSHA; else goto cfSHB;
       cfSHA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSHB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf3_info" {
     sat_sfPf3_info:
         const sat_sfPf3_entry;
         const 1;
         const 16;
 },
 sat_sfPf2_entry() //  [R1]
         { []
         }
     {offset
       cfSHG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSHH; else goto cfSHI;
       cfSHH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSHI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf2_info" {
     sat_sfPf2_info:
         const sat_sfPf2_entry;
         const 1;
         const 16;
 },
 sat_sfPf1_entry() //  [R1]
         { []
         }
     {offset
       cfSHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSHO; else goto cfSHP;
       cfSHO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf1_info" {
     sat_sfPf1_info:
         const sat_sfPf1_entry;
         const 1;
         const 16;
 },
 sat_sfPf0_entry() //  [R1]
         { []
         }
     {offset
       cfSHU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSHV; else goto cfSHW;
       cfSHV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSHW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf0_info" {
     sat_sfPf0_info:
         const sat_sfPf0_entry;
         const 1;
         const 16;
 },
 sat_sfPeZ_entry() //  [R1]
         { []
         }
     {offset
       cfSI1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSI2; else goto cfSI3;
       cfSI2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSI3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeZ_info" {
     sat_sfPeZ_info:
         const sat_sfPeZ_entry;
         const 1;
         const 16;
 },
 sat_sfPeY_entry() //  [R1]
         { []
         }
     {offset
       cfSI8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSI9; else goto cfSIa;
       cfSI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSIa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeY_info" {
     sat_sfPeY_info:
         const sat_sfPeY_entry;
         const 1;
         const 16;
 },
 sat_sfPeX_entry() //  [R1]
         { []
         }
     {offset
       cfSIf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSIg; else goto cfSIh;
       cfSIg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSIh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeX_info" {
     sat_sfPeX_info:
         const sat_sfPeX_entry;
         const 1;
         const 16;
 },
 sat_sfPeW_entry() //  [R1]
         { []
         }
     {offset
       cfSIm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSIn; else goto cfSIo;
       cfSIn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSIo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdMax_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPeW_info" {
     sat_sfPeW_info:
         const sat_sfPeW_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMax_entry() //  [R2]
         { []
         }
     {offset
       cfSIq: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfSIu; else goto cfSIt;
       cfSIu: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSIt: // global
           I64[Hp - 256] = sat_sfPf3_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfPf2_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPf1_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfPf0_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPeZ_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfPeY_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPeX_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfPeW_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMax_info" {
     Data.Semigroup.$fOrdMax_info:
         const Data.Semigroup.$fOrdMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.054057308 UTC

[section ""data" . Data.Semigroup.$fBoundedMax_closure" {
     Data.Semigroup.$fBoundedMax_closure:
         const Data.Semigroup.$fBoundedMax_info;
 },
 sat_sfPf6_entry() //  [R1]
         { []
         }
     {offset
       cfSJD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSJE; else goto cfSJF;
       cfSJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSJF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf6_info" {
     sat_sfPf6_info:
         const sat_sfPf6_entry;
         const 1;
         const 16;
 },
 sat_sfPf5_entry() //  [R1]
         { []
         }
     {offset
       cfSJK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSJL; else goto cfSJM;
       cfSJL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSJM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPf5_info" {
     sat_sfPf5_info:
         const sat_sfPf5_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedMax_entry() //  [R2]
         { []
         }
     {offset
       cfSJO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfSJS; else goto cfSJR;
       cfSJS: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSJR: // global
           I64[Hp - 64] = sat_sfPf6_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPf5_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedMax_info" {
     Data.Semigroup.$fBoundedMax_info:
         const Data.Semigroup.$fBoundedMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.062950223 UTC

[section ""data" . Data.Semigroup.$fMonoidMax_$cmconcat_closure" {
     Data.Semigroup.$fMonoidMax_$cmconcat_closure:
         const Data.Semigroup.$fMonoidMax_$cmconcat_info;
 },
 z_sfPfa_entry() //  [R1]
         { []
         }
     {offset
       cfSKl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSKm; else goto cfSKn;
       cfSKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfPfa_info" {
     z_sfPfa_info:
         const z_sfPfa_entry;
         const 1;
         const 16;
 },
 go_sfPfb_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSKA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfSKB; else goto cfSKC;
       cfSKB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSKC: // global
           I64[Sp - 32] = block_cfSKt_info;
           _sfPfb::P64 = R1;
           _sfPf7::P64 = P64[R1 + 7];
           _sfPfa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfPf7::P64;
           P64[Sp - 16] = _sfPfa::P64;
           P64[Sp - 8] = _sfPfb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufSKM; else goto cfSKu;
       ufSKM: // global
           call _cfSKt(R1) args: 0, res: 0, upd: 0;
       cfSKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfPfb_info" {
     go_sfPfb_info:
         const go_sfPfb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfSKt() //  [R1]
         { []
         }
     {offset
       cfSKt: // global
           if (R1 & 7 == 1) goto cfSKx; else goto cfSKy;
       cfSKx: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfSKy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSKK; else goto cfSKJ;
       cfSKK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSKJ: // global
           _sfPfe::P64 = P64[R1 + 6];
           _sfPff::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfPff::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfPfe::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Classes.max_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSKt_info" {
     block_cfSKt_info:
         const _cfSKt;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidMax_$cmconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSKN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfSKR; else goto cfSKQ;
       cfSKR: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMax_$cmconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSKQ: // global
           I64[Hp - 40] = z_sfPfa_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = go_sfPfb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R4;
           R1 = Hp - 15;
           call go_sfPfb_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMax_$cmconcat_info" {
     Data.Semigroup.$fMonoidMax_$cmconcat_info:
         const Data.Semigroup.$fMonoidMax_$cmconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.074157209 UTC

[section ""data" . Data.Semigroup.$fMonoidMax_closure" {
     Data.Semigroup.$fMonoidMax_closure:
         const Data.Semigroup.$fMonoidMax_info;
         const 0;
 },
 sat_sfPfm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSLs: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidMax_$cmconcat_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfm_info" {
     sat_sfPfm_info:
         const sat_sfPfm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPfl_entry() //  [R1]
         { []
         }
     {offset
       cfSLz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSLA; else goto cfSLB;
       cfSLA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSLB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPfl_info" {
     sat_sfPfl_info:
         const sat_sfPfl_entry;
         const 1;
         const 16;
 },
 sat_sfPfk_entry() //  [R1]
         { []
         }
     {offset
       cfSLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSLH; else goto cfSLI;
       cfSLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPfk_info" {
     sat_sfPfk_info:
         const sat_sfPfk_entry;
         const 1;
         const 16;
 },
 sat_sfPfj_entry() //  [R1]
         { []
         }
     {offset
       cfSLN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSLO; else goto cfSLP;
       cfSLO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSLP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPfj_info" {
     sat_sfPfj_info:
         const sat_sfPfj_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+792;
 },
 Data.Semigroup.$fMonoidMax_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSLR: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfSLV; else goto cfSLU;
       cfSLV: // global
           HpAlloc = 136;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSLU: // global
           I64[Hp - 128] = sat_sfPfm_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sfPfl_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPfk_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfPfj_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 127;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMax_info" {
     Data.Semigroup.$fMonoidMax_info:
         const Data.Semigroup.$fMonoidMax_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.08510291 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min1_closure" {
     Data.Semigroup.$fGeneric1Min1_closure:
         const Data.Semigroup.$fGeneric1Min1_info;
 },
 Data.Semigroup.$fGeneric1Min1_entry() //  [R2]
         { []
         }
     {offset
       cfSMw: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Min1_info" {
     Data.Semigroup.$fGeneric1Min1_info:
         const Data.Semigroup.$fGeneric1Min1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.088478048 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min2_closure" {
     Data.Semigroup.$fGeneric1Min2_closure:
         const Data.Semigroup.$fGeneric1Min2_info;
 },
 Data.Semigroup.$fGeneric1Min2_entry() //  [R2]
         { []
         }
     {offset
       cfSMH: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGeneric1Min2_info" {
     Data.Semigroup.$fGeneric1Min2_info:
         const Data.Semigroup.$fGeneric1Min2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.091622188 UTC

[section ""data" . Data.Semigroup.$fGeneric1Min_closure" {
     Data.Semigroup.$fGeneric1Min_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Semigroup.$fGeneric1Min2_closure+1;
         const Data.Semigroup.$fGeneric1Min1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.093696061 UTC

[section ""data" . Data.Semigroup.$fGenericMin1_closure" {
     Data.Semigroup.$fGenericMin1_closure:
         const Data.Semigroup.$fGenericMin1_info;
 },
 Data.Semigroup.$fGenericMin1_entry() //  [R2]
         { []
         }
     {offset
       cfSMT: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMin1_info" {
     Data.Semigroup.$fGenericMin1_info:
         const Data.Semigroup.$fGenericMin1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.097434665 UTC

[section ""data" . Data.Semigroup.$fGenericMin2_closure" {
     Data.Semigroup.$fGenericMin2_closure:
         const Data.Semigroup.$fGenericMin2_info;
 },
 Data.Semigroup.$fGenericMin2_entry() //  [R2]
         { []
         }
     {offset
       cfSN4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fGenericMin2_info" {
     Data.Semigroup.$fGenericMin2_info:
         const Data.Semigroup.$fGenericMin2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.10264945 UTC

[section ""data" . Data.Semigroup.$fGenericMin_closure" {
     Data.Semigroup.$fGenericMin_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Semigroup.$fGenericMin2_closure+1;
         const Data.Semigroup.$fGenericMin1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.106992464 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgfoldl_closure" {
     Data.Semigroup.$fDataMin_$cgfoldl_closure:
         const Data.Semigroup.$fDataMin_$cgfoldl_info;
 },
 sat_sfPfv_entry() //  [R1]
         { []
         }
     {offset
       cfSNk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSNl; else goto cfSNm;
       cfSNl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSNm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPfv_info" {
     sat_sfPfv_info:
         const sat_sfPfv_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMin_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfSNn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSNr; else goto cfSNq;
       cfSNr: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSNq: // global
           I64[Hp - 16] = sat_sfPfv_info;
           P64[Hp] = R4;
           R4 = R5;
           _sfPfs::P64 = R3;
           R3 = Hp - 16;
           R2 = R2;
           R1 = _sfPfs::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgfoldl_info" {
     Data.Semigroup.$fDataMin_$cgfoldl_info:
         const Data.Semigroup.$fDataMin_$cgfoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.11401637 UTC

[section ""cstring" . Data.Semigroup.$fDataMin4_bytes" {
     Data.Semigroup.$fDataMin4_bytes:
         I8[] [77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.116459021 UTC

[section ""data" . Data.Semigroup.$fDataMin7_closure" {
     Data.Semigroup.$fDataMin7_closure:
         const Data.Semigroup.$fDataMin7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMin7_entry() //  [R1]
         { []
         }
     {offset
       cfSNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSNK; else goto cfSNL;
       cfSNK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSNL: // global
           (_cfSNG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfSNG::I64 == 0) goto cfSNI; else goto cfSNH;
       cfSNI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfSNH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfSNG::I64;
           R2 = Data.Semigroup.$fDataMin4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin7_info" {
     Data.Semigroup.$fDataMin7_info:
         const Data.Semigroup.$fDataMin7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.120141961 UTC

[section ""data" . Data.Semigroup.$fReadMin_lexeme_closure" {
     Data.Semigroup.$fReadMin_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Semigroup.$fDataMin7_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.121892644 UTC

[section ""cstring" . Data.Semigroup.$fReadMin3_bytes" {
     Data.Semigroup.$fReadMin3_bytes:
         I8[] [103,101,116,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.124228154 UTC

[section ""data" . Data.Semigroup.$fReadMin2_closure" {
     Data.Semigroup.$fReadMin2_closure:
         const Data.Semigroup.$fReadMin2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fReadMin2_entry() //  [R1]
         { []
         }
     {offset
       cfSO2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSO3; else goto cfSO4;
       cfSO3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSO4: // global
           (_cfSNZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfSNZ::I64 == 0) goto cfSO1; else goto cfSO0;
       cfSO1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfSO0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfSNZ::I64;
           R2 = Data.Semigroup.$fReadMin3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin2_info" {
     Data.Semigroup.$fReadMin2_info:
         const Data.Semigroup.$fReadMin2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.133632872 UTC

[section ""data" . Data.Semigroup.$fReadMin1_closure" {
     Data.Semigroup.$fReadMin1_closure:
         const Data.Semigroup.$fReadMin1_info;
         const 0;
 },
 lvl33_sfPfx_entry() //  [R1]
         { []
         }
     {offset
       cfSOl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfSOm; else goto cfSOn;
       cfSOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPfx_info" {
     lvl33_sfPfx_info:
         const lvl33_sfPfx_entry;
         const 1;
         const 16;
 },
 ds_sfPfy_entry() //  [R1]
         { []
         }
     {offset
       cfSOt: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sfPfy_info" {
     ds_sfPfy_info:
         const ds_sfPfy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPfJ_entry() //  [R1]
         { []
         }
     {offset
       cfSP4: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfJ_info" {
     sat_sfPfJ_info:
         const sat_sfPfJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPfM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSPa: // global
           _sfPfH::P64 = R2;
           _sfPfM::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfSPb; else goto cfSPc;
       cfSPc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSPe; else goto cfSPd;
       cfSPe: // global
           HpAlloc = 24;
           goto cfSPb;
       cfSPb: // global
           R2 = _sfPfH::P64;
           R1 = _sfPfM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSPd: // global
           _sfPfB::P64 = P64[_sfPfM::P64 + 7];
           I64[Hp - 16] = sat_sfPfJ_info;
           P64[Hp - 8] = _sfPfB::P64;
           P64[Hp] = _sfPfH::P64;
           I64[Sp - 8] = block_cfSP7_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfM_info" {
     sat_sfPfM_info:
         const sat_sfPfM_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SfPCb_srt+576;
 },
 _cfSP7() //  [R1]
         { []
         }
     {offset
       cfSP7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSPh; else goto cfSPg;
       cfSPh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSPg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSP7_info" {
     block_cfSP7_info:
         const _cfSP7;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSPT_srtd" {
     ufSPT_srtd:
         const SfPCb_srt+264;
         const 69;
         const 1649267441665;
         const 16;
 },
 sat_sfPfN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSPi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSPm; else goto cfSPl;
       cfSPm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSPl: // global
           _sfPfy::P64 = P64[R1 + 7];
           _sfPfB::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sfPfM_info;
           P64[Hp] = _sfPfB::P64;
           R5 = Hp - 7;
           R4 = Data.Semigroup.$fReadArg2_closure+1;
           R3 = _sfPfy::P64;
           R2 = Data.Semigroup.$fReadMin2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfN_info" {
     sat_sfPfN_info:
         const sat_sfPfN_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufSPT_srtd;
 },
 section ""relreadonly" . ufSPU_srtd" {
     ufSPU_srtd:
         const SfPCb_srt+264;
         const 69;
         const 1649267441669;
         const 16;
 },
 sat_sfPfQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSPq: // global
           _sfPfF::P64 = R2;
           _sfPfQ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cfSPr; else goto cfSPs;
       cfSPs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSPu; else goto cfSPt;
       cfSPu: // global
           HpAlloc = 24;
           goto cfSPr;
       cfSPr: // global
           R2 = _sfPfF::P64;
           R1 = _sfPfQ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSPt: // global
           _sfPfy::P64 = P64[_sfPfQ::P64 + 7];
           _sfPfB::P64 = P64[_sfPfQ::P64 + 15];
           I64[Hp - 16] = sat_sfPfN_info;
           P64[Hp - 8] = _sfPfy::P64;
           P64[Hp] = _sfPfB::P64;
           I64[Sp - 8] = block_cfSPn_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadFirst_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfQ_info" {
     sat_sfPfQ_info:
         const sat_sfPfQ_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ufSPU_srtd;
 },
 _cfSPn() //  [R1]
         { []
         }
     {offset
       cfSPn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSPx; else goto cfSPw;
       cfSPx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSPw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSPn_info" {
     block_cfSPn_info:
         const _cfSPn;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSPV_srtd" {
     ufSPV_srtd:
         const SfPCb_srt+264;
         const 70;
         const 1649267441669;
         const 48;
 },
 sat_sfPfT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSPy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSPz; else goto cfSPA;
       cfSPz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSPA: // global
           I64[Sp - 24] = block_cfSOB_info;
           _sfPfy::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sfPfy::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSPN; else goto cfSOC;
       ufSPN: // global
           call _cfSOB(R1) args: 0, res: 0, upd: 0;
       cfSOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfT_info" {
     sat_sfPfT_info:
         const sat_sfPfT_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const ufSPV_srtd;
 },
 section ""relreadonly" . ufSPW_srtd" {
     ufSPW_srtd:
         const SfPCb_srt+264;
         const 70;
         const 1649267441669;
         const 48;
 },
 _cfSOB() //  [R1]
         { []
         }
     {offset
       cfSOB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSPD; else goto cfSPC;
       cfSPD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSPC: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cfSPF; else goto cfSPJ;
       cfSPF: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSPJ: // global
           I64[Hp - 16] = sat_sfPfQ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cfSPG_info;
           R3 = Hp - 15;
           R2 = Data.Semigroup.$fReadMin_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSOB_info" {
     block_cfSOB_info:
         const _cfSOB;
         const 2;
         const 18446744069414584350;
         const ufSPW_srtd;
 },
 _cfSPG() //  [R1]
         { []
         }
     {offset
       cfSPG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSPM; else goto cfSPL;
       cfSPM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfSPL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSPG_info" {
     block_cfSPG_info:
         const _cfSPG;
         const 0;
         const 30;
 },
 section ""relreadonly" . ufSPX_srtd" {
     ufSPX_srtd:
         const SfPCb_srt+264;
         const 71;
         const 1649267441685;
         const 112;
 },
 Data.Semigroup.$fReadMin1_entry() //  [R2]
         { []
         }
     {offset
       cfSPO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSPS; else goto cfSPR;
       cfSPS: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSPR: // global
           I64[Hp - 48] = lvl33_sfPfx_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sfPfy_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sfPfT_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin1_info" {
     Data.Semigroup.$fReadMin1_info:
         const Data.Semigroup.$fReadMin1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSPX_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.161848946 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadsPrec_closure" {
     Data.Semigroup.$fReadMin_$creadsPrec_closure:
         const Data.Semigroup.$fReadMin_$creadsPrec_info;
         const 0;
 },
 ds_sfPfV_entry() //  [R1]
         { []
         }
     {offset
       cfSRi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSRj; else goto cfSRk;
       cfSRj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSRk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sfPfV_info" {
     ds_sfPfV_info:
         const ds_sfPfV_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+824;
 },
 sat_sfPfX_entry() //  [R1]
         { []
         }
     {offset
       cfSRu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSRv; else goto cfSRw;
       cfSRv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSRw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPfX_info" {
     sat_sfPfX_info:
         const sat_sfPfX_entry;
         const 2;
         const 18;
 },
 sat_sfPfY_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSRx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSRB; else goto cfSRA;
       cfSRB: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSRA: // global
           _sfPfV::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPfX_info;
           P64[Hp - 8] = _sfPfV::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPfY_info" {
     sat_sfPfY_info:
         const sat_sfPfY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fReadMin_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cfSRC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfSRG; else goto cfSRF;
       cfSRG: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSRF: // global
           I64[Hp - 32] = ds_sfPfV_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sfPfY_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadsPrec_info" {
     Data.Semigroup.$fReadMin_$creadsPrec_info:
         const Data.Semigroup.$fReadMin_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.171271922 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadListPrec_closure" {
     Data.Semigroup.$fReadMin_$creadListPrec_closure:
         const Data.Semigroup.$fReadMin_$creadListPrec_info;
         const 0;
 },
 sat_sfPg0_entry() //  [R1]
         { []
         }
     {offset
       cfSSd: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPg0_info" {
     sat_sfPg0_info:
         const sat_sfPg0_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+824;
 },
 section ""relreadonly" . ufSSl_srtd" {
     ufSSl_srtd:
         const SfPCb_srt+320;
         const 66;
         const 9223372036854775809;
         const 2;
 },
 Data.Semigroup.$fReadMin_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cfSSg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSSk; else goto cfSSj;
       cfSSk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSSj: // global
           I64[Hp - 16] = sat_sfPg0_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadListPrec_info" {
     Data.Semigroup.$fReadMin_$creadListPrec_info:
         const Data.Semigroup.$fReadMin_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSSl_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.178155288 UTC

[section ""data" . Data.Semigroup.$fReadMin_$creadList_closure" {
     Data.Semigroup.$fReadMin_$creadList_closure:
         const Data.Semigroup.$fReadMin_$creadList_info;
         const 0;
 },
 sat_sfPg2_entry() //  [R1]
         { []
         }
     {offset
       cfSSH: // global
           R2 = P64[R1 + 16];
           call Data.Semigroup.$fReadMin1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPg2_info" {
     sat_sfPg2_info:
         const sat_sfPg2_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+824;
 },
 section ""relreadonly" . ufSSU_srtd" {
     ufSSU_srtd:
         const SfPCb_srt+320;
         const 64;
         const 9223372036854775809;
 },
 sat_sfPg3_entry() //  [R1]
         { []
         }
     {offset
       cfSSK: // global
           _sfPg3::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfSSL; else goto cfSSM;
       cfSSM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSSO; else goto cfSSN;
       cfSSO: // global
           HpAlloc = 24;
           goto cfSSL;
       cfSSL: // global
           R1 = _sfPg3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSSN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPg3::P64;
           _sfPg1::P64 = P64[_sfPg3::P64 + 16];
           I64[Hp - 16] = sat_sfPg2_info;
           P64[Hp] = _sfPg1::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPg3_info" {
     sat_sfPg3_info:
         const sat_sfPg3_entry;
         const 1;
         const 18446744069414584336;
         const ufSSU_srtd;
 },
 section ""relreadonly" . ufSSV_srtd" {
     ufSSV_srtd:
         const SfPCb_srt+320;
         const 67;
         const 9223372036854775809;
         const 4;
 },
 Data.Semigroup.$fReadMin_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cfSSP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSST; else goto cfSSS;
       cfSST: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSSS: // global
           I64[Hp - 16] = sat_sfPg3_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_$creadList_info" {
     Data.Semigroup.$fReadMin_$creadList_info:
         const Data.Semigroup.$fReadMin_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ufSSV_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.188352394 UTC

[section ""data" . Data.Semigroup.$fReadMin_closure" {
     Data.Semigroup.$fReadMin_closure:
         const Data.Semigroup.$fReadMin_info;
         const 0;
 },
 sat_sfPg8_entry() //  [R1]
         { []
         }
     {offset
       cfSTp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSTq; else goto cfSTr;
       cfSTq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSTr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPg8_info" {
     sat_sfPg8_info:
         const sat_sfPg8_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+840;
 },
 sat_sfPg7_entry() //  [R1]
         { []
         }
     {offset
       cfSTw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSTx; else goto cfSTy;
       cfSTx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSTy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPg7_info" {
     sat_sfPg7_info:
         const sat_sfPg7_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+824;
 },
 sat_sfPg6_entry() //  [R1]
         { []
         }
     {offset
       cfSTD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSTE; else goto cfSTF;
       cfSTE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSTF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPg6_info" {
     sat_sfPg6_info:
         const sat_sfPg6_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+848;
 },
 sat_sfPg5_entry() //  [R1]
         { []
         }
     {offset
       cfSTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSTL; else goto cfSTM;
       cfSTL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSTM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fReadMin_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPg5_info" {
     sat_sfPg5_info:
         const sat_sfPg5_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+832;
 },
 Data.Semigroup.$fReadMin_entry() //  [R2]
         { []
         }
     {offset
       cfSTO: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfSTS; else goto cfSTR;
       cfSTS: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Semigroup.$fReadMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSTR: // global
           I64[Hp - 128] = sat_sfPg8_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sfPg7_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPg6_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPg5_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fReadMin_info" {
     Data.Semigroup.$fReadMin_info:
         const Data.Semigroup.$fReadMin_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SfPCb_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.19951262 UTC

[section ""cstring" . Data.Semigroup.$fShowMin2_bytes" {
     Data.Semigroup.$fShowMin2_bytes:
         I8[] [77,105,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.201089514 UTC

[section ""cstring" . Data.Semigroup.$fShowMin1_bytes" {
     Data.Semigroup.$fShowMin1_bytes:
         I8[] [103,101,116,77,105,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.208492144 UTC

[section ""data" . Data.Semigroup.$w$cshowsPrec4_closure" {
     Data.Semigroup.$w$cshowsPrec4_closure:
         const Data.Semigroup.$w$cshowsPrec4_info;
 },
 f_sfPgc_entry() //  [R1]
         { []
         }
     {offset
       cfSUB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfSUC; else goto cfSUD;
       cfSUC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSUD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sfPgc_info" {
     f_sfPgc_info:
         const f_sfPgc_entry;
         const 2;
         const 18;
 },
 sat_sfPgf_entry() //  [R1]
         { []
         }
     {offset
       cfSUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSUZ; else goto cfSV0;
       cfSUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgf_info" {
     sat_sfPgf_info:
         const sat_sfPgf_entry;
         const 1;
         const 16;
 },
 sat_sfPgg_entry() //  [R1]
         { []
         }
     {offset
       cfSV1: // global
           _sfPgg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSV2; else goto cfSV3;
       cfSV3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSV5; else goto cfSV4;
       cfSV5: // global
           HpAlloc = 24;
           goto cfSV2;
       cfSV2: // global
           R1 = _sfPgg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSV4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgg::P64;
           _sfPgc::P64 = P64[_sfPgg::P64 + 16];
           _sfPge::P64 = P64[_sfPgg::P64 + 24];
           I64[Hp - 16] = sat_sfPgf_info;
           P64[Hp] = _sfPge::P64;
           R2 = Hp - 16;
           R1 = _sfPgc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgg_info" {
     sat_sfPgg_info:
         const sat_sfPgg_entry;
         const 2;
         const 18;
 },
 sat_sfPgh_entry() //  [R1]
         { []
         }
     {offset
       cfSV6: // global
           _sfPgh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSV7; else goto cfSV8;
       cfSV8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSVa; else goto cfSV9;
       cfSVa: // global
           HpAlloc = 32;
           goto cfSV7;
       cfSV7: // global
           R1 = _sfPgh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSV9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgh::P64;
           _sfPgc::P64 = P64[_sfPgh::P64 + 16];
           _sfPge::P64 = P64[_sfPgh::P64 + 24];
           I64[Hp - 24] = sat_sfPgg_info;
           P64[Hp - 8] = _sfPgc::P64;
           P64[Hp] = _sfPge::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgh_info" {
     sat_sfPgh_info:
         const sat_sfPgh_entry;
         const 2;
         const 18;
 },
 sat_sfPgi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSVb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSVf; else goto cfSVe;
       cfSVf: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSVe: // global
           _sfPgc::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sfPgh_info;
           P64[Hp - 8] = _sfPgc::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgi_info" {
     sat_sfPgi_info:
         const sat_sfPgi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPgl_entry() //  [R1]
         { []
         }
     {offset
       cfSVD: // global
           _sfPgl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSVE; else goto cfSVF;
       cfSVF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSVH; else goto cfSVG;
       cfSVH: // global
           HpAlloc = 24;
           goto cfSVE;
       cfSVE: // global
           R1 = _sfPgl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSVG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgl::P64;
           _sfPgj::P64 = P64[_sfPgl::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfPgj::P64;
           R3 = Hp - 14;
           R2 = Data.Semigroup.$fReadFirst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgl_info" {
     sat_sfPgl_info:
         const sat_sfPgl_entry;
         const 1;
         const 16;
 },
 sat_sfPgm_entry() //  [R1]
         { []
         }
     {offset
       cfSVI: // global
           _sfPgm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSVJ; else goto cfSVK;
       cfSVK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfSVM; else goto cfSVL;
       cfSVM: // global
           HpAlloc = 24;
           goto cfSVJ;
       cfSVJ: // global
           R1 = _sfPgm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSVL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgm::P64;
           _sfPgc::P64 = P64[_sfPgm::P64 + 16];
           _sfPgj::P64 = P64[_sfPgm::P64 + 24];
           I64[Hp - 16] = sat_sfPgl_info;
           P64[Hp] = _sfPgj::P64;
           R2 = Hp - 16;
           R1 = _sfPgc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgm_info" {
     sat_sfPgm_info:
         const sat_sfPgm_entry;
         const 2;
         const 18;
 },
 sat_sfPgn_entry() //  [R1]
         { []
         }
     {offset
       cfSVN: // global
           _sfPgn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSVO; else goto cfSVP;
       cfSVP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSVR; else goto cfSVQ;
       cfSVR: // global
           HpAlloc = 32;
           goto cfSVO;
       cfSVO: // global
           R1 = _sfPgn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSVQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgn::P64;
           _sfPgc::P64 = P64[_sfPgn::P64 + 16];
           _sfPgj::P64 = P64[_sfPgn::P64 + 24];
           I64[Hp - 24] = sat_sfPgm_info;
           P64[Hp - 8] = _sfPgc::P64;
           P64[Hp] = _sfPgj::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgn_info" {
     sat_sfPgn_info:
         const sat_sfPgn_entry;
         const 2;
         const 18;
 },
 sat_sfPgo_entry() //  [R1]
         { []
         }
     {offset
       cfSVS: // global
           _sfPgo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSVT; else goto cfSVU;
       cfSVU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSVW; else goto cfSVV;
       cfSVW: // global
           HpAlloc = 32;
           goto cfSVT;
       cfSVT: // global
           R1 = _sfPgo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSVV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgo::P64;
           _sfPgc::P64 = P64[_sfPgo::P64 + 16];
           _sfPgj::P64 = P64[_sfPgo::P64 + 24];
           I64[Hp - 24] = sat_sfPgn_info;
           P64[Hp - 8] = _sfPgc::P64;
           P64[Hp] = _sfPgj::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgo_info" {
     sat_sfPgo_info:
         const sat_sfPgo_entry;
         const 2;
         const 18;
 },
 sat_sfPgp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSVY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfSW2; else goto cfSW1;
       cfSW2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSW1: // global
           _sfPgc::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sfPgo_info;
           P64[Hp - 32] = _sfPgc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgp_info" {
     sat_sfPgp_info:
         const sat_sfPgp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$w$cshowsPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSW6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfSWa; else goto cfSW9;
       cfSWa: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSW9: // global
           I64[Hp - 40] = f_sfPgc_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cfSUx::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cfSW4; else goto cfSW5;
       cfSW4: // global
           I64[Hp - 8] = sat_sfPgi_info;
           P64[Hp] = _cfSUx::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfSW5: // global
           I64[Hp - 8] = sat_sfPgp_info;
           P64[Hp] = _cfSUx::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cshowsPrec4_info" {
     Data.Semigroup.$w$cshowsPrec4_info:
         const Data.Semigroup.$w$cshowsPrec4_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.231729313 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshowsPrec_closure" {
     Data.Semigroup.$fShowMin_$cshowsPrec_closure:
         const Data.Semigroup.$fShowMin_$cshowsPrec_info;
 },
 Data.Semigroup.$fShowMin_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSXr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfSXs; else goto cfSXt;
       cfSXs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSXt: // global
           I64[Sp - 24] = block_cfSXo_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufSXx; else goto cfSXp;
       ufSXx: // global
           call _cfSXo(R1) args: 0, res: 0, upd: 0;
       cfSXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshowsPrec_info" {
     Data.Semigroup.$fShowMin_$cshowsPrec_info:
         const Data.Semigroup.$fShowMin_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfSXo() //  [R1]
         { []
         }
     {offset
       cfSXo: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Semigroup.$w$cshowsPrec4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfSXo_info" {
     block_cfSXo_info:
         const _cfSXo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.239180684 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshow_closure" {
     Data.Semigroup.$fShowMin_$cshow_closure:
         const Data.Semigroup.$fShowMin_$cshow_info;
         const 0;
 },
 sat_sfPgx_entry() //  [R1]
         { []
         }
     {offset
       cfSXU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfSXV; else goto cfSXW;
       cfSXV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSXW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Semigroup.$fFoldableOption7_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Semigroup.$fReadFirst3_closure;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgx_info" {
     sat_sfPgx_info:
         const sat_sfPgx_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 sat_sfPgy_entry() //  [R1]
         { []
         }
     {offset
       cfSXX: // global
           _sfPgy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfSXY; else goto cfSXZ;
       cfSXZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSY1; else goto cfSY0;
       cfSY1: // global
           HpAlloc = 32;
           goto cfSXY;
       cfSXY: // global
           R1 = _sfPgy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSY0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPgy::P64;
           _sfPgv::P64 = P64[_sfPgy::P64 + 16];
           _sfPgw::P64 = P64[_sfPgy::P64 + 24];
           I64[Hp - 24] = sat_sfPgx_info;
           P64[Hp - 8] = _sfPgv::P64;
           P64[Hp] = _sfPgw::P64;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgy_info" {
     sat_sfPgy_info:
         const sat_sfPgy_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+648;
 },
 Data.Semigroup.$fShowMin_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cfSY2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfSY6; else goto cfSY5;
       cfSY6: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSY5: // global
           I64[Hp - 24] = sat_sfPgy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Semigroup.$fShowMin2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshow_info" {
     Data.Semigroup.$fShowMin_$cshow_info:
         const Data.Semigroup.$fShowMin_$cshow_entry;
         const 0;
         const 576460756598390798;
         const 8589934607;
         const SfPCb_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.247464287 UTC

[section ""data" . Data.Semigroup.$fShowMin_$cshowList_closure" {
     Data.Semigroup.$fShowMin_$cshowList_closure:
         const Data.Semigroup.$fShowMin_$cshowList_info;
 },
 sat_sfPgD_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSYA: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$w$cshowsPrec4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgD_info" {
     sat_sfPgD_info:
         const sat_sfPgD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fShowMin_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfSYD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfSYH; else goto cfSYG;
       cfSYH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfSYG: // global
           I64[Hp - 8] = sat_sfPgD_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_$cshowList_info" {
     Data.Semigroup.$fShowMin_$cshowList_info:
         const Data.Semigroup.$fShowMin_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.253622811 UTC

[section ""data" . Data.Semigroup.$fShowMin_closure" {
     Data.Semigroup.$fShowMin_closure:
         const Data.Semigroup.$fShowMin_info;
         const 0;
 },
 sat_sfPgH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSYZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMin_$cshowList_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgH_info" {
     sat_sfPgH_info:
         const sat_sfPgH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPgG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfSZ7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fShowMin_$cshow_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgG_info" {
     sat_sfPgG_info:
         const sat_sfPgG_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+864;
 },
 sat_sfPgF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfSZf: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fShowMin_$cshowsPrec_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPgF_info" {
     sat_sfPgF_info:
         const sat_sfPgF_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Semigroup.$fShowMin_entry() //  [R2]
         { []
         }
     {offset
       cfSZj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfSZn; else goto cfSZm;
       cfSZn: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Semigroup.$fShowMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfSZm: // global
           I64[Hp - 72] = sat_sfPgH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sfPgG_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPgF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fShowMin_info" {
     Data.Semigroup.$fShowMin_info:
         const Data.Semigroup.$fShowMin_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.26288515 UTC

[section ""data" . Data.Semigroup.$fEqMin_closure" {
     Data.Semigroup.$fEqMin_closure:
         const Data.Semigroup.$fEqMin_info;
 },
 sat_sfPgK_entry() //  [R1]
         { []
         }
     {offset
       cfSZR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSZS; else goto cfSZT;
       cfSZS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfSZT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgK_info" {
     sat_sfPgK_info:
         const sat_sfPgK_entry;
         const 1;
         const 16;
 },
 sat_sfPgJ_entry() //  [R1]
         { []
         }
     {offset
       cfSZY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfSZZ; else goto cfT00;
       cfSZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT00: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgJ_info" {
     sat_sfPgJ_info:
         const sat_sfPgJ_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fEqMin_entry() //  [R2]
         { []
         }
     {offset
       cfT02: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfT06; else goto cfT05;
       cfT06: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fEqMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT05: // global
           I64[Hp - 64] = sat_sfPgK_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPgJ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEqMin_info" {
     Data.Semigroup.$fEqMin_info:
         const Data.Semigroup.$fEqMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.27055436 UTC

[section ""data" . Data.Semigroup.$fOrdMin_$cp1Ord_closure" {
     Data.Semigroup.$fOrdMin_$cp1Ord_closure:
         const Data.Semigroup.$fOrdMin_$cp1Ord_info;
 },
 sat_sfPgM_entry() //  [R1]
         { []
         }
     {offset
       cfT0z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT0A; else goto cfT0B;
       cfT0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT0B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgM_info" {
     sat_sfPgM_info:
         const sat_sfPgM_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMin_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cfT0C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfT0G; else goto cfT0F;
       cfT0G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMin_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT0F: // global
           I64[Hp - 16] = sat_sfPgM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.$fEqMin_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMin_$cp1Ord_info" {
     Data.Semigroup.$fOrdMin_$cp1Ord_info:
         const Data.Semigroup.$fOrdMin_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.279665937 UTC

[section ""data" . Data.Semigroup.$fOrdMin_closure" {
     Data.Semigroup.$fOrdMin_closure:
         const Data.Semigroup.$fOrdMin_info;
 },
 sat_sfPgV_entry() //  [R1]
         { []
         }
     {offset
       cfT0Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT10; else goto cfT11;
       cfT10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgV_info" {
     sat_sfPgV_info:
         const sat_sfPgV_entry;
         const 1;
         const 16;
 },
 sat_sfPgU_entry() //  [R1]
         { []
         }
     {offset
       cfT16: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT17; else goto cfT18;
       cfT17: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT18: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgU_info" {
     sat_sfPgU_info:
         const sat_sfPgU_entry;
         const 1;
         const 16;
 },
 sat_sfPgT_entry() //  [R1]
         { []
         }
     {offset
       cfT1d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1e; else goto cfT1f;
       cfT1e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgT_info" {
     sat_sfPgT_info:
         const sat_sfPgT_entry;
         const 1;
         const 16;
 },
 sat_sfPgS_entry() //  [R1]
         { []
         }
     {offset
       cfT1k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1l; else goto cfT1m;
       cfT1l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgS_info" {
     sat_sfPgS_info:
         const sat_sfPgS_entry;
         const 1;
         const 16;
 },
 sat_sfPgR_entry() //  [R1]
         { []
         }
     {offset
       cfT1r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1s; else goto cfT1t;
       cfT1s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgR_info" {
     sat_sfPgR_info:
         const sat_sfPgR_entry;
         const 1;
         const 16;
 },
 sat_sfPgQ_entry() //  [R1]
         { []
         }
     {offset
       cfT1y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1z; else goto cfT1A;
       cfT1z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgQ_info" {
     sat_sfPgQ_info:
         const sat_sfPgQ_entry;
         const 1;
         const 16;
 },
 sat_sfPgP_entry() //  [R1]
         { []
         }
     {offset
       cfT1F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1G; else goto cfT1H;
       cfT1G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgP_info" {
     sat_sfPgP_info:
         const sat_sfPgP_entry;
         const 1;
         const 16;
 },
 sat_sfPgO_entry() //  [R1]
         { []
         }
     {offset
       cfT1M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT1N; else goto cfT1O;
       cfT1N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT1O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fOrdMin_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgO_info" {
     sat_sfPgO_info:
         const sat_sfPgO_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fOrdMin_entry() //  [R2]
         { []
         }
     {offset
       cfT1Q: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cfT1U; else goto cfT1T;
       cfT1U: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Semigroup.$fOrdMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT1T: // global
           I64[Hp - 256] = sat_sfPgV_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sfPgU_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPgT_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sfPgS_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPgR_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sfPgQ_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPgP_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sfPgO_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fOrdMin_info" {
     Data.Semigroup.$fOrdMin_info:
         const Data.Semigroup.$fOrdMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.297702048 UTC

[section ""data" . Data.Semigroup.$fBoundedMin_closure" {
     Data.Semigroup.$fBoundedMin_closure:
         const Data.Semigroup.$fBoundedMin_info;
 },
 sat_sfPgY_entry() //  [R1]
         { []
         }
     {offset
       cfT33: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT34; else goto cfT35;
       cfT34: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT35: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgY_info" {
     sat_sfPgY_info:
         const sat_sfPgY_entry;
         const 1;
         const 16;
 },
 sat_sfPgX_entry() //  [R1]
         { []
         }
     {offset
       cfT3a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT3b; else goto cfT3c;
       cfT3b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT3c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPgX_info" {
     sat_sfPgX_info:
         const sat_sfPgX_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fBoundedMin_entry() //  [R2]
         { []
         }
     {offset
       cfT3e: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfT3i; else goto cfT3h;
       cfT3i: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Semigroup.$fBoundedMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT3h: // global
           I64[Hp - 64] = sat_sfPgY_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sfPgX_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fBoundedMin_info" {
     Data.Semigroup.$fBoundedMin_info:
         const Data.Semigroup.$fBoundedMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.306687705 UTC

[section ""data" . Data.Semigroup.$fMonoidMin_$cmconcat_closure" {
     Data.Semigroup.$fMonoidMin_$cmconcat_closure:
         const Data.Semigroup.$fMonoidMin_$cmconcat_info;
 },
 z_sfPh2_entry() //  [R1]
         { []
         }
     {offset
       cfT3L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT3M; else goto cfT3N;
       cfT3M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT3N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sfPh2_info" {
     z_sfPh2_info:
         const z_sfPh2_entry;
         const 1;
         const 16;
 },
 go_sfPh3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT40: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfT41; else goto cfT42;
       cfT41: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT42: // global
           I64[Sp - 32] = block_cfT3T_info;
           _sfPh3::P64 = R1;
           _sfPgZ::P64 = P64[R1 + 7];
           _sfPh2::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfPgZ::P64;
           P64[Sp - 16] = _sfPh2::P64;
           P64[Sp - 8] = _sfPh3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufT4c; else goto cfT3U;
       ufT4c: // global
           call _cfT3T(R1) args: 0, res: 0, upd: 0;
       cfT3U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sfPh3_info" {
     go_sfPh3_info:
         const go_sfPh3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfT3T() //  [R1]
         { []
         }
     {offset
       cfT3T: // global
           if (R1 & 7 == 1) goto cfT3X; else goto cfT3Y;
       cfT3X: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfT3Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfT4a; else goto cfT49;
       cfT4a: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfT49: // global
           _sfPh6::P64 = P64[R1 + 6];
           _sfPh7::P64 = P64[R1 + 14];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sfPh7::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _sfPh6::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Classes.min_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfT3T_info" {
     block_cfT3T_info:
         const _cfT3T;
         const 3;
         const 30;
 },
 Data.Semigroup.$fMonoidMin_$cmconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfT4d: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfT4h; else goto cfT4g;
       cfT4h: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMin_$cmconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT4g: // global
           I64[Hp - 40] = z_sfPh2_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = go_sfPh3_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = R4;
           R1 = Hp - 15;
           call go_sfPh3_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMin_$cmconcat_info" {
     Data.Semigroup.$fMonoidMin_$cmconcat_info:
         const Data.Semigroup.$fMonoidMin_$cmconcat_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.318574118 UTC

[section ""data" . Data.Semigroup.$fMonoidMin_closure" {
     Data.Semigroup.$fMonoidMin_closure:
         const Data.Semigroup.$fMonoidMin_info;
         const 0;
 },
 sat_sfPhe_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT4S: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fMonoidMin_$cmconcat_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhe_info" {
     sat_sfPhe_info:
         const sat_sfPhe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPhd_entry() //  [R1]
         { []
         }
     {offset
       cfT4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT50; else goto cfT51;
       cfT50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPhd_info" {
     sat_sfPhd_info:
         const sat_sfPhd_entry;
         const 1;
         const 16;
 },
 sat_sfPhc_entry() //  [R1]
         { []
         }
     {offset
       cfT56: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT57; else goto cfT58;
       cfT57: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT58: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPhc_info" {
     sat_sfPhc_info:
         const sat_sfPhc_entry;
         const 1;
         const 16;
 },
 sat_sfPhb_entry() //  [R1]
         { []
         }
     {offset
       cfT5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT5e; else goto cfT5f;
       cfT5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfT5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fSemigroupMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPhb_info" {
     sat_sfPhb_info:
         const sat_sfPhb_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+880;
 },
 Data.Semigroup.$fMonoidMin_entry() //  [R2, R3]
         { []
         }
     {offset
       cfT5h: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cfT5l; else goto cfT5k;
       cfT5l: // global
           HpAlloc = 136;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fMonoidMin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT5k: // global
           I64[Hp - 128] = sat_sfPhe_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sfPhd_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPhc_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sfPhb_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 127;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonoidMin_info" {
     Data.Semigroup.$fMonoidMin_info:
         const Data.Semigroup.$fMonoidMin_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfPCb_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.328830719 UTC

[section ""data" . Data.Semigroup.getMin_closure" {
     Data.Semigroup.getMin_closure:
         const Data.Semigroup.getMin_info;
 },
 Data.Semigroup.getMin_entry() //  [R2]
         { []
         }
     {offset
       cfT5W: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Min2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getMin_info" {
     Data.Semigroup.getMin_info:
         const Data.Semigroup.getMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.332366454 UTC

[section ""data" . Data.Semigroup.$fMonadFixMin_$cmfix_closure" {
     Data.Semigroup.$fMonadFixMin_$cmfix_closure:
         const Data.Semigroup.$fMonadFixMin_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixMin_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfT68: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfT6c; else goto cfT6b;
       cfT6c: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixMin_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT6b: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfT67::P64 = Hp - 24;
           P64[Hp] = _cfT67::P64;
           R1 = _cfT67::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixMin_$cmfix_info" {
     Data.Semigroup.$fMonadFixMin_$cmfix_info:
         const Data.Semigroup.$fMonadFixMin_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.335744999 UTC

[section ""data" . Data.Semigroup.$fMonadFixMin_closure" {
     Data.Semigroup.$fMonadFixMin_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadMin_closure+1;
         const Data.Semigroup.$fMonadFixMin_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.34151416 UTC

[section ""data" . Data.Semigroup.$fEnumMin_closure" {
     Data.Semigroup.$fEnumMin_closure:
         const Data.Semigroup.$fEnumMin_info;
 },
 sat_sfPhB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfT6s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfT6t; else goto cfT6u;
       cfT6t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT6u: // global
           _sfPhy::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfPhy::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhB_info" {
     sat_sfPhB_info:
         const sat_sfPhB_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPhx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfT6A: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfT6B; else goto cfT6C;
       cfT6B: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT6C: // global
           _sfPhv::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPhv::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhx_info" {
     sat_sfPhx_info:
         const sat_sfPhx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPhu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfT6I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfT6J; else goto cfT6K;
       cfT6J: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT6K: // global
           _sfPhs::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPhs::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhu_info" {
     sat_sfPhu_info:
         const sat_sfPhu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPhr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT6Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT6R; else goto cfT6S;
       cfT6R: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT6S: // global
           _sfPhq::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhq::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhr_info" {
     sat_sfPhr_info:
         const sat_sfPhr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT6Z; else goto cfT70;
       cfT6Z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT70: // global
           _sfPho::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPho::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhp_info" {
     sat_sfPhp_info:
         const sat_sfPhp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT76: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT77; else goto cfT78;
       cfT77: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT78: // global
           _sfPhm::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhm::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhn_info" {
     sat_sfPhn_info:
         const sat_sfPhn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhl_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT7e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT7f; else goto cfT7g;
       cfT7f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT7g: // global
           _sfPhk::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhk::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhl_info" {
     sat_sfPhl_info:
         const sat_sfPhl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhj_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT7m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT7n; else goto cfT7o;
       cfT7n: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT7o: // global
           _sfPhi::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhi::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhj_info" {
     sat_sfPhj_info:
         const sat_sfPhj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumMin_entry() //  [R2]
         { []
         }
     {offset
       cfT7q: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfT7u; else goto cfT7t;
       cfT7u: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT7t: // global
           I64[Hp - 192] = sat_sfPhB_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPhx_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPhu_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPhr_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfPhp_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPhn_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfPhl_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPhj_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumMin_info" {
     Data.Semigroup.$fEnumMin_info:
         const Data.Semigroup.$fEnumMin_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.360115453 UTC

[section ""data" . Data.Semigroup.getMax_closure" {
     Data.Semigroup.getMax_closure:
         const Data.Semigroup.getMax_info;
 },
 Data.Semigroup.getMax_entry() //  [R2]
         { []
         }
     {offset
       cfT8z: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Max2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getMax_info" {
     Data.Semigroup.getMax_info:
         const Data.Semigroup.getMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.363719435 UTC

[section ""data" . Data.Semigroup.$fMonadFixMax_$cmfix_closure" {
     Data.Semigroup.$fMonadFixMax_$cmfix_closure:
         const Data.Semigroup.$fMonadFixMax_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixMax_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfT8L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfT8P; else goto cfT8O;
       cfT8P: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixMax_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT8O: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfT8K::P64 = Hp - 24;
           P64[Hp] = _cfT8K::P64;
           R1 = _cfT8K::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixMax_$cmfix_info" {
     Data.Semigroup.$fMonadFixMax_$cmfix_info:
         const Data.Semigroup.$fMonadFixMax_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.367501821 UTC

[section ""data" . Data.Semigroup.$fMonadFixMax_closure" {
     Data.Semigroup.$fMonadFixMax_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadMax_closure+1;
         const Data.Semigroup.$fMonadFixMax_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.373047387 UTC

[section ""data" . Data.Semigroup.$fEnumMax_closure" {
     Data.Semigroup.$fEnumMax_closure:
         const Data.Semigroup.$fEnumMax_info;
 },
 sat_sfPhY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfT95: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfT96; else goto cfT97;
       cfT96: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT97: // global
           _sfPhV::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfPhV::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhY_info" {
     sat_sfPhY_info:
         const sat_sfPhY_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPhU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfT9d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfT9e; else goto cfT9f;
       cfT9e: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT9f: // global
           _sfPhS::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPhS::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhU_info" {
     sat_sfPhU_info:
         const sat_sfPhU_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPhR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfT9l: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfT9m; else goto cfT9n;
       cfT9m: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfT9n: // global
           _sfPhP::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPhP::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhR_info" {
     sat_sfPhR_info:
         const sat_sfPhR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPhO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT9t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT9u; else goto cfT9v;
       cfT9u: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT9v: // global
           _sfPhN::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhN::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhO_info" {
     sat_sfPhO_info:
         const sat_sfPhO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT9C; else goto cfT9D;
       cfT9C: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT9D: // global
           _sfPhL::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhL::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhM_info" {
     sat_sfPhM_info:
         const sat_sfPhM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhK_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT9J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT9K; else goto cfT9L;
       cfT9K: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT9L: // global
           _sfPhJ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhJ::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhK_info" {
     sat_sfPhK_info:
         const sat_sfPhK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT9R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfT9S; else goto cfT9T;
       cfT9S: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfT9T: // global
           _sfPhH::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhH::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhI_info" {
     sat_sfPhI_info:
         const sat_sfPhI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPhG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfT9Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTa0; else goto cfTa1;
       cfTa0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTa1: // global
           _sfPhF::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPhF::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPhG_info" {
     sat_sfPhG_info:
         const sat_sfPhG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumMax_entry() //  [R2]
         { []
         }
     {offset
       cfTa3: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfTa7; else goto cfTa6;
       cfTa7: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTa6: // global
           I64[Hp - 192] = sat_sfPhY_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPhU_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPhR_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPhO_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfPhM_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPhK_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfPhI_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPhG_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumMax_info" {
     Data.Semigroup.$fEnumMax_info:
         const Data.Semigroup.$fEnumMax_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.392032034 UTC

[section ""data" . Data.Semigroup.getFirst_closure" {
     Data.Semigroup.getFirst_closure:
         const Data.Semigroup.getFirst_info;
 },
 Data.Semigroup.getFirst_entry() //  [R2]
         { []
         }
     {offset
       cfTbc: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1First2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getFirst_info" {
     Data.Semigroup.getFirst_info:
         const Data.Semigroup.getFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.395908845 UTC

[section ""data" . Data.Semigroup.$fMonadFixFirst_$cmfix_closure" {
     Data.Semigroup.$fMonadFixFirst_$cmfix_closure:
         const Data.Semigroup.$fMonadFixFirst_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixFirst_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfTbo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfTbs; else goto cfTbr;
       cfTbs: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixFirst_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTbr: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfTbn::P64 = Hp - 24;
           P64[Hp] = _cfTbn::P64;
           R1 = _cfTbn::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixFirst_$cmfix_info" {
     Data.Semigroup.$fMonadFixFirst_$cmfix_info:
         const Data.Semigroup.$fMonadFixFirst_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.399452808 UTC

[section ""data" . Data.Semigroup.$fMonadFixFirst_closure" {
     Data.Semigroup.$fMonadFixFirst_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadFirst_closure+1;
         const Data.Semigroup.$fMonadFixFirst_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.404931962 UTC

[section ""data" . Data.Semigroup.$fEnumFirst_closure" {
     Data.Semigroup.$fEnumFirst_closure:
         const Data.Semigroup.$fEnumFirst_info;
 },
 sat_sfPil_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTbI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTbJ; else goto cfTbK;
       cfTbJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTbK: // global
           _sfPii::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfPii::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPil_info" {
     sat_sfPil_info:
         const sat_sfPil_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPih_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTbQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTbR; else goto cfTbS;
       cfTbR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTbS: // global
           _sfPif::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPif::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPih_info" {
     sat_sfPih_info:
         const sat_sfPih_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPie_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTbY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTbZ; else goto cfTc0;
       cfTbZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTc0: // global
           _sfPic::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPic::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPie_info" {
     sat_sfPie_info:
         const sat_sfPie_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPib_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTc6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTc7; else goto cfTc8;
       cfTc7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTc8: // global
           _sfPia::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPia::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPib_info" {
     sat_sfPib_info:
         const sat_sfPib_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPi9_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTce: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTcf; else goto cfTcg;
       cfTcf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTcg: // global
           _sfPi8::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPi8::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPi9_info" {
     sat_sfPi9_info:
         const sat_sfPi9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPi7_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTcm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTcn; else goto cfTco;
       cfTcn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTco: // global
           _sfPi6::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPi6::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPi7_info" {
     sat_sfPi7_info:
         const sat_sfPi7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPi5_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTcu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTcv; else goto cfTcw;
       cfTcv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTcw: // global
           _sfPi4::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPi4::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPi5_info" {
     sat_sfPi5_info:
         const sat_sfPi5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPi3_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTcD; else goto cfTcE;
       cfTcD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTcE: // global
           _sfPi2::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPi2::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPi3_info" {
     sat_sfPi3_info:
         const sat_sfPi3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumFirst_entry() //  [R2]
         { []
         }
     {offset
       cfTcG: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfTcK; else goto cfTcJ;
       cfTcK: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTcJ: // global
           I64[Hp - 192] = sat_sfPil_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPih_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPie_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPib_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfPi9_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPi7_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfPi5_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPi3_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumFirst_info" {
     Data.Semigroup.$fEnumFirst_info:
         const Data.Semigroup.$fEnumFirst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.423408392 UTC

[section ""data" . Data.Semigroup.getLast_closure" {
     Data.Semigroup.getLast_closure:
         const Data.Semigroup.getLast_info;
 },
 Data.Semigroup.getLast_entry() //  [R2]
         { []
         }
     {offset
       cfTdP: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Last2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getLast_info" {
     Data.Semigroup.getLast_info:
         const Data.Semigroup.getLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.427126924 UTC

[section ""data" . Data.Semigroup.$fMonadFixLast_$cmfix_closure" {
     Data.Semigroup.$fMonadFixLast_$cmfix_closure:
         const Data.Semigroup.$fMonadFixLast_$cmfix_info;
 },
 Data.Semigroup.$fMonadFixLast_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfTe1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfTe5; else goto cfTe4;
       cfTe5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixLast_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTe4: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cfTe0::P64 = Hp - 24;
           P64[Hp] = _cfTe0::P64;
           R1 = _cfTe0::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixLast_$cmfix_info" {
     Data.Semigroup.$fMonadFixLast_$cmfix_info:
         const Data.Semigroup.$fMonadFixLast_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.431601283 UTC

[section ""data" . Data.Semigroup.$fMonadFixLast_closure" {
     Data.Semigroup.$fMonadFixLast_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadLast_closure+1;
         const Data.Semigroup.$fMonadFixLast_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.437633313 UTC

[section ""data" . Data.Semigroup.$fEnumLast_closure" {
     Data.Semigroup.$fEnumLast_closure:
         const Data.Semigroup.$fEnumLast_info;
 },
 sat_sfPiI_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTel: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTem; else goto cfTen;
       cfTem: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTen: // global
           _sfPiF::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfPiF::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiI_info" {
     sat_sfPiI_info:
         const sat_sfPiI_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPiE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTet: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTeu; else goto cfTev;
       cfTeu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTev: // global
           _sfPiC::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPiC::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiE_info" {
     sat_sfPiE_info:
         const sat_sfPiE_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPiB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTeB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTeC; else goto cfTeD;
       cfTeC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTeD: // global
           _sfPiz::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPiz::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiB_info" {
     sat_sfPiB_info:
         const sat_sfPiB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPiy_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTeJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTeK; else goto cfTeL;
       cfTeK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTeL: // global
           _sfPix::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPix::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiy_info" {
     sat_sfPiy_info:
         const sat_sfPiy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiw_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTeR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTeS; else goto cfTeT;
       cfTeS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTeT: // global
           _sfPiv::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiv::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiw_info" {
     sat_sfPiw_info:
         const sat_sfPiw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiu_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTeZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTf0; else goto cfTf1;
       cfTf0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTf1: // global
           _sfPit::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPit::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiu_info" {
     sat_sfPiu_info:
         const sat_sfPiu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPis_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTf7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTf8; else goto cfTf9;
       cfTf8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTf9: // global
           _sfPir::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPir::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPis_info" {
     sat_sfPis_info:
         const sat_sfPis_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiq_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTfg; else goto cfTfh;
       cfTfg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTfh: // global
           _sfPip::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPip::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiq_info" {
     sat_sfPiq_info:
         const sat_sfPiq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumLast_entry() //  [R2]
         { []
         }
     {offset
       cfTfj: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfTfn; else goto cfTfm;
       cfTfn: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTfm: // global
           I64[Hp - 192] = sat_sfPiI_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPiE_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPiB_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPiy_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfPiw_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPiu_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfPis_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPiq_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumLast_info" {
     Data.Semigroup.$fEnumLast_info:
         const Data.Semigroup.$fEnumLast_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.455502354 UTC

[section ""data" . Data.Semigroup.unwrapMonoid_closure" {
     Data.Semigroup.unwrapMonoid_closure:
         const Data.Semigroup.unwrapMonoid_info;
 },
 Data.Semigroup.unwrapMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfTgs: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1WrappedMonoid2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.unwrapMonoid_info" {
     Data.Semigroup.unwrapMonoid_info:
         const Data.Semigroup.unwrapMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.46248429 UTC

[section ""data" . Data.Semigroup.$fEnumWrappedMonoid_closure" {
     Data.Semigroup.$fEnumWrappedMonoid_closure:
         const Data.Semigroup.$fEnumWrappedMonoid_info;
 },
 sat_sfPj3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTgI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTgJ; else goto cfTgK;
       cfTgJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTgK: // global
           _sfPj0::P64 = R2;
           R2 = P64[R1 + 5];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sfPj0::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPj3_info" {
     sat_sfPj3_info:
         const sat_sfPj3_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPiZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTgQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTgR; else goto cfTgS;
       cfTgR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTgS: // global
           _sfPiX::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPiX::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromTo_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiZ_info" {
     sat_sfPiZ_info:
         const sat_sfPiZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPiW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTgY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTgZ; else goto cfTh0;
       cfTgZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTh0: // global
           _sfPiU::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPiU::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Enum.enumFromThen_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiW_info" {
     sat_sfPiW_info:
         const sat_sfPiW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPiT_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTh6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTh7; else goto cfTh8;
       cfTh7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTh8: // global
           _sfPiS::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiS::P64;
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiT_info" {
     sat_sfPiT_info:
         const sat_sfPiT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiR_entry() //  [R1, R2]
         { []
         }
     {offset
       cfThe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfThf; else goto cfThg;
       cfThf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfThg: // global
           _sfPiQ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiQ::P64;
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiR_info" {
     sat_sfPiR_info:
         const sat_sfPiR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfThm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfThn; else goto cfTho;
       cfThn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTho: // global
           _sfPiO::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiO::P64;
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiP_info" {
     sat_sfPiP_info:
         const sat_sfPiP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiN_entry() //  [R1, R2]
         { []
         }
     {offset
       cfThu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfThv; else goto cfThw;
       cfThv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfThw: // global
           _sfPiM::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiM::P64;
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiN_info" {
     sat_sfPiN_info:
         const sat_sfPiN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sfPiL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfThC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfThD; else goto cfThE;
       cfThD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfThE: // global
           _sfPiK::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sfPiK::P64;
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPiL_info" {
     sat_sfPiL_info:
         const sat_sfPiL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Semigroup.$fEnumWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfThG: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cfThK; else goto cfThJ;
       cfThK: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Semigroup.$fEnumWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfThJ: // global
           I64[Hp - 192] = sat_sfPj3_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPiZ_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPiW_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPiT_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sfPiR_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sfPiP_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sfPiN_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sfPiL_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fEnumWrappedMonoid_info" {
     Data.Semigroup.$fEnumWrappedMonoid_info:
         const Data.Semigroup.$fEnumWrappedMonoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.481520259 UTC

[section ""data" . Data.Semigroup.getOption_closure" {
     Data.Semigroup.getOption_closure:
         const Data.Semigroup.getOption_info;
 },
 Data.Semigroup.getOption_entry() //  [R2]
         { []
         }
     {offset
       cfTiP: // global
           R2 = R2;
           call Data.Semigroup.$fGeneric1Option2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.getOption_info" {
     Data.Semigroup.getOption_info:
         const Data.Semigroup.getOption_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.486332361 UTC

[section ""data" . Data.Semigroup.$fMonadFixOption_$cmfix_closure" {
     Data.Semigroup.$fMonadFixOption_$cmfix_closure:
         const Data.Semigroup.$fMonadFixOption_$cmfix_info;
         const 0;
 },
 sat_sfPj8_entry() //  [R1]
         { []
         }
     {offset
       cfTjf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTjg; else goto cfTjh;
       cfTjg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTjh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfTj8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTjo; else goto cfTj9;
       ufTjo: // global
           call _cfTj8(R1) args: 0, res: 0, upd: 0;
       cfTj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPj8_info" {
     sat_sfPj8_info:
         const sat_sfPj8_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+896;
 },
 _cfTj8() //  [R1]
         { []
         }
     {offset
       cfTj8: // global
           if (R1 & 7 == 1) goto cfTjc; else goto cfTjd;
       cfTjc: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cfTjd: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfTj8_info" {
     block_cfTj8_info:
         const _cfTj8;
         const 0;
         const 4294967326;
         const SfPCb_srt+896;
 },
 a1_sfPj5_entry() //  [R1]
         { []
         }
     {offset
       cfTjp: // global
           _sfPj5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTjq; else goto cfTjr;
       cfTjr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTjt; else goto cfTjs;
       cfTjt: // global
           HpAlloc = 24;
           goto cfTjq;
       cfTjq: // global
           R1 = _sfPj5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTjs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPj5::P64;
           _sfPj4::P64 = P64[_sfPj5::P64 + 16];
           I64[Hp - 16] = sat_sfPj8_info;
           P64[Hp] = _sfPj5::P64;
           R2 = Hp - 16;
           R1 = _sfPj4::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sfPj5_info" {
     a1_sfPj5_info:
         const a1_sfPj5_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+896;
 },
 Data.Semigroup.$fMonadFixOption_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cfTju: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTjy; else goto cfTjx;
       cfTjy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Semigroup.$fMonadFixOption_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTjx: // global
           I64[Hp - 16] = a1_sfPj5_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fMonadFixOption_$cmfix_info" {
     Data.Semigroup.$fMonadFixOption_$cmfix_info:
         const Data.Semigroup.$fMonadFixOption_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.495425334 UTC

[section ""data" . Data.Semigroup.$fMonadFixOption_closure" {
     Data.Semigroup.$fMonadFixOption_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.$fMonadOption_closure+1;
         const Data.Semigroup.$fMonadFixOption_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.498314321 UTC

[section ""data" . Data.Semigroup.cycle1_closure" {
     Data.Semigroup.cycle1_closure:
         const Data.Semigroup.cycle1_info;
 },
 xs'_sfPjb_entry() //  [R1]
         { []
         }
     {offset
       cfTk7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfTk8; else goto cfTk9;
       cfTk8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTk9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = R1;
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xs'_sfPjb_info" {
     xs'_sfPjb_info:
         const xs'_sfPjb_entry;
         const 2;
         const 18;
 },
 Data.Semigroup.cycle1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTka: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfTke; else goto cfTkd;
       cfTke: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.cycle1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTkd: // global
           I64[Hp - 24] = xs'_sfPjb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.cycle1_info" {
     Data.Semigroup.cycle1_info:
         const Data.Semigroup.cycle1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.503935398 UTC

[section ""data" . Data.Semigroup.diff1_closure" {
     Data.Semigroup.diff1_closure:
         const Data.Semigroup.diff1_info;
 },
 Data.Semigroup.diff1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTkv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTkw; else goto cfTkx;
       cfTkw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.diff1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTkx: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.diff1_info" {
     Data.Semigroup.diff1_info:
         const Data.Semigroup.diff1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.507931956 UTC

[section ""data" . Data.Semigroup.diff_closure" {
     Data.Semigroup.diff_closure:
         const Data.Semigroup.diff_info;
 },
 Data.Semigroup.diff_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTkI: // global
           R3 = R3;
           R2 = R2;
           call Data.Semigroup.diff1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.diff_info" {
     Data.Semigroup.diff_info:
         const Data.Semigroup.diff_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.514437205 UTC

[section ""data" . Data.Semigroup.mtimesDefault_closure" {
     Data.Semigroup.mtimesDefault_closure:
         const Data.Semigroup.mtimesDefault_info;
         const 0;
 },
 sat_sfPjm_entry() //  [R1]
         { []
         }
     {offset
       cfTl3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTl4; else goto cfTl5;
       cfTl4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTl5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfTl1_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPjm_info" {
     sat_sfPjm_info:
         const sat_sfPjm_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+912;
 },
 _cfTl1() //  [R1]
         { []
         }
     {offset
       cfTl1: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Semigroup.$fSemigroupOption2_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfTl1_info" {
     block_cfTl1_info:
         const _cfTl1;
         const 0;
         const 4294967326;
         const SfPCb_srt+912;
 },
 section ""relreadonly" . ufTlB_srtd" {
     ufTlB_srtd:
         const SfPCb_srt+48;
         const 110;
         const 1;
         const 52776558133248;
 },
 Data.Semigroup.mtimesDefault_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTl9: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfTlf; else goto cfTlg;
       cfTlf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.mtimesDefault_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTlg: // global
           I64[Sp - 40] = block_cfTkT_info;
           _sfPje::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _sfPje::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.mtimesDefault_info" {
     Data.Semigroup.mtimesDefault_info:
         const Data.Semigroup.mtimesDefault_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const ufTlB_srtd;
 },
 section ""relreadonly" . ufTlC_srtd" {
     ufTlC_srtd:
         const SfPCb_srt+48;
         const 109;
         const 1;
         const 17592186044416;
 },
 _cfTkT() //  [R1]
         { []
         }
     {offset
       cfTkT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTlj; else goto cfTli;
       cfTlj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTli: // global
           I64[Hp - 16] = sat_sfPjm_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cfTla_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTkT_info" {
     block_cfTkT_info:
         const _cfTkT;
         const 4;
         const 18446744069414584350;
         const ufTlC_srtd;
 },
 _cfTla() //  [R1]
         { []
         }
     {offset
       cfTla: // global
           I64[Sp] = block_cfTle_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTla_info" {
     block_cfTla_info:
         const _cfTla;
         const 5;
         const 4294967326;
         const SfPCb_srt+928;
 },
 _cfTle() //  [R1]
         { []
         }
     {offset
       cfTle: // global
           _cfTkX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfTlo_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _cfTkX::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTle_info" {
     block_cfTle_info:
         const _cfTle;
         const 5;
         const 4294967326;
         const SfPCb_srt+928;
 },
 _cfTlo() //  [R1]
         { []
         }
     {offset
       cfTlo: // global
           _sfPjf::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cfTlv; else goto cfTlz;
       cfTlv: // global
           R3 = P64[Sp + 8];
           R2 = _sfPjf::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           Sp = Sp + 16;
           call Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_entry(R3,
                                                                       R2) args: 32, res: 0, upd: 8;
       cfTlz: // global
           R2 = _sfPjf::P64;
           Sp = Sp + 40;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTlo_info" {
     block_cfTlo_info:
         const _cfTlo;
         const 4;
         const 4294967326;
         const SfPCb_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.529215817 UTC

[section ""data" . Data.Semigroup.option_closure" {
     Data.Semigroup.option_closure:
         const Data.Semigroup.option_info;
 },
 Data.Semigroup.option_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfTmm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Maybe.maybe_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.option_info" {
     Data.Semigroup.option_info:
         const Data.Semigroup.option_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.53244167 UTC

[section ""data" . $cMin1_rfC6i_closure" {
     $cMin1_rfC6i_closure:
         const :_con_info;
         const Data.Semigroup.$fReadMin2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.536814224 UTC

[section ""data" . go61_rfC6j_closure" {
     go61_rfC6j_closure:
         const go61_rfC6j_info;
         const 0;
 },
 go61_rfC6j_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTmF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTmG; else goto ufTnj;
       cfTmG: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rfC6j_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTnj: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTmv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rfC6j_info" {
     go61_rfC6j_info:
         const go61_rfC6j_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTmv() //  []
         { []
         }
     {offset
       cfTmv: // global
           _sfPjo::P64 = P64[Sp];
           I64[Sp] = block_cfTmy_info;
           R1 = _sfPjo::P64;
           if (R1 & 7 != 0) goto ufTnn; else goto cfTmz;
       ufTnn: // global
           call _cfTmy(R1) args: 0, res: 0, upd: 0;
       cfTmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTmy() //  [R1]
         { []
         }
     {offset
       cfTmy: // global
           if (R1 & 7 == 1) goto ufTnk; else goto cfTmD;
       ufTnk: // global
           Sp = Sp + 16;
           call _cfTmV() args: 0, res: 0, upd: 0;
       cfTmD: // global
           I64[Sp - 8] = block_cfTmN_info;
           _sfPjr::P64 = P64[R1 + 6];
           _sfPjs::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPjs::P64;
           P64[Sp + 8] = _sfPjr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTno; else goto cfTmP;
       ufTno: // global
           call _cfTmN(R1) args: 0, res: 0, upd: 0;
       cfTmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTmy_info" {
     block_cfTmy_info:
         const _cfTmy;
         const 1;
         const 12884901918;
         const SfPCb_srt+936;
 },
 _cfTmN() //  [R1]
         { []
         }
     {offset
       cfTmN: // global
           if (R1 & 7 == 1) goto ufTnl; else goto cfTn0;
       ufTnl: // global
           Sp = Sp + 24;
           call _cfTmV() args: 0, res: 0, upd: 0;
       cfTn0: // global
           I64[Sp - 8] = block_cfTmY_info;
           _sfPju::P64 = P64[R1 + 6];
           _sfPjv::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPjv::P64;
           P64[Sp + 16] = _sfPju::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTnr; else goto cfTn1;
       ufTnr: // global
           call _cfTmY(R1) args: 0, res: 0, upd: 0;
       cfTn1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTmN_info" {
     block_cfTmN_info:
         const _cfTmN;
         const 2;
         const 12884901918;
         const SfPCb_srt+936;
 },
 _cfTmV() //  []
         { []
         }
     {offset
       cfTmV: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTmY() //  [R1]
         { []
         }
     {offset
       cfTmY: // global
           I64[Sp] = block_cfTn5_info;
           R3 = Data.Semigroup.$fDataMin7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTmY_info" {
     block_cfTmY_info:
         const _cfTmY;
         const 3;
         const 12884901918;
         const SfPCb_srt+936;
 },
 _cfTn5() //  [R1]
         { []
         }
     {offset
       cfTn5: // global
           if (R1 & 7 == 1) goto cfTnc; else goto cfTng;
       cfTnc: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTmv() args: 0, res: 0, upd: 0;
       cfTng: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTn5_info" {
     block_cfTn5_info:
         const _cfTn5;
         const 3;
         const 12884901918;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.550686886 UTC

[section ""data" . $cMin2_rfC6k_closure" {
     $cMin2_rfC6k_closure:
         const Data.Data.AlgConstr_con_info;
         const $cMin3_rfC6l_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMin6_closure" {
     Data.Semigroup.$fDataMin6_closure:
         const :_con_info;
         const Data.Semigroup.$cMin_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMin5_closure" {
     Data.Semigroup.$fDataMin5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataMin6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tMin_closure" {
     Data.Semigroup.$tMin_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataMin7_closure;
         const Data.Semigroup.$fDataMin5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cMin_closure" {
     Data.Semigroup.$cMin_closure:
         const Data.Data.Constr_con_info;
         const $cMin2_rfC6k_closure+1;
         const Data.Semigroup.$fDataMin7_closure;
         const $cMin1_rfC6i_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tMin_closure+1;
         const 0;
 },
 section ""data" . $cMin3_rfC6l_closure" {
     $cMin3_rfC6l_closure:
         const $cMin3_rfC6l_info;
         const 0;
         const 0;
         const 0;
 },
 $cMin3_rfC6l_entry() //  [R1]
         { []
         }
     {offset
       cfToc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTod; else goto cfToe;
       cfTod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfToe: // global
           (_cfTo9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTo9::I64 == 0) goto cfTob; else goto cfToa;
       cfTob: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfToa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTo9::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataMin6_closure+2;
           Sp = Sp - 16;
           call go61_rfC6j_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cMin3_rfC6l_info" {
     $cMin3_rfC6l_info:
         const $cMin3_rfC6l_entry;
         const 0;
         const 30064771093;
         const SfPCb_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.558158362 UTC

[section ""data" . $cMax1_rfC6m_closure" {
     $cMax1_rfC6m_closure:
         const :_con_info;
         const Data.Semigroup.$fReadMax2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.562336447 UTC

[section ""data" . go1_rfC6n_closure" {
     go1_rfC6n_closure:
         const go1_rfC6n_info;
         const 0;
 },
 go1_rfC6n_entry() //  [R2, R3]
         { []
         }
     {offset
       cfToE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfToF; else goto ufTpi;
       cfToF: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rfC6n_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTpi: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTou() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rfC6n_info" {
     go1_rfC6n_info:
         const go1_rfC6n_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTou() //  []
         { []
         }
     {offset
       cfTou: // global
           _sfPjD::P64 = P64[Sp];
           I64[Sp] = block_cfTox_info;
           R1 = _sfPjD::P64;
           if (R1 & 7 != 0) goto ufTpm; else goto cfToy;
       ufTpm: // global
           call _cfTox(R1) args: 0, res: 0, upd: 0;
       cfToy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTox() //  [R1]
         { []
         }
     {offset
       cfTox: // global
           if (R1 & 7 == 1) goto ufTpj; else goto cfToC;
       ufTpj: // global
           Sp = Sp + 16;
           call _cfToU() args: 0, res: 0, upd: 0;
       cfToC: // global
           I64[Sp - 8] = block_cfToM_info;
           _sfPjG::P64 = P64[R1 + 6];
           _sfPjH::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPjH::P64;
           P64[Sp + 8] = _sfPjG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTpn; else goto cfToO;
       ufTpn: // global
           call _cfToM(R1) args: 0, res: 0, upd: 0;
       cfToO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTox_info" {
     block_cfTox_info:
         const _cfTox;
         const 1;
         const 141733920798;
         const SfPCb_srt+936;
 },
 _cfToM() //  [R1]
         { []
         }
     {offset
       cfToM: // global
           if (R1 & 7 == 1) goto ufTpk; else goto cfToZ;
       ufTpk: // global
           Sp = Sp + 24;
           call _cfToU() args: 0, res: 0, upd: 0;
       cfToZ: // global
           I64[Sp - 8] = block_cfToX_info;
           _sfPjJ::P64 = P64[R1 + 6];
           _sfPjK::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPjK::P64;
           P64[Sp + 16] = _sfPjJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTpq; else goto cfTp0;
       ufTpq: // global
           call _cfToX(R1) args: 0, res: 0, upd: 0;
       cfTp0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfToM_info" {
     block_cfToM_info:
         const _cfToM;
         const 2;
         const 141733920798;
         const SfPCb_srt+936;
 },
 _cfToU() //  []
         { []
         }
     {offset
       cfToU: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfToX() //  [R1]
         { []
         }
     {offset
       cfToX: // global
           I64[Sp] = block_cfTp4_info;
           R3 = Data.Semigroup.$fDataMax7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfToX_info" {
     block_cfToX_info:
         const _cfToX;
         const 3;
         const 141733920798;
         const SfPCb_srt+936;
 },
 _cfTp4() //  [R1]
         { []
         }
     {offset
       cfTp4: // global
           if (R1 & 7 == 1) goto cfTpb; else goto cfTpf;
       cfTpb: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTou() args: 0, res: 0, upd: 0;
       cfTpf: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTp4_info" {
     block_cfTp4_info:
         const _cfTp4;
         const 3;
         const 141733920798;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.574916937 UTC

[section ""data" . $cMax2_rfC6o_closure" {
     $cMax2_rfC6o_closure:
         const Data.Data.AlgConstr_con_info;
         const $cMax3_rfC6p_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMax6_closure" {
     Data.Semigroup.$fDataMax6_closure:
         const :_con_info;
         const Data.Semigroup.$cMax_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataMax5_closure" {
     Data.Semigroup.$fDataMax5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataMax6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tMax_closure" {
     Data.Semigroup.$tMax_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataMax7_closure;
         const Data.Semigroup.$fDataMax5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cMax_closure" {
     Data.Semigroup.$cMax_closure:
         const Data.Data.Constr_con_info;
         const $cMax2_rfC6o_closure+1;
         const Data.Semigroup.$fDataMax7_closure;
         const $cMax1_rfC6m_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tMax_closure+1;
         const 0;
 },
 section ""data" . $cMax3_rfC6p_closure" {
     $cMax3_rfC6p_closure:
         const $cMax3_rfC6p_info;
         const 0;
         const 0;
         const 0;
 },
 $cMax3_rfC6p_entry() //  [R1]
         { []
         }
     {offset
       cfTqb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTqc; else goto cfTqd;
       cfTqc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTqd: // global
           (_cfTq8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTq8::I64 == 0) goto cfTqa; else goto cfTq9;
       cfTqa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTq9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTq8::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataMax6_closure+2;
           Sp = Sp - 16;
           call go1_rfC6n_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cMax3_rfC6p_info" {
     $cMax3_rfC6p_info:
         const $cMax3_rfC6p_entry;
         const 0;
         const 107374182421;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.584617048 UTC

[section ""data" . go2_rfC6q_closure" {
     go2_rfC6q_closure:
         const go2_rfC6q_info;
         const 0;
 },
 go2_rfC6q_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTqC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTqD; else goto ufTrg;
       cfTqD: // global
           R3 = R3;
           R2 = R2;
           R1 = go2_rfC6q_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTrg: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTqs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go2_rfC6q_info" {
     go2_rfC6q_info:
         const go2_rfC6q_entry;
         const 0;
         const 3302829850638;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTqs() //  []
         { []
         }
     {offset
       cfTqs: // global
           _sfPjS::P64 = P64[Sp];
           I64[Sp] = block_cfTqv_info;
           R1 = _sfPjS::P64;
           if (R1 & 7 != 0) goto ufTrk; else goto cfTqw;
       ufTrk: // global
           call _cfTqv(R1) args: 0, res: 0, upd: 0;
       cfTqw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTqv() //  [R1]
         { []
         }
     {offset
       cfTqv: // global
           if (R1 & 7 == 1) goto ufTrh; else goto cfTqA;
       ufTrh: // global
           Sp = Sp + 16;
           call _cfTqS() args: 0, res: 0, upd: 0;
       cfTqA: // global
           I64[Sp - 8] = block_cfTqK_info;
           _sfPjV::P64 = P64[R1 + 6];
           _sfPjW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPjW::P64;
           P64[Sp + 8] = _sfPjV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTrl; else goto cfTqM;
       ufTrl: // global
           call _cfTqK(R1) args: 0, res: 0, upd: 0;
       cfTqM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTqv_info" {
     block_cfTqv_info:
         const _cfTqv;
         const 1;
         const 1103806595102;
         const SfPCb_srt+936;
 },
 _cfTqK() //  [R1]
         { []
         }
     {offset
       cfTqK: // global
           if (R1 & 7 == 1) goto ufTri; else goto cfTqX;
       ufTri: // global
           Sp = Sp + 24;
           call _cfTqS() args: 0, res: 0, upd: 0;
       cfTqX: // global
           I64[Sp - 8] = block_cfTqV_info;
           _sfPjY::P64 = P64[R1 + 6];
           _sfPjZ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPjZ::P64;
           P64[Sp + 16] = _sfPjY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTro; else goto cfTqY;
       ufTro: // global
           call _cfTqV(R1) args: 0, res: 0, upd: 0;
       cfTqY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTqK_info" {
     block_cfTqK_info:
         const _cfTqK;
         const 2;
         const 1103806595102;
         const SfPCb_srt+936;
 },
 _cfTqS() //  []
         { []
         }
     {offset
       cfTqS: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTqV() //  [R1]
         { []
         }
     {offset
       cfTqV: // global
           I64[Sp] = block_cfTr2_info;
           R3 = Data.Semigroup.$fDataArg9_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTqV_info" {
     block_cfTqV_info:
         const _cfTqV;
         const 3;
         const 1103806595102;
         const SfPCb_srt+936;
 },
 _cfTr2() //  [R1]
         { []
         }
     {offset
       cfTr2: // global
           if (R1 & 7 == 1) goto cfTr9; else goto cfTrd;
       cfTr9: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTqs() args: 0, res: 0, upd: 0;
       cfTrd: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTr2_info" {
     block_cfTr2_info:
         const _cfTr2;
         const 3;
         const 1103806595102;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.598253947 UTC

[section ""data" . $cArg1_rfC6r_closure" {
     $cArg1_rfC6r_closure:
         const Data.Data.AlgConstr_con_info;
         const $cArg2_rfC6s_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataArg8_closure" {
     Data.Semigroup.$fDataArg8_closure:
         const :_con_info;
         const Data.Semigroup.$cArg_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataArg7_closure" {
     Data.Semigroup.$fDataArg7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataArg8_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tArg_closure" {
     Data.Semigroup.$tArg_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataArg9_closure;
         const Data.Semigroup.$fDataArg7_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cArg_closure" {
     Data.Semigroup.$cArg_closure:
         const Data.Data.Constr_con_info;
         const $cArg1_rfC6r_closure+1;
         const Data.Semigroup.$fDataArg9_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tArg_closure+1;
         const 0;
 },
 section ""data" . $cArg2_rfC6s_closure" {
     $cArg2_rfC6s_closure:
         const $cArg2_rfC6s_info;
         const 0;
         const 0;
         const 0;
 },
 $cArg2_rfC6s_entry() //  [R1]
         { []
         }
     {offset
       cfTs9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTsa; else goto cfTsb;
       cfTsa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTsb: // global
           (_cfTs6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTs6::I64 == 0) goto cfTs8; else goto cfTs7;
       cfTs8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTs7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTs6::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataArg8_closure+2;
           Sp = Sp - 16;
           call go2_rfC6q_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cArg2_rfC6s_info" {
     $cArg2_rfC6s_info:
         const $cArg2_rfC6s_entry;
         const 0;
         const 828928688149;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.605856625 UTC

[section ""data" . $cFirst1_rfC6t_closure" {
     $cFirst1_rfC6t_closure:
         const :_con_info;
         const Data.Semigroup.$fReadFirst5_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.609985485 UTC

[section ""data" . go3_rfC6u_closure" {
     go3_rfC6u_closure:
         const go3_rfC6u_info;
         const 0;
 },
 go3_rfC6u_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTsB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTsC; else goto ufTtf;
       cfTsC: // global
           R3 = R3;
           R2 = R2;
           R1 = go3_rfC6u_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTtf: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTsr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go3_rfC6u_info" {
     go3_rfC6u_info:
         const go3_rfC6u_entry;
         const 0;
         const 26392574033934;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTsr() //  []
         { []
         }
     {offset
       cfTsr: // global
           _sfPk7::P64 = P64[Sp];
           I64[Sp] = block_cfTsu_info;
           R1 = _sfPk7::P64;
           if (R1 & 7 != 0) goto ufTtj; else goto cfTsv;
       ufTtj: // global
           call _cfTsu(R1) args: 0, res: 0, upd: 0;
       cfTsv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTsu() //  [R1]
         { []
         }
     {offset
       cfTsu: // global
           if (R1 & 7 == 1) goto ufTtg; else goto cfTsz;
       ufTtg: // global
           Sp = Sp + 16;
           call _cfTsR() args: 0, res: 0, upd: 0;
       cfTsz: // global
           I64[Sp - 8] = block_cfTsJ_info;
           _sfPka::P64 = P64[R1 + 6];
           _sfPkb::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPkb::P64;
           P64[Sp + 8] = _sfPka::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTtk; else goto cfTsL;
       ufTtk: // global
           call _cfTsJ(R1) args: 0, res: 0, upd: 0;
       cfTsL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTsu_info" {
     block_cfTsu_info:
         const _cfTsu;
         const 1;
         const 8800387989534;
         const SfPCb_srt+936;
 },
 _cfTsJ() //  [R1]
         { []
         }
     {offset
       cfTsJ: // global
           if (R1 & 7 == 1) goto ufTth; else goto cfTsW;
       ufTth: // global
           Sp = Sp + 24;
           call _cfTsR() args: 0, res: 0, upd: 0;
       cfTsW: // global
           I64[Sp - 8] = block_cfTsU_info;
           _sfPkd::P64 = P64[R1 + 6];
           _sfPke::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPke::P64;
           P64[Sp + 16] = _sfPkd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTtn; else goto cfTsX;
       ufTtn: // global
           call _cfTsU(R1) args: 0, res: 0, upd: 0;
       cfTsX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTsJ_info" {
     block_cfTsJ_info:
         const _cfTsJ;
         const 2;
         const 8800387989534;
         const SfPCb_srt+936;
 },
 _cfTsR() //  []
         { []
         }
     {offset
       cfTsR: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTsU() //  [R1]
         { []
         }
     {offset
       cfTsU: // global
           I64[Sp] = block_cfTt1_info;
           R3 = Data.Semigroup.$fDataFirst7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTsU_info" {
     block_cfTsU_info:
         const _cfTsU;
         const 3;
         const 8800387989534;
         const SfPCb_srt+936;
 },
 _cfTt1() //  [R1]
         { []
         }
     {offset
       cfTt1: // global
           if (R1 & 7 == 1) goto cfTt8; else goto cfTtc;
       cfTt8: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTsr() args: 0, res: 0, upd: 0;
       cfTtc: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTt1_info" {
     block_cfTt1_info:
         const _cfTt1;
         const 3;
         const 8800387989534;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.622938533 UTC

[section ""data" . $cFirst2_rfC6v_closure" {
     $cFirst2_rfC6v_closure:
         const Data.Data.AlgConstr_con_info;
         const $cFirst3_rfC6w_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataFirst6_closure" {
     Data.Semigroup.$fDataFirst6_closure:
         const :_con_info;
         const Data.Semigroup.$cFirst_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataFirst5_closure" {
     Data.Semigroup.$fDataFirst5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataFirst6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tFirst_closure" {
     Data.Semigroup.$tFirst_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataFirst7_closure;
         const Data.Semigroup.$fDataFirst5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cFirst_closure" {
     Data.Semigroup.$cFirst_closure:
         const Data.Data.Constr_con_info;
         const $cFirst2_rfC6v_closure+1;
         const Data.Semigroup.$fDataFirst7_closure;
         const $cFirst1_rfC6t_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tFirst_closure+1;
         const 0;
 },
 section ""data" . $cFirst3_rfC6w_closure" {
     $cFirst3_rfC6w_closure:
         const $cFirst3_rfC6w_info;
         const 0;
         const 0;
         const 0;
 },
 $cFirst3_rfC6w_entry() //  [R1]
         { []
         }
     {offset
       cfTu8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTu9; else goto cfTua;
       cfTu9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTua: // global
           (_cfTu5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTu5::I64 == 0) goto cfTu7; else goto cfTu6;
       cfTu7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTu6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTu5::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataFirst6_closure+2;
           Sp = Sp - 16;
           call go3_rfC6u_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cFirst3_rfC6w_info" {
     $cFirst3_rfC6w_info:
         const $cFirst3_rfC6w_entry;
         const 0;
         const 6601364733973;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.630886247 UTC

[section ""data" . $cLast1_rfC6x_closure" {
     $cLast1_rfC6x_closure:
         const :_con_info;
         const Data.Semigroup.$fReadLast2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.634909587 UTC

[section ""data" . go4_rfC6y_closure" {
     go4_rfC6y_closure:
         const go4_rfC6y_info;
         const 0;
 },
 go4_rfC6y_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTuA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTuB; else goto ufTve;
       cfTuB: // global
           R3 = R3;
           R2 = R2;
           R1 = go4_rfC6y_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTve: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTuq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go4_rfC6y_info" {
     go4_rfC6y_info:
         const go4_rfC6y_entry;
         const 0;
         const 211110527500302;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTuq() //  []
         { []
         }
     {offset
       cfTuq: // global
           _sfPkm::P64 = P64[Sp];
           I64[Sp] = block_cfTut_info;
           R1 = _sfPkm::P64;
           if (R1 & 7 != 0) goto ufTvi; else goto cfTuu;
       ufTvi: // global
           call _cfTut(R1) args: 0, res: 0, upd: 0;
       cfTuu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTut() //  [R1]
         { []
         }
     {offset
       cfTut: // global
           if (R1 & 7 == 1) goto ufTvf; else goto cfTuy;
       ufTvf: // global
           Sp = Sp + 16;
           call _cfTuQ() args: 0, res: 0, upd: 0;
       cfTuy: // global
           I64[Sp - 8] = block_cfTuI_info;
           _sfPkp::P64 = P64[R1 + 6];
           _sfPkq::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPkq::P64;
           P64[Sp + 8] = _sfPkp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTvj; else goto cfTuK;
       ufTvj: // global
           call _cfTuI(R1) args: 0, res: 0, upd: 0;
       cfTuK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTut_info" {
     block_cfTut_info:
         const _cfTut;
         const 1;
         const 70373039144990;
         const SfPCb_srt+936;
 },
 _cfTuI() //  [R1]
         { []
         }
     {offset
       cfTuI: // global
           if (R1 & 7 == 1) goto ufTvg; else goto cfTuV;
       ufTvg: // global
           Sp = Sp + 24;
           call _cfTuQ() args: 0, res: 0, upd: 0;
       cfTuV: // global
           I64[Sp - 8] = block_cfTuT_info;
           _sfPks::P64 = P64[R1 + 6];
           _sfPkt::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPkt::P64;
           P64[Sp + 16] = _sfPks::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTvm; else goto cfTuW;
       ufTvm: // global
           call _cfTuT(R1) args: 0, res: 0, upd: 0;
       cfTuW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTuI_info" {
     block_cfTuI_info:
         const _cfTuI;
         const 2;
         const 70373039144990;
         const SfPCb_srt+936;
 },
 _cfTuQ() //  []
         { []
         }
     {offset
       cfTuQ: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTuT() //  [R1]
         { []
         }
     {offset
       cfTuT: // global
           I64[Sp] = block_cfTv0_info;
           R3 = Data.Semigroup.$fDataLast7_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTuT_info" {
     block_cfTuT_info:
         const _cfTuT;
         const 3;
         const 70373039144990;
         const SfPCb_srt+936;
 },
 _cfTv0() //  [R1]
         { []
         }
     {offset
       cfTv0: // global
           if (R1 & 7 == 1) goto cfTv7; else goto cfTvb;
       cfTv7: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTuq() args: 0, res: 0, upd: 0;
       cfTvb: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTv0_info" {
     block_cfTv0_info:
         const _cfTv0;
         const 3;
         const 70373039144990;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.647430327 UTC

[section ""data" . $cLast2_rfC6z_closure" {
     $cLast2_rfC6z_closure:
         const Data.Data.AlgConstr_con_info;
         const $cLast3_rfC6A_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataLast6_closure" {
     Data.Semigroup.$fDataLast6_closure:
         const :_con_info;
         const Data.Semigroup.$cLast_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataLast5_closure" {
     Data.Semigroup.$fDataLast5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataLast6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tLast_closure" {
     Data.Semigroup.$tLast_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataLast7_closure;
         const Data.Semigroup.$fDataLast5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cLast_closure" {
     Data.Semigroup.$cLast_closure:
         const Data.Data.Constr_con_info;
         const $cLast2_rfC6z_closure+1;
         const Data.Semigroup.$fDataLast7_closure;
         const $cLast1_rfC6x_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tLast_closure+1;
         const 0;
 },
 section ""data" . $cLast3_rfC6A_closure" {
     $cLast3_rfC6A_closure:
         const $cLast3_rfC6A_info;
         const 0;
         const 0;
         const 0;
 },
 $cLast3_rfC6A_entry() //  [R1]
         { []
         }
     {offset
       cfTw7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTw8; else goto cfTw9;
       cfTw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTw9: // global
           (_cfTw4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTw4::I64 == 0) goto cfTw6; else goto cfTw5;
       cfTw6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTw5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTw4::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataLast6_closure+2;
           Sp = Sp - 16;
           call go4_rfC6y_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cLast3_rfC6A_info" {
     $cLast3_rfC6A_info:
         const $cLast3_rfC6A_entry;
         const 0;
         const 52780853100565;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.654388925 UTC

[section ""cstring" . Data.Semigroup.$fDataWrappedMonoid4_bytes" {
     Data.Semigroup.$fDataWrappedMonoid4_bytes:
         I8[] [87,114,97,112,112,101,100,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.656829326 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid7_closure" {
     Data.Semigroup.$fDataWrappedMonoid7_closure:
         const Data.Semigroup.$fDataWrappedMonoid7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid7_entry() //  [R1]
         { []
         }
     {offset
       cfTwu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTwv; else goto cfTww;
       cfTwv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTww: // global
           (_cfTwr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTwr::I64 == 0) goto cfTwt; else goto cfTws;
       cfTwt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTws: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTwr::I64;
           R2 = Data.Semigroup.$fDataWrappedMonoid4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid7_info" {
     Data.Semigroup.$fDataWrappedMonoid7_info:
         const Data.Semigroup.$fDataWrappedMonoid7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.661626536 UTC

[section ""data" . $cWrapMonoid1_rfC6B_closure" {
     $cWrapMonoid1_rfC6B_closure:
         const :_con_info;
         const Data.Semigroup.$fReadWrappedMonoid2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.665900258 UTC

[section ""data" . go5_rfC6C_closure" {
     go5_rfC6C_closure:
         const go5_rfC6C_info;
         const 0;
 },
 go5_rfC6C_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTwR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTwS; else goto ufTxv;
       cfTwS: // global
           R3 = R3;
           R2 = R2;
           R1 = go5_rfC6C_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTxv: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTwH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go5_rfC6C_info" {
     go5_rfC6C_info:
         const go5_rfC6C_entry;
         const 0;
         const 1688854155231246;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTwH() //  []
         { []
         }
     {offset
       cfTwH: // global
           _sfPkB::P64 = P64[Sp];
           I64[Sp] = block_cfTwK_info;
           R1 = _sfPkB::P64;
           if (R1 & 7 != 0) goto ufTxz; else goto cfTwL;
       ufTxz: // global
           call _cfTwK(R1) args: 0, res: 0, upd: 0;
       cfTwL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTwK() //  [R1]
         { []
         }
     {offset
       cfTwK: // global
           if (R1 & 7 == 1) goto ufTxw; else goto cfTwP;
       ufTxw: // global
           Sp = Sp + 16;
           call _cfTx7() args: 0, res: 0, upd: 0;
       cfTwP: // global
           I64[Sp - 8] = block_cfTwZ_info;
           _sfPkE::P64 = P64[R1 + 6];
           _sfPkF::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPkF::P64;
           P64[Sp + 8] = _sfPkE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTxA; else goto cfTx1;
       ufTxA: // global
           call _cfTwZ(R1) args: 0, res: 0, upd: 0;
       cfTx1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTwK_info" {
     block_cfTwK_info:
         const _cfTwK;
         const 1;
         const 562954248388638;
         const SfPCb_srt+936;
 },
 _cfTwZ() //  [R1]
         { []
         }
     {offset
       cfTwZ: // global
           if (R1 & 7 == 1) goto ufTxx; else goto cfTxc;
       ufTxx: // global
           Sp = Sp + 24;
           call _cfTx7() args: 0, res: 0, upd: 0;
       cfTxc: // global
           I64[Sp - 8] = block_cfTxa_info;
           _sfPkH::P64 = P64[R1 + 6];
           _sfPkI::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPkI::P64;
           P64[Sp + 16] = _sfPkH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTxD; else goto cfTxd;
       ufTxD: // global
           call _cfTxa(R1) args: 0, res: 0, upd: 0;
       cfTxd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTwZ_info" {
     block_cfTwZ_info:
         const _cfTwZ;
         const 2;
         const 562954248388638;
         const SfPCb_srt+936;
 },
 _cfTx7() //  []
         { []
         }
     {offset
       cfTx7: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTxa() //  [R1]
         { []
         }
     {offset
       cfTxa: // global
           I64[Sp] = block_cfTxh_info;
           R3 = Data.Semigroup.$fReadWrappedMonoid4_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTxa_info" {
     block_cfTxa_info:
         const _cfTxa;
         const 3;
         const 562954248388638;
         const SfPCb_srt+936;
 },
 _cfTxh() //  [R1]
         { []
         }
     {offset
       cfTxh: // global
           if (R1 & 7 == 1) goto cfTxo; else goto cfTxs;
       cfTxo: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTwH() args: 0, res: 0, upd: 0;
       cfTxs: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTxh_info" {
     block_cfTxh_info:
         const _cfTxh;
         const 3;
         const 562954248388638;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.678352586 UTC

[section ""data" . $cWrapMonoid2_rfC6D_closure" {
     $cWrapMonoid2_rfC6D_closure:
         const Data.Data.AlgConstr_con_info;
         const $cWrapMonoid3_rfC6E_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataWrappedMonoid6_closure" {
     Data.Semigroup.$fDataWrappedMonoid6_closure:
         const :_con_info;
         const Data.Semigroup.$cWrapMonoid_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataWrappedMonoid5_closure" {
     Data.Semigroup.$fDataWrappedMonoid5_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataWrappedMonoid6_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tWrappedMonoid_closure" {
     Data.Semigroup.$tWrappedMonoid_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataWrappedMonoid7_closure;
         const Data.Semigroup.$fDataWrappedMonoid5_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cWrapMonoid_closure" {
     Data.Semigroup.$cWrapMonoid_closure:
         const Data.Data.Constr_con_info;
         const $cWrapMonoid2_rfC6D_closure+1;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const $cWrapMonoid1_rfC6B_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tWrappedMonoid_closure+1;
         const 0;
 },
 section ""data" . $cWrapMonoid3_rfC6E_closure" {
     $cWrapMonoid3_rfC6E_closure:
         const $cWrapMonoid3_rfC6E_info;
         const 0;
         const 0;
         const 0;
 },
 $cWrapMonoid3_rfC6E_entry() //  [R1]
         { []
         }
     {offset
       cfTyo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTyp; else goto cfTyq;
       cfTyp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTyq: // global
           (_cfTyl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTyl::I64 == 0) goto cfTyn; else goto cfTym;
       cfTyn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTym: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTyl::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataWrappedMonoid6_closure+2;
           Sp = Sp - 16;
           call go5_rfC6C_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cWrapMonoid3_rfC6E_info" {
     $cWrapMonoid3_rfC6E_info:
         const $cWrapMonoid3_rfC6E_entry;
         const 0;
         const 422216760033301;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.685404444 UTC

[section ""data" . $cOption1_rfC6F_closure" {
     $cOption1_rfC6F_closure:
         const :_con_info;
         const Data.Semigroup.$fReadOption2_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.689513201 UTC

[section ""data" . go6_rfC6G_closure" {
     go6_rfC6G_closure:
         const go6_rfC6G_info;
         const 0;
 },
 go6_rfC6G_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTyQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTyR; else goto ufTzu;
       cfTyR: // global
           R3 = R3;
           R2 = R2;
           R1 = go6_rfC6G_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufTzu: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfTyG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go6_rfC6G_info" {
     go6_rfC6G_info:
         const go6_rfC6G_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const SfPCb_srt+936;
 },
 _cfTyG() //  []
         { []
         }
     {offset
       cfTyG: // global
           _sfPkQ::P64 = P64[Sp];
           I64[Sp] = block_cfTyJ_info;
           R1 = _sfPkQ::P64;
           if (R1 & 7 != 0) goto ufTzy; else goto cfTyK;
       ufTzy: // global
           call _cfTyJ(R1) args: 0, res: 0, upd: 0;
       cfTyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfTyJ() //  [R1]
         { []
         }
     {offset
       cfTyJ: // global
           if (R1 & 7 == 1) goto ufTzv; else goto cfTyO;
       ufTzv: // global
           Sp = Sp + 16;
           call _cfTz6() args: 0, res: 0, upd: 0;
       cfTyO: // global
           I64[Sp - 8] = block_cfTyY_info;
           _sfPkT::P64 = P64[R1 + 6];
           _sfPkU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfPkU::P64;
           P64[Sp + 8] = _sfPkT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTzz; else goto cfTz0;
       ufTzz: // global
           call _cfTyY(R1) args: 0, res: 0, upd: 0;
       cfTz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTyJ_info" {
     block_cfTyJ_info:
         const _cfTyJ;
         const 1;
         const 4503603922337822;
         const SfPCb_srt+936;
 },
 _cfTyY() //  [R1]
         { []
         }
     {offset
       cfTyY: // global
           if (R1 & 7 == 1) goto ufTzw; else goto cfTzb;
       ufTzw: // global
           Sp = Sp + 24;
           call _cfTz6() args: 0, res: 0, upd: 0;
       cfTzb: // global
           I64[Sp - 8] = block_cfTz9_info;
           _sfPkW::P64 = P64[R1 + 6];
           _sfPkX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfPkX::P64;
           P64[Sp + 16] = _sfPkW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTzC; else goto cfTzc;
       ufTzC: // global
           call _cfTz9(R1) args: 0, res: 0, upd: 0;
       cfTzc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTyY_info" {
     block_cfTyY_info:
         const _cfTyY;
         const 2;
         const 4503603922337822;
         const SfPCb_srt+936;
 },
 _cfTz6() //  []
         { []
         }
     {offset
       cfTz6: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfTz9() //  [R1]
         { []
         }
     {offset
       cfTz9: // global
           I64[Sp] = block_cfTzg_info;
           R3 = Data.Semigroup.$fDataOption9_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTz9_info" {
     block_cfTz9_info:
         const _cfTz9;
         const 3;
         const 4503603922337822;
         const SfPCb_srt+936;
 },
 _cfTzg() //  [R1]
         { []
         }
     {offset
       cfTzg: // global
           if (R1 & 7 == 1) goto cfTzn; else goto cfTzr;
       cfTzn: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfTyG() args: 0, res: 0, upd: 0;
       cfTzr: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTzg_info" {
     block_cfTzg_info:
         const _cfTzg;
         const 3;
         const 4503603922337822;
         const SfPCb_srt+936;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.703080477 UTC

[section ""data" . $cOption2_rfC6H_closure" {
     $cOption2_rfC6H_closure:
         const Data.Data.AlgConstr_con_info;
         const $cOption3_rfC6I_closure;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataOption8_closure" {
     Data.Semigroup.$fDataOption8_closure:
         const :_con_info;
         const Data.Semigroup.$cOption_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$fDataOption7_closure" {
     Data.Semigroup.$fDataOption7_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Semigroup.$fDataOption8_closure+2;
         const 0;
 },
 section ""data" . Data.Semigroup.$tOption_closure" {
     Data.Semigroup.$tOption_closure:
         const Data.Data.DataType_con_info;
         const Data.Semigroup.$fDataOption9_closure;
         const Data.Semigroup.$fDataOption7_closure+1;
         const 0;
 },
 section ""data" . Data.Semigroup.$cOption_closure" {
     Data.Semigroup.$cOption_closure:
         const Data.Data.Constr_con_info;
         const $cOption2_rfC6H_closure+1;
         const Data.Semigroup.$fDataOption9_closure;
         const $cOption1_rfC6F_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Semigroup.$tOption_closure+1;
         const 0;
 },
 section ""data" . $cOption3_rfC6I_closure" {
     $cOption3_rfC6I_closure:
         const $cOption3_rfC6I_info;
         const 0;
         const 0;
         const 0;
 },
 $cOption3_rfC6I_entry() //  [R1]
         { []
         }
     {offset
       cfTAn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTAo; else goto cfTAp;
       cfTAo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTAp: // global
           (_cfTAk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTAk::I64 == 0) goto cfTAm; else goto cfTAl;
       cfTAm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTAl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTAk::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Semigroup.$fDataOption8_closure+2;
           Sp = Sp - 16;
           call go6_rfC6G_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cOption3_rfC6I_info" {
     $cOption3_rfC6I_info:
         const $cOption3_rfC6I_entry;
         const 0;
         const 3377704015495189;
         const SfPCb_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.710115448 UTC

[section ""cstring" . Data.Semigroup.$trModule4_bytes" {
     Data.Semigroup.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.711774738 UTC

[section ""data" . Data.Semigroup.$trModule3_closure" {
     Data.Semigroup.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.713844811 UTC

[section ""cstring" . Data.Semigroup.$trModule2_bytes" {
     Data.Semigroup.$trModule2_bytes:
         I8[] [68,97,116,97,46,83,101,109,105,103,114,111,117,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.715538244 UTC

[section ""data" . Data.Semigroup.$trModule1_closure" {
     Data.Semigroup.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.717273869 UTC

[section ""data" . Data.Semigroup.$trModule_closure" {
     Data.Semigroup.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Semigroup.$trModule3_closure+1;
         const Data.Semigroup.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.719068352 UTC

[section ""data" . $krep_rfC6J_closure" {
     $krep_rfC6J_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.720750517 UTC

[section ""data" . $krep1_rfC6K_closure" {
     $krep1_rfC6K_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.722547666 UTC

[section ""data" . $krep2_rfC6L_closure" {
     $krep2_rfC6L_closure:
         const :_con_info;
         const $krep1_rfC6K_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.72435333 UTC

[section ""data" . $krep3_rfC6M_closure" {
     $krep3_rfC6M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.7261513 UTC

[section ""data" . Data.Semigroup.$fDataMin3_closure" {
     Data.Semigroup.$fDataMin3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataMin4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.728503419 UTC

[section ""data" . Data.Semigroup.$tcMin_closure" {
     Data.Semigroup.$tcMin_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataMin3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2898124504153588682;
         const 15185633012309158566;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.730930075 UTC

[section ""data" . $krep4_rfC6N_closure" {
     $krep4_rfC6N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcMin_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.73274151 UTC

[section ""data" . Data.Semigroup.$tc'Min1_closure" {
     Data.Semigroup.$tc'Min1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep4_rfC6N_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.734525589 UTC

[section ""cstring" . Data.Semigroup.$tc'Min3_bytes" {
     Data.Semigroup.$tc'Min3_bytes:
         I8[] [39,77,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.736327947 UTC

[section ""data" . Data.Semigroup.$tc'Min2_closure" {
     Data.Semigroup.$tc'Min2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Min3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.738116244 UTC

[section ""data" . Data.Semigroup.$tc'Min_closure" {
     Data.Semigroup.$tc'Min_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Min2_closure+1;
         const Data.Semigroup.$tc'Min1_closure+4;
         const 7769702422559516318;
         const 9758175179672887730;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.741939121 UTC

[section ""data" . Data.Semigroup.$fDataMin2_closure" {
     Data.Semigroup.$fDataMin2_closure:
         const Data.Semigroup.$fDataMin2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMin2_entry() //  [R1]
         { []
         }
     {offset
       cfTB4: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfTB5; else goto cfTB6;
       cfTB5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTB6: // global
           (_cfTAW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTAW::I64 == 0) goto cfTAY; else goto cfTAX;
       cfTAY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTAX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTAW::I64;
           I64[Sp - 24] = block_cfTAZ_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataMin3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 15185633012309158566;
           R2 = 2898124504153588682;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin2_info" {
     Data.Semigroup.$fDataMin2_info:
         const Data.Semigroup.$fDataMin2_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1120;
 },
 _cfTAZ() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfTAZ: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfTB0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfTAZ_info" {
     block_cfTAZ_info:
         const _cfTAZ;
         const 0;
         const 30;
 },
 _cfTB0() //  []
         { []
         }
     {offset
       cfTB0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTB9; else goto cfTB8;
       cfTB9: // global
           HpAlloc = 48;
           I64[Sp] = block_cfTB0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfTB8: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfTB0_info" {
     block_cfTB0_info:
         const _cfTB0;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.749903186 UTC

[section ""data" . Data.Semigroup.$fDataMin8_closure" {
     Data.Semigroup.$fDataMin8_closure:
         const Data.Semigroup.$fDataMin8_info;
         const 0;
 },
 Data.Semigroup.$fDataMin8_entry() //  [R2]
         { []
         }
     {offset
       cfTBI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfTBJ; else goto cfTBK;
       cfTBJ: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTBK: // global
           I64[Sp - 8] = block_cfTBG_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin8_info" {
     Data.Semigroup.$fDataMin8_info:
         const Data.Semigroup.$fDataMin8_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfPCb_srt+1128;
 },
 _cfTBG() //  [R1]
         { []
         }
     {offset
       cfTBG: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataMin2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTBG_info" {
     block_cfTBG_info:
         const _cfTBG;
         const 0;
         const 12884901918;
         const SfPCb_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.756713725 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cdataCast1_closure" {
     Data.Semigroup.$fDataMin_$cdataCast1_closure:
         const Data.Semigroup.$fDataMin_$cdataCast1_info;
         const 0;
 },
 lvl33_sfPlf_entry() //  [R1]
         { []
         }
     {offset
       cfTC5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTC6; else goto cfTC7;
       cfTC6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTC7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataMin2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPlf_info" {
     lvl33_sfPlf_info:
         const lvl33_sfPlf_entry;
         const 1;
         const 21474836496;
         const SfPCb_srt+1136;
 },
 sat_sfPlj_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTCk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTCl; else goto cfTCm;
       cfTCl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTCm: // global
           I64[Sp - 24] = block_cfTCd_info;
           _sfPld::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPld::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTCx; else goto cfTCe;
       ufTCx: // global
           call _cfTCd(R1) args: 0, res: 0, upd: 0;
       cfTCe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlj_info" {
     sat_sfPlj_info:
         const sat_sfPlj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTCd() //  [R1]
         { []
         }
     {offset
       cfTCd: // global
           if (R1 & 7 == 1) goto cfTCh; else goto cfTCi;
       cfTCh: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfTCi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTCw; else goto cfTCv;
       cfTCw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTCv: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTCd_info" {
     block_cfTCd_info:
         const _cfTCd;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataMin_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTCy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTCC; else goto cfTCB;
       cfTCC: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTCB: // global
           I64[Hp - 40] = lvl33_sfPlf_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPlj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cdataCast1_info" {
     Data.Semigroup.$fDataMin_$cdataCast1_info:
         const Data.Semigroup.$fDataMin_$cdataCast1_entry;
         const 0;
         const 55834574862;
         const 8589934607;
         const SfPCb_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.766822327 UTC

[section ""data" . Data.Semigroup.$fDataMin1_closure" {
     Data.Semigroup.$fDataMin1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.775905958 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapMp_closure" {
     Data.Semigroup.$fDataMin_$cgmapMp_closure:
         const Data.Semigroup.$fDataMin_$cgmapMp_info;
 },
 lvl33_sfPlo_entry() //  [R1]
         { []
         }
     {offset
       cfTDi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTDj; else goto cfTDk;
       cfTDj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPlo_info" {
     lvl33_sfPlo_info:
         const lvl33_sfPlo_entry;
         const 1;
         const 16;
 },
 sat_sfPlL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTDx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTDy; else goto cfTDz;
       cfTDy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTDz: // global
           I64[Sp - 24] = block_cfTDu_info;
           _sfPlo::P64 = P64[R1 + 7];
           _sfPlp::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPlo::P64;
           P64[Sp - 8] = _sfPlp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTDR; else goto cfTDv;
       ufTDR: // global
           call _cfTDu(R1) args: 0, res: 0, upd: 0;
       cfTDv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlL_info" {
     sat_sfPlL_info:
         const sat_sfPlL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTDu() //  [R1]
         { []
         }
     {offset
       cfTDu: // global
           I64[Sp - 8] = block_cfTDC_info;
           _sfPlI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPlI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTDQ; else goto cfTDE;
       ufTDQ: // global
           call _cfTDC(R1) args: 0, res: 0, upd: 0;
       cfTDE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTDu_info" {
     block_cfTDu_info:
         const _cfTDu;
         const 2;
         const 30;
 },
 _cfTDC() //  [R1]
         { []
         }
     {offset
       cfTDC: // global
           if (R1 & 7 == 1) goto cfTDK; else goto cfTDO;
       cfTDK: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfTDO: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTDC_info" {
     block_cfTDC_info:
         const _cfTDC;
         const 3;
         const 30;
 },
 sat_sfPlD_entry() //  [R1]
         { []
         }
     {offset
       cfTEd: // global
           _sfPlD::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfTEe; else goto cfTEf;
       cfTEf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTEh; else goto cfTEg;
       cfTEh: // global
           HpAlloc = 56;
           goto cfTEe;
       cfTEe: // global
           R1 = _sfPlD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTEg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPlD::P64;
           _sfPln::P64 = P64[_sfPlD::P64 + 16];
           _sfPlp::P64 = P64[_sfPlD::P64 + 24];
           _sfPlu::P64 = P64[_sfPlD::P64 + 32];
           _sfPlv::P64 = P64[_sfPlD::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPlu::P64;
           P64[Hp - 24] = _sfPln::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPlv::P64;
           R2 = _sfPlp::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPlD_info" {
     sat_sfPlD_info:
         const sat_sfPlD_entry;
         const 4;
         const 15;
 },
 sat_sfPlz_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTEt: // global
           _sfPlw::P64 = R2;
           _sfPlz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTEu; else goto cfTEv;
       cfTEv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTEx; else goto cfTEw;
       cfTEx: // global
           HpAlloc = 56;
           goto cfTEu;
       cfTEu: // global
           R2 = _sfPlw::P64;
           R1 = _sfPlz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTEw: // global
           _sfPlp::P64 = P64[_sfPlz::P64 + 7];
           _sfPlu::P64 = P64[_sfPlz::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPlu::P64;
           P64[Hp - 24] = _sfPlw::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPlp::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlz_info" {
     sat_sfPlz_info:
         const sat_sfPlz_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPlA_entry() //  [R1]
         { []
         }
     {offset
       cfTEy: // global
           _sfPlA::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTEz; else goto cfTEA;
       cfTEA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTEC; else goto cfTEB;
       cfTEC: // global
           HpAlloc = 24;
           goto cfTEz;
       cfTEz: // global
           R1 = _sfPlA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTEB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPlA::P64;
           _sfPlp::P64 = P64[_sfPlA::P64 + 16];
           _sfPlq::P64 = P64[_sfPlA::P64 + 24];
           _sfPlu::P64 = P64[_sfPlA::P64 + 32];
           I64[Hp - 16] = sat_sfPlz_info;
           P64[Hp - 8] = _sfPlp::P64;
           P64[Hp] = _sfPlu::P64;
           R2 = _sfPlp::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPlq::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPlA_info" {
     sat_sfPlA_info:
         const sat_sfPlA_entry;
         const 3;
         const 15;
 },
 sat_sfPlE_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTED: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfTEE; else goto cfTEF;
       cfTEE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTEF: // global
           I64[Sp - 40] = block_cfTE2_info;
           _sfPll::P64 = P64[R1 + 7];
           _sfPln::P64 = P64[R1 + 15];
           _sfPlp::P64 = P64[R1 + 23];
           _sfPlq::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPll::P64;
           P64[Sp - 24] = _sfPln::P64;
           P64[Sp - 16] = _sfPlp::P64;
           P64[Sp - 8] = _sfPlq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufTEJ; else goto cfTE3;
       ufTEJ: // global
           call _cfTE2(R1) args: 0, res: 0, upd: 0;
       cfTE3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlE_info" {
     sat_sfPlE_info:
         const sat_sfPlE_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfTE2() //  [R1]
         { []
         }
     {offset
       cfTE2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfTEI; else goto cfTEH;
       cfTEI: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTEH: // global
           _sfPlu::P64 = P64[R1 + 7];
           _sfPlv::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPlD_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPlp::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPlp::P64;
           P64[Hp - 48] = _sfPlu::P64;
           P64[Hp - 40] = _sfPlv::P64;
           I64[Hp - 32] = sat_sfPlA_info;
           P64[Hp - 16] = _sfPlp::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPlu::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTE2_info" {
     block_cfTE2_info:
         const _cfTE2;
         const 4;
         const 30;
 },
 sat_sfPlr_entry() //  [R1]
         { []
         }
     {offset
       cfTEO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTEP; else goto cfTEQ;
       cfTEP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTEQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMin1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPlr_info" {
     sat_sfPlr_info:
         const sat_sfPlr_entry;
         const 1;
         const 16;
 },
 sat_sfPlF_entry() //  [R1]
         { []
         }
     {offset
       cfTER: // global
           _sfPlF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTES; else goto cfTET;
       cfTET: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfTEV; else goto cfTEU;
       cfTEV: // global
           HpAlloc = 104;
           goto cfTES;
       cfTES: // global
           R1 = _sfPlF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTEU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPlF::P64;
           _sfPlk::P64 = P64[_sfPlF::P64 + 16];
           _sfPll::P64 = P64[_sfPlF::P64 + 24];
           _sfPlm::P64 = P64[_sfPlF::P64 + 32];
           _sfPln::P64 = P64[_sfPlF::P64 + 40];
           _sfPlp::P64 = P64[_sfPlF::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPlm::P64;
           P64[Hp - 72] = _sfPlk::P64;
           P64[Hp - 64] = _sfPln::P64;
           I64[Hp - 56] = sat_sfPlE_info;
           P64[Hp - 48] = _sfPll::P64;
           P64[Hp - 40] = _sfPln::P64;
           P64[Hp - 32] = _sfPlp::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPlr_info;
           P64[Hp] = _sfPlp::P64;
           R2 = _sfPlp::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPlF_info" {
     sat_sfPlF_info:
         const sat_sfPlF_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMin_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTEW: // global
           _sfPln::P64 = R5;
           _sfPlm::P64 = R4;
           _sfPll::P64 = R3;
           _sfPlk::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfTEX; else goto cfTEY;
       cfTEY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTF0; else goto cfTEZ;
       cfTF0: // global
           HpAlloc = 24;
           goto cfTEX;
       cfTEX: // global
           R5 = _sfPln::P64;
           R4 = _sfPlm::P64;
           R3 = _sfPll::P64;
           R2 = _sfPlk::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTEZ: // global
           I64[Hp - 16] = lvl33_sfPlo_info;
           P64[Hp] = _sfPll::P64;
           I64[Sp - 48] = block_cfTDl_info;
           R2 = _sfPll::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPlk::P64;
           P64[Sp - 24] = _sfPll::P64;
           P64[Sp - 16] = _sfPlm::P64;
           P64[Sp - 8] = _sfPln::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapMp_info" {
     Data.Semigroup.$fDataMin_$cgmapMp_info:
         const Data.Semigroup.$fDataMin_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfTDl() //  [R1]
         { []
         }
     {offset
       cfTDl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfTF3; else goto cfTF2;
       cfTF3: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTF2: // global
           I64[Hp - 72] = sat_sfPlL_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPlF_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTDl_info" {
     block_cfTDl_info:
         const _cfTDl;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.804827296 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapM_closure" {
     Data.Semigroup.$fDataMin_$cgmapM_closure:
         const Data.Semigroup.$fDataMin_$cgmapM_info;
 },
 sat_sfPlV_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTH4: // global
           _sfPlT::P64 = R2;
           _sfPlV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTH5; else goto cfTH6;
       cfTH6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfTH8; else goto cfTH7;
       cfTH8: // global
           HpAlloc = 32;
           goto cfTH5;
       cfTH5: // global
           R2 = _sfPlT::P64;
           R1 = _sfPlV::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTH7: // global
           _sfPlN::P64 = P64[_sfPlV::P64 + 7];
           _sfPlS::P64 = P64[_sfPlV::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPlS::P64;
           P64[Hp] = _sfPlT::P64;
           R2 = _sfPlN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlV_info" {
     sat_sfPlV_info:
         const sat_sfPlV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPlW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTH9: // global
           _sfPlS::P64 = R2;
           _sfPlW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfTHa; else goto cfTHb;
       cfTHb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTHd; else goto cfTHc;
       cfTHd: // global
           HpAlloc = 24;
           goto cfTHa;
       cfTHa: // global
           R2 = _sfPlS::P64;
           R1 = _sfPlW::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTHc: // global
           _sfPlN::P64 = P64[_sfPlW::P64 + 7];
           _sfPlQ::P64 = P64[_sfPlW::P64 + 15];
           I64[Hp - 16] = sat_sfPlV_info;
           P64[Hp - 8] = _sfPlN::P64;
           P64[Hp] = _sfPlS::P64;
           R2 = _sfPlN::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPlQ::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPlW_info" {
     sat_sfPlW_info:
         const sat_sfPlW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPlR_entry() //  [R1]
         { []
         }
     {offset
       cfTHi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTHj; else goto cfTHk;
       cfTHj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTHk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPlR_info" {
     sat_sfPlR_info:
         const sat_sfPlR_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMin_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTHl: // global
           _sfPlP::P64 = R5;
           _sfPlO::P64 = R4;
           _sfPlN::P64 = R3;
           _sfPlM::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfTHm; else goto cfTHn;
       cfTHn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfTHp; else goto cfTHo;
       cfTHp: // global
           HpAlloc = 88;
           goto cfTHm;
       cfTHm: // global
           R5 = _sfPlP::P64;
           R4 = _sfPlO::P64;
           R3 = _sfPlN::P64;
           R2 = _sfPlM::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTHo: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfPlO::P64;
           P64[Hp - 56] = _sfPlM::P64;
           P64[Hp - 48] = _sfPlP::P64;
           I64[Hp - 40] = sat_sfPlW_info;
           P64[Hp - 32] = _sfPlN::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfPlR_info;
           P64[Hp] = _sfPlN::P64;
           R2 = _sfPlN::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapM_info" {
     Data.Semigroup.$fDataMin_$cgmapM_info:
         const Data.Semigroup.$fDataMin_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.817208908 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapQi_closure" {
     Data.Semigroup.$fDataMin_$cgmapQi_closure:
         const Data.Semigroup.$fDataMin_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataMin_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTI4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTI5; else goto cfTI6;
       cfTI5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTI6: // global
           I64[Sp - 32] = block_cfTI1_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufTIe; else goto cfTI2;
       ufTIe: // global
           call _cfTI1(R1) args: 0, res: 0, upd: 0;
       cfTI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapQi_info" {
     Data.Semigroup.$fDataMin_$cgmapQi_info:
         const Data.Semigroup.$fDataMin_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfPCb_srt+1168;
 },
 _cfTI1() //  [R1]
         { []
         }
     {offset
       cfTI1: // global
           if (I64[R1 + 7] == 0) goto cfTId; else goto cfTIc;
       cfTId: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTIc: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTI1_info" {
     block_cfTI1_info:
         const _cfTI1;
         const 3;
         const 4294967326;
         const SfPCb_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.83054251 UTC

[section ""data" . Data.Semigroup.$fDataMin_$cgmapMo_closure" {
     Data.Semigroup.$fDataMin_$cgmapMo_closure:
         const Data.Semigroup.$fDataMin_$cgmapMo_info;
 },
 lvl33_sfPm8_entry() //  [R1]
         { []
         }
     {offset
       cfTIx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTIy; else goto cfTIz;
       cfTIy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPm8_info" {
     lvl33_sfPm8_info:
         const lvl33_sfPm8_entry;
         const 1;
         const 16;
 },
 sat_sfPmy_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTIM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTIN; else goto cfTIO;
       cfTIN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTIO: // global
           I64[Sp - 24] = block_cfTIJ_info;
           _sfPm8::P64 = P64[R1 + 7];
           _sfPm9::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPm8::P64;
           P64[Sp - 8] = _sfPm9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTJ6; else goto cfTIK;
       ufTJ6: // global
           call _cfTIJ(R1) args: 0, res: 0, upd: 0;
       cfTIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmy_info" {
     sat_sfPmy_info:
         const sat_sfPmy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTIJ() //  [R1]
         { []
         }
     {offset
       cfTIJ: // global
           I64[Sp - 8] = block_cfTIR_info;
           _sfPmv::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPmv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTJ5; else goto cfTIT;
       ufTJ5: // global
           call _cfTIR(R1) args: 0, res: 0, upd: 0;
       cfTIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTIJ_info" {
     block_cfTIJ_info:
         const _cfTIJ;
         const 2;
         const 30;
 },
 _cfTIR() //  [R1]
         { []
         }
     {offset
       cfTIR: // global
           if (R1 & 7 == 1) goto cfTIZ; else goto cfTJ3;
       cfTIZ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfTJ3: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTIR_info" {
     block_cfTIR_info:
         const _cfTIR;
         const 3;
         const 30;
 },
 sat_sfPmo_entry() //  [R1]
         { []
         }
     {offset
       cfTJx: // global
           _sfPmo::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfTJy; else goto cfTJz;
       cfTJz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTJB; else goto cfTJA;
       cfTJB: // global
           HpAlloc = 56;
           goto cfTJy;
       cfTJy: // global
           R1 = _sfPmo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTJA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPmo::P64;
           _sfPm7::P64 = P64[_sfPmo::P64 + 16];
           _sfPm9::P64 = P64[_sfPmo::P64 + 24];
           _sfPme::P64 = P64[_sfPmo::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPme::P64;
           P64[Hp - 24] = _sfPm7::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPm9::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPmo_info" {
     sat_sfPmo_info:
         const sat_sfPmo_entry;
         const 3;
         const 15;
 },
 sat_sfPmk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTJN: // global
           _sfPmh::P64 = R2;
           _sfPmk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTJO; else goto cfTJP;
       cfTJP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTJR; else goto cfTJQ;
       cfTJR: // global
           HpAlloc = 56;
           goto cfTJO;
       cfTJO: // global
           R2 = _sfPmh::P64;
           R1 = _sfPmk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTJQ: // global
           _sfPm9::P64 = P64[_sfPmk::P64 + 7];
           _sfPme::P64 = P64[_sfPmk::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPme::P64;
           P64[Hp - 24] = _sfPmh::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPm9::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmk_info" {
     sat_sfPmk_info:
         const sat_sfPmk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPml_entry() //  [R1]
         { []
         }
     {offset
       cfTJS: // global
           _sfPml::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTJT; else goto cfTJU;
       cfTJU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTJW; else goto cfTJV;
       cfTJW: // global
           HpAlloc = 24;
           goto cfTJT;
       cfTJT: // global
           R1 = _sfPml::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPml::P64;
           _sfPm9::P64 = P64[_sfPml::P64 + 16];
           _sfPma::P64 = P64[_sfPml::P64 + 24];
           _sfPme::P64 = P64[_sfPml::P64 + 32];
           I64[Hp - 16] = sat_sfPmk_info;
           P64[Hp - 8] = _sfPm9::P64;
           P64[Hp] = _sfPme::P64;
           R2 = _sfPm9::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPma::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPml_info" {
     sat_sfPml_info:
         const sat_sfPml_entry;
         const 3;
         const 15;
 },
 sat_sfPmr_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTJX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfTJY; else goto cfTJZ;
       cfTJY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTJZ: // global
           I64[Sp - 40] = block_cfTJh_info;
           _sfPm5::P64 = P64[R1 + 7];
           _sfPm7::P64 = P64[R1 + 15];
           _sfPm9::P64 = P64[R1 + 23];
           _sfPma::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPm5::P64;
           P64[Sp - 24] = _sfPm7::P64;
           P64[Sp - 16] = _sfPm9::P64;
           P64[Sp - 8] = _sfPma::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufTKg; else goto cfTJi;
       ufTKg: // global
           call _cfTJh(R1) args: 0, res: 0, upd: 0;
       cfTJi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmr_info" {
     sat_sfPmr_info:
         const sat_sfPmr_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfTJh() //  [R1]
         { []
         }
     {offset
       cfTJh: // global
           I64[Sp - 8] = block_cfTJm_info;
           _sfPme::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPme::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTKf; else goto cfTJn;
       ufTKf: // global
           call _cfTJm(R1) args: 0, res: 0, upd: 0;
       cfTJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTJh_info" {
     block_cfTJh_info:
         const _cfTJh;
         const 4;
         const 30;
 },
 _cfTJm() //  [R1]
         { []
         }
     {offset
       cfTJm: // global
           _sfPm7::P64 = P64[Sp + 24];
           _sfPm9::P64 = P64[Sp + 32];
           _sfPme::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfTK2; else goto cfTK6;
       cfTK2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfTK5; else goto cfTK4;
       cfTK5: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTK4: // global
           I64[Hp - 72] = sat_sfPmo_info;
           P64[Hp - 56] = _sfPm7::P64;
           P64[Hp - 48] = _sfPm9::P64;
           P64[Hp - 40] = _sfPme::P64;
           I64[Hp - 32] = sat_sfPml_info;
           P64[Hp - 16] = _sfPm9::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPme::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfTK6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTKb; else goto cfTKa;
       cfTKb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTKa: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPme::P64;
           P64[Hp - 24] = _sfPm7::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPm9::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTJm_info" {
     block_cfTJm_info:
         const _cfTJm;
         const 5;
         const 30;
 },
 sat_sfPmb_entry() //  [R1]
         { []
         }
     {offset
       cfTKl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTKm; else goto cfTKn;
       cfTKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMin1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPmb_info" {
     sat_sfPmb_info:
         const sat_sfPmb_entry;
         const 1;
         const 16;
 },
 sat_sfPms_entry() //  [R1]
         { []
         }
     {offset
       cfTKo: // global
           _sfPms::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTKp; else goto cfTKq;
       cfTKq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfTKs; else goto cfTKr;
       cfTKs: // global
           HpAlloc = 104;
           goto cfTKp;
       cfTKp: // global
           R1 = _sfPms::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTKr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPms::P64;
           _sfPm4::P64 = P64[_sfPms::P64 + 16];
           _sfPm5::P64 = P64[_sfPms::P64 + 24];
           _sfPm6::P64 = P64[_sfPms::P64 + 32];
           _sfPm7::P64 = P64[_sfPms::P64 + 40];
           _sfPm9::P64 = P64[_sfPms::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPm6::P64;
           P64[Hp - 72] = _sfPm4::P64;
           P64[Hp - 64] = _sfPm7::P64;
           I64[Hp - 56] = sat_sfPmr_info;
           P64[Hp - 48] = _sfPm5::P64;
           P64[Hp - 40] = _sfPm7::P64;
           P64[Hp - 32] = _sfPm9::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPmb_info;
           P64[Hp] = _sfPm9::P64;
           R2 = _sfPm9::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPms_info" {
     sat_sfPms_info:
         const sat_sfPms_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMin_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTKt: // global
           _sfPm7::P64 = R5;
           _sfPm6::P64 = R4;
           _sfPm5::P64 = R3;
           _sfPm4::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfTKu; else goto cfTKv;
       cfTKv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTKx; else goto cfTKw;
       cfTKx: // global
           HpAlloc = 24;
           goto cfTKu;
       cfTKu: // global
           R5 = _sfPm7::P64;
           R4 = _sfPm6::P64;
           R3 = _sfPm5::P64;
           R2 = _sfPm4::P64;
           R1 = Data.Semigroup.$fDataMin_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTKw: // global
           I64[Hp - 16] = lvl33_sfPm8_info;
           P64[Hp] = _sfPm5::P64;
           I64[Sp - 48] = block_cfTIA_info;
           R2 = _sfPm5::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPm4::P64;
           P64[Sp - 24] = _sfPm5::P64;
           P64[Sp - 16] = _sfPm6::P64;
           P64[Sp - 8] = _sfPm7::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_$cgmapMo_info" {
     Data.Semigroup.$fDataMin_$cgmapMo_info:
         const Data.Semigroup.$fDataMin_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfTIA() //  [R1]
         { []
         }
     {offset
       cfTIA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfTKA; else goto cfTKz;
       cfTKA: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTKz: // global
           I64[Hp - 72] = sat_sfPmy_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPms_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTIA_info" {
     block_cfTIA_info:
         const _cfTIA;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.860111864 UTC

[section ""data" . lvl12_rfC6O_closure" {
     lvl12_rfC6O_closure:
         const lvl12_rfC6O_info;
         const 0;
 },
 lvl12_rfC6O_entry() //  []
         { []
         }
     {offset
       cfTME: // global
           R1 = Data.Semigroup.$cMin_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_rfC6O_info" {
     lvl12_rfC6O_info:
         const lvl12_rfC6O_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.864997399 UTC

[section ""data" . lvl13_rfC6P_closure" {
     lvl13_rfC6P_closure:
         const lvl13_rfC6P_info;
         const 0;
 },
 lvl13_rfC6P_entry() //  []
         { []
         }
     {offset
       cfTMQ: // global
           R1 = Data.Semigroup.$tMin_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_rfC6P_info" {
     lvl13_rfC6P_info:
         const lvl13_rfC6P_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.868650199 UTC

[section ""data" . lvl14_rfC6Q_closure" {
     lvl14_rfC6Q_closure:
         const lvl14_rfC6Q_info;
 },
 lvl14_rfC6Q_entry() //  []
         { []
         }
     {offset
       cfTN2: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_rfC6Q_info" {
     lvl14_rfC6Q_info:
         const lvl14_rfC6Q_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.878303344 UTC

[section ""data" . Data.Semigroup.$fDataMin_closure" {
     Data.Semigroup.$fDataMin_closure:
         const Data.Semigroup.$fDataMin_info;
         const 0;
 },
 sat_sfPn8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTNk: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapMo_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn8_info" {
     sat_sfPn8_info:
         const sat_sfPn8_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPn7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTNs: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapMp_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn7_info" {
     sat_sfPn7_info:
         const sat_sfPn7_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPn6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTNA: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapM_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn6_info" {
     sat_sfPn6_info:
         const sat_sfPn6_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPn5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTNI: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgmapQi_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn5_info" {
     sat_sfPn5_info:
         const sat_sfPn5_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1176;
 },
 sat_sfPn4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTNS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfTNW; else goto cfTNV;
       cfTNW: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTNV: // global
           _sfPmD::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfPmD::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn4_info" {
     sat_sfPn4_info:
         const sat_sfPn4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPn0_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfTO3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfTO7; else goto cfTO6;
       cfTO7: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTO6: // global
           _sfPmD::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPmD::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfPmV::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfPmV::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPn0_info" {
     sat_sfPn0_info:
         const sat_sfPn0_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPmU_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfTOe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfTOi; else goto cfTOh;
       cfTOi: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTOh: // global
           _sfPmD::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPmD::P64;
           P64[Hp] = R5;
           _sfPmQ::P64 = R3;
           R3 = Hp - 32;
           _sfPmP::P64 = R2;
           R2 = _sfPmQ::P64;
           R1 = _sfPmP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmU_info" {
     sat_sfPmU_info:
         const sat_sfPmU_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPmO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfTOo: // global
           R3 = R3;
           _sfPmM::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfPmM::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmO_info" {
     sat_sfPmO_info:
         const sat_sfPmO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPmL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTOw: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataMin_$cdataCast1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmL_info" {
     sat_sfPmL_info:
         const sat_sfPmL_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1160;
 },
 sat_sfPmJ_entry() //  [R1]
         { []
         }
     {offset
       cfTOI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTOJ; else goto cfTOK;
       cfTOJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTOK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPmJ_info" {
     sat_sfPmJ_info:
         const sat_sfPmJ_entry;
         const 1;
         const 16;
 },
 sat_sfPmK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTOL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTOP; else goto cfTOO;
       cfTOP: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTOO: // global
           _sfPmD::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfPmJ_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfPmG::P64 = R2;
           R2 = _sfPmD::P64;
           R1 = _sfPmG::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmK_info" {
     sat_sfPmK_info:
         const sat_sfPmK_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPmF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfTOV: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMin_$cgfoldl_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPmF_info" {
     sat_sfPmF_info:
         const sat_sfPmF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPmE_entry() //  [R1]
         { []
         }
     {offset
       cfTP2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTP3; else goto cfTP4;
       cfTP3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTP4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataMin8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPmE_info" {
     sat_sfPmE_info:
         const sat_sfPmE_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1144;
 },
 Data.Semigroup.$fDataMin_entry() //  [R2]
         { []
         }
     {offset
       cfTP6: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfTPa; else goto cfTP9;
       cfTPa: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTP9: // global
           I64[Hp - 320] = sat_sfPn8_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPn7_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPn6_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPn5_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPn4_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPn0_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPmU_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPmO_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPmL_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPmK_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPmF_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPmE_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl12_rfC6O_closure+1;
           P64[Hp - 80] = lvl13_rfC6P_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl14_rfC6Q_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMin_info" {
     Data.Semigroup.$fDataMin_info:
         const Data.Semigroup.$fDataMin_entry;
         const 0;
         const 3938485010446;
         const 4294967301;
         const SfPCb_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.904739302 UTC

[section ""data" . Data.Semigroup.$fDataMax3_closure" {
     Data.Semigroup.$fDataMax3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataMax4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.907006447 UTC

[section ""data" . Data.Semigroup.$tcMax_closure" {
     Data.Semigroup.$tcMax_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataMax3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 10813679156066679206;
         const 10491840004411982061;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.908835767 UTC

[section ""data" . $krep5_rfC6R_closure" {
     $krep5_rfC6R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcMax_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.910560941 UTC

[section ""data" . Data.Semigroup.$tc'Max1_closure" {
     Data.Semigroup.$tc'Max1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep5_rfC6R_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.912280853 UTC

[section ""cstring" . Data.Semigroup.$tc'Max3_bytes" {
     Data.Semigroup.$tc'Max3_bytes:
         I8[] [39,77,97,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.913966927 UTC

[section ""data" . Data.Semigroup.$tc'Max2_closure" {
     Data.Semigroup.$tc'Max2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Max3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.915817853 UTC

[section ""data" . Data.Semigroup.$tc'Max_closure" {
     Data.Semigroup.$tc'Max_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Max2_closure+1;
         const Data.Semigroup.$tc'Max1_closure+4;
         const 9964620667386625613;
         const 8300955803911017019;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.91924301 UTC

[section ""data" . Data.Semigroup.$fDataMax2_closure" {
     Data.Semigroup.$fDataMax2_closure:
         const Data.Semigroup.$fDataMax2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataMax2_entry() //  [R1]
         { []
         }
     {offset
       cfTQQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfTQR; else goto cfTQS;
       cfTQR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTQS: // global
           (_cfTQI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfTQI::I64 == 0) goto cfTQK; else goto cfTQJ;
       cfTQK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfTQJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfTQI::I64;
           I64[Sp - 24] = block_cfTQL_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataMax3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 10491840004411982061;
           R2 = 10813679156066679206;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax2_info" {
     Data.Semigroup.$fDataMax2_info:
         const Data.Semigroup.$fDataMax2_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1120;
 },
 _cfTQL() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfTQL: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfTQM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfTQL_info" {
     block_cfTQL_info:
         const _cfTQL;
         const 0;
         const 30;
 },
 _cfTQM() //  []
         { []
         }
     {offset
       cfTQM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTQV; else goto cfTQU;
       cfTQV: // global
           HpAlloc = 48;
           I64[Sp] = block_cfTQM_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfTQU: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfTQM_info" {
     block_cfTQM_info:
         const _cfTQM;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.92780891 UTC

[section ""data" . Data.Semigroup.$fDataMax8_closure" {
     Data.Semigroup.$fDataMax8_closure:
         const Data.Semigroup.$fDataMax8_info;
         const 0;
 },
 Data.Semigroup.$fDataMax8_entry() //  [R2]
         { []
         }
     {offset
       cfTRu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfTRv; else goto cfTRw;
       cfTRv: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTRw: // global
           I64[Sp - 8] = block_cfTRs_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax8_info" {
     Data.Semigroup.$fDataMax8_info:
         const Data.Semigroup.$fDataMax8_entry;
         const 0;
         const 52780853100558;
         const 4294967301;
         const SfPCb_srt+1128;
 },
 _cfTRs() //  [R1]
         { []
         }
     {offset
       cfTRs: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataMax2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTRs_info" {
     block_cfTRs_info:
         const _cfTRs;
         const 0;
         const 17596481011742;
         const SfPCb_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.934979853 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cdataCast1_closure" {
     Data.Semigroup.$fDataMax_$cdataCast1_closure:
         const Data.Semigroup.$fDataMax_$cdataCast1_info;
         const 0;
 },
 lvl33_sfPnj_entry() //  [R1]
         { []
         }
     {offset
       cfTRR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTRS; else goto cfTRT;
       cfTRS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTRT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataMax2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPnj_info" {
     lvl33_sfPnj_info:
         const lvl33_sfPnj_entry;
         const 1;
         const 2203318222864;
         const SfPCb_srt+1152;
 },
 sat_sfPnn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTS6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfTS7; else goto cfTS8;
       cfTS7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTS8: // global
           I64[Sp - 24] = block_cfTRZ_info;
           _sfPnh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPnh::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTSj; else goto cfTS0;
       ufTSj: // global
           call _cfTRZ(R1) args: 0, res: 0, upd: 0;
       cfTS0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPnn_info" {
     sat_sfPnn_info:
         const sat_sfPnn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTRZ() //  [R1]
         { []
         }
     {offset
       cfTRZ: // global
           if (R1 & 7 == 1) goto cfTS3; else goto cfTS4;
       cfTS3: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfTS4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTSi; else goto cfTSh;
       cfTSi: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTSh: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTRZ_info" {
     block_cfTRZ_info:
         const _cfTRZ;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataMax_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfTSk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfTSo; else goto cfTSn;
       cfTSo: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTSn: // global
           I64[Hp - 40] = lvl33_sfPnj_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPnn_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cdataCast1_info" {
     Data.Semigroup.$fDataMax_$cdataCast1_info:
         const Data.Semigroup.$fDataMax_$cdataCast1_entry;
         const 0;
         const 10999411245070;
         const 8589934607;
         const SfPCb_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.945406059 UTC

[section ""data" . Data.Semigroup.$fDataMax1_closure" {
     Data.Semigroup.$fDataMax1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.953895426 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapMp_closure" {
     Data.Semigroup.$fDataMax_$cgmapMp_closure:
         const Data.Semigroup.$fDataMax_$cgmapMp_info;
 },
 lvl33_sfPns_entry() //  [R1]
         { []
         }
     {offset
       cfTT4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTT5; else goto cfTT6;
       cfTT5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTT6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPns_info" {
     lvl33_sfPns_info:
         const lvl33_sfPns_entry;
         const 1;
         const 16;
 },
 sat_sfPnP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTTj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTTk; else goto cfTTl;
       cfTTk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTTl: // global
           I64[Sp - 24] = block_cfTTg_info;
           _sfPns::P64 = P64[R1 + 7];
           _sfPnt::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPns::P64;
           P64[Sp - 8] = _sfPnt::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTTD; else goto cfTTh;
       ufTTD: // global
           call _cfTTg(R1) args: 0, res: 0, upd: 0;
       cfTTh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPnP_info" {
     sat_sfPnP_info:
         const sat_sfPnP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTTg() //  [R1]
         { []
         }
     {offset
       cfTTg: // global
           I64[Sp - 8] = block_cfTTo_info;
           _sfPnM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPnM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTTC; else goto cfTTq;
       ufTTC: // global
           call _cfTTo(R1) args: 0, res: 0, upd: 0;
       cfTTq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTTg_info" {
     block_cfTTg_info:
         const _cfTTg;
         const 2;
         const 30;
 },
 _cfTTo() //  [R1]
         { []
         }
     {offset
       cfTTo: // global
           if (R1 & 7 == 1) goto cfTTw; else goto cfTTA;
       cfTTw: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfTTA: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTTo_info" {
     block_cfTTo_info:
         const _cfTTo;
         const 3;
         const 30;
 },
 sat_sfPnH_entry() //  [R1]
         { []
         }
     {offset
       cfTTZ: // global
           _sfPnH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfTU0; else goto cfTU1;
       cfTU1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTU3; else goto cfTU2;
       cfTU3: // global
           HpAlloc = 56;
           goto cfTU0;
       cfTU0: // global
           R1 = _sfPnH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPnH::P64;
           _sfPnr::P64 = P64[_sfPnH::P64 + 16];
           _sfPnt::P64 = P64[_sfPnH::P64 + 24];
           _sfPny::P64 = P64[_sfPnH::P64 + 32];
           _sfPnz::P64 = P64[_sfPnH::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPny::P64;
           P64[Hp - 24] = _sfPnr::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPnz::P64;
           R2 = _sfPnt::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPnH_info" {
     sat_sfPnH_info:
         const sat_sfPnH_entry;
         const 4;
         const 15;
 },
 sat_sfPnD_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTUf: // global
           _sfPnA::P64 = R2;
           _sfPnD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTUg; else goto cfTUh;
       cfTUh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTUj; else goto cfTUi;
       cfTUj: // global
           HpAlloc = 56;
           goto cfTUg;
       cfTUg: // global
           R2 = _sfPnA::P64;
           R1 = _sfPnD::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTUi: // global
           _sfPnt::P64 = P64[_sfPnD::P64 + 7];
           _sfPny::P64 = P64[_sfPnD::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPny::P64;
           P64[Hp - 24] = _sfPnA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPnt::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPnD_info" {
     sat_sfPnD_info:
         const sat_sfPnD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPnE_entry() //  [R1]
         { []
         }
     {offset
       cfTUk: // global
           _sfPnE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTUl; else goto cfTUm;
       cfTUm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTUo; else goto cfTUn;
       cfTUo: // global
           HpAlloc = 24;
           goto cfTUl;
       cfTUl: // global
           R1 = _sfPnE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTUn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPnE::P64;
           _sfPnt::P64 = P64[_sfPnE::P64 + 16];
           _sfPnu::P64 = P64[_sfPnE::P64 + 24];
           _sfPny::P64 = P64[_sfPnE::P64 + 32];
           I64[Hp - 16] = sat_sfPnD_info;
           P64[Hp - 8] = _sfPnt::P64;
           P64[Hp] = _sfPny::P64;
           R2 = _sfPnt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPnu::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPnE_info" {
     sat_sfPnE_info:
         const sat_sfPnE_entry;
         const 3;
         const 15;
 },
 sat_sfPnI_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTUp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfTUq; else goto cfTUr;
       cfTUq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTUr: // global
           I64[Sp - 40] = block_cfTTO_info;
           _sfPnp::P64 = P64[R1 + 7];
           _sfPnr::P64 = P64[R1 + 15];
           _sfPnt::P64 = P64[R1 + 23];
           _sfPnu::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPnp::P64;
           P64[Sp - 24] = _sfPnr::P64;
           P64[Sp - 16] = _sfPnt::P64;
           P64[Sp - 8] = _sfPnu::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufTUv; else goto cfTTP;
       ufTUv: // global
           call _cfTTO(R1) args: 0, res: 0, upd: 0;
       cfTTP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPnI_info" {
     sat_sfPnI_info:
         const sat_sfPnI_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfTTO() //  [R1]
         { []
         }
     {offset
       cfTTO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfTUu; else goto cfTUt;
       cfTUu: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTUt: // global
           _sfPny::P64 = P64[R1 + 7];
           _sfPnz::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPnH_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPnt::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPnt::P64;
           P64[Hp - 48] = _sfPny::P64;
           P64[Hp - 40] = _sfPnz::P64;
           I64[Hp - 32] = sat_sfPnE_info;
           P64[Hp - 16] = _sfPnt::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPny::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTTO_info" {
     block_cfTTO_info:
         const _cfTTO;
         const 4;
         const 30;
 },
 sat_sfPnv_entry() //  [R1]
         { []
         }
     {offset
       cfTUA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTUB; else goto cfTUC;
       cfTUB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTUC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMax1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPnv_info" {
     sat_sfPnv_info:
         const sat_sfPnv_entry;
         const 1;
         const 16;
 },
 sat_sfPnJ_entry() //  [R1]
         { []
         }
     {offset
       cfTUD: // global
           _sfPnJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTUE; else goto cfTUF;
       cfTUF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfTUH; else goto cfTUG;
       cfTUH: // global
           HpAlloc = 104;
           goto cfTUE;
       cfTUE: // global
           R1 = _sfPnJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTUG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPnJ::P64;
           _sfPno::P64 = P64[_sfPnJ::P64 + 16];
           _sfPnp::P64 = P64[_sfPnJ::P64 + 24];
           _sfPnq::P64 = P64[_sfPnJ::P64 + 32];
           _sfPnr::P64 = P64[_sfPnJ::P64 + 40];
           _sfPnt::P64 = P64[_sfPnJ::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPnq::P64;
           P64[Hp - 72] = _sfPno::P64;
           P64[Hp - 64] = _sfPnr::P64;
           I64[Hp - 56] = sat_sfPnI_info;
           P64[Hp - 48] = _sfPnp::P64;
           P64[Hp - 40] = _sfPnr::P64;
           P64[Hp - 32] = _sfPnt::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPnv_info;
           P64[Hp] = _sfPnt::P64;
           R2 = _sfPnt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPnJ_info" {
     sat_sfPnJ_info:
         const sat_sfPnJ_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMax_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTUI: // global
           _sfPnr::P64 = R5;
           _sfPnq::P64 = R4;
           _sfPnp::P64 = R3;
           _sfPno::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfTUJ; else goto cfTUK;
       cfTUK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTUM; else goto cfTUL;
       cfTUM: // global
           HpAlloc = 24;
           goto cfTUJ;
       cfTUJ: // global
           R5 = _sfPnr::P64;
           R4 = _sfPnq::P64;
           R3 = _sfPnp::P64;
           R2 = _sfPno::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTUL: // global
           I64[Hp - 16] = lvl33_sfPns_info;
           P64[Hp] = _sfPnp::P64;
           I64[Sp - 48] = block_cfTT7_info;
           R2 = _sfPnp::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPno::P64;
           P64[Sp - 24] = _sfPnp::P64;
           P64[Sp - 16] = _sfPnq::P64;
           P64[Sp - 8] = _sfPnr::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapMp_info" {
     Data.Semigroup.$fDataMax_$cgmapMp_info:
         const Data.Semigroup.$fDataMax_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfTT7() //  [R1]
         { []
         }
     {offset
       cfTT7: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfTUP; else goto cfTUO;
       cfTUP: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTUO: // global
           I64[Hp - 72] = sat_sfPnP_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPnJ_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTT7_info" {
     block_cfTT7_info:
         const _cfTT7;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.98658338 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapM_closure" {
     Data.Semigroup.$fDataMax_$cgmapM_closure:
         const Data.Semigroup.$fDataMax_$cgmapM_info;
 },
 sat_sfPnZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTWQ: // global
           _sfPnX::P64 = R2;
           _sfPnZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTWR; else goto cfTWS;
       cfTWS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfTWU; else goto cfTWT;
       cfTWU: // global
           HpAlloc = 32;
           goto cfTWR;
       cfTWR: // global
           R2 = _sfPnX::P64;
           R1 = _sfPnZ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTWT: // global
           _sfPnR::P64 = P64[_sfPnZ::P64 + 7];
           _sfPnW::P64 = P64[_sfPnZ::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPnW::P64;
           P64[Hp] = _sfPnX::P64;
           R2 = _sfPnR::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPnZ_info" {
     sat_sfPnZ_info:
         const sat_sfPnZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPo0_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTWV: // global
           _sfPnW::P64 = R2;
           _sfPo0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfTWW; else goto cfTWX;
       cfTWX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTWZ; else goto cfTWY;
       cfTWZ: // global
           HpAlloc = 24;
           goto cfTWW;
       cfTWW: // global
           R2 = _sfPnW::P64;
           R1 = _sfPo0::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTWY: // global
           _sfPnR::P64 = P64[_sfPo0::P64 + 7];
           _sfPnU::P64 = P64[_sfPo0::P64 + 15];
           I64[Hp - 16] = sat_sfPnZ_info;
           P64[Hp - 8] = _sfPnR::P64;
           P64[Hp] = _sfPnW::P64;
           R2 = _sfPnR::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPnU::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPo0_info" {
     sat_sfPo0_info:
         const sat_sfPo0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPnV_entry() //  [R1]
         { []
         }
     {offset
       cfTX4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTX5; else goto cfTX6;
       cfTX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTX6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPnV_info" {
     sat_sfPnV_info:
         const sat_sfPnV_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataMax_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTX7: // global
           _sfPnT::P64 = R5;
           _sfPnS::P64 = R4;
           _sfPnR::P64 = R3;
           _sfPnQ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfTX8; else goto cfTX9;
       cfTX9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfTXb; else goto cfTXa;
       cfTXb: // global
           HpAlloc = 88;
           goto cfTX8;
       cfTX8: // global
           R5 = _sfPnT::P64;
           R4 = _sfPnS::P64;
           R3 = _sfPnR::P64;
           R2 = _sfPnQ::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTXa: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfPnS::P64;
           P64[Hp - 56] = _sfPnQ::P64;
           P64[Hp - 48] = _sfPnT::P64;
           I64[Hp - 40] = sat_sfPo0_info;
           P64[Hp - 32] = _sfPnR::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfPnV_info;
           P64[Hp] = _sfPnR::P64;
           R2 = _sfPnR::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapM_info" {
     Data.Semigroup.$fDataMax_$cgmapM_info:
         const Data.Semigroup.$fDataMax_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:43.997653178 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapQi_closure" {
     Data.Semigroup.$fDataMax_$cgmapQi_closure:
         const Data.Semigroup.$fDataMax_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataMax_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfTXQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTXR; else goto cfTXS;
       cfTXR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTXS: // global
           I64[Sp - 32] = block_cfTXN_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufTY0; else goto cfTXO;
       ufTY0: // global
           call _cfTXN(R1) args: 0, res: 0, upd: 0;
       cfTXO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapQi_info" {
     Data.Semigroup.$fDataMax_$cgmapQi_info:
         const Data.Semigroup.$fDataMax_$cgmapQi_entry;
         const 0;
         const 4402341478414;
         const 17179869208;
         const SfPCb_srt+1168;
 },
 _cfTXN() //  [R1]
         { []
         }
     {offset
       cfTXN: // global
           if (I64[R1 + 7] == 0) goto cfTXZ; else goto cfTXY;
       cfTXZ: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfTXY: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTXN_info" {
     block_cfTXN_info:
         const _cfTXN;
         const 3;
         const 4294967326;
         const SfPCb_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.009874914 UTC

[section ""data" . Data.Semigroup.$fDataMax_$cgmapMo_closure" {
     Data.Semigroup.$fDataMax_$cgmapMo_closure:
         const Data.Semigroup.$fDataMax_$cgmapMo_info;
 },
 lvl33_sfPoc_entry() //  [R1]
         { []
         }
     {offset
       cfTYj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfTYk; else goto cfTYl;
       cfTYk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTYl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPoc_info" {
     lvl33_sfPoc_info:
         const lvl33_sfPoc_entry;
         const 1;
         const 16;
 },
 sat_sfPoC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTYy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfTYz; else goto cfTYA;
       cfTYz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTYA: // global
           I64[Sp - 24] = block_cfTYv_info;
           _sfPoc::P64 = P64[R1 + 7];
           _sfPod::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPoc::P64;
           P64[Sp - 8] = _sfPod::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufTYS; else goto cfTYw;
       ufTYS: // global
           call _cfTYv(R1) args: 0, res: 0, upd: 0;
       cfTYw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoC_info" {
     sat_sfPoC_info:
         const sat_sfPoC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfTYv() //  [R1]
         { []
         }
     {offset
       cfTYv: // global
           I64[Sp - 8] = block_cfTYD_info;
           _sfPoz::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPoz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufTYR; else goto cfTYF;
       ufTYR: // global
           call _cfTYD(R1) args: 0, res: 0, upd: 0;
       cfTYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTYv_info" {
     block_cfTYv_info:
         const _cfTYv;
         const 2;
         const 30;
 },
 _cfTYD() //  [R1]
         { []
         }
     {offset
       cfTYD: // global
           if (R1 & 7 == 1) goto cfTYL; else goto cfTYP;
       cfTYL: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfTYP: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTYD_info" {
     block_cfTYD_info:
         const _cfTYD;
         const 3;
         const 30;
 },
 sat_sfPos_entry() //  [R1]
         { []
         }
     {offset
       cfTZj: // global
           _sfPos::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfTZk; else goto cfTZl;
       cfTZl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTZn; else goto cfTZm;
       cfTZn: // global
           HpAlloc = 56;
           goto cfTZk;
       cfTZk: // global
           R1 = _sfPos::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPos::P64;
           _sfPob::P64 = P64[_sfPos::P64 + 16];
           _sfPod::P64 = P64[_sfPos::P64 + 24];
           _sfPoi::P64 = P64[_sfPos::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPoi::P64;
           P64[Hp - 24] = _sfPob::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPod::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPos_info" {
     sat_sfPos_info:
         const sat_sfPos_entry;
         const 3;
         const 15;
 },
 sat_sfPoo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTZz: // global
           _sfPol::P64 = R2;
           _sfPoo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfTZA; else goto cfTZB;
       cfTZB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTZD; else goto cfTZC;
       cfTZD: // global
           HpAlloc = 56;
           goto cfTZA;
       cfTZA: // global
           R2 = _sfPol::P64;
           R1 = _sfPoo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTZC: // global
           _sfPod::P64 = P64[_sfPoo::P64 + 7];
           _sfPoi::P64 = P64[_sfPoo::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPoi::P64;
           P64[Hp - 24] = _sfPol::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPod::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoo_info" {
     sat_sfPoo_info:
         const sat_sfPoo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPop_entry() //  [R1]
         { []
         }
     {offset
       cfTZE: // global
           _sfPop::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfTZF; else goto cfTZG;
       cfTZG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfTZI; else goto cfTZH;
       cfTZI: // global
           HpAlloc = 24;
           goto cfTZF;
       cfTZF: // global
           R1 = _sfPop::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfTZH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPop::P64;
           _sfPod::P64 = P64[_sfPop::P64 + 16];
           _sfPoe::P64 = P64[_sfPop::P64 + 24];
           _sfPoi::P64 = P64[_sfPop::P64 + 32];
           I64[Hp - 16] = sat_sfPoo_info;
           P64[Hp - 8] = _sfPod::P64;
           P64[Hp] = _sfPoi::P64;
           R2 = _sfPod::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPoe::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPop_info" {
     sat_sfPop_info:
         const sat_sfPop_entry;
         const 3;
         const 15;
 },
 sat_sfPov_entry() //  [R1, R2]
         { []
         }
     {offset
       cfTZJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfTZK; else goto cfTZL;
       cfTZK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfTZL: // global
           I64[Sp - 40] = block_cfTZ3_info;
           _sfPo9::P64 = P64[R1 + 7];
           _sfPob::P64 = P64[R1 + 15];
           _sfPod::P64 = P64[R1 + 23];
           _sfPoe::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPo9::P64;
           P64[Sp - 24] = _sfPob::P64;
           P64[Sp - 16] = _sfPod::P64;
           P64[Sp - 8] = _sfPoe::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufU02; else goto cfTZ4;
       ufU02: // global
           call _cfTZ3(R1) args: 0, res: 0, upd: 0;
       cfTZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPov_info" {
     sat_sfPov_info:
         const sat_sfPov_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfTZ3() //  [R1]
         { []
         }
     {offset
       cfTZ3: // global
           I64[Sp - 8] = block_cfTZ8_info;
           _sfPoi::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPoi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufU01; else goto cfTZ9;
       ufU01: // global
           call _cfTZ8(R1) args: 0, res: 0, upd: 0;
       cfTZ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTZ3_info" {
     block_cfTZ3_info:
         const _cfTZ3;
         const 4;
         const 30;
 },
 _cfTZ8() //  [R1]
         { []
         }
     {offset
       cfTZ8: // global
           _sfPob::P64 = P64[Sp + 24];
           _sfPod::P64 = P64[Sp + 32];
           _sfPoi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfTZO; else goto cfTZS;
       cfTZO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfTZR; else goto cfTZQ;
       cfTZR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTZQ: // global
           I64[Hp - 72] = sat_sfPos_info;
           P64[Hp - 56] = _sfPob::P64;
           P64[Hp - 48] = _sfPod::P64;
           P64[Hp - 40] = _sfPoi::P64;
           I64[Hp - 32] = sat_sfPop_info;
           P64[Hp - 16] = _sfPod::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPoi::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfTZS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfTZX; else goto cfTZW;
       cfTZX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfTZW: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPoi::P64;
           P64[Hp - 24] = _sfPob::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPod::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTZ8_info" {
     block_cfTZ8_info:
         const _cfTZ8;
         const 5;
         const 30;
 },
 sat_sfPof_entry() //  [R1]
         { []
         }
     {offset
       cfU07: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfU08; else goto cfU09;
       cfU08: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU09: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataMax1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPof_info" {
     sat_sfPof_info:
         const sat_sfPof_entry;
         const 1;
         const 16;
 },
 sat_sfPow_entry() //  [R1]
         { []
         }
     {offset
       cfU0a: // global
           _sfPow::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfU0b; else goto cfU0c;
       cfU0c: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfU0e; else goto cfU0d;
       cfU0e: // global
           HpAlloc = 104;
           goto cfU0b;
       cfU0b: // global
           R1 = _sfPow::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU0d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPow::P64;
           _sfPo8::P64 = P64[_sfPow::P64 + 16];
           _sfPo9::P64 = P64[_sfPow::P64 + 24];
           _sfPoa::P64 = P64[_sfPow::P64 + 32];
           _sfPob::P64 = P64[_sfPow::P64 + 40];
           _sfPod::P64 = P64[_sfPow::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPoa::P64;
           P64[Hp - 72] = _sfPo8::P64;
           P64[Hp - 64] = _sfPob::P64;
           I64[Hp - 56] = sat_sfPov_info;
           P64[Hp - 48] = _sfPo9::P64;
           P64[Hp - 40] = _sfPob::P64;
           P64[Hp - 32] = _sfPod::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPof_info;
           P64[Hp] = _sfPod::P64;
           R2 = _sfPod::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPow_info" {
     sat_sfPow_info:
         const sat_sfPow_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataMax_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfU0f: // global
           _sfPob::P64 = R5;
           _sfPoa::P64 = R4;
           _sfPo9::P64 = R3;
           _sfPo8::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfU0g; else goto cfU0h;
       cfU0h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfU0j; else goto cfU0i;
       cfU0j: // global
           HpAlloc = 24;
           goto cfU0g;
       cfU0g: // global
           R5 = _sfPob::P64;
           R4 = _sfPoa::P64;
           R3 = _sfPo9::P64;
           R2 = _sfPo8::P64;
           R1 = Data.Semigroup.$fDataMax_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU0i: // global
           I64[Hp - 16] = lvl33_sfPoc_info;
           P64[Hp] = _sfPo9::P64;
           I64[Sp - 48] = block_cfTYm_info;
           R2 = _sfPo9::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPo8::P64;
           P64[Sp - 24] = _sfPo9::P64;
           P64[Sp - 16] = _sfPoa::P64;
           P64[Sp - 8] = _sfPob::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_$cgmapMo_info" {
     Data.Semigroup.$fDataMax_$cgmapMo_info:
         const Data.Semigroup.$fDataMax_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfTYm() //  [R1]
         { []
         }
     {offset
       cfTYm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfU0m; else goto cfU0l;
       cfU0m: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfU0l: // global
           I64[Hp - 72] = sat_sfPoC_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPow_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfTYm_info" {
     block_cfTYm_info:
         const _cfTYm;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.039032663 UTC

[section ""data" . lvl15_rfC6S_closure" {
     lvl15_rfC6S_closure:
         const lvl15_rfC6S_info;
         const 0;
 },
 lvl15_rfC6S_entry() //  []
         { []
         }
     {offset
       cfU2q: // global
           R1 = Data.Semigroup.$cMax_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_rfC6S_info" {
     lvl15_rfC6S_info:
         const lvl15_rfC6S_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.042825964 UTC

[section ""data" . lvl16_rfC6T_closure" {
     lvl16_rfC6T_closure:
         const lvl16_rfC6T_info;
         const 0;
 },
 lvl16_rfC6T_entry() //  []
         { []
         }
     {offset
       cfU2C: // global
           R1 = Data.Semigroup.$tMax_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl16_rfC6T_info" {
     lvl16_rfC6T_info:
         const lvl16_rfC6T_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.046194742 UTC

[section ""data" . lvl17_rfC6U_closure" {
     lvl17_rfC6U_closure:
         const lvl17_rfC6U_info;
 },
 lvl17_rfC6U_entry() //  []
         { []
         }
     {offset
       cfU2O: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl17_rfC6U_info" {
     lvl17_rfC6U_info:
         const lvl17_rfC6U_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.055172296 UTC

[section ""data" . Data.Semigroup.$fDataMax_closure" {
     Data.Semigroup.$fDataMax_closure:
         const Data.Semigroup.$fDataMax_info;
         const 0;
 },
 sat_sfPpc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU36: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapMo_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpc_info" {
     sat_sfPpc_info:
         const sat_sfPpc_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPpb_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU3e: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapMp_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpb_info" {
     sat_sfPpb_info:
         const sat_sfPpb_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPpa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU3m: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapM_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpa_info" {
     sat_sfPpa_info:
         const sat_sfPpa_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPp9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU3u: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgmapQi_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPp9_info" {
     sat_sfPp9_info:
         const sat_sfPp9_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1248;
 },
 sat_sfPp8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfU3E: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfU3I; else goto cfU3H;
       cfU3I: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU3H: // global
           _sfPoH::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfPoH::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPp8_info" {
     sat_sfPp8_info:
         const sat_sfPp8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPp4_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfU3P: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfU3T; else goto cfU3S;
       cfU3T: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU3S: // global
           _sfPoH::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPoH::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfPoZ::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfPoZ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPp4_info" {
     sat_sfPp4_info:
         const sat_sfPp4_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPoY_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfU40: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfU44; else goto cfU43;
       cfU44: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU43: // global
           _sfPoH::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPoH::P64;
           P64[Hp] = R5;
           _sfPoU::P64 = R3;
           R3 = Hp - 32;
           _sfPoT::P64 = R2;
           R2 = _sfPoU::P64;
           R1 = _sfPoT::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoY_info" {
     sat_sfPoY_info:
         const sat_sfPoY_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPoS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfU4a: // global
           R3 = R3;
           _sfPoQ::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfPoQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoS_info" {
     sat_sfPoS_info:
         const sat_sfPoS_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPoP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfU4i: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataMax_$cdataCast1_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoP_info" {
     sat_sfPoP_info:
         const sat_sfPoP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1240;
 },
 sat_sfPoN_entry() //  [R1]
         { []
         }
     {offset
       cfU4u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfU4v; else goto cfU4w;
       cfU4v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU4w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPoN_info" {
     sat_sfPoN_info:
         const sat_sfPoN_entry;
         const 1;
         const 16;
 },
 sat_sfPoO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU4x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfU4B; else goto cfU4A;
       cfU4B: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU4A: // global
           _sfPoH::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfPoN_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfPoK::P64 = R2;
           R2 = _sfPoH::P64;
           R1 = _sfPoK::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoO_info" {
     sat_sfPoO_info:
         const sat_sfPoO_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPoJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfU4H: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataMax_$cgfoldl_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPoJ_info" {
     sat_sfPoJ_info:
         const sat_sfPoJ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPoI_entry() //  [R1]
         { []
         }
     {offset
       cfU4O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfU4P; else goto cfU4Q;
       cfU4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU4Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataMax8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPoI_info" {
     sat_sfPoI_info:
         const sat_sfPoI_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1232;
 },
 Data.Semigroup.$fDataMax_entry() //  [R2]
         { []
         }
     {offset
       cfU4S: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfU4W; else goto cfU4V;
       cfU4W: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataMax_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfU4V: // global
           I64[Hp - 320] = sat_sfPpc_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPpb_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPpa_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPp9_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPp8_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPp4_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPoY_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPoS_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPoP_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPoO_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPoJ_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPoI_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl15_rfC6S_closure+1;
           P64[Hp - 80] = lvl16_rfC6T_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl17_rfC6U_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataMax_info" {
     Data.Semigroup.$fDataMax_info:
         const Data.Semigroup.$fDataMax_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfPCb_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.080754653 UTC

[section ""data" . Data.Semigroup.$fDataArg5_closure" {
     Data.Semigroup.$fDataArg5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataArg6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.082696494 UTC

[section ""data" . Data.Semigroup.$tcArg_closure" {
     Data.Semigroup.$tcArg_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataArg5_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12181131229304595757;
         const 13964868205162960136;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.084504296 UTC

[section ""data" . $krep6_rfC6V_closure" {
     $krep6_rfC6V_closure:
         const :_con_info;
         const $krep_rfC6J_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.086222817 UTC

[section ""data" . $krep7_rfC6W_closure" {
     $krep7_rfC6W_closure:
         const :_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep6_rfC6V_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.087902153 UTC

[section ""data" . $krep8_rfC6X_closure" {
     $krep8_rfC6X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcArg_closure+1;
         const $krep7_rfC6W_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.089616902 UTC

[section ""data" . $krep9_rfC6Y_closure" {
     $krep9_rfC6Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rfC6J_closure+2;
         const $krep8_rfC6X_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.091407306 UTC

[section ""data" . Data.Semigroup.$tc'Arg1_closure" {
     Data.Semigroup.$tc'Arg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep9_rfC6Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.09316884 UTC

[section ""cstring" . Data.Semigroup.$tc'Arg3_bytes" {
     Data.Semigroup.$tc'Arg3_bytes:
         I8[] [39,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.094939585 UTC

[section ""data" . Data.Semigroup.$tc'Arg2_closure" {
     Data.Semigroup.$tc'Arg2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Arg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.09667141 UTC

[section ""data" . Data.Semigroup.$tc'Arg_closure" {
     Data.Semigroup.$tc'Arg_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Arg2_closure+1;
         const Data.Semigroup.$tc'Arg1_closure+4;
         const 1079323530693211499;
         const 7260223244427450599;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.100544309 UTC

[section ""data" . Data.Semigroup.$fDataArg4_closure" {
     Data.Semigroup.$fDataArg4_closure:
         const Data.Semigroup.$fDataArg4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataArg4_entry() //  [R1]
         { []
         }
     {offset
       cfU6F: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfU6G; else goto cfU6H;
       cfU6G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU6H: // global
           (_cfU6x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfU6x::I64 == 0) goto cfU6z; else goto cfU6y;
       cfU6z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfU6y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfU6x::I64;
           I64[Sp - 24] = block_cfU6A_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataArg5_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 13964868205162960136;
           R2 = 12181131229304595757;
           P64[Sp - 40] = GHC.Types.krep$*->*->*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg4_info" {
     Data.Semigroup.$fDataArg4_info:
         const Data.Semigroup.$fDataArg4_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1120;
 },
 _cfU6A() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfU6A: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfU6B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfU6A_info" {
     block_cfU6A_info:
         const _cfU6A;
         const 0;
         const 30;
 },
 _cfU6B() //  []
         { []
         }
     {offset
       cfU6B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfU6K; else goto cfU6J;
       cfU6K: // global
           HpAlloc = 48;
           I64[Sp] = block_cfU6B_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfU6J: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfU6B_info" {
     block_cfU6B_info:
         const _cfU6B;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.109703788 UTC

[section ""data" . Data.Semigroup.$fDataArg10_closure" {
     Data.Semigroup.$fDataArg10_closure:
         const Data.Semigroup.$fDataArg10_info;
         const 0;
 },
 Data.Semigroup.$fDataArg10_entry() //  [R2, R3]
         { []
         }
     {offset
       cfU7j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfU7r; else goto cfU7s;
       cfU7r: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU7s: // global
           I64[Sp - 16] = block_cfU7h_info;
           _sfPpj::P64 = R2;
           R2 = R3;
           P64[Sp - 8] = _sfPpj::P64;
           Sp = Sp - 16;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg10_info" {
     Data.Semigroup.$fDataArg10_info:
         const Data.Semigroup.$fDataArg10_entry;
         const 0;
         const 27021602059190286;
         const 8589934607;
         const SfPCb_srt+1128;
 },
 _cfU7h() //  [R1]
         { []
         }
     {offset
       cfU7h: // global
           I64[Sp] = block_cfU7m_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU7h_info" {
     block_cfU7h_info:
         const _cfU7h;
         const 1;
         const 9007203549708318;
         const SfPCb_srt+1128;
 },
 _cfU7m() //  [R1]
         { []
         }
     {offset
       cfU7m: // global
           I64[Sp] = block_cfU7q_info;
           R3 = R1;
           R2 = Data.Semigroup.$fDataArg4_closure;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU7m_info" {
     block_cfU7m_info:
         const _cfU7m;
         const 1;
         const 9007203549708318;
         const SfPCb_srt+1128;
 },
 _cfU7q() //  [R1]
         { []
         }
     {offset
       cfU7q: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU7q_info" {
     block_cfU7q_info:
         const _cfU7q;
         const 1;
         const 4294967326;
         const SfPCb_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.120108703 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cdataCast2_closure" {
     Data.Semigroup.$fDataArg_$cdataCast2_closure:
         const Data.Semigroup.$fDataArg_$cdataCast2_info;
         const 0;
 },
 lvl33_sfPpr_entry() //  [R1]
         { []
         }
     {offset
       cfU7Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfU7Z; else goto cfU80;
       cfU7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataArg4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPpr_info" {
     lvl33_sfPpr_info:
         const lvl33_sfPpr_entry;
         const 1;
         const 1125904201809936;
         const SfPCb_srt+1152;
 },
 sat_sfPpv_entry() //  [R1, R2]
         { []
         }
     {offset
       cfU8d: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfU8e; else goto cfU8f;
       cfU8e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfU8f: // global
           I64[Sp - 32] = block_cfU86_info;
           _sfPpo::P64 = P64[R1 + 7];
           _sfPpp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sfPpo::P64;
           P64[Sp - 16] = _sfPpp::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufU8q; else goto cfU87;
       ufU8q: // global
           call _cfU86(R1) args: 0, res: 0, upd: 0;
       cfU87: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpv_info" {
     sat_sfPpv_info:
         const sat_sfPpv_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cfU86() //  [R1]
         { []
         }
     {offset
       cfU86: // global
           if (R1 & 7 == 1) goto cfU8a; else goto cfU8b;
       cfU8a: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfU8b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfU8p; else goto cfU8o;
       cfU8p: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfU8o: // global
           I64[Hp - 48] = stg_ap_3_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU86_info" {
     block_cfU86_info:
         const _cfU86;
         const 3;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cdataCast2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfU8r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfU8v; else goto cfU8u;
       cfU8v: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cdataCast2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfU8u: // global
           I64[Hp - 48] = lvl33_sfPpr_info;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_sfPpv_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cdataCast2_info" {
     Data.Semigroup.$fDataArg_$cdataCast2_info:
         const Data.Semigroup.$fDataArg_$cdataCast2_entry;
         const 0;
         const 5629503829180430;
         const 12884901911;
         const SfPCb_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.129426999 UTC

[section ""data" . Data.Semigroup.$fDataArg1_closure" {
     Data.Semigroup.$fDataArg1_closure:
         const (,)_con_info;
         const Data.Semigroup.Arg_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.140219152 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapMp_closure" {
     Data.Semigroup.$fDataArg_$cgmapMp_closure:
         const Data.Semigroup.$fDataArg_$cgmapMp_info;
 },
 lvl33_sfPpB_entry() //  [R1]
         { []
         }
     {offset
       cfU9c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfU9d; else goto cfU9e;
       cfU9d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfU9e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPpB_info" {
     lvl33_sfPpB_info:
         const lvl33_sfPpB_entry;
         const 1;
         const 16;
 },
 sat_sfPq6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfU9r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfU9s; else goto cfU9t;
       cfU9s: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfU9t: // global
           I64[Sp - 24] = block_cfU9o_info;
           _sfPpB::P64 = P64[R1 + 7];
           _sfPpC::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPpB::P64;
           P64[Sp - 8] = _sfPpC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufU9L; else goto cfU9p;
       ufU9L: // global
           call _cfU9o(R1) args: 0, res: 0, upd: 0;
       cfU9p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPq6_info" {
     sat_sfPq6_info:
         const sat_sfPq6_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfU9o() //  [R1]
         { []
         }
     {offset
       cfU9o: // global
           I64[Sp - 8] = block_cfU9w_info;
           _sfPq3::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPq3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufU9K; else goto cfU9y;
       ufU9K: // global
           call _cfU9w(R1) args: 0, res: 0, upd: 0;
       cfU9y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU9o_info" {
     block_cfU9o_info:
         const _cfU9o;
         const 2;
         const 30;
 },
 _cfU9w() //  [R1]
         { []
         }
     {offset
       cfU9w: // global
           if (R1 & 7 == 1) goto cfU9E; else goto cfU9I;
       cfU9E: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfU9I: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU9w_info" {
     block_cfU9w_info:
         const _cfU9w;
         const 3;
         const 30;
 },
 sat_sfPpW_entry() //  [R1]
         { []
         }
     {offset
       cfUah: // global
           _sfPpW::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUai; else goto cfUaj;
       cfUaj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUal; else goto cfUak;
       cfUal: // global
           HpAlloc = 56;
           goto cfUai;
       cfUai: // global
           R1 = _sfPpW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPpW::P64;
           _sfPpC::P64 = P64[_sfPpW::P64 + 16];
           _sfPpJ::P64 = P64[_sfPpW::P64 + 24];
           _sfPpN::P64 = P64[_sfPpW::P64 + 32];
           _sfPpO::P64 = P64[_sfPpW::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPpN::P64;
           P64[Hp - 24] = _sfPpJ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPpO::P64;
           R2 = _sfPpC::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPpW_info" {
     sat_sfPpW_info:
         const sat_sfPpW_entry;
         const 4;
         const 15;
 },
 sat_sfPpS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUax: // global
           _sfPpP::P64 = R2;
           _sfPpS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUay; else goto cfUaz;
       cfUaz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUaB; else goto cfUaA;
       cfUaB: // global
           HpAlloc = 56;
           goto cfUay;
       cfUay: // global
           R2 = _sfPpP::P64;
           R1 = _sfPpS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUaA: // global
           _sfPpC::P64 = P64[_sfPpS::P64 + 7];
           _sfPpN::P64 = P64[_sfPpS::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPpN::P64;
           P64[Hp - 24] = _sfPpP::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPpC::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpS_info" {
     sat_sfPpS_info:
         const sat_sfPpS_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPpT_entry() //  [R1]
         { []
         }
     {offset
       cfUaC: // global
           _sfPpT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUaD; else goto cfUaE;
       cfUaE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUaG; else goto cfUaF;
       cfUaG: // global
           HpAlloc = 24;
           goto cfUaD;
       cfUaD: // global
           R1 = _sfPpT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUaF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPpT::P64;
           _sfPpC::P64 = P64[_sfPpT::P64 + 16];
           _sfPpK::P64 = P64[_sfPpT::P64 + 24];
           _sfPpN::P64 = P64[_sfPpT::P64 + 32];
           I64[Hp - 16] = sat_sfPpS_info;
           P64[Hp - 8] = _sfPpC::P64;
           P64[Hp] = _sfPpN::P64;
           R2 = _sfPpC::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPpK::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPpT_info" {
     sat_sfPpT_info:
         const sat_sfPpT_entry;
         const 3;
         const 15;
 },
 sat_sfPpX_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUaH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfUaI; else goto cfUaJ;
       cfUaI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUaJ: // global
           I64[Sp - 40] = block_cfUa6_info;
           _sfPpy::P64 = P64[R1 + 7];
           _sfPpC::P64 = P64[R1 + 15];
           _sfPpJ::P64 = P64[R1 + 23];
           _sfPpK::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPpy::P64;
           P64[Sp - 24] = _sfPpC::P64;
           P64[Sp - 16] = _sfPpJ::P64;
           P64[Sp - 8] = _sfPpK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUaN; else goto cfUa7;
       ufUaN: // global
           call _cfUa6(R1) args: 0, res: 0, upd: 0;
       cfUa7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPpX_info" {
     sat_sfPpX_info:
         const sat_sfPpX_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUa6() //  [R1]
         { []
         }
     {offset
       cfUa6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUaM; else goto cfUaL;
       cfUaM: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUaL: // global
           _sfPpN::P64 = P64[R1 + 7];
           _sfPpO::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPpW_info;
           _sfPpC::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sfPpC::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sfPpN::P64;
           P64[Hp - 40] = _sfPpO::P64;
           I64[Hp - 32] = sat_sfPpT_info;
           P64[Hp - 16] = _sfPpC::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPpN::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUa6_info" {
     block_cfUa6_info:
         const _cfUa6;
         const 4;
         const 30;
 },
 k_sfPpG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUaO: // global
           _sfPpJ::P64 = R4;
           _sfPpI::P64 = R3;
           _sfPpH::P64 = R2;
           _sfPpG::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUaP; else goto cfUaQ;
       cfUaQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUaS; else goto cfUaR;
       cfUaS: // global
           HpAlloc = 80;
           goto cfUaP;
       cfUaP: // global
           R4 = _sfPpJ::P64;
           R3 = _sfPpI::P64;
           R2 = _sfPpH::P64;
           R1 = _sfPpG::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUaR: // global
           _sfPpy::P64 = P64[_sfPpG::P64 + 5];
           _sfPpz::P64 = P64[_sfPpG::P64 + 13];
           _sfPpC::P64 = P64[_sfPpG::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfPpz::P64;
           P64[Hp - 48] = _sfPpH::P64;
           P64[Hp - 40] = _sfPpJ::P64;
           I64[Hp - 32] = sat_sfPpX_info;
           P64[Hp - 24] = _sfPpy::P64;
           P64[Hp - 16] = _sfPpC::P64;
           P64[Hp - 8] = _sfPpJ::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfPpC::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPpI::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfPpG_info" {
     k_sfPpG_info:
         const k_sfPpG_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfPpY_entry() //  [R1]
         { []
         }
     {offset
       cfUb1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUb2; else goto cfUb3;
       cfUb2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUb3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataArg1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPpY_info" {
     sat_sfPpY_info:
         const sat_sfPpY_entry;
         const 1;
         const 16;
 },
 sat_sfPpZ_entry() //  [R1]
         { []
         }
     {offset
       cfUb4: // global
           _sfPpZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUb5; else goto cfUb6;
       cfUb6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUb8; else goto cfUb7;
       cfUb8: // global
           HpAlloc = 24;
           goto cfUb5;
       cfUb5: // global
           R1 = _sfPpZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUb7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPpZ::P64;
           _sfPpw::P64 = P64[_sfPpZ::P64 + 16];
           _sfPpC::P64 = P64[_sfPpZ::P64 + 24];
           _sfPpE::P64 = P64[_sfPpZ::P64 + 32];
           _sfPpG::P64 = P64[_sfPpZ::P64 + 40];
           I64[Hp - 16] = sat_sfPpY_info;
           P64[Hp] = _sfPpC::P64;
           R4 = _sfPpE::P64;
           R3 = Hp - 16;
           R2 = _sfPpw::P64;
           R1 = _sfPpG::P64;
           Sp = Sp - 16;
           call k_sfPpG_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPpZ_info" {
     sat_sfPpZ_info:
         const sat_sfPpZ_entry;
         const 4;
         const 15;
 },
 sat_sfPq0_entry() //  [R1]
         { []
         }
     {offset
       cfUb9: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfUba; else goto cfUbb;
       cfUba: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUbb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cfU9Q_info;
           _sfPpw::P64 = P64[R1 + 16];
           _sfPpx::P64 = P64[R1 + 24];
           _sfPpy::P64 = P64[R1 + 32];
           _sfPpz::P64 = P64[R1 + 40];
           _sfPpC::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sfPpw::P64;
           P64[Sp - 48] = _sfPpx::P64;
           P64[Sp - 40] = _sfPpy::P64;
           P64[Sp - 32] = _sfPpz::P64;
           P64[Sp - 24] = _sfPpC::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ufUbf; else goto cfU9R;
       ufUbf: // global
           call _cfU9Q(R1) args: 0, res: 0, upd: 0;
       cfU9R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPq0_info" {
     sat_sfPq0_info:
         const sat_sfPq0_entry;
         const 6;
         const 15;
 },
 _cfU9Q() //  [R1]
         { []
         }
     {offset
       cfU9Q: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUbe; else goto cfUbd;
       cfUbe: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfUbd: // global
           _sfPpE::P64 = P64[R1 + 7];
           _sfPpF::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sfPpG_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sfPpC::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sfPpC::P64;
           I64[Hp - 40] = sat_sfPpZ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfPpC::P64;
           P64[Hp - 8] = _sfPpE::P64;
           _cfU9V::P64 = Hp - 69;
           P64[Hp] = _cfU9V::P64;
           R4 = _sfPpF::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cfU9V::P64;
           Sp = Sp + 48;
           call k_sfPpG_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfU9Q_info" {
     block_cfU9Q_info:
         const _cfU9Q;
         const 5;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUbg: // global
           _sfPpA::P64 = R6;
           _sfPpz::P64 = R5;
           _sfPpy::P64 = R4;
           _sfPpx::P64 = R3;
           _sfPpw::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cfUbh; else goto cfUbi;
       cfUbi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUbk; else goto cfUbj;
       cfUbk: // global
           HpAlloc = 24;
           goto cfUbh;
       cfUbh: // global
           R6 = _sfPpA::P64;
           R5 = _sfPpz::P64;
           R4 = _sfPpy::P64;
           R3 = _sfPpx::P64;
           R2 = _sfPpw::P64;
           R1 = Data.Semigroup.$fDataArg_$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUbj: // global
           I64[Hp - 16] = lvl33_sfPpB_info;
           P64[Hp] = _sfPpy::P64;
           I64[Sp - 56] = block_cfU9f_info;
           R2 = _sfPpy::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfPpw::P64;
           P64[Sp - 32] = _sfPpx::P64;
           P64[Sp - 24] = _sfPpy::P64;
           P64[Sp - 16] = _sfPpz::P64;
           P64[Sp - 8] = _sfPpA::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapMp_info" {
     Data.Semigroup.$fDataArg_$cgmapMp_info:
         const Data.Semigroup.$fDataArg_$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfU9f() //  [R1]
         { []
         }
     {offset
       cfU9f: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUbn; else goto cfUbm;
       cfUbn: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUbm: // global
           I64[Hp - 80] = sat_sfPq6_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfPq0_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfU9f_info" {
     block_cfU9f_info:
         const _cfU9f;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.178063475 UTC

[section ""data" . Data.Semigroup.$w$cgmapM_closure" {
     Data.Semigroup.$w$cgmapM_closure:
         const Data.Semigroup.$w$cgmapM_info;
 },
 sat_sfPql_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUdM: // global
           _sfPqj::P64 = R2;
           _sfPql::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUdN; else goto cfUdO;
       cfUdO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfUdQ; else goto cfUdP;
       cfUdQ: // global
           HpAlloc = 32;
           goto cfUdN;
       cfUdN: // global
           R2 = _sfPqj::P64;
           R1 = _sfPql::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUdP: // global
           _sfPq9::P64 = P64[_sfPql::P64 + 7];
           _sfPqi::P64 = P64[_sfPql::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPqi::P64;
           P64[Hp] = _sfPqj::P64;
           R2 = _sfPq9::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPql_info" {
     sat_sfPql_info:
         const sat_sfPql_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPqm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUdR: // global
           _sfPqi::P64 = R2;
           _sfPqm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUdS; else goto cfUdT;
       cfUdT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUdV; else goto cfUdU;
       cfUdV: // global
           HpAlloc = 24;
           goto cfUdS;
       cfUdS: // global
           R2 = _sfPqi::P64;
           R1 = _sfPqm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUdU: // global
           _sfPq9::P64 = P64[_sfPqm::P64 + 7];
           _sfPqh::P64 = P64[_sfPqm::P64 + 15];
           I64[Hp - 16] = sat_sfPql_info;
           P64[Hp - 8] = _sfPq9::P64;
           P64[Hp] = _sfPqi::P64;
           R2 = _sfPq9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPqh::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPqm_info" {
     sat_sfPqm_info:
         const sat_sfPqm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k_sfPqd_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUdW: // global
           _sfPqg::P64 = R4;
           _sfPqf::P64 = R3;
           _sfPqe::P64 = R2;
           _sfPqd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUdX; else goto cfUdY;
       cfUdY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfUe0; else goto cfUdZ;
       cfUe0: // global
           HpAlloc = 64;
           goto cfUdX;
       cfUdX: // global
           R4 = _sfPqg::P64;
           R3 = _sfPqf::P64;
           R2 = _sfPqe::P64;
           R1 = _sfPqd::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUdZ: // global
           _sfPq9::P64 = P64[_sfPqd::P64 + 5];
           _sfPqa::P64 = P64[_sfPqd::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfPqa::P64;
           P64[Hp - 32] = _sfPqe::P64;
           P64[Hp - 24] = _sfPqg::P64;
           I64[Hp - 16] = sat_sfPqm_info;
           P64[Hp - 8] = _sfPq9::P64;
           P64[Hp] = Hp - 56;
           R2 = _sfPq9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPqf::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfPqd_info" {
     k_sfPqd_info:
         const k_sfPqd_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPqn_entry() //  [R1]
         { []
         }
     {offset
       cfUe9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUea; else goto cfUeb;
       cfUea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUeb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.Arg_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPqn_info" {
     sat_sfPqn_info:
         const sat_sfPqn_entry;
         const 1;
         const 16;
 },
 sat_sfPqo_entry() //  [R1]
         { []
         }
     {offset
       cfUec: // global
           _sfPqo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUed; else goto cfUee;
       cfUee: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUeg; else goto cfUef;
       cfUeg: // global
           HpAlloc = 24;
           goto cfUed;
       cfUed: // global
           R1 = _sfPqo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUef: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPqo::P64;
           _sfPq7::P64 = P64[_sfPqo::P64 + 16];
           _sfPq9::P64 = P64[_sfPqo::P64 + 24];
           _sfPqb::P64 = P64[_sfPqo::P64 + 32];
           _sfPqd::P64 = P64[_sfPqo::P64 + 40];
           I64[Hp - 16] = sat_sfPqn_info;
           P64[Hp] = _sfPq9::P64;
           R4 = _sfPqb::P64;
           R3 = Hp - 16;
           R2 = _sfPq7::P64;
           R1 = _sfPqd::P64;
           Sp = Sp - 16;
           call k_sfPqd_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPqo_info" {
     sat_sfPqo_info:
         const sat_sfPqo_entry;
         const 4;
         const 15;
 },
 Data.Semigroup.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUeh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfUel; else goto cfUek;
       cfUel: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfUek: // global
           I64[Hp - 64] = k_sfPqd_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = sat_sfPqo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R6;
           _cfUdv::P64 = Hp - 61;
           P64[Hp] = _cfUdv::P64;
           R4 = P64[Sp];
           _sfPq8::P64 = R3;
           R3 = Hp - 40;
           R2 = _sfPq8::P64;
           R1 = _cfUdv::P64;
           Sp = Sp + 8;
           call k_sfPqd_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$w$cgmapM_info" {
     Data.Semigroup.$w$cgmapM_info:
         const Data.Semigroup.$w$cgmapM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.192631692 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapM_closure" {
     Data.Semigroup.$fDataArg_$cgmapM_closure:
         const Data.Semigroup.$fDataArg_$cgmapM_info;
 },
 Data.Semigroup.$fDataArg_$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUf9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfUfa; else goto cfUfb;
       cfUfa: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUfb: // global
           I64[Sp - 40] = block_cfUf6_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUff; else goto cfUf7;
       ufUff: // global
           call _cfUf6(R1) args: 0, res: 0, upd: 0;
       cfUf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapM_info" {
     Data.Semigroup.$fDataArg_$cgmapM_info:
         const Data.Semigroup.$fDataArg_$cgmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfUf6() //  [R1]
         { []
         }
     {offset
       cfUf6: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Semigroup.$w$cgmapM_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUf6_info" {
     block_cfUf6_info:
         const _cfUf6;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.199761451 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQi_closure" {
     Data.Semigroup.$fDataArg_$cgmapQi_closure:
         const Data.Semigroup.$fDataArg_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataArg_$cgmapQi_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUfy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfUfC; else goto cfUfD;
       cfUfC: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQi_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUfD: // global
           I64[Sp - 40] = block_cfUfv_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUfR; else goto cfUfw;
       ufUfR: // global
           call _cfUfv(R1) args: 0, res: 0, upd: 0;
       cfUfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQi_info" {
     Data.Semigroup.$fDataArg_$cgmapQi_info:
         const Data.Semigroup.$fDataArg_$cgmapQi_entry;
         const 0;
         const 2251804108652558;
         const 21474836505;
         const SfPCb_srt+1168;
 },
 _cfUfv() //  [R1]
         { []
         }
     {offset
       cfUfv: // global
           I64[Sp - 8] = block_cfUfB_info;
           _sfPqD::P64 = P64[R1 + 7];
           _sfPqE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sfPqE::P64;
           P64[Sp + 24] = _sfPqD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUfQ; else goto cfUfF;
       ufUfQ: // global
           call _cfUfB(R1) args: 0, res: 0, upd: 0;
       cfUfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUfv_info" {
     block_cfUfv_info:
         const _cfUfv;
         const 4;
         const 4294967326;
         const SfPCb_srt+1168;
 },
 _cfUfB() //  [R1]
         { []
         }
     {offset
       cfUfB: // global
           _sfPqA::P64 = P64[Sp + 40];
           _sfPqH::I64 = I64[R1 + 7];
           if (_sfPqH::I64 != 0) goto ufUfP; else goto cfUfN;
       ufUfP: // global
           if (_sfPqH::I64 != 1) goto cfUfM; else goto cfUfO;
       cfUfM: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUfO: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = _sfPqA::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUfN: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           R1 = _sfPqA::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUfB_info" {
     block_cfUfB_info:
         const _cfUfB;
         const 5;
         const 4294967326;
         const SfPCb_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.209905139 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQr_closure" {
     Data.Semigroup.$fDataArg_$cgmapQr_closure:
         const Data.Semigroup.$fDataArg_$cgmapQr_info;
 },
 sat_sfPqT_entry() //  [R1]
         { []
         }
     {offset
       cfUgl: // global
           _sfPqT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUgm; else goto cfUgn;
       cfUgn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUgp; else goto cfUgo;
       cfUgp: // global
           HpAlloc = 40;
           goto cfUgm;
       cfUgm: // global
           R1 = _sfPqT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUgo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPqT::P64;
           _sfPqJ::P64 = P64[_sfPqT::P64 + 16];
           _sfPqK::P64 = P64[_sfPqT::P64 + 24];
           _sfPqL::P64 = P64[_sfPqT::P64 + 32];
           _sfPqM::P64 = P64[_sfPqT::P64 + 40];
           _sfPqQ::P64 = P64[_sfPqT::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfPqM::P64;
           P64[Hp - 8] = _sfPqJ::P64;
           P64[Hp] = _sfPqQ::P64;
           R3 = _sfPqL::P64;
           R2 = Hp - 32;
           R1 = _sfPqK::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPqT_info" {
     sat_sfPqT_info:
         const sat_sfPqT_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataArg_$cgmapQr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUgq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfUgs; else goto cfUgt;
       cfUgs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfUgt: // global
           I64[Sp - 40] = block_cfUgb_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUgx; else goto cfUgc;
       ufUgx: // global
           call _cfUgb(R1) args: 0, res: 0, upd: 0;
       cfUgc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQr_info" {
     Data.Semigroup.$fDataArg_$cgmapQr_info:
         const Data.Semigroup.$fDataArg_$cgmapQr_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cfUgb() //  [R1]
         { []
         }
     {offset
       cfUgb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfUgw; else goto cfUgv;
       cfUgw: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUgv: // global
           _sfPqP::P64 = P64[R1 + 7];
           _sfPqQ::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sfPqT_info;
           P64[Hp - 72] = P64[Sp + 8];
           _sfPqK::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sfPqK::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sfPqM::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sfPqM::P64;
           P64[Hp - 40] = _sfPqQ::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfPqM::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPqP::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sfPqK::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUgb_info" {
     block_cfUgb_info:
         const _cfUgb;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.219217449 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapQ_closure" {
     Data.Semigroup.$fDataArg_$cgmapQ_closure:
         const Data.Semigroup.$fDataArg_$cgmapQ_info;
 },
 Data.Semigroup.$fDataArg_$cgmapQ_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUh0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUh7; else goto cfUh8;
       cfUh7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_$cgmapQ_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUh8: // global
           I64[Sp - 32] = block_cfUgX_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufUhc; else goto cfUgY;
       ufUhc: // global
           call _cfUgX(R1) args: 0, res: 0, upd: 0;
       cfUgY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapQ_info" {
     Data.Semigroup.$fDataArg_$cgmapQ_info:
         const Data.Semigroup.$fDataArg_$cgmapQ_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUgX() //  [R1]
         { []
         }
     {offset
       cfUgX: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfUhb; else goto cfUha;
       cfUhb: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUha: // global
           _sfPqZ::P64 = P64[R1 + 7];
           _sfPr0::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sfPqW::P64 = P64[Sp + 24];
           P64[Hp - 104] = _sfPqW::P64;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = _sfPr0::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfPqW::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfPqZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUgX_info" {
     block_cfUgX_info:
         const _cfUgX;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.227377369 UTC

[section ""data" . Data.Semigroup.$fDataArg2_closure" {
     Data.Semigroup.$fDataArg2_closure:
         const Data.Semigroup.$fDataArg2_info;
 },
 sat_sfPre_entry() //  [R1]
         { []
         }
     {offset
       cfUhO: // global
           _sfPre::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUhP; else goto cfUhQ;
       cfUhQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUhS; else goto cfUhR;
       cfUhS: // global
           HpAlloc = 40;
           goto cfUhP;
       cfUhP: // global
           R1 = _sfPre::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUhR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPre::P64;
           _sfPr4::P64 = P64[_sfPre::P64 + 16];
           _sfPr6::P64 = P64[_sfPre::P64 + 24];
           _sfPr7::P64 = P64[_sfPre::P64 + 32];
           _sfPr8::P64 = P64[_sfPre::P64 + 40];
           _sfPrb::P64 = P64[_sfPre::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfPr8::P64;
           P64[Hp - 8] = _sfPr4::P64;
           P64[Hp] = _sfPrb::P64;
           R3 = Hp - 32;
           R2 = _sfPr7::P64;
           R1 = _sfPr6::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPre_info" {
     sat_sfPre_info:
         const sat_sfPre_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataArg2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUhT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfUhU; else goto cfUhV;
       cfUhU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cfUhV: // global
           I64[Sp - 40] = block_cfUhD_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUhZ; else goto cfUhE;
       ufUhZ: // global
           call _cfUhD(R1) args: 0, res: 0, upd: 0;
       cfUhE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg2_info" {
     Data.Semigroup.$fDataArg2_info:
         const Data.Semigroup.$fDataArg2_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cfUhD() //  [R1]
         { []
         }
     {offset
       cfUhD: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cfUhY; else goto cfUhX;
       cfUhY: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUhX: // global
           _sfPrb::P64 = P64[R1 + 7];
           _sfPrc::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sfPr8::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sfPr8::P64;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sfPrc::P64;
           I64[Hp - 48] = sat_sfPre_info;
           P64[Hp - 32] = P64[Sp + 40];
           _sfPr6::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sfPr6::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sfPr8::P64;
           P64[Hp] = _sfPrb::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sfPr6::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUhD_info" {
     block_cfUhD_info:
         const _cfUhD;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.236465373 UTC

[section ""data" . Data.Semigroup.$fDataArg3_closure" {
     Data.Semigroup.$fDataArg3_closure:
         const Data.Semigroup.$fDataArg3_info;
 },
 Data.Semigroup.$fDataArg3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUis: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUiy; else goto cfUiz;
       cfUiy: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUiz: // global
           I64[Sp - 32] = block_cfUip_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufUiD; else goto cfUiq;
       ufUiD: // global
           call _cfUip(R1) args: 0, res: 0, upd: 0;
       cfUiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg3_info" {
     Data.Semigroup.$fDataArg3_info:
         const Data.Semigroup.$fDataArg3_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUip() //  [R1]
         { []
         }
     {offset
       cfUip: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfUiC; else goto cfUiB;
       cfUiC: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUiB: // global
           _sfPrl::P64 = P64[R1 + 7];
           _sfPrm::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_3_upd_info;
           _sfPri::P64 = P64[Sp + 24];
           P64[Hp - 80] = _sfPri::P64;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sfPrm::P64;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfPri::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sfPrl::P64;
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUip_info" {
     block_cfUip_info:
         const _cfUip;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.25198572 UTC

[section ""data" . Data.Semigroup.$fDataArg_$cgmapMo_closure" {
     Data.Semigroup.$fDataArg_$cgmapMo_closure:
         const Data.Semigroup.$fDataArg_$cgmapMo_info;
 },
 lvl33_sfPru_entry() //  [R1]
         { []
         }
     {offset
       cfUj4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUj5; else goto cfUj6;
       cfUj5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUj6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPru_info" {
     lvl33_sfPru_info:
         const lvl33_sfPru_entry;
         const 1;
         const 16;
 },
 sat_sfPs2_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUjj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUjk; else goto cfUjl;
       cfUjk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUjl: // global
           I64[Sp - 24] = block_cfUjg_info;
           _sfPru::P64 = P64[R1 + 7];
           _sfPrv::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPru::P64;
           P64[Sp - 8] = _sfPrv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUjD; else goto cfUjh;
       ufUjD: // global
           call _cfUjg(R1) args: 0, res: 0, upd: 0;
       cfUjh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPs2_info" {
     sat_sfPs2_info:
         const sat_sfPs2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUjg() //  [R1]
         { []
         }
     {offset
       cfUjg: // global
           I64[Sp - 8] = block_cfUjo_info;
           _sfPrZ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPrZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUjC; else goto cfUjq;
       ufUjC: // global
           call _cfUjo(R1) args: 0, res: 0, upd: 0;
       cfUjq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUjg_info" {
     block_cfUjg_info:
         const _cfUjg;
         const 2;
         const 30;
 },
 _cfUjo() //  [R1]
         { []
         }
     {offset
       cfUjo: // global
           if (R1 & 7 == 1) goto cfUjw; else goto cfUjA;
       cfUjw: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUjA: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUjo_info" {
     block_cfUjo_info:
         const _cfUjo;
         const 3;
         const 30;
 },
 sat_sfPrQ_entry() //  [R1]
         { []
         }
     {offset
       cfUke: // global
           _sfPrQ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUkf; else goto cfUkg;
       cfUkg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUki; else goto cfUkh;
       cfUki: // global
           HpAlloc = 56;
           goto cfUkf;
       cfUkf: // global
           R1 = _sfPrQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUkh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPrQ::P64;
           _sfPrv::P64 = P64[_sfPrQ::P64 + 16];
           _sfPrC::P64 = P64[_sfPrQ::P64 + 24];
           _sfPrG::P64 = P64[_sfPrQ::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPrG::P64;
           P64[Hp - 24] = _sfPrC::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPrv::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPrQ_info" {
     sat_sfPrQ_info:
         const sat_sfPrQ_entry;
         const 3;
         const 15;
 },
 sat_sfPrM_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUku: // global
           _sfPrJ::P64 = R2;
           _sfPrM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUkv; else goto cfUkw;
       cfUkw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUky; else goto cfUkx;
       cfUky: // global
           HpAlloc = 56;
           goto cfUkv;
       cfUkv: // global
           R2 = _sfPrJ::P64;
           R1 = _sfPrM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUkx: // global
           _sfPrv::P64 = P64[_sfPrM::P64 + 7];
           _sfPrG::P64 = P64[_sfPrM::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPrG::P64;
           P64[Hp - 24] = _sfPrJ::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPrv::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPrM_info" {
     sat_sfPrM_info:
         const sat_sfPrM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPrN_entry() //  [R1]
         { []
         }
     {offset
       cfUkz: // global
           _sfPrN::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUkA; else goto cfUkB;
       cfUkB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUkD; else goto cfUkC;
       cfUkD: // global
           HpAlloc = 24;
           goto cfUkA;
       cfUkA: // global
           R1 = _sfPrN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUkC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPrN::P64;
           _sfPrv::P64 = P64[_sfPrN::P64 + 16];
           _sfPrD::P64 = P64[_sfPrN::P64 + 24];
           _sfPrG::P64 = P64[_sfPrN::P64 + 32];
           I64[Hp - 16] = sat_sfPrM_info;
           P64[Hp - 8] = _sfPrv::P64;
           P64[Hp] = _sfPrG::P64;
           R2 = _sfPrv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPrD::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPrN_info" {
     sat_sfPrN_info:
         const sat_sfPrN_entry;
         const 3;
         const 15;
 },
 sat_sfPrT_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUkE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfUkF; else goto cfUkG;
       cfUkF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUkG: // global
           I64[Sp - 40] = block_cfUjY_info;
           _sfPrr::P64 = P64[R1 + 7];
           _sfPrv::P64 = P64[R1 + 15];
           _sfPrC::P64 = P64[R1 + 23];
           _sfPrD::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPrr::P64;
           P64[Sp - 24] = _sfPrv::P64;
           P64[Sp - 16] = _sfPrC::P64;
           P64[Sp - 8] = _sfPrD::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUkX; else goto cfUjZ;
       ufUkX: // global
           call _cfUjY(R1) args: 0, res: 0, upd: 0;
       cfUjZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPrT_info" {
     sat_sfPrT_info:
         const sat_sfPrT_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUjY() //  [R1]
         { []
         }
     {offset
       cfUjY: // global
           I64[Sp - 8] = block_cfUk3_info;
           _sfPrG::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPrG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUkW; else goto cfUk4;
       ufUkW: // global
           call _cfUk3(R1) args: 0, res: 0, upd: 0;
       cfUk4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUjY_info" {
     block_cfUjY_info:
         const _cfUjY;
         const 4;
         const 30;
 },
 _cfUk3() //  [R1]
         { []
         }
     {offset
       cfUk3: // global
           _sfPrv::P64 = P64[Sp + 24];
           _sfPrC::P64 = P64[Sp + 32];
           _sfPrG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfUkJ; else goto cfUkN;
       cfUkJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUkM; else goto cfUkL;
       cfUkM: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUkL: // global
           I64[Hp - 72] = sat_sfPrQ_info;
           P64[Hp - 56] = _sfPrv::P64;
           P64[Hp - 48] = _sfPrC::P64;
           P64[Hp - 40] = _sfPrG::P64;
           I64[Hp - 32] = sat_sfPrN_info;
           P64[Hp - 16] = _sfPrv::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPrG::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfUkN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUkS; else goto cfUkR;
       cfUkS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUkR: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPrG::P64;
           P64[Hp - 24] = _sfPrC::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPrv::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUk3_info" {
     block_cfUk3_info:
         const _cfUk3;
         const 5;
         const 30;
 },
 k_sfPrz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUkY: // global
           _sfPrC::P64 = R4;
           _sfPrB::P64 = R3;
           _sfPrA::P64 = R2;
           _sfPrz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUkZ; else goto cfUl0;
       cfUl0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUl2; else goto cfUl1;
       cfUl2: // global
           HpAlloc = 80;
           goto cfUkZ;
       cfUkZ: // global
           R4 = _sfPrC::P64;
           R3 = _sfPrB::P64;
           R2 = _sfPrA::P64;
           R1 = _sfPrz::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUl1: // global
           _sfPrr::P64 = P64[_sfPrz::P64 + 5];
           _sfPrs::P64 = P64[_sfPrz::P64 + 13];
           _sfPrv::P64 = P64[_sfPrz::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sfPrs::P64;
           P64[Hp - 48] = _sfPrA::P64;
           P64[Hp - 40] = _sfPrC::P64;
           I64[Hp - 32] = sat_sfPrT_info;
           P64[Hp - 24] = _sfPrr::P64;
           P64[Hp - 16] = _sfPrv::P64;
           P64[Hp - 8] = _sfPrC::P64;
           P64[Hp] = Hp - 72;
           R2 = _sfPrv::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPrB::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_sfPrz_info" {
     k_sfPrz_info:
         const k_sfPrz_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sfPrU_entry() //  [R1]
         { []
         }
     {offset
       cfUlb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUlc; else goto cfUld;
       cfUlc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataArg1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPrU_info" {
     sat_sfPrU_info:
         const sat_sfPrU_entry;
         const 1;
         const 16;
 },
 sat_sfPrV_entry() //  [R1]
         { []
         }
     {offset
       cfUle: // global
           _sfPrV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUlf; else goto cfUlg;
       cfUlg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUli; else goto cfUlh;
       cfUli: // global
           HpAlloc = 24;
           goto cfUlf;
       cfUlf: // global
           R1 = _sfPrV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUlh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPrV::P64;
           _sfPrp::P64 = P64[_sfPrV::P64 + 16];
           _sfPrv::P64 = P64[_sfPrV::P64 + 24];
           _sfPrx::P64 = P64[_sfPrV::P64 + 32];
           _sfPrz::P64 = P64[_sfPrV::P64 + 40];
           I64[Hp - 16] = sat_sfPrU_info;
           P64[Hp] = _sfPrv::P64;
           R4 = _sfPrx::P64;
           R3 = Hp - 16;
           R2 = _sfPrp::P64;
           R1 = _sfPrz::P64;
           Sp = Sp - 16;
           call k_sfPrz_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPrV_info" {
     sat_sfPrV_info:
         const sat_sfPrV_entry;
         const 4;
         const 15;
 },
 sat_sfPrW_entry() //  [R1]
         { []
         }
     {offset
       cfUlj: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfUlk; else goto cfUll;
       cfUlk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUll: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cfUjI_info;
           _sfPrp::P64 = P64[R1 + 16];
           _sfPrq::P64 = P64[R1 + 24];
           _sfPrr::P64 = P64[R1 + 32];
           _sfPrs::P64 = P64[R1 + 40];
           _sfPrv::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sfPrp::P64;
           P64[Sp - 48] = _sfPrq::P64;
           P64[Sp - 40] = _sfPrr::P64;
           P64[Sp - 32] = _sfPrs::P64;
           P64[Sp - 24] = _sfPrv::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ufUlp; else goto cfUjJ;
       ufUlp: // global
           call _cfUjI(R1) args: 0, res: 0, upd: 0;
       cfUjJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPrW_info" {
     sat_sfPrW_info:
         const sat_sfPrW_entry;
         const 6;
         const 15;
 },
 _cfUjI() //  [R1]
         { []
         }
     {offset
       cfUjI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUlo; else goto cfUln;
       cfUlo: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfUln: // global
           _sfPrx::P64 = P64[R1 + 7];
           _sfPry::P64 = P64[R1 + 15];
           I64[Hp - 72] = k_sfPrz_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sfPrv::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sfPrv::P64;
           I64[Hp - 40] = sat_sfPrV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sfPrv::P64;
           P64[Hp - 8] = _sfPrx::P64;
           _cfUjN::P64 = Hp - 69;
           P64[Hp] = _cfUjN::P64;
           R4 = _sfPry::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cfUjN::P64;
           Sp = Sp + 48;
           call k_sfPrz_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfUjI_info" {
     block_cfUjI_info:
         const _cfUjI;
         const 5;
         const 30;
 },
 Data.Semigroup.$fDataArg_$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfUlq: // global
           _sfPrt::P64 = R6;
           _sfPrs::P64 = R5;
           _sfPrr::P64 = R4;
           _sfPrq::P64 = R3;
           _sfPrp::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cfUlr; else goto cfUls;
       cfUls: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUlu; else goto cfUlt;
       cfUlu: // global
           HpAlloc = 24;
           goto cfUlr;
       cfUlr: // global
           R6 = _sfPrt::P64;
           R5 = _sfPrs::P64;
           R4 = _sfPrr::P64;
           R3 = _sfPrq::P64;
           R2 = _sfPrp::P64;
           R1 = Data.Semigroup.$fDataArg_$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUlt: // global
           I64[Hp - 16] = lvl33_sfPru_info;
           P64[Hp] = _sfPrr::P64;
           I64[Sp - 56] = block_cfUj7_info;
           R2 = _sfPrr::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sfPrp::P64;
           P64[Sp - 32] = _sfPrq::P64;
           P64[Sp - 24] = _sfPrr::P64;
           P64[Sp - 16] = _sfPrs::P64;
           P64[Sp - 8] = _sfPrt::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_$cgmapMo_info" {
     Data.Semigroup.$fDataArg_$cgmapMo_info:
         const Data.Semigroup.$fDataArg_$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cfUj7() //  [R1]
         { []
         }
     {offset
       cfUj7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUlx; else goto cfUlw;
       cfUlx: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUlw: // global
           I64[Hp - 80] = sat_sfPs2_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sfPrW_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUj7_info" {
     block_cfUj7_info:
         const _cfUj7;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.288707987 UTC

[section ""data" . lvl18_rfC6Z_closure" {
     lvl18_rfC6Z_closure:
         const lvl18_rfC6Z_info;
         const 0;
 },
 lvl18_rfC6Z_entry() //  [R2]
         { []
         }
     {offset
       cfUnX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUnY; else goto cfUnZ;
       cfUnY: // global
           R2 = R2;
           R1 = lvl18_rfC6Z_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUnZ: // global
           I64[Sp - 8] = block_cfUnU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUo3; else goto cfUnV;
       ufUo3: // global
           call _cfUnU() args: 0, res: 0, upd: 0;
       cfUnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl18_rfC6Z_info" {
     lvl18_rfC6Z_info:
         const lvl18_rfC6Z_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfPCb_srt+1328;
 },
 _cfUnU() //  []
         { []
         }
     {offset
       cfUnU: // global
           R1 = Data.Semigroup.$cArg_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUnU_info" {
     block_cfUnU_info:
         const _cfUnU;
         const 0;
         const 4294967326;
         const SfPCb_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.294182607 UTC

[section ""data" . lvl19_rfC70_closure" {
     lvl19_rfC70_closure:
         const lvl19_rfC70_info;
         const 0;
 },
 lvl19_rfC70_entry() //  []
         { []
         }
     {offset
       cfUoj: // global
           R1 = Data.Semigroup.$tArg_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl19_rfC70_info" {
     lvl19_rfC70_info:
         const lvl19_rfC70_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.298647719 UTC

[section ""data" . lvl20_rfC71_closure" {
     lvl20_rfC71_closure:
         const lvl20_rfC71_info;
 },
 lvl20_rfC71_entry() //  []
         { []
         }
     {offset
       cfUov: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl20_rfC71_info" {
     lvl20_rfC71_info:
         const lvl20_rfC71_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.307332695 UTC

[section ""data" . Data.Semigroup.$fDataArg_closure" {
     Data.Semigroup.$fDataArg_closure:
         const Data.Semigroup.$fDataArg_info;
         const 0;
 },
 sat_sfPsn_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUoN: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapMo_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsn_info" {
     sat_sfPsn_info:
         const sat_sfPsn_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPsm_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUoV: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapMp_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsm_info" {
     sat_sfPsm_info:
         const sat_sfPsm_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPsl_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUp3: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapM_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsl_info" {
     sat_sfPsl_info:
         const sat_sfPsl_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPsk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUpb: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgmapQi_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsk_info" {
     sat_sfPsk_info:
         const sat_sfPsk_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SfPCb_srt+1320;
 },
 sat_sfPsj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUpj: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataArg_$cgmapQ_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsj_info" {
     sat_sfPsj_info:
         const sat_sfPsj_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfPsi_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUpr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUps; else goto cfUpt;
       cfUps: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUpt: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Semigroup.$fDataArg_$cgmapQr_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsi_info" {
     sat_sfPsi_info:
         const sat_sfPsi_entry;
         const 2;
         const 11;
         const 17179869208;
 },
 sat_sfPsh_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUpz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUpA; else goto cfUpB;
       cfUpA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUpB: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Semigroup.$fDataArg2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsh_info" {
     sat_sfPsh_info:
         const sat_sfPsh_entry;
         const 2;
         const 11;
         const 17179869208;
 },
 sat_sfPsg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUpH: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataArg3_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsg_info" {
     sat_sfPsg_info:
         const sat_sfPsg_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sfPsf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUpP: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataArg_$cdataCast2_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsf_info" {
     sat_sfPsf_info:
         const sat_sfPsf_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SfPCb_srt+1312;
 },
 sat_sfPse_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUpX: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgunfold_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPse_info" {
     sat_sfPse_info:
         const sat_sfPse_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPsd_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUq5: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataArg_$cgfoldl_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsd_info" {
     sat_sfPsd_info:
         const sat_sfPsd_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sfPsc_entry() //  [R1]
         { []
         }
     {offset
       cfUqc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUqd; else goto cfUqe;
       cfUqd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUqe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataArg10_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPsc_info" {
     sat_sfPsc_info:
         const sat_sfPsc_entry;
         const 2;
         const 4294967314;
         const SfPCb_srt+1304;
 },
 Data.Semigroup.$fDataArg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfUqg: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto cfUqk; else goto cfUqj;
       cfUqk: // global
           HpAlloc = 424;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUqj: // global
           I64[Hp - 416] = sat_sfPsn_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sfPsm_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sfPsl_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sfPsk_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sfPsj_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sfPsi_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sfPsh_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sfPsg_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sfPsf_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sfPse_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sfPsd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sfPsc_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 152;
           P64[Hp - 104] = Hp - 173;
           P64[Hp - 96] = Hp - 197;
           P64[Hp - 88] = lvl18_rfC6Z_closure+1;
           P64[Hp - 80] = lvl19_rfC70_closure+1;
           P64[Hp - 72] = lvl20_rfC71_closure+2;
           P64[Hp - 64] = Hp - 223;
           P64[Hp - 56] = Hp - 246;
           P64[Hp - 48] = Hp - 268;
           P64[Hp - 40] = Hp - 292;
           P64[Hp - 32] = Hp - 318;
           P64[Hp - 24] = Hp - 341;
           P64[Hp - 16] = Hp - 365;
           P64[Hp - 8] = Hp - 389;
           P64[Hp] = Hp - 413;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataArg_info" {
     Data.Semigroup.$fDataArg_info:
         const Data.Semigroup.$fDataArg_entry;
         const 0;
         const 923417968654;
         const 8589934607;
         const SfPCb_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.330928827 UTC

[section ""data" . Data.Semigroup.$fDataFirst3_closure" {
     Data.Semigroup.$fDataFirst3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataFirst4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.332742798 UTC

[section ""data" . Data.Semigroup.$tcFirst_closure" {
     Data.Semigroup.$tcFirst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataFirst3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5289672677956055491;
         const 1507157566582617174;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.335270694 UTC

[section ""data" . $krep10_rfC72_closure" {
     $krep10_rfC72_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcFirst_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.33721973 UTC

[section ""data" . Data.Semigroup.$tc'First1_closure" {
     Data.Semigroup.$tc'First1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep10_rfC72_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.338911217 UTC

[section ""cstring" . Data.Semigroup.$tc'First3_bytes" {
     Data.Semigroup.$tc'First3_bytes:
         I8[] [39,70,105,114,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.340608043 UTC

[section ""data" . Data.Semigroup.$tc'First2_closure" {
     Data.Semigroup.$tc'First2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'First3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.342669494 UTC

[section ""data" . Data.Semigroup.$tc'First_closure" {
     Data.Semigroup.$tc'First_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'First2_closure+1;
         const Data.Semigroup.$tc'First1_closure+4;
         const 14746522314279732838;
         const 14022550265149674723;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.34603 UTC

[section ""data" . Data.Semigroup.$fDataFirst2_closure" {
     Data.Semigroup.$fDataFirst2_closure:
         const Data.Semigroup.$fDataFirst2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataFirst2_entry() //  [R1]
         { []
         }
     {offset
       cfUrO: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfUrP; else goto cfUrQ;
       cfUrP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUrQ: // global
           (_cfUrG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfUrG::I64 == 0) goto cfUrI; else goto cfUrH;
       cfUrI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfUrH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfUrG::I64;
           I64[Sp - 24] = block_cfUrJ_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataFirst3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 1507157566582617174;
           R2 = 5289672677956055491;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst2_info" {
     Data.Semigroup.$fDataFirst2_info:
         const Data.Semigroup.$fDataFirst2_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1120;
 },
 _cfUrJ() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUrJ: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfUrK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfUrJ_info" {
     block_cfUrJ_info:
         const _cfUrJ;
         const 0;
         const 30;
 },
 _cfUrK() //  []
         { []
         }
     {offset
       cfUrK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUrT; else goto cfUrS;
       cfUrT: // global
           HpAlloc = 48;
           I64[Sp] = block_cfUrK_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfUrS: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfUrK_info" {
     block_cfUrK_info:
         const _cfUrK;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.353919497 UTC

[section ""data" . Data.Semigroup.$fDataFirst8_closure" {
     Data.Semigroup.$fDataFirst8_closure:
         const Data.Semigroup.$fDataFirst8_info;
         const 0;
 },
 Data.Semigroup.$fDataFirst8_entry() //  [R2]
         { []
         }
     {offset
       cfUss: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUst; else goto cfUsu;
       cfUst: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUsu: // global
           I64[Sp - 8] = block_cfUsq_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst8_info" {
     Data.Semigroup.$fDataFirst8_info:
         const Data.Semigroup.$fDataFirst8_entry;
         const 0;
         const 13835058059577131022;
         const 4294967301;
         const SfPCb_srt+1128;
 },
 _cfUsq() //  [R1]
         { []
         }
     {offset
       cfUsq: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataFirst2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUsq_info" {
     block_cfUsq_info:
         const _cfUsq;
         const 0;
         const 4611686022722355230;
         const SfPCb_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.36144366 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cdataCast1_closure" {
     Data.Semigroup.$fDataFirst_$cdataCast1_closure:
         const Data.Semigroup.$fDataFirst_$cdataCast1_info;
         const 0;
 },
 lvl33_sfPsy_entry() //  [R1]
         { []
         }
     {offset
       cfUsP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUsQ; else goto cfUsR;
       cfUsQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUsR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataFirst2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPsy_info" {
     lvl33_sfPsy_info:
         const lvl33_sfPsy_entry;
         const 1;
         const 576460756598390800;
         const SfPCb_srt+1152;
 },
 sat_sfPsC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUt4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfUt5; else goto cfUt6;
       cfUt5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUt6: // global
           I64[Sp - 24] = block_cfUsX_info;
           _sfPsw::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPsw::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUth; else goto cfUsY;
       ufUth: // global
           call _cfUsX(R1) args: 0, res: 0, upd: 0;
       cfUsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsC_info" {
     sat_sfPsC_info:
         const sat_sfPsC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUsX() //  [R1]
         { []
         }
     {offset
       cfUsX: // global
           if (R1 & 7 == 1) goto cfUt1; else goto cfUt2;
       cfUt1: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfUt2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUtg; else goto cfUtf;
       cfUtg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUtf: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUsX_info" {
     block_cfUsX_info:
         const _cfUsX;
         const 2;
         const 30;
 },
 Data.Semigroup.$fDataFirst_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfUti: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUtm; else goto cfUtl;
       cfUtm: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUtl: // global
           I64[Hp - 40] = lvl33_sfPsy_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPsC_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cdataCast1_info" {
     Data.Semigroup.$fDataFirst_$cdataCast1_info:
         const Data.Semigroup.$fDataFirst_$cdataCast1_entry;
         const 0;
         const 2882303765812084750;
         const 8589934607;
         const SfPCb_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.371191666 UTC

[section ""data" . Data.Semigroup.$fDataFirst1_closure" {
     Data.Semigroup.$fDataFirst1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.380251567 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapMp_closure" {
     Data.Semigroup.$fDataFirst_$cgmapMp_closure:
         const Data.Semigroup.$fDataFirst_$cgmapMp_info;
 },
 lvl33_sfPsH_entry() //  [R1]
         { []
         }
     {offset
       cfUu2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUu3; else goto cfUu4;
       cfUu3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUu4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPsH_info" {
     lvl33_sfPsH_info:
         const lvl33_sfPsH_entry;
         const 1;
         const 16;
 },
 sat_sfPt4_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUuh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUui; else goto cfUuj;
       cfUui: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUuj: // global
           I64[Sp - 24] = block_cfUue_info;
           _sfPsH::P64 = P64[R1 + 7];
           _sfPsI::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPsH::P64;
           P64[Sp - 8] = _sfPsI::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUuB; else goto cfUuf;
       ufUuB: // global
           call _cfUue(R1) args: 0, res: 0, upd: 0;
       cfUuf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPt4_info" {
     sat_sfPt4_info:
         const sat_sfPt4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUue() //  [R1]
         { []
         }
     {offset
       cfUue: // global
           I64[Sp - 8] = block_cfUum_info;
           _sfPt1::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPt1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUuA; else goto cfUuo;
       ufUuA: // global
           call _cfUum(R1) args: 0, res: 0, upd: 0;
       cfUuo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUue_info" {
     block_cfUue_info:
         const _cfUue;
         const 2;
         const 30;
 },
 _cfUum() //  [R1]
         { []
         }
     {offset
       cfUum: // global
           if (R1 & 7 == 1) goto cfUuu; else goto cfUuy;
       cfUuu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUuy: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUum_info" {
     block_cfUum_info:
         const _cfUum;
         const 3;
         const 30;
 },
 sat_sfPsW_entry() //  [R1]
         { []
         }
     {offset
       cfUuX: // global
           _sfPsW::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUuY; else goto cfUuZ;
       cfUuZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUv1; else goto cfUv0;
       cfUv1: // global
           HpAlloc = 56;
           goto cfUuY;
       cfUuY: // global
           R1 = _sfPsW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUv0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPsW::P64;
           _sfPsG::P64 = P64[_sfPsW::P64 + 16];
           _sfPsI::P64 = P64[_sfPsW::P64 + 24];
           _sfPsN::P64 = P64[_sfPsW::P64 + 32];
           _sfPsO::P64 = P64[_sfPsW::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPsN::P64;
           P64[Hp - 24] = _sfPsG::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPsO::P64;
           R2 = _sfPsI::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPsW_info" {
     sat_sfPsW_info:
         const sat_sfPsW_entry;
         const 4;
         const 15;
 },
 sat_sfPsS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUvd: // global
           _sfPsP::P64 = R2;
           _sfPsS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUve; else goto cfUvf;
       cfUvf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUvh; else goto cfUvg;
       cfUvh: // global
           HpAlloc = 56;
           goto cfUve;
       cfUve: // global
           R2 = _sfPsP::P64;
           R1 = _sfPsS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUvg: // global
           _sfPsI::P64 = P64[_sfPsS::P64 + 7];
           _sfPsN::P64 = P64[_sfPsS::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPsN::P64;
           P64[Hp - 24] = _sfPsP::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPsI::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsS_info" {
     sat_sfPsS_info:
         const sat_sfPsS_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPsT_entry() //  [R1]
         { []
         }
     {offset
       cfUvi: // global
           _sfPsT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUvj; else goto cfUvk;
       cfUvk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUvm; else goto cfUvl;
       cfUvm: // global
           HpAlloc = 24;
           goto cfUvj;
       cfUvj: // global
           R1 = _sfPsT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUvl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPsT::P64;
           _sfPsI::P64 = P64[_sfPsT::P64 + 16];
           _sfPsJ::P64 = P64[_sfPsT::P64 + 24];
           _sfPsN::P64 = P64[_sfPsT::P64 + 32];
           I64[Hp - 16] = sat_sfPsS_info;
           P64[Hp - 8] = _sfPsI::P64;
           P64[Hp] = _sfPsN::P64;
           R2 = _sfPsI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPsJ::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPsT_info" {
     sat_sfPsT_info:
         const sat_sfPsT_entry;
         const 3;
         const 15;
 },
 sat_sfPsX_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUvn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfUvo; else goto cfUvp;
       cfUvo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUvp: // global
           I64[Sp - 40] = block_cfUuM_info;
           _sfPsE::P64 = P64[R1 + 7];
           _sfPsG::P64 = P64[R1 + 15];
           _sfPsI::P64 = P64[R1 + 23];
           _sfPsJ::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPsE::P64;
           P64[Sp - 24] = _sfPsG::P64;
           P64[Sp - 16] = _sfPsI::P64;
           P64[Sp - 8] = _sfPsJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUvt; else goto cfUuN;
       ufUvt: // global
           call _cfUuM(R1) args: 0, res: 0, upd: 0;
       cfUuN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPsX_info" {
     sat_sfPsX_info:
         const sat_sfPsX_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUuM() //  [R1]
         { []
         }
     {offset
       cfUuM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUvs; else goto cfUvr;
       cfUvs: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUvr: // global
           _sfPsN::P64 = P64[R1 + 7];
           _sfPsO::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPsW_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPsI::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPsI::P64;
           P64[Hp - 48] = _sfPsN::P64;
           P64[Hp - 40] = _sfPsO::P64;
           I64[Hp - 32] = sat_sfPsT_info;
           P64[Hp - 16] = _sfPsI::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPsN::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUuM_info" {
     block_cfUuM_info:
         const _cfUuM;
         const 4;
         const 30;
 },
 sat_sfPsK_entry() //  [R1]
         { []
         }
     {offset
       cfUvy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUvz; else goto cfUvA;
       cfUvz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUvA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataFirst1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPsK_info" {
     sat_sfPsK_info:
         const sat_sfPsK_entry;
         const 1;
         const 16;
 },
 sat_sfPsY_entry() //  [R1]
         { []
         }
     {offset
       cfUvB: // global
           _sfPsY::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUvC; else goto cfUvD;
       cfUvD: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfUvF; else goto cfUvE;
       cfUvF: // global
           HpAlloc = 104;
           goto cfUvC;
       cfUvC: // global
           R1 = _sfPsY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUvE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPsY::P64;
           _sfPsD::P64 = P64[_sfPsY::P64 + 16];
           _sfPsE::P64 = P64[_sfPsY::P64 + 24];
           _sfPsF::P64 = P64[_sfPsY::P64 + 32];
           _sfPsG::P64 = P64[_sfPsY::P64 + 40];
           _sfPsI::P64 = P64[_sfPsY::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPsF::P64;
           P64[Hp - 72] = _sfPsD::P64;
           P64[Hp - 64] = _sfPsG::P64;
           I64[Hp - 56] = sat_sfPsX_info;
           P64[Hp - 48] = _sfPsE::P64;
           P64[Hp - 40] = _sfPsG::P64;
           P64[Hp - 32] = _sfPsI::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPsK_info;
           P64[Hp] = _sfPsI::P64;
           R2 = _sfPsI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPsY_info" {
     sat_sfPsY_info:
         const sat_sfPsY_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataFirst_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUvG: // global
           _sfPsG::P64 = R5;
           _sfPsF::P64 = R4;
           _sfPsE::P64 = R3;
           _sfPsD::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfUvH; else goto cfUvI;
       cfUvI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUvK; else goto cfUvJ;
       cfUvK: // global
           HpAlloc = 24;
           goto cfUvH;
       cfUvH: // global
           R5 = _sfPsG::P64;
           R4 = _sfPsF::P64;
           R3 = _sfPsE::P64;
           R2 = _sfPsD::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUvJ: // global
           I64[Hp - 16] = lvl33_sfPsH_info;
           P64[Hp] = _sfPsE::P64;
           I64[Sp - 48] = block_cfUu5_info;
           R2 = _sfPsE::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPsD::P64;
           P64[Sp - 24] = _sfPsE::P64;
           P64[Sp - 16] = _sfPsF::P64;
           P64[Sp - 8] = _sfPsG::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapMp_info" {
     Data.Semigroup.$fDataFirst_$cgmapMp_info:
         const Data.Semigroup.$fDataFirst_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUu5() //  [R1]
         { []
         }
     {offset
       cfUu5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUvN; else goto cfUvM;
       cfUvN: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUvM: // global
           I64[Hp - 72] = sat_sfPt4_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPsY_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUu5_info" {
     block_cfUu5_info:
         const _cfUu5;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.408666614 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapM_closure" {
     Data.Semigroup.$fDataFirst_$cgmapM_closure:
         const Data.Semigroup.$fDataFirst_$cgmapM_info;
 },
 sat_sfPte_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUxO: // global
           _sfPtc::P64 = R2;
           _sfPte::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUxP; else goto cfUxQ;
       cfUxQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfUxS; else goto cfUxR;
       cfUxS: // global
           HpAlloc = 32;
           goto cfUxP;
       cfUxP: // global
           R2 = _sfPtc::P64;
           R1 = _sfPte::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUxR: // global
           _sfPt6::P64 = P64[_sfPte::P64 + 7];
           _sfPtb::P64 = P64[_sfPte::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPtb::P64;
           P64[Hp] = _sfPtc::P64;
           R2 = _sfPt6::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPte_info" {
     sat_sfPte_info:
         const sat_sfPte_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPtf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUxT: // global
           _sfPtb::P64 = R2;
           _sfPtf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUxU; else goto cfUxV;
       cfUxV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUxX; else goto cfUxW;
       cfUxX: // global
           HpAlloc = 24;
           goto cfUxU;
       cfUxU: // global
           R2 = _sfPtb::P64;
           R1 = _sfPtf::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUxW: // global
           _sfPt6::P64 = P64[_sfPtf::P64 + 7];
           _sfPt9::P64 = P64[_sfPtf::P64 + 15];
           I64[Hp - 16] = sat_sfPte_info;
           P64[Hp - 8] = _sfPt6::P64;
           P64[Hp] = _sfPtb::P64;
           R2 = _sfPt6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPt9::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPtf_info" {
     sat_sfPtf_info:
         const sat_sfPtf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPta_entry() //  [R1]
         { []
         }
     {offset
       cfUy2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUy3; else goto cfUy4;
       cfUy3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUy4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPta_info" {
     sat_sfPta_info:
         const sat_sfPta_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataFirst_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUy5: // global
           _sfPt8::P64 = R5;
           _sfPt7::P64 = R4;
           _sfPt6::P64 = R3;
           _sfPt5::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUy6; else goto cfUy7;
       cfUy7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUy9; else goto cfUy8;
       cfUy9: // global
           HpAlloc = 88;
           goto cfUy6;
       cfUy6: // global
           R5 = _sfPt8::P64;
           R4 = _sfPt7::P64;
           R3 = _sfPt6::P64;
           R2 = _sfPt5::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUy8: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfPt7::P64;
           P64[Hp - 56] = _sfPt5::P64;
           P64[Hp - 48] = _sfPt8::P64;
           I64[Hp - 40] = sat_sfPtf_info;
           P64[Hp - 32] = _sfPt6::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfPta_info;
           P64[Hp] = _sfPt6::P64;
           R2 = _sfPt6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapM_info" {
     Data.Semigroup.$fDataFirst_$cgmapM_info:
         const Data.Semigroup.$fDataFirst_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.420007451 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapQi_closure" {
     Data.Semigroup.$fDataFirst_$cgmapQi_closure:
         const Data.Semigroup.$fDataFirst_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataFirst_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUyO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUyP; else goto cfUyQ;
       cfUyP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUyQ: // global
           I64[Sp - 32] = block_cfUyL_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufUyY; else goto cfUyM;
       ufUyY: // global
           call _cfUyL(R1) args: 0, res: 0, upd: 0;
       cfUyM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapQi_info" {
     Data.Semigroup.$fDataFirst_$cgmapQi_info:
         const Data.Semigroup.$fDataFirst_$cgmapQi_entry;
         const 0;
         const 1152921508901814286;
         const 17179869208;
         const SfPCb_srt+1168;
 },
 _cfUyL() //  [R1]
         { []
         }
     {offset
       cfUyL: // global
           if (I64[R1 + 7] == 0) goto cfUyX; else goto cfUyW;
       cfUyX: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUyW: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUyL_info" {
     block_cfUyL_info:
         const _cfUyL;
         const 3;
         const 4294967326;
         const SfPCb_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.432621009 UTC

[section ""data" . Data.Semigroup.$fDataFirst_$cgmapMo_closure" {
     Data.Semigroup.$fDataFirst_$cgmapMo_closure:
         const Data.Semigroup.$fDataFirst_$cgmapMo_info;
 },
 lvl33_sfPtr_entry() //  [R1]
         { []
         }
     {offset
       cfUzh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUzi; else goto cfUzj;
       cfUzi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUzj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPtr_info" {
     lvl33_sfPtr_info:
         const lvl33_sfPtr_entry;
         const 1;
         const 16;
 },
 sat_sfPtR_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUzw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUzx; else goto cfUzy;
       cfUzx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUzy: // global
           I64[Sp - 24] = block_cfUzt_info;
           _sfPtr::P64 = P64[R1 + 7];
           _sfPts::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPtr::P64;
           P64[Sp - 8] = _sfPts::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUzQ; else goto cfUzu;
       ufUzQ: // global
           call _cfUzt(R1) args: 0, res: 0, upd: 0;
       cfUzu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPtR_info" {
     sat_sfPtR_info:
         const sat_sfPtR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUzt() //  [R1]
         { []
         }
     {offset
       cfUzt: // global
           I64[Sp - 8] = block_cfUzB_info;
           _sfPtO::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPtO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUzP; else goto cfUzD;
       ufUzP: // global
           call _cfUzB(R1) args: 0, res: 0, upd: 0;
       cfUzD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUzt_info" {
     block_cfUzt_info:
         const _cfUzt;
         const 2;
         const 30;
 },
 _cfUzB() //  [R1]
         { []
         }
     {offset
       cfUzB: // global
           if (R1 & 7 == 1) goto cfUzJ; else goto cfUzN;
       cfUzJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUzN: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUzB_info" {
     block_cfUzB_info:
         const _cfUzB;
         const 3;
         const 30;
 },
 sat_sfPtH_entry() //  [R1]
         { []
         }
     {offset
       cfUAh: // global
           _sfPtH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUAi; else goto cfUAj;
       cfUAj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUAl; else goto cfUAk;
       cfUAl: // global
           HpAlloc = 56;
           goto cfUAi;
       cfUAi: // global
           R1 = _sfPtH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUAk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPtH::P64;
           _sfPtq::P64 = P64[_sfPtH::P64 + 16];
           _sfPts::P64 = P64[_sfPtH::P64 + 24];
           _sfPtx::P64 = P64[_sfPtH::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPtx::P64;
           P64[Hp - 24] = _sfPtq::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPts::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPtH_info" {
     sat_sfPtH_info:
         const sat_sfPtH_entry;
         const 3;
         const 15;
 },
 sat_sfPtD_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUAx: // global
           _sfPtA::P64 = R2;
           _sfPtD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUAy; else goto cfUAz;
       cfUAz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUAB; else goto cfUAA;
       cfUAB: // global
           HpAlloc = 56;
           goto cfUAy;
       cfUAy: // global
           R2 = _sfPtA::P64;
           R1 = _sfPtD::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUAA: // global
           _sfPts::P64 = P64[_sfPtD::P64 + 7];
           _sfPtx::P64 = P64[_sfPtD::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPtx::P64;
           P64[Hp - 24] = _sfPtA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPts::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPtD_info" {
     sat_sfPtD_info:
         const sat_sfPtD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPtE_entry() //  [R1]
         { []
         }
     {offset
       cfUAC: // global
           _sfPtE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUAD; else goto cfUAE;
       cfUAE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUAG; else goto cfUAF;
       cfUAG: // global
           HpAlloc = 24;
           goto cfUAD;
       cfUAD: // global
           R1 = _sfPtE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUAF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPtE::P64;
           _sfPts::P64 = P64[_sfPtE::P64 + 16];
           _sfPtt::P64 = P64[_sfPtE::P64 + 24];
           _sfPtx::P64 = P64[_sfPtE::P64 + 32];
           I64[Hp - 16] = sat_sfPtD_info;
           P64[Hp - 8] = _sfPts::P64;
           P64[Hp] = _sfPtx::P64;
           R2 = _sfPts::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPtt::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPtE_info" {
     sat_sfPtE_info:
         const sat_sfPtE_entry;
         const 3;
         const 15;
 },
 sat_sfPtK_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUAH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfUAI; else goto cfUAJ;
       cfUAI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUAJ: // global
           I64[Sp - 40] = block_cfUA1_info;
           _sfPto::P64 = P64[R1 + 7];
           _sfPtq::P64 = P64[R1 + 15];
           _sfPts::P64 = P64[R1 + 23];
           _sfPtt::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPto::P64;
           P64[Sp - 24] = _sfPtq::P64;
           P64[Sp - 16] = _sfPts::P64;
           P64[Sp - 8] = _sfPtt::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUB0; else goto cfUA2;
       ufUB0: // global
           call _cfUA1(R1) args: 0, res: 0, upd: 0;
       cfUA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPtK_info" {
     sat_sfPtK_info:
         const sat_sfPtK_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUA1() //  [R1]
         { []
         }
     {offset
       cfUA1: // global
           I64[Sp - 8] = block_cfUA6_info;
           _sfPtx::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPtx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUAZ; else goto cfUA7;
       ufUAZ: // global
           call _cfUA6(R1) args: 0, res: 0, upd: 0;
       cfUA7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUA1_info" {
     block_cfUA1_info:
         const _cfUA1;
         const 4;
         const 30;
 },
 _cfUA6() //  [R1]
         { []
         }
     {offset
       cfUA6: // global
           _sfPtq::P64 = P64[Sp + 24];
           _sfPts::P64 = P64[Sp + 32];
           _sfPtx::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfUAM; else goto cfUAQ;
       cfUAM: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUAP; else goto cfUAO;
       cfUAP: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUAO: // global
           I64[Hp - 72] = sat_sfPtH_info;
           P64[Hp - 56] = _sfPtq::P64;
           P64[Hp - 48] = _sfPts::P64;
           P64[Hp - 40] = _sfPtx::P64;
           I64[Hp - 32] = sat_sfPtE_info;
           P64[Hp - 16] = _sfPts::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPtx::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfUAQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUAV; else goto cfUAU;
       cfUAV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUAU: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPtx::P64;
           P64[Hp - 24] = _sfPtq::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPts::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUA6_info" {
     block_cfUA6_info:
         const _cfUA6;
         const 5;
         const 30;
 },
 sat_sfPtu_entry() //  [R1]
         { []
         }
     {offset
       cfUB5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUB6; else goto cfUB7;
       cfUB6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUB7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataFirst1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPtu_info" {
     sat_sfPtu_info:
         const sat_sfPtu_entry;
         const 1;
         const 16;
 },
 sat_sfPtL_entry() //  [R1]
         { []
         }
     {offset
       cfUB8: // global
           _sfPtL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUB9; else goto cfUBa;
       cfUBa: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfUBc; else goto cfUBb;
       cfUBc: // global
           HpAlloc = 104;
           goto cfUB9;
       cfUB9: // global
           R1 = _sfPtL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUBb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPtL::P64;
           _sfPtn::P64 = P64[_sfPtL::P64 + 16];
           _sfPto::P64 = P64[_sfPtL::P64 + 24];
           _sfPtp::P64 = P64[_sfPtL::P64 + 32];
           _sfPtq::P64 = P64[_sfPtL::P64 + 40];
           _sfPts::P64 = P64[_sfPtL::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPtp::P64;
           P64[Hp - 72] = _sfPtn::P64;
           P64[Hp - 64] = _sfPtq::P64;
           I64[Hp - 56] = sat_sfPtK_info;
           P64[Hp - 48] = _sfPto::P64;
           P64[Hp - 40] = _sfPtq::P64;
           P64[Hp - 32] = _sfPts::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPtu_info;
           P64[Hp] = _sfPts::P64;
           R2 = _sfPts::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPtL_info" {
     sat_sfPtL_info:
         const sat_sfPtL_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataFirst_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUBd: // global
           _sfPtq::P64 = R5;
           _sfPtp::P64 = R4;
           _sfPto::P64 = R3;
           _sfPtn::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfUBe; else goto cfUBf;
       cfUBf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUBh; else goto cfUBg;
       cfUBh: // global
           HpAlloc = 24;
           goto cfUBe;
       cfUBe: // global
           R5 = _sfPtq::P64;
           R4 = _sfPtp::P64;
           R3 = _sfPto::P64;
           R2 = _sfPtn::P64;
           R1 = Data.Semigroup.$fDataFirst_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUBg: // global
           I64[Hp - 16] = lvl33_sfPtr_info;
           P64[Hp] = _sfPto::P64;
           I64[Sp - 48] = block_cfUzk_info;
           R2 = _sfPto::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPtn::P64;
           P64[Sp - 24] = _sfPto::P64;
           P64[Sp - 16] = _sfPtp::P64;
           P64[Sp - 8] = _sfPtq::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_$cgmapMo_info" {
     Data.Semigroup.$fDataFirst_$cgmapMo_info:
         const Data.Semigroup.$fDataFirst_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUzk() //  [R1]
         { []
         }
     {offset
       cfUzk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUBk; else goto cfUBj;
       cfUBk: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUBj: // global
           I64[Hp - 72] = sat_sfPtR_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPtL_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUzk_info" {
     block_cfUzk_info:
         const _cfUzk;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.460753703 UTC

[section ""data" . lvl21_rfC73_closure" {
     lvl21_rfC73_closure:
         const lvl21_rfC73_info;
         const 0;
 },
 lvl21_rfC73_entry() //  []
         { []
         }
     {offset
       cfUDo: // global
           R1 = Data.Semigroup.$cFirst_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl21_rfC73_info" {
     lvl21_rfC73_info:
         const lvl21_rfC73_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.464679079 UTC

[section ""data" . lvl22_rfC74_closure" {
     lvl22_rfC74_closure:
         const lvl22_rfC74_info;
         const 0;
 },
 lvl22_rfC74_entry() //  []
         { []
         }
     {offset
       cfUDA: // global
           R1 = Data.Semigroup.$tFirst_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl22_rfC74_info" {
     lvl22_rfC74_info:
         const lvl22_rfC74_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.468206033 UTC

[section ""data" . lvl23_rfC75_closure" {
     lvl23_rfC75_closure:
         const lvl23_rfC75_info;
 },
 lvl23_rfC75_entry() //  []
         { []
         }
     {offset
       cfUDM: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl23_rfC75_info" {
     lvl23_rfC75_info:
         const lvl23_rfC75_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.477273062 UTC

[section ""data" . Data.Semigroup.$fDataFirst_closure" {
     Data.Semigroup.$fDataFirst_closure:
         const Data.Semigroup.$fDataFirst_info;
         const 0;
 },
 sat_sfPur_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUE4: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapMo_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPur_info" {
     sat_sfPur_info:
         const sat_sfPur_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPuq_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUEc: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapMp_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPuq_info" {
     sat_sfPuq_info:
         const sat_sfPuq_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPup_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUEk: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapM_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPup_info" {
     sat_sfPup_info:
         const sat_sfPup_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPuo_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUEs: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgmapQi_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPuo_info" {
     sat_sfPuo_info:
         const sat_sfPuo_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1392;
 },
 sat_sfPun_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUEC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfUEG; else goto cfUEF;
       cfUEG: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUEF: // global
           _sfPtW::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfPtW::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPun_info" {
     sat_sfPun_info:
         const sat_sfPun_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPuj_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUEN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUER; else goto cfUEQ;
       cfUER: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUEQ: // global
           _sfPtW::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPtW::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfPue::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfPue::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPuj_info" {
     sat_sfPuj_info:
         const sat_sfPuj_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPud_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUEY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUF2; else goto cfUF1;
       cfUF2: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUF1: // global
           _sfPtW::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPtW::P64;
           P64[Hp] = R5;
           _sfPu9::P64 = R3;
           R3 = Hp - 32;
           _sfPu8::P64 = R2;
           R2 = _sfPu9::P64;
           R1 = _sfPu8::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPud_info" {
     sat_sfPud_info:
         const sat_sfPud_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPu7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUF8: // global
           R3 = R3;
           _sfPu5::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfPu5::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPu7_info" {
     sat_sfPu7_info:
         const sat_sfPu7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPu4_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUFg: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataFirst_$cdataCast1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPu4_info" {
     sat_sfPu4_info:
         const sat_sfPu4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1384;
 },
 sat_sfPu2_entry() //  [R1]
         { []
         }
     {offset
       cfUFs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUFt; else goto cfUFu;
       cfUFt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUFu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPu2_info" {
     sat_sfPu2_info:
         const sat_sfPu2_entry;
         const 1;
         const 16;
 },
 sat_sfPu3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUFv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUFz; else goto cfUFy;
       cfUFz: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUFy: // global
           _sfPtW::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfPu2_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfPtZ::P64 = R2;
           R2 = _sfPtW::P64;
           R1 = _sfPtZ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPu3_info" {
     sat_sfPu3_info:
         const sat_sfPu3_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPtY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUFF: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataFirst_$cgfoldl_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPtY_info" {
     sat_sfPtY_info:
         const sat_sfPtY_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPtX_entry() //  [R1]
         { []
         }
     {offset
       cfUFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUFN; else goto cfUFO;
       cfUFN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUFO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataFirst8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPtX_info" {
     sat_sfPtX_info:
         const sat_sfPtX_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1376;
 },
 Data.Semigroup.$fDataFirst_entry() //  [R2]
         { []
         }
     {offset
       cfUFQ: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfUFU; else goto cfUFT;
       cfUFU: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataFirst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUFT: // global
           I64[Hp - 320] = sat_sfPur_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPuq_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPup_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPuo_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPun_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPuj_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPud_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPu7_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPu4_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPu3_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPtY_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPtX_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl21_rfC73_closure+1;
           P64[Hp - 80] = lvl22_rfC74_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl23_rfC75_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataFirst_info" {
     Data.Semigroup.$fDataFirst_info:
         const Data.Semigroup.$fDataFirst_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfPCb_srt+1376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.502269839 UTC

[section ""data" . Data.Semigroup.$fDataLast3_closure" {
     Data.Semigroup.$fDataLast3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataLast4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.504336755 UTC

[section ""data" . Data.Semigroup.$tcLast_closure" {
     Data.Semigroup.$tcLast_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataLast3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 11434676963974803827;
         const 15911814017027463598;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.506253733 UTC

[section ""data" . $krep11_rfC76_closure" {
     $krep11_rfC76_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcLast_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.507934371 UTC

[section ""data" . Data.Semigroup.$tc'Last1_closure" {
     Data.Semigroup.$tc'Last1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep11_rfC76_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.509933032 UTC

[section ""cstring" . Data.Semigroup.$tc'Last3_bytes" {
     Data.Semigroup.$tc'Last3_bytes:
         I8[] [39,76,97,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.511590416 UTC

[section ""data" . Data.Semigroup.$tc'Last2_closure" {
     Data.Semigroup.$tc'Last2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Last3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.513444321 UTC

[section ""data" . Data.Semigroup.$tc'Last_closure" {
     Data.Semigroup.$tc'Last_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Last2_closure+1;
         const Data.Semigroup.$tc'Last1_closure+4;
         const 3320600960953447003;
         const 12383530634546204472;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.516813674 UTC

[section ""data" . Data.Semigroup.$fDataLast2_closure" {
     Data.Semigroup.$fDataLast2_closure:
         const Data.Semigroup.$fDataLast2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataLast2_entry() //  [R1]
         { []
         }
     {offset
       cfUHA: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfUHB; else goto cfUHC;
       cfUHB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUHC: // global
           (_cfUHs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfUHs::I64 == 0) goto cfUHu; else goto cfUHt;
       cfUHu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfUHt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfUHs::I64;
           I64[Sp - 24] = block_cfUHv_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataLast3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 15911814017027463598;
           R2 = 11434676963974803827;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast2_info" {
     Data.Semigroup.$fDataLast2_info:
         const Data.Semigroup.$fDataLast2_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1440;
 },
 _cfUHv() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUHv: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfUHw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfUHv_info" {
     block_cfUHv_info:
         const _cfUHv;
         const 0;
         const 30;
 },
 _cfUHw() //  []
         { []
         }
     {offset
       cfUHw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUHF; else goto cfUHE;
       cfUHF: // global
           HpAlloc = 48;
           I64[Sp] = block_cfUHw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfUHE: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfUHw_info" {
     block_cfUHw_info:
         const _cfUHw;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.524977161 UTC

[section ""data" . Data.Semigroup.$fDataLast8_closure" {
     Data.Semigroup.$fDataLast8_closure:
         const Data.Semigroup.$fDataLast8_info;
         const 0;
 },
 Data.Semigroup.$fDataLast8_entry() //  [R2]
         { []
         }
     {offset
       cfUIe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUIf; else goto cfUIg;
       cfUIf: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUIg: // global
           I64[Sp - 8] = block_cfUIc_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast8_info" {
     Data.Semigroup.$fDataLast8_info:
         const Data.Semigroup.$fDataLast8_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfPCb_srt+1448;
 },
 _cfUIc() //  [R1]
         { []
         }
     {offset
       cfUIc: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataLast2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUIc_info" {
     block_cfUIc_info:
         const _cfUIc;
         const 0;
         const 21474836510;
         const SfPCb_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.531666272 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cdataCast1_closure" {
     Data.Semigroup.$fDataLast_$cdataCast1_closure:
         const Data.Semigroup.$fDataLast_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufUJ9_srtd" {
     ufUJ9_srtd:
         const SfPCb_srt+1152;
         const 38;
         const 137438953473;
 },
 lvl33_sfPuC_entry() //  [R1]
         { []
         }
     {offset
       cfUIB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUIC; else goto cfUID;
       cfUIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUID: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataLast2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPuC_info" {
     lvl33_sfPuC_info:
         const lvl33_sfPuC_entry;
         const 1;
         const 18446744069414584336;
         const ufUJ9_srtd;
 },
 sat_sfPuG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUIQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfUIR; else goto cfUIS;
       cfUIR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUIS: // global
           I64[Sp - 24] = block_cfUIJ_info;
           _sfPuA::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPuA::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUJ3; else goto cfUIK;
       ufUJ3: // global
           call _cfUIJ(R1) args: 0, res: 0, upd: 0;
       cfUIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPuG_info" {
     sat_sfPuG_info:
         const sat_sfPuG_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUIJ() //  [R1]
         { []
         }
     {offset
       cfUIJ: // global
           if (R1 & 7 == 1) goto cfUIN; else goto cfUIO;
       cfUIN: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfUIO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUJ2; else goto cfUJ1;
       cfUJ2: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUJ1: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUIJ_info" {
     block_cfUIJ_info:
         const _cfUIJ;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufUJa_srtd" {
     ufUJa_srtd:
         const SfPCb_srt+1152;
         const 41;
         const 1236950581249;
 },
 Data.Semigroup.$fDataLast_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfUJ4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUJ8; else goto cfUJ7;
       cfUJ8: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUJ7: // global
           I64[Hp - 40] = lvl33_sfPuC_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPuG_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cdataCast1_info" {
     Data.Semigroup.$fDataLast_$cdataCast1_info:
         const Data.Semigroup.$fDataLast_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufUJa_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.543178825 UTC

[section ""data" . Data.Semigroup.$fDataLast1_closure" {
     Data.Semigroup.$fDataLast1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.551685076 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapMp_closure" {
     Data.Semigroup.$fDataLast_$cgmapMp_closure:
         const Data.Semigroup.$fDataLast_$cgmapMp_info;
 },
 lvl33_sfPuL_entry() //  [R1]
         { []
         }
     {offset
       cfUJS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUJT; else goto cfUJU;
       cfUJT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUJU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPuL_info" {
     lvl33_sfPuL_info:
         const lvl33_sfPuL_entry;
         const 1;
         const 16;
 },
 sat_sfPv8_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUK7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUK8; else goto cfUK9;
       cfUK8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUK9: // global
           I64[Sp - 24] = block_cfUK4_info;
           _sfPuL::P64 = P64[R1 + 7];
           _sfPuM::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPuL::P64;
           P64[Sp - 8] = _sfPuM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUKr; else goto cfUK5;
       ufUKr: // global
           call _cfUK4(R1) args: 0, res: 0, upd: 0;
       cfUK5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPv8_info" {
     sat_sfPv8_info:
         const sat_sfPv8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUK4() //  [R1]
         { []
         }
     {offset
       cfUK4: // global
           I64[Sp - 8] = block_cfUKc_info;
           _sfPv5::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPv5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUKq; else goto cfUKe;
       ufUKq: // global
           call _cfUKc(R1) args: 0, res: 0, upd: 0;
       cfUKe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUK4_info" {
     block_cfUK4_info:
         const _cfUK4;
         const 2;
         const 30;
 },
 _cfUKc() //  [R1]
         { []
         }
     {offset
       cfUKc: // global
           if (R1 & 7 == 1) goto cfUKk; else goto cfUKo;
       cfUKk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUKo: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUKc_info" {
     block_cfUKc_info:
         const _cfUKc;
         const 3;
         const 30;
 },
 sat_sfPv0_entry() //  [R1]
         { []
         }
     {offset
       cfUKN: // global
           _sfPv0::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUKO; else goto cfUKP;
       cfUKP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUKR; else goto cfUKQ;
       cfUKR: // global
           HpAlloc = 56;
           goto cfUKO;
       cfUKO: // global
           R1 = _sfPv0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUKQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPv0::P64;
           _sfPuK::P64 = P64[_sfPv0::P64 + 16];
           _sfPuM::P64 = P64[_sfPv0::P64 + 24];
           _sfPuR::P64 = P64[_sfPv0::P64 + 32];
           _sfPuS::P64 = P64[_sfPv0::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPuR::P64;
           P64[Hp - 24] = _sfPuK::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPuS::P64;
           R2 = _sfPuM::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPv0_info" {
     sat_sfPv0_info:
         const sat_sfPv0_entry;
         const 4;
         const 15;
 },
 sat_sfPuW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUL3: // global
           _sfPuT::P64 = R2;
           _sfPuW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUL4; else goto cfUL5;
       cfUL5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUL7; else goto cfUL6;
       cfUL7: // global
           HpAlloc = 56;
           goto cfUL4;
       cfUL4: // global
           R2 = _sfPuT::P64;
           R1 = _sfPuW::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUL6: // global
           _sfPuM::P64 = P64[_sfPuW::P64 + 7];
           _sfPuR::P64 = P64[_sfPuW::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPuR::P64;
           P64[Hp - 24] = _sfPuT::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPuM::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPuW_info" {
     sat_sfPuW_info:
         const sat_sfPuW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPuX_entry() //  [R1]
         { []
         }
     {offset
       cfUL8: // global
           _sfPuX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUL9; else goto cfULa;
       cfULa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfULc; else goto cfULb;
       cfULc: // global
           HpAlloc = 24;
           goto cfUL9;
       cfUL9: // global
           R1 = _sfPuX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfULb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPuX::P64;
           _sfPuM::P64 = P64[_sfPuX::P64 + 16];
           _sfPuN::P64 = P64[_sfPuX::P64 + 24];
           _sfPuR::P64 = P64[_sfPuX::P64 + 32];
           I64[Hp - 16] = sat_sfPuW_info;
           P64[Hp - 8] = _sfPuM::P64;
           P64[Hp] = _sfPuR::P64;
           R2 = _sfPuM::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPuN::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPuX_info" {
     sat_sfPuX_info:
         const sat_sfPuX_entry;
         const 3;
         const 15;
 },
 sat_sfPv1_entry() //  [R1, R2]
         { []
         }
     {offset
       cfULd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfULe; else goto cfULf;
       cfULe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfULf: // global
           I64[Sp - 40] = block_cfUKC_info;
           _sfPuI::P64 = P64[R1 + 7];
           _sfPuK::P64 = P64[R1 + 15];
           _sfPuM::P64 = P64[R1 + 23];
           _sfPuN::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPuI::P64;
           P64[Sp - 24] = _sfPuK::P64;
           P64[Sp - 16] = _sfPuM::P64;
           P64[Sp - 8] = _sfPuN::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufULj; else goto cfUKD;
       ufULj: // global
           call _cfUKC(R1) args: 0, res: 0, upd: 0;
       cfUKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPv1_info" {
     sat_sfPv1_info:
         const sat_sfPv1_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUKC() //  [R1]
         { []
         }
     {offset
       cfUKC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfULi; else goto cfULh;
       cfULi: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfULh: // global
           _sfPuR::P64 = P64[R1 + 7];
           _sfPuS::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPv0_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPuM::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPuM::P64;
           P64[Hp - 48] = _sfPuR::P64;
           P64[Hp - 40] = _sfPuS::P64;
           I64[Hp - 32] = sat_sfPuX_info;
           P64[Hp - 16] = _sfPuM::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPuR::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUKC_info" {
     block_cfUKC_info:
         const _cfUKC;
         const 4;
         const 30;
 },
 sat_sfPuO_entry() //  [R1]
         { []
         }
     {offset
       cfULo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfULp; else goto cfULq;
       cfULp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfULq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataLast1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPuO_info" {
     sat_sfPuO_info:
         const sat_sfPuO_entry;
         const 1;
         const 16;
 },
 sat_sfPv2_entry() //  [R1]
         { []
         }
     {offset
       cfULr: // global
           _sfPv2::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfULs; else goto cfULt;
       cfULt: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfULv; else goto cfULu;
       cfULv: // global
           HpAlloc = 104;
           goto cfULs;
       cfULs: // global
           R1 = _sfPv2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfULu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPv2::P64;
           _sfPuH::P64 = P64[_sfPv2::P64 + 16];
           _sfPuI::P64 = P64[_sfPv2::P64 + 24];
           _sfPuJ::P64 = P64[_sfPv2::P64 + 32];
           _sfPuK::P64 = P64[_sfPv2::P64 + 40];
           _sfPuM::P64 = P64[_sfPv2::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPuJ::P64;
           P64[Hp - 72] = _sfPuH::P64;
           P64[Hp - 64] = _sfPuK::P64;
           I64[Hp - 56] = sat_sfPv1_info;
           P64[Hp - 48] = _sfPuI::P64;
           P64[Hp - 40] = _sfPuK::P64;
           P64[Hp - 32] = _sfPuM::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPuO_info;
           P64[Hp] = _sfPuM::P64;
           R2 = _sfPuM::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPv2_info" {
     sat_sfPv2_info:
         const sat_sfPv2_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataLast_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfULw: // global
           _sfPuK::P64 = R5;
           _sfPuJ::P64 = R4;
           _sfPuI::P64 = R3;
           _sfPuH::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfULx; else goto cfULy;
       cfULy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfULA; else goto cfULz;
       cfULA: // global
           HpAlloc = 24;
           goto cfULx;
       cfULx: // global
           R5 = _sfPuK::P64;
           R4 = _sfPuJ::P64;
           R3 = _sfPuI::P64;
           R2 = _sfPuH::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfULz: // global
           I64[Hp - 16] = lvl33_sfPuL_info;
           P64[Hp] = _sfPuI::P64;
           I64[Sp - 48] = block_cfUJV_info;
           R2 = _sfPuI::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPuH::P64;
           P64[Sp - 24] = _sfPuI::P64;
           P64[Sp - 16] = _sfPuJ::P64;
           P64[Sp - 8] = _sfPuK::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapMp_info" {
     Data.Semigroup.$fDataLast_$cgmapMp_info:
         const Data.Semigroup.$fDataLast_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUJV() //  [R1]
         { []
         }
     {offset
       cfUJV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfULD; else goto cfULC;
       cfULD: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfULC: // global
           I64[Hp - 72] = sat_sfPv8_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPv2_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUJV_info" {
     block_cfUJV_info:
         const _cfUJV;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.580061402 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapM_closure" {
     Data.Semigroup.$fDataLast_$cgmapM_closure:
         const Data.Semigroup.$fDataLast_$cgmapM_info;
 },
 sat_sfPvi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUNE: // global
           _sfPvg::P64 = R2;
           _sfPvi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUNF; else goto cfUNG;
       cfUNG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfUNI; else goto cfUNH;
       cfUNI: // global
           HpAlloc = 32;
           goto cfUNF;
       cfUNF: // global
           R2 = _sfPvg::P64;
           R1 = _sfPvi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUNH: // global
           _sfPva::P64 = P64[_sfPvi::P64 + 7];
           _sfPvf::P64 = P64[_sfPvi::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPvf::P64;
           P64[Hp] = _sfPvg::P64;
           R2 = _sfPva::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPvi_info" {
     sat_sfPvi_info:
         const sat_sfPvi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPvj_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUNJ: // global
           _sfPvf::P64 = R2;
           _sfPvj::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUNK; else goto cfUNL;
       cfUNL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUNN; else goto cfUNM;
       cfUNN: // global
           HpAlloc = 24;
           goto cfUNK;
       cfUNK: // global
           R2 = _sfPvf::P64;
           R1 = _sfPvj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUNM: // global
           _sfPva::P64 = P64[_sfPvj::P64 + 7];
           _sfPvd::P64 = P64[_sfPvj::P64 + 15];
           I64[Hp - 16] = sat_sfPvi_info;
           P64[Hp - 8] = _sfPva::P64;
           P64[Hp] = _sfPvf::P64;
           R2 = _sfPva::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPvd::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPvj_info" {
     sat_sfPvj_info:
         const sat_sfPvj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPve_entry() //  [R1]
         { []
         }
     {offset
       cfUNS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUNT; else goto cfUNU;
       cfUNT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUNU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPve_info" {
     sat_sfPve_info:
         const sat_sfPve_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataLast_$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUNV: // global
           _sfPvc::P64 = R5;
           _sfPvb::P64 = R4;
           _sfPva::P64 = R3;
           _sfPv9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfUNW; else goto cfUNX;
       cfUNX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfUNZ; else goto cfUNY;
       cfUNZ: // global
           HpAlloc = 88;
           goto cfUNW;
       cfUNW: // global
           R5 = _sfPvc::P64;
           R4 = _sfPvb::P64;
           R3 = _sfPva::P64;
           R2 = _sfPv9::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUNY: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfPvb::P64;
           P64[Hp - 56] = _sfPv9::P64;
           P64[Hp - 48] = _sfPvc::P64;
           I64[Hp - 40] = sat_sfPvj_info;
           P64[Hp - 32] = _sfPva::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfPve_info;
           P64[Hp] = _sfPva::P64;
           R2 = _sfPva::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapM_info" {
     Data.Semigroup.$fDataLast_$cgmapM_info:
         const Data.Semigroup.$fDataLast_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.591720434 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapQi_closure" {
     Data.Semigroup.$fDataLast_$cgmapQi_closure:
         const Data.Semigroup.$fDataLast_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataLast_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUOE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUOF; else goto cfUOG;
       cfUOF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUOG: // global
           I64[Sp - 32] = block_cfUOB_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufUOO; else goto cfUOC;
       ufUOO: // global
           call _cfUOB(R1) args: 0, res: 0, upd: 0;
       cfUOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapQi_info" {
     Data.Semigroup.$fDataLast_$cgmapQi_info:
         const Data.Semigroup.$fDataLast_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfPCb_srt+1480;
 },
 _cfUOB() //  [R1]
         { []
         }
     {offset
       cfUOB: // global
           if (I64[R1 + 7] == 0) goto cfUON; else goto cfUOM;
       cfUON: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUOM: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUOB_info" {
     block_cfUOB_info:
         const _cfUOB;
         const 3;
         const 4294967326;
         const SfPCb_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.604003717 UTC

[section ""data" . Data.Semigroup.$fDataLast_$cgmapMo_closure" {
     Data.Semigroup.$fDataLast_$cgmapMo_closure:
         const Data.Semigroup.$fDataLast_$cgmapMo_info;
 },
 lvl33_sfPvv_entry() //  [R1]
         { []
         }
     {offset
       cfUP7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUP8; else goto cfUP9;
       cfUP8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUP9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPvv_info" {
     lvl33_sfPvv_info:
         const lvl33_sfPvv_entry;
         const 1;
         const 16;
 },
 sat_sfPvV_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUPm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUPn; else goto cfUPo;
       cfUPn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUPo: // global
           I64[Sp - 24] = block_cfUPj_info;
           _sfPvv::P64 = P64[R1 + 7];
           _sfPvw::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPvv::P64;
           P64[Sp - 8] = _sfPvw::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUPG; else goto cfUPk;
       ufUPG: // global
           call _cfUPj(R1) args: 0, res: 0, upd: 0;
       cfUPk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPvV_info" {
     sat_sfPvV_info:
         const sat_sfPvV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUPj() //  [R1]
         { []
         }
     {offset
       cfUPj: // global
           I64[Sp - 8] = block_cfUPr_info;
           _sfPvS::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPvS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUPF; else goto cfUPt;
       ufUPF: // global
           call _cfUPr(R1) args: 0, res: 0, upd: 0;
       cfUPt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUPj_info" {
     block_cfUPj_info:
         const _cfUPj;
         const 2;
         const 30;
 },
 _cfUPr() //  [R1]
         { []
         }
     {offset
       cfUPr: // global
           if (R1 & 7 == 1) goto cfUPz; else goto cfUPD;
       cfUPz: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfUPD: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUPr_info" {
     block_cfUPr_info:
         const _cfUPr;
         const 3;
         const 30;
 },
 sat_sfPvL_entry() //  [R1]
         { []
         }
     {offset
       cfUQ7: // global
           _sfPvL::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfUQ8; else goto cfUQ9;
       cfUQ9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUQb; else goto cfUQa;
       cfUQb: // global
           HpAlloc = 56;
           goto cfUQ8;
       cfUQ8: // global
           R1 = _sfPvL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUQa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPvL::P64;
           _sfPvu::P64 = P64[_sfPvL::P64 + 16];
           _sfPvw::P64 = P64[_sfPvL::P64 + 24];
           _sfPvB::P64 = P64[_sfPvL::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPvB::P64;
           P64[Hp - 24] = _sfPvu::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPvw::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPvL_info" {
     sat_sfPvL_info:
         const sat_sfPvL_entry;
         const 3;
         const 15;
 },
 sat_sfPvH_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUQn: // global
           _sfPvE::P64 = R2;
           _sfPvH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfUQo; else goto cfUQp;
       cfUQp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUQr; else goto cfUQq;
       cfUQr: // global
           HpAlloc = 56;
           goto cfUQo;
       cfUQo: // global
           R2 = _sfPvE::P64;
           R1 = _sfPvH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUQq: // global
           _sfPvw::P64 = P64[_sfPvH::P64 + 7];
           _sfPvB::P64 = P64[_sfPvH::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPvB::P64;
           P64[Hp - 24] = _sfPvE::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPvw::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPvH_info" {
     sat_sfPvH_info:
         const sat_sfPvH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPvI_entry() //  [R1]
         { []
         }
     {offset
       cfUQs: // global
           _sfPvI::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUQt; else goto cfUQu;
       cfUQu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUQw; else goto cfUQv;
       cfUQw: // global
           HpAlloc = 24;
           goto cfUQt;
       cfUQt: // global
           R1 = _sfPvI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPvI::P64;
           _sfPvw::P64 = P64[_sfPvI::P64 + 16];
           _sfPvx::P64 = P64[_sfPvI::P64 + 24];
           _sfPvB::P64 = P64[_sfPvI::P64 + 32];
           I64[Hp - 16] = sat_sfPvH_info;
           P64[Hp - 8] = _sfPvw::P64;
           P64[Hp] = _sfPvB::P64;
           R2 = _sfPvw::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPvx::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPvI_info" {
     sat_sfPvI_info:
         const sat_sfPvI_entry;
         const 3;
         const 15;
 },
 sat_sfPvO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUQx: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfUQy; else goto cfUQz;
       cfUQy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUQz: // global
           I64[Sp - 40] = block_cfUPR_info;
           _sfPvs::P64 = P64[R1 + 7];
           _sfPvu::P64 = P64[R1 + 15];
           _sfPvw::P64 = P64[R1 + 23];
           _sfPvx::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPvs::P64;
           P64[Sp - 24] = _sfPvu::P64;
           P64[Sp - 16] = _sfPvw::P64;
           P64[Sp - 8] = _sfPvx::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufUQQ; else goto cfUPS;
       ufUQQ: // global
           call _cfUPR(R1) args: 0, res: 0, upd: 0;
       cfUPS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPvO_info" {
     sat_sfPvO_info:
         const sat_sfPvO_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfUPR() //  [R1]
         { []
         }
     {offset
       cfUPR: // global
           I64[Sp - 8] = block_cfUPW_info;
           _sfPvB::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPvB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufUQP; else goto cfUPX;
       ufUQP: // global
           call _cfUPW(R1) args: 0, res: 0, upd: 0;
       cfUPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUPR_info" {
     block_cfUPR_info:
         const _cfUPR;
         const 4;
         const 30;
 },
 _cfUPW() //  [R1]
         { []
         }
     {offset
       cfUPW: // global
           _sfPvu::P64 = P64[Sp + 24];
           _sfPvw::P64 = P64[Sp + 32];
           _sfPvB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfUQC; else goto cfUQG;
       cfUQC: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfUQF; else goto cfUQE;
       cfUQF: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUQE: // global
           I64[Hp - 72] = sat_sfPvL_info;
           P64[Hp - 56] = _sfPvu::P64;
           P64[Hp - 48] = _sfPvw::P64;
           P64[Hp - 40] = _sfPvB::P64;
           I64[Hp - 32] = sat_sfPvI_info;
           P64[Hp - 16] = _sfPvw::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPvB::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfUQG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfUQL; else goto cfUQK;
       cfUQL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUQK: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPvB::P64;
           P64[Hp - 24] = _sfPvu::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPvw::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUPW_info" {
     block_cfUPW_info:
         const _cfUPW;
         const 5;
         const 30;
 },
 sat_sfPvy_entry() //  [R1]
         { []
         }
     {offset
       cfUQV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUQW; else goto cfUQX;
       cfUQW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUQX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataLast1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPvy_info" {
     sat_sfPvy_info:
         const sat_sfPvy_entry;
         const 1;
         const 16;
 },
 sat_sfPvP_entry() //  [R1]
         { []
         }
     {offset
       cfUQY: // global
           _sfPvP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfUQZ; else goto cfUR0;
       cfUR0: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfUR2; else goto cfUR1;
       cfUR2: // global
           HpAlloc = 104;
           goto cfUQZ;
       cfUQZ: // global
           R1 = _sfPvP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUR1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPvP::P64;
           _sfPvr::P64 = P64[_sfPvP::P64 + 16];
           _sfPvs::P64 = P64[_sfPvP::P64 + 24];
           _sfPvt::P64 = P64[_sfPvP::P64 + 32];
           _sfPvu::P64 = P64[_sfPvP::P64 + 40];
           _sfPvw::P64 = P64[_sfPvP::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPvt::P64;
           P64[Hp - 72] = _sfPvr::P64;
           P64[Hp - 64] = _sfPvu::P64;
           I64[Hp - 56] = sat_sfPvO_info;
           P64[Hp - 48] = _sfPvs::P64;
           P64[Hp - 40] = _sfPvu::P64;
           P64[Hp - 32] = _sfPvw::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPvy_info;
           P64[Hp] = _sfPvw::P64;
           R2 = _sfPvw::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPvP_info" {
     sat_sfPvP_info:
         const sat_sfPvP_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataLast_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfUR3: // global
           _sfPvu::P64 = R5;
           _sfPvt::P64 = R4;
           _sfPvs::P64 = R3;
           _sfPvr::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfUR4; else goto cfUR5;
       cfUR5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUR7; else goto cfUR6;
       cfUR7: // global
           HpAlloc = 24;
           goto cfUR4;
       cfUR4: // global
           R5 = _sfPvu::P64;
           R4 = _sfPvt::P64;
           R3 = _sfPvs::P64;
           R2 = _sfPvr::P64;
           R1 = Data.Semigroup.$fDataLast_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUR6: // global
           I64[Hp - 16] = lvl33_sfPvv_info;
           P64[Hp] = _sfPvs::P64;
           I64[Sp - 48] = block_cfUPa_info;
           R2 = _sfPvs::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPvr::P64;
           P64[Sp - 24] = _sfPvs::P64;
           P64[Sp - 16] = _sfPvt::P64;
           P64[Sp - 8] = _sfPvu::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_$cgmapMo_info" {
     Data.Semigroup.$fDataLast_$cgmapMo_info:
         const Data.Semigroup.$fDataLast_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUPa() //  [R1]
         { []
         }
     {offset
       cfUPa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfURa; else goto cfUR9;
       cfURa: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUR9: // global
           I64[Hp - 72] = sat_sfPvV_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPvP_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUPa_info" {
     block_cfUPa_info:
         const _cfUPa;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.633580517 UTC

[section ""data" . lvl24_rfC77_closure" {
     lvl24_rfC77_closure:
         const lvl24_rfC77_info;
         const 0;
 },
 lvl24_rfC77_entry() //  []
         { []
         }
     {offset
       cfUTe: // global
           R1 = Data.Semigroup.$cLast_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl24_rfC77_info" {
     lvl24_rfC77_info:
         const lvl24_rfC77_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.636972608 UTC

[section ""data" . lvl25_rfC78_closure" {
     lvl25_rfC78_closure:
         const lvl25_rfC78_info;
         const 0;
 },
 lvl25_rfC78_entry() //  []
         { []
         }
     {offset
       cfUTq: // global
           R1 = Data.Semigroup.$tLast_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl25_rfC78_info" {
     lvl25_rfC78_info:
         const lvl25_rfC78_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.640331592 UTC

[section ""data" . lvl26_rfC79_closure" {
     lvl26_rfC79_closure:
         const lvl26_rfC79_info;
 },
 lvl26_rfC79_entry() //  []
         { []
         }
     {offset
       cfUTC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl26_rfC79_info" {
     lvl26_rfC79_info:
         const lvl26_rfC79_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.649165615 UTC

[section ""data" . Data.Semigroup.$fDataLast_closure" {
     Data.Semigroup.$fDataLast_closure:
         const Data.Semigroup.$fDataLast_info;
         const 0;
 },
 sat_sfPwv_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUTU: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapMo_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwv_info" {
     sat_sfPwv_info:
         const sat_sfPwv_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPwu_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUU2: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapMp_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwu_info" {
     sat_sfPwu_info:
         const sat_sfPwu_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPwt_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUUa: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapM_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwt_info" {
     sat_sfPwt_info:
         const sat_sfPwt_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPws_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUUi: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgmapQi_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPws_info" {
     sat_sfPws_info:
         const sat_sfPws_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1480;
 },
 sat_sfPwr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUUs: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfUUw; else goto cfUUv;
       cfUUw: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUUv: // global
           _sfPw0::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfPw0::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwr_info" {
     sat_sfPwr_info:
         const sat_sfPwr_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPwn_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUUD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUUH; else goto cfUUG;
       cfUUH: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUUG: // global
           _sfPw0::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPw0::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfPwi::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfPwi::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwn_info" {
     sat_sfPwn_info:
         const sat_sfPwn_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPwh_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUUO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfUUS; else goto cfUUR;
       cfUUS: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUUR: // global
           _sfPw0::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPw0::P64;
           P64[Hp] = R5;
           _sfPwd::P64 = R3;
           R3 = Hp - 32;
           _sfPwc::P64 = R2;
           R2 = _sfPwd::P64;
           R1 = _sfPwc::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwh_info" {
     sat_sfPwh_info:
         const sat_sfPwh_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPwb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfUUY: // global
           R3 = R3;
           _sfPw9::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfPw9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwb_info" {
     sat_sfPwb_info:
         const sat_sfPwb_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPw8_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUV6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataLast_$cdataCast1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPw8_info" {
     sat_sfPw8_info:
         const sat_sfPw8_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1472;
 },
 sat_sfPw6_entry() //  [R1]
         { []
         }
     {offset
       cfUVi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUVj; else goto cfUVk;
       cfUVj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUVk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPw6_info" {
     sat_sfPw6_info:
         const sat_sfPw6_entry;
         const 1;
         const 16;
 },
 sat_sfPw7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUVl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfUVp; else goto cfUVo;
       cfUVp: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUVo: // global
           _sfPw0::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfPw6_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfPw3::P64 = R2;
           R2 = _sfPw0::P64;
           R1 = _sfPw3::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPw7_info" {
     sat_sfPw7_info:
         const sat_sfPw7_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPw2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfUVv: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataLast_$cgfoldl_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPw2_info" {
     sat_sfPw2_info:
         const sat_sfPw2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPw1_entry() //  [R1]
         { []
         }
     {offset
       cfUVC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUVD; else goto cfUVE;
       cfUVD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUVE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataLast8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPw1_info" {
     sat_sfPw1_info:
         const sat_sfPw1_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1456;
 },
 Data.Semigroup.$fDataLast_entry() //  [R2]
         { []
         }
     {offset
       cfUVG: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfUVK; else goto cfUVJ;
       cfUVK: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataLast_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUVJ: // global
           I64[Hp - 320] = sat_sfPwv_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPwu_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPwt_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPws_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPwr_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPwn_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPwh_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPwb_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPw8_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPw7_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPw2_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPw1_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl24_rfC77_closure+1;
           P64[Hp - 80] = lvl25_rfC78_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl26_rfC79_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataLast_info" {
     Data.Semigroup.$fDataLast_info:
         const Data.Semigroup.$fDataLast_entry;
         const 0;
         const 3904125272078;
         const 4294967301;
         const SfPCb_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.674532714 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid3_closure" {
     Data.Semigroup.$fDataWrappedMonoid3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataWrappedMonoid4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.67629285 UTC

[section ""data" . Data.Semigroup.$tcWrappedMonoid_closure" {
     Data.Semigroup.$tcWrappedMonoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataWrappedMonoid3_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3715640179151546043;
         const 2823802549020348832;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.678104318 UTC

[section ""data" . $krep12_rfC7a_closure" {
     $krep12_rfC7a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcWrappedMonoid_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.679840035 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid1_closure" {
     Data.Semigroup.$tc'WrapMonoid1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rfC6K_closure+2;
         const $krep12_rfC7a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.681874982 UTC

[section ""cstring" . Data.Semigroup.$tc'WrapMonoid3_bytes" {
     Data.Semigroup.$tc'WrapMonoid3_bytes:
         I8[] [39,87,114,97,112,77,111,110,111,105,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.68344956 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid2_closure" {
     Data.Semigroup.$tc'WrapMonoid2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'WrapMonoid3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.685195695 UTC

[section ""data" . Data.Semigroup.$tc'WrapMonoid_closure" {
     Data.Semigroup.$tc'WrapMonoid_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'WrapMonoid2_closure+1;
         const Data.Semigroup.$tc'WrapMonoid1_closure+4;
         const 4283841874858276090;
         const 3445460813926951313;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.688494581 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid2_closure" {
     Data.Semigroup.$fDataWrappedMonoid2_closure:
         const Data.Semigroup.$fDataWrappedMonoid2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid2_entry() //  [R1]
         { []
         }
     {offset
       cfUXq: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfUXr; else goto cfUXs;
       cfUXr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUXs: // global
           (_cfUXi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfUXi::I64 == 0) goto cfUXk; else goto cfUXj;
       cfUXk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfUXj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfUXi::I64;
           I64[Sp - 24] = block_cfUXl_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataWrappedMonoid3_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 2823802549020348832;
           R2 = 3715640179151546043;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid2_info" {
     Data.Semigroup.$fDataWrappedMonoid2_info:
         const Data.Semigroup.$fDataWrappedMonoid2_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1440;
 },
 _cfUXl() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfUXl: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfUXm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfUXl_info" {
     block_cfUXl_info:
         const _cfUXl;
         const 0;
         const 30;
 },
 _cfUXm() //  []
         { []
         }
     {offset
       cfUXm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUXv; else goto cfUXu;
       cfUXv: // global
           HpAlloc = 48;
           I64[Sp] = block_cfUXm_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfUXu: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfUXm_info" {
     block_cfUXm_info:
         const _cfUXm;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.696318253 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid8_closure" {
     Data.Semigroup.$fDataWrappedMonoid8_closure:
         const Data.Semigroup.$fDataWrappedMonoid8_info;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid8_entry() //  [R2]
         { []
         }
     {offset
       cfUY4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfUY5; else goto cfUY6;
       cfUY5: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUY6: // global
           I64[Sp - 8] = block_cfUY2_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid8_info" {
     Data.Semigroup.$fDataWrappedMonoid8_info:
         const Data.Semigroup.$fDataWrappedMonoid8_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const SfPCb_srt+1464;
 },
 _cfUY2() //  [R1]
         { []
         }
     {offset
       cfUY2: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataWrappedMonoid2_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUY2_info" {
     block_cfUY2_info:
         const _cfUY2;
         const 0;
         const 2203318222878;
         const SfPCb_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.704212159 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufUYZ_srtd" {
     ufUYZ_srtd:
         const SfPCb_srt+1152;
         const 49;
         const 281474976710657;
 },
 lvl33_sfPwG_entry() //  [R1]
         { []
         }
     {offset
       cfUYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUYs; else goto cfUYt;
       cfUYs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUYt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataWrappedMonoid2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPwG_info" {
     lvl33_sfPwG_info:
         const lvl33_sfPwG_entry;
         const 1;
         const 18446744069414584336;
         const ufUYZ_srtd;
 },
 sat_sfPwK_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUYG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfUYH; else goto cfUYI;
       cfUYH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUYI: // global
           I64[Sp - 24] = block_cfUYz_info;
           _sfPwE::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPwE::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufUYT; else goto cfUYA;
       ufUYT: // global
           call _cfUYz(R1) args: 0, res: 0, upd: 0;
       cfUYA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPwK_info" {
     sat_sfPwK_info:
         const sat_sfPwK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUYz() //  [R1]
         { []
         }
     {offset
       cfUYz: // global
           if (R1 & 7 == 1) goto cfUYD; else goto cfUYE;
       cfUYD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfUYE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUYS; else goto cfUYR;
       cfUYS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfUYR: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUYz_info" {
     block_cfUYz_info:
         const _cfUYz;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufUZ0_srtd" {
     ufUZ0_srtd:
         const SfPCb_srt+1152;
         const 51;
         const 1407374883553281;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfUYU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfUYY; else goto cfUYX;
       cfUYY: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfUYX: // global
           I64[Hp - 40] = lvl33_sfPwG_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPwK_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufUZ0_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.714036611 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid1_closure" {
     Data.Semigroup.$fDataWrappedMonoid1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fApplicativeFirst3_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.722638521 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info;
 },
 lvl33_sfPwP_entry() //  [R1]
         { []
         }
     {offset
       cfUZI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfUZJ; else goto cfUZK;
       cfUZJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfUZK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPwP_info" {
     lvl33_sfPwP_info:
         const lvl33_sfPwP_entry;
         const 1;
         const 16;
 },
 sat_sfPxc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfUZX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfUZY; else goto cfUZZ;
       cfUZY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfUZZ: // global
           I64[Sp - 24] = block_cfUZU_info;
           _sfPwP::P64 = P64[R1 + 7];
           _sfPwQ::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPwP::P64;
           P64[Sp - 8] = _sfPwQ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufV0h; else goto cfUZV;
       ufV0h: // global
           call _cfUZU(R1) args: 0, res: 0, upd: 0;
       cfUZV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxc_info" {
     sat_sfPxc_info:
         const sat_sfPxc_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfUZU() //  [R1]
         { []
         }
     {offset
       cfUZU: // global
           I64[Sp - 8] = block_cfV02_info;
           _sfPx9::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPx9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufV0g; else goto cfV04;
       ufV0g: // global
           call _cfV02(R1) args: 0, res: 0, upd: 0;
       cfV04: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUZU_info" {
     block_cfUZU_info:
         const _cfUZU;
         const 2;
         const 30;
 },
 _cfV02() //  [R1]
         { []
         }
     {offset
       cfV02: // global
           if (R1 & 7 == 1) goto cfV0a; else goto cfV0e;
       cfV0a: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfV0e: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV02_info" {
     block_cfV02_info:
         const _cfV02;
         const 3;
         const 30;
 },
 sat_sfPx4_entry() //  [R1]
         { []
         }
     {offset
       cfV0D: // global
           _sfPx4::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfV0E; else goto cfV0F;
       cfV0F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfV0H; else goto cfV0G;
       cfV0H: // global
           HpAlloc = 56;
           goto cfV0E;
       cfV0E: // global
           R1 = _sfPx4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV0G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPx4::P64;
           _sfPwO::P64 = P64[_sfPx4::P64 + 16];
           _sfPwQ::P64 = P64[_sfPx4::P64 + 24];
           _sfPwV::P64 = P64[_sfPx4::P64 + 32];
           _sfPwW::P64 = P64[_sfPx4::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPwV::P64;
           P64[Hp - 24] = _sfPwO::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPwW::P64;
           R2 = _sfPwQ::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPx4_info" {
     sat_sfPx4_info:
         const sat_sfPx4_entry;
         const 4;
         const 15;
 },
 sat_sfPx0_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV0T: // global
           _sfPwX::P64 = R2;
           _sfPx0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfV0U; else goto cfV0V;
       cfV0V: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfV0X; else goto cfV0W;
       cfV0X: // global
           HpAlloc = 56;
           goto cfV0U;
       cfV0U: // global
           R2 = _sfPwX::P64;
           R1 = _sfPx0::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV0W: // global
           _sfPwQ::P64 = P64[_sfPx0::P64 + 7];
           _sfPwV::P64 = P64[_sfPx0::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPwV::P64;
           P64[Hp - 24] = _sfPwX::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPwQ::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPx0_info" {
     sat_sfPx0_info:
         const sat_sfPx0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPx1_entry() //  [R1]
         { []
         }
     {offset
       cfV0Y: // global
           _sfPx1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfV0Z; else goto cfV10;
       cfV10: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfV12; else goto cfV11;
       cfV12: // global
           HpAlloc = 24;
           goto cfV0Z;
       cfV0Z: // global
           R1 = _sfPx1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPx1::P64;
           _sfPwQ::P64 = P64[_sfPx1::P64 + 16];
           _sfPwR::P64 = P64[_sfPx1::P64 + 24];
           _sfPwV::P64 = P64[_sfPx1::P64 + 32];
           I64[Hp - 16] = sat_sfPx0_info;
           P64[Hp - 8] = _sfPwQ::P64;
           P64[Hp] = _sfPwV::P64;
           R2 = _sfPwQ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPwR::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPx1_info" {
     sat_sfPx1_info:
         const sat_sfPx1_entry;
         const 3;
         const 15;
 },
 sat_sfPx5_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV13: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfV14; else goto cfV15;
       cfV14: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV15: // global
           I64[Sp - 40] = block_cfV0s_info;
           _sfPwM::P64 = P64[R1 + 7];
           _sfPwO::P64 = P64[R1 + 15];
           _sfPwQ::P64 = P64[R1 + 23];
           _sfPwR::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPwM::P64;
           P64[Sp - 24] = _sfPwO::P64;
           P64[Sp - 16] = _sfPwQ::P64;
           P64[Sp - 8] = _sfPwR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufV19; else goto cfV0t;
       ufV19: // global
           call _cfV0s(R1) args: 0, res: 0, upd: 0;
       cfV0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPx5_info" {
     sat_sfPx5_info:
         const sat_sfPx5_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfV0s() //  [R1]
         { []
         }
     {offset
       cfV0s: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfV18; else goto cfV17;
       cfV18: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfV17: // global
           _sfPwV::P64 = P64[R1 + 7];
           _sfPwW::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPx4_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPwQ::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPwQ::P64;
           P64[Hp - 48] = _sfPwV::P64;
           P64[Hp - 40] = _sfPwW::P64;
           I64[Hp - 32] = sat_sfPx1_info;
           P64[Hp - 16] = _sfPwQ::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPwV::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV0s_info" {
     block_cfV0s_info:
         const _cfV0s;
         const 4;
         const 30;
 },
 sat_sfPwS_entry() //  [R1]
         { []
         }
     {offset
       cfV1e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfV1f; else goto cfV1g;
       cfV1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV1g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataWrappedMonoid1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPwS_info" {
     sat_sfPwS_info:
         const sat_sfPwS_entry;
         const 1;
         const 16;
 },
 sat_sfPx6_entry() //  [R1]
         { []
         }
     {offset
       cfV1h: // global
           _sfPx6::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfV1i; else goto cfV1j;
       cfV1j: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfV1l; else goto cfV1k;
       cfV1l: // global
           HpAlloc = 104;
           goto cfV1i;
       cfV1i: // global
           R1 = _sfPx6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPx6::P64;
           _sfPwL::P64 = P64[_sfPx6::P64 + 16];
           _sfPwM::P64 = P64[_sfPx6::P64 + 24];
           _sfPwN::P64 = P64[_sfPx6::P64 + 32];
           _sfPwO::P64 = P64[_sfPx6::P64 + 40];
           _sfPwQ::P64 = P64[_sfPx6::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPwN::P64;
           P64[Hp - 72] = _sfPwL::P64;
           P64[Hp - 64] = _sfPwO::P64;
           I64[Hp - 56] = sat_sfPx5_info;
           P64[Hp - 48] = _sfPwM::P64;
           P64[Hp - 40] = _sfPwO::P64;
           P64[Hp - 32] = _sfPwQ::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPwS_info;
           P64[Hp] = _sfPwQ::P64;
           R2 = _sfPwQ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPx6_info" {
     sat_sfPx6_info:
         const sat_sfPx6_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfV1m: // global
           _sfPwO::P64 = R5;
           _sfPwN::P64 = R4;
           _sfPwM::P64 = R3;
           _sfPwL::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfV1n; else goto cfV1o;
       cfV1o: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfV1q; else goto cfV1p;
       cfV1q: // global
           HpAlloc = 24;
           goto cfV1n;
       cfV1n: // global
           R5 = _sfPwO::P64;
           R4 = _sfPwN::P64;
           R3 = _sfPwM::P64;
           R2 = _sfPwL::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfV1p: // global
           I64[Hp - 16] = lvl33_sfPwP_info;
           P64[Hp] = _sfPwM::P64;
           I64[Sp - 48] = block_cfUZL_info;
           R2 = _sfPwM::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPwL::P64;
           P64[Sp - 24] = _sfPwM::P64;
           P64[Sp - 16] = _sfPwN::P64;
           P64[Sp - 8] = _sfPwO::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfUZL() //  [R1]
         { []
         }
     {offset
       cfUZL: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfV1t; else goto cfV1s;
       cfV1t: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfV1s: // global
           I64[Hp - 72] = sat_sfPxc_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPx6_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfUZL_info" {
     block_cfUZL_info:
         const _cfUZL;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.751538617 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info;
 },
 sat_sfPxm_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV3u: // global
           _sfPxk::P64 = R2;
           _sfPxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfV3v; else goto cfV3w;
       cfV3w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfV3y; else goto cfV3x;
       cfV3y: // global
           HpAlloc = 32;
           goto cfV3v;
       cfV3v: // global
           R2 = _sfPxk::P64;
           R1 = _sfPxm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV3x: // global
           _sfPxe::P64 = P64[_sfPxm::P64 + 7];
           _sfPxj::P64 = P64[_sfPxm::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPxj::P64;
           P64[Hp] = _sfPxk::P64;
           R2 = _sfPxe::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxm_info" {
     sat_sfPxm_info:
         const sat_sfPxm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPxn_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV3z: // global
           _sfPxj::P64 = R2;
           _sfPxn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfV3A; else goto cfV3B;
       cfV3B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfV3D; else goto cfV3C;
       cfV3D: // global
           HpAlloc = 24;
           goto cfV3A;
       cfV3A: // global
           R2 = _sfPxj::P64;
           R1 = _sfPxn::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV3C: // global
           _sfPxe::P64 = P64[_sfPxn::P64 + 7];
           _sfPxh::P64 = P64[_sfPxn::P64 + 15];
           I64[Hp - 16] = sat_sfPxm_info;
           P64[Hp - 8] = _sfPxe::P64;
           P64[Hp] = _sfPxj::P64;
           R2 = _sfPxe::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPxh::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxn_info" {
     sat_sfPxn_info:
         const sat_sfPxn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPxi_entry() //  [R1]
         { []
         }
     {offset
       cfV3I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfV3J; else goto cfV3K;
       cfV3J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV3K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fApplicativeFirst3_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPxi_info" {
     sat_sfPxi_info:
         const sat_sfPxi_entry;
         const 1;
         const 16;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cfV3L: // global
           _sfPxg::P64 = R5;
           _sfPxf::P64 = R4;
           _sfPxe::P64 = R3;
           _sfPxd::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfV3M; else goto cfV3N;
       cfV3N: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfV3P; else goto cfV3O;
       cfV3P: // global
           HpAlloc = 88;
           goto cfV3M;
       cfV3M: // global
           R5 = _sfPxg::P64;
           R4 = _sfPxf::P64;
           R3 = _sfPxe::P64;
           R2 = _sfPxd::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfV3O: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sfPxf::P64;
           P64[Hp - 56] = _sfPxd::P64;
           P64[Hp - 48] = _sfPxg::P64;
           I64[Hp - 40] = sat_sfPxn_info;
           P64[Hp - 32] = _sfPxe::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sfPxi_info;
           P64[Hp] = _sfPxe::P64;
           R2 = _sfPxe::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapM_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.762054891 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info;
         const 0;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfV4u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfV4v; else goto cfV4w;
       cfV4v: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfV4w: // global
           I64[Sp - 32] = block_cfV4r_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufV4E; else goto cfV4s;
       ufV4E: // global
           call _cfV4r(R1) args: 0, res: 0, upd: 0;
       cfV4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const SfPCb_srt+1488;
 },
 _cfV4r() //  [R1]
         { []
         }
     {offset
       cfV4r: // global
           if (I64[R1 + 7] == 0) goto cfV4D; else goto cfV4C;
       cfV4D: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfV4C: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV4r_info" {
     block_cfV4r_info:
         const _cfV4r;
         const 3;
         const 4294967326;
         const SfPCb_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.774034441 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info;
 },
 lvl33_sfPxz_entry() //  [R1]
         { []
         }
     {offset
       cfV4X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfV4Y; else goto cfV4Z;
       cfV4Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV4Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPxz_info" {
     lvl33_sfPxz_info:
         const lvl33_sfPxz_entry;
         const 1;
         const 16;
 },
 sat_sfPxZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV5c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfV5d; else goto cfV5e;
       cfV5d: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV5e: // global
           I64[Sp - 24] = block_cfV59_info;
           _sfPxz::P64 = P64[R1 + 7];
           _sfPxA::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPxz::P64;
           P64[Sp - 8] = _sfPxA::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufV5w; else goto cfV5a;
       ufV5w: // global
           call _cfV59(R1) args: 0, res: 0, upd: 0;
       cfV5a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxZ_info" {
     sat_sfPxZ_info:
         const sat_sfPxZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfV59() //  [R1]
         { []
         }
     {offset
       cfV59: // global
           I64[Sp - 8] = block_cfV5h_info;
           _sfPxW::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPxW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufV5v; else goto cfV5j;
       ufV5v: // global
           call _cfV5h(R1) args: 0, res: 0, upd: 0;
       cfV5j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV59_info" {
     block_cfV59_info:
         const _cfV59;
         const 2;
         const 30;
 },
 _cfV5h() //  [R1]
         { []
         }
     {offset
       cfV5h: // global
           if (R1 & 7 == 1) goto cfV5p; else goto cfV5t;
       cfV5p: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfV5t: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV5h_info" {
     block_cfV5h_info:
         const _cfV5h;
         const 3;
         const 30;
 },
 sat_sfPxP_entry() //  [R1]
         { []
         }
     {offset
       cfV5X: // global
           _sfPxP::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfV5Y; else goto cfV5Z;
       cfV5Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfV61; else goto cfV60;
       cfV61: // global
           HpAlloc = 56;
           goto cfV5Y;
       cfV5Y: // global
           R1 = _sfPxP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPxP::P64;
           _sfPxy::P64 = P64[_sfPxP::P64 + 16];
           _sfPxA::P64 = P64[_sfPxP::P64 + 24];
           _sfPxF::P64 = P64[_sfPxP::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPxF::P64;
           P64[Hp - 24] = _sfPxy::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPxA::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPxP_info" {
     sat_sfPxP_info:
         const sat_sfPxP_entry;
         const 3;
         const 15;
 },
 sat_sfPxL_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV6d: // global
           _sfPxI::P64 = R2;
           _sfPxL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfV6e; else goto cfV6f;
       cfV6f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfV6h; else goto cfV6g;
       cfV6h: // global
           HpAlloc = 56;
           goto cfV6e;
       cfV6e: // global
           R2 = _sfPxI::P64;
           R1 = _sfPxL::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV6g: // global
           _sfPxA::P64 = P64[_sfPxL::P64 + 7];
           _sfPxF::P64 = P64[_sfPxL::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPxF::P64;
           P64[Hp - 24] = _sfPxI::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPxA::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxL_info" {
     sat_sfPxL_info:
         const sat_sfPxL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPxM_entry() //  [R1]
         { []
         }
     {offset
       cfV6i: // global
           _sfPxM::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfV6j; else goto cfV6k;
       cfV6k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfV6m; else goto cfV6l;
       cfV6m: // global
           HpAlloc = 24;
           goto cfV6j;
       cfV6j: // global
           R1 = _sfPxM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV6l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPxM::P64;
           _sfPxA::P64 = P64[_sfPxM::P64 + 16];
           _sfPxB::P64 = P64[_sfPxM::P64 + 24];
           _sfPxF::P64 = P64[_sfPxM::P64 + 32];
           I64[Hp - 16] = sat_sfPxL_info;
           P64[Hp - 8] = _sfPxA::P64;
           P64[Hp] = _sfPxF::P64;
           R2 = _sfPxA::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPxB::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPxM_info" {
     sat_sfPxM_info:
         const sat_sfPxM_entry;
         const 3;
         const 15;
 },
 sat_sfPxS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfV6n: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfV6o; else goto cfV6p;
       cfV6o: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfV6p: // global
           I64[Sp - 40] = block_cfV5H_info;
           _sfPxw::P64 = P64[R1 + 7];
           _sfPxy::P64 = P64[R1 + 15];
           _sfPxA::P64 = P64[R1 + 23];
           _sfPxB::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPxw::P64;
           P64[Sp - 24] = _sfPxy::P64;
           P64[Sp - 16] = _sfPxA::P64;
           P64[Sp - 8] = _sfPxB::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufV6G; else goto cfV5I;
       ufV6G: // global
           call _cfV5H(R1) args: 0, res: 0, upd: 0;
       cfV5I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPxS_info" {
     sat_sfPxS_info:
         const sat_sfPxS_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfV5H() //  [R1]
         { []
         }
     {offset
       cfV5H: // global
           I64[Sp - 8] = block_cfV5M_info;
           _sfPxF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPxF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufV6F; else goto cfV5N;
       ufV6F: // global
           call _cfV5M(R1) args: 0, res: 0, upd: 0;
       cfV5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV5H_info" {
     block_cfV5H_info:
         const _cfV5H;
         const 4;
         const 30;
 },
 _cfV5M() //  [R1]
         { []
         }
     {offset
       cfV5M: // global
           _sfPxy::P64 = P64[Sp + 24];
           _sfPxA::P64 = P64[Sp + 32];
           _sfPxF::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfV6s; else goto cfV6w;
       cfV6s: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfV6v; else goto cfV6u;
       cfV6v: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfV6u: // global
           I64[Hp - 72] = sat_sfPxP_info;
           P64[Hp - 56] = _sfPxy::P64;
           P64[Hp - 48] = _sfPxA::P64;
           P64[Hp - 40] = _sfPxF::P64;
           I64[Hp - 32] = sat_sfPxM_info;
           P64[Hp - 16] = _sfPxA::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPxF::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfV6w: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfV6B; else goto cfV6A;
       cfV6B: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfV6A: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPxF::P64;
           P64[Hp - 24] = _sfPxy::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPxA::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV5M_info" {
     block_cfV5M_info:
         const _cfV5M;
         const 5;
         const 30;
 },
 sat_sfPxC_entry() //  [R1]
         { []
         }
     {offset
       cfV6L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfV6M; else goto cfV6N;
       cfV6M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV6N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataWrappedMonoid1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPxC_info" {
     sat_sfPxC_info:
         const sat_sfPxC_entry;
         const 1;
         const 16;
 },
 sat_sfPxT_entry() //  [R1]
         { []
         }
     {offset
       cfV6O: // global
           _sfPxT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfV6P; else goto cfV6Q;
       cfV6Q: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfV6S; else goto cfV6R;
       cfV6S: // global
           HpAlloc = 104;
           goto cfV6P;
       cfV6P: // global
           R1 = _sfPxT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfV6R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPxT::P64;
           _sfPxv::P64 = P64[_sfPxT::P64 + 16];
           _sfPxw::P64 = P64[_sfPxT::P64 + 24];
           _sfPxx::P64 = P64[_sfPxT::P64 + 32];
           _sfPxy::P64 = P64[_sfPxT::P64 + 40];
           _sfPxA::P64 = P64[_sfPxT::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sfPxx::P64;
           P64[Hp - 72] = _sfPxv::P64;
           P64[Hp - 64] = _sfPxy::P64;
           I64[Hp - 56] = sat_sfPxS_info;
           P64[Hp - 48] = _sfPxw::P64;
           P64[Hp - 40] = _sfPxy::P64;
           P64[Hp - 32] = _sfPxA::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPxC_info;
           P64[Hp] = _sfPxA::P64;
           R2 = _sfPxA::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPxT_info" {
     sat_sfPxT_info:
         const sat_sfPxT_entry;
         const 5;
         const 15;
 },
 Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cfV6T: // global
           _sfPxy::P64 = R5;
           _sfPxx::P64 = R4;
           _sfPxw::P64 = R3;
           _sfPxv::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfV6U; else goto cfV6V;
       cfV6V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfV6X; else goto cfV6W;
       cfV6X: // global
           HpAlloc = 24;
           goto cfV6U;
       cfV6U: // global
           R5 = _sfPxy::P64;
           R4 = _sfPxx::P64;
           R3 = _sfPxw::P64;
           R2 = _sfPxv::P64;
           R1 = Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfV6W: // global
           I64[Hp - 16] = lvl33_sfPxz_info;
           P64[Hp] = _sfPxw::P64;
           I64[Sp - 48] = block_cfV50_info;
           R2 = _sfPxw::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPxv::P64;
           P64[Sp - 24] = _sfPxw::P64;
           P64[Sp - 16] = _sfPxx::P64;
           P64[Sp - 8] = _sfPxy::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info" {
     Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_info:
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfV50() //  [R1]
         { []
         }
     {offset
       cfV50: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfV70; else goto cfV6Z;
       cfV70: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfV6Z: // global
           I64[Hp - 72] = sat_sfPxZ_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPxT_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfV50_info" {
     block_cfV50_info:
         const _cfV50;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.803033357 UTC

[section ""data" . lvl27_rfC7b_closure" {
     lvl27_rfC7b_closure:
         const lvl27_rfC7b_info;
         const 0;
 },
 lvl27_rfC7b_entry() //  []
         { []
         }
     {offset
       cfV94: // global
           R1 = Data.Semigroup.$cWrapMonoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl27_rfC7b_info" {
     lvl27_rfC7b_info:
         const lvl27_rfC7b_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.806347829 UTC

[section ""data" . lvl28_rfC7c_closure" {
     lvl28_rfC7c_closure:
         const lvl28_rfC7c_info;
         const 0;
 },
 lvl28_rfC7c_entry() //  []
         { []
         }
     {offset
       cfV9g: // global
           R1 = Data.Semigroup.$tWrappedMonoid_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl28_rfC7c_info" {
     lvl28_rfC7c_info:
         const lvl28_rfC7c_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.809917084 UTC

[section ""data" . lvl29_rfC7d_closure" {
     lvl29_rfC7d_closure:
         const lvl29_rfC7d_info;
 },
 lvl29_rfC7d_entry() //  []
         { []
         }
     {offset
       cfV9s: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl29_rfC7d_info" {
     lvl29_rfC7d_info:
         const lvl29_rfC7d_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.818567752 UTC

[section ""data" . Data.Semigroup.$fDataWrappedMonoid_closure" {
     Data.Semigroup.$fDataWrappedMonoid_closure:
         const Data.Semigroup.$fDataWrappedMonoid_info;
         const 0;
 },
 sat_sfPyz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfV9K: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapMo_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyz_info" {
     sat_sfPyz_info:
         const sat_sfPyz_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPyy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfV9S: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapMp_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyy_info" {
     sat_sfPyy_info:
         const sat_sfPyy_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPyx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVa0: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapM_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyx_info" {
     sat_sfPyx_info:
         const sat_sfPyx_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPyw_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVa8: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyw_info" {
     sat_sfPyw_info:
         const sat_sfPyw_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1560;
 },
 sat_sfPyv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfVai: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfVam; else goto cfVal;
       cfVam: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVal: // global
           _sfPy4::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sfPy4::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyv_info" {
     sat_sfPyv_info:
         const sat_sfPyv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPyr_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfVat: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfVax; else goto cfVaw;
       cfVax: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVaw: // global
           _sfPy4::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPy4::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sfPym::P64 = R2;
           R2 = Hp - 32;
           R1 = _sfPym::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyr_info" {
     sat_sfPyr_info:
         const sat_sfPyr_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPyl_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfVaE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfVaI; else goto cfVaH;
       cfVaI: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVaH: // global
           _sfPy4::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sfPy4::P64;
           P64[Hp] = R5;
           _sfPyh::P64 = R3;
           R3 = Hp - 32;
           _sfPyg::P64 = R2;
           R2 = _sfPyh::P64;
           R1 = _sfPyg::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyl_info" {
     sat_sfPyl_info:
         const sat_sfPyl_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sfPyf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfVaO: // global
           R3 = R3;
           _sfPyd::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sfPyd::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyf_info" {
     sat_sfPyf_info:
         const sat_sfPyf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sfPyc_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVaW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyc_info" {
     sat_sfPyc_info:
         const sat_sfPyc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1552;
 },
 sat_sfPya_entry() //  [R1]
         { []
         }
     {offset
       cfVb8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVb9; else goto cfVba;
       cfVb9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVba: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Semigroup.$fApplicativeFirst3_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPya_info" {
     sat_sfPya_info:
         const sat_sfPya_entry;
         const 1;
         const 16;
 },
 sat_sfPyb_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVbb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVbf; else goto cfVbe;
       cfVbf: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVbe: // global
           _sfPy4::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sfPya_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sfPy7::P64 = R2;
           R2 = _sfPy4::P64;
           R1 = _sfPy7::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyb_info" {
     sat_sfPyb_info:
         const sat_sfPyb_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPy6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVbl: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataWrappedMonoid_$cgfoldl_entry(R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPy6_info" {
     sat_sfPy6_info:
         const sat_sfPy6_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sfPy5_entry() //  [R1]
         { []
         }
     {offset
       cfVbs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVbt; else goto cfVbu;
       cfVbt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVbu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataWrappedMonoid8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPy5_info" {
     sat_sfPy5_info:
         const sat_sfPy5_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1544;
 },
 Data.Semigroup.$fDataWrappedMonoid_entry() //  [R2]
         { []
         }
     {offset
       cfVbw: // global
           Hp = Hp + 328;
           if (Hp > HpLim) (likely: False) goto cfVbA; else goto cfVbz;
       cfVbA: // global
           HpAlloc = 328;
           R2 = R2;
           R1 = Data.Semigroup.$fDataWrappedMonoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVbz: // global
           I64[Hp - 320] = sat_sfPyz_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPyy_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPyx_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPyw_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPyv_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPyr_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPyl_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPyf_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPyc_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sfPyb_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sfPy6_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPy5_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = Hp - 173;
           P64[Hp - 88] = lvl27_rfC7b_closure+1;
           P64[Hp - 80] = lvl28_rfC7c_closure+1;
           P64[Hp - 72] = Hp - 191;
           P64[Hp - 64] = lvl29_rfC7d_closure+2;
           P64[Hp - 56] = Hp - 206;
           P64[Hp - 48] = Hp - 220;
           P64[Hp - 40] = Hp - 236;
           P64[Hp - 32] = Hp - 254;
           P64[Hp - 24] = Hp - 269;
           P64[Hp - 16] = Hp - 285;
           P64[Hp - 8] = Hp - 301;
           P64[Hp] = Hp - 317;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataWrappedMonoid_info" {
     Data.Semigroup.$fDataWrappedMonoid_info:
         const Data.Semigroup.$fDataWrappedMonoid_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const SfPCb_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.843932919 UTC

[section ""data" . Data.Semigroup.$fDataOption5_closure" {
     Data.Semigroup.$fDataOption5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$fDataOption6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.846025379 UTC

[section ""data" . Data.Semigroup.$tcOption_closure" {
     Data.Semigroup.$tcOption_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$fDataOption5_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 10723619047615802556;
         const 16447525423442151350;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.847792672 UTC

[section ""data" . $krep13_rfC7e_closure" {
     $krep13_rfC7e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Semigroup.$tcOption_closure+1;
         const $krep2_rfC6L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.849405228 UTC

[section ""data" . Data.Semigroup.$tc'Option1_closure" {
     Data.Semigroup.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rfC6M_closure+1;
         const $krep13_rfC7e_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.851065931 UTC

[section ""cstring" . Data.Semigroup.$tc'Option3_bytes" {
     Data.Semigroup.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.852663051 UTC

[section ""data" . Data.Semigroup.$tc'Option2_closure" {
     Data.Semigroup.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Semigroup.$tc'Option3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.854419766 UTC

[section ""data" . Data.Semigroup.$tc'Option_closure" {
     Data.Semigroup.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Semigroup.$trModule_closure+1;
         const Data.Semigroup.$tc'Option2_closure+1;
         const Data.Semigroup.$tc'Option1_closure+4;
         const 10684524870560962689;
         const 6198254930115905464;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.857765101 UTC

[section ""data" . Data.Semigroup.$fDataOption4_closure" {
     Data.Semigroup.$fDataOption4_closure:
         const Data.Semigroup.$fDataOption4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Semigroup.$fDataOption4_entry() //  [R1]
         { []
         }
     {offset
       cfVdg: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfVdh; else goto cfVdi;
       cfVdh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVdi: // global
           (_cfVd8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfVd8::I64 == 0) goto cfVda; else goto cfVd9;
       cfVda: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfVd9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfVd8::I64;
           I64[Sp - 24] = block_cfVdb_info;
           R6 = 0;
           R5 = Data.Semigroup.$fDataOption5_closure+1;
           R4 = Data.Semigroup.$trModule_closure+1;
           R3 = 16447525423442151350;
           R2 = 10723619047615802556;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption4_info" {
     Data.Semigroup.$fDataOption4_info:
         const Data.Semigroup.$fDataOption4_entry;
         const 0;
         const 4294967317;
         const SfPCb_srt+1440;
 },
 _cfVdb() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfVdb: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfVdc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfVdb_info" {
     block_cfVdb_info:
         const _cfVdb;
         const 0;
         const 30;
 },
 _cfVdc() //  []
         { []
         }
     {offset
       cfVdc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfVdl; else goto cfVdk;
       cfVdl: // global
           HpAlloc = 48;
           I64[Sp] = block_cfVdc_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfVdk: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfVdc_info" {
     block_cfVdc_info:
         const _cfVdc;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.866219779 UTC

[section ""data" . Data.Semigroup.$fDataOption10_closure" {
     Data.Semigroup.$fDataOption10_closure:
         const Data.Semigroup.$fDataOption10_info;
         const 0;
 },
 Data.Semigroup.$fDataOption10_entry() //  [R2]
         { []
         }
     {offset
       cfVdU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfVdV; else goto cfVdW;
       cfVdV: // global
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVdW: // global
           I64[Sp - 8] = block_cfVdS_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Data.$p1Data_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption10_info" {
     Data.Semigroup.$fDataOption10_info:
         const Data.Semigroup.$fDataOption10_entry;
         const 0;
         const 3377704015495182;
         const 4294967301;
         const SfPCb_srt+1464;
 },
 _cfVdS() //  [R1]
         { []
         }
     {offset
       cfVdS: // global
           R3 = R1;
           R2 = Data.Semigroup.$fDataOption4_closure;
           Sp = Sp + 8;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVdS_info" {
     block_cfVdS_info:
         const _cfVdS;
         const 0;
         const 1125904201809950;
         const SfPCb_srt+1464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.87346128 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cdataCast1_closure" {
     Data.Semigroup.$fDataOption_$cdataCast1_closure:
         const Data.Semigroup.$fDataOption_$cdataCast1_info;
         const 0;
 },
 section ""relreadonly" . ufVeP_srtd" {
     ufVeP_srtd:
         const SfPCb_srt+1152;
         const 58;
         const 144115188075855873;
 },
 lvl33_sfPyK_entry() //  [R1]
         { []
         }
     {offset
       cfVeh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVei; else goto cfVej;
       cfVei: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Data.Semigroup.$fDataOption4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPyK_info" {
     lvl33_sfPyK_info:
         const lvl33_sfPyK_entry;
         const 1;
         const 18446744069414584336;
         const ufVeP_srtd;
 },
 sat_sfPyO_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVew: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfVex; else goto cfVey;
       cfVex: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVey: // global
           I64[Sp - 24] = block_cfVep_info;
           _sfPyI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _sfPyI::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufVeJ; else goto cfVeq;
       ufVeJ: // global
           call _cfVep(R1) args: 0, res: 0, upd: 0;
       cfVeq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPyO_info" {
     sat_sfPyO_info:
         const sat_sfPyO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfVep() //  [R1]
         { []
         }
     {offset
       cfVep: // global
           if (R1 & 7 == 1) goto cfVet; else goto cfVeu;
       cfVet: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfVeu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfVeI; else goto cfVeH;
       cfVeI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVeH: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVep_info" {
     block_cfVep_info:
         const _cfVep;
         const 2;
         const 30;
 },
 section ""relreadonly" . ufVeQ_srtd" {
     ufVeQ_srtd:
         const SfPCb_srt+1152;
         const 60;
         const 720575940379279361;
 },
 Data.Semigroup.$fDataOption_$cdataCast1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfVeK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfVeO; else goto cfVeN;
       cfVeO: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cdataCast1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVeN: // global
           I64[Hp - 40] = lvl33_sfPyK_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sfPyO_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cdataCast1_info" {
     Data.Semigroup.$fDataOption_$cdataCast1_info:
         const Data.Semigroup.$fDataOption_$cdataCast1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ufVeQ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.883105227 UTC

[section ""data" . Data.Semigroup.$fDataOption1_closure" {
     Data.Semigroup.$fDataOption1_closure:
         const (,)_con_info;
         const Data.Semigroup.$fDataOption2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.892435837 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapMp_closure" {
     Data.Semigroup.$fDataOption_$cgmapMp_closure:
         const Data.Semigroup.$fDataOption_$cgmapMp_info;
         const 0;
 },
 lvl33_sfPyT_entry() //  [R1]
         { []
         }
     {offset
       cfVfy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVfz; else goto cfVfA;
       cfVfz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVfA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPyT_info" {
     lvl33_sfPyT_info:
         const lvl33_sfPyT_entry;
         const 1;
         const 16;
 },
 sat_sfPzh_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVfN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVfO; else goto cfVfP;
       cfVfO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVfP: // global
           I64[Sp - 24] = block_cfVfK_info;
           _sfPyT::P64 = P64[R1 + 7];
           _sfPyU::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPyT::P64;
           P64[Sp - 8] = _sfPyU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufVg7; else goto cfVfL;
       ufVg7: // global
           call _cfVfK(R1) args: 0, res: 0, upd: 0;
       cfVfL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPzh_info" {
     sat_sfPzh_info:
         const sat_sfPzh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfVfK() //  [R1]
         { []
         }
     {offset
       cfVfK: // global
           I64[Sp - 8] = block_cfVfS_info;
           _sfPze::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPze::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufVg6; else goto cfVfU;
       ufVg6: // global
           call _cfVfS(R1) args: 0, res: 0, upd: 0;
       cfVfU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVfK_info" {
     block_cfVfK_info:
         const _cfVfK;
         const 2;
         const 30;
 },
 _cfVfS() //  [R1]
         { []
         }
     {offset
       cfVfS: // global
           if (R1 & 7 == 1) goto cfVg0; else goto cfVg4;
       cfVg0: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfVg4: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVfS_info" {
     block_cfVfS_info:
         const _cfVfS;
         const 3;
         const 30;
 },
 sat_sfPyW_entry() //  [R1]
         { []
         }
     {offset
       cfVgk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVgl; else goto cfVgm;
       cfVgl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVgm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPyW_info" {
     sat_sfPyW_info:
         const sat_sfPyW_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 lvl34_sfPyV_entry() //  [R1]
         { []
         }
     {offset
       cfVgn: // global
           _sfPyV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVgo; else goto cfVgp;
       cfVgp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVgr; else goto cfVgq;
       cfVgr: // global
           HpAlloc = 24;
           goto cfVgo;
       cfVgo: // global
           R1 = _sfPyV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVgq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPyV::P64;
           _sfPyP::P64 = P64[_sfPyV::P64 + 16];
           _sfPyR::P64 = P64[_sfPyV::P64 + 24];
           _sfPyS::P64 = P64[_sfPyV::P64 + 32];
           I64[Hp - 16] = sat_sfPyW_info;
           P64[Hp] = _sfPyP::P64;
           R3 = _sfPyS::P64;
           R2 = Hp - 16;
           R1 = _sfPyR::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sfPyV_info" {
     lvl34_sfPyV_info:
         const lvl34_sfPyV_entry;
         const 3;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 sat_sfPz9_entry() //  [R1]
         { []
         }
     {offset
       cfVgI: // global
           _sfPz9::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfVgJ; else goto cfVgK;
       cfVgK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfVgM; else goto cfVgL;
       cfVgM: // global
           HpAlloc = 56;
           goto cfVgJ;
       cfVgJ: // global
           R1 = _sfPz9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVgL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPz9::P64;
           _sfPyS::P64 = P64[_sfPz9::P64 + 16];
           _sfPyU::P64 = P64[_sfPz9::P64 + 24];
           _sfPz0::P64 = P64[_sfPz9::P64 + 32];
           _sfPz1::P64 = P64[_sfPz9::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPz0::P64;
           P64[Hp - 24] = _sfPyS::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sfPz1::P64;
           R2 = _sfPyU::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPz9_info" {
     sat_sfPz9_info:
         const sat_sfPz9_entry;
         const 4;
         const 15;
 },
 sat_sfPz5_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVgY: // global
           _sfPz2::P64 = R2;
           _sfPz5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVgZ; else goto cfVh0;
       cfVh0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfVh2; else goto cfVh1;
       cfVh2: // global
           HpAlloc = 56;
           goto cfVgZ;
       cfVgZ: // global
           R2 = _sfPz2::P64;
           R1 = _sfPz5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVh1: // global
           _sfPyU::P64 = P64[_sfPz5::P64 + 7];
           _sfPz0::P64 = P64[_sfPz5::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPz0::P64;
           P64[Hp - 24] = _sfPz2::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPyU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPz5_info" {
     sat_sfPz5_info:
         const sat_sfPz5_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPz6_entry() //  [R1]
         { []
         }
     {offset
       cfVh3: // global
           _sfPz6::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfVh4; else goto cfVh5;
       cfVh5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVh7; else goto cfVh6;
       cfVh7: // global
           HpAlloc = 24;
           goto cfVh4;
       cfVh4: // global
           R1 = _sfPz6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPz6::P64;
           _sfPyU::P64 = P64[_sfPz6::P64 + 16];
           _sfPyV::P64 = P64[_sfPz6::P64 + 24];
           _sfPz0::P64 = P64[_sfPz6::P64 + 32];
           I64[Hp - 16] = sat_sfPz5_info;
           P64[Hp - 8] = _sfPyU::P64;
           P64[Hp] = _sfPz0::P64;
           R2 = _sfPyU::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPyV::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPz6_info" {
     sat_sfPz6_info:
         const sat_sfPz6_entry;
         const 3;
         const 15;
 },
 sat_sfPza_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVh8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfVh9; else goto cfVha;
       cfVh9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVha: // global
           I64[Sp - 40] = block_cfVgx_info;
           _sfPyQ::P64 = P64[R1 + 7];
           _sfPyS::P64 = P64[R1 + 15];
           _sfPyU::P64 = P64[R1 + 23];
           _sfPyV::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPyQ::P64;
           P64[Sp - 24] = _sfPyS::P64;
           P64[Sp - 16] = _sfPyU::P64;
           P64[Sp - 8] = _sfPyV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufVhe; else goto cfVgy;
       ufVhe: // global
           call _cfVgx(R1) args: 0, res: 0, upd: 0;
       cfVgy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPza_info" {
     sat_sfPza_info:
         const sat_sfPza_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfVgx() //  [R1]
         { []
         }
     {offset
       cfVgx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfVhd; else goto cfVhc;
       cfVhd: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVhc: // global
           _sfPz0::P64 = P64[R1 + 7];
           _sfPz1::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sfPz9_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sfPyU::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sfPyU::P64;
           P64[Hp - 48] = _sfPz0::P64;
           P64[Hp - 40] = _sfPz1::P64;
           I64[Hp - 32] = sat_sfPz6_info;
           P64[Hp - 16] = _sfPyU::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sfPz0::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVgx_info" {
     block_cfVgx_info:
         const _cfVgx;
         const 4;
         const 30;
 },
 sat_sfPyX_entry() //  [R1]
         { []
         }
     {offset
       cfVhj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVhk; else goto cfVhl;
       cfVhk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVhl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPyX_info" {
     sat_sfPyX_info:
         const sat_sfPyX_entry;
         const 1;
         const 16;
 },
 sat_sfPzb_entry() //  [R1]
         { []
         }
     {offset
       cfVhm: // global
           _sfPzb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfVhn; else goto cfVho;
       cfVho: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfVhq; else goto cfVhp;
       cfVhq: // global
           HpAlloc = 104;
           goto cfVhn;
       cfVhn: // global
           R1 = _sfPzb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVhp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPzb::P64;
           _sfPyP::P64 = P64[_sfPzb::P64 + 16];
           _sfPyQ::P64 = P64[_sfPzb::P64 + 24];
           _sfPyR::P64 = P64[_sfPzb::P64 + 32];
           _sfPyS::P64 = P64[_sfPzb::P64 + 40];
           _sfPyU::P64 = P64[_sfPzb::P64 + 48];
           I64[Hp - 96] = lvl34_sfPyV_info;
           P64[Hp - 80] = _sfPyP::P64;
           P64[Hp - 72] = _sfPyR::P64;
           P64[Hp - 64] = _sfPyS::P64;
           I64[Hp - 56] = sat_sfPza_info;
           P64[Hp - 48] = _sfPyQ::P64;
           P64[Hp - 40] = _sfPyS::P64;
           P64[Hp - 32] = _sfPyU::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPyX_info;
           P64[Hp] = _sfPyU::P64;
           R2 = _sfPyU::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzb_info" {
     sat_sfPzb_info:
         const sat_sfPzb_entry;
         const 5;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfVhr: // global
           _sfPyS::P64 = R5;
           _sfPyR::P64 = R4;
           _sfPyQ::P64 = R3;
           _sfPyP::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfVhs; else goto cfVht;
       cfVht: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVhv; else goto cfVhu;
       cfVhv: // global
           HpAlloc = 24;
           goto cfVhs;
       cfVhs: // global
           R5 = _sfPyS::P64;
           R4 = _sfPyR::P64;
           R3 = _sfPyQ::P64;
           R2 = _sfPyP::P64;
           R1 = Data.Semigroup.$fDataOption_$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVhu: // global
           I64[Hp - 16] = lvl33_sfPyT_info;
           P64[Hp] = _sfPyQ::P64;
           I64[Sp - 48] = block_cfVfB_info;
           R2 = _sfPyQ::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPyP::P64;
           P64[Sp - 24] = _sfPyQ::P64;
           P64[Sp - 16] = _sfPyR::P64;
           P64[Sp - 8] = _sfPyS::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapMp_info" {
     Data.Semigroup.$fDataOption_$cgmapMp_info:
         const Data.Semigroup.$fDataOption_$cgmapMp_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SfPCb_srt+1632;
 },
 _cfVfB() //  [R1]
         { []
         }
     {offset
       cfVfB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfVhy; else goto cfVhx;
       cfVhy: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVhx: // global
           I64[Hp - 72] = sat_sfPzh_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPzb_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVfB_info" {
     block_cfVfB_info:
         const _cfVfB;
         const 5;
         const 4294967326;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.925864726 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapM_closure" {
     Data.Semigroup.$fDataOption_$cgmapM_closure:
         const Data.Semigroup.$fDataOption_$cgmapM_info;
         const 0;
 },
 $dData1_sfPzl_entry() //  [R1]
         { []
         }
     {offset
       cfVjC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVjD; else goto cfVjE;
       cfVjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfPzl_info" {
     $dData1_sfPzl_info:
         const $dData1_sfPzl_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 lvl33_sfPzm_entry() //  [R1]
         { []
         }
     {offset
       cfVjJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVjK; else goto cfVjL;
       cfVjK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVjL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPzm_info" {
     lvl33_sfPzm_info:
         const lvl33_sfPzm_entry;
         const 1;
         const 16;
 },
 sat_sfPzs_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVk3: // global
           _sfPzq::P64 = R2;
           _sfPzs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVk4; else goto cfVk5;
       cfVk5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfVk7; else goto cfVk6;
       cfVk7: // global
           HpAlloc = 32;
           goto cfVk4;
       cfVk4: // global
           R2 = _sfPzq::P64;
           R1 = _sfPzs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVk6: // global
           _sfPzj::P64 = P64[_sfPzs::P64 + 7];
           _sfPzp::P64 = P64[_sfPzs::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfPzp::P64;
           P64[Hp] = _sfPzq::P64;
           R2 = _sfPzj::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPzs_info" {
     sat_sfPzs_info:
         const sat_sfPzs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPzt_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVk8: // global
           _sfPzp::P64 = R2;
           _sfPzt::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfVk9; else goto cfVka;
       cfVka: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVkc; else goto cfVkb;
       cfVkc: // global
           HpAlloc = 24;
           goto cfVk9;
       cfVk9: // global
           R2 = _sfPzp::P64;
           R1 = _sfPzt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVkb: // global
           _sfPzj::P64 = P64[_sfPzt::P64 + 7];
           _sfPzo::P64 = P64[_sfPzt::P64 + 15];
           I64[Hp - 16] = sat_sfPzs_info;
           P64[Hp - 8] = _sfPzj::P64;
           P64[Hp] = _sfPzp::P64;
           R2 = _sfPzj::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPzo::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPzt_info" {
     sat_sfPzt_info:
         const sat_sfPzt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPzu_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVkd: // global
           _sfPzn::P64 = R2;
           _sfPzu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfVke; else goto cfVkf;
       cfVkf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfVkh; else goto cfVkg;
       cfVkh: // global
           HpAlloc = 64;
           goto cfVke;
       cfVke: // global
           R2 = _sfPzn::P64;
           R1 = _sfPzu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVkg: // global
           _sfPzj::P64 = P64[_sfPzu::P64 + 7];
           _sfPzk::P64 = P64[_sfPzu::P64 + 15];
           _sfPzl::P64 = P64[_sfPzu::P64 + 23];
           _sfPzm::P64 = P64[_sfPzu::P64 + 31];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sfPzk::P64;
           P64[Hp - 32] = _sfPzl::P64;
           P64[Hp - 24] = _sfPzn::P64;
           I64[Hp - 16] = sat_sfPzt_info;
           P64[Hp - 8] = _sfPzj::P64;
           P64[Hp] = Hp - 56;
           R2 = _sfPzj::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfPzm::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPzu_info" {
     sat_sfPzu_info:
         const sat_sfPzu_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Semigroup.$fDataOption_$cgmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfVki: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfVkm; else goto cfVkl;
       cfVkm: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVkl: // global
           I64[Hp - 80] = $dData1_sfPzl_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = lvl33_sfPzm_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = sat_sfPzu_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapM_info" {
     Data.Semigroup.$fDataOption_$cgmapM_info:
         const Data.Semigroup.$fDataOption_$cgmapM_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.939858822 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQi_closure" {
     Data.Semigroup.$fDataOption_$cgmapQi_closure:
         const Data.Semigroup.$fDataOption_$cgmapQi_info;
         const 0;
 },
 sat_sfPzC_entry() //  [R1]
         { []
         }
     {offset
       cfVlm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVln; else goto cfVlo;
       cfVln: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVlo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzC_info" {
     sat_sfPzC_info:
         const sat_sfPzC_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfVlp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVlq; else goto cfVlr;
       cfVlq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVlr: // global
           I64[Sp - 32] = block_cfVla_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufVly; else goto cfVlb;
       ufVly: // global
           call _cfVla(R1) args: 0, res: 0, upd: 0;
       cfVlb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQi_info" {
     Data.Semigroup.$fDataOption_$cgmapQi_info:
         const Data.Semigroup.$fDataOption_$cgmapQi_entry;
         const 0;
         const 10133103456550926;
         const 17179869208;
         const SfPCb_srt+1488;
 },
 _cfVla() //  [R1]
         { []
         }
     {offset
       cfVla: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVlu; else goto cfVlt;
       cfVlu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVlt: // global
           if (I64[R1 + 7] == 0) goto cfVlx; else goto cfVlw;
       cfVlx: // global
           I64[Hp - 16] = sat_sfPzC_info;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = Hp - 16;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVlw: // global
           Hp = Hp - 24;
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVla_info" {
     block_cfVla_info:
         const _cfVla;
         const 3;
         const 1125904201809950;
         const SfPCb_srt+1488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.948109831 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQr_closure" {
     Data.Semigroup.$fDataOption_$cgmapQr_closure:
         const Data.Semigroup.$fDataOption_$cgmapQr_info;
         const 0;
 },
 sat_sfPzI_entry() //  [R1]
         { []
         }
     {offset
       cfVm2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVm3; else goto cfVm4;
       cfVm3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzI_info" {
     sat_sfPzI_info:
         const sat_sfPzI_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 sat_sfPzJ_entry() //  [R1]
         { []
         }
     {offset
       cfVm5: // global
           _sfPzJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVm6; else goto cfVm7;
       cfVm7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVm9; else goto cfVm8;
       cfVm9: // global
           HpAlloc = 24;
           goto cfVm6;
       cfVm6: // global
           R1 = _sfPzJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVm8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPzJ::P64;
           _sfPzD::P64 = P64[_sfPzJ::P64 + 16];
           _sfPzG::P64 = P64[_sfPzJ::P64 + 24];
           _sfPzH::P64 = P64[_sfPzJ::P64 + 32];
           I64[Hp - 16] = sat_sfPzI_info;
           P64[Hp] = _sfPzD::P64;
           R3 = _sfPzH::P64;
           R2 = Hp - 16;
           R1 = _sfPzG::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzJ_info" {
     sat_sfPzJ_info:
         const sat_sfPzJ_entry;
         const 3;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQr_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cfVma: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfVme; else goto cfVmd;
       cfVme: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVmd: // global
           I64[Hp - 32] = sat_sfPzJ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           _sfPzE::P64 = R3;
           R3 = R4;
           R2 = Hp - 32;
           R1 = _sfPzE::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQr_info" {
     Data.Semigroup.$fDataOption_$cgmapQr_info:
         const Data.Semigroup.$fDataOption_$cgmapQr_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.957306794 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQ_closure" {
     Data.Semigroup.$fDataOption_$cgmapQ_closure:
         const Data.Semigroup.$fDataOption_$cgmapQ_info;
         const 0;
 },
 sat_sfPzN_entry() //  [R1]
         { []
         }
     {offset
       cfVmH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVmI; else goto cfVmJ;
       cfVmI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzN_info" {
     sat_sfPzN_info:
         const sat_sfPzN_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 sat_sfPzO_entry() //  [R1]
         { []
         }
     {offset
       cfVmK: // global
           _sfPzO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVmL; else goto cfVmM;
       cfVmM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVmO; else goto cfVmN;
       cfVmO: // global
           HpAlloc = 24;
           goto cfVmL;
       cfVmL: // global
           R1 = _sfPzO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVmN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPzO::P64;
           _sfPzK::P64 = P64[_sfPzO::P64 + 16];
           _sfPzL::P64 = P64[_sfPzO::P64 + 24];
           _sfPzM::P64 = P64[_sfPzO::P64 + 32];
           I64[Hp - 16] = sat_sfPzN_info;
           P64[Hp] = _sfPzK::P64;
           R3 = _sfPzM::P64;
           R2 = Hp - 16;
           R1 = _sfPzL::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPzO_info" {
     sat_sfPzO_info:
         const sat_sfPzO_entry;
         const 3;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapQ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfVmQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfVmU; else goto cfVmT;
       cfVmU: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQ_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVmT: // global
           I64[Hp - 56] = sat_sfPzO_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQ_info" {
     Data.Semigroup.$fDataOption_$cgmapQ_info:
         const Data.Semigroup.$fDataOption_$cgmapQ_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.965820818 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapQl_closure" {
     Data.Semigroup.$fDataOption_$cgmapQl_closure:
         const Data.Semigroup.$fDataOption_$cgmapQl_info;
         const 0;
 },
 $dData1_sfPzT_entry() //  [R1]
         { []
         }
     {offset
       cfVno: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVnp; else goto cfVnq;
       cfVnp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVnq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dData1_sfPzT_info" {
     $dData1_sfPzT_info:
         const $dData1_sfPzT_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 sat_sfPzW_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVnx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfVnB; else goto cfVnA;
       cfVnB: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVnA: // global
           _sfPzQ::P64 = P64[R1 + 7];
           _sfPzR::P64 = P64[R1 + 15];
           _sfPzS::P64 = P64[R1 + 23];
           _sfPzT::P64 = P64[R1 + 31];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sfPzS::P64;
           P64[Hp - 8] = _sfPzT::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = _sfPzR::P64;
           R1 = _sfPzQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPzW_info" {
     sat_sfPzW_info:
         const sat_sfPzW_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Semigroup.$fDataOption_$cgmapQl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfVnC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfVnG; else goto cfVnF;
       cfVnG: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_$cgmapQl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVnF: // global
           I64[Hp - 56] = $dData1_sfPzT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sfPzW_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapQl_info" {
     Data.Semigroup.$fDataOption_$cgmapQl_info:
         const Data.Semigroup.$fDataOption_$cgmapQl_entry;
         const 0;
         const 279172874254;
         const 17179869208;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.973688245 UTC

[section ""data" . Data.Semigroup.$fDataOption3_closure" {
     Data.Semigroup.$fDataOption3_closure:
         const Data.Semigroup.$fDataOption3_info;
         const 0;
 },
 sat_sfPA0_entry() //  [R1]
         { []
         }
     {offset
       cfVo6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVo7; else goto cfVo8;
       cfVo7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVo8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPA0_info" {
     sat_sfPA0_info:
         const sat_sfPA0_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfVo9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVod; else goto cfVoc;
       cfVod: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVoc: // global
           I64[Hp - 16] = sat_sfPA0_info;
           P64[Hp] = R2;
           _sfPzY::P64 = R3;
           R3 = R4;
           R2 = Hp - 16;
           R1 = _sfPzY::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption3_info" {
     Data.Semigroup.$fDataOption3_info:
         const Data.Semigroup.$fDataOption3_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:44.987494606 UTC

[section ""data" . Data.Semigroup.$fDataOption_$cgmapMo_closure" {
     Data.Semigroup.$fDataOption_$cgmapMo_closure:
         const Data.Semigroup.$fDataOption_$cgmapMo_info;
         const 0;
 },
 lvl33_sfPA5_entry() //  [R1]
         { []
         }
     {offset
       cfVow: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVox; else goto cfVoy;
       cfVox: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVoy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_sfPA5_info" {
     lvl33_sfPA5_info:
         const lvl33_sfPA5_entry;
         const 1;
         const 16;
 },
 sat_sfPAw_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVoL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVoM; else goto cfVoN;
       cfVoM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVoN: // global
           I64[Sp - 24] = block_cfVoI_info;
           _sfPA5::P64 = P64[R1 + 7];
           _sfPA6::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfPA5::P64;
           P64[Sp - 8] = _sfPA6::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufVp5; else goto cfVoJ;
       ufVp5: // global
           call _cfVoI(R1) args: 0, res: 0, upd: 0;
       cfVoJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAw_info" {
     sat_sfPAw_info:
         const sat_sfPAw_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfVoI() //  [R1]
         { []
         }
     {offset
       cfVoI: // global
           I64[Sp - 8] = block_cfVoQ_info;
           _sfPAt::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPAt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufVp4; else goto cfVoS;
       ufVp4: // global
           call _cfVoQ(R1) args: 0, res: 0, upd: 0;
       cfVoS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVoI_info" {
     block_cfVoI_info:
         const _cfVoI;
         const 2;
         const 30;
 },
 _cfVoQ() //  [R1]
         { []
         }
     {offset
       cfVoQ: // global
           if (R1 & 7 == 1) goto cfVoY; else goto cfVp2;
       cfVoY: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfVp2: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVoQ_info" {
     block_cfVoQ_info:
         const _cfVoQ;
         const 3;
         const 30;
 },
 sat_sfPA8_entry() //  [R1]
         { []
         }
     {offset
       cfVpi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVpj; else goto cfVpk;
       cfVpj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVpk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Data.$fDataMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPA8_info" {
     sat_sfPA8_info:
         const sat_sfPA8_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1632;
 },
 lvl34_sfPA7_entry() //  [R1]
         { []
         }
     {offset
       cfVpl: // global
           _sfPA7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVpm; else goto cfVpn;
       cfVpn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVpp; else goto cfVpo;
       cfVpp: // global
           HpAlloc = 24;
           goto cfVpm;
       cfVpm: // global
           R1 = _sfPA7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVpo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPA7::P64;
           _sfPA1::P64 = P64[_sfPA7::P64 + 16];
           _sfPA3::P64 = P64[_sfPA7::P64 + 24];
           _sfPA4::P64 = P64[_sfPA7::P64 + 32];
           I64[Hp - 16] = sat_sfPA8_info;
           P64[Hp] = _sfPA1::P64;
           R3 = _sfPA4::P64;
           R2 = Hp - 16;
           R1 = _sfPA3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_sfPA7_info" {
     lvl34_sfPA7_info:
         const lvl34_sfPA7_entry;
         const 3;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 sat_sfPAm_entry() //  [R1]
         { []
         }
     {offset
       cfVpL: // global
           _sfPAm::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cfVpM; else goto cfVpN;
       cfVpN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfVpP; else goto cfVpO;
       cfVpP: // global
           HpAlloc = 56;
           goto cfVpM;
       cfVpM: // global
           R1 = _sfPAm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVpO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPAm::P64;
           _sfPA4::P64 = P64[_sfPAm::P64 + 16];
           _sfPA6::P64 = P64[_sfPAm::P64 + 24];
           _sfPAc::P64 = P64[_sfPAm::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPAc::P64;
           P64[Hp - 24] = _sfPA4::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sfPA6::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAm_info" {
     sat_sfPAm_info:
         const sat_sfPAm_entry;
         const 3;
         const 15;
 },
 sat_sfPAi_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVq1: // global
           _sfPAf::P64 = R2;
           _sfPAi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfVq2; else goto cfVq3;
       cfVq3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfVq5; else goto cfVq4;
       cfVq5: // global
           HpAlloc = 56;
           goto cfVq2;
       cfVq2: // global
           R2 = _sfPAf::P64;
           R1 = _sfPAi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVq4: // global
           _sfPA6::P64 = P64[_sfPAi::P64 + 7];
           _sfPAc::P64 = P64[_sfPAi::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPAc::P64;
           P64[Hp - 24] = _sfPAf::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPA6::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAi_info" {
     sat_sfPAi_info:
         const sat_sfPAi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sfPAj_entry() //  [R1]
         { []
         }
     {offset
       cfVq6: // global
           _sfPAj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfVq7; else goto cfVq8;
       cfVq8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVqa; else goto cfVq9;
       cfVqa: // global
           HpAlloc = 24;
           goto cfVq7;
       cfVq7: // global
           R1 = _sfPAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVq9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPAj::P64;
           _sfPA6::P64 = P64[_sfPAj::P64 + 16];
           _sfPA7::P64 = P64[_sfPAj::P64 + 24];
           _sfPAc::P64 = P64[_sfPAj::P64 + 32];
           I64[Hp - 16] = sat_sfPAi_info;
           P64[Hp - 8] = _sfPA6::P64;
           P64[Hp] = _sfPAc::P64;
           R2 = _sfPA6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sfPA7::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAj_info" {
     sat_sfPAj_info:
         const sat_sfPAj_entry;
         const 3;
         const 15;
 },
 sat_sfPAp_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVqb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cfVqc; else goto cfVqd;
       cfVqc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVqd: // global
           I64[Sp - 40] = block_cfVpv_info;
           _sfPA2::P64 = P64[R1 + 7];
           _sfPA4::P64 = P64[R1 + 15];
           _sfPA6::P64 = P64[R1 + 23];
           _sfPA7::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sfPA2::P64;
           P64[Sp - 24] = _sfPA4::P64;
           P64[Sp - 16] = _sfPA6::P64;
           P64[Sp - 8] = _sfPA7::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufVqu; else goto cfVpw;
       ufVqu: // global
           call _cfVpv(R1) args: 0, res: 0, upd: 0;
       cfVpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAp_info" {
     sat_sfPAp_info:
         const sat_sfPAp_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cfVpv() //  [R1]
         { []
         }
     {offset
       cfVpv: // global
           I64[Sp - 8] = block_cfVpA_info;
           _sfPAc::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfPAc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufVqt; else goto cfVpB;
       ufVqt: // global
           call _cfVpA(R1) args: 0, res: 0, upd: 0;
       cfVpB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVpv_info" {
     block_cfVpv_info:
         const _cfVpv;
         const 4;
         const 30;
 },
 _cfVpA() //  [R1]
         { []
         }
     {offset
       cfVpA: // global
           _sfPA4::P64 = P64[Sp + 24];
           _sfPA6::P64 = P64[Sp + 32];
           _sfPAc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfVqg; else goto cfVqk;
       cfVqg: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfVqj; else goto cfVqi;
       cfVqj: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVqi: // global
           I64[Hp - 72] = sat_sfPAm_info;
           P64[Hp - 56] = _sfPA4::P64;
           P64[Hp - 48] = _sfPA6::P64;
           P64[Hp - 40] = _sfPAc::P64;
           I64[Hp - 32] = sat_sfPAj_info;
           P64[Hp - 16] = _sfPA6::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sfPAc::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cfVqk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfVqp; else goto cfVqo;
       cfVqp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVqo: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sfPAc::P64;
           P64[Hp - 24] = _sfPA4::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sfPA6::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVpA_info" {
     block_cfVpA_info:
         const _cfVpA;
         const 5;
         const 30;
 },
 sat_sfPA9_entry() //  [R1]
         { []
         }
     {offset
       cfVqz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfVqA; else goto cfVqB;
       cfVqA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVqB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Semigroup.$fDataOption1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPA9_info" {
     sat_sfPA9_info:
         const sat_sfPA9_entry;
         const 1;
         const 16;
 },
 sat_sfPAq_entry() //  [R1]
         { []
         }
     {offset
       cfVqC: // global
           _sfPAq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cfVqD; else goto cfVqE;
       cfVqE: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cfVqG; else goto cfVqF;
       cfVqG: // global
           HpAlloc = 104;
           goto cfVqD;
       cfVqD: // global
           R1 = _sfPAq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVqF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfPAq::P64;
           _sfPA1::P64 = P64[_sfPAq::P64 + 16];
           _sfPA2::P64 = P64[_sfPAq::P64 + 24];
           _sfPA3::P64 = P64[_sfPAq::P64 + 32];
           _sfPA4::P64 = P64[_sfPAq::P64 + 40];
           _sfPA6::P64 = P64[_sfPAq::P64 + 48];
           I64[Hp - 96] = lvl34_sfPA7_info;
           P64[Hp - 80] = _sfPA1::P64;
           P64[Hp - 72] = _sfPA3::P64;
           P64[Hp - 64] = _sfPA4::P64;
           I64[Hp - 56] = sat_sfPAp_info;
           P64[Hp - 48] = _sfPA2::P64;
           P64[Hp - 40] = _sfPA4::P64;
           P64[Hp - 32] = _sfPA6::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sfPA9_info;
           P64[Hp] = _sfPA6::P64;
           R2 = _sfPA6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAq_info" {
     sat_sfPAq_info:
         const sat_sfPAq_entry;
         const 5;
         const 4294967311;
         const SfPCb_srt+1632;
 },
 Data.Semigroup.$fDataOption_$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfVqH: // global
           _sfPA4::P64 = R5;
           _sfPA3::P64 = R4;
           _sfPA2::P64 = R3;
           _sfPA1::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cfVqI; else goto cfVqJ;
       cfVqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVqL; else goto cfVqK;
       cfVqL: // global
           HpAlloc = 24;
           goto cfVqI;
       cfVqI: // global
           R5 = _sfPA4::P64;
           R4 = _sfPA3::P64;
           R3 = _sfPA2::P64;
           R2 = _sfPA1::P64;
           R1 = Data.Semigroup.$fDataOption_$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVqK: // global
           I64[Hp - 16] = lvl33_sfPA5_info;
           P64[Hp] = _sfPA2::P64;
           I64[Sp - 48] = block_cfVoz_info;
           R2 = _sfPA2::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sfPA1::P64;
           P64[Sp - 24] = _sfPA2::P64;
           P64[Sp - 16] = _sfPA3::P64;
           P64[Sp - 8] = _sfPA4::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_$cgmapMo_info" {
     Data.Semigroup.$fDataOption_$cgmapMo_info:
         const Data.Semigroup.$fDataOption_$cgmapMo_entry;
         const 0;
         const 1103806595086;
         const 17179869208;
         const SfPCb_srt+1632;
 },
 _cfVoz() //  [R1]
         { []
         }
     {offset
       cfVoz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfVqO; else goto cfVqN;
       cfVqO: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfVqN: // global
           I64[Hp - 72] = sat_sfPAw_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sfPAq_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfVoz_info" {
     block_cfVoz_info:
         const _cfVoz;
         const 5;
         const 4294967326;
         const SfPCb_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.01918927 UTC

[section ""data" . lvl30_rfC7f_closure" {
     lvl30_rfC7f_closure:
         const lvl30_rfC7f_info;
         const 0;
 },
 lvl30_rfC7f_entry() //  []
         { []
         }
     {offset
       cfVt3: // global
           R1 = Data.Semigroup.$cOption_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl30_rfC7f_info" {
     lvl30_rfC7f_info:
         const lvl30_rfC7f_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.022486659 UTC

[section ""data" . lvl31_rfC7g_closure" {
     lvl31_rfC7g_closure:
         const lvl31_rfC7g_info;
         const 0;
 },
 lvl31_rfC7g_entry() //  []
         { []
         }
     {offset
       cfVtf: // global
           R1 = Data.Semigroup.$tOption_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_rfC7g_info" {
     lvl31_rfC7g_info:
         const lvl31_rfC7g_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfPCb_srt+1712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.025867254 UTC

[section ""data" . lvl32_rfC7h_closure" {
     lvl32_rfC7h_closure:
         const lvl32_rfC7h_info;
 },
 lvl32_rfC7h_entry() //  []
         { []
         }
     {offset
       cfVtr: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl32_rfC7h_info" {
     lvl32_rfC7h_info:
         const lvl32_rfC7h_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.033227331 UTC

[section ""data" . Data.Semigroup.$fDataOption_closure" {
     Data.Semigroup.$fDataOption_closure:
         const Data.Semigroup.$fDataOption_info;
         const 0;
 },
 sat_sfPAN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVtJ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapMo_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAN_info" {
     sat_sfPAN_info:
         const sat_sfPAN_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1696;
 },
 sat_sfPAM_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVtR: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapMp_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAM_info" {
     sat_sfPAM_info:
         const sat_sfPAM_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1640;
 },
 sat_sfPAL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfVtZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption_$cgmapM_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAL_info" {
     sat_sfPAL_info:
         const sat_sfPAL_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+1648;
 },
 sat_sfPAK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVu7: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapQi_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAK_info" {
     sat_sfPAK_info:
         const sat_sfPAK_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1656;
 },
 sat_sfPAJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfVuf: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption_$cgmapQ_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAJ_info" {
     sat_sfPAJ_info:
         const sat_sfPAJ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+1672;
 },
 sat_sfPAI_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfVun: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Semigroup.$fDataOption_$cgmapQr_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAI_info" {
     sat_sfPAI_info:
         const sat_sfPAI_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SfPCb_srt+1664;
 },
 sat_sfPAH_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cfVuv: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Semigroup.$fDataOption_$cgmapQl_entry(R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAH_info" {
     sat_sfPAH_info:
         const sat_sfPAH_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SfPCb_srt+1680;
 },
 sat_sfPAG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfVuD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Semigroup.$fDataOption3_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAG_info" {
     sat_sfPAG_info:
         const sat_sfPAG_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SfPCb_srt+1688;
 },
 sat_sfPAF_entry() //  [R1, R2]
         { []
         }
     {offset
       cfVuL: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Semigroup.$fDataOption_$cdataCast1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfPAF_info" {
     sat_sfPAF_info:
         const sat_sfPAF_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SfPCb_srt+1624;
 },
 sat_sfPAE_entry() //  [R1]
         { []
         }
     {offset
       cfVuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVuT; else goto cfVuU;
       cfVuT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVuU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption_$cgunfold_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAE_info" {
     sat_sfPAE_info:
         const sat_sfPAE_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1720;
 },
 sat_sfPAD_entry() //  [R1]
         { []
         }
     {offset
       cfVuZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVv0; else goto cfVv1;
       cfVv0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVv1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption_$cgfoldl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAD_info" {
     sat_sfPAD_info:
         const sat_sfPAD_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1728;
 },
 sat_sfPAC_entry() //  [R1]
         { []
         }
     {offset
       cfVv6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfVv7; else goto cfVv8;
       cfVv7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfVv8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.$fDataOption10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfPAC_info" {
     sat_sfPAC_info:
         const sat_sfPAC_entry;
         const 1;
         const 4294967312;
         const SfPCb_srt+1616;
 },
 Data.Semigroup.$fDataOption_entry() //  [R2]
         { []
         }
     {offset
       cfVva: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cfVve; else goto cfVvd;
       cfVve: // global
           HpAlloc = 344;
           R2 = R2;
           R1 = Data.Semigroup.$fDataOption_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfVvd: // global
           I64[Hp - 336] = sat_sfPAN_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_sfPAM_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sfPAL_info;
           P64[Hp - 296] = R2;
           I64[Hp - 288] = sat_sfPAK_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sfPAJ_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sfPAI_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sfPAH_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sfPAG_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sfPAF_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sfPAE_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sfPAD_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sfPAC_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = lvl30_rfC7f_closure+1;
           P64[Hp - 80] = lvl31_rfC7g_closure+1;
           P64[Hp - 72] = Hp - 207;
           P64[Hp - 64] = lvl32_rfC7h_closure+2;
           P64[Hp - 56] = Hp - 222;
           P64[Hp - 48] = Hp - 237;
           P64[Hp - 40] = Hp - 252;
           P64[Hp - 32] = Hp - 270;
           P64[Hp - 24] = Hp - 285;
           P64[Hp - 16] = Hp - 302;
           P64[Hp - 8] = Hp - 317;
           P64[Hp] = Hp - 333;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.$fDataOption_info" {
     Data.Semigroup.$fDataOption_info:
         const Data.Semigroup.$fDataOption_entry;
         const 0;
         const 1099490152939534;
         const 4294967301;
         const SfPCb_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.056659137 UTC

[section ""data" . Data.Semigroup.Arg_closure" {
     Data.Semigroup.Arg_closure:
         const Data.Semigroup.Arg_info;
 },
 Data.Semigroup.Arg_entry() //  [R2, R3]
         { []
         }
     {offset
       cfVwx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfVwB; else goto cfVwA;
       cfVwB: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Semigroup.Arg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfVwA: // global
           I64[Hp - 16] = Data.Semigroup.Arg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Arg_info" {
     Data.Semigroup.Arg_info:
         const Data.Semigroup.Arg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.060128679 UTC

[section ""cstring" . ifVwJ_str" {
     ifVwJ_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,83,101,109,105,103,114,111,117,112,46,65,114,103]
 },
 Data.Semigroup.Arg_con_entry() //  [R1]
         { []
         }
     {offset
       cfVwI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Semigroup.Arg_con_info" {
     Data.Semigroup.Arg_con_info:
         const Data.Semigroup.Arg_con_entry;
         const 2;
         const 4;
         const ifVwJ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:45.064350699 UTC

[section ""relreadonly" . SfPCb_srt" {
     SfPCb_srt:
         const Data.Semigroup.Internal.stimesIdempotent_closure;
         const Data.Semigroup.$fSemigroupMin_closure;
         const lvl_rfC66_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Semigroup.$fSemigroupMax_closure;
         const lvl2_rfC68_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const Data.Semigroup.$fMonoidWrappedMonoid_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const Data.Semigroup.$fFoldableOption2_closure;
         const Data.Semigroup.$fFoldableOption3_closure;
         const Data.Semigroup.$fFoldableOption4_closure;
         const Data.Semigroup.$fFoldableOption5_closure;
         const Data.Semigroup.$fFoldableOption6_closure;
         const Data.Semigroup.$fFoldableOption_$cfoldl1_closure;
         const Data.Semigroup.$fFoldableOption8_closure;
         const Data.Semigroup.$fFoldableOption_$cfoldr1_closure;
         const Data.Semigroup.$fFoldableOption9_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Semigroup.$fFoldableOption1_closure;
         const Data.Semigroup.$fSemigroupOption2_closure;
         const Data.Semigroup.$fSemigroupOption_$cstimes_closure;
         const Data.Semigroup.$fSemigroupOption1_closure;
         const Data.Semigroup.$fSemigroupOption_closure;
         const Data.Semigroup.$fMonoidOption_closure;
         const Data.Data.$fDataMaybe_closure;
         const Data.Semigroup.$fDataOption_$cgunfold_closure;
         const Data.Semigroup.$fDataOption_$cgfoldl_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.$fReadFirst2_closure;
         const GHC.Read.readField_closure;
         const Data.Semigroup.$fReadOption2_closure;
         const Data.Semigroup.$fReadFirst_lexeme_closure;
         const Data.Semigroup.$fReadOption_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Semigroup.$fReadOption1_closure;
         const Data.Semigroup.$fReadOption_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Semigroup.$fReadOption_$creadListPrec_closure;
         const Data.Semigroup.$fReadOption_$creadList_closure;
         const Data.Semigroup.$fReadOption_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const Data.Semigroup.$w$cshowsPrec5_closure;
         const Data.Semigroup.$fShowOption_$cshowsPrec_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const Data.Semigroup.$fReadFirst3_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const Data.Semigroup.$fShowOption3_closure;
         const Data.Semigroup.$fShowOption_$cshow_closure;
         const Data.Semigroup.$fShowOption_$cshowList_closure;
         const Data.Semigroup.$fShowOption_closure;
         const Data.Semigroup.$fReadWrappedMonoid2_closure;
         const Data.Semigroup.$fReadWrappedMonoid_lexeme_closure;
         const Data.Semigroup.$fReadWrappedMonoid1_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadsPrec_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadListPrec_closure;
         const Data.Semigroup.$fReadWrappedMonoid_$creadList_closure;
         const Data.Semigroup.$fReadWrappedMonoid_closure;
         const Data.Semigroup.$fShowWrappedMonoid_$cshow_closure;
         const Data.Semigroup.$fShowWrappedMonoid_closure;
         const Data.Semigroup.$fReadLast2_closure;
         const Data.Semigroup.$fReadLast_lexeme_closure;
         const Data.Semigroup.$fReadLast1_closure;
         const Data.Semigroup.$fReadLast_$creadsPrec_closure;
         const Data.Semigroup.$fReadLast_$creadListPrec_closure;
         const Data.Semigroup.$fReadLast_$creadList_closure;
         const Data.Semigroup.$fReadLast_closure;
         const Data.Semigroup.$fShowLast_$cshow_closure;
         const Data.Semigroup.$fShowLast_closure;
         const Data.Semigroup.$fReadFirst2_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Semigroup.$fReadFirst5_closure;
         const Data.Semigroup.$fReadFirst_lexeme1_closure;
         const Data.Semigroup.$fReadFirst1_closure;
         const Data.Semigroup.$fReadFirst_$creadsPrec_closure;
         const Data.Semigroup.$fReadFirst_$creadListPrec_closure;
         const Data.Semigroup.$fReadFirst_$creadList_closure;
         const Data.Semigroup.$fReadFirst_closure;
         const Data.Semigroup.$fReadFirst3_closure;
         const Data.Semigroup.$fShowFirst_$cshow_closure;
         const Data.Semigroup.$fShowFirst_closure;
         const Data.Semigroup.$fReadArg_lexeme_closure;
         const Data.Semigroup.$fReadArg1_closure;
         const Data.Semigroup.$fReadArg_$creadsPrec_closure;
         const Data.Semigroup.$fReadArg_$creadListPrec_closure;
         const Data.Semigroup.$fReadArg_$creadList_closure;
         const Data.Semigroup.$fReadArg_closure;
         const Data.Semigroup.$fReadMax2_closure;
         const Data.Semigroup.$fReadMax_lexeme_closure;
         const Data.Semigroup.$fReadMax1_closure;
         const Data.Semigroup.$fReadMax_$creadsPrec_closure;
         const Data.Semigroup.$fReadMax_$creadListPrec_closure;
         const Data.Semigroup.$fReadMax_$creadList_closure;
         const Data.Semigroup.$fReadMax_closure;
         const Data.Semigroup.$fShowMax_$cshow_closure;
         const Data.Semigroup.$fShowMax_closure;
         const Data.Semigroup.$fSemigroupMax_closure;
         const Data.Semigroup.$fMonoidMax_closure;
         const Data.Semigroup.$fReadMin2_closure;
         const Data.Semigroup.$fReadMin_lexeme_closure;
         const Data.Semigroup.$fReadMin1_closure;
         const Data.Semigroup.$fReadMin_$creadsPrec_closure;
         const Data.Semigroup.$fReadMin_$creadListPrec_closure;
         const Data.Semigroup.$fReadMin_$creadList_closure;
         const Data.Semigroup.$fReadMin_closure;
         const Data.Semigroup.$fShowMin_$cshow_closure;
         const Data.Semigroup.$fShowMin_closure;
         const Data.Semigroup.$fSemigroupMin_closure;
         const Data.Semigroup.$fMonoidMin_closure;
         const Control.Monad.Fix.$fMonadFixFirst1_closure;
         const Data.Semigroup.$fMonadFixOption_$cmfix_closure;
         const Data.Semigroup.$fSemigroupOption2_closure;
         const Data.Semigroup.mtimesDefault_closure;
         const Data.Semigroup.$fSemigroupWrappedMonoid_$cstimes_closure;
         const GHC.List.badHead_closure;
         const Data.Semigroup.$fDataMin7_closure;
         const go61_rfC6j_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Semigroup.$fDataMin6_closure;
         const Data.Semigroup.$fDataMax7_closure;
         const go1_rfC6n_closure;
         const Data.Semigroup.$fDataMax6_closure;
         const Data.Semigroup.$fDataArg9_closure;
         const go2_rfC6q_closure;
         const Data.Semigroup.$fDataArg8_closure;
         const Data.Semigroup.$fDataFirst7_closure;
         const go3_rfC6u_closure;
         const Data.Semigroup.$fDataFirst6_closure;
         const Data.Semigroup.$fDataLast7_closure;
         const go4_rfC6y_closure;
         const Data.Semigroup.$fDataLast6_closure;
         const Data.Semigroup.$fReadWrappedMonoid4_closure;
         const go5_rfC6C_closure;
         const Data.Semigroup.$fDataWrappedMonoid6_closure;
         const Data.Semigroup.$fDataOption9_closure;
         const go6_rfC6G_closure;
         const Data.Semigroup.$fDataOption8_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Semigroup.$fDataMin2_closure;
         const Data.Semigroup.$fDataMin8_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Data.Semigroup.$fDataMin_$cdataCast1_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Semigroup.$fDataMin_$cgmapQi_closure;
         const Data.Semigroup.$cMin_closure;
         const Data.Semigroup.$tMin_closure;
         const Data.Semigroup.$fDataMin_closure;
         const lvl12_rfC6O_closure;
         const lvl13_rfC6P_closure;
         const Data.Semigroup.$fDataMax2_closure;
         const Data.Semigroup.$fDataMax8_closure;
         const Data.Semigroup.$fDataMax_$cdataCast1_closure;
         const Data.Semigroup.$fDataMax_$cgmapQi_closure;
         const Data.Semigroup.$cMax_closure;
         const Data.Semigroup.$tMax_closure;
         const Data.Semigroup.$fDataMax_closure;
         const lvl15_rfC6S_closure;
         const lvl16_rfC6T_closure;
         const Data.Semigroup.$fDataArg4_closure;
         const Data.Semigroup.$fDataArg10_closure;
         const Data.Semigroup.$fDataArg_$cdataCast2_closure;
         const Data.Semigroup.$fDataArg_$cgmapQi_closure;
         const Data.Semigroup.$cArg_closure;
         const lvl18_rfC6Z_closure;
         const Data.Semigroup.$tArg_closure;
         const Data.Semigroup.$fDataArg_closure;
         const lvl19_rfC70_closure;
         const Data.Semigroup.$fDataFirst2_closure;
         const Data.Semigroup.$fDataFirst8_closure;
         const Data.Semigroup.$fDataFirst_$cdataCast1_closure;
         const Data.Semigroup.$fDataFirst_$cgmapQi_closure;
         const Data.Semigroup.$cFirst_closure;
         const Data.Semigroup.$tFirst_closure;
         const Data.Semigroup.$fDataFirst_closure;
         const lvl21_rfC73_closure;
         const lvl22_rfC74_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Semigroup.$fDataLast2_closure;
         const Data.Semigroup.$fDataLast8_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Semigroup.$fDataLast_$cdataCast1_closure;
         const Data.Semigroup.$fDataLast_$cgmapQi_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Semigroup.$cLast_closure;
         const Data.Semigroup.$tLast_closure;
         const Data.Semigroup.$fDataLast_closure;
         const lvl24_rfC77_closure;
         const lvl25_rfC78_closure;
         const Data.Semigroup.$fDataWrappedMonoid2_closure;
         const Data.Semigroup.$fDataWrappedMonoid8_closure;
         const Data.Semigroup.$fDataWrappedMonoid_$cdataCast1_closure;
         const Data.Semigroup.$fDataWrappedMonoid_$cgmapQi_closure;
         const Data.Semigroup.$cWrapMonoid_closure;
         const Data.Semigroup.$tWrappedMonoid_closure;
         const Data.Semigroup.$fDataWrappedMonoid_closure;
         const lvl27_rfC7b_closure;
         const lvl28_rfC7c_closure;
         const Data.Semigroup.$fDataOption4_closure;
         const Data.Semigroup.$fDataOption10_closure;
         const Data.Semigroup.$fDataOption_$cdataCast1_closure;
         const Data.Data.$fDataMaybe_closure;
         const Data.Semigroup.$fDataOption_$cgmapMp_closure;
         const Data.Semigroup.$fDataOption_$cgmapM_closure;
         const Data.Semigroup.$fDataOption_$cgmapQi_closure;
         const Data.Semigroup.$fDataOption_$cgmapQr_closure;
         const Data.Semigroup.$fDataOption_$cgmapQ_closure;
         const Data.Semigroup.$fDataOption_$cgmapQl_closure;
         const Data.Semigroup.$fDataOption3_closure;
         const Data.Semigroup.$fDataOption_$cgmapMo_closure;
         const Data.Semigroup.$cOption_closure;
         const Data.Semigroup.$tOption_closure;
         const Data.Semigroup.$fDataOption_$cgunfold_closure;
         const Data.Semigroup.$fDataOption_$cgfoldl_closure;
         const Data.Semigroup.$fDataOption_closure;
         const lvl30_rfC7f_closure;
         const lvl31_rfC7g_closure;
 }]

