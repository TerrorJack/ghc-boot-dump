
==================== Raw Cmm ====================
2018-03-16 16:08:58.99079644 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:58.992525102 UTC

[section ""data" . Data.Bifoldable.bifold_closure" {
     Data.Bifoldable.bifold_closure:
         const Data.Bifoldable.bifold_info;
 },
 Data.Bifoldable.bifold_entry() //  [R2]
         { []
         }
     {offset
       cdMh9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMha; else goto cdMhb;
       cdMha: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMhb: // global
           I64[Sp - 8] = block_cdMh6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udMhf; else goto cdMh7;
       udMhf: // global
           call _cdMh6(R1) args: 0, res: 0, upd: 0;
       cdMh7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifold_info" {
     Data.Bifoldable.bifold_info:
         const Data.Bifoldable.bifold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdMh6() //  [R1]
         { []
         }
     {offset
       cdMh6: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMh6_info" {
     block_cdMh6_info:
         const _cdMh6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:58.998215044 UTC

[section ""data" . Data.Bifoldable.bifoldMap_closure" {
     Data.Bifoldable.bifoldMap_closure:
         const Data.Bifoldable.bifoldMap_info;
 },
 Data.Bifoldable.bifoldMap_entry() //  [R2]
         { []
         }
     {offset
       cdMhw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMhx; else goto cdMhy;
       cdMhx: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMhy: // global
           I64[Sp - 8] = block_cdMht_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udMhC; else goto cdMhu;
       udMhC: // global
           call _cdMht(R1) args: 0, res: 0, upd: 0;
       cdMhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldMap_info" {
     Data.Bifoldable.bifoldMap_info:
         const Data.Bifoldable.bifoldMap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdMht() //  [R1]
         { []
         }
     {offset
       cdMht: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMht_info" {
     block_cdMht_info:
         const _cdMht;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.004891223 UTC

[section ""data" . Data.Bifoldable.bifoldr_closure" {
     Data.Bifoldable.bifoldr_closure:
         const Data.Bifoldable.bifoldr_info;
 },
 Data.Bifoldable.bifoldr_entry() //  [R2]
         { []
         }
     {offset
       cdMhT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMhU; else goto cdMhV;
       cdMhU: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMhV: // global
           I64[Sp - 8] = block_cdMhQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udMhZ; else goto cdMhR;
       udMhZ: // global
           call _cdMhQ(R1) args: 0, res: 0, upd: 0;
       cdMhR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr_info" {
     Data.Bifoldable.bifoldr_info:
         const Data.Bifoldable.bifoldr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdMhQ() //  [R1]
         { []
         }
     {offset
       cdMhQ: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMhQ_info" {
     block_cdMhQ_info:
         const _cdMhQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.010070074 UTC

[section ""data" . Data.Bifoldable.bifoldl_closure" {
     Data.Bifoldable.bifoldl_closure:
         const Data.Bifoldable.bifoldl_info;
 },
 Data.Bifoldable.bifoldl_entry() //  [R2]
         { []
         }
     {offset
       cdMig: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMih; else goto cdMii;
       cdMih: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMii: // global
           I64[Sp - 8] = block_cdMid_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udMim; else goto cdMie;
       udMim: // global
           call _cdMid(R1) args: 0, res: 0, upd: 0;
       cdMie: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl_info" {
     Data.Bifoldable.bifoldl_info:
         const Data.Bifoldable.bifoldl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdMid() //  [R1]
         { []
         }
     {offset
       cdMid: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMid_info" {
     block_cdMid_info:
         const _cdMid;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.016217826 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info;
 },
 sat_sdL9v_entry() //  [R1]
         { []
         }
     {offset
       cdMiF: // global
           _sdL9v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMiG; else goto cdMiH;
       cdMiH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMiJ; else goto cdMiI;
       cdMiJ: // global
           HpAlloc = 24;
           goto cdMiG;
       cdMiG: // global
           R1 = _sdL9v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMiI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdL9v::P64;
           _sdL9k::P64 = P64[_sdL9v::P64 + 16];
           _sdL9l::P64 = P64[_sdL9v::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdL9l::P64;
           R2 = Hp - 16;
           R1 = _sdL9k::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdL9v_info" {
     sat_sdL9v_info:
         const sat_sdL9v_entry;
         const 2;
         const 18;
 },
 sat_sdL9q_entry() //  [R1]
         { []
         }
     {offset
       cdMiP: // global
           _sdL9q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMiQ; else goto cdMiR;
       cdMiR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMiT; else goto cdMiS;
       cdMiT: // global
           HpAlloc = 24;
           goto cdMiQ;
       cdMiQ: // global
           R1 = _sdL9q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMiS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdL9q::P64;
           _sdL9j::P64 = P64[_sdL9q::P64 + 16];
           _sdL9l::P64 = P64[_sdL9q::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdL9l::P64;
           R2 = Hp - 16;
           R1 = _sdL9j::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdL9q_info" {
     sat_sdL9q_info:
         const sat_sdL9q_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdMiU: // global
           _sdL9l::P64 = R5;
           _sdL9k::P64 = R4;
           _sdL9j::P64 = R3;
           _sdL9i::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMiV; else goto cdMiW;
       cdMiW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMiY; else goto cdMiX;
       cdMiY: // global
           HpAlloc = 64;
           goto cdMiV;
       cdMiV: // global
           R5 = _sdL9l::P64;
           R4 = _sdL9k::P64;
           R3 = _sdL9j::P64;
           R2 = _sdL9i::P64;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMiX: // global
           I64[Hp - 56] = sat_sdL9v_info;
           P64[Hp - 40] = _sdL9k::P64;
           P64[Hp - 32] = _sdL9l::P64;
           I64[Hp - 24] = sat_sdL9q_info;
           P64[Hp - 8] = _sdL9j::P64;
           P64[Hp] = _sdL9l::P64;
           R2 = _sdL9i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.024027894 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldMap_entry() //  [R3, R5]
         { []
         }
     {offset
       cdMji: // global
           R2 = R5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.027381011 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldMap_entry() //  [R3, R5]
         { []
         }
     {offset
       cdMjt: // global
           R2 = R5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.032182629 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info;
 },
 sat_sdL9T_entry() //  [R1]
         { []
         }
     {offset
       cdMjJ: // global
           _sdL9T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMjK; else goto cdMjL;
       cdMjL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMjN; else goto cdMjM;
       cdMjN: // global
           HpAlloc = 24;
           goto cdMjK;
       cdMjK: // global
           R1 = _sdL9T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMjM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdL9T::P64;
           _sdL9G::P64 = P64[_sdL9T::P64 + 16];
           _sdL9H::P64 = P64[_sdL9T::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdL9H::P64;
           R2 = Hp - 16;
           R1 = _sdL9G::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdL9T_info" {
     sat_sdL9T_info:
         const sat_sdL9T_entry;
         const 2;
         const 18;
 },
 sat_sdL9N_entry() //  [R1]
         { []
         }
     {offset
       cdMjT: // global
           _sdL9N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMjU; else goto cdMjV;
       cdMjV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMjX; else goto cdMjW;
       cdMjX: // global
           HpAlloc = 24;
           goto cdMjU;
       cdMjU: // global
           R1 = _sdL9N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMjW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdL9N::P64;
           _sdL9F::P64 = P64[_sdL9N::P64 + 16];
           _sdL9H::P64 = P64[_sdL9N::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdL9H::P64;
           R2 = Hp - 16;
           R1 = _sdL9F::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdL9N_info" {
     sat_sdL9N_info:
         const sat_sdL9N_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdMjY: // global
           _sdL9H::P64 = R5;
           _sdL9G::P64 = R4;
           _sdL9F::P64 = R3;
           _sdL9E::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMjZ; else goto cdMk0;
       cdMk0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMk2; else goto cdMk1;
       cdMk2: // global
           HpAlloc = 64;
           goto cdMjZ;
       cdMjZ: // global
           R5 = _sdL9H::P64;
           R4 = _sdL9G::P64;
           R3 = _sdL9F::P64;
           R2 = _sdL9E::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMk1: // global
           I64[Hp - 56] = sat_sdL9T_info;
           P64[Hp - 40] = _sdL9G::P64;
           P64[Hp - 32] = _sdL9H::P64;
           I64[Hp - 24] = sat_sdL9N_info;
           P64[Hp - 8] = _sdL9F::P64;
           P64[Hp] = _sdL9H::P64;
           R2 = _sdL9E::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.043133607 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info;
 },
 sat_sdLab_entry() //  [R1]
         { []
         }
     {offset
       cdMkr: // global
           _sdLab::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMks; else goto cdMkt;
       cdMkt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMkv; else goto cdMku;
       cdMkv: // global
           HpAlloc = 24;
           goto cdMks;
       cdMks: // global
           R1 = _sdLab::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMku: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLab::P64;
           _sdL9W::P64 = P64[_sdLab::P64 + 16];
           _sdL9X::P64 = P64[_sdLab::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdL9X::P64;
           R2 = Hp - 16;
           R1 = _sdL9W::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLab_info" {
     sat_sdLab_info:
         const sat_sdLab_entry;
         const 2;
         const 18;
 },
 sat_sdLa4_entry() //  [R1]
         { []
         }
     {offset
       cdMkB: // global
           _sdLa4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMkC; else goto cdMkD;
       cdMkD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMkF; else goto cdMkE;
       cdMkF: // global
           HpAlloc = 24;
           goto cdMkC;
       cdMkC: // global
           R1 = _sdLa4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMkE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLa4::P64;
           _sdL9V::P64 = P64[_sdLa4::P64 + 16];
           _sdL9X::P64 = P64[_sdLa4::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdL9X::P64;
           R2 = Hp - 16;
           R1 = _sdL9V::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLa4_info" {
     sat_sdLa4_info:
         const sat_sdLa4_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdMkG: // global
           _sdL9X::P64 = R5;
           _sdL9W::P64 = R4;
           _sdL9V::P64 = R3;
           _sdL9U::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMkH; else goto cdMkI;
       cdMkI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMkK; else goto cdMkJ;
       cdMkK: // global
           HpAlloc = 64;
           goto cdMkH;
       cdMkH: // global
           R5 = _sdL9X::P64;
           R4 = _sdL9W::P64;
           R3 = _sdL9V::P64;
           R2 = _sdL9U::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMkJ: // global
           I64[Hp - 56] = sat_sdLab_info;
           P64[Hp - 40] = _sdL9W::P64;
           P64[Hp - 32] = _sdL9X::P64;
           I64[Hp - 24] = sat_sdLa4_info;
           P64[Hp - 8] = _sdL9V::P64;
           P64[Hp] = _sdL9X::P64;
           R2 = _sdL9U::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.05217355 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info;
 },
 sat_sdLav_entry() //  [R1]
         { []
         }
     {offset
       cdMl9: // global
           _sdLav::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMla; else goto cdMlb;
       cdMlb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMld; else goto cdMlc;
       cdMld: // global
           HpAlloc = 24;
           goto cdMla;
       cdMla: // global
           R1 = _sdLav::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMlc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLav::P64;
           _sdLae::P64 = P64[_sdLav::P64 + 16];
           _sdLaf::P64 = P64[_sdLav::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdLaf::P64;
           R2 = Hp - 16;
           R1 = _sdLae::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLav_info" {
     sat_sdLav_info:
         const sat_sdLav_entry;
         const 2;
         const 18;
 },
 sat_sdLan_entry() //  [R1]
         { []
         }
     {offset
       cdMlj: // global
           _sdLan::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMlk; else goto cdMll;
       cdMll: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMln; else goto cdMlm;
       cdMln: // global
           HpAlloc = 24;
           goto cdMlk;
       cdMlk: // global
           R1 = _sdLan::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMlm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLan::P64;
           _sdLad::P64 = P64[_sdLan::P64 + 16];
           _sdLaf::P64 = P64[_sdLan::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdLaf::P64;
           R2 = Hp - 16;
           R1 = _sdLad::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLan_info" {
     sat_sdLan_info:
         const sat_sdLan_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdMlo: // global
           _sdLaf::P64 = R5;
           _sdLae::P64 = R4;
           _sdLad::P64 = R3;
           _sdLac::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMlp; else goto cdMlq;
       cdMlq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMls; else goto cdMlr;
       cdMls: // global
           HpAlloc = 64;
           goto cdMlp;
       cdMlp: // global
           R5 = _sdLaf::P64;
           R4 = _sdLae::P64;
           R3 = _sdLad::P64;
           R2 = _sdLac::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMlr: // global
           I64[Hp - 56] = sat_sdLav_info;
           P64[Hp - 40] = _sdLae::P64;
           P64[Hp - 32] = _sdLaf::P64;
           I64[Hp - 24] = sat_sdLan_info;
           P64[Hp - 8] = _sdLad::P64;
           P64[Hp] = _sdLaf::P64;
           R2 = _sdLac::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.061318194 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info;
 },
 sat_sdLaR_entry() //  [R1]
         { []
         }
     {offset
       cdMlR: // global
           _sdLaR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMlS; else goto cdMlT;
       cdMlT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMlV; else goto cdMlU;
       cdMlV: // global
           HpAlloc = 24;
           goto cdMlS;
       cdMlS: // global
           R1 = _sdLaR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMlU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLaR::P64;
           _sdLay::P64 = P64[_sdLaR::P64 + 16];
           _sdLaz::P64 = P64[_sdLaR::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdLaz::P64;
           R2 = Hp - 16;
           R1 = _sdLay::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLaR_info" {
     sat_sdLaR_info:
         const sat_sdLaR_entry;
         const 2;
         const 18;
 },
 sat_sdLaI_entry() //  [R1]
         { []
         }
     {offset
       cdMm1: // global
           _sdLaI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMm2; else goto cdMm3;
       cdMm3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMm5; else goto cdMm4;
       cdMm5: // global
           HpAlloc = 24;
           goto cdMm2;
       cdMm2: // global
           R1 = _sdLaI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLaI::P64;
           _sdLax::P64 = P64[_sdLaI::P64 + 16];
           _sdLaz::P64 = P64[_sdLaI::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdLaz::P64;
           R2 = Hp - 16;
           R1 = _sdLax::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLaI_info" {
     sat_sdLaI_info:
         const sat_sdLaI_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdMm6: // global
           _sdLaz::P64 = R5;
           _sdLay::P64 = R4;
           _sdLax::P64 = R3;
           _sdLaw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMm7; else goto cdMm8;
       cdMm8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMma; else goto cdMm9;
       cdMma: // global
           HpAlloc = 64;
           goto cdMm7;
       cdMm7: // global
           R5 = _sdLaz::P64;
           R4 = _sdLay::P64;
           R3 = _sdLax::P64;
           R2 = _sdLaw::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMm9: // global
           I64[Hp - 56] = sat_sdLaR_info;
           P64[Hp - 40] = _sdLay::P64;
           P64[Hp - 32] = _sdLaz::P64;
           I64[Hp - 24] = sat_sdLaI_info;
           P64[Hp - 8] = _sdLax::P64;
           P64[Hp] = _sdLaz::P64;
           R2 = _sdLaw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.070497295 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info;
 },
 sat_sdLbf_entry() //  [R1]
         { []
         }
     {offset
       cdMmz: // global
           _sdLbf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMmA; else goto cdMmB;
       cdMmB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMmD; else goto cdMmC;
       cdMmD: // global
           HpAlloc = 24;
           goto cdMmA;
       cdMmA: // global
           R1 = _sdLbf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMmC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLbf::P64;
           _sdLaU::P64 = P64[_sdLbf::P64 + 16];
           _sdLaV::P64 = P64[_sdLbf::P64 + 24];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdLaV::P64;
           R2 = Hp - 16;
           R1 = _sdLaU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLbf_info" {
     sat_sdLbf_info:
         const sat_sdLbf_entry;
         const 2;
         const 18;
 },
 sat_sdLb5_entry() //  [R1]
         { []
         }
     {offset
       cdMmJ: // global
           _sdLb5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMmK; else goto cdMmL;
       cdMmL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMmN; else goto cdMmM;
       cdMmN: // global
           HpAlloc = 24;
           goto cdMmK;
       cdMmK: // global
           R1 = _sdLb5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMmM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLb5::P64;
           _sdLaT::P64 = P64[_sdLb5::P64 + 16];
           _sdLaV::P64 = P64[_sdLb5::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdLaV::P64;
           R2 = Hp - 16;
           R1 = _sdLaT::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLb5_info" {
     sat_sdLb5_info:
         const sat_sdLb5_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       cdMmO: // global
           _sdLaV::P64 = R5;
           _sdLaU::P64 = R4;
           _sdLaT::P64 = R3;
           _sdLaS::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMmP; else goto cdMmQ;
       cdMmQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMmS; else goto cdMmR;
       cdMmS: // global
           HpAlloc = 64;
           goto cdMmP;
       cdMmP: // global
           R5 = _sdLaV::P64;
           R4 = _sdLaU::P64;
           R3 = _sdLaT::P64;
           R2 = _sdLaS::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMmR: // global
           I64[Hp - 56] = sat_sdLbf_info;
           P64[Hp - 40] = _sdLaU::P64;
           P64[Hp - 32] = _sdLaV::P64;
           I64[Hp - 24] = sat_sdLb5_info;
           P64[Hp - 8] = _sdLaT::P64;
           P64[Hp] = _sdLaV::P64;
           R2 = _sdLaS::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.078975907 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldMap_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdMnj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMnk; else goto cdMnl;
       cdMnk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMnl: // global
           I64[Sp - 24] = block_cdMnc_info;
           R1 = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udMns; else goto cdMnd;
       udMns: // global
           call _cdMnc(R1) args: 0, res: 0, upd: 0;
       cdMnd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdMnc() //  [R1]
         { []
         }
     {offset
       cdMnc: // global
           if (R1 & 7 == 1) goto cdMng; else goto cdMnh;
       cdMng: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdMnh: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMnc_info" {
     block_cdMnc_info:
         const _cdMnc;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.085156775 UTC

[section ""data" . poly_$dMonoid_rdL8r_closure" {
     poly_$dMonoid_rdL8r_closure:
         const poly_$dMonoid_rdL8r_info;
         const 0;
         const 0;
         const 0;
 },
 poly_$dMonoid_rdL8r_entry() //  [R1]
         { []
         }
     {offset
       cdMnK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMnL; else goto cdMnM;
       cdMnL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMnM: // global
           (_cdMnH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMnH::I64 == 0) goto cdMnJ; else goto cdMnI;
       cdMnJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMnI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMnH::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . poly_$dMonoid_rdL8r_info" {
     poly_$dMonoid_rdL8r_info:
         const poly_$dMonoid_rdL8r_entry;
         const 0;
         const 4294967317;
         const SdLpk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.089967275 UTC

[section ""data" . Data.Bifoldable.$dmbifoldl_closure" {
     Data.Bifoldable.$dmbifoldl_closure:
         const Data.Bifoldable.$dmbifoldl_info;
         const 0;
 },
 sat_sdLbx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMo3: // global
           _sdLbw::P64 = R3;
           R3 = R2;
           R2 = _sdLbw::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLbx_info" {
     sat_sdLbx_info:
         const sat_sdLbx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdLbu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMob: // global
           _sdLbt::P64 = R3;
           R3 = R2;
           R2 = _sdLbt::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLbu_info" {
     sat_sdLbu_info:
         const sat_sdLbu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.$dmbifoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMoe: // global
           _sdLbr::P64 = R6;
           _sdLbq::P64 = R5;
           _sdLbp::P64 = R4;
           _sdLbo::P64 = R3;
           _sdLbn::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMof; else goto cdMog;
       cdMog: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMoi; else goto cdMoh;
       cdMoi: // global
           HpAlloc = 32;
           goto cdMof;
       cdMof: // global
           R6 = _sdLbr::P64;
           R5 = _sdLbq::P64;
           R4 = _sdLbp::P64;
           R3 = _sdLbo::P64;
           R2 = _sdLbn::P64;
           R1 = Data.Bifoldable.$dmbifoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMoh: // global
           I64[Hp - 24] = sat_sdLbx_info;
           P64[Hp - 16] = _sdLbp::P64;
           I64[Hp - 8] = sat_sdLbu_info;
           P64[Hp] = _sdLbo::P64;
           R2 = _sdLbn::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = poly_$dMonoid_rdL8r_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdLbr::P64;
           P64[Sp - 8] = _sdLbq::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldl_info" {
     Data.Bifoldable.$dmbifoldl_info:
         const Data.Bifoldable.$dmbifoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdLpk_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.09693265 UTC

[section ""data" . Data.Bifoldable.$dmbifoldr_closure" {
     Data.Bifoldable.$dmbifoldr_closure:
         const Data.Bifoldable.$dmbifoldr_info;
         const 0;
 },
 Data.Bifoldable.$dmbifoldr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMoA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdMoB; else goto cdMoC;
       cdMoB: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$dmbifoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMoC: // global
           R2 = R2;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R6;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldr_info" {
     Data.Bifoldable.$dmbifoldr_info:
         const Data.Bifoldable.$dmbifoldr_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SdLpk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.102883855 UTC

[section ""data" . Data.Bifoldable.$dmbifoldMap_closure" {
     Data.Bifoldable.$dmbifoldMap_closure:
         const Data.Bifoldable.$dmbifoldMap_info;
 },
 sat_sdLbN_entry() //  [R1]
         { []
         }
     {offset
       cdMoQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMoR; else goto cdMoS;
       cdMoR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMoS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLbN_info" {
     sat_sdLbN_info:
         const sat_sdLbN_entry;
         const 1;
         const 16;
 },
 sat_sdLbM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMoZ: // global
           _sdLbK::P64 = R2;
           _sdLbM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMp0; else goto cdMp1;
       cdMp1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMp3; else goto cdMp2;
       cdMp3: // global
           HpAlloc = 32;
           goto cdMp0;
       cdMp0: // global
           R2 = _sdLbK::P64;
           R1 = _sdLbM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMp2: // global
           _sdLbE::P64 = P64[_sdLbM::P64 + 7];
           _sdLbG::P64 = P64[_sdLbM::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdLbG::P64;
           P64[Hp] = _sdLbK::P64;
           R2 = _sdLbE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLbM_info" {
     sat_sdLbM_info:
         const sat_sdLbM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdLbJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMpa: // global
           _sdLbH::P64 = R2;
           _sdLbJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMpb; else goto cdMpc;
       cdMpc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMpe; else goto cdMpd;
       cdMpe: // global
           HpAlloc = 32;
           goto cdMpb;
       cdMpb: // global
           R2 = _sdLbH::P64;
           R1 = _sdLbJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMpd: // global
           _sdLbE::P64 = P64[_sdLbJ::P64 + 7];
           _sdLbF::P64 = P64[_sdLbJ::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdLbF::P64;
           P64[Hp] = _sdLbH::P64;
           R2 = _sdLbE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLbJ_info" {
     sat_sdLbJ_info:
         const sat_sdLbJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.$dmbifoldMap_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdMpf: // global
           _sdLbG::P64 = R5;
           _sdLbF::P64 = R4;
           _sdLbE::P64 = R3;
           _sdLbD::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMpg; else goto cdMph;
       cdMph: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMpj; else goto cdMpi;
       cdMpj: // global
           HpAlloc = 72;
           goto cdMpg;
       cdMpg: // global
           R5 = _sdLbG::P64;
           R4 = _sdLbF::P64;
           R3 = _sdLbE::P64;
           R2 = _sdLbD::P64;
           R1 = Data.Bifoldable.$dmbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMpi: // global
           I64[Hp - 64] = sat_sdLbN_info;
           P64[Hp - 48] = _sdLbE::P64;
           I64[Hp - 40] = sat_sdLbM_info;
           P64[Hp - 32] = _sdLbE::P64;
           P64[Hp - 24] = _sdLbG::P64;
           I64[Hp - 16] = sat_sdLbJ_info;
           P64[Hp - 8] = _sdLbE::P64;
           P64[Hp] = _sdLbF::P64;
           R2 = _sdLbD::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldMap_info" {
     Data.Bifoldable.$dmbifoldMap_info:
         const Data.Bifoldable.$dmbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.112548819 UTC

[section ""data" . Data.Bifoldable.$dmbifold_closure" {
     Data.Bifoldable.$dmbifold_closure:
         const Data.Bifoldable.$dmbifold_info;
 },
 Data.Bifoldable.$dmbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMpK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMpL; else goto cdMpM;
       cdMpL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$dmbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMpM: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifold_info" {
     Data.Bifoldable.$dmbifold_info:
         const Data.Bifoldable.$dmbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.117141281 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifold_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifold_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMq3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMq4; else goto cdMq5;
       cdMq4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMq5: // global
           I64[Sp - 8] = block_cdMpW_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udMqc; else goto cdMpX;
       udMqc: // global
           call _cdMpW(R1) args: 0, res: 0, upd: 0;
       cdMpX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifold_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifold_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdMpW() //  [R1]
         { []
         }
     {offset
       cdMpW: // global
           if (R1 & 7 == 1) goto cdMq0; else goto cdMq1;
       cdMq0: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMq1: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMpW_info" {
     block_cdMpW_info:
         const _cdMpW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.124018722 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdMqz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMqA; else goto cdMqB;
       cdMqA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMqB: // global
           I64[Sp - 32] = block_cdMqs_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udMqI; else goto cdMqt;
       udMqI: // global
           call _cdMqs(R1) args: 0, res: 0, upd: 0;
       cdMqt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdMqs() //  [R1]
         { []
         }
     {offset
       cdMqs: // global
           _sdLbX::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdMqw; else goto cdMqx;
       cdMqw: // global
           R3 = _sdLbX::P64;
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMqx: // global
           R3 = _sdLbX::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMqs_info" {
     block_cdMqs_info:
         const _cdMqs;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.131014552 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldl_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdMr5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMr6; else goto cdMr7;
       cdMr6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMr7: // global
           I64[Sp - 32] = block_cdMqY_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udMre; else goto cdMqZ;
       udMre: // global
           call _cdMqY(R1) args: 0, res: 0, upd: 0;
       cdMqZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdMqY() //  [R1]
         { []
         }
     {offset
       cdMqY: // global
           _sdLc4::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdMr2; else goto cdMr3;
       cdMr2: // global
           R3 = P64[R1 + 7];
           R2 = _sdLc4::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMr3: // global
           R3 = P64[R1 + 6];
           R2 = _sdLc4::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMqY_info" {
     block_cdMqY_info:
         const _cdMqY;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.136060046 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_closure" {
     Data.Bifoldable.$fBifoldableEither_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableEither_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.138720904 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMrx: // global
           _sdLca::P64 = R3;
           _sdLc9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMry; else goto cdMrz;
       cdMrz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMrB; else goto cdMrA;
       cdMrB: // global
           HpAlloc = 48;
           goto cdMry;
       cdMry: // global
           R3 = _sdLca::P64;
           R2 = _sdLc9::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMrA: // global
           I64[Hp - 40] = stg_sel_6_upd_info;
           P64[Hp - 24] = _sdLca::P64;
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdLca::P64;
           R2 = _sdLc9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.143651504 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info;
 },
 sat_sdLcP_entry() //  [R1]
         { []
         }
     {offset
       cdMrS: // global
           _sdLcP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMrT; else goto cdMrU;
       cdMrU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMrW; else goto cdMrV;
       cdMrW: // global
           HpAlloc = 24;
           goto cdMrT;
       cdMrT: // global
           R1 = _sdLcP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMrV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLcP::P64;
           _sdLcu::P64 = P64[_sdLcP::P64 + 16];
           _sdLcv::P64 = P64[_sdLcP::P64 + 24];
           _sdLcw::P64 = P64[_sdLcP::P64 + 32];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdLcw::P64;
           R3 = _sdLcv::P64;
           R2 = Hp - 16;
           R1 = _sdLcu::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLcP_info" {
     sat_sdLcP_info:
         const sat_sdLcP_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdMrY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMs2; else goto cdMs1;
       cdMs2: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMs1: // global
           I64[Hp - 56] = sat_sdLcP_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLct::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLct::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.150562308 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info;
 },
 sat_sdLd3_entry() //  [R1]
         { []
         }
     {offset
       cdMsl: // global
           _sdLd3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMsm; else goto cdMsn;
       cdMsn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMsp; else goto cdMso;
       cdMsp: // global
           HpAlloc = 24;
           goto cdMsm;
       cdMsm: // global
           R1 = _sdLd3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMso: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLd3::P64;
           _sdLcQ::P64 = P64[_sdLd3::P64 + 16];
           _sdLcS::P64 = P64[_sdLd3::P64 + 24];
           _sdLcT::P64 = P64[_sdLd3::P64 + 32];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdLcT::P64;
           R3 = Hp - 16;
           R2 = _sdLcS::P64;
           R1 = _sdLcQ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLd3_info" {
     sat_sdLd3_info:
         const sat_sdLd3_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdMsq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMsu; else goto cdMst;
       cdMsu: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMst: // global
           I64[Hp - 56] = stg_sel_6_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLd3_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLcR::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLcR::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.156217816 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.159330784 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMsK: // global
           _sdLde::P64 = R3;
           _sdLdd::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMsL; else goto cdMsM;
       cdMsM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMsO; else goto cdMsN;
       cdMsO: // global
           HpAlloc = 48;
           goto cdMsL;
       cdMsL: // global
           R3 = _sdLde::P64;
           R2 = _sdLdd::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMsN: // global
           I64[Hp - 40] = stg_sel_5_upd_info;
           P64[Hp - 24] = _sdLde::P64;
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdLde::P64;
           R2 = _sdLdd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.164347296 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info;
 },
 sat_sdLdP_entry() //  [R1]
         { []
         }
     {offset
       cdMt5: // global
           _sdLdP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMt6; else goto cdMt7;
       cdMt7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMt9; else goto cdMt8;
       cdMt9: // global
           HpAlloc = 24;
           goto cdMt6;
       cdMt6: // global
           R1 = _sdLdP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMt8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLdP::P64;
           _sdLdw::P64 = P64[_sdLdP::P64 + 16];
           _sdLdx::P64 = P64[_sdLdP::P64 + 24];
           _sdLdy::P64 = P64[_sdLdP::P64 + 32];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdLdy::P64;
           R3 = _sdLdx::P64;
           R2 = Hp - 16;
           R1 = _sdLdw::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLdP_info" {
     sat_sdLdP_info:
         const sat_sdLdP_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdMtb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMtf; else goto cdMte;
       cdMtf: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMte: // global
           I64[Hp - 56] = sat_sdLdP_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLdv::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLdv::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.170835356 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info;
 },
 sat_sdLe2_entry() //  [R1]
         { []
         }
     {offset
       cdMty: // global
           _sdLe2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMtz; else goto cdMtA;
       cdMtA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMtC; else goto cdMtB;
       cdMtC: // global
           HpAlloc = 24;
           goto cdMtz;
       cdMtz: // global
           R1 = _sdLe2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMtB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLe2::P64;
           _sdLdQ::P64 = P64[_sdLe2::P64 + 16];
           _sdLdS::P64 = P64[_sdLe2::P64 + 24];
           _sdLdT::P64 = P64[_sdLe2::P64 + 32];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdLdT::P64;
           R3 = Hp - 16;
           R2 = _sdLdS::P64;
           R1 = _sdLdQ::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLe2_info" {
     sat_sdLe2_info:
         const sat_sdLe2_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdMtD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMtH; else goto cdMtG;
       cdMtH: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMtG: // global
           I64[Hp - 56] = stg_sel_5_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLe2_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLdR::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLdR::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.176683789 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.179201966 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMtX: // global
           _sdLec::P64 = R3;
           _sdLeb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMtY; else goto cdMtZ;
       cdMtZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMu1; else goto cdMu0;
       cdMu1: // global
           HpAlloc = 48;
           goto cdMtY;
       cdMtY: // global
           R3 = _sdLec::P64;
           R2 = _sdLeb::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMu0: // global
           I64[Hp - 40] = stg_sel_4_upd_info;
           P64[Hp - 24] = _sdLec::P64;
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdLec::P64;
           R2 = _sdLeb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.184085965 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info;
 },
 sat_sdLeJ_entry() //  [R1]
         { []
         }
     {offset
       cdMui: // global
           _sdLeJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMuj; else goto cdMuk;
       cdMuk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMum; else goto cdMul;
       cdMum: // global
           HpAlloc = 24;
           goto cdMuj;
       cdMuj: // global
           R1 = _sdLeJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLeJ::P64;
           _sdLes::P64 = P64[_sdLeJ::P64 + 16];
           _sdLet::P64 = P64[_sdLeJ::P64 + 24];
           _sdLeu::P64 = P64[_sdLeJ::P64 + 32];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdLeu::P64;
           R3 = _sdLet::P64;
           R2 = Hp - 16;
           R1 = _sdLes::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLeJ_info" {
     sat_sdLeJ_info:
         const sat_sdLeJ_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdMuo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMus; else goto cdMur;
       cdMus: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMur: // global
           I64[Hp - 56] = sat_sdLeJ_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLer::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLer::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.190964167 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info;
 },
 sat_sdLeV_entry() //  [R1]
         { []
         }
     {offset
       cdMuL: // global
           _sdLeV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMuM; else goto cdMuN;
       cdMuN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMuP; else goto cdMuO;
       cdMuP: // global
           HpAlloc = 24;
           goto cdMuM;
       cdMuM: // global
           R1 = _sdLeV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMuO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLeV::P64;
           _sdLeK::P64 = P64[_sdLeV::P64 + 16];
           _sdLeM::P64 = P64[_sdLeV::P64 + 24];
           _sdLeN::P64 = P64[_sdLeV::P64 + 32];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdLeN::P64;
           R3 = Hp - 16;
           R2 = _sdLeM::P64;
           R1 = _sdLeK::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLeV_info" {
     sat_sdLeV_info:
         const sat_sdLeV_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdMuQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMuU; else goto cdMuT;
       cdMuU: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMuT: // global
           I64[Hp - 56] = stg_sel_4_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLeV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLeL::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLeL::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.196712277 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.199645779 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMva: // global
           _sdLf4::P64 = R3;
           _sdLf3::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMvb; else goto cdMvc;
       cdMvc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMve; else goto cdMvd;
       cdMve: // global
           HpAlloc = 48;
           goto cdMvb;
       cdMvb: // global
           R3 = _sdLf4::P64;
           R2 = _sdLf3::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMvd: // global
           I64[Hp - 40] = stg_sel_3_upd_info;
           P64[Hp - 24] = _sdLf4::P64;
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdLf4::P64;
           R2 = _sdLf3::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.204324771 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info;
 },
 sat_sdLfx_entry() //  [R1]
         { []
         }
     {offset
       cdMvv: // global
           _sdLfx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMvw; else goto cdMvx;
       cdMvx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMvz; else goto cdMvy;
       cdMvz: // global
           HpAlloc = 24;
           goto cdMvw;
       cdMvw: // global
           R1 = _sdLfx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMvy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLfx::P64;
           _sdLfi::P64 = P64[_sdLfx::P64 + 16];
           _sdLfj::P64 = P64[_sdLfx::P64 + 24];
           _sdLfk::P64 = P64[_sdLfx::P64 + 32];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdLfk::P64;
           R3 = _sdLfj::P64;
           R2 = Hp - 16;
           R1 = _sdLfi::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLfx_info" {
     sat_sdLfx_info:
         const sat_sdLfx_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdMvB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMvF; else goto cdMvE;
       cdMvF: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMvE: // global
           I64[Hp - 56] = sat_sdLfx_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLfh::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLfh::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.211133672 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info;
 },
 sat_sdLfI_entry() //  [R1]
         { []
         }
     {offset
       cdMvY: // global
           _sdLfI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMvZ; else goto cdMw0;
       cdMw0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMw2; else goto cdMw1;
       cdMw2: // global
           HpAlloc = 24;
           goto cdMvZ;
       cdMvZ: // global
           R1 = _sdLfI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMw1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLfI::P64;
           _sdLfy::P64 = P64[_sdLfI::P64 + 16];
           _sdLfA::P64 = P64[_sdLfI::P64 + 24];
           _sdLfB::P64 = P64[_sdLfI::P64 + 32];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdLfB::P64;
           R3 = Hp - 16;
           R2 = _sdLfA::P64;
           R1 = _sdLfy::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLfI_info" {
     sat_sdLfI_info:
         const sat_sdLfI_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdMw3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMw7; else goto cdMw6;
       cdMw7: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMw6: // global
           I64[Hp - 56] = stg_sel_3_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLfI_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLfz::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLfz::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.216648914 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.219411591 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMwn: // global
           _sdLfQ::P64 = R3;
           _sdLfP::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMwo; else goto cdMwp;
       cdMwp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMwr; else goto cdMwq;
       cdMwr: // global
           HpAlloc = 48;
           goto cdMwo;
       cdMwo: // global
           R3 = _sdLfQ::P64;
           R2 = _sdLfP::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMwq: // global
           I64[Hp - 40] = stg_sel_2_upd_info;
           P64[Hp - 24] = _sdLfQ::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdLfQ::P64;
           R2 = _sdLfP::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.2242938 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info;
 },
 sat_sdLgf_entry() //  [R1]
         { []
         }
     {offset
       cdMwI: // global
           _sdLgf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMwJ; else goto cdMwK;
       cdMwK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMwM; else goto cdMwL;
       cdMwM: // global
           HpAlloc = 24;
           goto cdMwJ;
       cdMwJ: // global
           R1 = _sdLgf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMwL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLgf::P64;
           _sdLg2::P64 = P64[_sdLgf::P64 + 16];
           _sdLg3::P64 = P64[_sdLgf::P64 + 24];
           _sdLg4::P64 = P64[_sdLgf::P64 + 32];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdLg4::P64;
           R3 = _sdLg3::P64;
           R2 = Hp - 16;
           R1 = _sdLg2::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLgf_info" {
     sat_sdLgf_info:
         const sat_sdLgf_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdMwO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMwS; else goto cdMwR;
       cdMwS: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMwR: // global
           I64[Hp - 56] = sat_sdLgf_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLg1::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLg1::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.230992239 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info;
 },
 sat_sdLgp_entry() //  [R1]
         { []
         }
     {offset
       cdMxb: // global
           _sdLgp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMxc; else goto cdMxd;
       cdMxd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMxf; else goto cdMxe;
       cdMxf: // global
           HpAlloc = 24;
           goto cdMxc;
       cdMxc: // global
           R1 = _sdLgp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMxe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLgp::P64;
           _sdLgg::P64 = P64[_sdLgp::P64 + 16];
           _sdLgi::P64 = P64[_sdLgp::P64 + 24];
           _sdLgj::P64 = P64[_sdLgp::P64 + 32];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdLgj::P64;
           R3 = Hp - 16;
           R2 = _sdLgi::P64;
           R1 = _sdLgg::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLgp_info" {
     sat_sdLgp_info:
         const sat_sdLgp_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdMxg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMxk; else goto cdMxj;
       cdMxk: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMxj: // global
           I64[Hp - 56] = stg_sel_2_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLgp_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLgh::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLgh::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.237197282 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.239267889 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK2_closure" {
     Data.Bifoldable.$fBifoldableK2_closure:
         const Data.Bifoldable.$fBifoldableK2_info;
 },
 Data.Bifoldable.$fBifoldableK2_entry() //  [R3]
         { []
         }
     {offset
       cdMxy: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK2_info" {
     Data.Bifoldable.$fBifoldableK2_info:
         const Data.Bifoldable.$fBifoldableK2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.242747633 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldr_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdMxJ: // global
           R3 = R4;
           _sdLgx::P64 = R2;
           R2 = R5;
           R1 = _sdLgx::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.246194453 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldl_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdMxU: // global
           R3 = R5;
           _sdLgB::P64 = R2;
           R2 = R4;
           R1 = _sdLgB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.249228589 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_closure" {
     Data.Bifoldable.$fBifoldableK1_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableK2_closure+2;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.251252334 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst1_closure" {
     Data.Bifoldable.$fBifoldableConst1_closure:
         const Data.Bifoldable.$fBifoldableConst1_info;
 },
 Data.Bifoldable.$fBifoldableConst1_entry() //  [R3]
         { []
         }
     {offset
       cdMy6: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst1_info" {
     Data.Bifoldable.$fBifoldableConst1_info:
         const Data.Bifoldable.$fBifoldableConst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.254596446 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldr_entry() //  [R2, R4,
                                                          R5]
         { []
         }
     {offset
       cdMyh: // global
           R3 = R4;
           _sdLgH::P64 = R2;
           R2 = R5;
           R1 = _sdLgH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.258272086 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldl_entry() //  [R2, R4,
                                                          R5]
         { []
         }
     {offset
       cdMys: // global
           R3 = R5;
           _sdLgL::P64 = R2;
           R2 = R4;
           R1 = _sdLgL::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.261421676 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_closure" {
     Data.Bifoldable.$fBifoldableConst_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableConst1_closure+2;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.26437562 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMyG: // global
           _sdLgQ::P64 = R3;
           _sdLgP::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMyH; else goto cdMyI;
       cdMyI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMyK; else goto cdMyJ;
       cdMyK: // global
           HpAlloc = 48;
           goto cdMyH;
       cdMyH: // global
           R3 = _sdLgQ::P64;
           R2 = _sdLgP::P64;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMyJ: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _sdLgQ::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdLgQ::P64;
           R2 = _sdLgP::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.269495094 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info;
 },
 sat_sdLhb_entry() //  [R1]
         { []
         }
     {offset
       cdMz1: // global
           _sdLhb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMz2; else goto cdMz3;
       cdMz3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMz5; else goto cdMz4;
       cdMz5: // global
           HpAlloc = 24;
           goto cdMz2;
       cdMz2: // global
           R1 = _sdLhb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMz4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLhb::P64;
           _sdLh0::P64 = P64[_sdLhb::P64 + 16];
           _sdLh1::P64 = P64[_sdLhb::P64 + 24];
           _sdLh2::P64 = P64[_sdLhb::P64 + 32];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdLh2::P64;
           R3 = _sdLh1::P64;
           R2 = Hp - 16;
           R1 = _sdLh0::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLhb_info" {
     sat_sdLhb_info:
         const sat_sdLhb_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldr_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdMz7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMzb; else goto cdMza;
       cdMzb: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMza: // global
           I64[Hp - 56] = sat_sdLhb_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdLgZ::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdLgZ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.275788596 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info;
 },
 sat_sdLhk_entry() //  [R1]
         { []
         }
     {offset
       cdMzu: // global
           _sdLhk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMzv; else goto cdMzw;
       cdMzw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMzy; else goto cdMzx;
       cdMzy: // global
           HpAlloc = 24;
           goto cdMzv;
       cdMzv: // global
           R1 = _sdLhk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMzx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLhk::P64;
           _sdLhc::P64 = P64[_sdLhk::P64 + 16];
           _sdLhe::P64 = P64[_sdLhk::P64 + 24];
           _sdLhf::P64 = P64[_sdLhk::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdLhf::P64;
           R3 = Hp - 16;
           R2 = _sdLhe::P64;
           R1 = _sdLhc::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLhk_info" {
     sat_sdLhk_info:
         const sat_sdLhk_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldl_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdMzz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdMzD; else goto cdMzC;
       cdMzD: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMzC: // global
           I64[Hp - 56] = stg_sel_1_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdLhk_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdLhd::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdLhd::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.281420708 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_closure" {
     Data.Bifoldable.$fBifoldable(,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.285220954 UTC

[section ""data" . Data.Bifoldable.bifoldr'_closure" {
     Data.Bifoldable.bifoldr'_closure:
         const Data.Bifoldable.bifoldr'_info;
 },
 sat_sdLhD_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMzY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMzZ; else goto cdMA0;
       cdMzZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMA0: // global
           I64[Sp - 16] = block_cdMzW_info;
           _sdLhA::P64 = R3;
           R3 = R4;
           _sdLhz::P64 = R2;
           R2 = _sdLhA::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdLhz::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLhD_info" {
     sat_sdLhD_info:
         const sat_sdLhD_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdMzW() //  [R1]
         { []
         }
     {offset
       cdMzW: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMzW_info" {
     block_cdMzW_info:
         const _cdMzW;
         const 1;
         const 30;
 },
 sat_sdLhy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMAa; else goto cdMAb;
       cdMAa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMAb: // global
           I64[Sp - 16] = block_cdMA7_info;
           _sdLhv::P64 = R3;
           R3 = R4;
           _sdLhu::P64 = R2;
           R2 = _sdLhv::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdLhu::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLhy_info" {
     sat_sdLhy_info:
         const sat_sdLhy_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdMA7() //  [R1]
         { []
         }
     {offset
       cdMA7: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMA7_info" {
     block_cdMA7_info:
         const _cdMA7;
         const 1;
         const 30;
 },
 Data.Bifoldable.bifoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMAd: // global
           _sdLht::P64 = R6;
           _sdLhs::P64 = R5;
           _sdLhr::P64 = R4;
           _sdLhq::P64 = R3;
           _sdLhp::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMAe; else goto cdMAf;
       cdMAf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMAh; else goto cdMAg;
       cdMAh: // global
           HpAlloc = 32;
           goto cdMAe;
       cdMAe: // global
           R6 = _sdLht::P64;
           R5 = _sdLhs::P64;
           R4 = _sdLhr::P64;
           R3 = _sdLhq::P64;
           R2 = _sdLhp::P64;
           R1 = Data.Bifoldable.bifoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMAg: // global
           I64[Hp - 24] = sat_sdLhD_info;
           P64[Hp - 16] = _sdLhr::P64;
           I64[Hp - 8] = sat_sdLhy_info;
           P64[Hp] = _sdLhq::P64;
           R2 = _sdLhp::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Hp - 5;
           P64[Sp - 32] = Hp - 21;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _sdLht::P64;
           P64[Sp - 8] = _sdLhs::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldl_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr'_info" {
     Data.Bifoldable.bifoldr'_info:
         const Data.Bifoldable.bifoldr'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.295946655 UTC

[section ""cstring" . lvl_rdL8s_bytes" {
     lvl_rdL8s_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.298938157 UTC

[section ""data" . lvl1_rdL8t_closure" {
     lvl1_rdL8t_closure:
         const lvl1_rdL8t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rdL8t_entry() //  [R1]
         { []
         }
     {offset
       cdMAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMAL; else goto cdMAM;
       cdMAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMAM: // global
           (_cdMAH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMAH::I64 == 0) goto cdMAJ; else goto cdMAI;
       cdMAJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMAI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMAH::I64;
           R2 = lvl_rdL8s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rdL8t_info" {
     lvl1_rdL8t_info:
         const lvl1_rdL8t_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.303576984 UTC

[section ""cstring" . Data.Bifoldable.$trModule4_bytes" {
     Data.Bifoldable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.305906995 UTC

[section ""data" . lvl2_rdL8u_closure" {
     lvl2_rdL8u_closure:
         const lvl2_rdL8u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rdL8u_entry() //  [R1]
         { []
         }
     {offset
       cdMB1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMB2; else goto cdMB3;
       cdMB2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMB3: // global
           (_cdMAY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMAY::I64 == 0) goto cdMB0; else goto cdMAZ;
       cdMB0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMAZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMAY::I64;
           R2 = Data.Bifoldable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rdL8u_info" {
     lvl2_rdL8u_info:
         const lvl2_rdL8u_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.309372173 UTC

[section ""cstring" . Data.Bifoldable.$trModule2_bytes" {
     Data.Bifoldable.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,102,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.311479715 UTC

[section ""data" . lvl3_rdL8v_closure" {
     lvl3_rdL8v_closure:
         const lvl3_rdL8v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rdL8v_entry() //  [R1]
         { []
         }
     {offset
       cdMBi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMBj; else goto cdMBk;
       cdMBj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMBk: // global
           (_cdMBf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMBf::I64 == 0) goto cdMBh; else goto cdMBg;
       cdMBh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMBg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMBf::I64;
           R2 = Data.Bifoldable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rdL8v_info" {
     lvl3_rdL8v_info:
         const lvl3_rdL8v_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.31493064 UTC

[section ""cstring" . lvl4_rdL8w_bytes" {
     lvl4_rdL8w_bytes:
         I8[] [46,47,68,97,116,97,47,66,105,102,111,108,100,97,98,108,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.317197424 UTC

[section ""data" . lvl5_rdL8x_closure" {
     lvl5_rdL8x_closure:
         const lvl5_rdL8x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rdL8x_entry() //  [R1]
         { []
         }
     {offset
       cdMBz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMBA; else goto cdMBB;
       cdMBA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMBB: // global
           (_cdMBw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMBw::I64 == 0) goto cdMBy; else goto cdMBx;
       cdMBy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMBx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMBw::I64;
           R2 = lvl4_rdL8w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rdL8x_info" {
     lvl5_rdL8x_info:
         const lvl5_rdL8x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.320774876 UTC

[section ""data" . lvl6_rdL8y_closure" {
     lvl6_rdL8y_closure:
         const GHC.Types.I#_con_info;
         const 188;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.32244917 UTC

[section ""data" . lvl7_rdL8z_closure" {
     lvl7_rdL8z_closure:
         const GHC.Types.I#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.32409068 UTC

[section ""data" . lvl8_rdL8A_closure" {
     lvl8_rdL8A_closure:
         const GHC.Types.I#_con_info;
         const 61;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.325859697 UTC

[section ""data" . lvl9_rdL8B_closure" {
     lvl9_rdL8B_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl6_rdL8y_closure+1;
         const lvl7_rdL8z_closure+1;
         const lvl6_rdL8y_closure+1;
         const lvl8_rdL8A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.327562782 UTC

[section ""data" . lvl10_rdL8C_closure" {
     lvl10_rdL8C_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl9_rdL8B_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.329346997 UTC

[section ""cstring" . lvl11_rdL8D_bytes" {
     lvl11_rdL8D_bytes:
         I8[] [98,105,102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.332434457 UTC

[section ""data" . Data.Bifoldable.bifoldr2_closure" {
     Data.Bifoldable.bifoldr2_closure:
         const Data.Bifoldable.bifoldr2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bifoldr2_entry() //  [R1]
         { []
         }
     {offset
       cdMBX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMBY; else goto cdMBZ;
       cdMBY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMBZ: // global
           (_cdMBS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMBS::I64 == 0) goto cdMBU; else goto cdMBT;
       cdMBU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMBT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMBS::I64;
           I64[Sp - 24] = block_cdMBV_info;
           R2 = lvl11_rdL8D_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr2_info" {
     Data.Bifoldable.bifoldr2_info:
         const Data.Bifoldable.bifoldr2_entry;
         const 0;
         const 12884901909;
         const SdLpk_srt+32;
 },
 _cdMBV() //  [R1]
         { []
         }
     {offset
       cdMBV: // global
           R3 = R1;
           R2 = lvl10_rdL8C_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMBV_info" {
     block_cdMBV_info:
         const _cdMBV;
         const 0;
         const 12884901918;
         const SdLpk_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.34253894 UTC

[section ""data" . Data.Bifoldable.bifoldr1_closure" {
     Data.Bifoldable.bifoldr1_closure:
         const Data.Bifoldable.bifoldr1_info;
         const 0;
 },
 sat_sdLhN_entry() //  [R1]
         { []
         }
     {offset
       cdMCx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdMCy; else goto cdMCz;
       cdMCy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMCz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdMCq_info;
           _sdLhG::P64 = P64[R1 + 16];
           _sdLhJ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdLhG::P64;
           P64[Sp - 24] = _sdLhJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udMCG; else goto cdMCr;
       udMCG: // global
           call _cdMCq(R1) args: 0, res: 0, upd: 0;
       cdMCr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLhN_info" {
     sat_sdLhN_info:
         const sat_sdLhN_entry;
         const 3;
         const 15;
 },
 _cdMCq() //  [R1]
         { []
         }
     {offset
       cdMCq: // global
           _sdLhJ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdMCu; else goto cdMCv;
       cdMCu: // global
           R1 = _sdLhJ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cdMCv: // global
           R3 = P64[R1 + 6];
           R2 = _sdLhJ::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMCq_info" {
     block_cdMCq_info:
         const _cdMCq;
         const 2;
         const 30;
 },
 mbf_sdLhI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMCI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdMCM; else goto cdMCL;
       cdMCM: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMCL: // global
           _sdLhG::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdLhN_info;
           P64[Hp - 32] = _sdLhG::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdLhI_info" {
     mbf_sdLhI_info:
         const mbf_sdLhI_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bifoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMCT: // global
           _sdLhH::P64 = R4;
           _sdLhG::P64 = R3;
           _sdLhF::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMCU; else goto cdMCV;
       cdMCV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMCX; else goto cdMCW;
       cdMCX: // global
           HpAlloc = 16;
           goto cdMCU;
       cdMCU: // global
           R4 = _sdLhH::P64;
           R3 = _sdLhG::P64;
           R2 = _sdLhF::P64;
           R1 = Data.Bifoldable.bifoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMCW: // global
           I64[Hp - 8] = mbf_sdLhI_info;
           P64[Hp] = _sdLhG::P64;
           I64[Sp - 8] = block_cdMCN_info;
           R2 = _sdLhF::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdMCh::P64 = Hp - 6;
           P64[Sp - 40] = _cdMCh::P64;
           P64[Sp - 32] = _cdMCh::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdLhH::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr1_info" {
     Data.Bifoldable.bifoldr1_info:
         const Data.Bifoldable.bifoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdLpk_srt+48;
 },
 _cdMCN() //  [R1]
         { []
         }
     {offset
       cdMCN: // global
           if (R1 & 7 == 1) goto cdMCQ; else goto cdMCR;
       cdMCQ: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMCR: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMCN_info" {
     block_cdMCN_info:
         const _cdMCN;
         const 0;
         const 4294967326;
         const SdLpk_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.35614805 UTC

[section ""data" . Data.Bifoldable.bimaximumBy_closure" {
     Data.Bifoldable.bimaximumBy_closure:
         const Data.Bifoldable.bimaximumBy_info;
         const 0;
 },
 sat_sdLhZ_entry() //  [R1]
         { []
         }
     {offset
       cdMDN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdMDO; else goto cdMDP;
       cdMDO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMDP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdMDG_info;
           _sdLhR::P64 = P64[R1 + 16];
           _sdLhU::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdLhR::P64;
           P64[Sp - 24] = _sdLhU::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udMEb; else goto cdMDH;
       udMEb: // global
           call _cdMDG(R1) args: 0, res: 0, upd: 0;
       cdMDH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLhZ_info" {
     sat_sdLhZ_info:
         const sat_sdLhZ_entry;
         const 3;
         const 15;
 },
 _cdMDG() //  [R1]
         { []
         }
     {offset
       cdMDG: // global
           if (R1 & 7 == 1) goto udME8; else goto cdMDL;
       udME8: // global
           Sp = Sp + 16;
           call _cdME6() args: 0, res: 0, upd: 0;
       cdMDL: // global
           I64[Sp] = block_cdMDV_info;
           _sdLhX::P64 = P64[R1 + 6];
           R3 = _sdLhX::P64;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdLhX::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMDG_info" {
     block_cdMDG_info:
         const _cdMDG;
         const 2;
         const 30;
 },
 _cdMDV() //  [R1]
         { []
         }
     {offset
       cdMDV: // global
           if (R1 & 7 == 3) goto udME9; else goto cdME2;
       udME9: // global
           Sp = Sp + 16;
           call _cdME6() args: 0, res: 0, upd: 0;
       cdME2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMDV_info" {
     block_cdMDV_info:
         const _cdMDV;
         const 2;
         const 30;
 },
 _cdME6() //  []
         { []
         }
     {offset
       cdME6: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 mbf_sdLhT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMEe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdMEi; else goto cdMEh;
       cdMEi: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMEh: // global
           _sdLhR::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdLhZ_info;
           P64[Hp - 32] = _sdLhR::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdLhT_info" {
     mbf_sdLhT_info:
         const mbf_sdLhT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bimaximumBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMEp: // global
           _sdLhS::P64 = R4;
           _sdLhR::P64 = R3;
           _sdLhQ::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMEq; else goto cdMEr;
       cdMEr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMEt; else goto cdMEs;
       cdMEt: // global
           HpAlloc = 16;
           goto cdMEq;
       cdMEq: // global
           R4 = _sdLhS::P64;
           R3 = _sdLhR::P64;
           R2 = _sdLhQ::P64;
           R1 = Data.Bifoldable.bimaximumBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMEs: // global
           I64[Hp - 8] = mbf_sdLhT_info;
           P64[Hp] = _sdLhR::P64;
           I64[Sp - 8] = block_cdMEj_info;
           R2 = _sdLhQ::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdMDx::P64 = Hp - 6;
           P64[Sp - 40] = _cdMDx::P64;
           P64[Sp - 32] = _cdMDx::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdLhS::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximumBy_info" {
     Data.Bifoldable.bimaximumBy_info:
         const Data.Bifoldable.bimaximumBy_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdLpk_srt+56;
 },
 _cdMEj() //  [R1]
         { []
         }
     {offset
       cdMEj: // global
           if (R1 & 7 == 1) goto cdMEm; else goto cdMEn;
       cdMEm: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMEn: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMEj_info" {
     block_cdMEj_info:
         const _cdMEj;
         const 0;
         const 4294967326;
         const SdLpk_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.372579309 UTC

[section ""data" . Data.Bifoldable.biminimumBy_closure" {
     Data.Bifoldable.biminimumBy_closure:
         const Data.Bifoldable.biminimumBy_info;
         const 0;
 },
 sat_sdLib_entry() //  [R1]
         { []
         }
     {offset
       cdMFq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdMFr; else goto cdMFs;
       cdMFr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMFs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdMFj_info;
           _sdLi3::P64 = P64[R1 + 16];
           _sdLi6::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdLi3::P64;
           P64[Sp - 24] = _sdLi6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udMFO; else goto cdMFk;
       udMFO: // global
           call _cdMFj(R1) args: 0, res: 0, upd: 0;
       cdMFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLib_info" {
     sat_sdLib_info:
         const sat_sdLib_entry;
         const 3;
         const 15;
 },
 _cdMFj() //  [R1]
         { []
         }
     {offset
       cdMFj: // global
           if (R1 & 7 == 1) goto udMFL; else goto cdMFo;
       udMFL: // global
           Sp = Sp + 16;
           call _cdMFF() args: 0, res: 0, upd: 0;
       cdMFo: // global
           I64[Sp] = block_cdMFy_info;
           _sdLi9::P64 = P64[R1 + 6];
           R3 = _sdLi9::P64;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdLi9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMFj_info" {
     block_cdMFj_info:
         const _cdMFj;
         const 2;
         const 30;
 },
 _cdMFy() //  [R1]
         { []
         }
     {offset
       cdMFy: // global
           if (R1 & 7 == 3) goto cdMFJ; else goto udMFM;
       cdMFJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       udMFM: // global
           Sp = Sp + 16;
           call _cdMFF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdMFy_info" {
     block_cdMFy_info:
         const _cdMFy;
         const 2;
         const 30;
 },
 _cdMFF() //  []
         { []
         }
     {offset
       cdMFF: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 mbf_sdLi5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMFR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdMFV; else goto cdMFU;
       cdMFV: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMFU: // global
           _sdLi3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdLib_info;
           P64[Hp - 32] = _sdLi3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdLi5_info" {
     mbf_sdLi5_info:
         const mbf_sdLi5_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.biminimumBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMG2: // global
           _sdLi4::P64 = R4;
           _sdLi3::P64 = R3;
           _sdLi2::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMG3; else goto cdMG4;
       cdMG4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMG6; else goto cdMG5;
       cdMG6: // global
           HpAlloc = 16;
           goto cdMG3;
       cdMG3: // global
           R4 = _sdLi4::P64;
           R3 = _sdLi3::P64;
           R2 = _sdLi2::P64;
           R1 = Data.Bifoldable.biminimumBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMG5: // global
           I64[Hp - 8] = mbf_sdLi5_info;
           P64[Hp] = _sdLi3::P64;
           I64[Sp - 8] = block_cdMFW_info;
           R2 = _sdLi2::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdMFa::P64 = Hp - 6;
           P64[Sp - 40] = _cdMFa::P64;
           P64[Sp - 32] = _cdMFa::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdLi4::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimumBy_info" {
     Data.Bifoldable.biminimumBy_info:
         const Data.Bifoldable.biminimumBy_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdLpk_srt+56;
 },
 _cdMFW() //  [R1]
         { []
         }
     {offset
       cdMFW: // global
           if (R1 & 7 == 1) goto cdMFZ; else goto cdMG0;
       cdMFZ: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMG0: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMFW_info" {
     block_cdMFW_info:
         const _cdMFW;
         const 0;
         const 4294967326;
         const SdLpk_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.388610634 UTC

[section ""data" . Data.Bifoldable.bifoldrM_closure" {
     Data.Bifoldable.bifoldrM_closure:
         const Data.Bifoldable.bifoldrM_info;
 },
 sat_sdLiu_entry() //  [R1]
         { []
         }
     {offset
       cdMGR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMGS; else goto cdMGT;
       cdMGS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMGT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLiu_info" {
     sat_sdLiu_info:
         const sat_sdLiu_entry;
         const 1;
         const 16;
 },
 sat_sdLit_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMH0: // global
           _sdLir::P64 = R4;
           _sdLiq::P64 = R3;
           _sdLip::P64 = R2;
           _sdLit::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMH1; else goto cdMH2;
       cdMH2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdMH4; else goto cdMH3;
       cdMH4: // global
           HpAlloc = 40;
           goto cdMH1;
       cdMH1: // global
           R4 = _sdLir::P64;
           R3 = _sdLiq::P64;
           R2 = _sdLip::P64;
           R1 = _sdLit::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMH3: // global
           _sdLif::P64 = P64[_sdLit::P64 + 5];
           _sdLih::P64 = P64[_sdLit::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdLih::P64;
           P64[Hp - 8] = _sdLiq::P64;
           P64[Hp] = _sdLir::P64;
           R2 = _sdLif::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdLip::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLit_info" {
     sat_sdLit_info:
         const sat_sdLit_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sdLio_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMHb: // global
           _sdLim::P64 = R4;
           _sdLil::P64 = R3;
           _sdLik::P64 = R2;
           _sdLio::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMHc; else goto cdMHd;
       cdMHd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdMHf; else goto cdMHe;
       cdMHf: // global
           HpAlloc = 40;
           goto cdMHc;
       cdMHc: // global
           R4 = _sdLim::P64;
           R3 = _sdLil::P64;
           R2 = _sdLik::P64;
           R1 = _sdLio::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMHe: // global
           _sdLif::P64 = P64[_sdLio::P64 + 5];
           _sdLig::P64 = P64[_sdLio::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdLig::P64;
           P64[Hp - 8] = _sdLil::P64;
           P64[Hp] = _sdLim::P64;
           R2 = _sdLif::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdLik::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLio_info" {
     sat_sdLio_info:
         const sat_sdLio_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Bifoldable.bifoldrM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMHg: // global
           _sdLii::P64 = R6;
           _sdLih::P64 = R5;
           _sdLig::P64 = R4;
           _sdLif::P64 = R3;
           _sdLie::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdMHh; else goto cdMHi;
       cdMHi: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMHk; else goto cdMHj;
       cdMHk: // global
           HpAlloc = 72;
           goto cdMHh;
       cdMHh: // global
           R6 = _sdLii::P64;
           R5 = _sdLih::P64;
           R4 = _sdLig::P64;
           R3 = _sdLif::P64;
           R2 = _sdLie::P64;
           R1 = Data.Bifoldable.bifoldrM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdMHj: // global
           I64[Hp - 64] = sat_sdLiu_info;
           P64[Hp - 48] = _sdLif::P64;
           I64[Hp - 40] = sat_sdLit_info;
           P64[Hp - 32] = _sdLif::P64;
           P64[Hp - 24] = _sdLih::P64;
           I64[Hp - 16] = sat_sdLio_info;
           P64[Hp - 8] = _sdLif::P64;
           P64[Hp] = _sdLig::P64;
           R2 = _sdLie::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 37;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = _sdLii::P64;
           Sp = Sp - 40;
           call Data.Bifoldable.bifoldl_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldrM_info" {
     Data.Bifoldable.bifoldrM_info:
         const Data.Bifoldable.bifoldrM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.40042442 UTC

[section ""data" . Data.Bifoldable.bifoldl'_closure" {
     Data.Bifoldable.bifoldl'_closure:
         const Data.Bifoldable.bifoldl'_info;
 },
 sat_sdLiJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMHT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMHU; else goto cdMHV;
       cdMHU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMHV: // global
           I64[Sp - 16] = block_cdMHR_info;
           _sdLiG::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdLiG::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLiJ_info" {
     sat_sdLiJ_info:
         const sat_sdLiJ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdMHR() //  [R1]
         { []
         }
     {offset
       cdMHR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMHR_info" {
     block_cdMHR_info:
         const _cdMHR;
         const 1;
         const 30;
 },
 sat_sdLiE_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMI4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMI5; else goto cdMI6;
       cdMI5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMI6: // global
           I64[Sp - 16] = block_cdMI2_info;
           _sdLiB::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdLiB::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLiE_info" {
     sat_sdLiE_info:
         const sat_sdLiE_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdMI2() //  [R1]
         { []
         }
     {offset
       cdMI2: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMI2_info" {
     block_cdMI2_info:
         const _cdMI2;
         const 1;
         const 30;
 },
 Data.Bifoldable.bifoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMI8: // global
           _sdLiz::P64 = R6;
           _sdLiy::P64 = R5;
           _sdLix::P64 = R4;
           _sdLiw::P64 = R3;
           _sdLiv::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMI9; else goto cdMIa;
       cdMIa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMIc; else goto cdMIb;
       cdMIc: // global
           HpAlloc = 32;
           goto cdMI9;
       cdMI9: // global
           R6 = _sdLiz::P64;
           R5 = _sdLiy::P64;
           R4 = _sdLix::P64;
           R3 = _sdLiw::P64;
           R2 = _sdLiv::P64;
           R1 = Data.Bifoldable.bifoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMIb: // global
           I64[Hp - 24] = sat_sdLiJ_info;
           P64[Hp - 16] = _sdLix::P64;
           I64[Hp - 8] = sat_sdLiE_info;
           P64[Hp] = _sdLiw::P64;
           R2 = _sdLiv::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Hp - 5;
           P64[Sp - 32] = Hp - 21;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _sdLiz::P64;
           P64[Sp - 8] = _sdLiy::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl'_info" {
     Data.Bifoldable.bifoldl'_info:
         const Data.Bifoldable.bifoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.411931606 UTC

[section ""data" . Data.Bifoldable.bilength2_closure" {
     Data.Bifoldable.bilength2_closure:
         const Data.Bifoldable.bilength2_info;
 },
 Data.Bifoldable.bilength2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMIF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMIM; else goto cdMIN;
       cdMIM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bilength2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMIN: // global
           I64[Sp - 16] = block_cdMIC_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udMIR; else goto cdMID;
       udMIR: // global
           call _cdMIC(R1) args: 0, res: 0, upd: 0;
       cdMID: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bilength2_info" {
     Data.Bifoldable.bilength2_info:
         const Data.Bifoldable.bilength2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdMIC() //  [R1]
         { []
         }
     {offset
       cdMIC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMIQ; else goto cdMIP;
       cdMIQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdMIP: // global
           _sdLiP::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdLiP::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMIC_info" {
     block_cdMIC_info:
         const _cdMIC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.417747925 UTC

[section ""data" . Data.Bifoldable.bilength1_closure" {
     Data.Bifoldable.bilength1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.419938802 UTC

[section ""data" . Data.Bifoldable.bilength_closure" {
     Data.Bifoldable.bilength_closure:
         const Data.Bifoldable.bilength_info;
 },
 Data.Bifoldable.bilength_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMJ7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdMJ8; else goto cdMJ9;
       cdMJ8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bilength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMJ9: // global
           R2 = R2;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Bifoldable.bilength2_closure+3;
           P64[Sp - 32] = Data.Bifoldable.bilength2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Bifoldable.bilength1_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bilength_info" {
     Data.Bifoldable.bilength_info:
         const Data.Bifoldable.bilength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.423411117 UTC

[section ""data" . lvl12_rdL8E_closure" {
     lvl12_rdL8E_closure:
         const GHC.Types.I#_con_info;
         const 223;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.425171436 UTC

[section ""data" . lvl13_rdL8F_closure" {
     lvl13_rdL8F_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl12_rdL8E_closure+1;
         const lvl7_rdL8z_closure+1;
         const lvl12_rdL8E_closure+1;
         const lvl8_rdL8A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.426936351 UTC

[section ""data" . lvl14_rdL8G_closure" {
     lvl14_rdL8G_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl13_rdL8F_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.428673896 UTC

[section ""cstring" . lvl15_rdL8H_bytes" {
     lvl15_rdL8H_bytes:
         I8[] [98,105,102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.432412565 UTC

[section ""data" . Data.Bifoldable.bifoldl2_closure" {
     Data.Bifoldable.bifoldl2_closure:
         const Data.Bifoldable.bifoldl2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bifoldl2_entry() //  [R1]
         { []
         }
     {offset
       cdMJr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMJs; else goto cdMJt;
       cdMJs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMJt: // global
           (_cdMJm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMJm::I64 == 0) goto cdMJo; else goto cdMJn;
       cdMJo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMJn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMJm::I64;
           I64[Sp - 24] = block_cdMJp_info;
           R2 = lvl15_rdL8H_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl2_info" {
     Data.Bifoldable.bifoldl2_info:
         const Data.Bifoldable.bifoldl2_entry;
         const 0;
         const 279172874261;
         const SdLpk_srt+32;
 },
 _cdMJp() //  [R1]
         { []
         }
     {offset
       cdMJp: // global
           R3 = R1;
           R2 = lvl14_rdL8G_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMJp_info" {
     block_cdMJp_info:
         const _cdMJp;
         const 0;
         const 279172874270;
         const SdLpk_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.442018546 UTC

[section ""data" . Data.Bifoldable.bifoldl1_closure" {
     Data.Bifoldable.bifoldl1_closure:
         const Data.Bifoldable.bifoldl1_info;
         const 0;
 },
 sat_sdLj2_entry() //  [R1]
         { []
         }
     {offset
       cdMK1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdMK2; else goto cdMK3;
       cdMK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMK3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdMJU_info;
           _sdLiV::P64 = P64[R1 + 16];
           _sdLiZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdLiV::P64;
           P64[Sp - 24] = _sdLiZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udMKa; else goto cdMJV;
       udMKa: // global
           call _cdMJU(R1) args: 0, res: 0, upd: 0;
       cdMJV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLj2_info" {
     sat_sdLj2_info:
         const sat_sdLj2_entry;
         const 3;
         const 15;
 },
 _cdMJU() //  [R1]
         { []
         }
     {offset
       cdMJU: // global
           _sdLiZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdMJY; else goto cdMJZ;
       cdMJY: // global
           R1 = _sdLiZ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cdMJZ: // global
           R3 = _sdLiZ::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMJU_info" {
     block_cdMJU_info:
         const _cdMJU;
         const 2;
         const 30;
 },
 mbf_sdLiX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdMKc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdMKg; else goto cdMKf;
       cdMKg: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMKf: // global
           _sdLiV::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdLj2_info;
           P64[Hp - 32] = _sdLiV::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdLiX_info" {
     mbf_sdLiX_info:
         const mbf_sdLiX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bifoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMKn: // global
           _sdLiW::P64 = R4;
           _sdLiV::P64 = R3;
           _sdLiU::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMKo; else goto cdMKp;
       cdMKp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMKr; else goto cdMKq;
       cdMKr: // global
           HpAlloc = 16;
           goto cdMKo;
       cdMKo: // global
           R4 = _sdLiW::P64;
           R3 = _sdLiV::P64;
           R2 = _sdLiU::P64;
           R1 = Data.Bifoldable.bifoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMKq: // global
           I64[Hp - 8] = mbf_sdLiX_info;
           P64[Hp] = _sdLiV::P64;
           I64[Sp - 8] = block_cdMKh_info;
           R2 = _sdLiU::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdMJL::P64 = Hp - 6;
           P64[Sp - 40] = _cdMJL::P64;
           P64[Sp - 32] = _cdMJL::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdLiW::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldl_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl1_info" {
     Data.Bifoldable.bifoldl1_info:
         const Data.Bifoldable.bifoldl1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdLpk_srt+88;
 },
 _cdMKh() //  [R1]
         { []
         }
     {offset
       cdMKh: // global
           if (R1 & 7 == 1) goto cdMKk; else goto cdMKl;
       cdMKk: // global
           R1 = Data.Bifoldable.bifoldl2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMKl: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMKh_info" {
     block_cdMKh_info:
         const _cdMKh;
         const 0;
         const 4294967326;
         const SdLpk_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.457273815 UTC

[section ""data" . Data.Bifoldable.bifoldlM_closure" {
     Data.Bifoldable.bifoldlM_closure:
         const Data.Bifoldable.bifoldlM_info;
 },
 sat_sdLjl_entry() //  [R1]
         { []
         }
     {offset
       cdML5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdML6; else goto cdML7;
       cdML6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdML7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjl_info" {
     sat_sdLjl_info:
         const sat_sdLjl_entry;
         const 1;
         const 16;
 },
 sat_sdLjk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMLe: // global
           _sdLji::P64 = R4;
           _sdLjh::P64 = R3;
           _sdLjg::P64 = R2;
           _sdLjk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMLf; else goto cdMLg;
       cdMLg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdMLi; else goto cdMLh;
       cdMLi: // global
           HpAlloc = 40;
           goto cdMLf;
       cdMLf: // global
           R4 = _sdLji::P64;
           R3 = _sdLjh::P64;
           R2 = _sdLjg::P64;
           R1 = _sdLjk::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMLh: // global
           _sdLj6::P64 = P64[_sdLjk::P64 + 5];
           _sdLj8::P64 = P64[_sdLjk::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdLj8::P64;
           P64[Hp - 8] = _sdLji::P64;
           P64[Hp] = _sdLjg::P64;
           R2 = _sdLj6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdLjh::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLjk_info" {
     sat_sdLjk_info:
         const sat_sdLjk_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sdLjf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdMLp: // global
           _sdLjd::P64 = R4;
           _sdLjc::P64 = R3;
           _sdLjb::P64 = R2;
           _sdLjf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdMLq; else goto cdMLr;
       cdMLr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdMLt; else goto cdMLs;
       cdMLt: // global
           HpAlloc = 40;
           goto cdMLq;
       cdMLq: // global
           R4 = _sdLjd::P64;
           R3 = _sdLjc::P64;
           R2 = _sdLjb::P64;
           R1 = _sdLjf::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMLs: // global
           _sdLj6::P64 = P64[_sdLjf::P64 + 5];
           _sdLj7::P64 = P64[_sdLjf::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdLj7::P64;
           P64[Hp - 8] = _sdLjd::P64;
           P64[Hp] = _sdLjb::P64;
           R2 = _sdLj6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdLjc::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLjf_info" {
     sat_sdLjf_info:
         const sat_sdLjf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Bifoldable.bifoldlM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMLu: // global
           _sdLj9::P64 = R6;
           _sdLj8::P64 = R5;
           _sdLj7::P64 = R4;
           _sdLj6::P64 = R3;
           _sdLj5::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdMLv; else goto cdMLw;
       cdMLw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMLy; else goto cdMLx;
       cdMLy: // global
           HpAlloc = 72;
           goto cdMLv;
       cdMLv: // global
           R6 = _sdLj9::P64;
           R5 = _sdLj8::P64;
           R4 = _sdLj7::P64;
           R3 = _sdLj6::P64;
           R2 = _sdLj5::P64;
           R1 = Data.Bifoldable.bifoldlM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdMLx: // global
           I64[Hp - 64] = sat_sdLjl_info;
           P64[Hp - 48] = _sdLj6::P64;
           I64[Hp - 40] = sat_sdLjk_info;
           P64[Hp - 32] = _sdLj6::P64;
           P64[Hp - 24] = _sdLj8::P64;
           I64[Hp - 16] = sat_sdLjf_info;
           P64[Hp - 8] = _sdLj6::P64;
           P64[Hp] = _sdLj7::P64;
           R2 = _sdLj5::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 37;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = _sdLj9::P64;
           Sp = Sp - 40;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldlM_info" {
     Data.Bifoldable.bifoldlM_info:
         const Data.Bifoldable.bifoldlM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.470682689 UTC

[section ""data" . Data.Bifoldable.bitraverse__closure" {
     Data.Bifoldable.bitraverse__closure:
         const Data.Bifoldable.bitraverse__info;
 },
 sat_sdLjw_entry() //  [R1]
         { []
         }
     {offset
       cdMM4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMM5; else goto cdMM6;
       cdMM5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMM6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjw_info" {
     sat_sdLjw_info:
         const sat_sdLjw_entry;
         const 1;
         const 16;
 },
 sat_sdLjv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMMd: // global
           _sdLjt::P64 = R2;
           _sdLjv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMMe; else goto cdMMf;
       cdMMf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMMh; else goto cdMMg;
       cdMMh: // global
           HpAlloc = 32;
           goto cdMMe;
       cdMMe: // global
           R2 = _sdLjt::P64;
           R1 = _sdLjv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMMg: // global
           _sdLjn::P64 = P64[_sdLjv::P64 + 7];
           _sdLjp::P64 = P64[_sdLjv::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdLjp::P64;
           P64[Hp] = _sdLjt::P64;
           R2 = _sdLjn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLjv_info" {
     sat_sdLjv_info:
         const sat_sdLjv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdLjs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMMo: // global
           _sdLjq::P64 = R2;
           _sdLjs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdMMp; else goto cdMMq;
       cdMMq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMMs; else goto cdMMr;
       cdMMs: // global
           HpAlloc = 32;
           goto cdMMp;
       cdMMp: // global
           R2 = _sdLjq::P64;
           R1 = _sdLjs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMMr: // global
           _sdLjn::P64 = P64[_sdLjs::P64 + 7];
           _sdLjo::P64 = P64[_sdLjs::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdLjo::P64;
           P64[Hp] = _sdLjq::P64;
           R2 = _sdLjn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLjs_info" {
     sat_sdLjs_info:
         const sat_sdLjs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.bitraverse__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdMMt: // global
           _sdLjp::P64 = R5;
           _sdLjo::P64 = R4;
           _sdLjn::P64 = R3;
           _sdLjm::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMMu; else goto cdMMv;
       cdMMv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMMx; else goto cdMMw;
       cdMMx: // global
           HpAlloc = 72;
           goto cdMMu;
       cdMMu: // global
           R5 = _sdLjp::P64;
           R4 = _sdLjo::P64;
           R3 = _sdLjn::P64;
           R2 = _sdLjm::P64;
           R1 = Data.Bifoldable.bitraverse__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMMw: // global
           I64[Hp - 64] = sat_sdLjw_info;
           P64[Hp - 48] = _sdLjn::P64;
           I64[Hp - 40] = sat_sdLjv_info;
           P64[Hp - 32] = _sdLjn::P64;
           P64[Hp - 24] = _sdLjp::P64;
           I64[Hp - 16] = sat_sdLjs_info;
           P64[Hp - 8] = _sdLjn::P64;
           P64[Hp] = _sdLjo::P64;
           R2 = _sdLjm::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bitraverse__info" {
     Data.Bifoldable.bitraverse__info:
         const Data.Bifoldable.bitraverse__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.482105822 UTC

[section ""data" . Data.Bifoldable.bifor__closure" {
     Data.Bifoldable.bifor__closure:
         const Data.Bifoldable.bifor__info;
 },
 Data.Bifoldable.bifor__entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMMY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMMZ; else goto cdMN0;
       cdMMZ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bifor__closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMN0: // global
           _sdLjA::P64 = R5;
           R5 = R6;
           _sdLjz::P64 = R4;
           R4 = _sdLjA::P64;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sdLjz::P64;
           Sp = Sp - 16;
           call Data.Bifoldable.bitraverse__entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifor__info" {
     Data.Bifoldable.bifor__info:
         const Data.Bifoldable.bifor__entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.486323889 UTC

[section ""data" . Data.Bifoldable.biforM__closure" {
     Data.Bifoldable.biforM__closure:
         const Data.Bifoldable.biforM__info;
 },
 Data.Bifoldable.biforM__entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdMNa: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bifor__entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biforM__info" {
     Data.Bifoldable.biforM__info:
         const Data.Bifoldable.biforM__entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.490187547 UTC

[section ""data" . Data.Bifoldable.bimapM__closure" {
     Data.Bifoldable.bimapM__closure:
         const Data.Bifoldable.bimapM__info;
 },
 Data.Bifoldable.bimapM__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdMNl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bitraverse__entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimapM__info" {
     Data.Bifoldable.bimapM__info:
         const Data.Bifoldable.bimapM__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.496502201 UTC

[section ""data" . Data.Bifoldable.bisequence__closure" {
     Data.Bifoldable.bisequence__closure:
         const Data.Bifoldable.bisequence__info;
 },
 sat_sdLjG_entry() //  [R1]
         { []
         }
     {offset
       cdMNA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMNB; else goto cdMNC;
       cdMNB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMNC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjG_info" {
     sat_sdLjG_info:
         const sat_sdLjG_entry;
         const 1;
         const 16;
 },
 sat_sdLjF_entry() //  [R1]
         { []
         }
     {offset
       cdMNH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMNI; else goto cdMNJ;
       cdMNI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMNJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjF_info" {
     sat_sdLjF_info:
         const sat_sdLjF_entry;
         const 1;
         const 16;
 },
 sat_sdLjE_entry() //  [R1]
         { []
         }
     {offset
       cdMNO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMNP; else goto cdMNQ;
       cdMNP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMNQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjE_info" {
     sat_sdLjE_info:
         const sat_sdLjE_entry;
         const 1;
         const 16;
 },
 Data.Bifoldable.bisequence__entry() //  [R2, R3]
         { []
         }
     {offset
       cdMNR: // global
           _sdLjD::P64 = R3;
           _sdLjC::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMNS; else goto cdMNT;
       cdMNT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMNV; else goto cdMNU;
       cdMNV: // global
           HpAlloc = 72;
           goto cdMNS;
       cdMNS: // global
           R3 = _sdLjD::P64;
           R2 = _sdLjC::P64;
           R1 = Data.Bifoldable.bisequence__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMNU: // global
           I64[Hp - 64] = sat_sdLjG_info;
           P64[Hp - 48] = _sdLjD::P64;
           I64[Hp - 40] = sat_sdLjF_info;
           P64[Hp - 24] = _sdLjD::P64;
           I64[Hp - 16] = sat_sdLjE_info;
           P64[Hp] = _sdLjD::P64;
           R2 = _sdLjC::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 40;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisequence__info" {
     Data.Bifoldable.bisequence__info:
         const Data.Bifoldable.bisequence__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.505919811 UTC

[section ""data" . Data.Bifoldable.bisequenceA__closure" {
     Data.Bifoldable.bisequenceA__closure:
         const Data.Bifoldable.bisequenceA__info;
 },
 Data.Bifoldable.bisequenceA__entry() //  [R2, R3]
         { []
         }
     {offset
       cdMOk: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bisequence__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisequenceA__info" {
     Data.Bifoldable.bisequenceA__info:
         const Data.Bifoldable.bisequenceA__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.511460345 UTC

[section ""data" . Data.Bifoldable.biasum_closure" {
     Data.Bifoldable.biasum_closure:
         const Data.Bifoldable.biasum_info;
 },
 sat_sdLjL_entry() //  [R1]
         { []
         }
     {offset
       cdMOz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMOA; else goto cdMOB;
       cdMOA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMOB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjL_info" {
     sat_sdLjL_info:
         const sat_sdLjL_entry;
         const 1;
         const 16;
 },
 sat_sdLjK_entry() //  [R1]
         { []
         }
     {offset
       cdMOG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMOH; else goto cdMOI;
       cdMOH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMOI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjK_info" {
     sat_sdLjK_info:
         const sat_sdLjK_entry;
         const 1;
         const 16;
 },
 sat_sdLjJ_entry() //  [R1]
         { []
         }
     {offset
       cdMON: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMOO; else goto cdMOP;
       cdMOO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMOP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjJ_info" {
     sat_sdLjJ_info:
         const sat_sdLjJ_entry;
         const 1;
         const 16;
 },
 Data.Bifoldable.biasum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMOQ: // global
           _sdLjI::P64 = R3;
           _sdLjH::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMOR; else goto cdMOS;
       cdMOS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdMOU; else goto cdMOT;
       cdMOU: // global
           HpAlloc = 72;
           goto cdMOR;
       cdMOR: // global
           R3 = _sdLjI::P64;
           R2 = _sdLjH::P64;
           R1 = Data.Bifoldable.biasum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMOT: // global
           I64[Hp - 64] = sat_sdLjL_info;
           P64[Hp - 48] = _sdLjI::P64;
           I64[Hp - 40] = sat_sdLjK_info;
           P64[Hp - 24] = _sdLjI::P64;
           I64[Hp - 16] = sat_sdLjJ_info;
           P64[Hp] = _sdLjI::P64;
           R2 = _sdLjH::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 40;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biasum_info" {
     Data.Bifoldable.biasum_info:
         const Data.Bifoldable.biasum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.521076957 UTC

[section ""data" . Data.Bifoldable.bimsum_closure" {
     Data.Bifoldable.bimsum_closure:
         const Data.Bifoldable.bimsum_info;
 },
 Data.Bifoldable.bimsum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMPj: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biasum_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimsum_info" {
     Data.Bifoldable.bimsum_info:
         const Data.Bifoldable.bimsum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.525029014 UTC

[section ""data" . Data.Bifoldable.biList_closure" {
     Data.Bifoldable.biList_closure:
         const Data.Bifoldable.biList_info;
 },
 Data.Bifoldable.biList_entry() //  [R2]
         { []
         }
     {offset
       cdMPu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMPv; else goto cdMPw;
       cdMPv: // global
           R2 = R2;
           R1 = Data.Bifoldable.biList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMPw: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.:_closure+2;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biList_info" {
     Data.Bifoldable.biList_info:
         const Data.Bifoldable.biList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.529340465 UTC

[section ""data" . Data.Bifoldable.binull1_closure" {
     Data.Bifoldable.binull1_closure:
         const Data.Bifoldable.binull1_info;
 },
 Data.Bifoldable.binull1_entry() //  []
         { []
         }
     {offset
       cdMPG: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binull1_info" {
     Data.Bifoldable.binull1_info:
         const Data.Bifoldable.binull1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.53425939 UTC

[section ""data" . Data.Bifoldable.binull_closure" {
     Data.Bifoldable.binull_closure:
         const Data.Bifoldable.binull_info;
 },
 Data.Bifoldable.binull_entry() //  [R2]
         { []
         }
     {offset
       cdMPS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMPT; else goto cdMPU;
       cdMPT: // global
           R2 = R2;
           R1 = Data.Bifoldable.binull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMPU: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Bifoldable.binull1_closure+2;
           P64[Sp - 16] = Data.Bifoldable.binull1_closure+2;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binull_info" {
     Data.Bifoldable.binull_info:
         const Data.Bifoldable.binull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.540104897 UTC

[section ""data" . Data.Bifoldable.biconcat_closure" {
     Data.Bifoldable.biconcat_closure:
         const Data.Bifoldable.biconcat_info;
         const 0;
 },
 Data.Bifoldable.biconcat_entry() //  [R2]
         { []
         }
     {offset
       cdMQ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMQ5; else goto cdMQ6;
       cdMQ5: // global
           R2 = R2;
           R1 = Data.Bifoldable.biconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMQ6: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Base.$fMonoid[]_closure;
           Sp = Sp - 16;
           call Data.Bifoldable.bifold_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biconcat_info" {
     Data.Bifoldable.biconcat_info:
         const Data.Bifoldable.biconcat_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdLpk_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.5454669 UTC

[section ""data" . lvl16_rdL8I_closure" {
     lvl16_rdL8I_closure:
         const GHC.Types.I#_con_info;
         const 334;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.54807437 UTC

[section ""data" . lvl17_rdL8J_closure" {
     lvl17_rdL8J_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.550761188 UTC

[section ""data" . lvl18_rdL8K_closure" {
     lvl18_rdL8K_closure:
         const GHC.Types.I#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.553688654 UTC

[section ""data" . lvl19_rdL8L_closure" {
     lvl19_rdL8L_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl16_rdL8I_closure+1;
         const lvl17_rdL8J_closure+1;
         const lvl16_rdL8I_closure+1;
         const lvl18_rdL8K_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.55670636 UTC

[section ""data" . lvl20_rdL8M_closure" {
     lvl20_rdL8M_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl19_rdL8L_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.55958779 UTC

[section ""cstring" . lvl21_rdL8N_bytes" {
     lvl21_rdL8N_bytes:
         I8[] [98,105,109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.564004408 UTC

[section ""data" . Data.Bifoldable.bimaximum1_closure" {
     Data.Bifoldable.bimaximum1_closure:
         const Data.Bifoldable.bimaximum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bimaximum1_entry() //  [R1]
         { []
         }
     {offset
       cdMQq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMQr; else goto cdMQs;
       cdMQr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMQs: // global
           (_cdMQl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMQl::I64 == 0) goto cdMQn; else goto cdMQm;
       cdMQn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMQm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMQl::I64;
           I64[Sp - 24] = block_cdMQo_info;
           R2 = lvl21_rdL8N_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximum1_info" {
     Data.Bifoldable.bimaximum1_info:
         const Data.Bifoldable.bimaximum1_entry;
         const 0;
         const 8800387989525;
         const SdLpk_srt+32;
 },
 _cdMQo() //  [R1]
         { []
         }
     {offset
       cdMQo: // global
           R3 = R1;
           R2 = lvl20_rdL8M_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMQo_info" {
     block_cdMQo_info:
         const _cdMQo;
         const 0;
         const 8800387989534;
         const SdLpk_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.571984999 UTC

[section ""data" . Data.Bifoldable.bimaximum_closure" {
     Data.Bifoldable.bimaximum_closure:
         const Data.Bifoldable.bimaximum_info;
         const 0;
 },
 sat_sdLjV_entry() //  [R1]
         { []
         }
     {offset
       cdMQS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMQT; else goto cdMQU;
       cdMQT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMQU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLjV_info" {
     sat_sdLjV_info:
         const sat_sdLjV_entry;
         const 1;
         const 4294967312;
         const SdLpk_srt+128;
 },
 g_sdLjU_entry() //  [R1]
         { []
         }
     {offset
       cdMQV: // global
           _sdLjU::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMQW; else goto cdMQX;
       cdMQX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMQZ; else goto cdMQY;
       cdMQZ: // global
           HpAlloc = 24;
           goto cdMQW;
       cdMQW: // global
           R1 = _sdLjU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMQY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLjU::P64;
           _sdLjS::P64 = P64[_sdLjU::P64 + 16];
           _sdLjT::P64 = P64[_sdLjU::P64 + 24];
           I64[Hp - 16] = sat_sdLjV_info;
           P64[Hp] = _sdLjT::P64;
           R2 = _sdLjS::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = GHC.Base.Just_closure+1;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdLjU_info" {
     g_sdLjU_info:
         const g_sdLjU_entry;
         const 2;
         const 4294967314;
         const SdLpk_srt+128;
 },
 sat_sdLjZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMRb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMRc; else goto cdMRd;
       cdMRc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMRd: // global
           I64[Sp - 8] = block_cdMR5_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLjZ_info" {
     sat_sdLjZ_info:
         const sat_sdLjZ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdLpk_srt+136;
 },
 _cdMR5() //  [R1]
         { []
         }
     {offset
       cdMR5: // global
           if (R1 & 7 == 1) goto cdMR8; else goto cdMR9;
       cdMR8: // global
           R1 = Data.Bifoldable.bimaximum1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMR9: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMR5_info" {
     block_cdMR5_info:
         const _cdMR5;
         const 0;
         const 4294967326;
         const SdLpk_srt+136;
 },
 Data.Bifoldable.bimaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMRk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMRo; else goto cdMRn;
       cdMRo: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bimaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMRn: // global
           I64[Hp - 40] = g_sdLjU_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdLjZ_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximum_info" {
     Data.Bifoldable.bimaximum_info:
         const Data.Bifoldable.bimaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SdLpk_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.582978208 UTC

[section ""data" . lvl22_rdL8O_closure" {
     lvl22_rdL8O_closure:
         const GHC.Types.I#_con_info;
         const 342;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.584654002 UTC

[section ""data" . lvl23_rdL8P_closure" {
     lvl23_rdL8P_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl22_rdL8O_closure+1;
         const lvl17_rdL8J_closure+1;
         const lvl22_rdL8O_closure+1;
         const lvl18_rdL8K_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.586411961 UTC

[section ""data" . lvl24_rdL8Q_closure" {
     lvl24_rdL8Q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl23_rdL8P_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.588143403 UTC

[section ""cstring" . lvl25_rdL8R_bytes" {
     lvl25_rdL8R_bytes:
         I8[] [98,105,109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.590871841 UTC

[section ""data" . Data.Bifoldable.biminimum1_closure" {
     Data.Bifoldable.biminimum1_closure:
         const Data.Bifoldable.biminimum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.biminimum1_entry() //  [R1]
         { []
         }
     {offset
       cdMRZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMS0; else goto cdMS1;
       cdMS0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMS1: // global
           (_cdMRU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdMRU::I64 == 0) goto cdMRW; else goto cdMRV;
       cdMRW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdMRV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdMRU::I64;
           I64[Sp - 24] = block_cdMRX_info;
           R2 = lvl25_rdL8R_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimum1_info" {
     Data.Bifoldable.biminimum1_info:
         const Data.Bifoldable.biminimum1_entry;
         const 0;
         const 140741783322645;
         const SdLpk_srt+32;
 },
 _cdMRX() //  [R1]
         { []
         }
     {offset
       cdMRX: // global
           R3 = R1;
           R2 = lvl24_rdL8Q_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdMRX_info" {
     block_cdMRX_info:
         const _cdMRX;
         const 0;
         const 140741783322654;
         const SdLpk_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.598369825 UTC

[section ""data" . Data.Bifoldable.biminimum_closure" {
     Data.Bifoldable.biminimum_closure:
         const Data.Bifoldable.biminimum_info;
         const 0;
 },
 sat_sdLk4_entry() //  [R1]
         { []
         }
     {offset
       cdMSr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMSs; else goto cdMSt;
       cdMSs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMSt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLk4_info" {
     sat_sdLk4_info:
         const sat_sdLk4_entry;
         const 1;
         const 4294967312;
         const SdLpk_srt+160;
 },
 g_sdLk3_entry() //  [R1]
         { []
         }
     {offset
       cdMSu: // global
           _sdLk3::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMSv; else goto cdMSw;
       cdMSw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMSy; else goto cdMSx;
       cdMSy: // global
           HpAlloc = 24;
           goto cdMSv;
       cdMSv: // global
           R1 = _sdLk3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMSx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLk3::P64;
           _sdLk1::P64 = P64[_sdLk3::P64 + 16];
           _sdLk2::P64 = P64[_sdLk3::P64 + 24];
           I64[Hp - 16] = sat_sdLk4_info;
           P64[Hp] = _sdLk2::P64;
           R2 = _sdLk1::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = GHC.Base.Just_closure+1;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdLk3_info" {
     g_sdLk3_info:
         const g_sdLk3_entry;
         const 2;
         const 4294967314;
         const SdLpk_srt+160;
 },
 sat_sdLk8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMSK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMSL; else goto cdMSM;
       cdMSL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMSM: // global
           I64[Sp - 8] = block_cdMSE_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLk8_info" {
     sat_sdLk8_info:
         const sat_sdLk8_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdLpk_srt+168;
 },
 _cdMSE() //  [R1]
         { []
         }
     {offset
       cdMSE: // global
           if (R1 & 7 == 1) goto cdMSH; else goto cdMSI;
       cdMSH: // global
           R1 = Data.Bifoldable.biminimum1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdMSI: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMSE_info" {
     block_cdMSE_info:
         const _cdMSE;
         const 0;
         const 4294967326;
         const SdLpk_srt+168;
 },
 Data.Bifoldable.biminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMST: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMSX; else goto cdMSW;
       cdMSX: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.biminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMSW: // global
           I64[Hp - 40] = g_sdLk3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdLk8_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimum_info" {
     Data.Bifoldable.biminimum_info:
         const Data.Bifoldable.biminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SdLpk_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.609328227 UTC

[section ""data" . Data.Bifoldable.biproduct2_closure" {
     Data.Bifoldable.biproduct2_closure:
         const Data.Bifoldable.biproduct2_info;
 },
 Data.Bifoldable.biproduct2_entry() //  [R2]
         { []
         }
     {offset
       cdMTq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct2_info" {
     Data.Bifoldable.biproduct2_info:
         const Data.Bifoldable.biproduct2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.613749534 UTC

[section ""data" . Data.Bifoldable.bisum1_closure" {
     Data.Bifoldable.bisum1_closure:
         const Data.Bifoldable.bisum1_info;
         const 0;
 },
 sat_sdLkc_entry() //  [R1]
         { []
         }
     {offset
       cdMTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMTG; else goto cdMTH;
       cdMTG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMTH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLkc_info" {
     sat_sdLkc_info:
         const sat_sdLkc_entry;
         const 1;
         const 4294967312;
         const SdLpk_srt+184;
 },
 Data.Bifoldable.bisum1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMTI: // global
           _sdLkb::P64 = R3;
           _sdLka::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMTJ; else goto cdMTK;
       cdMTK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMTM; else goto cdMTL;
       cdMTM: // global
           HpAlloc = 24;
           goto cdMTJ;
       cdMTJ: // global
           R3 = _sdLkb::P64;
           R2 = _sdLka::P64;
           R1 = Data.Bifoldable.bisum1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMTL: // global
           I64[Hp - 16] = sat_sdLkc_info;
           P64[Hp] = _sdLkb::P64;
           R2 = _sdLka::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Data.Bifoldable.biproduct2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biproduct2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisum1_info" {
     Data.Bifoldable.bisum1_info:
         const Data.Bifoldable.bisum1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdLpk_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.621017357 UTC

[section ""data" . Data.Bifoldable.bisum_closure" {
     Data.Bifoldable.bisum_closure:
         const Data.Bifoldable.bisum_info;
         const 0;
 },
 Data.Bifoldable.bisum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMU1: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bisum1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisum_info" {
     Data.Bifoldable.bisum_info:
         const Data.Bifoldable.bisum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdLpk_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.625484736 UTC

[section ""data" . Data.Bifoldable.biproduct1_closure" {
     Data.Bifoldable.biproduct1_closure:
         const Data.Bifoldable.biproduct1_info;
         const 0;
 },
 sat_sdLkf_entry() //  [R1]
         { []
         }
     {offset
       cdMUg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMUh; else goto cdMUi;
       cdMUh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMUi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdLkf_info" {
     sat_sdLkf_info:
         const sat_sdLkf_entry;
         const 1;
         const 4294967312;
         const SdLpk_srt+200;
 },
 Data.Bifoldable.biproduct1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMUj: // global
           _sdLke::P64 = R3;
           _sdLkd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMUk; else goto cdMUl;
       cdMUl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdMUn; else goto cdMUm;
       cdMUn: // global
           HpAlloc = 24;
           goto cdMUk;
       cdMUk: // global
           R3 = _sdLke::P64;
           R2 = _sdLkd::P64;
           R1 = Data.Bifoldable.biproduct1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMUm: // global
           I64[Hp - 16] = sat_sdLkf_info;
           P64[Hp] = _sdLke::P64;
           R2 = _sdLkd::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Data.Bifoldable.biproduct2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biproduct2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct1_info" {
     Data.Bifoldable.biproduct1_info:
         const Data.Bifoldable.biproduct1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdLpk_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.631304633 UTC

[section ""data" . Data.Bifoldable.biproduct_closure" {
     Data.Bifoldable.biproduct_closure:
         const Data.Bifoldable.biproduct_info;
         const 0;
 },
 Data.Bifoldable.biproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMUC: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biproduct1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct_info" {
     Data.Bifoldable.biproduct_info:
         const Data.Bifoldable.biproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdLpk_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.636462428 UTC

[section ""data" . Data.Bifoldable.biconcatMap_closure" {
     Data.Bifoldable.biconcatMap_closure:
         const Data.Bifoldable.biconcatMap_info;
         const 0;
 },
 Data.Bifoldable.biconcatMap_entry() //  [R2]
         { []
         }
     {offset
       cdMUN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMUO; else goto cdMUP;
       cdMUO: // global
           R2 = R2;
           R1 = Data.Bifoldable.biconcatMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMUP: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Base.$fMonoid[]_closure;
           Sp = Sp - 16;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biconcatMap_info" {
     Data.Bifoldable.biconcatMap_info:
         const Data.Bifoldable.biconcatMap_entry;
         const 0;
         const 70373039144974;
         const 4294967301;
         const SdLpk_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.64108023 UTC

[section ""data" . Data.Bifoldable.biand2_closure" {
     Data.Bifoldable.biand2_closure:
         const Data.Bifoldable.biand2_info;
 },
 Data.Bifoldable.biand2_entry() //  [R2]
         { []
         }
     {offset
       cdMUZ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand2_info" {
     Data.Bifoldable.biand2_info:
         const Data.Bifoldable.biand2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.644670215 UTC

[section ""data" . Data.Bifoldable.biand1_closure" {
     Data.Bifoldable.biand1_closure:
         const Data.Bifoldable.biand1_info;
         const 0;
 },
 Data.Bifoldable.biand1_entry() //  [R2]
         { []
         }
     {offset
       cdMVc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMVd; else goto cdMVe;
       cdMVd: // global
           R2 = R2;
           R1 = Data.Bifoldable.biand1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMVe: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Data.Bifoldable.biand2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biand2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand1_info" {
     Data.Bifoldable.biand1_info:
         const Data.Bifoldable.biand1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdLpk_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.648674722 UTC

[section ""data" . Data.Bifoldable.biand_closure" {
     Data.Bifoldable.biand_closure:
         const Data.Bifoldable.biand_info;
         const 0;
 },
 Data.Bifoldable.biand_entry() //  [R2]
         { []
         }
     {offset
       cdMVo: // global
           R2 = R2;
           call Data.Bifoldable.biand1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand_info" {
     Data.Bifoldable.biand_info:
         const Data.Bifoldable.biand_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdLpk_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.652921624 UTC

[section ""data" . Data.Bifoldable.bior1_closure" {
     Data.Bifoldable.bior1_closure:
         const Data.Bifoldable.bior1_info;
         const 0;
 },
 Data.Bifoldable.bior1_entry() //  [R2]
         { []
         }
     {offset
       cdMVz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdMVA; else goto cdMVB;
       cdMVA: // global
           R2 = R2;
           R1 = Data.Bifoldable.bior1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMVB: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Data.Bifoldable.biand2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biand2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bior1_info" {
     Data.Bifoldable.bior1_info:
         const Data.Bifoldable.bior1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdLpk_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.656537834 UTC

[section ""data" . Data.Bifoldable.bior_closure" {
     Data.Bifoldable.bior_closure:
         const Data.Bifoldable.bior_info;
         const 0;
 },
 Data.Bifoldable.bior_entry() //  [R2]
         { []
         }
     {offset
       cdMVL: // global
           R2 = R2;
           call Data.Bifoldable.bior1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bior_info" {
     Data.Bifoldable.bior_info:
         const Data.Bifoldable.bior_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdLpk_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.660992158 UTC

[section ""data" . Data.Bifoldable.biany1_closure" {
     Data.Bifoldable.biany1_closure:
         const Data.Bifoldable.biany1_info;
         const 0;
 },
 sat_sdLkq_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMW1: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkq_info" {
     sat_sdLkq_info:
         const sat_sdLkq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdLko_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMW9: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLko_info" {
     sat_sdLko_info:
         const sat_sdLko_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.biany1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMWc: // global
           _sdLkm::P64 = R4;
           _sdLkl::P64 = R3;
           _sdLkk::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMWd; else goto cdMWe;
       cdMWe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMWg; else goto cdMWf;
       cdMWg: // global
           HpAlloc = 32;
           goto cdMWd;
       cdMWd: // global
           R4 = _sdLkm::P64;
           R3 = _sdLkl::P64;
           R2 = _sdLkk::P64;
           R1 = Data.Bifoldable.biany1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMWf: // global
           I64[Hp - 24] = sat_sdLkq_info;
           P64[Hp - 16] = _sdLkm::P64;
           I64[Hp - 8] = sat_sdLko_info;
           P64[Hp] = _sdLkl::P64;
           R2 = _sdLkk::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biany1_info" {
     Data.Bifoldable.biany1_info:
         const Data.Bifoldable.biany1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdLpk_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.667756504 UTC

[section ""data" . Data.Bifoldable.biany_closure" {
     Data.Bifoldable.biany_closure:
         const Data.Bifoldable.biany_info;
         const 0;
 },
 Data.Bifoldable.biany_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMWy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biany1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biany_info" {
     Data.Bifoldable.biany_info:
         const Data.Bifoldable.biany_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdLpk_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.672883608 UTC

[section ""data" . Data.Bifoldable.bielem1_closure" {
     Data.Bifoldable.bielem1_closure:
         const Data.Bifoldable.bielem1_info;
         const 0;
 },
 sat_sdLkx_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMWO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMWP; else goto cdMWQ;
       cdMWP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMWQ: // global
           _sdLkw::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sdLkw::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkx_info" {
     sat_sdLkx_info:
         const sat_sdLkx_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdLkv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMWW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdMWX; else goto cdMWY;
       cdMWX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMWY: // global
           _sdLku::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sdLku::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkv_info" {
     sat_sdLkv_info:
         const sat_sdLkv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.bielem1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMWZ: // global
           _sdLkt::P64 = R4;
           _sdLks::P64 = R3;
           _sdLkr::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMX0; else goto cdMX1;
       cdMX1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdMX3; else goto cdMX2;
       cdMX3: // global
           HpAlloc = 48;
           goto cdMX0;
       cdMX0: // global
           R4 = _sdLkt::P64;
           R3 = _sdLks::P64;
           R2 = _sdLkr::P64;
           R1 = Data.Bifoldable.bielem1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMX2: // global
           I64[Hp - 40] = sat_sdLkx_info;
           P64[Hp - 32] = _sdLks::P64;
           P64[Hp - 24] = _sdLkt::P64;
           I64[Hp - 16] = sat_sdLkv_info;
           P64[Hp - 8] = _sdLks::P64;
           P64[Hp] = _sdLkt::P64;
           R2 = _sdLkr::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bielem1_info" {
     Data.Bifoldable.bielem1_info:
         const Data.Bifoldable.bielem1_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SdLpk_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.680723469 UTC

[section ""data" . Data.Bifoldable.bielem_closure" {
     Data.Bifoldable.bielem_closure:
         const Data.Bifoldable.bielem_info;
         const 0;
 },
 Data.Bifoldable.bielem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMXp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bielem1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bielem_info" {
     Data.Bifoldable.bielem_info:
         const Data.Bifoldable.bielem_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdLpk_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.686114105 UTC

[section ""data" . Data.Bifoldable.binotElem_closure" {
     Data.Bifoldable.binotElem_closure:
         const Data.Bifoldable.binotElem_info;
         const 0;
 },
 g_sdLkB_entry() //  [R1]
         { []
         }
     {offset
       cdMXE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMXF; else goto cdMXG;
       cdMXF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMXG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bifoldable.bielem1_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdLkB_info" {
     g_sdLkB_info:
         const g_sdLkB_entry;
         const 3;
         const 4294967311;
         const SdLpk_srt+264;
 },
 sat_sdLkE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMXS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdMXT; else goto cdMXU;
       cdMXT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMXU: // global
           I64[Sp - 8] = block_cdMXM_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkE_info" {
     sat_sdLkE_info:
         const sat_sdLkE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdMXM() //  [R1]
         { []
         }
     {offset
       cdMXM: // global
           if (R1 & 7 == 1) goto cdMXP; else goto cdMXQ;
       cdMXP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdMXQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMXM_info" {
     block_cdMXM_info:
         const _cdMXM;
         const 0;
         const 30;
 },
 Data.Bifoldable.binotElem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMY1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdMY5; else goto cdMY4;
       cdMY5: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.binotElem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMY4: // global
           I64[Hp - 48] = g_sdLkB_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdLkE_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binotElem_info" {
     Data.Bifoldable.binotElem_info:
         const Data.Bifoldable.binotElem_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdLpk_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.696437919 UTC

[section ""data" . Data.Bifoldable.biall1_closure" {
     Data.Bifoldable.biall1_closure:
         const Data.Bifoldable.biall1_info;
         const 0;
 },
 sat_sdLkL_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMYA: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkL_info" {
     sat_sdLkL_info:
         const sat_sdLkL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdLkJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMYI: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkJ_info" {
     sat_sdLkJ_info:
         const sat_sdLkJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.biall1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMYL: // global
           _sdLkH::P64 = R4;
           _sdLkG::P64 = R3;
           _sdLkF::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdMYM; else goto cdMYN;
       cdMYN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdMYP; else goto cdMYO;
       cdMYP: // global
           HpAlloc = 32;
           goto cdMYM;
       cdMYM: // global
           R4 = _sdLkH::P64;
           R3 = _sdLkG::P64;
           R2 = _sdLkF::P64;
           R1 = Data.Bifoldable.biall1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMYO: // global
           I64[Hp - 24] = sat_sdLkL_info;
           P64[Hp - 16] = _sdLkH::P64;
           I64[Hp - 8] = sat_sdLkJ_info;
           P64[Hp] = _sdLkG::P64;
           R2 = _sdLkF::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biall1_info" {
     Data.Bifoldable.biall1_info:
         const Data.Bifoldable.biall1_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SdLpk_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.703465119 UTC

[section ""data" . Data.Bifoldable.biall_closure" {
     Data.Bifoldable.biall_closure:
         const Data.Bifoldable.biall_info;
         const 0;
 },
 Data.Bifoldable.biall_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdMZ7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biall1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biall_info" {
     Data.Bifoldable.biall_info:
         const Data.Bifoldable.biall_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdLpk_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.708948854 UTC

[section ""data" . Data.Bifoldable.bifind_closure" {
     Data.Bifoldable.bifind_closure:
         const Data.Bifoldable.bifind_info;
         const 0;
 },
 finder_sdLkP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMZx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdMZy; else goto cdMZz;
       cdMZy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdMZz: // global
           I64[Sp - 16] = block_cdMZr_info;
           _sdLkQ::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdLkQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . finder_sdLkP_info" {
     finder_sdLkP_info:
         const finder_sdLkP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdMZr() //  [R1]
         { []
         }
     {offset
       cdMZr: // global
           if (R1 & 7 == 1) goto cdMZu; else goto cdMZv;
       cdMZu: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdMZv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMZI; else goto cdMZH;
       cdMZI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdMZH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdMZr_info" {
     block_cdMZr_info:
         const _cdMZr;
         const 1;
         const 30;
 },
 g_sdLkO_entry() //  [R1]
         { []
         }
     {offset
       cdMZJ: // global
           _sdLkO::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdMZK; else goto cdMZL;
       cdMZL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdMZN; else goto cdMZM;
       cdMZN: // global
           HpAlloc = 16;
           goto cdMZK;
       cdMZK: // global
           R1 = _sdLkO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdMZM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdLkO::P64;
           _sdLkM::P64 = P64[_sdLkO::P64 + 16];
           _sdLkN::P64 = P64[_sdLkO::P64 + 24];
           I64[Hp - 8] = finder_sdLkP_info;
           P64[Hp] = _sdLkN::P64;
           R2 = _sdLkM::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Monoid.$fMonoidFirst_closure;
           _cdMZm::P64 = Hp - 7;
           P64[Sp - 32] = _cdMZm::P64;
           P64[Sp - 24] = _cdMZm::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdLkO_info" {
     g_sdLkO_info:
         const g_sdLkO_entry;
         const 2;
         const 4294967314;
         const SdLpk_srt+288;
 },
 sat_sdLkT_entry() //  [R1, R2]
         { []
         }
     {offset
       cdMZT: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdLkT_info" {
     sat_sdLkT_info:
         const sat_sdLkT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.bifind_entry() //  [R2, R3]
         { []
         }
     {offset
       cdMZW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdN00; else goto cdMZZ;
       cdN00: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bifind_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdMZZ: // global
           I64[Hp - 40] = g_sdLkO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdLkT_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifind_info" {
     Data.Bifoldable.bifind_info:
         const Data.Bifoldable.bifind_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdLpk_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.71948458 UTC

[section ""data" . Data.Bifoldable.$trModule3_closure" {
     Data.Bifoldable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.721269383 UTC

[section ""data" . Data.Bifoldable.$trModule1_closure" {
     Data.Bifoldable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.723179981 UTC

[section ""data" . Data.Bifoldable.$trModule_closure" {
     Data.Bifoldable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bifoldable.$trModule3_closure+1;
         const Data.Bifoldable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.726129392 UTC

[section ""data" . $krep_rdL8S_closure" {
     $krep_rdL8S_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.72787856 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable1_closure" {
     Data.Bifoldable.$tcBifoldable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdL8S_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.72953474 UTC

[section ""cstring" . Data.Bifoldable.$tcBifoldable3_bytes" {
     Data.Bifoldable.$tcBifoldable3_bytes:
         I8[] [66,105,102,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.731215828 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable2_closure" {
     Data.Bifoldable.$tcBifoldable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$tcBifoldable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.732980856 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable_closure" {
     Data.Bifoldable.$tcBifoldable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bifoldable.$trModule_closure+1;
         const Data.Bifoldable.$tcBifoldable2_closure+1;
         const Data.Bifoldable.$tcBifoldable1_closure+4;
         const 13881323671910883383;
         const 7079945659398195047;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.735517257 UTC

[section ""data" . Data.Bifoldable.C:Bifoldable_closure" {
     Data.Bifoldable.C:Bifoldable_closure:
         const Data.Bifoldable.C:Bifoldable_info;
 },
 Data.Bifoldable.C:Bifoldable_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdN0D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdN0H; else goto cdN0G;
       cdN0H: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.C:Bifoldable_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdN0G: // global
           I64[Hp - 32] = Data.Bifoldable.C:Bifoldable_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.C:Bifoldable_info" {
     Data.Bifoldable.C:Bifoldable_info:
         const Data.Bifoldable.C:Bifoldable_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.739545622 UTC

[section ""cstring" . idMh1_str" {
     idMh1_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,102,111,108,100,97,98,108,101,46,67,58,66,105,102,111,108,100,97,98,108,101]
 },
 Data.Bifoldable.C:Bifoldable_con_entry() //  [R1]
         { []
         }
     {offset
       cdN0N: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.C:Bifoldable_con_info" {
     Data.Bifoldable.C:Bifoldable_con_info:
         const Data.Bifoldable.C:Bifoldable_con_entry;
         const 4;
         const 1;
         const idMh1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:59.742969765 UTC

[section ""relreadonly" . SdLpk_srt" {
     SdLpk_srt:
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Bifoldable.$dmbifoldl_closure;
         const poly_$dMonoid_rdL8r_closure;
         const Data.Bifoldable.$dmbifoldr_closure;
         const GHC.Err.error_closure;
         const lvl10_rdL8C_closure;
         const Data.Bifoldable.bifoldr1_closure;
         const Data.Bifoldable.bifoldr2_closure;
         const Data.Bifoldable.bimaximumBy_closure;
         const Data.Bifoldable.biminimumBy_closure;
         const lvl14_rdL8G_closure;
         const Data.Bifoldable.bifoldl1_closure;
         const Data.Bifoldable.bifoldl2_closure;
         const GHC.Base.$fMonoid[]_closure;
         const Data.Bifoldable.biconcat_closure;
         const lvl20_rdL8M_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Bifoldable.bimaximum1_closure;
         const Data.Bifoldable.bimaximum_closure;
         const lvl24_rdL8Q_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Bifoldable.biminimum1_closure;
         const Data.Bifoldable.biminimum_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Bifoldable.bisum1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Bifoldable.biproduct1_closure;
         const Data.Bifoldable.biconcatMap_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Bifoldable.biand1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Bifoldable.bior1_closure;
         const Data.Bifoldable.biany1_closure;
         const Data.Bifoldable.bielem1_closure;
         const Data.Bifoldable.binotElem_closure;
         const Data.Bifoldable.biall1_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Bifoldable.bifind_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.261971179 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:02.264045769 UTC

[section ""data" . Data.Bifoldable.bifold_closure" {
     Data.Bifoldable.bifold_closure:
         const Data.Bifoldable.bifold_info;
 },
 Data.Bifoldable.bifold_entry() //  [R2]
         { []
         }
     {offset
       cdNd1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNd2; else goto cdNd3;
       cdNd2: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNd3: // global
           I64[Sp - 8] = block_cdNcY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udNd7; else goto cdNcZ;
       udNd7: // global
           call _cdNcY(R1) args: 0, res: 0, upd: 0;
       cdNcZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifold_info" {
     Data.Bifoldable.bifold_info:
         const Data.Bifoldable.bifold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdNcY() //  [R1]
         { []
         }
     {offset
       cdNcY: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNcY_info" {
     block_cdNcY_info:
         const _cdNcY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.270708239 UTC

[section ""data" . Data.Bifoldable.bifoldMap_closure" {
     Data.Bifoldable.bifoldMap_closure:
         const Data.Bifoldable.bifoldMap_info;
 },
 Data.Bifoldable.bifoldMap_entry() //  [R2]
         { []
         }
     {offset
       cdNdp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNdq; else goto cdNdr;
       cdNdq: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNdr: // global
           I64[Sp - 8] = block_cdNdm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udNdv; else goto cdNdn;
       udNdv: // global
           call _cdNdm(R1) args: 0, res: 0, upd: 0;
       cdNdn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldMap_info" {
     Data.Bifoldable.bifoldMap_info:
         const Data.Bifoldable.bifoldMap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdNdm() //  [R1]
         { []
         }
     {offset
       cdNdm: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNdm_info" {
     block_cdNdm_info:
         const _cdNdm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.277015839 UTC

[section ""data" . Data.Bifoldable.bifoldr_closure" {
     Data.Bifoldable.bifoldr_closure:
         const Data.Bifoldable.bifoldr_info;
 },
 Data.Bifoldable.bifoldr_entry() //  [R2]
         { []
         }
     {offset
       cdNdN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNdO; else goto cdNdP;
       cdNdO: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNdP: // global
           I64[Sp - 8] = block_cdNdK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udNdT; else goto cdNdL;
       udNdT: // global
           call _cdNdK(R1) args: 0, res: 0, upd: 0;
       cdNdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr_info" {
     Data.Bifoldable.bifoldr_info:
         const Data.Bifoldable.bifoldr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdNdK() //  [R1]
         { []
         }
     {offset
       cdNdK: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNdK_info" {
     block_cdNdK_info:
         const _cdNdK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.28531332 UTC

[section ""data" . Data.Bifoldable.bifoldl_closure" {
     Data.Bifoldable.bifoldl_closure:
         const Data.Bifoldable.bifoldl_info;
 },
 Data.Bifoldable.bifoldl_entry() //  [R2]
         { []
         }
     {offset
       cdNeb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNec; else goto cdNed;
       cdNec: // global
           R2 = R2;
           R1 = Data.Bifoldable.bifoldl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNed: // global
           I64[Sp - 8] = block_cdNe8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udNeh; else goto cdNe9;
       udNeh: // global
           call _cdNe8(R1) args: 0, res: 0, upd: 0;
       cdNe9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl_info" {
     Data.Bifoldable.bifoldl_info:
         const Data.Bifoldable.bifoldl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdNe8() //  [R1]
         { []
         }
     {offset
       cdNe8: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNe8_info" {
     block_cdNe8_info:
         const _cdNe8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.295521691 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info;
 },
 sat_sdN1v_entry() //  [R1]
         { []
         }
     {offset
       cdNeB: // global
           _sdN1v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNeC; else goto cdNeD;
       cdNeD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNeF; else goto cdNeE;
       cdNeF: // global
           HpAlloc = 24;
           goto cdNeC;
       cdNeC: // global
           R1 = _sdN1v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNeE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN1v::P64;
           _sdN1k::P64 = P64[_sdN1v::P64 + 16];
           _sdN1l::P64 = P64[_sdN1v::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdN1l::P64;
           R2 = Hp - 16;
           R1 = _sdN1k::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN1v_info" {
     sat_sdN1v_info:
         const sat_sdN1v_entry;
         const 2;
         const 18;
 },
 sat_sdN1q_entry() //  [R1]
         { []
         }
     {offset
       cdNeL: // global
           _sdN1q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNeM; else goto cdNeN;
       cdNeN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNeP; else goto cdNeO;
       cdNeP: // global
           HpAlloc = 24;
           goto cdNeM;
       cdNeM: // global
           R1 = _sdN1q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNeO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN1q::P64;
           _sdN1j::P64 = P64[_sdN1q::P64 + 16];
           _sdN1l::P64 = P64[_sdN1q::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdN1l::P64;
           R2 = Hp - 16;
           R1 = _sdN1j::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN1q_info" {
     sat_sdN1q_info:
         const sat_sdN1q_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdNeQ: // global
           _sdN1l::P64 = R5;
           _sdN1k::P64 = R4;
           _sdN1j::P64 = R3;
           _sdN1i::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNeR; else goto cdNeS;
       cdNeS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNeU; else goto cdNeT;
       cdNeU: // global
           HpAlloc = 64;
           goto cdNeR;
       cdNeR: // global
           R5 = _sdN1l::P64;
           R4 = _sdN1k::P64;
           R3 = _sdN1j::P64;
           R2 = _sdN1i::P64;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNeT: // global
           I64[Hp - 56] = sat_sdN1v_info;
           P64[Hp - 40] = _sdN1k::P64;
           P64[Hp - 32] = _sdN1l::P64;
           I64[Hp - 24] = sat_sdN1q_info;
           P64[Hp - 8] = _sdN1j::P64;
           P64[Hp] = _sdN1l::P64;
           R2 = _sdN1i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.303504454 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldMap_entry() //  [R3, R5]
         { []
         }
     {offset
       cdNfl: // global
           R2 = R5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.306982615 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldMap_entry() //  [R3, R5]
         { []
         }
     {offset
       cdNfw: // global
           R2 = R5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.311827319 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info;
 },
 sat_sdN1T_entry() //  [R1]
         { []
         }
     {offset
       cdNfM: // global
           _sdN1T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNfN; else goto cdNfO;
       cdNfO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNfQ; else goto cdNfP;
       cdNfQ: // global
           HpAlloc = 24;
           goto cdNfN;
       cdNfN: // global
           R1 = _sdN1T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNfP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN1T::P64;
           _sdN1G::P64 = P64[_sdN1T::P64 + 16];
           _sdN1H::P64 = P64[_sdN1T::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdN1H::P64;
           R2 = Hp - 16;
           R1 = _sdN1G::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN1T_info" {
     sat_sdN1T_info:
         const sat_sdN1T_entry;
         const 2;
         const 18;
 },
 sat_sdN1N_entry() //  [R1]
         { []
         }
     {offset
       cdNfW: // global
           _sdN1N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNfX; else goto cdNfY;
       cdNfY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNg0; else goto cdNfZ;
       cdNg0: // global
           HpAlloc = 24;
           goto cdNfX;
       cdNfX: // global
           R1 = _sdN1N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNfZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN1N::P64;
           _sdN1F::P64 = P64[_sdN1N::P64 + 16];
           _sdN1H::P64 = P64[_sdN1N::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdN1H::P64;
           R2 = Hp - 16;
           R1 = _sdN1F::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN1N_info" {
     sat_sdN1N_info:
         const sat_sdN1N_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdNg1: // global
           _sdN1H::P64 = R5;
           _sdN1G::P64 = R4;
           _sdN1F::P64 = R3;
           _sdN1E::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNg2; else goto cdNg3;
       cdNg3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNg5; else goto cdNg4;
       cdNg5: // global
           HpAlloc = 64;
           goto cdNg2;
       cdNg2: // global
           R5 = _sdN1H::P64;
           R4 = _sdN1G::P64;
           R3 = _sdN1F::P64;
           R2 = _sdN1E::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNg4: // global
           I64[Hp - 56] = sat_sdN1T_info;
           P64[Hp - 40] = _sdN1G::P64;
           P64[Hp - 32] = _sdN1H::P64;
           I64[Hp - 24] = sat_sdN1N_info;
           P64[Hp - 8] = _sdN1F::P64;
           P64[Hp] = _sdN1H::P64;
           R2 = _sdN1E::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.322548177 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info;
 },
 sat_sdN2b_entry() //  [R1]
         { []
         }
     {offset
       cdNgB: // global
           _sdN2b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNgC; else goto cdNgD;
       cdNgD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNgF; else goto cdNgE;
       cdNgF: // global
           HpAlloc = 24;
           goto cdNgC;
       cdNgC: // global
           R1 = _sdN2b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNgE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN2b::P64;
           _sdN1W::P64 = P64[_sdN2b::P64 + 16];
           _sdN1X::P64 = P64[_sdN2b::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdN1X::P64;
           R2 = Hp - 16;
           R1 = _sdN1W::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN2b_info" {
     sat_sdN2b_info:
         const sat_sdN2b_entry;
         const 2;
         const 18;
 },
 sat_sdN24_entry() //  [R1]
         { []
         }
     {offset
       cdNgL: // global
           _sdN24::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNgM; else goto cdNgN;
       cdNgN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNgP; else goto cdNgO;
       cdNgP: // global
           HpAlloc = 24;
           goto cdNgM;
       cdNgM: // global
           R1 = _sdN24::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN24::P64;
           _sdN1V::P64 = P64[_sdN24::P64 + 16];
           _sdN1X::P64 = P64[_sdN24::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdN1X::P64;
           R2 = Hp - 16;
           R1 = _sdN1V::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN24_info" {
     sat_sdN24_info:
         const sat_sdN24_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdNgQ: // global
           _sdN1X::P64 = R5;
           _sdN1W::P64 = R4;
           _sdN1V::P64 = R3;
           _sdN1U::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNgR; else goto cdNgS;
       cdNgS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNgU; else goto cdNgT;
       cdNgU: // global
           HpAlloc = 64;
           goto cdNgR;
       cdNgR: // global
           R5 = _sdN1X::P64;
           R4 = _sdN1W::P64;
           R3 = _sdN1V::P64;
           R2 = _sdN1U::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNgT: // global
           I64[Hp - 56] = sat_sdN2b_info;
           P64[Hp - 40] = _sdN1W::P64;
           P64[Hp - 32] = _sdN1X::P64;
           I64[Hp - 24] = sat_sdN24_info;
           P64[Hp - 8] = _sdN1V::P64;
           P64[Hp] = _sdN1X::P64;
           R2 = _sdN1U::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.335133354 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info;
 },
 sat_sdN2v_entry() //  [R1]
         { []
         }
     {offset
       cdNhq: // global
           _sdN2v::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNhr; else goto cdNhs;
       cdNhs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNhu; else goto cdNht;
       cdNhu: // global
           HpAlloc = 24;
           goto cdNhr;
       cdNhr: // global
           R1 = _sdN2v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNht: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN2v::P64;
           _sdN2e::P64 = P64[_sdN2v::P64 + 16];
           _sdN2f::P64 = P64[_sdN2v::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdN2f::P64;
           R2 = Hp - 16;
           R1 = _sdN2e::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN2v_info" {
     sat_sdN2v_info:
         const sat_sdN2v_entry;
         const 2;
         const 18;
 },
 sat_sdN2n_entry() //  [R1]
         { []
         }
     {offset
       cdNhA: // global
           _sdN2n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNhB; else goto cdNhC;
       cdNhC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNhE; else goto cdNhD;
       cdNhE: // global
           HpAlloc = 24;
           goto cdNhB;
       cdNhB: // global
           R1 = _sdN2n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNhD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN2n::P64;
           _sdN2d::P64 = P64[_sdN2n::P64 + 16];
           _sdN2f::P64 = P64[_sdN2n::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdN2f::P64;
           R2 = Hp - 16;
           R1 = _sdN2d::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN2n_info" {
     sat_sdN2n_info:
         const sat_sdN2n_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdNhF: // global
           _sdN2f::P64 = R5;
           _sdN2e::P64 = R4;
           _sdN2d::P64 = R3;
           _sdN2c::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNhG; else goto cdNhH;
       cdNhH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNhJ; else goto cdNhI;
       cdNhJ: // global
           HpAlloc = 64;
           goto cdNhG;
       cdNhG: // global
           R5 = _sdN2f::P64;
           R4 = _sdN2e::P64;
           R3 = _sdN2d::P64;
           R2 = _sdN2c::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNhI: // global
           I64[Hp - 56] = sat_sdN2v_info;
           P64[Hp - 40] = _sdN2e::P64;
           P64[Hp - 32] = _sdN2f::P64;
           I64[Hp - 24] = sat_sdN2n_info;
           P64[Hp - 8] = _sdN2d::P64;
           P64[Hp] = _sdN2f::P64;
           R2 = _sdN2c::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.35105561 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info;
 },
 sat_sdN2R_entry() //  [R1]
         { []
         }
     {offset
       cdNif: // global
           _sdN2R::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNig; else goto cdNih;
       cdNih: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNij; else goto cdNii;
       cdNij: // global
           HpAlloc = 24;
           goto cdNig;
       cdNig: // global
           R1 = _sdN2R::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNii: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN2R::P64;
           _sdN2y::P64 = P64[_sdN2R::P64 + 16];
           _sdN2z::P64 = P64[_sdN2R::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdN2z::P64;
           R2 = Hp - 16;
           R1 = _sdN2y::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN2R_info" {
     sat_sdN2R_info:
         const sat_sdN2R_entry;
         const 2;
         const 18;
 },
 sat_sdN2I_entry() //  [R1]
         { []
         }
     {offset
       cdNip: // global
           _sdN2I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNiq; else goto cdNir;
       cdNir: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNit; else goto cdNis;
       cdNit: // global
           HpAlloc = 24;
           goto cdNiq;
       cdNiq: // global
           R1 = _sdN2I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNis: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN2I::P64;
           _sdN2x::P64 = P64[_sdN2I::P64 + 16];
           _sdN2z::P64 = P64[_sdN2I::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdN2z::P64;
           R2 = Hp - 16;
           R1 = _sdN2x::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN2I_info" {
     sat_sdN2I_info:
         const sat_sdN2I_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdNiu: // global
           _sdN2z::P64 = R5;
           _sdN2y::P64 = R4;
           _sdN2x::P64 = R3;
           _sdN2w::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNiv; else goto cdNiw;
       cdNiw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNiy; else goto cdNix;
       cdNiy: // global
           HpAlloc = 64;
           goto cdNiv;
       cdNiv: // global
           R5 = _sdN2z::P64;
           R4 = _sdN2y::P64;
           R3 = _sdN2x::P64;
           R2 = _sdN2w::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNix: // global
           I64[Hp - 56] = sat_sdN2R_info;
           P64[Hp - 40] = _sdN2y::P64;
           P64[Hp - 32] = _sdN2z::P64;
           I64[Hp - 24] = sat_sdN2I_info;
           P64[Hp - 8] = _sdN2x::P64;
           P64[Hp] = _sdN2z::P64;
           R2 = _sdN2w::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.366475246 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info;
 },
 sat_sdN3f_entry() //  [R1]
         { []
         }
     {offset
       cdNj4: // global
           _sdN3f::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNj5; else goto cdNj6;
       cdNj6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNj8; else goto cdNj7;
       cdNj8: // global
           HpAlloc = 24;
           goto cdNj5;
       cdNj5: // global
           R1 = _sdN3f::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNj7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN3f::P64;
           _sdN2U::P64 = P64[_sdN3f::P64 + 16];
           _sdN2V::P64 = P64[_sdN3f::P64 + 24];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdN2V::P64;
           R2 = Hp - 16;
           R1 = _sdN2U::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN3f_info" {
     sat_sdN3f_info:
         const sat_sdN3f_entry;
         const 2;
         const 18;
 },
 sat_sdN35_entry() //  [R1]
         { []
         }
     {offset
       cdNje: // global
           _sdN35::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNjf; else goto cdNjg;
       cdNjg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNji; else goto cdNjh;
       cdNji: // global
           HpAlloc = 24;
           goto cdNjf;
       cdNjf: // global
           R1 = _sdN35::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNjh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN35::P64;
           _sdN2T::P64 = P64[_sdN35::P64 + 16];
           _sdN2V::P64 = P64[_sdN35::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdN2V::P64;
           R2 = Hp - 16;
           R1 = _sdN2T::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN35_info" {
     sat_sdN35_info:
         const sat_sdN35_entry;
         const 2;
         const 18;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       cdNjj: // global
           _sdN2V::P64 = R5;
           _sdN2U::P64 = R4;
           _sdN2T::P64 = R3;
           _sdN2S::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNjk; else goto cdNjl;
       cdNjl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNjn; else goto cdNjm;
       cdNjn: // global
           HpAlloc = 64;
           goto cdNjk;
       cdNjk: // global
           R5 = _sdN2V::P64;
           R4 = _sdN2U::P64;
           R3 = _sdN2T::P64;
           R2 = _sdN2S::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNjm: // global
           I64[Hp - 56] = sat_sdN3f_info;
           P64[Hp - 40] = _sdN2U::P64;
           P64[Hp - 32] = _sdN2V::P64;
           I64[Hp - 24] = sat_sdN35_info;
           P64[Hp - 8] = _sdN2T::P64;
           P64[Hp] = _sdN2V::P64;
           R2 = _sdN2S::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.380195395 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldMap_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdNjV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNjW; else goto cdNjX;
       cdNjW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNjX: // global
           I64[Sp - 24] = block_cdNjO_info;
           R1 = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udNk4; else goto cdNjP;
       udNk4: // global
           call _cdNjO(R1) args: 0, res: 0, upd: 0;
       cdNjP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldMap_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdNjO() //  [R1]
         { []
         }
     {offset
       cdNjO: // global
           if (R1 & 7 == 1) goto cdNjS; else goto cdNjT;
       cdNjS: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdNjT: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNjO_info" {
     block_cdNjO_info:
         const _cdNjO;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.386243358 UTC

[section ""data" . poly_$dMonoid_rdL8r_closure" {
     poly_$dMonoid_rdL8r_closure:
         const poly_$dMonoid_rdL8r_info;
         const 0;
         const 0;
         const 0;
 },
 poly_$dMonoid_rdL8r_entry() //  [R1]
         { []
         }
     {offset
       cdNkn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNko; else goto cdNkp;
       cdNko: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNkp: // global
           (_cdNkk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNkk::I64 == 0) goto cdNkm; else goto cdNkl;
       cdNkm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNkl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNkk::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . poly_$dMonoid_rdL8r_info" {
     poly_$dMonoid_rdL8r_info:
         const poly_$dMonoid_rdL8r_entry;
         const 0;
         const 4294967317;
         const SdNkq_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.391219006 UTC

[section ""data" . Data.Bifoldable.$dmbifoldl_closure" {
     Data.Bifoldable.$dmbifoldl_closure:
         const Data.Bifoldable.$dmbifoldl_info;
         const 0;
 },
 sat_sdN3x_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNkI: // global
           _sdN3w::P64 = R3;
           R3 = R2;
           R2 = _sdN3w::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN3x_info" {
     sat_sdN3x_info:
         const sat_sdN3x_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdN3u_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNkQ: // global
           _sdN3t::P64 = R3;
           R3 = R2;
           R2 = _sdN3t::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN3u_info" {
     sat_sdN3u_info:
         const sat_sdN3u_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.$dmbifoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNkT: // global
           _sdN3r::P64 = R6;
           _sdN3q::P64 = R5;
           _sdN3p::P64 = R4;
           _sdN3o::P64 = R3;
           _sdN3n::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNkU; else goto cdNkV;
       cdNkV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNkX; else goto cdNkW;
       cdNkX: // global
           HpAlloc = 32;
           goto cdNkU;
       cdNkU: // global
           R6 = _sdN3r::P64;
           R5 = _sdN3q::P64;
           R4 = _sdN3p::P64;
           R3 = _sdN3o::P64;
           R2 = _sdN3n::P64;
           R1 = Data.Bifoldable.$dmbifoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNkW: // global
           I64[Hp - 24] = sat_sdN3x_info;
           P64[Hp - 16] = _sdN3p::P64;
           I64[Hp - 8] = sat_sdN3u_info;
           P64[Hp] = _sdN3o::P64;
           R2 = _sdN3n::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = poly_$dMonoid_rdL8r_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdN3r::P64;
           P64[Sp - 8] = _sdN3q::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldl_info" {
     Data.Bifoldable.$dmbifoldl_info:
         const Data.Bifoldable.$dmbifoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdNkq_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.399335645 UTC

[section ""data" . Data.Bifoldable.$dmbifoldr_closure" {
     Data.Bifoldable.$dmbifoldr_closure:
         const Data.Bifoldable.$dmbifoldr_info;
         const 0;
 },
 Data.Bifoldable.$dmbifoldr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNlj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdNlk; else goto cdNll;
       cdNlk: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$dmbifoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNll: // global
           R2 = R2;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R6;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldr_info" {
     Data.Bifoldable.$dmbifoldr_info:
         const Data.Bifoldable.$dmbifoldr_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SdNkq_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.405953771 UTC

[section ""data" . Data.Bifoldable.$dmbifoldMap_closure" {
     Data.Bifoldable.$dmbifoldMap_closure:
         const Data.Bifoldable.$dmbifoldMap_info;
 },
 sat_sdN3N_entry() //  [R1]
         { []
         }
     {offset
       cdNlB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNlC; else goto cdNlD;
       cdNlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNlD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN3N_info" {
     sat_sdN3N_info:
         const sat_sdN3N_entry;
         const 1;
         const 16;
 },
 sat_sdN3M_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNlK: // global
           _sdN3K::P64 = R2;
           _sdN3M::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNlL; else goto cdNlM;
       cdNlM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNlO; else goto cdNlN;
       cdNlO: // global
           HpAlloc = 32;
           goto cdNlL;
       cdNlL: // global
           R2 = _sdN3K::P64;
           R1 = _sdN3M::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNlN: // global
           _sdN3E::P64 = P64[_sdN3M::P64 + 7];
           _sdN3G::P64 = P64[_sdN3M::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdN3G::P64;
           P64[Hp] = _sdN3K::P64;
           R2 = _sdN3E::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN3M_info" {
     sat_sdN3M_info:
         const sat_sdN3M_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdN3J_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNlV: // global
           _sdN3H::P64 = R2;
           _sdN3J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNlW; else goto cdNlX;
       cdNlX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNlZ; else goto cdNlY;
       cdNlZ: // global
           HpAlloc = 32;
           goto cdNlW;
       cdNlW: // global
           R2 = _sdN3H::P64;
           R1 = _sdN3J::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNlY: // global
           _sdN3E::P64 = P64[_sdN3J::P64 + 7];
           _sdN3F::P64 = P64[_sdN3J::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdN3F::P64;
           P64[Hp] = _sdN3H::P64;
           R2 = _sdN3E::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN3J_info" {
     sat_sdN3J_info:
         const sat_sdN3J_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.$dmbifoldMap_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdNm0: // global
           _sdN3G::P64 = R5;
           _sdN3F::P64 = R4;
           _sdN3E::P64 = R3;
           _sdN3D::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNm1; else goto cdNm2;
       cdNm2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNm4; else goto cdNm3;
       cdNm4: // global
           HpAlloc = 72;
           goto cdNm1;
       cdNm1: // global
           R5 = _sdN3G::P64;
           R4 = _sdN3F::P64;
           R3 = _sdN3E::P64;
           R2 = _sdN3D::P64;
           R1 = Data.Bifoldable.$dmbifoldMap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNm3: // global
           I64[Hp - 64] = sat_sdN3N_info;
           P64[Hp - 48] = _sdN3E::P64;
           I64[Hp - 40] = sat_sdN3M_info;
           P64[Hp - 32] = _sdN3E::P64;
           P64[Hp - 24] = _sdN3G::P64;
           I64[Hp - 16] = sat_sdN3J_info;
           P64[Hp - 8] = _sdN3E::P64;
           P64[Hp] = _sdN3F::P64;
           R2 = _sdN3D::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifoldMap_info" {
     Data.Bifoldable.$dmbifoldMap_info:
         const Data.Bifoldable.$dmbifoldMap_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.420984671 UTC

[section ""data" . Data.Bifoldable.$dmbifold_closure" {
     Data.Bifoldable.$dmbifold_closure:
         const Data.Bifoldable.$dmbifold_info;
 },
 Data.Bifoldable.$dmbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNmE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNmF; else goto cdNmG;
       cdNmF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$dmbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNmG: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$dmbifold_info" {
     Data.Bifoldable.$dmbifold_info:
         const Data.Bifoldable.$dmbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.428491313 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifold_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifold_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNn2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNn3; else goto cdNn4;
       cdNn3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNn4: // global
           I64[Sp - 8] = block_cdNmV_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udNnb; else goto cdNmW;
       udNnb: // global
           call _cdNmV(R1) args: 0, res: 0, upd: 0;
       cdNmW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifold_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifold_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdNmV() //  [R1]
         { []
         }
     {offset
       cdNmV: // global
           if (R1 & 7 == 1) goto cdNmZ; else goto cdNn0;
       cdNmZ: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNn0: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNmV_info" {
     block_cdNmV_info:
         const _cdNmV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.439193864 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdNnz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNnA; else goto cdNnB;
       cdNnA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNnB: // global
           I64[Sp - 32] = block_cdNns_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udNnI; else goto cdNnt;
       udNnI: // global
           call _cdNns(R1) args: 0, res: 0, upd: 0;
       cdNnt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdNns() //  [R1]
         { []
         }
     {offset
       cdNns: // global
           _sdN3X::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdNnw; else goto cdNnx;
       cdNnw: // global
           R3 = _sdN3X::P64;
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNnx: // global
           R3 = _sdN3X::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNns_info" {
     block_cdNns_info:
         const _cdNns;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.450830583 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableEither_$cbifoldl_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdNo6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNo7; else goto cdNo8;
       cdNo7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNo8: // global
           I64[Sp - 32] = block_cdNnZ_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udNof; else goto cdNo0;
       udNof: // global
           call _cdNnZ(R1) args: 0, res: 0, upd: 0;
       cdNo0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableEither_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableEither_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdNnZ() //  [R1]
         { []
         }
     {offset
       cdNnZ: // global
           _sdN44::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdNo3; else goto cdNo4;
       cdNo3: // global
           R3 = P64[R1 + 7];
           R2 = _sdN44::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNo4: // global
           R3 = P64[R1 + 6];
           R2 = _sdN44::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNnZ_info" {
     block_cdNnZ_info:
         const _cdNnZ;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.460507583 UTC

[section ""data" . Data.Bifoldable.$fBifoldableEither_closure" {
     Data.Bifoldable.$fBifoldableEither_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableEither_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableEither_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.464954572 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNoz: // global
           _sdN4a::P64 = R3;
           _sdN49::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNoA; else goto cdNoB;
       cdNoB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNoD; else goto cdNoC;
       cdNoD: // global
           HpAlloc = 48;
           goto cdNoA;
       cdNoA: // global
           R3 = _sdN4a::P64;
           R2 = _sdN49::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNoC: // global
           I64[Hp - 40] = stg_sel_6_upd_info;
           P64[Hp - 24] = _sdN4a::P64;
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdN4a::P64;
           R2 = _sdN49::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.473525256 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info;
 },
 sat_sdN4P_entry() //  [R1]
         { []
         }
     {offset
       cdNoX: // global
           _sdN4P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNoY; else goto cdNoZ;
       cdNoZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNp1; else goto cdNp0;
       cdNp1: // global
           HpAlloc = 24;
           goto cdNoY;
       cdNoY: // global
           R1 = _sdN4P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN4P::P64;
           _sdN4u::P64 = P64[_sdN4P::P64 + 16];
           _sdN4v::P64 = P64[_sdN4P::P64 + 24];
           _sdN4w::P64 = P64[_sdN4P::P64 + 32];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdN4w::P64;
           R3 = _sdN4v::P64;
           R2 = Hp - 16;
           R1 = _sdN4u::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN4P_info" {
     sat_sdN4P_info:
         const sat_sdN4P_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdNp3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNp7; else goto cdNp6;
       cdNp7: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNp6: // global
           I64[Hp - 56] = sat_sdN4P_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN4t::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN4t::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.484794139 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info;
 },
 sat_sdN53_entry() //  [R1]
         { []
         }
     {offset
       cdNpu: // global
           _sdN53::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNpv; else goto cdNpw;
       cdNpw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNpy; else goto cdNpx;
       cdNpy: // global
           HpAlloc = 24;
           goto cdNpv;
       cdNpv: // global
           R1 = _sdN53::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNpx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN53::P64;
           _sdN4Q::P64 = P64[_sdN53::P64 + 16];
           _sdN4S::P64 = P64[_sdN53::P64 + 24];
           _sdN4T::P64 = P64[_sdN53::P64 + 32];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdN4T::P64;
           R3 = Hp - 16;
           R2 = _sdN4S::P64;
           R1 = _sdN4Q::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN53_info" {
     sat_sdN53_info:
         const sat_sdN53_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cdNpz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNpD; else goto cdNpC;
       cdNpD: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNpC: // global
           I64[Hp - 56] = stg_sel_6_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN53_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN4R::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN4R::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.490814131 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.493473929 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNpX: // global
           _sdN5e::P64 = R3;
           _sdN5d::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNpY; else goto cdNpZ;
       cdNpZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNq1; else goto cdNq0;
       cdNq1: // global
           HpAlloc = 48;
           goto cdNpY;
       cdNpY: // global
           R3 = _sdN5e::P64;
           R2 = _sdN5d::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNq0: // global
           I64[Hp - 40] = stg_sel_5_upd_info;
           P64[Hp - 24] = _sdN5e::P64;
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdN5e::P64;
           R2 = _sdN5d::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.499372127 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info;
 },
 sat_sdN5P_entry() //  [R1]
         { []
         }
     {offset
       cdNql: // global
           _sdN5P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNqm; else goto cdNqn;
       cdNqn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNqp; else goto cdNqo;
       cdNqp: // global
           HpAlloc = 24;
           goto cdNqm;
       cdNqm: // global
           R1 = _sdN5P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNqo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN5P::P64;
           _sdN5w::P64 = P64[_sdN5P::P64 + 16];
           _sdN5x::P64 = P64[_sdN5P::P64 + 24];
           _sdN5y::P64 = P64[_sdN5P::P64 + 32];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdN5y::P64;
           R3 = _sdN5x::P64;
           R2 = Hp - 16;
           R1 = _sdN5w::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN5P_info" {
     sat_sdN5P_info:
         const sat_sdN5P_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdNqr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNqv; else goto cdNqu;
       cdNqv: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNqu: // global
           I64[Hp - 56] = sat_sdN5P_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN5v::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN5v::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.507232486 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info;
 },
 sat_sdN62_entry() //  [R1]
         { []
         }
     {offset
       cdNqS: // global
           _sdN62::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNqT; else goto cdNqU;
       cdNqU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNqW; else goto cdNqV;
       cdNqW: // global
           HpAlloc = 24;
           goto cdNqT;
       cdNqT: // global
           R1 = _sdN62::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNqV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN62::P64;
           _sdN5Q::P64 = P64[_sdN62::P64 + 16];
           _sdN5S::P64 = P64[_sdN62::P64 + 24];
           _sdN5T::P64 = P64[_sdN62::P64 + 32];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdN5T::P64;
           R3 = Hp - 16;
           R2 = _sdN5S::P64;
           R1 = _sdN5Q::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN62_info" {
     sat_sdN62_info:
         const sat_sdN62_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdNqX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNr1; else goto cdNr0;
       cdNr1: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNr0: // global
           I64[Hp - 56] = stg_sel_5_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN62_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN5R::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN5R::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.513756563 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.516818242 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNrl: // global
           _sdN6c::P64 = R3;
           _sdN6b::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNrm; else goto cdNrn;
       cdNrn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNrp; else goto cdNro;
       cdNrp: // global
           HpAlloc = 48;
           goto cdNrm;
       cdNrm: // global
           R3 = _sdN6c::P64;
           R2 = _sdN6b::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNro: // global
           I64[Hp - 40] = stg_sel_4_upd_info;
           P64[Hp - 24] = _sdN6c::P64;
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdN6c::P64;
           R2 = _sdN6b::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.5229141 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info;
 },
 sat_sdN6J_entry() //  [R1]
         { []
         }
     {offset
       cdNrJ: // global
           _sdN6J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNrK; else goto cdNrL;
       cdNrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNrN; else goto cdNrM;
       cdNrN: // global
           HpAlloc = 24;
           goto cdNrK;
       cdNrK: // global
           R1 = _sdN6J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNrM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN6J::P64;
           _sdN6s::P64 = P64[_sdN6J::P64 + 16];
           _sdN6t::P64 = P64[_sdN6J::P64 + 24];
           _sdN6u::P64 = P64[_sdN6J::P64 + 32];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdN6u::P64;
           R3 = _sdN6t::P64;
           R2 = Hp - 16;
           R1 = _sdN6s::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN6J_info" {
     sat_sdN6J_info:
         const sat_sdN6J_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdNrP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNrT; else goto cdNrS;
       cdNrT: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNrS: // global
           I64[Hp - 56] = sat_sdN6J_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN6r::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN6r::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.53240805 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info;
 },
 sat_sdN6V_entry() //  [R1]
         { []
         }
     {offset
       cdNsg: // global
           _sdN6V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNsh; else goto cdNsi;
       cdNsi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNsk; else goto cdNsj;
       cdNsk: // global
           HpAlloc = 24;
           goto cdNsh;
       cdNsh: // global
           R1 = _sdN6V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNsj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN6V::P64;
           _sdN6K::P64 = P64[_sdN6V::P64 + 16];
           _sdN6M::P64 = P64[_sdN6V::P64 + 24];
           _sdN6N::P64 = P64[_sdN6V::P64 + 32];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdN6N::P64;
           R3 = Hp - 16;
           R2 = _sdN6M::P64;
           R1 = _sdN6K::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN6V_info" {
     sat_sdN6V_info:
         const sat_sdN6V_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdNsl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNsp; else goto cdNso;
       cdNsp: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNso: // global
           I64[Hp - 56] = stg_sel_4_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN6V_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN6L::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN6L::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.540321475 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.544556654 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNsJ: // global
           _sdN74::P64 = R3;
           _sdN73::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNsK; else goto cdNsL;
       cdNsL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNsN; else goto cdNsM;
       cdNsN: // global
           HpAlloc = 48;
           goto cdNsK;
       cdNsK: // global
           R3 = _sdN74::P64;
           R2 = _sdN73::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNsM: // global
           I64[Hp - 40] = stg_sel_3_upd_info;
           P64[Hp - 24] = _sdN74::P64;
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdN74::P64;
           R2 = _sdN73::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.550558505 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info;
 },
 sat_sdN7x_entry() //  [R1]
         { []
         }
     {offset
       cdNt7: // global
           _sdN7x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNt8; else goto cdNt9;
       cdNt9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNtb; else goto cdNta;
       cdNtb: // global
           HpAlloc = 24;
           goto cdNt8;
       cdNt8: // global
           R1 = _sdN7x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN7x::P64;
           _sdN7i::P64 = P64[_sdN7x::P64 + 16];
           _sdN7j::P64 = P64[_sdN7x::P64 + 24];
           _sdN7k::P64 = P64[_sdN7x::P64 + 32];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdN7k::P64;
           R3 = _sdN7j::P64;
           R2 = Hp - 16;
           R1 = _sdN7i::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN7x_info" {
     sat_sdN7x_info:
         const sat_sdN7x_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdNtd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNth; else goto cdNtg;
       cdNth: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNtg: // global
           I64[Hp - 56] = sat_sdN7x_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN7h::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN7h::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.559227053 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info;
 },
 sat_sdN7I_entry() //  [R1]
         { []
         }
     {offset
       cdNtE: // global
           _sdN7I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNtF; else goto cdNtG;
       cdNtG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNtI; else goto cdNtH;
       cdNtI: // global
           HpAlloc = 24;
           goto cdNtF;
       cdNtF: // global
           R1 = _sdN7I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN7I::P64;
           _sdN7y::P64 = P64[_sdN7I::P64 + 16];
           _sdN7A::P64 = P64[_sdN7I::P64 + 24];
           _sdN7B::P64 = P64[_sdN7I::P64 + 32];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdN7B::P64;
           R3 = Hp - 16;
           R2 = _sdN7A::P64;
           R1 = _sdN7y::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN7I_info" {
     sat_sdN7I_info:
         const sat_sdN7I_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       cdNtJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNtN; else goto cdNtM;
       cdNtN: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNtM: // global
           I64[Hp - 56] = stg_sel_3_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN7I_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN7z::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN7z::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.566616301 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.569829514 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNu7: // global
           _sdN7Q::P64 = R3;
           _sdN7P::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNu8; else goto cdNu9;
       cdNu9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNub; else goto cdNua;
       cdNub: // global
           HpAlloc = 48;
           goto cdNu8;
       cdNu8: // global
           R3 = _sdN7Q::P64;
           R2 = _sdN7P::P64;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNua: // global
           I64[Hp - 40] = stg_sel_2_upd_info;
           P64[Hp - 24] = _sdN7Q::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdN7Q::P64;
           R2 = _sdN7P::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.576156846 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info;
 },
 sat_sdN8f_entry() //  [R1]
         { []
         }
     {offset
       cdNuv: // global
           _sdN8f::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNuw; else goto cdNux;
       cdNux: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNuz; else goto cdNuy;
       cdNuz: // global
           HpAlloc = 24;
           goto cdNuw;
       cdNuw: // global
           R1 = _sdN8f::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNuy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN8f::P64;
           _sdN82::P64 = P64[_sdN8f::P64 + 16];
           _sdN83::P64 = P64[_sdN8f::P64 + 24];
           _sdN84::P64 = P64[_sdN8f::P64 + 32];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdN84::P64;
           R3 = _sdN83::P64;
           R2 = Hp - 16;
           R1 = _sdN82::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN8f_info" {
     sat_sdN8f_info:
         const sat_sdN8f_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdNuB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNuF; else goto cdNuE;
       cdNuF: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNuE: // global
           I64[Hp - 56] = sat_sdN8f_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN81::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN81::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.584579813 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info;
 },
 sat_sdN8p_entry() //  [R1]
         { []
         }
     {offset
       cdNv2: // global
           _sdN8p::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNv3; else goto cdNv4;
       cdNv4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNv6; else goto cdNv5;
       cdNv6: // global
           HpAlloc = 24;
           goto cdNv3;
       cdNv3: // global
           R1 = _sdN8p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNv5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN8p::P64;
           _sdN8g::P64 = P64[_sdN8p::P64 + 16];
           _sdN8i::P64 = P64[_sdN8p::P64 + 24];
           _sdN8j::P64 = P64[_sdN8p::P64 + 32];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdN8j::P64;
           R3 = Hp - 16;
           R2 = _sdN8i::P64;
           R1 = _sdN8g::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN8p_info" {
     sat_sdN8p_info:
         const sat_sdN8p_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdNv7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNvb; else goto cdNva;
       cdNvb: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNva: // global
           I64[Hp - 56] = stg_sel_2_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN8p_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN8h::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN8h::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.59026613 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,,)_closure" {
     Data.Bifoldable.$fBifoldable(,,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.592510768 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK2_closure" {
     Data.Bifoldable.$fBifoldableK2_closure:
         const Data.Bifoldable.$fBifoldableK2_info;
 },
 Data.Bifoldable.$fBifoldableK2_entry() //  [R3]
         { []
         }
     {offset
       cdNvt: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK2_info" {
     Data.Bifoldable.$fBifoldableK2_info:
         const Data.Bifoldable.$fBifoldableK2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.595983181 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldr_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdNvE: // global
           R3 = R4;
           _sdN8x::P64 = R2;
           R2 = R5;
           R1 = _sdN8x::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.599545536 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableK1_$cbifoldl_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdNvP: // global
           R3 = R5;
           _sdN8B::P64 = R2;
           R2 = R4;
           R1 = _sdN8B::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableK1_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableK1_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.602779568 UTC

[section ""data" . Data.Bifoldable.$fBifoldableK1_closure" {
     Data.Bifoldable.$fBifoldableK1_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableK2_closure+2;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableK1_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.60482722 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst1_closure" {
     Data.Bifoldable.$fBifoldableConst1_closure:
         const Data.Bifoldable.$fBifoldableConst1_info;
 },
 Data.Bifoldable.$fBifoldableConst1_entry() //  [R3]
         { []
         }
     {offset
       cdNw1: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst1_info" {
     Data.Bifoldable.$fBifoldableConst1_info:
         const Data.Bifoldable.$fBifoldableConst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.6085845 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldr_entry() //  [R2, R4,
                                                          R5]
         { []
         }
     {offset
       cdNwc: // global
           R3 = R4;
           _sdN8H::P64 = R2;
           R2 = R5;
           R1 = _sdN8H::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.61217943 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_info;
 },
 Data.Bifoldable.$fBifoldableConst_$cbifoldl_entry() //  [R2, R4,
                                                          R5]
         { []
         }
     {offset
       cdNwn: // global
           R3 = R5;
           _sdN8L::P64 = R2;
           R2 = R4;
           R1 = _sdN8L::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldableConst_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldableConst_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.616428379 UTC

[section ""data" . Data.Bifoldable.$fBifoldableConst_closure" {
     Data.Bifoldable.$fBifoldableConst_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldableConst1_closure+2;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldableConst_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.61939552 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifold_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifold_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_info;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNwB: // global
           _sdN8Q::P64 = R3;
           _sdN8P::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNwC; else goto cdNwD;
       cdNwD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNwF; else goto cdNwE;
       cdNwF: // global
           HpAlloc = 48;
           goto cdNwC;
       cdNwC: // global
           R3 = _sdN8Q::P64;
           R2 = _sdN8P::P64;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNwE: // global
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _sdN8Q::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdN8Q::P64;
           R2 = _sdN8P::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifold_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifold_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.626875184 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info;
 },
 sat_sdN9b_entry() //  [R1]
         { []
         }
     {offset
       cdNwZ: // global
           _sdN9b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNx0; else goto cdNx1;
       cdNx1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNx3; else goto cdNx2;
       cdNx3: // global
           HpAlloc = 24;
           goto cdNx0;
       cdNx0: // global
           R1 = _sdN9b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNx2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN9b::P64;
           _sdN90::P64 = P64[_sdN9b::P64 + 16];
           _sdN91::P64 = P64[_sdN9b::P64 + 24];
           _sdN92::P64 = P64[_sdN9b::P64 + 32];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdN92::P64;
           R3 = _sdN91::P64;
           R2 = Hp - 16;
           R1 = _sdN90::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN9b_info" {
     sat_sdN9b_info:
         const sat_sdN9b_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldr_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdNx5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNx9; else goto cdNx8;
       cdNx9: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNx8: // global
           I64[Hp - 56] = sat_sdN9b_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = R5;
           R3 = Hp - 56;
           _sdN8Z::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdN8Z::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldr_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.637511263 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info;
 },
 sat_sdN9k_entry() //  [R1]
         { []
         }
     {offset
       cdNxw: // global
           _sdN9k::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNxx; else goto cdNxy;
       cdNxy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNxA; else goto cdNxz;
       cdNxA: // global
           HpAlloc = 24;
           goto cdNxx;
       cdNxx: // global
           R1 = _sdN9k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNxz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdN9k::P64;
           _sdN9c::P64 = P64[_sdN9k::P64 + 16];
           _sdN9e::P64 = P64[_sdN9k::P64 + 24];
           _sdN9f::P64 = P64[_sdN9k::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdN9f::P64;
           R3 = Hp - 16;
           R2 = _sdN9e::P64;
           R1 = _sdN9c::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN9k_info" {
     sat_sdN9k_info:
         const sat_sdN9k_entry;
         const 3;
         const 15;
 },
 Data.Bifoldable.$fBifoldable(,)_$cbifoldl_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdNxB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdNxF; else goto cdNxE;
       cdNxF: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNxE: // global
           I64[Hp - 56] = stg_sel_1_upd_info;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sdN9k_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sdN9d::P64 = R3;
           R3 = Hp - 56;
           R2 = Hp - 32;
           R1 = _sdN9d::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info" {
     Data.Bifoldable.$fBifoldable(,)_$cbifoldl_info:
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.645525367 UTC

[section ""data" . Data.Bifoldable.$fBifoldable(,)_closure" {
     Data.Bifoldable.$fBifoldable(,)_closure:
         const Data.Bifoldable.C:Bifoldable_con_info;
         const Data.Bifoldable.$fBifoldable(,)_$cbifold_closure+2;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldMap_closure+4;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldr_closure+4;
         const Data.Bifoldable.$fBifoldable(,)_$cbifoldl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.654381714 UTC

[section ""data" . Data.Bifoldable.bifoldr'_closure" {
     Data.Bifoldable.bifoldr'_closure:
         const Data.Bifoldable.bifoldr'_info;
 },
 sat_sdN9D_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNy4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNy5; else goto cdNy6;
       cdNy5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNy6: // global
           I64[Sp - 16] = block_cdNy2_info;
           _sdN9A::P64 = R3;
           R3 = R4;
           _sdN9z::P64 = R2;
           R2 = _sdN9A::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdN9z::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN9D_info" {
     sat_sdN9D_info:
         const sat_sdN9D_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdNy2() //  [R1]
         { []
         }
     {offset
       cdNy2: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNy2_info" {
     block_cdNy2_info:
         const _cdNy2;
         const 1;
         const 30;
 },
 sat_sdN9y_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNyf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNyg; else goto cdNyh;
       cdNyg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNyh: // global
           I64[Sp - 16] = block_cdNyd_info;
           _sdN9v::P64 = R3;
           R3 = R4;
           _sdN9u::P64 = R2;
           R2 = _sdN9v::P64;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdN9u::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdN9y_info" {
     sat_sdN9y_info:
         const sat_sdN9y_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdNyd() //  [R1]
         { []
         }
     {offset
       cdNyd: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNyd_info" {
     block_cdNyd_info:
         const _cdNyd;
         const 1;
         const 30;
 },
 Data.Bifoldable.bifoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNyj: // global
           _sdN9t::P64 = R6;
           _sdN9s::P64 = R5;
           _sdN9r::P64 = R4;
           _sdN9q::P64 = R3;
           _sdN9p::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNyk; else goto cdNyl;
       cdNyl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNyn; else goto cdNym;
       cdNyn: // global
           HpAlloc = 32;
           goto cdNyk;
       cdNyk: // global
           R6 = _sdN9t::P64;
           R5 = _sdN9s::P64;
           R4 = _sdN9r::P64;
           R3 = _sdN9q::P64;
           R2 = _sdN9p::P64;
           R1 = Data.Bifoldable.bifoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNym: // global
           I64[Hp - 24] = sat_sdN9D_info;
           P64[Hp - 16] = _sdN9r::P64;
           I64[Hp - 8] = sat_sdN9y_info;
           P64[Hp] = _sdN9q::P64;
           R2 = _sdN9p::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Hp - 5;
           P64[Sp - 32] = Hp - 21;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _sdN9t::P64;
           P64[Sp - 8] = _sdN9s::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldl_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr'_info" {
     Data.Bifoldable.bifoldr'_info:
         const Data.Bifoldable.bifoldr'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.665624529 UTC

[section ""cstring" . lvl_rdL8s_bytes" {
     lvl_rdL8s_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.668168776 UTC

[section ""data" . lvl1_rdL8t_closure" {
     lvl1_rdL8t_closure:
         const lvl1_rdL8t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rdL8t_entry() //  [R1]
         { []
         }
     {offset
       cdNyX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNyY; else goto cdNyZ;
       cdNyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNyZ: // global
           (_cdNyU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNyU::I64 == 0) goto cdNyW; else goto cdNyV;
       cdNyW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNyV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNyU::I64;
           R2 = lvl_rdL8s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rdL8t_info" {
     lvl1_rdL8t_info:
         const lvl1_rdL8t_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.672381891 UTC

[section ""cstring" . Data.Bifoldable.$trModule4_bytes" {
     Data.Bifoldable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.674993235 UTC

[section ""data" . lvl2_rdL8u_closure" {
     lvl2_rdL8u_closure:
         const lvl2_rdL8u_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rdL8u_entry() //  [R1]
         { []
         }
     {offset
       cdNzf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNzg; else goto cdNzh;
       cdNzg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNzh: // global
           (_cdNzc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNzc::I64 == 0) goto cdNze; else goto cdNzd;
       cdNze: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNzd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNzc::I64;
           R2 = Data.Bifoldable.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rdL8u_info" {
     lvl2_rdL8u_info:
         const lvl2_rdL8u_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.678834546 UTC

[section ""cstring" . Data.Bifoldable.$trModule2_bytes" {
     Data.Bifoldable.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,102,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.681394329 UTC

[section ""data" . lvl3_rdL8v_closure" {
     lvl3_rdL8v_closure:
         const lvl3_rdL8v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rdL8v_entry() //  [R1]
         { []
         }
     {offset
       cdNzx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNzy; else goto cdNzz;
       cdNzy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNzz: // global
           (_cdNzu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNzu::I64 == 0) goto cdNzw; else goto cdNzv;
       cdNzw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNzv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNzu::I64;
           R2 = Data.Bifoldable.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rdL8v_info" {
     lvl3_rdL8v_info:
         const lvl3_rdL8v_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.685326767 UTC

[section ""cstring" . lvl4_rdL8w_bytes" {
     lvl4_rdL8w_bytes:
         I8[] [46,47,68,97,116,97,47,66,105,102,111,108,100,97,98,108,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.687838312 UTC

[section ""data" . lvl5_rdL8x_closure" {
     lvl5_rdL8x_closure:
         const lvl5_rdL8x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rdL8x_entry() //  [R1]
         { []
         }
     {offset
       cdNzP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNzQ; else goto cdNzR;
       cdNzQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNzR: // global
           (_cdNzM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNzM::I64 == 0) goto cdNzO; else goto cdNzN;
       cdNzO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNzN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNzM::I64;
           R2 = lvl4_rdL8w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rdL8x_info" {
     lvl5_rdL8x_info:
         const lvl5_rdL8x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.692478212 UTC

[section ""data" . lvl6_rdL8y_closure" {
     lvl6_rdL8y_closure:
         const GHC.Types.I#_con_info;
         const 188;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.694249573 UTC

[section ""data" . lvl7_rdL8z_closure" {
     lvl7_rdL8z_closure:
         const GHC.Types.I#_con_info;
         const 28;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.695949371 UTC

[section ""data" . lvl8_rdL8A_closure" {
     lvl8_rdL8A_closure:
         const GHC.Types.I#_con_info;
         const 61;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.698244356 UTC

[section ""data" . lvl9_rdL8B_closure" {
     lvl9_rdL8B_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl6_rdL8y_closure+1;
         const lvl7_rdL8z_closure+1;
         const lvl6_rdL8y_closure+1;
         const lvl8_rdL8A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.701060751 UTC

[section ""data" . lvl10_rdL8C_closure" {
     lvl10_rdL8C_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl9_rdL8B_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.703769608 UTC

[section ""cstring" . lvl11_rdL8D_bytes" {
     lvl11_rdL8D_bytes:
         I8[] [98,105,102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.707829939 UTC

[section ""data" . Data.Bifoldable.bifoldr2_closure" {
     Data.Bifoldable.bifoldr2_closure:
         const Data.Bifoldable.bifoldr2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bifoldr2_entry() //  [R1]
         { []
         }
     {offset
       cdNAe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNAf; else goto cdNAg;
       cdNAf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNAg: // global
           (_cdNA9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNA9::I64 == 0) goto cdNAb; else goto cdNAa;
       cdNAb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNAa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNA9::I64;
           I64[Sp - 24] = block_cdNAc_info;
           R2 = lvl11_rdL8D_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr2_info" {
     Data.Bifoldable.bifoldr2_info:
         const Data.Bifoldable.bifoldr2_entry;
         const 0;
         const 12884901909;
         const SdNkq_srt+32;
 },
 _cdNAc() //  [R1]
         { []
         }
     {offset
       cdNAc: // global
           R3 = R1;
           R2 = lvl10_rdL8C_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNAc_info" {
     block_cdNAc_info:
         const _cdNAc;
         const 0;
         const 12884901918;
         const SdNkq_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.719861453 UTC

[section ""data" . Data.Bifoldable.bifoldr1_closure" {
     Data.Bifoldable.bifoldr1_closure:
         const Data.Bifoldable.bifoldr1_info;
         const 0;
 },
 sat_sdN9N_entry() //  [R1]
         { []
         }
     {offset
       cdNAQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdNAR; else goto cdNAS;
       cdNAR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNAS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdNAJ_info;
           _sdN9G::P64 = P64[R1 + 16];
           _sdN9J::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdN9G::P64;
           P64[Sp - 24] = _sdN9J::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udNAZ; else goto cdNAK;
       udNAZ: // global
           call _cdNAJ(R1) args: 0, res: 0, upd: 0;
       cdNAK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN9N_info" {
     sat_sdN9N_info:
         const sat_sdN9N_entry;
         const 3;
         const 15;
 },
 _cdNAJ() //  [R1]
         { []
         }
     {offset
       cdNAJ: // global
           _sdN9J::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdNAN; else goto cdNAO;
       cdNAN: // global
           R1 = _sdN9J::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cdNAO: // global
           R3 = P64[R1 + 6];
           R2 = _sdN9J::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNAJ_info" {
     block_cdNAJ_info:
         const _cdNAJ;
         const 2;
         const 30;
 },
 mbf_sdN9I_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNB1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdNB5; else goto cdNB4;
       cdNB5: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNB4: // global
           _sdN9G::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdN9N_info;
           P64[Hp - 32] = _sdN9G::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdN9I_info" {
     mbf_sdN9I_info:
         const mbf_sdN9I_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bifoldr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNBc: // global
           _sdN9H::P64 = R4;
           _sdN9G::P64 = R3;
           _sdN9F::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNBd; else goto cdNBe;
       cdNBe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdNBg; else goto cdNBf;
       cdNBg: // global
           HpAlloc = 16;
           goto cdNBd;
       cdNBd: // global
           R4 = _sdN9H::P64;
           R3 = _sdN9G::P64;
           R2 = _sdN9F::P64;
           R1 = Data.Bifoldable.bifoldr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNBf: // global
           I64[Hp - 8] = mbf_sdN9I_info;
           P64[Hp] = _sdN9G::P64;
           I64[Sp - 8] = block_cdNB6_info;
           R2 = _sdN9F::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdNAA::P64 = Hp - 6;
           P64[Sp - 40] = _cdNAA::P64;
           P64[Sp - 32] = _cdNAA::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdN9H::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldr1_info" {
     Data.Bifoldable.bifoldr1_info:
         const Data.Bifoldable.bifoldr1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdNkq_srt+48;
 },
 _cdNB6() //  [R1]
         { []
         }
     {offset
       cdNB6: // global
           if (R1 & 7 == 1) goto cdNB9; else goto cdNBa;
       cdNB9: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNBa: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNB6_info" {
     block_cdNB6_info:
         const _cdNB6;
         const 0;
         const 4294967326;
         const SdNkq_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.738593924 UTC

[section ""data" . Data.Bifoldable.bimaximumBy_closure" {
     Data.Bifoldable.bimaximumBy_closure:
         const Data.Bifoldable.bimaximumBy_info;
         const 0;
 },
 sat_sdN9Z_entry() //  [R1]
         { []
         }
     {offset
       cdNCf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdNCg; else goto cdNCh;
       cdNCg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNCh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdNC8_info;
           _sdN9R::P64 = P64[R1 + 16];
           _sdN9U::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdN9R::P64;
           P64[Sp - 24] = _sdN9U::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udNCD; else goto cdNC9;
       udNCD: // global
           call _cdNC8(R1) args: 0, res: 0, upd: 0;
       cdNC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdN9Z_info" {
     sat_sdN9Z_info:
         const sat_sdN9Z_entry;
         const 3;
         const 15;
 },
 _cdNC8() //  [R1]
         { []
         }
     {offset
       cdNC8: // global
           if (R1 & 7 == 1) goto udNCA; else goto cdNCd;
       udNCA: // global
           Sp = Sp + 16;
           call _cdNCy() args: 0, res: 0, upd: 0;
       cdNCd: // global
           I64[Sp] = block_cdNCn_info;
           _sdN9X::P64 = P64[R1 + 6];
           R3 = _sdN9X::P64;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdN9X::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNC8_info" {
     block_cdNC8_info:
         const _cdNC8;
         const 2;
         const 30;
 },
 _cdNCn() //  [R1]
         { []
         }
     {offset
       cdNCn: // global
           if (R1 & 7 == 3) goto udNCB; else goto cdNCu;
       udNCB: // global
           Sp = Sp + 16;
           call _cdNCy() args: 0, res: 0, upd: 0;
       cdNCu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNCn_info" {
     block_cdNCn_info:
         const _cdNCn;
         const 2;
         const 30;
 },
 _cdNCy() //  []
         { []
         }
     {offset
       cdNCy: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 mbf_sdN9T_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNCG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdNCK; else goto cdNCJ;
       cdNCK: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNCJ: // global
           _sdN9R::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdN9Z_info;
           P64[Hp - 32] = _sdN9R::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdN9T_info" {
     mbf_sdN9T_info:
         const mbf_sdN9T_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bimaximumBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNCR: // global
           _sdN9S::P64 = R4;
           _sdN9R::P64 = R3;
           _sdN9Q::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNCS; else goto cdNCT;
       cdNCT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdNCV; else goto cdNCU;
       cdNCV: // global
           HpAlloc = 16;
           goto cdNCS;
       cdNCS: // global
           R4 = _sdN9S::P64;
           R3 = _sdN9R::P64;
           R2 = _sdN9Q::P64;
           R1 = Data.Bifoldable.bimaximumBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNCU: // global
           I64[Hp - 8] = mbf_sdN9T_info;
           P64[Hp] = _sdN9R::P64;
           I64[Sp - 8] = block_cdNCL_info;
           R2 = _sdN9Q::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdNBZ::P64 = Hp - 6;
           P64[Sp - 40] = _cdNBZ::P64;
           P64[Sp - 32] = _cdNBZ::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdN9S::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximumBy_info" {
     Data.Bifoldable.bimaximumBy_info:
         const Data.Bifoldable.bimaximumBy_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdNkq_srt+56;
 },
 _cdNCL() //  [R1]
         { []
         }
     {offset
       cdNCL: // global
           if (R1 & 7 == 1) goto cdNCO; else goto cdNCP;
       cdNCO: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNCP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNCL_info" {
     block_cdNCL_info:
         const _cdNCL;
         const 0;
         const 4294967326;
         const SdNkq_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.760444609 UTC

[section ""data" . Data.Bifoldable.biminimumBy_closure" {
     Data.Bifoldable.biminimumBy_closure:
         const Data.Bifoldable.biminimumBy_info;
         const 0;
 },
 sat_sdNab_entry() //  [R1]
         { []
         }
     {offset
       cdNE2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdNE3; else goto cdNE4;
       cdNE3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNE4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdNDV_info;
           _sdNa3::P64 = P64[R1 + 16];
           _sdNa6::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sdNa3::P64;
           P64[Sp - 24] = _sdNa6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udNEq; else goto cdNDW;
       udNEq: // global
           call _cdNDV(R1) args: 0, res: 0, upd: 0;
       cdNDW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNab_info" {
     sat_sdNab_info:
         const sat_sdNab_entry;
         const 3;
         const 15;
 },
 _cdNDV() //  [R1]
         { []
         }
     {offset
       cdNDV: // global
           if (R1 & 7 == 1) goto udNEn; else goto cdNE0;
       udNEn: // global
           Sp = Sp + 16;
           call _cdNEh() args: 0, res: 0, upd: 0;
       cdNE0: // global
           I64[Sp] = block_cdNEa_info;
           _sdNa9::P64 = P64[R1 + 6];
           R3 = _sdNa9::P64;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdNa9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNDV_info" {
     block_cdNDV_info:
         const _cdNDV;
         const 2;
         const 30;
 },
 _cdNEa() //  [R1]
         { []
         }
     {offset
       cdNEa: // global
           if (R1 & 7 == 3) goto cdNEl; else goto udNEo;
       cdNEl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       udNEo: // global
           Sp = Sp + 16;
           call _cdNEh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdNEa_info" {
     block_cdNEa_info:
         const _cdNEa;
         const 2;
         const 30;
 },
 _cdNEh() //  []
         { []
         }
     {offset
       cdNEh: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 mbf_sdNa5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNEt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdNEx; else goto cdNEw;
       cdNEx: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNEw: // global
           _sdNa3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdNab_info;
           P64[Hp - 32] = _sdNa3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdNa5_info" {
     mbf_sdNa5_info:
         const mbf_sdNa5_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.biminimumBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNEE: // global
           _sdNa4::P64 = R4;
           _sdNa3::P64 = R3;
           _sdNa2::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNEF; else goto cdNEG;
       cdNEG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdNEI; else goto cdNEH;
       cdNEI: // global
           HpAlloc = 16;
           goto cdNEF;
       cdNEF: // global
           R4 = _sdNa4::P64;
           R3 = _sdNa3::P64;
           R2 = _sdNa2::P64;
           R1 = Data.Bifoldable.biminimumBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNEH: // global
           I64[Hp - 8] = mbf_sdNa5_info;
           P64[Hp] = _sdNa3::P64;
           I64[Sp - 8] = block_cdNEy_info;
           R2 = _sdNa2::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdNDM::P64 = Hp - 6;
           P64[Sp - 40] = _cdNDM::P64;
           P64[Sp - 32] = _cdNDM::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdNa4::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimumBy_info" {
     Data.Bifoldable.biminimumBy_info:
         const Data.Bifoldable.biminimumBy_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdNkq_srt+56;
 },
 _cdNEy() //  [R1]
         { []
         }
     {offset
       cdNEy: // global
           if (R1 & 7 == 1) goto cdNEB; else goto cdNEC;
       cdNEB: // global
           R1 = Data.Bifoldable.bifoldr2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNEC: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNEy_info" {
     block_cdNEy_info:
         const _cdNEy;
         const 0;
         const 4294967326;
         const SdNkq_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.778157397 UTC

[section ""data" . Data.Bifoldable.bifoldrM_closure" {
     Data.Bifoldable.bifoldrM_closure:
         const Data.Bifoldable.bifoldrM_info;
 },
 sat_sdNau_entry() //  [R1]
         { []
         }
     {offset
       cdNFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNFE; else goto cdNFF;
       cdNFE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNau_info" {
     sat_sdNau_info:
         const sat_sdNau_entry;
         const 1;
         const 16;
 },
 sat_sdNat_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNFM: // global
           _sdNar::P64 = R4;
           _sdNaq::P64 = R3;
           _sdNap::P64 = R2;
           _sdNat::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNFN; else goto cdNFO;
       cdNFO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdNFQ; else goto cdNFP;
       cdNFQ: // global
           HpAlloc = 40;
           goto cdNFN;
       cdNFN: // global
           R4 = _sdNar::P64;
           R3 = _sdNaq::P64;
           R2 = _sdNap::P64;
           R1 = _sdNat::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNFP: // global
           _sdNaf::P64 = P64[_sdNat::P64 + 5];
           _sdNah::P64 = P64[_sdNat::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdNah::P64;
           P64[Hp - 8] = _sdNaq::P64;
           P64[Hp] = _sdNar::P64;
           R2 = _sdNaf::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdNap::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNat_info" {
     sat_sdNat_info:
         const sat_sdNat_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sdNao_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNFX: // global
           _sdNam::P64 = R4;
           _sdNal::P64 = R3;
           _sdNak::P64 = R2;
           _sdNao::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNFY; else goto cdNFZ;
       cdNFZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdNG1; else goto cdNG0;
       cdNG1: // global
           HpAlloc = 40;
           goto cdNFY;
       cdNFY: // global
           R4 = _sdNam::P64;
           R3 = _sdNal::P64;
           R2 = _sdNak::P64;
           R1 = _sdNao::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNG0: // global
           _sdNaf::P64 = P64[_sdNao::P64 + 5];
           _sdNag::P64 = P64[_sdNao::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdNag::P64;
           P64[Hp - 8] = _sdNal::P64;
           P64[Hp] = _sdNam::P64;
           R2 = _sdNaf::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdNak::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNao_info" {
     sat_sdNao_info:
         const sat_sdNao_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Bifoldable.bifoldrM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNG2: // global
           _sdNai::P64 = R6;
           _sdNah::P64 = R5;
           _sdNag::P64 = R4;
           _sdNaf::P64 = R3;
           _sdNae::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdNG3; else goto cdNG4;
       cdNG4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNG6; else goto cdNG5;
       cdNG6: // global
           HpAlloc = 72;
           goto cdNG3;
       cdNG3: // global
           R6 = _sdNai::P64;
           R5 = _sdNah::P64;
           R4 = _sdNag::P64;
           R3 = _sdNaf::P64;
           R2 = _sdNae::P64;
           R1 = Data.Bifoldable.bifoldrM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdNG5: // global
           I64[Hp - 64] = sat_sdNau_info;
           P64[Hp - 48] = _sdNaf::P64;
           I64[Hp - 40] = sat_sdNat_info;
           P64[Hp - 32] = _sdNaf::P64;
           P64[Hp - 24] = _sdNah::P64;
           I64[Hp - 16] = sat_sdNao_info;
           P64[Hp - 8] = _sdNaf::P64;
           P64[Hp] = _sdNag::P64;
           R2 = _sdNae::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 37;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = _sdNai::P64;
           Sp = Sp - 40;
           call Data.Bifoldable.bifoldl_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldrM_info" {
     Data.Bifoldable.bifoldrM_info:
         const Data.Bifoldable.bifoldrM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.791192244 UTC

[section ""data" . Data.Bifoldable.bifoldl'_closure" {
     Data.Bifoldable.bifoldl'_closure:
         const Data.Bifoldable.bifoldl'_info;
 },
 sat_sdNaJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNGO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNGP; else goto cdNGQ;
       cdNGP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNGQ: // global
           I64[Sp - 16] = block_cdNGM_info;
           _sdNaG::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdNaG::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNaJ_info" {
     sat_sdNaJ_info:
         const sat_sdNaJ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdNGM() //  [R1]
         { []
         }
     {offset
       cdNGM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNGM_info" {
     block_cdNGM_info:
         const _cdNGM;
         const 1;
         const 30;
 },
 sat_sdNaE_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNGZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNH0; else goto cdNH1;
       cdNH0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNH1: // global
           I64[Sp - 16] = block_cdNGX_info;
           _sdNaB::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sdNaB::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNaE_info" {
     sat_sdNaE_info:
         const sat_sdNaE_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cdNGX() //  [R1]
         { []
         }
     {offset
       cdNGX: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNGX_info" {
     block_cdNGX_info:
         const _cdNGX;
         const 1;
         const 30;
 },
 Data.Bifoldable.bifoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNH3: // global
           _sdNaz::P64 = R6;
           _sdNay::P64 = R5;
           _sdNax::P64 = R4;
           _sdNaw::P64 = R3;
           _sdNav::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNH4; else goto cdNH5;
       cdNH5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNH7; else goto cdNH6;
       cdNH7: // global
           HpAlloc = 32;
           goto cdNH4;
       cdNH4: // global
           R6 = _sdNaz::P64;
           R5 = _sdNay::P64;
           R4 = _sdNax::P64;
           R3 = _sdNaw::P64;
           R2 = _sdNav::P64;
           R1 = Data.Bifoldable.bifoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNH6: // global
           I64[Hp - 24] = sat_sdNaJ_info;
           P64[Hp - 16] = _sdNax::P64;
           I64[Hp - 8] = sat_sdNaE_info;
           P64[Hp] = _sdNaw::P64;
           R2 = _sdNav::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Hp - 5;
           P64[Sp - 32] = Hp - 21;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = _sdNaz::P64;
           P64[Sp - 8] = _sdNay::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl'_info" {
     Data.Bifoldable.bifoldl'_info:
         const Data.Bifoldable.bifoldl'_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.807173008 UTC

[section ""data" . Data.Bifoldable.bilength2_closure" {
     Data.Bifoldable.bilength2_closure:
         const Data.Bifoldable.bilength2_info;
 },
 Data.Bifoldable.bilength2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNHO; else goto cdNHP;
       cdNHO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bilength2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNHP: // global
           I64[Sp - 16] = block_cdNHE_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udNHT; else goto cdNHF;
       udNHT: // global
           call _cdNHE(R1) args: 0, res: 0, upd: 0;
       cdNHF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bilength2_info" {
     Data.Bifoldable.bilength2_info:
         const Data.Bifoldable.bilength2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdNHE() //  [R1]
         { []
         }
     {offset
       cdNHE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdNHS; else goto cdNHR;
       cdNHS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdNHR: // global
           _sdNaP::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdNaP::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNHE_info" {
     block_cdNHE_info:
         const _cdNHE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.817378249 UTC

[section ""data" . Data.Bifoldable.bilength1_closure" {
     Data.Bifoldable.bilength1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.821127716 UTC

[section ""data" . Data.Bifoldable.bilength_closure" {
     Data.Bifoldable.bilength_closure:
         const Data.Bifoldable.bilength_info;
 },
 Data.Bifoldable.bilength_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNIb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdNIc; else goto cdNId;
       cdNIc: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bilength_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNId: // global
           R2 = R2;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Bifoldable.bilength2_closure+3;
           P64[Sp - 32] = Data.Bifoldable.bilength2_closure+3;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = Data.Bifoldable.bilength1_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bilength_info" {
     Data.Bifoldable.bilength_info:
         const Data.Bifoldable.bilength_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.825199751 UTC

[section ""data" . lvl12_rdL8E_closure" {
     lvl12_rdL8E_closure:
         const GHC.Types.I#_con_info;
         const 223;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.827099435 UTC

[section ""data" . lvl13_rdL8F_closure" {
     lvl13_rdL8F_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl12_rdL8E_closure+1;
         const lvl7_rdL8z_closure+1;
         const lvl12_rdL8E_closure+1;
         const lvl8_rdL8A_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.829014872 UTC

[section ""data" . lvl14_rdL8G_closure" {
     lvl14_rdL8G_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl13_rdL8F_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.831001668 UTC

[section ""cstring" . lvl15_rdL8H_bytes" {
     lvl15_rdL8H_bytes:
         I8[] [98,105,102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.834282795 UTC

[section ""data" . Data.Bifoldable.bifoldl2_closure" {
     Data.Bifoldable.bifoldl2_closure:
         const Data.Bifoldable.bifoldl2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bifoldl2_entry() //  [R1]
         { []
         }
     {offset
       cdNIB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNIC; else goto cdNID;
       cdNIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNID: // global
           (_cdNIw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNIw::I64 == 0) goto cdNIy; else goto cdNIx;
       cdNIy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNIx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNIw::I64;
           I64[Sp - 24] = block_cdNIz_info;
           R2 = lvl15_rdL8H_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl2_info" {
     Data.Bifoldable.bifoldl2_info:
         const Data.Bifoldable.bifoldl2_entry;
         const 0;
         const 279172874261;
         const SdNkq_srt+32;
 },
 _cdNIz() //  [R1]
         { []
         }
     {offset
       cdNIz: // global
           R3 = R1;
           R2 = lvl14_rdL8G_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNIz_info" {
     block_cdNIz_info:
         const _cdNIz;
         const 0;
         const 279172874270;
         const SdNkq_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.844959145 UTC

[section ""data" . Data.Bifoldable.bifoldl1_closure" {
     Data.Bifoldable.bifoldl1_closure:
         const Data.Bifoldable.bifoldl1_info;
         const 0;
 },
 sat_sdNb2_entry() //  [R1]
         { []
         }
     {offset
       cdNJd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdNJe; else goto cdNJf;
       cdNJe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNJf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdNJ6_info;
           _sdNaV::P64 = P64[R1 + 16];
           _sdNaZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdNaV::P64;
           P64[Sp - 24] = _sdNaZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udNJm; else goto cdNJ7;
       udNJm: // global
           call _cdNJ6(R1) args: 0, res: 0, upd: 0;
       cdNJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNb2_info" {
     sat_sdNb2_info:
         const sat_sdNb2_entry;
         const 3;
         const 15;
 },
 _cdNJ6() //  [R1]
         { []
         }
     {offset
       cdNJ6: // global
           _sdNaZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdNJa; else goto cdNJb;
       cdNJa: // global
           R1 = _sdNaZ::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cdNJb: // global
           R3 = _sdNaZ::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNJ6_info" {
     block_cdNJ6_info:
         const _cdNJ6;
         const 2;
         const 30;
 },
 mbf_sdNaX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdNJo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdNJs; else goto cdNJr;
       cdNJs: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNJr: // global
           _sdNaV::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sdNb2_info;
           P64[Hp - 32] = _sdNaV::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . mbf_sdNaX_info" {
     mbf_sdNaX_info:
         const mbf_sdNaX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bifoldable.bifoldl1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNJz: // global
           _sdNaW::P64 = R4;
           _sdNaV::P64 = R3;
           _sdNaU::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNJA; else goto cdNJB;
       cdNJB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdNJD; else goto cdNJC;
       cdNJD: // global
           HpAlloc = 16;
           goto cdNJA;
       cdNJA: // global
           R4 = _sdNaW::P64;
           R3 = _sdNaV::P64;
           R2 = _sdNaU::P64;
           R1 = Data.Bifoldable.bifoldl1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNJC: // global
           I64[Hp - 8] = mbf_sdNaX_info;
           P64[Hp] = _sdNaV::P64;
           I64[Sp - 8] = block_cdNJt_info;
           R2 = _sdNaU::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           _cdNIX::P64 = Hp - 6;
           P64[Sp - 40] = _cdNIX::P64;
           P64[Sp - 32] = _cdNIX::P64;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _sdNaW::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldl_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldl1_info" {
     Data.Bifoldable.bifoldl1_info:
         const Data.Bifoldable.bifoldl1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdNkq_srt+88;
 },
 _cdNJt() //  [R1]
         { []
         }
     {offset
       cdNJt: // global
           if (R1 & 7 == 1) goto cdNJw; else goto cdNJx;
       cdNJw: // global
           R1 = Data.Bifoldable.bifoldl2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNJx: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNJt_info" {
     block_cdNJt_info:
         const _cdNJt;
         const 0;
         const 4294967326;
         const SdNkq_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.865468101 UTC

[section ""data" . Data.Bifoldable.bifoldlM_closure" {
     Data.Bifoldable.bifoldlM_closure:
         const Data.Bifoldable.bifoldlM_info;
 },
 sat_sdNbl_entry() //  [R1]
         { []
         }
     {offset
       cdNKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNKr; else goto cdNKs;
       cdNKr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNKs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbl_info" {
     sat_sdNbl_info:
         const sat_sdNbl_entry;
         const 1;
         const 16;
 },
 sat_sdNbk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNKz: // global
           _sdNbi::P64 = R4;
           _sdNbh::P64 = R3;
           _sdNbg::P64 = R2;
           _sdNbk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNKA; else goto cdNKB;
       cdNKB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdNKD; else goto cdNKC;
       cdNKD: // global
           HpAlloc = 40;
           goto cdNKA;
       cdNKA: // global
           R4 = _sdNbi::P64;
           R3 = _sdNbh::P64;
           R2 = _sdNbg::P64;
           R1 = _sdNbk::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNKC: // global
           _sdNb6::P64 = P64[_sdNbk::P64 + 5];
           _sdNb8::P64 = P64[_sdNbk::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdNb8::P64;
           P64[Hp - 8] = _sdNbi::P64;
           P64[Hp] = _sdNbg::P64;
           R2 = _sdNb6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdNbh::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNbk_info" {
     sat_sdNbk_info:
         const sat_sdNbk_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sdNbf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdNKK: // global
           _sdNbd::P64 = R4;
           _sdNbc::P64 = R3;
           _sdNbb::P64 = R2;
           _sdNbf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdNKL; else goto cdNKM;
       cdNKM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdNKO; else goto cdNKN;
       cdNKO: // global
           HpAlloc = 40;
           goto cdNKL;
       cdNKL: // global
           R4 = _sdNbd::P64;
           R3 = _sdNbc::P64;
           R2 = _sdNbb::P64;
           R1 = _sdNbf::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNKN: // global
           _sdNb6::P64 = P64[_sdNbf::P64 + 5];
           _sdNb7::P64 = P64[_sdNbf::P64 + 13];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdNb7::P64;
           P64[Hp - 8] = _sdNbd::P64;
           P64[Hp] = _sdNbb::P64;
           R2 = _sdNb6::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sdNbc::P64;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNbf_info" {
     sat_sdNbf_info:
         const sat_sdNbf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Bifoldable.bifoldlM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNKP: // global
           _sdNb9::P64 = R6;
           _sdNb8::P64 = R5;
           _sdNb7::P64 = R4;
           _sdNb6::P64 = R3;
           _sdNb5::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdNKQ; else goto cdNKR;
       cdNKR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNKT; else goto cdNKS;
       cdNKT: // global
           HpAlloc = 72;
           goto cdNKQ;
       cdNKQ: // global
           R6 = _sdNb9::P64;
           R5 = _sdNb8::P64;
           R4 = _sdNb7::P64;
           R3 = _sdNb6::P64;
           R2 = _sdNb5::P64;
           R1 = Data.Bifoldable.bifoldlM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdNKS: // global
           I64[Hp - 64] = sat_sdNbl_info;
           P64[Hp - 48] = _sdNb6::P64;
           I64[Hp - 40] = sat_sdNbk_info;
           P64[Hp - 32] = _sdNb6::P64;
           P64[Hp - 24] = _sdNb8::P64;
           I64[Hp - 16] = sat_sdNbf_info;
           P64[Hp - 8] = _sdNb6::P64;
           P64[Hp] = _sdNb7::P64;
           R2 = _sdNb5::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Hp - 13;
           P64[Sp - 24] = Hp - 37;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = _sdNb9::P64;
           Sp = Sp - 40;
           call Data.Bifoldable.bifoldr_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifoldlM_info" {
     Data.Bifoldable.bifoldlM_info:
         const Data.Bifoldable.bifoldlM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.886615796 UTC

[section ""data" . Data.Bifoldable.bitraverse__closure" {
     Data.Bifoldable.bitraverse__closure:
         const Data.Bifoldable.bitraverse__info;
 },
 sat_sdNbw_entry() //  [R1]
         { []
         }
     {offset
       cdNLy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNLz; else goto cdNLA;
       cdNLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbw_info" {
     sat_sdNbw_info:
         const sat_sdNbw_entry;
         const 1;
         const 16;
 },
 sat_sdNbv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNLH: // global
           _sdNbt::P64 = R2;
           _sdNbv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNLI; else goto cdNLJ;
       cdNLJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNLL; else goto cdNLK;
       cdNLL: // global
           HpAlloc = 32;
           goto cdNLI;
       cdNLI: // global
           R2 = _sdNbt::P64;
           R1 = _sdNbv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNLK: // global
           _sdNbn::P64 = P64[_sdNbv::P64 + 7];
           _sdNbp::P64 = P64[_sdNbv::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdNbp::P64;
           P64[Hp] = _sdNbt::P64;
           R2 = _sdNbn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNbv_info" {
     sat_sdNbv_info:
         const sat_sdNbv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdNbs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNLS: // global
           _sdNbq::P64 = R2;
           _sdNbs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdNLT; else goto cdNLU;
       cdNLU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNLW; else goto cdNLV;
       cdNLW: // global
           HpAlloc = 32;
           goto cdNLT;
       cdNLT: // global
           R2 = _sdNbq::P64;
           R1 = _sdNbs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNLV: // global
           _sdNbn::P64 = P64[_sdNbs::P64 + 7];
           _sdNbo::P64 = P64[_sdNbs::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdNbo::P64;
           P64[Hp] = _sdNbq::P64;
           R2 = _sdNbn::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNbs_info" {
     sat_sdNbs_info:
         const sat_sdNbs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.bitraverse__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdNLX: // global
           _sdNbp::P64 = R5;
           _sdNbo::P64 = R4;
           _sdNbn::P64 = R3;
           _sdNbm::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNLY; else goto cdNLZ;
       cdNLZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNM1; else goto cdNM0;
       cdNM1: // global
           HpAlloc = 72;
           goto cdNLY;
       cdNLY: // global
           R5 = _sdNbp::P64;
           R4 = _sdNbo::P64;
           R3 = _sdNbn::P64;
           R2 = _sdNbm::P64;
           R1 = Data.Bifoldable.bitraverse__closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNM0: // global
           I64[Hp - 64] = sat_sdNbw_info;
           P64[Hp - 48] = _sdNbn::P64;
           I64[Hp - 40] = sat_sdNbv_info;
           P64[Hp - 32] = _sdNbn::P64;
           P64[Hp - 24] = _sdNbp::P64;
           I64[Hp - 16] = sat_sdNbs_info;
           P64[Hp - 8] = _sdNbn::P64;
           P64[Hp] = _sdNbo::P64;
           R2 = _sdNbm::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bitraverse__info" {
     Data.Bifoldable.bitraverse__info:
         const Data.Bifoldable.bitraverse__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.90250633 UTC

[section ""data" . Data.Bifoldable.bifor__closure" {
     Data.Bifoldable.bifor__closure:
         const Data.Bifoldable.bifor__info;
 },
 Data.Bifoldable.bifor__entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNMF; else goto cdNMG;
       cdNMF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bifor__closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNMG: // global
           _sdNbA::P64 = R5;
           R5 = R6;
           _sdNbz::P64 = R4;
           R4 = _sdNbA::P64;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _sdNbz::P64;
           Sp = Sp - 16;
           call Data.Bifoldable.bitraverse__entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifor__info" {
     Data.Bifoldable.bifor__info:
         const Data.Bifoldable.bifor__entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.909044929 UTC

[section ""data" . Data.Bifoldable.biforM__closure" {
     Data.Bifoldable.biforM__closure:
         const Data.Bifoldable.biforM__info;
 },
 Data.Bifoldable.biforM__entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdNMR: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bifor__entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biforM__info" {
     Data.Bifoldable.biforM__info:
         const Data.Bifoldable.biforM__entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.913100658 UTC

[section ""data" . Data.Bifoldable.bimapM__closure" {
     Data.Bifoldable.bimapM__closure:
         const Data.Bifoldable.bimapM__info;
 },
 Data.Bifoldable.bimapM__entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdNN2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bitraverse__entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimapM__info" {
     Data.Bifoldable.bimapM__info:
         const Data.Bifoldable.bimapM__entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.922281505 UTC

[section ""data" . Data.Bifoldable.bisequence__closure" {
     Data.Bifoldable.bisequence__closure:
         const Data.Bifoldable.bisequence__info;
 },
 sat_sdNbG_entry() //  [R1]
         { []
         }
     {offset
       cdNNh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNNi; else goto cdNNj;
       cdNNi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNNj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbG_info" {
     sat_sdNbG_info:
         const sat_sdNbG_entry;
         const 1;
         const 16;
 },
 sat_sdNbF_entry() //  [R1]
         { []
         }
     {offset
       cdNNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNNp; else goto cdNNq;
       cdNNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbF_info" {
     sat_sdNbF_info:
         const sat_sdNbF_entry;
         const 1;
         const 16;
 },
 sat_sdNbE_entry() //  [R1]
         { []
         }
     {offset
       cdNNv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNNw; else goto cdNNx;
       cdNNw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNNx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbE_info" {
     sat_sdNbE_info:
         const sat_sdNbE_entry;
         const 1;
         const 16;
 },
 Data.Bifoldable.bisequence__entry() //  [R2, R3]
         { []
         }
     {offset
       cdNNy: // global
           _sdNbD::P64 = R3;
           _sdNbC::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNNz; else goto cdNNA;
       cdNNA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNNC; else goto cdNNB;
       cdNNC: // global
           HpAlloc = 72;
           goto cdNNz;
       cdNNz: // global
           R3 = _sdNbD::P64;
           R2 = _sdNbC::P64;
           R1 = Data.Bifoldable.bisequence__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNNB: // global
           I64[Hp - 64] = sat_sdNbG_info;
           P64[Hp - 48] = _sdNbD::P64;
           I64[Hp - 40] = sat_sdNbF_info;
           P64[Hp - 24] = _sdNbD::P64;
           I64[Hp - 16] = sat_sdNbE_info;
           P64[Hp] = _sdNbD::P64;
           R2 = _sdNbC::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 40;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisequence__info" {
     Data.Bifoldable.bisequence__info:
         const Data.Bifoldable.bisequence__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.93832909 UTC

[section ""data" . Data.Bifoldable.bisequenceA__closure" {
     Data.Bifoldable.bisequenceA__closure:
         const Data.Bifoldable.bisequenceA__info;
 },
 Data.Bifoldable.bisequenceA__entry() //  [R2, R3]
         { []
         }
     {offset
       cdNOb: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bisequence__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisequenceA__info" {
     Data.Bifoldable.bisequenceA__info:
         const Data.Bifoldable.bisequenceA__entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.94623187 UTC

[section ""data" . Data.Bifoldable.biasum_closure" {
     Data.Bifoldable.biasum_closure:
         const Data.Bifoldable.biasum_info;
 },
 sat_sdNbL_entry() //  [R1]
         { []
         }
     {offset
       cdNOq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNOr; else goto cdNOs;
       cdNOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNOs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbL_info" {
     sat_sdNbL_info:
         const sat_sdNbL_entry;
         const 1;
         const 16;
 },
 sat_sdNbK_entry() //  [R1]
         { []
         }
     {offset
       cdNOx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNOy; else goto cdNOz;
       cdNOy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNOz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbK_info" {
     sat_sdNbK_info:
         const sat_sdNbK_entry;
         const 1;
         const 16;
 },
 sat_sdNbJ_entry() //  [R1]
         { []
         }
     {offset
       cdNOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNOF; else goto cdNOG;
       cdNOF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbJ_info" {
     sat_sdNbJ_info:
         const sat_sdNbJ_entry;
         const 1;
         const 16;
 },
 Data.Bifoldable.biasum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNOH: // global
           _sdNbI::P64 = R3;
           _sdNbH::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNOI; else goto cdNOJ;
       cdNOJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdNOL; else goto cdNOK;
       cdNOL: // global
           HpAlloc = 72;
           goto cdNOI;
       cdNOI: // global
           R3 = _sdNbI::P64;
           R2 = _sdNbH::P64;
           R1 = Data.Bifoldable.biasum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNOK: // global
           I64[Hp - 64] = sat_sdNbL_info;
           P64[Hp - 48] = _sdNbI::P64;
           I64[Hp - 40] = sat_sdNbK_info;
           P64[Hp - 24] = _sdNbI::P64;
           I64[Hp - 16] = sat_sdNbJ_info;
           P64[Hp] = _sdNbI::P64;
           R2 = _sdNbH::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 40;
           P64[Sp - 8] = Hp - 64;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biasum_info" {
     Data.Bifoldable.biasum_info:
         const Data.Bifoldable.biasum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.960598125 UTC

[section ""data" . Data.Bifoldable.bimsum_closure" {
     Data.Bifoldable.bimsum_closure:
         const Data.Bifoldable.bimsum_info;
 },
 Data.Bifoldable.bimsum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNPh: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biasum_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimsum_info" {
     Data.Bifoldable.bimsum_info:
         const Data.Bifoldable.bimsum_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.966730784 UTC

[section ""data" . Data.Bifoldable.biList_closure" {
     Data.Bifoldable.biList_closure:
         const Data.Bifoldable.biList_info;
 },
 Data.Bifoldable.biList_entry() //  [R2]
         { []
         }
     {offset
       cdNPs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNPt; else goto cdNPu;
       cdNPt: // global
           R2 = R2;
           R1 = Data.Bifoldable.biList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNPu: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           P64[Sp - 16] = GHC.Types.:_closure+2;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biList_info" {
     Data.Bifoldable.biList_info:
         const Data.Bifoldable.biList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.973723151 UTC

[section ""data" . Data.Bifoldable.binull1_closure" {
     Data.Bifoldable.binull1_closure:
         const Data.Bifoldable.binull1_info;
 },
 Data.Bifoldable.binull1_entry() //  []
         { []
         }
     {offset
       cdNPL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binull1_info" {
     Data.Bifoldable.binull1_info:
         const Data.Bifoldable.binull1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.980176207 UTC

[section ""data" . Data.Bifoldable.binull_closure" {
     Data.Bifoldable.binull_closure:
         const Data.Bifoldable.binull_info;
 },
 Data.Bifoldable.binull_entry() //  [R2]
         { []
         }
     {offset
       cdNPY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNPZ; else goto cdNQ0;
       cdNPZ: // global
           R2 = R2;
           R1 = Data.Bifoldable.binull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNQ0: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Bifoldable.binull1_closure+2;
           P64[Sp - 16] = Data.Bifoldable.binull1_closure+2;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldr_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binull_info" {
     Data.Bifoldable.binull_info:
         const Data.Bifoldable.binull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.986731237 UTC

[section ""data" . Data.Bifoldable.biconcat_closure" {
     Data.Bifoldable.biconcat_closure:
         const Data.Bifoldable.biconcat_info;
         const 0;
 },
 Data.Bifoldable.biconcat_entry() //  [R2]
         { []
         }
     {offset
       cdNQf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNQg; else goto cdNQh;
       cdNQg: // global
           R2 = R2;
           R1 = Data.Bifoldable.biconcat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNQh: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Base.$fMonoid[]_closure;
           Sp = Sp - 16;
           call Data.Bifoldable.bifold_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biconcat_info" {
     Data.Bifoldable.biconcat_info:
         const Data.Bifoldable.biconcat_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdNkq_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.991007735 UTC

[section ""data" . lvl16_rdL8I_closure" {
     lvl16_rdL8I_closure:
         const GHC.Types.I#_con_info;
         const 334;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.992836088 UTC

[section ""data" . lvl17_rdL8J_closure" {
     lvl17_rdL8J_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.99466393 UTC

[section ""data" . lvl18_rdL8K_closure" {
     lvl18_rdL8K_closure:
         const GHC.Types.I#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.996724455 UTC

[section ""data" . lvl19_rdL8L_closure" {
     lvl19_rdL8L_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl16_rdL8I_closure+1;
         const lvl17_rdL8J_closure+1;
         const lvl16_rdL8I_closure+1;
         const lvl18_rdL8K_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:02.998866667 UTC

[section ""data" . lvl20_rdL8M_closure" {
     lvl20_rdL8M_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl19_rdL8L_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.001580783 UTC

[section ""cstring" . lvl21_rdL8N_bytes" {
     lvl21_rdL8N_bytes:
         I8[] [98,105,109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.004680792 UTC

[section ""data" . Data.Bifoldable.bimaximum1_closure" {
     Data.Bifoldable.bimaximum1_closure:
         const Data.Bifoldable.bimaximum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.bimaximum1_entry() //  [R1]
         { []
         }
     {offset
       cdNQD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNQE; else goto cdNQF;
       cdNQE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNQF: // global
           (_cdNQy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNQy::I64 == 0) goto cdNQA; else goto cdNQz;
       cdNQA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNQz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNQy::I64;
           I64[Sp - 24] = block_cdNQB_info;
           R2 = lvl21_rdL8N_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximum1_info" {
     Data.Bifoldable.bimaximum1_info:
         const Data.Bifoldable.bimaximum1_entry;
         const 0;
         const 8800387989525;
         const SdNkq_srt+32;
 },
 _cdNQB() //  [R1]
         { []
         }
     {offset
       cdNQB: // global
           R3 = R1;
           R2 = lvl20_rdL8M_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNQB_info" {
     block_cdNQB_info:
         const _cdNQB;
         const 0;
         const 8800387989534;
         const SdNkq_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.013176923 UTC

[section ""data" . Data.Bifoldable.bimaximum_closure" {
     Data.Bifoldable.bimaximum_closure:
         const Data.Bifoldable.bimaximum_info;
         const 0;
 },
 sat_sdNbV_entry() //  [R1]
         { []
         }
     {offset
       cdNR7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNR8; else goto cdNR9;
       cdNR8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNR9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNbV_info" {
     sat_sdNbV_info:
         const sat_sdNbV_entry;
         const 1;
         const 4294967312;
         const SdNkq_srt+128;
 },
 g_sdNbU_entry() //  [R1]
         { []
         }
     {offset
       cdNRa: // global
           _sdNbU::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNRb; else goto cdNRc;
       cdNRc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNRe; else goto cdNRd;
       cdNRe: // global
           HpAlloc = 24;
           goto cdNRb;
       cdNRb: // global
           R1 = _sdNbU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNRd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdNbU::P64;
           _sdNbS::P64 = P64[_sdNbU::P64 + 16];
           _sdNbT::P64 = P64[_sdNbU::P64 + 24];
           I64[Hp - 16] = sat_sdNbV_info;
           P64[Hp] = _sdNbT::P64;
           R2 = _sdNbS::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = GHC.Base.Just_closure+1;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdNbU_info" {
     g_sdNbU_info:
         const g_sdNbU_entry;
         const 2;
         const 4294967314;
         const SdNkq_srt+128;
 },
 sat_sdNbZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNRq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNRr; else goto cdNRs;
       cdNRr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNRs: // global
           I64[Sp - 8] = block_cdNRk_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNbZ_info" {
     sat_sdNbZ_info:
         const sat_sdNbZ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdNkq_srt+136;
 },
 _cdNRk() //  [R1]
         { []
         }
     {offset
       cdNRk: // global
           if (R1 & 7 == 1) goto cdNRn; else goto cdNRo;
       cdNRn: // global
           R1 = Data.Bifoldable.bimaximum1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNRo: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNRk_info" {
     block_cdNRk_info:
         const _cdNRk;
         const 0;
         const 4294967326;
         const SdNkq_srt+136;
 },
 Data.Bifoldable.bimaximum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNRz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNRD; else goto cdNRC;
       cdNRD: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bimaximum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNRC: // global
           I64[Hp - 40] = g_sdNbU_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdNbZ_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bimaximum_info" {
     Data.Bifoldable.bimaximum_info:
         const Data.Bifoldable.bimaximum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SdNkq_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.024784929 UTC

[section ""data" . lvl22_rdL8O_closure" {
     lvl22_rdL8O_closure:
         const GHC.Types.I#_con_info;
         const 342;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.026737441 UTC

[section ""data" . lvl23_rdL8P_closure" {
     lvl23_rdL8P_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_rdL8u_closure;
         const lvl3_rdL8v_closure;
         const lvl5_rdL8x_closure;
         const lvl22_rdL8O_closure+1;
         const lvl17_rdL8J_closure+1;
         const lvl22_rdL8O_closure+1;
         const lvl18_rdL8K_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.028759976 UTC

[section ""data" . lvl24_rdL8Q_closure" {
     lvl24_rdL8Q_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_rdL8t_closure;
         const lvl23_rdL8P_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.031382011 UTC

[section ""cstring" . lvl25_rdL8R_bytes" {
     lvl25_rdL8R_bytes:
         I8[] [98,105,109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.034685161 UTC

[section ""data" . Data.Bifoldable.biminimum1_closure" {
     Data.Bifoldable.biminimum1_closure:
         const Data.Bifoldable.biminimum1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Bifoldable.biminimum1_entry() //  [R1]
         { []
         }
     {offset
       cdNSp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNSq; else goto cdNSr;
       cdNSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNSr: // global
           (_cdNSk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdNSk::I64 == 0) goto cdNSm; else goto cdNSl;
       cdNSm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdNSl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdNSk::I64;
           I64[Sp - 24] = block_cdNSn_info;
           R2 = lvl25_rdL8R_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimum1_info" {
     Data.Bifoldable.biminimum1_info:
         const Data.Bifoldable.biminimum1_entry;
         const 0;
         const 140741783322645;
         const SdNkq_srt+32;
 },
 _cdNSn() //  [R1]
         { []
         }
     {offset
       cdNSn: // global
           R3 = R1;
           R2 = lvl24_rdL8Q_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdNSn_info" {
     block_cdNSn_info:
         const _cdNSn;
         const 0;
         const 140741783322654;
         const SdNkq_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.044293131 UTC

[section ""data" . Data.Bifoldable.biminimum_closure" {
     Data.Bifoldable.biminimum_closure:
         const Data.Bifoldable.biminimum_info;
         const 0;
 },
 sat_sdNc4_entry() //  [R1]
         { []
         }
     {offset
       cdNST: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNSU; else goto cdNSV;
       cdNSU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNSV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNc4_info" {
     sat_sdNc4_info:
         const sat_sdNc4_entry;
         const 1;
         const 4294967312;
         const SdNkq_srt+160;
 },
 g_sdNc3_entry() //  [R1]
         { []
         }
     {offset
       cdNSW: // global
           _sdNc3::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdNSX; else goto cdNSY;
       cdNSY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNT0; else goto cdNSZ;
       cdNT0: // global
           HpAlloc = 24;
           goto cdNSX;
       cdNSX: // global
           R1 = _sdNc3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNSZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdNc3::P64;
           _sdNc1::P64 = P64[_sdNc3::P64 + 16];
           _sdNc2::P64 = P64[_sdNc3::P64 + 24];
           I64[Hp - 16] = sat_sdNc4_info;
           P64[Hp] = _sdNc2::P64;
           R2 = _sdNc1::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = GHC.Base.Just_closure+1;
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdNc3_info" {
     g_sdNc3_info:
         const g_sdNc3_entry;
         const 2;
         const 4294967314;
         const SdNkq_srt+160;
 },
 sat_sdNc8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNTc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNTd; else goto cdNTe;
       cdNTd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNTe: // global
           I64[Sp - 8] = block_cdNT6_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNc8_info" {
     sat_sdNc8_info:
         const sat_sdNc8_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdNkq_srt+168;
 },
 _cdNT6() //  [R1]
         { []
         }
     {offset
       cdNT6: // global
           if (R1 & 7 == 1) goto cdNT9; else goto cdNTa;
       cdNT9: // global
           R1 = Data.Bifoldable.biminimum1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdNTa: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNT6_info" {
     block_cdNT6_info:
         const _cdNT6;
         const 0;
         const 4294967326;
         const SdNkq_srt+168;
 },
 Data.Bifoldable.biminimum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNTl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNTp; else goto cdNTo;
       cdNTp: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.biminimum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNTo: // global
           I64[Hp - 40] = g_sdNc3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdNc8_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biminimum_info" {
     Data.Bifoldable.biminimum_info:
         const Data.Bifoldable.biminimum_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SdNkq_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.056585227 UTC

[section ""data" . Data.Bifoldable.biproduct2_closure" {
     Data.Bifoldable.biproduct2_closure:
         const Data.Bifoldable.biproduct2_info;
 },
 Data.Bifoldable.biproduct2_entry() //  [R2]
         { []
         }
     {offset
       cdNU3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct2_info" {
     Data.Bifoldable.biproduct2_info:
         const Data.Bifoldable.biproduct2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.061567488 UTC

[section ""data" . Data.Bifoldable.bisum1_closure" {
     Data.Bifoldable.bisum1_closure:
         const Data.Bifoldable.bisum1_info;
         const 0;
 },
 sat_sdNcc_entry() //  [R1]
         { []
         }
     {offset
       cdNUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNUj; else goto cdNUk;
       cdNUj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNUk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNcc_info" {
     sat_sdNcc_info:
         const sat_sdNcc_entry;
         const 1;
         const 4294967312;
         const SdNkq_srt+184;
 },
 Data.Bifoldable.bisum1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNUl: // global
           _sdNcb::P64 = R3;
           _sdNca::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNUm; else goto cdNUn;
       cdNUn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNUp; else goto cdNUo;
       cdNUp: // global
           HpAlloc = 24;
           goto cdNUm;
       cdNUm: // global
           R3 = _sdNcb::P64;
           R2 = _sdNca::P64;
           R1 = Data.Bifoldable.bisum1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNUo: // global
           I64[Hp - 16] = sat_sdNcc_info;
           P64[Hp] = _sdNcb::P64;
           R2 = _sdNca::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Data.Bifoldable.biproduct2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biproduct2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisum1_info" {
     Data.Bifoldable.bisum1_info:
         const Data.Bifoldable.bisum1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdNkq_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.068369344 UTC

[section ""data" . Data.Bifoldable.bisum_closure" {
     Data.Bifoldable.bisum_closure:
         const Data.Bifoldable.bisum_info;
         const 0;
 },
 Data.Bifoldable.bisum_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNUJ: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bisum1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bisum_info" {
     Data.Bifoldable.bisum_info:
         const Data.Bifoldable.bisum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdNkq_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.074116182 UTC

[section ""data" . Data.Bifoldable.biproduct1_closure" {
     Data.Bifoldable.biproduct1_closure:
         const Data.Bifoldable.biproduct1_info;
         const 0;
 },
 sat_sdNcf_entry() //  [R1]
         { []
         }
     {offset
       cdNUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNUZ; else goto cdNV0;
       cdNUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdNcf_info" {
     sat_sdNcf_info:
         const sat_sdNcf_entry;
         const 1;
         const 4294967312;
         const SdNkq_srt+200;
 },
 Data.Bifoldable.biproduct1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNV1: // global
           _sdNce::P64 = R3;
           _sdNcd::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNV2; else goto cdNV3;
       cdNV3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdNV5; else goto cdNV4;
       cdNV5: // global
           HpAlloc = 24;
           goto cdNV2;
       cdNV2: // global
           R3 = _sdNce::P64;
           R2 = _sdNcd::P64;
           R1 = Data.Bifoldable.biproduct1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNV4: // global
           I64[Hp - 16] = sat_sdNcf_info;
           P64[Hp] = _sdNce::P64;
           R2 = _sdNcd::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Data.Bifoldable.biproduct2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biproduct2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct1_info" {
     Data.Bifoldable.biproduct1_info:
         const Data.Bifoldable.biproduct1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdNkq_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.08210423 UTC

[section ""data" . Data.Bifoldable.biproduct_closure" {
     Data.Bifoldable.biproduct_closure:
         const Data.Bifoldable.biproduct_info;
         const 0;
 },
 Data.Bifoldable.biproduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cdNVp: // global
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biproduct1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biproduct_info" {
     Data.Bifoldable.biproduct_info:
         const Data.Bifoldable.biproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdNkq_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.086193115 UTC

[section ""data" . Data.Bifoldable.biconcatMap_closure" {
     Data.Bifoldable.biconcatMap_closure:
         const Data.Bifoldable.biconcatMap_info;
         const 0;
 },
 Data.Bifoldable.biconcatMap_entry() //  [R2]
         { []
         }
     {offset
       cdNVA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNVB; else goto cdNVC;
       cdNVB: // global
           R2 = R2;
           R1 = Data.Bifoldable.biconcatMap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNVC: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Base.$fMonoid[]_closure;
           Sp = Sp - 16;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biconcatMap_info" {
     Data.Bifoldable.biconcatMap_info:
         const Data.Bifoldable.biconcatMap_entry;
         const 0;
         const 70373039144974;
         const 4294967301;
         const SdNkq_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.090653321 UTC

[section ""data" . Data.Bifoldable.biand2_closure" {
     Data.Bifoldable.biand2_closure:
         const Data.Bifoldable.biand2_info;
 },
 Data.Bifoldable.biand2_entry() //  [R2]
         { []
         }
     {offset
       cdNVO: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand2_info" {
     Data.Bifoldable.biand2_info:
         const Data.Bifoldable.biand2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.095151683 UTC

[section ""data" . Data.Bifoldable.biand1_closure" {
     Data.Bifoldable.biand1_closure:
         const Data.Bifoldable.biand1_info;
         const 0;
 },
 Data.Bifoldable.biand1_entry() //  [R2]
         { []
         }
     {offset
       cdNW1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNW2; else goto cdNW3;
       cdNW2: // global
           R2 = R2;
           R1 = Data.Bifoldable.biand1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNW3: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Data.Bifoldable.biand2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biand2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand1_info" {
     Data.Bifoldable.biand1_info:
         const Data.Bifoldable.biand1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdNkq_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.099699534 UTC

[section ""data" . Data.Bifoldable.biand_closure" {
     Data.Bifoldable.biand_closure:
         const Data.Bifoldable.biand_info;
         const 0;
 },
 Data.Bifoldable.biand_entry() //  [R2]
         { []
         }
     {offset
       cdNWh: // global
           R2 = R2;
           call Data.Bifoldable.biand1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biand_info" {
     Data.Bifoldable.biand_info:
         const Data.Bifoldable.biand_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdNkq_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.104713643 UTC

[section ""data" . Data.Bifoldable.bior1_closure" {
     Data.Bifoldable.bior1_closure:
         const Data.Bifoldable.bior1_info;
         const 0;
 },
 Data.Bifoldable.bior1_entry() //  [R2]
         { []
         }
     {offset
       cdNWs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdNWt; else goto cdNWu;
       cdNWt: // global
           R2 = R2;
           R1 = Data.Bifoldable.bior1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNWu: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Data.Bifoldable.biand2_closure+1;
           P64[Sp - 8] = Data.Bifoldable.biand2_closure+1;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bior1_info" {
     Data.Bifoldable.bior1_info:
         const Data.Bifoldable.bior1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdNkq_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.109562127 UTC

[section ""data" . Data.Bifoldable.bior_closure" {
     Data.Bifoldable.bior_closure:
         const Data.Bifoldable.bior_info;
         const 0;
 },
 Data.Bifoldable.bior_entry() //  [R2]
         { []
         }
     {offset
       cdNWI: // global
           R2 = R2;
           call Data.Bifoldable.bior1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bior_info" {
     Data.Bifoldable.bior_info:
         const Data.Bifoldable.bior_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdNkq_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.115473401 UTC

[section ""data" . Data.Bifoldable.biany1_closure" {
     Data.Bifoldable.biany1_closure:
         const Data.Bifoldable.biany1_info;
         const 0;
 },
 sat_sdNcq_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNWY: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcq_info" {
     sat_sdNcq_info:
         const sat_sdNcq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdNco_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNX6: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNco_info" {
     sat_sdNco_info:
         const sat_sdNco_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.biany1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNX9: // global
           _sdNcm::P64 = R4;
           _sdNcl::P64 = R3;
           _sdNck::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNXa; else goto cdNXb;
       cdNXb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdNXd; else goto cdNXc;
       cdNXd: // global
           HpAlloc = 32;
           goto cdNXa;
       cdNXa: // global
           R4 = _sdNcm::P64;
           R3 = _sdNcl::P64;
           R2 = _sdNck::P64;
           R1 = Data.Bifoldable.biany1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNXc: // global
           I64[Hp - 24] = sat_sdNcq_info;
           P64[Hp - 16] = _sdNcm::P64;
           I64[Hp - 8] = sat_sdNco_info;
           P64[Hp] = _sdNcl::P64;
           R2 = _sdNck::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biany1_info" {
     Data.Bifoldable.biany1_info:
         const Data.Bifoldable.biany1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdNkq_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.124946255 UTC

[section ""data" . Data.Bifoldable.biany_closure" {
     Data.Bifoldable.biany_closure:
         const Data.Bifoldable.biany_info;
         const 0;
 },
 Data.Bifoldable.biany_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNXz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biany1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biany_info" {
     Data.Bifoldable.biany_info:
         const Data.Bifoldable.biany_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdNkq_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.130307937 UTC

[section ""data" . Data.Bifoldable.bielem1_closure" {
     Data.Bifoldable.bielem1_closure:
         const Data.Bifoldable.bielem1_info;
         const 0;
 },
 sat_sdNcx_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNXP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNXQ; else goto cdNXR;
       cdNXQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNXR: // global
           _sdNcw::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sdNcw::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcx_info" {
     sat_sdNcx_info:
         const sat_sdNcx_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdNcv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNXX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdNXY; else goto cdNXZ;
       cdNXY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNXZ: // global
           _sdNcu::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sdNcu::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcv_info" {
     sat_sdNcv_info:
         const sat_sdNcv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bifoldable.bielem1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNY0: // global
           _sdNct::P64 = R4;
           _sdNcs::P64 = R3;
           _sdNcr::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNY1; else goto cdNY2;
       cdNY2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdNY4; else goto cdNY3;
       cdNY4: // global
           HpAlloc = 48;
           goto cdNY1;
       cdNY1: // global
           R4 = _sdNct::P64;
           R3 = _sdNcs::P64;
           R2 = _sdNcr::P64;
           R1 = Data.Bifoldable.bielem1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNY3: // global
           I64[Hp - 40] = sat_sdNcx_info;
           P64[Hp - 32] = _sdNcs::P64;
           P64[Hp - 24] = _sdNct::P64;
           I64[Hp - 16] = sat_sdNcv_info;
           P64[Hp - 8] = _sdNcs::P64;
           P64[Hp] = _sdNct::P64;
           R2 = _sdNcr::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bielem1_info" {
     Data.Bifoldable.bielem1_info:
         const Data.Bifoldable.bielem1_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SdNkq_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.139110372 UTC

[section ""data" . Data.Bifoldable.bielem_closure" {
     Data.Bifoldable.bielem_closure:
         const Data.Bifoldable.bielem_info;
         const 0;
 },
 Data.Bifoldable.bielem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNYw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.bielem1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bielem_info" {
     Data.Bifoldable.bielem_info:
         const Data.Bifoldable.bielem_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdNkq_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.145202432 UTC

[section ""data" . Data.Bifoldable.binotElem_closure" {
     Data.Bifoldable.binotElem_closure:
         const Data.Bifoldable.binotElem_info;
         const 0;
 },
 g_sdNcB_entry() //  [R1]
         { []
         }
     {offset
       cdNYL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdNYM; else goto cdNYN;
       cdNYM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdNYN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bifoldable.bielem1_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdNcB_info" {
     g_sdNcB_info:
         const g_sdNcB_entry;
         const 3;
         const 4294967311;
         const SdNkq_srt+264;
 },
 sat_sdNcE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdNZ0; else goto cdNZ1;
       cdNZ0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdNZ1: // global
           I64[Sp - 8] = block_cdNYT_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcE_info" {
     sat_sdNcE_info:
         const sat_sdNcE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdNYT() //  [R1]
         { []
         }
     {offset
       cdNYT: // global
           if (R1 & 7 == 1) goto cdNYW; else goto cdNYX;
       cdNYW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdNYX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdNYT_info" {
     block_cdNYT_info:
         const _cdNYT;
         const 0;
         const 30;
 },
 Data.Bifoldable.binotElem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNZ8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdNZc; else goto cdNZb;
       cdNZc: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.binotElem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdNZb: // global
           I64[Hp - 48] = g_sdNcB_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdNcE_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.binotElem_info" {
     Data.Bifoldable.binotElem_info:
         const Data.Bifoldable.binotElem_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdNkq_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.157869132 UTC

[section ""data" . Data.Bifoldable.biall1_closure" {
     Data.Bifoldable.biall1_closure:
         const Data.Bifoldable.biall1_info;
         const 0;
 },
 sat_sdNcL_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNZN: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcL_info" {
     sat_sdNcL_info:
         const sat_sdNcL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdNcJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdNZV: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcJ_info" {
     sat_sdNcJ_info:
         const sat_sdNcJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.biall1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdNZY: // global
           _sdNcH::P64 = R4;
           _sdNcG::P64 = R3;
           _sdNcF::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdNZZ; else goto cdO00;
       cdO00: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdO02; else goto cdO01;
       cdO02: // global
           HpAlloc = 32;
           goto cdNZZ;
       cdNZZ: // global
           R4 = _sdNcH::P64;
           R3 = _sdNcG::P64;
           R2 = _sdNcF::P64;
           R1 = Data.Bifoldable.biall1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdO01: // global
           I64[Hp - 24] = sat_sdNcL_info;
           P64[Hp - 16] = _sdNcH::P64;
           I64[Hp - 8] = sat_sdNcJ_info;
           P64[Hp] = _sdNcG::P64;
           R2 = _sdNcF::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAll_closure;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 32;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biall1_info" {
     Data.Bifoldable.biall1_info:
         const Data.Bifoldable.biall1_entry;
         const 0;
         const 554050781198;
         const 12884901911;
         const SdNkq_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.16517783 UTC

[section ""data" . Data.Bifoldable.biall_closure" {
     Data.Bifoldable.biall_closure:
         const Data.Bifoldable.biall_info;
         const 0;
 },
 Data.Bifoldable.biall_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdO0o: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bifoldable.biall1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.biall_info" {
     Data.Bifoldable.biall_info:
         const Data.Bifoldable.biall_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdNkq_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.170727407 UTC

[section ""data" . Data.Bifoldable.bifind_closure" {
     Data.Bifoldable.bifind_closure:
         const Data.Bifoldable.bifind_info;
         const 0;
 },
 finder_sdNcP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdO0O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdO0P; else goto cdO0Q;
       cdO0P: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdO0Q: // global
           I64[Sp - 16] = block_cdO0I_info;
           _sdNcQ::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdNcQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . finder_sdNcP_info" {
     finder_sdNcP_info:
         const finder_sdNcP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdO0I() //  [R1]
         { []
         }
     {offset
       cdO0I: // global
           if (R1 & 7 == 1) goto cdO0L; else goto cdO0M;
       cdO0L: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdO0M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdO0Z; else goto cdO0Y;
       cdO0Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdO0Y: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdO0I_info" {
     block_cdO0I_info:
         const _cdO0I;
         const 1;
         const 30;
 },
 g_sdNcO_entry() //  [R1]
         { []
         }
     {offset
       cdO10: // global
           _sdNcO::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cdO11; else goto cdO12;
       cdO12: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdO14; else goto cdO13;
       cdO14: // global
           HpAlloc = 16;
           goto cdO11;
       cdO11: // global
           R1 = _sdNcO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdO13: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdNcO::P64;
           _sdNcM::P64 = P64[_sdNcO::P64 + 16];
           _sdNcN::P64 = P64[_sdNcO::P64 + 24];
           I64[Hp - 8] = finder_sdNcP_info;
           P64[Hp] = _sdNcN::P64;
           R2 = _sdNcM::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Data.Monoid.$fMonoidFirst_closure;
           _cdO0D::P64 = Hp - 7;
           P64[Sp - 32] = _cdO0D::P64;
           P64[Sp - 24] = _cdO0D::P64;
           Sp = Sp - 48;
           call Data.Bifoldable.bifoldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdNcO_info" {
     g_sdNcO_info:
         const g_sdNcO_entry;
         const 2;
         const 4294967314;
         const SdNkq_srt+288;
 },
 sat_sdNcT_entry() //  [R1, R2]
         { []
         }
     {offset
       cdO1a: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdNcT_info" {
     sat_sdNcT_info:
         const sat_sdNcT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Bifoldable.bifind_entry() //  [R2, R3]
         { []
         }
     {offset
       cdO1d: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdO1h; else goto cdO1g;
       cdO1h: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.bifind_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdO1g: // global
           I64[Hp - 40] = g_sdNcO_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdNcT_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.bifind_info" {
     Data.Bifoldable.bifind_info:
         const Data.Bifoldable.bifind_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdNkq_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.18120914 UTC

[section ""data" . Data.Bifoldable.$trModule3_closure" {
     Data.Bifoldable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.183058585 UTC

[section ""data" . Data.Bifoldable.$trModule1_closure" {
     Data.Bifoldable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.184939648 UTC

[section ""data" . Data.Bifoldable.$trModule_closure" {
     Data.Bifoldable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bifoldable.$trModule3_closure+1;
         const Data.Bifoldable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.187208915 UTC

[section ""data" . $krep_rdL8S_closure" {
     $krep_rdL8S_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.189609632 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable1_closure" {
     Data.Bifoldable.$tcBifoldable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdL8S_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.191236828 UTC

[section ""cstring" . Data.Bifoldable.$tcBifoldable3_bytes" {
     Data.Bifoldable.$tcBifoldable3_bytes:
         I8[] [66,105,102,111,108,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.192936312 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable2_closure" {
     Data.Bifoldable.$tcBifoldable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bifoldable.$tcBifoldable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.194763228 UTC

[section ""data" . Data.Bifoldable.$tcBifoldable_closure" {
     Data.Bifoldable.$tcBifoldable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bifoldable.$trModule_closure+1;
         const Data.Bifoldable.$tcBifoldable2_closure+1;
         const Data.Bifoldable.$tcBifoldable1_closure+4;
         const 13881323671910883383;
         const 7079945659398195047;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.197419662 UTC

[section ""data" . Data.Bifoldable.C:Bifoldable_closure" {
     Data.Bifoldable.C:Bifoldable_closure:
         const Data.Bifoldable.C:Bifoldable_info;
 },
 Data.Bifoldable.C:Bifoldable_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdO23: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdO27; else goto cdO26;
       cdO27: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bifoldable.C:Bifoldable_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdO26: // global
           I64[Hp - 32] = Data.Bifoldable.C:Bifoldable_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.C:Bifoldable_info" {
     Data.Bifoldable.C:Bifoldable_info:
         const Data.Bifoldable.C:Bifoldable_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.201194156 UTC

[section ""cstring" . idO2f_str" {
     idO2f_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,102,111,108,100,97,98,108,101,46,67,58,66,105,102,111,108,100,97,98,108,101]
 },
 Data.Bifoldable.C:Bifoldable_con_entry() //  [R1]
         { []
         }
     {offset
       cdO2e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bifoldable.C:Bifoldable_con_info" {
     Data.Bifoldable.C:Bifoldable_con_info:
         const Data.Bifoldable.C:Bifoldable_con_entry;
         const 4;
         const 1;
         const idO2f_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.204613264 UTC

[section ""relreadonly" . SdNkq_srt" {
     SdNkq_srt:
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Bifoldable.$dmbifoldl_closure;
         const poly_$dMonoid_rdL8r_closure;
         const Data.Bifoldable.$dmbifoldr_closure;
         const GHC.Err.error_closure;
         const lvl10_rdL8C_closure;
         const Data.Bifoldable.bifoldr1_closure;
         const Data.Bifoldable.bifoldr2_closure;
         const Data.Bifoldable.bimaximumBy_closure;
         const Data.Bifoldable.biminimumBy_closure;
         const lvl14_rdL8G_closure;
         const Data.Bifoldable.bifoldl1_closure;
         const Data.Bifoldable.bifoldl2_closure;
         const GHC.Base.$fMonoid[]_closure;
         const Data.Bifoldable.biconcat_closure;
         const lvl20_rdL8M_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Bifoldable.bimaximum1_closure;
         const Data.Bifoldable.bimaximum_closure;
         const lvl24_rdL8Q_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Bifoldable.biminimum1_closure;
         const Data.Bifoldable.biminimum_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Bifoldable.bisum1_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Bifoldable.biproduct1_closure;
         const Data.Bifoldable.biconcatMap_closure;
         const Data.Semigroup.Internal.$fMonoidAll_closure;
         const Data.Bifoldable.biand1_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Bifoldable.bior1_closure;
         const Data.Bifoldable.biany1_closure;
         const Data.Bifoldable.bielem1_closure;
         const Data.Bifoldable.binotElem_closure;
         const Data.Bifoldable.biall1_closure;
         const Data.Monoid.$fMonoidFirst_closure;
         const Data.Bifoldable.bifind_closure;
 }]

