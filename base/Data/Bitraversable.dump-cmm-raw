
==================== Raw Cmm ====================
2018-03-16 16:09:03.519266558 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:03.521189405 UTC

[section ""data" . Data.Bitraversable.$p1Bitraversable_closure" {
     Data.Bitraversable.$p1Bitraversable_closure:
         const Data.Bitraversable.$p1Bitraversable_info;
 },
 Data.Bitraversable.$p1Bitraversable_entry() //  [R2]
         { []
         }
     {offset
       cdOU1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdOU2; else goto cdOU3;
       cdOU2: // global
           R2 = R2;
           R1 = Data.Bitraversable.$p1Bitraversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdOU3: // global
           I64[Sp - 8] = block_cdOTY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udOU7; else goto cdOTZ;
       udOU7: // global
           call _cdOTY(R1) args: 0, res: 0, upd: 0;
       cdOTZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$p1Bitraversable_info" {
     Data.Bitraversable.$p1Bitraversable_info:
         const Data.Bitraversable.$p1Bitraversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdOTY() //  [R1]
         { []
         }
     {offset
       cdOTY: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdOTY_info" {
     block_cdOTY_info:
         const _cdOTY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.527141679 UTC

[section ""data" . Data.Bitraversable.$p2Bitraversable_closure" {
     Data.Bitraversable.$p2Bitraversable_closure:
         const Data.Bitraversable.$p2Bitraversable_info;
 },
 Data.Bitraversable.$p2Bitraversable_entry() //  [R2]
         { []
         }
     {offset
       cdOUq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdOUr; else goto cdOUs;
       cdOUr: // global
           R2 = R2;
           R1 = Data.Bitraversable.$p2Bitraversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdOUs: // global
           I64[Sp - 8] = block_cdOUn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udOUw; else goto cdOUo;
       udOUw: // global
           call _cdOUn(R1) args: 0, res: 0, upd: 0;
       cdOUo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$p2Bitraversable_info" {
     Data.Bitraversable.$p2Bitraversable_info:
         const Data.Bitraversable.$p2Bitraversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdOUn() //  [R1]
         { []
         }
     {offset
       cdOUn: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdOUn_info" {
     block_cdOUn_info:
         const _cdOUn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.534264031 UTC

[section ""data" . Data.Bitraversable.bitraverse_closure" {
     Data.Bitraversable.bitraverse_closure:
         const Data.Bitraversable.bitraverse_info;
 },
 Data.Bitraversable.bitraverse_entry() //  [R2]
         { []
         }
     {offset
       cdOUP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdOUQ; else goto cdOUR;
       cdOUQ: // global
           R2 = R2;
           R1 = Data.Bitraversable.bitraverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdOUR: // global
           I64[Sp - 8] = block_cdOUM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udOUV; else goto cdOUN;
       udOUV: // global
           call _cdOUM(R1) args: 0, res: 0, upd: 0;
       cdOUN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bitraverse_info" {
     Data.Bitraversable.bitraverse_info:
         const Data.Bitraversable.bitraverse_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdOUM() //  [R1]
         { []
         }
     {offset
       cdOUM: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdOUM_info" {
     block_cdOUM_info:
         const _cdOUM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.540942784 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info;
 },
 sat_sdOy2_entry() //  [R1]
         { []
         }
     {offset
       cdOVe: // global
           _sdOy2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOVf; else goto cdOVg;
       cdOVg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOVi; else goto cdOVh;
       cdOVi: // global
           HpAlloc = 24;
           goto cdOVf;
       cdOVf: // global
           R1 = _sdOy2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOVh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOy2::P64;
           _sdOxR::P64 = P64[_sdOy2::P64 + 16];
           _sdOxS::P64 = P64[_sdOy2::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdOxS::P64;
           R2 = Hp - 16;
           R1 = _sdOxR::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOy2_info" {
     sat_sdOy2_info:
         const sat_sdOy2_entry;
         const 2;
         const 18;
 },
 sat_sdOxX_entry() //  [R1]
         { []
         }
     {offset
       cdOVo: // global
           _sdOxX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOVp; else goto cdOVq;
       cdOVq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOVs; else goto cdOVr;
       cdOVs: // global
           HpAlloc = 24;
           goto cdOVp;
       cdOVp: // global
           R1 = _sdOxX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOVr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOxX::P64;
           _sdOxQ::P64 = P64[_sdOxX::P64 + 16];
           _sdOxS::P64 = P64[_sdOxX::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdOxS::P64;
           R2 = Hp - 16;
           R1 = _sdOxQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOxX_info" {
     sat_sdOxX_info:
         const sat_sdOxX_entry;
         const 2;
         const 18;
 },
 Data.Bitraversable.$fBitraversable(,)_$cbitraverse_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cdOVt: // global
           _sdOxS::P64 = R5;
           _sdOxR::P64 = R4;
           _sdOxQ::P64 = R3;
           _sdOxP::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdOVu; else goto cdOVv;
       cdOVv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdOVx; else goto cdOVw;
       cdOVx: // global
           HpAlloc = 64;
           goto cdOVu;
       cdOVu: // global
           R5 = _sdOxS::P64;
           R4 = _sdOxR::P64;
           R3 = _sdOxQ::P64;
           R2 = _sdOxP::P64;
           R1 = Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOVw: // global
           I64[Hp - 56] = sat_sdOy2_info;
           P64[Hp - 40] = _sdOxR::P64;
           P64[Hp - 32] = _sdOxS::P64;
           I64[Hp - 24] = sat_sdOxX_info;
           P64[Hp - 8] = _sdOxQ::P64;
           P64[Hp] = _sdOxS::P64;
           R2 = _sdOxP::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.548677203 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,)_closure" {
     Data.Bitraversable.$fBitraversable(,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,)_closure;
         const Data.Bifoldable.$fBifoldable(,)_closure;
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.553380353 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info;
 },
 sat_sdOyo_entry() //  [R1]
         { []
         }
     {offset
       cdOVX: // global
           _sdOyo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOVY; else goto cdOVZ;
       cdOVZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOW1; else goto cdOW0;
       cdOW1: // global
           HpAlloc = 24;
           goto cdOVY;
       cdOVY: // global
           R1 = _sdOyo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOW0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOyo::P64;
           _sdOy5::P64 = P64[_sdOyo::P64 + 16];
           _sdOy6::P64 = P64[_sdOyo::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdOy6::P64;
           R2 = Hp - 16;
           R1 = _sdOy5::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOyo_info" {
     sat_sdOyo_info:
         const sat_sdOyo_entry;
         const 2;
         const 18;
 },
 sat_sdOyi_entry() //  [R1]
         { []
         }
     {offset
       cdOW7: // global
           _sdOyi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOW8; else goto cdOW9;
       cdOW9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOWb; else goto cdOWa;
       cdOWb: // global
           HpAlloc = 24;
           goto cdOW8;
       cdOW8: // global
           R1 = _sdOyi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOWa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOyi::P64;
           _sdOy4::P64 = P64[_sdOyi::P64 + 16];
           _sdOy6::P64 = P64[_sdOyi::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdOy6::P64;
           R2 = Hp - 16;
           R1 = _sdOy4::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOyi_info" {
     sat_sdOyi_info:
         const sat_sdOyi_entry;
         const 2;
         const 18;
 },
 sat_sdOyc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdOWj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdOWn; else goto cdOWm;
       cdOWn: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOWm: // global
           _sdOyb::P64 = P64[R1 + 6];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _sdOyb::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOyc_info" {
     sat_sdOyc_info:
         const sat_sdOyc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdOWo: // global
           _sdOy6::P64 = R5;
           _sdOy5::P64 = R4;
           _sdOy4::P64 = R3;
           _sdOy3::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdOWp; else goto cdOWq;
       cdOWq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdOWs; else goto cdOWr;
       cdOWs: // global
           HpAlloc = 104;
           goto cdOWp;
       cdOWp: // global
           R5 = _sdOy6::P64;
           R4 = _sdOy5::P64;
           R3 = _sdOy4::P64;
           R2 = _sdOy3::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOWr: // global
           I64[Hp - 96] = sat_sdOyo_info;
           P64[Hp - 80] = _sdOy5::P64;
           P64[Hp - 72] = _sdOy6::P64;
           I64[Hp - 64] = sat_sdOyi_info;
           P64[Hp - 48] = _sdOy4::P64;
           P64[Hp - 40] = _sdOy6::P64;
           I64[Hp - 32] = stg_sel_0_upd_info;
           P64[Hp - 16] = _sdOy6::P64;
           I64[Hp - 8] = sat_sdOyc_info;
           P64[Hp] = Hp - 32;
           R2 = _sdOy3::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 96;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.564300797 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.568650876 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info;
 },
 sat_sdOyT_entry() //  [R1]
         { []
         }
     {offset
       cdOWY: // global
           _sdOyT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOWZ; else goto cdOX0;
       cdOX0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOX2; else goto cdOX1;
       cdOX2: // global
           HpAlloc = 24;
           goto cdOWZ;
       cdOWZ: // global
           R1 = _sdOyT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOX1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOyT::P64;
           _sdOyr::P64 = P64[_sdOyT::P64 + 16];
           _sdOys::P64 = P64[_sdOyT::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdOys::P64;
           R2 = Hp - 16;
           R1 = _sdOyr::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOyT_info" {
     sat_sdOyT_info:
         const sat_sdOyT_entry;
         const 2;
         const 18;
 },
 sat_sdOyM_entry() //  [R1]
         { []
         }
     {offset
       cdOX8: // global
           _sdOyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOX9; else goto cdOXa;
       cdOXa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOXc; else goto cdOXb;
       cdOXc: // global
           HpAlloc = 24;
           goto cdOX9;
       cdOX9: // global
           R1 = _sdOyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOXb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOyM::P64;
           _sdOyq::P64 = P64[_sdOyM::P64 + 16];
           _sdOys::P64 = P64[_sdOyM::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdOys::P64;
           R2 = Hp - 16;
           R1 = _sdOyq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOyM_info" {
     sat_sdOyM_info:
         const sat_sdOyM_entry;
         const 2;
         const 18;
 },
 sat_sdOyF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdOXl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdOXp; else goto cdOXo;
       cdOXp: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOXo: // global
           _sdOyy::P64 = P64[R1 + 6];
           _sdOyE::P64 = P64[R1 + 14];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = _sdOyy::P64;
           P64[Hp - 16] = _sdOyE::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOyF_info" {
     sat_sdOyF_info:
         const sat_sdOyF_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdOXq: // global
           _sdOys::P64 = R5;
           _sdOyr::P64 = R4;
           _sdOyq::P64 = R3;
           _sdOyp::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdOXr; else goto cdOXs;
       cdOXs: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdOXu; else goto cdOXt;
       cdOXu: // global
           HpAlloc = 136;
           goto cdOXr;
       cdOXr: // global
           R5 = _sdOys::P64;
           R4 = _sdOyr::P64;
           R3 = _sdOyq::P64;
           R2 = _sdOyp::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOXt: // global
           I64[Hp - 128] = sat_sdOyT_info;
           P64[Hp - 112] = _sdOyr::P64;
           P64[Hp - 104] = _sdOys::P64;
           I64[Hp - 96] = sat_sdOyM_info;
           P64[Hp - 80] = _sdOyq::P64;
           P64[Hp - 72] = _sdOys::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdOys::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdOys::P64;
           I64[Hp - 16] = sat_sdOyF_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = _sdOyp::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 14;
           P64[Sp - 16] = Hp - 96;
           P64[Sp - 8] = Hp - 128;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.580259166 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.586737042 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info;
 },
 sat_sdOzz_entry() //  [R1]
         { []
         }
     {offset
       cdOY1: // global
           _sdOzz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOY2; else goto cdOY3;
       cdOY3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOY5; else goto cdOY4;
       cdOY5: // global
           HpAlloc = 24;
           goto cdOY2;
       cdOY2: // global
           R1 = _sdOzz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOY4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOzz::P64;
           _sdOyW::P64 = P64[_sdOzz::P64 + 16];
           _sdOyX::P64 = P64[_sdOzz::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdOyX::P64;
           R2 = Hp - 16;
           R1 = _sdOyW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOzz_info" {
     sat_sdOzz_info:
         const sat_sdOzz_entry;
         const 2;
         const 18;
 },
 sat_sdOzr_entry() //  [R1]
         { []
         }
     {offset
       cdOYb: // global
           _sdOzr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOYc; else goto cdOYd;
       cdOYd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOYf; else goto cdOYe;
       cdOYf: // global
           HpAlloc = 24;
           goto cdOYc;
       cdOYc: // global
           R1 = _sdOzr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOYe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOzr::P64;
           _sdOyV::P64 = P64[_sdOzr::P64 + 16];
           _sdOyX::P64 = P64[_sdOzr::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdOyX::P64;
           R2 = Hp - 16;
           R1 = _sdOyV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOzr_info" {
     sat_sdOzr_info:
         const sat_sdOzr_entry;
         const 2;
         const 18;
 },
 sat_sdOzj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdOYp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdOYt; else goto cdOYs;
       cdOYt: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOYs: // global
           _sdOz4::P64 = P64[R1 + 6];
           _sdOzb::P64 = P64[R1 + 14];
           _sdOzi::P64 = P64[R1 + 22];
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = _sdOz4::P64;
           P64[Hp - 24] = _sdOzb::P64;
           P64[Hp - 16] = _sdOzi::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOzj_info" {
     sat_sdOzj_info:
         const sat_sdOzj_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdOYu: // global
           _sdOyX::P64 = R5;
           _sdOyW::P64 = R4;
           _sdOyV::P64 = R3;
           _sdOyU::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdOYv; else goto cdOYw;
       cdOYw: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdOYy; else goto cdOYx;
       cdOYy: // global
           HpAlloc = 168;
           goto cdOYv;
       cdOYv: // global
           R5 = _sdOyX::P64;
           R4 = _sdOyW::P64;
           R3 = _sdOyV::P64;
           R2 = _sdOyU::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOYx: // global
           I64[Hp - 160] = sat_sdOzz_info;
           P64[Hp - 144] = _sdOyW::P64;
           P64[Hp - 136] = _sdOyX::P64;
           I64[Hp - 128] = sat_sdOzr_info;
           P64[Hp - 112] = _sdOyV::P64;
           P64[Hp - 104] = _sdOyX::P64;
           I64[Hp - 96] = stg_sel_2_upd_info;
           P64[Hp - 80] = _sdOyX::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _sdOyX::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _sdOyX::P64;
           I64[Hp - 24] = sat_sdOzj_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R2 = _sdOyU::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = Hp - 128;
           P64[Sp - 8] = Hp - 160;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.599187479 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.604204623 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info;
 },
 sat_sdOAs_entry() //  [R1]
         { []
         }
     {offset
       cdOZ6: // global
           _sdOAs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOZ7; else goto cdOZ8;
       cdOZ8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOZa; else goto cdOZ9;
       cdOZa: // global
           HpAlloc = 24;
           goto cdOZ7;
       cdOZ7: // global
           R1 = _sdOAs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOZ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOAs::P64;
           _sdOzC::P64 = P64[_sdOAs::P64 + 16];
           _sdOzD::P64 = P64[_sdOAs::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdOzD::P64;
           R2 = Hp - 16;
           R1 = _sdOzC::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOAs_info" {
     sat_sdOAs_info:
         const sat_sdOAs_entry;
         const 2;
         const 18;
 },
 sat_sdOAj_entry() //  [R1]
         { []
         }
     {offset
       cdOZg: // global
           _sdOAj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdOZh; else goto cdOZi;
       cdOZi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdOZk; else goto cdOZj;
       cdOZk: // global
           HpAlloc = 24;
           goto cdOZh;
       cdOZh: // global
           R1 = _sdOAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdOZj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOAj::P64;
           _sdOzB::P64 = P64[_sdOAj::P64 + 16];
           _sdOzD::P64 = P64[_sdOAj::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdOzD::P64;
           R2 = Hp - 16;
           R1 = _sdOzB::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOAj_info" {
     sat_sdOAj_info:
         const sat_sdOAj_entry;
         const 2;
         const 18;
 },
 sat_sdOAa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdOZv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdOZz; else goto cdOZy;
       cdOZz: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOZy: // global
           _sdOzL::P64 = P64[R1 + 6];
           _sdOzT::P64 = P64[R1 + 14];
           _sdOA1::P64 = P64[R1 + 22];
           _sdOA9::P64 = P64[R1 + 30];
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = _sdOzL::P64;
           P64[Hp - 32] = _sdOzT::P64;
           P64[Hp - 24] = _sdOA1::P64;
           P64[Hp - 16] = _sdOA9::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOAa_info" {
     sat_sdOAa_info:
         const sat_sdOAa_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cdOZA: // global
           _sdOzD::P64 = R5;
           _sdOzC::P64 = R4;
           _sdOzB::P64 = R3;
           _sdOzA::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdOZB; else goto cdOZC;
       cdOZC: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cdOZE; else goto cdOZD;
       cdOZE: // global
           HpAlloc = 200;
           goto cdOZB;
       cdOZB: // global
           R5 = _sdOzD::P64;
           R4 = _sdOzC::P64;
           R3 = _sdOzB::P64;
           R2 = _sdOzA::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdOZD: // global
           I64[Hp - 192] = sat_sdOAs_info;
           P64[Hp - 176] = _sdOzC::P64;
           P64[Hp - 168] = _sdOzD::P64;
           I64[Hp - 160] = sat_sdOAj_info;
           P64[Hp - 144] = _sdOzB::P64;
           P64[Hp - 136] = _sdOzD::P64;
           I64[Hp - 128] = stg_sel_3_upd_info;
           P64[Hp - 112] = _sdOzD::P64;
           I64[Hp - 104] = stg_sel_2_upd_info;
           P64[Hp - 88] = _sdOzD::P64;
           I64[Hp - 80] = stg_sel_1_upd_info;
           P64[Hp - 64] = _sdOzD::P64;
           I64[Hp - 56] = stg_sel_0_upd_info;
           P64[Hp - 40] = _sdOzD::P64;
           I64[Hp - 32] = sat_sdOAa_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R2 = _sdOzA::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 30;
           P64[Sp - 16] = Hp - 160;
           P64[Sp - 8] = Hp - 192;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.615528134 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.620835822 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info;
 },
 sat_sdOBA_entry() //  [R1]
         { []
         }
     {offset
       cdP0d: // global
           _sdOBA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdP0e; else goto cdP0f;
       cdP0f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdP0h; else goto cdP0g;
       cdP0h: // global
           HpAlloc = 24;
           goto cdP0e;
       cdP0e: // global
           R1 = _sdOBA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdP0g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOBA::P64;
           _sdOAv::P64 = P64[_sdOBA::P64 + 16];
           _sdOAw::P64 = P64[_sdOBA::P64 + 24];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdOAw::P64;
           R2 = Hp - 16;
           R1 = _sdOAv::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOBA_info" {
     sat_sdOBA_info:
         const sat_sdOBA_entry;
         const 2;
         const 18;
 },
 sat_sdOBq_entry() //  [R1]
         { []
         }
     {offset
       cdP0n: // global
           _sdOBq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdP0o; else goto cdP0p;
       cdP0p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdP0r; else goto cdP0q;
       cdP0r: // global
           HpAlloc = 24;
           goto cdP0o;
       cdP0o: // global
           R1 = _sdOBq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdP0q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdOBq::P64;
           _sdOAu::P64 = P64[_sdOBq::P64 + 16];
           _sdOAw::P64 = P64[_sdOBq::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdOAw::P64;
           R2 = Hp - 16;
           R1 = _sdOAu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOBq_info" {
     sat_sdOBq_info:
         const sat_sdOBq_entry;
         const 2;
         const 18;
 },
 sat_sdOBg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdP0D: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdP0H; else goto cdP0G;
       cdP0H: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP0G: // global
           _sdOAF::P64 = P64[R1 + 6];
           _sdOAO::P64 = P64[R1 + 14];
           _sdOAX::P64 = P64[R1 + 22];
           _sdOB6::P64 = P64[R1 + 30];
           _sdOBf::P64 = P64[R1 + 38];
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = _sdOAF::P64;
           P64[Hp - 40] = _sdOAO::P64;
           P64[Hp - 32] = _sdOAX::P64;
           P64[Hp - 24] = _sdOB6::P64;
           P64[Hp - 16] = _sdOBf::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOBg_info" {
     sat_sdOBg_info:
         const sat_sdOBg_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_entry() //  [R2,
                                                                      R3, R4, R5]
         { []
         }
     {offset
       cdP0I: // global
           _sdOAw::P64 = R5;
           _sdOAv::P64 = R4;
           _sdOAu::P64 = R3;
           _sdOAt::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdP0J; else goto cdP0K;
       cdP0K: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdP0M; else goto cdP0L;
       cdP0M: // global
           HpAlloc = 232;
           goto cdP0J;
       cdP0J: // global
           R5 = _sdOAw::P64;
           R4 = _sdOAv::P64;
           R3 = _sdOAu::P64;
           R2 = _sdOAt::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP0L: // global
           I64[Hp - 224] = sat_sdOBA_info;
           P64[Hp - 208] = _sdOAv::P64;
           P64[Hp - 200] = _sdOAw::P64;
           I64[Hp - 192] = sat_sdOBq_info;
           P64[Hp - 176] = _sdOAu::P64;
           P64[Hp - 168] = _sdOAw::P64;
           I64[Hp - 160] = stg_sel_4_upd_info;
           P64[Hp - 144] = _sdOAw::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           P64[Hp - 120] = _sdOAw::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _sdOAw::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdOAw::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdOAw::P64;
           I64[Hp - 40] = sat_sdOBg_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R2 = _sdOAt::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 38;
           P64[Sp - 16] = Hp - 192;
           P64[Sp - 8] = Hp - 224;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.633462543 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.638076876 UTC

[section ""data" . Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableEither_$cbitraverse_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdP1o: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdP1p; else goto cdP1q;
       cdP1p: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP1q: // global
           I64[Sp - 32] = block_cdP1h_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udP1N; else goto cdP1i;
       udP1N: // global
           call _cdP1h(R1) args: 0, res: 0, upd: 0;
       cdP1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableEither_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableEither_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdP1h() //  [R1]
         { []
         }
     {offset
       cdP1h: // global
           _sdOBB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdP1l; else goto cdP1m;
       cdP1l: // global
           Hp = Hp + 32;
           _sdOBF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdP1I; else goto cdP1w;
       cdP1w: // global
           _sdOBG::P64 = P64[_sdOBF::P64 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdOBG::P64;
           I64[Sp + 16] = block_cdP1u_info;
           R2 = _sdOBB::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cdP1m: // global
           Hp = Hp + 32;
           _sdOBF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdP1I; else goto cdP1H;
       cdP1I: // global
           HpAlloc = 32;
           R1 = _sdOBF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdP1H: // global
           _sdOBJ::P64 = P64[_sdOBF::P64 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sdOBJ::P64;
           I64[Sp + 16] = block_cdP1F_info;
           R2 = _sdOBB::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdP1h_info" {
     block_cdP1h_info:
         const _cdP1h;
         const 3;
         const 30;
 },
 _cdP1u() //  [R1]
         { []
         }
     {offset
       cdP1u: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Left_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdP1u_info" {
     block_cdP1u_info:
         const _cdP1u;
         const 1;
         const 30;
 },
 _cdP1F() //  [R1]
         { []
         }
     {offset
       cdP1F: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdP1F_info" {
     block_cdP1F_info:
         const _cdP1F;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.64809685 UTC

[section ""data" . Data.Bitraversable.$fBitraversableEither_closure" {
     Data.Bitraversable.$fBitraversableEither_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorEither_closure;
         const Data.Bifoldable.$fBifoldableEither_closure;
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.650716591 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst1_closure" {
     Data.Bitraversable.$fBitraversableConst1_closure:
         const Data.Bitraversable.$fBitraversableConst1_info;
 },
 Data.Bitraversable.$fBitraversableConst1_entry() //  [R2]
         { []
         }
     {offset
       cdP2e: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableConst1_info" {
     Data.Bitraversable.$fBitraversableConst1_info:
         const Data.Bitraversable.$fBitraversableConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.655480257 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableConst_$cbitraverse_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdP2s: // global
           _sdOBQ::P64 = R5;
           _sdOBP::P64 = R4;
           _sdOBO::P64 = R3;
           _sdOBN::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdP2t; else goto cdP2u;
       cdP2u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP2w; else goto cdP2v;
       cdP2w: // global
           HpAlloc = 32;
           goto cdP2t;
       cdP2t: // global
           R5 = _sdOBQ::P64;
           R4 = _sdOBP::P64;
           R3 = _sdOBO::P64;
           R2 = _sdOBN::P64;
           R1 = Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP2v: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdOBO::P64;
           P64[Hp] = _sdOBQ::P64;
           I64[Sp - 16] = block_cdP2q_info;
           R2 = _sdOBN::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableConst_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableConst_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdP2q() //  [R1]
         { []
         }
     {offset
       cdP2q: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Bitraversable.$fBitraversableConst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdP2q_info" {
     block_cdP2q_info:
         const _cdP2q;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.662091081 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst_closure" {
     Data.Bitraversable.$fBitraversableConst_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorConst_closure;
         const Data.Bifoldable.$fBifoldableConst_closure;
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.666231846 UTC

[section ""data" . Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableK1_$cbitraverse_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdP2R: // global
           _sdOBW::P64 = R5;
           _sdOBV::P64 = R4;
           _sdOBU::P64 = R3;
           _sdOBT::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdP2S; else goto cdP2T;
       cdP2T: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP2V; else goto cdP2U;
       cdP2V: // global
           HpAlloc = 32;
           goto cdP2S;
       cdP2S: // global
           R5 = _sdOBW::P64;
           R4 = _sdOBV::P64;
           R3 = _sdOBU::P64;
           R2 = _sdOBT::P64;
           R1 = Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP2U: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdOBU::P64;
           P64[Hp] = _sdOBW::P64;
           I64[Sp - 16] = block_cdP2P_info;
           R2 = _sdOBT::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableK1_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableK1_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdP2P() //  [R1]
         { []
         }
     {offset
       cdP2P: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Bitraversable.$fBitraversableConst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdP2P_info" {
     block_cdP2P_info:
         const _cdP2P;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.67201545 UTC

[section ""data" . Data.Bitraversable.$fBitraversableK1_closure" {
     Data.Bitraversable.$fBitraversableK1_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorK1_closure;
         const Data.Bifoldable.$fBifoldableK1_closure;
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.674644466 UTC

[section ""data" . Data.Bitraversable.bimapM_closure" {
     Data.Bitraversable.bimapM_closure:
         const Data.Bitraversable.bimapM_info;
 },
 Data.Bitraversable.bimapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cdP3d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdP3e; else goto cdP3f;
       cdP3e: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bimapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP3f: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapM_info" {
     Data.Bitraversable.bimapM_info:
         const Data.Bitraversable.bimapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.679262049 UTC

[section ""data" . Data.Bitraversable.bisequence_closure" {
     Data.Bitraversable.bisequence_closure:
         const Data.Bitraversable.bisequence_info;
 },
 Data.Bitraversable.bisequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cdP3p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdP3q; else goto cdP3r;
       cdP3q: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bisequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP3r: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 32;
           call Data.Bitraversable.bitraverse_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bisequence_info" {
     Data.Bitraversable.bisequence_info:
         const Data.Bitraversable.bisequence_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.683483882 UTC

[section ""data" . Data.Bitraversable.bisequenceA_closure" {
     Data.Bitraversable.bisequenceA_closure:
         const Data.Bitraversable.bisequenceA_info;
 },
 Data.Bitraversable.bisequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cdP3B: // global
           R3 = R3;
           R2 = R2;
           call Data.Bitraversable.bisequence_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bisequenceA_info" {
     Data.Bitraversable.bisequenceA_info:
         const Data.Bitraversable.bisequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.690393078 UTC

[section ""data" . Data.Bitraversable.$dmbitraverse_closure" {
     Data.Bitraversable.$dmbitraverse_closure:
         const Data.Bitraversable.$dmbitraverse_info;
 },
 f1_sdOC7_entry() //  [R1]
         { []
         }
     {offset
       cdP3Q: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdP3R; else goto cdP3S;
       cdP3R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdP3S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdOC7_info" {
     f1_sdOC7_info:
         const f1_sdOC7_entry;
         const 2;
         const 18;
 },
 g_sdOC8_entry() //  [R1]
         { []
         }
     {offset
       cdP3Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdP40; else goto cdP41;
       cdP40: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdP41: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdP3X_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Bitraversable.$p1Bitraversable_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sdOC8_info" {
     g_sdOC8_info:
         const g_sdOC8_entry;
         const 3;
         const 15;
 },
 _cdP3X() //  [R1]
         { []
         }
     {offset
       cdP3X: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Data.Bifunctor.bimap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdP3X_info" {
     block_cdP3X_info:
         const _cdP3X;
         const 2;
         const 30;
 },
 sat_sdOCc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdP4b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP4f; else goto cdP4e;
       cdP4f: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdP4e: // global
           _sdOC7::P64 = P64[R1 + 7];
           _sdOC8::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdOC8::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdOC7::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOCc_info" {
     sat_sdOCc_info:
         const sat_sdOCc_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bitraversable.$dmbitraverse_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdP4g: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdP4k; else goto cdP4j;
       cdP4k: // global
           HpAlloc = 96;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.$dmbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP4j: // global
           I64[Hp - 88] = f1_sdOC7_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = g_sdOC8_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sdOCc_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$dmbitraverse_info" {
     Data.Bitraversable.$dmbitraverse_info:
         const Data.Bitraversable.$dmbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.704070914 UTC

[section ""data" . Data.Bitraversable.bifor_closure" {
     Data.Bitraversable.bifor_closure:
         const Data.Bitraversable.bifor_info;
 },
 Data.Bitraversable.bifor_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdP4N: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdP4O; else goto cdP4P;
       cdP4O: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bifor_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP4P: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Bitraversable.bitraverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bifor_info" {
     Data.Bitraversable.bifor_info:
         const Data.Bitraversable.bifor_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.708644226 UTC

[section ""data" . Data.Bitraversable.biforM_closure" {
     Data.Bitraversable.biforM_closure:
         const Data.Bitraversable.biforM_info;
 },
 Data.Bitraversable.biforM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdP4Z: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bitraversable.bifor_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.biforM_info" {
     Data.Bitraversable.biforM_info:
         const Data.Bitraversable.biforM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.71715543 UTC

[section ""data" . Data.Bitraversable.bimapAccumL_closure" {
     Data.Bitraversable.bimapAccumL_closure:
         const Data.Bitraversable.bimapAccumL_info;
         const 0;
 },
 sat_sdOCs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdP5f: // global
           _sdOCr::P64 = R3;
           R3 = R2;
           R2 = _sdOCr::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOCs_info" {
     sat_sdOCs_info:
         const sat_sdOCs_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdOCp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdP5n: // global
           _sdOCo::P64 = R3;
           R3 = R2;
           R2 = _sdOCo::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOCp_info" {
     sat_sdOCp_info:
         const sat_sdOCp_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.bimapAccumL_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdP5q: // global
           _sdOCm::P64 = R6;
           _sdOCl::P64 = R5;
           _sdOCk::P64 = R4;
           _sdOCj::P64 = R3;
           _sdOCi::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdP5r; else goto cdP5s;
       cdP5s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP5u; else goto cdP5t;
       cdP5u: // global
           HpAlloc = 32;
           goto cdP5r;
       cdP5r: // global
           R6 = _sdOCm::P64;
           R5 = _sdOCl::P64;
           R4 = _sdOCk::P64;
           R3 = _sdOCj::P64;
           R2 = _sdOCi::P64;
           R1 = Data.Bitraversable.bimapAccumL_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP5t: // global
           I64[Hp - 24] = sat_sdOCs_info;
           P64[Hp - 16] = _sdOCk::P64;
           I64[Hp - 8] = sat_sdOCp_info;
           P64[Hp] = _sdOCj::P64;
           R2 = _sdOCi::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Utils.$fApplicativeStateL_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdOCm::P64;
           P64[Sp - 8] = _sdOCl::P64;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapAccumL_info" {
     Data.Bitraversable.bimapAccumL_info:
         const Data.Bitraversable.bimapAccumL_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdOK7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.730037842 UTC

[section ""data" . Data.Bitraversable.bimapAccumR_closure" {
     Data.Bitraversable.bimapAccumR_closure:
         const Data.Bitraversable.bimapAccumR_info;
         const 0;
 },
 sat_sdOCD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdP5R: // global
           _sdOCC::P64 = R3;
           R3 = R2;
           R2 = _sdOCC::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOCD_info" {
     sat_sdOCD_info:
         const sat_sdOCD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdOCA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdP5Z: // global
           _sdOCz::P64 = R3;
           R3 = R2;
           R2 = _sdOCz::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdOCA_info" {
     sat_sdOCA_info:
         const sat_sdOCA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.bimapAccumR_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdP62: // global
           _sdOCx::P64 = R6;
           _sdOCw::P64 = R5;
           _sdOCv::P64 = R4;
           _sdOCu::P64 = R3;
           _sdOCt::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdP63; else goto cdP64;
       cdP64: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP66; else goto cdP65;
       cdP66: // global
           HpAlloc = 32;
           goto cdP63;
       cdP63: // global
           R6 = _sdOCx::P64;
           R5 = _sdOCw::P64;
           R4 = _sdOCv::P64;
           R3 = _sdOCu::P64;
           R2 = _sdOCt::P64;
           R1 = Data.Bitraversable.bimapAccumR_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP65: // global
           I64[Hp - 24] = sat_sdOCD_info;
           P64[Hp - 16] = _sdOCv::P64;
           I64[Hp - 8] = sat_sdOCA_info;
           P64[Hp] = _sdOCu::P64;
           R2 = _sdOCt::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Utils.$fApplicativeStateR_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdOCx::P64;
           P64[Sp - 8] = _sdOCw::P64;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapAccumR_info" {
     Data.Bitraversable.bimapAccumR_info:
         const Data.Bitraversable.bimapAccumR_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdOK7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.741150823 UTC

[section ""data" . bimapDefault1_rdOxw_closure" {
     bimapDefault1_rdOxw_closure:
         const bimapDefault1_rdOxw_info;
         const 0;
 },
 bimapDefault1_rdOxw_entry() //  [R2]
         { []
         }
     {offset
       cdP6o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdP6p; else goto cdP6q;
       cdP6p: // global
           R2 = R2;
           R1 = bimapDefault1_rdOxw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdP6q: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Identity.$fApplicativeIdentity_closure;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . bimapDefault1_rdOxw_info" {
     bimapDefault1_rdOxw_info:
         const bimapDefault1_rdOxw_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdOK7_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.748384358 UTC

[section ""data" . Data.Bitraversable.bimapDefault_closure" {
     Data.Bitraversable.bimapDefault_closure:
         const Data.Bitraversable.bimapDefault_info;
         const 0;
 },
 Data.Bitraversable.bimapDefault_entry() //  [R2]
         { []
         }
     {offset
       cdP6A: // global
           R2 = R2;
           call bimapDefault1_rdOxw_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapDefault_info" {
     Data.Bitraversable.bimapDefault_info:
         const Data.Bitraversable.bimapDefault_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdOK7_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.753669849 UTC

[section ""data" . bifoldMapDefault1_rdOxx_closure" {
     bifoldMapDefault1_rdOxx_closure:
         const bifoldMapDefault1_rdOxx_info;
         const 0;
 },
 sat_sdOCH_entry() //  [R1]
         { []
         }
     {offset
       cdP6P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdP6Q; else goto cdP6R;
       cdP6Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdP6R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fApplicativeConst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdOCH_info" {
     sat_sdOCH_info:
         const sat_sdOCH_entry;
         const 1;
         const 4294967312;
         const SdOK7_srt+48;
 },
 bifoldMapDefault1_rdOxx_entry() //  [R2, R3]
         { []
         }
     {offset
       cdP6S: // global
           _sdOCG::P64 = R3;
           _sdOCF::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdP6T; else goto cdP6U;
       cdP6U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdP6W; else goto cdP6V;
       cdP6W: // global
           HpAlloc = 24;
           goto cdP6T;
       cdP6T: // global
           R3 = _sdOCG::P64;
           R2 = _sdOCF::P64;
           R1 = bifoldMapDefault1_rdOxx_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP6V: // global
           I64[Hp - 16] = sat_sdOCH_info;
           P64[Hp] = _sdOCG::P64;
           R2 = _sdOCF::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . bifoldMapDefault1_rdOxx_info" {
     bifoldMapDefault1_rdOxx_info:
         const bifoldMapDefault1_rdOxx_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdOK7_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.761183819 UTC

[section ""data" . Data.Bitraversable.bifoldMapDefault_closure" {
     Data.Bitraversable.bifoldMapDefault_closure:
         const Data.Bitraversable.bifoldMapDefault_info;
         const 0;
 },
 Data.Bitraversable.bifoldMapDefault_entry() //  [R2, R3]
         { []
         }
     {offset
       cdP7b: // global
           R3 = R3;
           R2 = R2;
           call bifoldMapDefault1_rdOxx_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bifoldMapDefault_info" {
     Data.Bitraversable.bifoldMapDefault_info:
         const Data.Bitraversable.bifoldMapDefault_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdOK7_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.764955869 UTC

[section ""cstring" . Data.Bitraversable.$trModule4_bytes" {
     Data.Bitraversable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.767498113 UTC

[section ""data" . Data.Bitraversable.$trModule3_closure" {
     Data.Bitraversable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.769629663 UTC

[section ""cstring" . Data.Bitraversable.$trModule2_bytes" {
     Data.Bitraversable.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,116,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.771419487 UTC

[section ""data" . Data.Bitraversable.$trModule1_closure" {
     Data.Bitraversable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.773287585 UTC

[section ""data" . Data.Bitraversable.$trModule_closure" {
     Data.Bitraversable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bitraversable.$trModule3_closure+1;
         const Data.Bitraversable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.77525153 UTC

[section ""data" . $krep_rdOxy_closure" {
     $krep_rdOxy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.777525428 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable1_closure" {
     Data.Bitraversable.$tcBitraversable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdOxy_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.779401989 UTC

[section ""cstring" . Data.Bitraversable.$tcBitraversable3_bytes" {
     Data.Bitraversable.$tcBitraversable3_bytes:
         I8[] [66,105,116,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.781830804 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable2_closure" {
     Data.Bitraversable.$tcBitraversable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$tcBitraversable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.783639365 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable_closure" {
     Data.Bitraversable.$tcBitraversable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bitraversable.$trModule_closure+1;
         const Data.Bitraversable.$tcBitraversable2_closure+1;
         const Data.Bitraversable.$tcBitraversable1_closure+4;
         const 1654555613294690493;
         const 8030854156262073676;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.786316953 UTC

[section ""data" . Data.Bitraversable.C:Bitraversable_closure" {
     Data.Bitraversable.C:Bitraversable_closure:
         const Data.Bitraversable.C:Bitraversable_info;
 },
 Data.Bitraversable.C:Bitraversable_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdP7x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdP7B; else goto cdP7A;
       cdP7B: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.C:Bitraversable_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdP7A: // global
           I64[Hp - 24] = Data.Bitraversable.C:Bitraversable_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.C:Bitraversable_info" {
     Data.Bitraversable.C:Bitraversable_info:
         const Data.Bitraversable.C:Bitraversable_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.79081028 UTC

[section ""cstring" . idOTT_str" {
     idOTT_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,114,97,118,101,114,115,97,98,108,101,46,67,58,66,105,116,114,97,118,101,114,115,97,98,108,101]
 },
 Data.Bitraversable.C:Bitraversable_con_entry() //  [R1]
         { []
         }
     {offset
       cdP7H: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.C:Bitraversable_con_info" {
     Data.Bitraversable.C:Bitraversable_con_info:
         const Data.Bitraversable.C:Bitraversable_con_entry;
         const 3;
         const 1;
         const idOTT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:03.794058336 UTC

[section ""relreadonly" . SdOK7_srt" {
     SdOK7_srt:
         const Data.Functor.Utils.$fApplicativeStateL_closure;
         const Data.Bitraversable.bimapAccumL_closure;
         const Data.Functor.Utils.$fApplicativeStateR_closure;
         const Data.Bitraversable.bimapAccumR_closure;
         const Data.Functor.Identity.$fApplicativeIdentity_closure;
         const bimapDefault1_rdOxw_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const bifoldMapDefault1_rdOxx_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.793435104 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:04.795803495 UTC

[section ""data" . Data.Bitraversable.$p1Bitraversable_closure" {
     Data.Bitraversable.$p1Bitraversable_closure:
         const Data.Bitraversable.$p1Bitraversable_info;
 },
 Data.Bitraversable.$p1Bitraversable_entry() //  [R2]
         { []
         }
     {offset
       cdPd3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdPd4; else goto cdPd5;
       cdPd4: // global
           R2 = R2;
           R1 = Data.Bitraversable.$p1Bitraversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdPd5: // global
           I64[Sp - 8] = block_cdPd0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udPd9; else goto cdPd1;
       udPd9: // global
           call _cdPd0(R1) args: 0, res: 0, upd: 0;
       cdPd1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$p1Bitraversable_info" {
     Data.Bitraversable.$p1Bitraversable_info:
         const Data.Bitraversable.$p1Bitraversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdPd0() //  [R1]
         { []
         }
     {offset
       cdPd0: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPd0_info" {
     block_cdPd0_info:
         const _cdPd0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.803507706 UTC

[section ""data" . Data.Bitraversable.$p2Bitraversable_closure" {
     Data.Bitraversable.$p2Bitraversable_closure:
         const Data.Bitraversable.$p2Bitraversable_info;
 },
 Data.Bitraversable.$p2Bitraversable_entry() //  [R2]
         { []
         }
     {offset
       cdPdt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdPdu; else goto cdPdv;
       cdPdu: // global
           R2 = R2;
           R1 = Data.Bitraversable.$p2Bitraversable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdPdv: // global
           I64[Sp - 8] = block_cdPdq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udPdz; else goto cdPdr;
       udPdz: // global
           call _cdPdq(R1) args: 0, res: 0, upd: 0;
       cdPdr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$p2Bitraversable_info" {
     Data.Bitraversable.$p2Bitraversable_info:
         const Data.Bitraversable.$p2Bitraversable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdPdq() //  [R1]
         { []
         }
     {offset
       cdPdq: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPdq_info" {
     block_cdPdq_info:
         const _cdPdq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.812187057 UTC

[section ""data" . Data.Bitraversable.bitraverse_closure" {
     Data.Bitraversable.bitraverse_closure:
         const Data.Bitraversable.bitraverse_info;
 },
 Data.Bitraversable.bitraverse_entry() //  [R2]
         { []
         }
     {offset
       cdPdT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdPdU; else goto cdPdV;
       cdPdU: // global
           R2 = R2;
           R1 = Data.Bitraversable.bitraverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdPdV: // global
           I64[Sp - 8] = block_cdPdQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udPdZ; else goto cdPdR;
       udPdZ: // global
           call _cdPdQ(R1) args: 0, res: 0, upd: 0;
       cdPdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bitraverse_info" {
     Data.Bitraversable.bitraverse_info:
         const Data.Bitraversable.bitraverse_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdPdQ() //  [R1]
         { []
         }
     {offset
       cdPdQ: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPdQ_info" {
     block_cdPdQ_info:
         const _cdPdQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.82287081 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info;
 },
 sat_sdP8g_entry() //  [R1]
         { []
         }
     {offset
       cdPej: // global
           _sdP8g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPek; else goto cdPel;
       cdPel: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPen; else goto cdPem;
       cdPen: // global
           HpAlloc = 24;
           goto cdPek;
       cdPek: // global
           R1 = _sdP8g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP8g::P64;
           _sdP85::P64 = P64[_sdP8g::P64 + 16];
           _sdP86::P64 = P64[_sdP8g::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdP86::P64;
           R2 = Hp - 16;
           R1 = _sdP85::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP8g_info" {
     sat_sdP8g_info:
         const sat_sdP8g_entry;
         const 2;
         const 18;
 },
 sat_sdP8b_entry() //  [R1]
         { []
         }
     {offset
       cdPet: // global
           _sdP8b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPeu; else goto cdPev;
       cdPev: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPex; else goto cdPew;
       cdPex: // global
           HpAlloc = 24;
           goto cdPeu;
       cdPeu: // global
           R1 = _sdP8b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP8b::P64;
           _sdP84::P64 = P64[_sdP8b::P64 + 16];
           _sdP86::P64 = P64[_sdP8b::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdP86::P64;
           R2 = Hp - 16;
           R1 = _sdP84::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP8b_info" {
     sat_sdP8b_info:
         const sat_sdP8b_entry;
         const 2;
         const 18;
 },
 Data.Bitraversable.$fBitraversable(,)_$cbitraverse_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cdPey: // global
           _sdP86::P64 = R5;
           _sdP85::P64 = R4;
           _sdP84::P64 = R3;
           _sdP83::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPez; else goto cdPeA;
       cdPeA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdPeC; else goto cdPeB;
       cdPeC: // global
           HpAlloc = 64;
           goto cdPez;
       cdPez: // global
           R5 = _sdP86::P64;
           R4 = _sdP85::P64;
           R3 = _sdP84::P64;
           R2 = _sdP83::P64;
           R1 = Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPeB: // global
           I64[Hp - 56] = sat_sdP8g_info;
           P64[Hp - 40] = _sdP85::P64;
           P64[Hp - 32] = _sdP86::P64;
           I64[Hp - 24] = sat_sdP8b_info;
           P64[Hp - 8] = _sdP84::P64;
           P64[Hp] = _sdP86::P64;
           R2 = _sdP83::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.835143279 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,)_closure" {
     Data.Bitraversable.$fBitraversable(,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,)_closure;
         const Data.Bifoldable.$fBifoldable(,)_closure;
         const Data.Bitraversable.$fBitraversable(,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.843036439 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info;
 },
 sat_sdP8C_entry() //  [R1]
         { []
         }
     {offset
       cdPfb: // global
           _sdP8C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPfc; else goto cdPfd;
       cdPfd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPff; else goto cdPfe;
       cdPff: // global
           HpAlloc = 24;
           goto cdPfc;
       cdPfc: // global
           R1 = _sdP8C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPfe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP8C::P64;
           _sdP8j::P64 = P64[_sdP8C::P64 + 16];
           _sdP8k::P64 = P64[_sdP8C::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdP8k::P64;
           R2 = Hp - 16;
           R1 = _sdP8j::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP8C_info" {
     sat_sdP8C_info:
         const sat_sdP8C_entry;
         const 2;
         const 18;
 },
 sat_sdP8w_entry() //  [R1]
         { []
         }
     {offset
       cdPfl: // global
           _sdP8w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPfm; else goto cdPfn;
       cdPfn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPfp; else goto cdPfo;
       cdPfp: // global
           HpAlloc = 24;
           goto cdPfm;
       cdPfm: // global
           R1 = _sdP8w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPfo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP8w::P64;
           _sdP8i::P64 = P64[_sdP8w::P64 + 16];
           _sdP8k::P64 = P64[_sdP8w::P64 + 24];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sdP8k::P64;
           R2 = Hp - 16;
           R1 = _sdP8i::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP8w_info" {
     sat_sdP8w_info:
         const sat_sdP8w_entry;
         const 2;
         const 18;
 },
 sat_sdP8q_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPfx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPfB; else goto cdPfA;
       cdPfB: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPfA: // global
           _sdP8p::P64 = P64[R1 + 6];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _sdP8p::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdP8q_info" {
     sat_sdP8q_info:
         const sat_sdP8q_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdPfC: // global
           _sdP8k::P64 = R5;
           _sdP8j::P64 = R4;
           _sdP8i::P64 = R3;
           _sdP8h::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPfD; else goto cdPfE;
       cdPfE: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdPfG; else goto cdPfF;
       cdPfG: // global
           HpAlloc = 104;
           goto cdPfD;
       cdPfD: // global
           R5 = _sdP8k::P64;
           R4 = _sdP8j::P64;
           R3 = _sdP8i::P64;
           R2 = _sdP8h::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPfF: // global
           I64[Hp - 96] = sat_sdP8C_info;
           P64[Hp - 80] = _sdP8j::P64;
           P64[Hp - 72] = _sdP8k::P64;
           I64[Hp - 64] = sat_sdP8w_info;
           P64[Hp - 48] = _sdP8i::P64;
           P64[Hp - 40] = _sdP8k::P64;
           I64[Hp - 32] = stg_sel_0_upd_info;
           P64[Hp - 16] = _sdP8k::P64;
           I64[Hp - 8] = sat_sdP8q_info;
           P64[Hp] = Hp - 32;
           R2 = _sdP8h::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 6;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 96;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.857472672 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.863681037 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info;
 },
 sat_sdP97_entry() //  [R1]
         { []
         }
     {offset
       cdPgm: // global
           _sdP97::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPgn; else goto cdPgo;
       cdPgo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPgq; else goto cdPgp;
       cdPgq: // global
           HpAlloc = 24;
           goto cdPgn;
       cdPgn: // global
           R1 = _sdP97::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPgp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP97::P64;
           _sdP8F::P64 = P64[_sdP97::P64 + 16];
           _sdP8G::P64 = P64[_sdP97::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdP8G::P64;
           R2 = Hp - 16;
           R1 = _sdP8F::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP97_info" {
     sat_sdP97_info:
         const sat_sdP97_entry;
         const 2;
         const 18;
 },
 sat_sdP90_entry() //  [R1]
         { []
         }
     {offset
       cdPgw: // global
           _sdP90::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPgx; else goto cdPgy;
       cdPgy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPgA; else goto cdPgz;
       cdPgA: // global
           HpAlloc = 24;
           goto cdPgx;
       cdPgx: // global
           R1 = _sdP90::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPgz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP90::P64;
           _sdP8E::P64 = P64[_sdP90::P64 + 16];
           _sdP8G::P64 = P64[_sdP90::P64 + 24];
           I64[Hp - 16] = stg_sel_2_upd_info;
           P64[Hp] = _sdP8G::P64;
           R2 = Hp - 16;
           R1 = _sdP8E::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP90_info" {
     sat_sdP90_info:
         const sat_sdP90_entry;
         const 2;
         const 18;
 },
 sat_sdP8T_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPgJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdPgN; else goto cdPgM;
       cdPgN: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPgM: // global
           _sdP8M::P64 = P64[R1 + 6];
           _sdP8S::P64 = P64[R1 + 14];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = _sdP8M::P64;
           P64[Hp - 16] = _sdP8S::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdP8T_info" {
     sat_sdP8T_info:
         const sat_sdP8T_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdPgO: // global
           _sdP8G::P64 = R5;
           _sdP8F::P64 = R4;
           _sdP8E::P64 = R3;
           _sdP8D::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPgP; else goto cdPgQ;
       cdPgQ: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdPgS; else goto cdPgR;
       cdPgS: // global
           HpAlloc = 136;
           goto cdPgP;
       cdPgP: // global
           R5 = _sdP8G::P64;
           R4 = _sdP8F::P64;
           R3 = _sdP8E::P64;
           R2 = _sdP8D::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPgR: // global
           I64[Hp - 128] = sat_sdP97_info;
           P64[Hp - 112] = _sdP8F::P64;
           P64[Hp - 104] = _sdP8G::P64;
           I64[Hp - 96] = sat_sdP90_info;
           P64[Hp - 80] = _sdP8E::P64;
           P64[Hp - 72] = _sdP8G::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdP8G::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdP8G::P64;
           I64[Hp - 16] = sat_sdP8T_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = _sdP8D::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 14;
           P64[Sp - 16] = Hp - 96;
           P64[Sp - 8] = Hp - 128;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.875734086 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.880069338 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info;
 },
 sat_sdP9N_entry() //  [R1]
         { []
         }
     {offset
       cdPhA: // global
           _sdP9N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPhB; else goto cdPhC;
       cdPhC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPhE; else goto cdPhD;
       cdPhE: // global
           HpAlloc = 24;
           goto cdPhB;
       cdPhB: // global
           R1 = _sdP9N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPhD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP9N::P64;
           _sdP9a::P64 = P64[_sdP9N::P64 + 16];
           _sdP9b::P64 = P64[_sdP9N::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdP9b::P64;
           R2 = Hp - 16;
           R1 = _sdP9a::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP9N_info" {
     sat_sdP9N_info:
         const sat_sdP9N_entry;
         const 2;
         const 18;
 },
 sat_sdP9F_entry() //  [R1]
         { []
         }
     {offset
       cdPhK: // global
           _sdP9F::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPhL; else goto cdPhM;
       cdPhM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPhO; else goto cdPhN;
       cdPhO: // global
           HpAlloc = 24;
           goto cdPhL;
       cdPhL: // global
           R1 = _sdP9F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPhN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdP9F::P64;
           _sdP99::P64 = P64[_sdP9F::P64 + 16];
           _sdP9b::P64 = P64[_sdP9F::P64 + 24];
           I64[Hp - 16] = stg_sel_3_upd_info;
           P64[Hp] = _sdP9b::P64;
           R2 = Hp - 16;
           R1 = _sdP99::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdP9F_info" {
     sat_sdP9F_info:
         const sat_sdP9F_entry;
         const 2;
         const 18;
 },
 sat_sdP9x_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPhY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdPi2; else goto cdPi1;
       cdPi2: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPi1: // global
           _sdP9i::P64 = P64[R1 + 6];
           _sdP9p::P64 = P64[R1 + 14];
           _sdP9w::P64 = P64[R1 + 22];
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = _sdP9i::P64;
           P64[Hp - 24] = _sdP9p::P64;
           P64[Hp - 16] = _sdP9w::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdP9x_info" {
     sat_sdP9x_info:
         const sat_sdP9x_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdPi3: // global
           _sdP9b::P64 = R5;
           _sdP9a::P64 = R4;
           _sdP99::P64 = R3;
           _sdP98::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPi4; else goto cdPi5;
       cdPi5: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdPi7; else goto cdPi6;
       cdPi7: // global
           HpAlloc = 168;
           goto cdPi4;
       cdPi4: // global
           R5 = _sdP9b::P64;
           R4 = _sdP9a::P64;
           R3 = _sdP99::P64;
           R2 = _sdP98::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPi6: // global
           I64[Hp - 160] = sat_sdP9N_info;
           P64[Hp - 144] = _sdP9a::P64;
           P64[Hp - 136] = _sdP9b::P64;
           I64[Hp - 128] = sat_sdP9F_info;
           P64[Hp - 112] = _sdP99::P64;
           P64[Hp - 104] = _sdP9b::P64;
           I64[Hp - 96] = stg_sel_2_upd_info;
           P64[Hp - 80] = _sdP9b::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _sdP9b::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _sdP9b::P64;
           I64[Hp - 24] = sat_sdP9x_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R2 = _sdP98::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = Hp - 128;
           P64[Sp - 8] = Hp - 160;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.89018656 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.895339905 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info;
 },
 sat_sdPaG_entry() //  [R1]
         { []
         }
     {offset
       cdPiR: // global
           _sdPaG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPiS; else goto cdPiT;
       cdPiT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPiV; else goto cdPiU;
       cdPiV: // global
           HpAlloc = 24;
           goto cdPiS;
       cdPiS: // global
           R1 = _sdPaG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPiU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdPaG::P64;
           _sdP9Q::P64 = P64[_sdPaG::P64 + 16];
           _sdP9R::P64 = P64[_sdPaG::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdP9R::P64;
           R2 = Hp - 16;
           R1 = _sdP9Q::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdPaG_info" {
     sat_sdPaG_info:
         const sat_sdPaG_entry;
         const 2;
         const 18;
 },
 sat_sdPax_entry() //  [R1]
         { []
         }
     {offset
       cdPj1: // global
           _sdPax::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPj2; else goto cdPj3;
       cdPj3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPj5; else goto cdPj4;
       cdPj5: // global
           HpAlloc = 24;
           goto cdPj2;
       cdPj2: // global
           R1 = _sdPax::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPj4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdPax::P64;
           _sdP9P::P64 = P64[_sdPax::P64 + 16];
           _sdP9R::P64 = P64[_sdPax::P64 + 24];
           I64[Hp - 16] = stg_sel_4_upd_info;
           P64[Hp] = _sdP9R::P64;
           R2 = Hp - 16;
           R1 = _sdP9P::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdPax_info" {
     sat_sdPax_info:
         const sat_sdPax_entry;
         const 2;
         const 18;
 },
 sat_sdPao_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPjg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdPjk; else goto cdPjj;
       cdPjk: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPjj: // global
           _sdP9Z::P64 = P64[R1 + 6];
           _sdPa7::P64 = P64[R1 + 14];
           _sdPaf::P64 = P64[R1 + 22];
           _sdPan::P64 = P64[R1 + 30];
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = _sdP9Z::P64;
           P64[Hp - 32] = _sdPa7::P64;
           P64[Hp - 24] = _sdPaf::P64;
           P64[Hp - 16] = _sdPan::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPao_info" {
     sat_sdPao_info:
         const sat_sdPao_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cdPjl: // global
           _sdP9R::P64 = R5;
           _sdP9Q::P64 = R4;
           _sdP9P::P64 = R3;
           _sdP9O::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPjm; else goto cdPjn;
       cdPjn: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cdPjp; else goto cdPjo;
       cdPjp: // global
           HpAlloc = 200;
           goto cdPjm;
       cdPjm: // global
           R5 = _sdP9R::P64;
           R4 = _sdP9Q::P64;
           R3 = _sdP9P::P64;
           R2 = _sdP9O::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPjo: // global
           I64[Hp - 192] = sat_sdPaG_info;
           P64[Hp - 176] = _sdP9Q::P64;
           P64[Hp - 168] = _sdP9R::P64;
           I64[Hp - 160] = sat_sdPax_info;
           P64[Hp - 144] = _sdP9P::P64;
           P64[Hp - 136] = _sdP9R::P64;
           I64[Hp - 128] = stg_sel_3_upd_info;
           P64[Hp - 112] = _sdP9R::P64;
           I64[Hp - 104] = stg_sel_2_upd_info;
           P64[Hp - 88] = _sdP9R::P64;
           I64[Hp - 80] = stg_sel_1_upd_info;
           P64[Hp - 64] = _sdP9R::P64;
           I64[Hp - 56] = stg_sel_0_upd_info;
           P64[Hp - 40] = _sdP9R::P64;
           I64[Hp - 32] = sat_sdPao_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R2 = _sdP9O::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 30;
           P64[Sp - 16] = Hp - 160;
           P64[Sp - 8] = Hp - 192;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.905439466 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.909910185 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info;
 },
 sat_sdPbO_entry() //  [R1]
         { []
         }
     {offset
       cdPkb: // global
           _sdPbO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPkc; else goto cdPkd;
       cdPkd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPkf; else goto cdPke;
       cdPkf: // global
           HpAlloc = 24;
           goto cdPkc;
       cdPkc: // global
           R1 = _sdPbO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdPbO::P64;
           _sdPaJ::P64 = P64[_sdPbO::P64 + 16];
           _sdPaK::P64 = P64[_sdPbO::P64 + 24];
           I64[Hp - 16] = stg_sel_6_upd_info;
           P64[Hp] = _sdPaK::P64;
           R2 = Hp - 16;
           R1 = _sdPaJ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdPbO_info" {
     sat_sdPbO_info:
         const sat_sdPbO_entry;
         const 2;
         const 18;
 },
 sat_sdPbE_entry() //  [R1]
         { []
         }
     {offset
       cdPkl: // global
           _sdPbE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPkm; else goto cdPkn;
       cdPkn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPkp; else goto cdPko;
       cdPkp: // global
           HpAlloc = 24;
           goto cdPkm;
       cdPkm: // global
           R1 = _sdPbE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPko: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdPbE::P64;
           _sdPaI::P64 = P64[_sdPbE::P64 + 16];
           _sdPaK::P64 = P64[_sdPbE::P64 + 24];
           I64[Hp - 16] = stg_sel_5_upd_info;
           P64[Hp] = _sdPaK::P64;
           R2 = Hp - 16;
           R1 = _sdPaI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdPbE_info" {
     sat_sdPbE_info:
         const sat_sdPbE_entry;
         const 2;
         const 18;
 },
 sat_sdPbu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPkB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdPkF; else goto cdPkE;
       cdPkF: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPkE: // global
           _sdPaT::P64 = P64[R1 + 6];
           _sdPb2::P64 = P64[R1 + 14];
           _sdPbb::P64 = P64[R1 + 22];
           _sdPbk::P64 = P64[R1 + 30];
           _sdPbt::P64 = P64[R1 + 38];
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = _sdPaT::P64;
           P64[Hp - 40] = _sdPb2::P64;
           P64[Hp - 32] = _sdPbb::P64;
           P64[Hp - 24] = _sdPbk::P64;
           P64[Hp - 16] = _sdPbt::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPbu_info" {
     sat_sdPbu_info:
         const sat_sdPbu_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_entry() //  [R2,
                                                                      R3, R4, R5]
         { []
         }
     {offset
       cdPkG: // global
           _sdPaK::P64 = R5;
           _sdPaJ::P64 = R4;
           _sdPaI::P64 = R3;
           _sdPaH::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdPkH; else goto cdPkI;
       cdPkI: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdPkK; else goto cdPkJ;
       cdPkK: // global
           HpAlloc = 232;
           goto cdPkH;
       cdPkH: // global
           R5 = _sdPaK::P64;
           R4 = _sdPaJ::P64;
           R3 = _sdPaI::P64;
           R2 = _sdPaH::P64;
           R1 = Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPkJ: // global
           I64[Hp - 224] = sat_sdPbO_info;
           P64[Hp - 208] = _sdPaJ::P64;
           P64[Hp - 200] = _sdPaK::P64;
           I64[Hp - 192] = sat_sdPbE_info;
           P64[Hp - 176] = _sdPaI::P64;
           P64[Hp - 168] = _sdPaK::P64;
           I64[Hp - 160] = stg_sel_4_upd_info;
           P64[Hp - 144] = _sdPaK::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           P64[Hp - 120] = _sdPaK::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _sdPaK::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdPaK::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdPaK::P64;
           I64[Hp - 40] = sat_sdPbu_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R2 = _sdPaH::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 38;
           P64[Sp - 16] = Hp - 192;
           P64[Sp - 8] = Hp - 224;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.921155866 UTC

[section ""data" . Data.Bitraversable.$fBitraversable(,,,,,,)_closure" {
     Data.Bitraversable.$fBitraversable(,,,,,,)_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctor(,,,,,,)_closure;
         const Data.Bifoldable.$fBifoldable(,,,,,,)_closure;
         const Data.Bitraversable.$fBitraversable(,,,,,,)_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.92516603 UTC

[section ""data" . Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableEither_$cbitraverse_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdPlA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdPlB; else goto cdPlC;
       cdPlB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPlC: // global
           I64[Sp - 32] = block_cdPlt_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udPlZ; else goto cdPlu;
       udPlZ: // global
           call _cdPlt(R1) args: 0, res: 0, upd: 0;
       cdPlu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableEither_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableEither_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdPlt() //  [R1]
         { []
         }
     {offset
       cdPlt: // global
           _sdPbP::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdPlx; else goto cdPly;
       cdPlx: // global
           Hp = Hp + 32;
           _sdPbT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdPlU; else goto cdPlI;
       cdPlI: // global
           _sdPbU::P64 = P64[_sdPbT::P64 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdPbU::P64;
           I64[Sp + 16] = block_cdPlG_info;
           R2 = _sdPbP::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
       cdPly: // global
           Hp = Hp + 32;
           _sdPbT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdPlU; else goto cdPlT;
       cdPlU: // global
           HpAlloc = 32;
           R1 = _sdPbT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdPlT: // global
           _sdPbX::P64 = P64[_sdPbT::P64 + 6];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sdPbX::P64;
           I64[Sp + 16] = block_cdPlR_info;
           R2 = _sdPbP::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPlt_info" {
     block_cdPlt_info:
         const _cdPlt;
         const 3;
         const 30;
 },
 _cdPlG() //  [R1]
         { []
         }
     {offset
       cdPlG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Left_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPlG_info" {
     block_cdPlG_info:
         const _cdPlG;
         const 1;
         const 30;
 },
 _cdPlR() //  [R1]
         { []
         }
     {offset
       cdPlR: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Either.Right_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPlR_info" {
     block_cdPlR_info:
         const _cdPlR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.934589092 UTC

[section ""data" . Data.Bitraversable.$fBitraversableEither_closure" {
     Data.Bitraversable.$fBitraversableEither_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorEither_closure;
         const Data.Bifoldable.$fBifoldableEither_closure;
         const Data.Bitraversable.$fBitraversableEither_$cbitraverse_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.937352544 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst1_closure" {
     Data.Bitraversable.$fBitraversableConst1_closure:
         const Data.Bitraversable.$fBitraversableConst1_info;
 },
 Data.Bitraversable.$fBitraversableConst1_entry() //  [R2]
         { []
         }
     {offset
       cdPmB: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableConst1_info" {
     Data.Bitraversable.$fBitraversableConst1_info:
         const Data.Bitraversable.$fBitraversableConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.941445666 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableConst_$cbitraverse_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdPmP: // global
           _sdPc4::P64 = R5;
           _sdPc3::P64 = R4;
           _sdPc2::P64 = R3;
           _sdPc1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdPmQ; else goto cdPmR;
       cdPmR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPmT; else goto cdPmS;
       cdPmT: // global
           HpAlloc = 32;
           goto cdPmQ;
       cdPmQ: // global
           R5 = _sdPc4::P64;
           R4 = _sdPc3::P64;
           R3 = _sdPc2::P64;
           R2 = _sdPc1::P64;
           R1 = Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPmS: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdPc2::P64;
           P64[Hp] = _sdPc4::P64;
           I64[Sp - 16] = block_cdPmN_info;
           R2 = _sdPc1::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableConst_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableConst_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdPmN() //  [R1]
         { []
         }
     {offset
       cdPmN: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Bitraversable.$fBitraversableConst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPmN_info" {
     block_cdPmN_info:
         const _cdPmN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.946675029 UTC

[section ""data" . Data.Bitraversable.$fBitraversableConst_closure" {
     Data.Bitraversable.$fBitraversableConst_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorConst_closure;
         const Data.Bifoldable.$fBifoldableConst_closure;
         const Data.Bitraversable.$fBitraversableConst_$cbitraverse_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.949339128 UTC

[section ""data" . Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure" {
     Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure:
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_info;
 },
 Data.Bitraversable.$fBitraversableK1_$cbitraverse_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdPni: // global
           _sdPca::P64 = R5;
           _sdPc9::P64 = R4;
           _sdPc8::P64 = R3;
           _sdPc7::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdPnj; else goto cdPnk;
       cdPnk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPnm; else goto cdPnl;
       cdPnm: // global
           HpAlloc = 32;
           goto cdPnj;
       cdPnj: // global
           R5 = _sdPca::P64;
           R4 = _sdPc9::P64;
           R3 = _sdPc8::P64;
           R2 = _sdPc7::P64;
           R1 = Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPnl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdPc8::P64;
           P64[Hp] = _sdPca::P64;
           I64[Sp - 16] = block_cdPng_info;
           R2 = _sdPc7::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$fBitraversableK1_$cbitraverse_info" {
     Data.Bitraversable.$fBitraversableK1_$cbitraverse_info:
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdPng() //  [R1]
         { []
         }
     {offset
       cdPng: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Bitraversable.$fBitraversableConst1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdPng_info" {
     block_cdPng_info:
         const _cdPng;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.95829605 UTC

[section ""data" . Data.Bitraversable.$fBitraversableK1_closure" {
     Data.Bitraversable.$fBitraversableK1_closure:
         const Data.Bitraversable.C:Bitraversable_con_info;
         const Data.Bifunctor.$fBifunctorK1_closure;
         const Data.Bifoldable.$fBifoldableK1_closure;
         const Data.Bitraversable.$fBitraversableK1_$cbitraverse_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.961802556 UTC

[section ""data" . Data.Bitraversable.bimapM_closure" {
     Data.Bitraversable.bimapM_closure:
         const Data.Bitraversable.bimapM_info;
 },
 Data.Bitraversable.bimapM_entry() //  [R2, R3]
         { []
         }
     {offset
       cdPnI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdPnJ; else goto cdPnK;
       cdPnJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bimapM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPnK: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapM_info" {
     Data.Bitraversable.bimapM_info:
         const Data.Bitraversable.bimapM_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.965976903 UTC

[section ""data" . Data.Bitraversable.bisequence_closure" {
     Data.Bitraversable.bisequence_closure:
         const Data.Bitraversable.bisequence_info;
 },
 Data.Bitraversable.bisequence_entry() //  [R2, R3]
         { []
         }
     {offset
       cdPnV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdPnW; else goto cdPnX;
       cdPnW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bisequence_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPnX: // global
           R2 = R2;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = GHC.Base.id_closure+1;
           Sp = Sp - 32;
           call Data.Bitraversable.bitraverse_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bisequence_info" {
     Data.Bitraversable.bisequence_info:
         const Data.Bitraversable.bisequence_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.970006002 UTC

[section ""data" . Data.Bitraversable.bisequenceA_closure" {
     Data.Bitraversable.bisequenceA_closure:
         const Data.Bitraversable.bisequenceA_info;
 },
 Data.Bitraversable.bisequenceA_entry() //  [R2, R3]
         { []
         }
     {offset
       cdPoc: // global
           R3 = R3;
           R2 = R2;
           call Data.Bitraversable.bisequence_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bisequenceA_info" {
     Data.Bitraversable.bisequenceA_info:
         const Data.Bitraversable.bisequenceA_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.976250844 UTC

[section ""data" . Data.Bitraversable.$dmbitraverse_closure" {
     Data.Bitraversable.$dmbitraverse_closure:
         const Data.Bitraversable.$dmbitraverse_info;
 },
 f1_sdPcl_entry() //  [R1]
         { []
         }
     {offset
       cdPor: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdPos; else goto cdPot;
       cdPos: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = GHC.Base.id_closure+1;
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdPcl_info" {
     f1_sdPcl_info:
         const f1_sdPcl_entry;
         const 2;
         const 18;
 },
 g_sdPcm_entry() //  [R1]
         { []
         }
     {offset
       cdPoA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdPoB; else goto cdPoC;
       cdPoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdPoy_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Bitraversable.$p1Bitraversable_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . g_sdPcm_info" {
     g_sdPcm_info:
         const g_sdPcm_entry;
         const 3;
         const 15;
 },
 _cdPoy() //  [R1]
         { []
         }
     {offset
       cdPoy: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Data.Bifunctor.bimap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdPoy_info" {
     block_cdPoy_info:
         const _cdPoy;
         const 2;
         const 30;
 },
 sat_sdPcq_entry() //  [R1, R2]
         { []
         }
     {offset
       cdPoM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPoQ; else goto cdPoP;
       cdPoQ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdPoP: // global
           _sdPcl::P64 = P64[R1 + 7];
           _sdPcm::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdPcm::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdPcl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPcq_info" {
     sat_sdPcq_info:
         const sat_sdPcq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Bitraversable.$dmbitraverse_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdPoR: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdPoV; else goto cdPoU;
       cdPoV: // global
           HpAlloc = 96;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.$dmbitraverse_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPoU: // global
           I64[Hp - 88] = f1_sdPcl_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = g_sdPcm_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sdPcq_info;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.$dmbitraverse_info" {
     Data.Bitraversable.$dmbitraverse_info:
         const Data.Bitraversable.$dmbitraverse_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.989848104 UTC

[section ""data" . Data.Bitraversable.bifor_closure" {
     Data.Bitraversable.bifor_closure:
         const Data.Bitraversable.bifor_info;
 },
 Data.Bitraversable.bifor_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdPpB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdPpC; else goto cdPpD;
       cdPpC: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.bifor_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPpD: // global
           R2 = R2;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R5;
           P64[Sp - 16] = R6;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Bitraversable.bitraverse_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bifor_info" {
     Data.Bitraversable.bifor_info:
         const Data.Bitraversable.bifor_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.994184837 UTC

[section ""data" . Data.Bitraversable.biforM_closure" {
     Data.Bitraversable.biforM_closure:
         const Data.Bitraversable.biforM_info;
 },
 Data.Bitraversable.biforM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdPpO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Bitraversable.bifor_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.biforM_info" {
     Data.Bitraversable.biforM_info:
         const Data.Bitraversable.biforM_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:04.998909585 UTC

[section ""data" . Data.Bitraversable.bimapAccumL_closure" {
     Data.Bitraversable.bimapAccumL_closure:
         const Data.Bitraversable.bimapAccumL_info;
         const 0;
 },
 sat_sdPcG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPq4: // global
           _sdPcF::P64 = R3;
           R3 = R2;
           R2 = _sdPcF::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPcG_info" {
     sat_sdPcG_info:
         const sat_sdPcG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdPcD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPqc: // global
           _sdPcC::P64 = R3;
           R3 = R2;
           R2 = _sdPcC::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPcD_info" {
     sat_sdPcD_info:
         const sat_sdPcD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.bimapAccumL_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdPqf: // global
           _sdPcA::P64 = R6;
           _sdPcz::P64 = R5;
           _sdPcy::P64 = R4;
           _sdPcx::P64 = R3;
           _sdPcw::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdPqg; else goto cdPqh;
       cdPqh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPqj; else goto cdPqi;
       cdPqj: // global
           HpAlloc = 32;
           goto cdPqg;
       cdPqg: // global
           R6 = _sdPcA::P64;
           R5 = _sdPcz::P64;
           R4 = _sdPcy::P64;
           R3 = _sdPcx::P64;
           R2 = _sdPcw::P64;
           R1 = Data.Bitraversable.bimapAccumL_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPqi: // global
           I64[Hp - 24] = sat_sdPcG_info;
           P64[Hp - 16] = _sdPcy::P64;
           I64[Hp - 8] = sat_sdPcD_info;
           P64[Hp] = _sdPcx::P64;
           R2 = _sdPcw::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Utils.$fApplicativeStateL_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdPcA::P64;
           P64[Sp - 8] = _sdPcz::P64;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapAccumL_info" {
     Data.Bitraversable.bimapAccumL_info:
         const Data.Bitraversable.bimapAccumL_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdPqk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.006611841 UTC

[section ""data" . Data.Bitraversable.bimapAccumR_closure" {
     Data.Bitraversable.bimapAccumR_closure:
         const Data.Bitraversable.bimapAccumR_info;
         const 0;
 },
 sat_sdPcR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPqL: // global
           _sdPcQ::P64 = R3;
           R3 = R2;
           R2 = _sdPcQ::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPcR_info" {
     sat_sdPcR_info:
         const sat_sdPcR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdPcO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdPqT: // global
           _sdPcN::P64 = R3;
           R3 = R2;
           R2 = _sdPcN::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdPcO_info" {
     sat_sdPcO_info:
         const sat_sdPcO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Data.Bitraversable.bimapAccumR_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdPqW: // global
           _sdPcL::P64 = R6;
           _sdPcK::P64 = R5;
           _sdPcJ::P64 = R4;
           _sdPcI::P64 = R3;
           _sdPcH::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cdPqX; else goto cdPqY;
       cdPqY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPr0; else goto cdPqZ;
       cdPr0: // global
           HpAlloc = 32;
           goto cdPqX;
       cdPqX: // global
           R6 = _sdPcL::P64;
           R5 = _sdPcK::P64;
           R4 = _sdPcJ::P64;
           R3 = _sdPcI::P64;
           R2 = _sdPcH::P64;
           R1 = Data.Bitraversable.bimapAccumR_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPqZ: // global
           I64[Hp - 24] = sat_sdPcR_info;
           P64[Hp - 16] = _sdPcJ::P64;
           I64[Hp - 8] = sat_sdPcO_info;
           P64[Hp] = _sdPcI::P64;
           R2 = _sdPcH::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Utils.$fApplicativeStateR_closure;
           P64[Sp - 32] = Hp - 6;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = _sdPcL::P64;
           P64[Sp - 8] = _sdPcK::P64;
           Sp = Sp - 48;
           call Data.Bitraversable.bitraverse_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapAccumR_info" {
     Data.Bitraversable.bimapAccumR_info:
         const Data.Bitraversable.bimapAccumR_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdPqk_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.013560412 UTC

[section ""data" . bimapDefault1_rdOxw_closure" {
     bimapDefault1_rdOxw_closure:
         const bimapDefault1_rdOxw_info;
         const 0;
 },
 bimapDefault1_rdOxw_entry() //  [R2]
         { []
         }
     {offset
       cdPrm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdPrn; else goto cdPro;
       cdPrn: // global
           R2 = R2;
           R1 = bimapDefault1_rdOxw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdPro: // global
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Data.Functor.Identity.$fApplicativeIdentity_closure;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . bimapDefault1_rdOxw_info" {
     bimapDefault1_rdOxw_info:
         const bimapDefault1_rdOxw_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdPqk_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.018052535 UTC

[section ""data" . Data.Bitraversable.bimapDefault_closure" {
     Data.Bitraversable.bimapDefault_closure:
         const Data.Bitraversable.bimapDefault_info;
         const 0;
 },
 Data.Bitraversable.bimapDefault_entry() //  [R2]
         { []
         }
     {offset
       cdPrA: // global
           R2 = R2;
           call bimapDefault1_rdOxw_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bimapDefault_info" {
     Data.Bitraversable.bimapDefault_info:
         const Data.Bitraversable.bimapDefault_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdPqk_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.021866463 UTC

[section ""data" . bifoldMapDefault1_rdOxx_closure" {
     bifoldMapDefault1_rdOxx_closure:
         const bifoldMapDefault1_rdOxx_info;
         const 0;
 },
 sat_sdPcV_entry() //  [R1]
         { []
         }
     {offset
       cdPrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdPrQ; else goto cdPrR;
       cdPrQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdPrR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fApplicativeConst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdPcV_info" {
     sat_sdPcV_info:
         const sat_sdPcV_entry;
         const 1;
         const 4294967312;
         const SdPqk_srt+48;
 },
 bifoldMapDefault1_rdOxx_entry() //  [R2, R3]
         { []
         }
     {offset
       cdPrS: // global
           _sdPcU::P64 = R3;
           _sdPcT::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdPrT; else goto cdPrU;
       cdPrU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdPrW; else goto cdPrV;
       cdPrW: // global
           HpAlloc = 24;
           goto cdPrT;
       cdPrT: // global
           R3 = _sdPcU::P64;
           R2 = _sdPcT::P64;
           R1 = bifoldMapDefault1_rdOxx_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPrV: // global
           I64[Hp - 16] = sat_sdPcV_info;
           P64[Hp] = _sdPcU::P64;
           R2 = _sdPcT::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Bitraversable.bitraverse_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . bifoldMapDefault1_rdOxx_info" {
     bifoldMapDefault1_rdOxx_info:
         const bifoldMapDefault1_rdOxx_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdPqk_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.027203057 UTC

[section ""data" . Data.Bitraversable.bifoldMapDefault_closure" {
     Data.Bitraversable.bifoldMapDefault_closure:
         const Data.Bitraversable.bifoldMapDefault_info;
         const 0;
 },
 Data.Bitraversable.bifoldMapDefault_entry() //  [R2, R3]
         { []
         }
     {offset
       cdPse: // global
           R3 = R3;
           R2 = R2;
           call bifoldMapDefault1_rdOxx_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.bifoldMapDefault_info" {
     Data.Bitraversable.bifoldMapDefault_info:
         const Data.Bitraversable.bifoldMapDefault_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdPqk_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.030164098 UTC

[section ""cstring" . Data.Bitraversable.$trModule4_bytes" {
     Data.Bitraversable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.031804004 UTC

[section ""data" . Data.Bitraversable.$trModule3_closure" {
     Data.Bitraversable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.03392093 UTC

[section ""cstring" . Data.Bitraversable.$trModule2_bytes" {
     Data.Bitraversable.$trModule2_bytes:
         I8[] [68,97,116,97,46,66,105,116,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.03558073 UTC

[section ""data" . Data.Bitraversable.$trModule1_closure" {
     Data.Bitraversable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.037225448 UTC

[section ""data" . Data.Bitraversable.$trModule_closure" {
     Data.Bitraversable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Bitraversable.$trModule3_closure+1;
         const Data.Bitraversable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.038989551 UTC

[section ""data" . $krep_rdOxy_closure" {
     $krep_rdOxy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.040680326 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable1_closure" {
     Data.Bitraversable.$tcBitraversable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdOxy_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.042372476 UTC

[section ""cstring" . Data.Bitraversable.$tcBitraversable3_bytes" {
     Data.Bitraversable.$tcBitraversable3_bytes:
         I8[] [66,105,116,114,97,118,101,114,115,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.043990502 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable2_closure" {
     Data.Bitraversable.$tcBitraversable2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Bitraversable.$tcBitraversable3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.046264581 UTC

[section ""data" . Data.Bitraversable.$tcBitraversable_closure" {
     Data.Bitraversable.$tcBitraversable_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Bitraversable.$trModule_closure+1;
         const Data.Bitraversable.$tcBitraversable2_closure+1;
         const Data.Bitraversable.$tcBitraversable1_closure+4;
         const 1654555613294690493;
         const 8030854156262073676;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.048711507 UTC

[section ""data" . Data.Bitraversable.C:Bitraversable_closure" {
     Data.Bitraversable.C:Bitraversable_closure:
         const Data.Bitraversable.C:Bitraversable_info;
 },
 Data.Bitraversable.C:Bitraversable_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdPsA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdPsE; else goto cdPsD;
       cdPsE: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Bitraversable.C:Bitraversable_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdPsD: // global
           I64[Hp - 24] = Data.Bitraversable.C:Bitraversable_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.C:Bitraversable_info" {
     Data.Bitraversable.C:Bitraversable_info:
         const Data.Bitraversable.C:Bitraversable_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.052664213 UTC

[section ""cstring" . idPsM_str" {
     idPsM_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,66,105,116,114,97,118,101,114,115,97,98,108,101,46,67,58,66,105,116,114,97,118,101,114,115,97,98,108,101]
 },
 Data.Bitraversable.C:Bitraversable_con_entry() //  [R1]
         { []
         }
     {offset
       cdPsL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Bitraversable.C:Bitraversable_con_info" {
     Data.Bitraversable.C:Bitraversable_con_info:
         const Data.Bitraversable.C:Bitraversable_con_entry;
         const 3;
         const 1;
         const idPsM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.055619597 UTC

[section ""relreadonly" . SdPqk_srt" {
     SdPqk_srt:
         const Data.Functor.Utils.$fApplicativeStateL_closure;
         const Data.Bitraversable.bimapAccumL_closure;
         const Data.Functor.Utils.$fApplicativeStateR_closure;
         const Data.Bitraversable.bimapAccumR_closure;
         const Data.Functor.Identity.$fApplicativeIdentity_closure;
         const bimapDefault1_rdOxw_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const bifoldMapDefault1_rdOxx_closure;
 }]

