
==================== Pre unarise: ====================
2018-03-16 16:07:30.800473646 UTC

lvl_rcBZq :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_scBZu :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBZv :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBZu GHC.Types.[]];

lvl1_rcBZr :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBZv;

$wsimplest'_rcBZs
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,1*U><S,U><L,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scBZw w1_scBZx w2_scBZy w3_scBZz]
        case GHC.Integer.Type.eqInteger# w1_scBZx lvl_rcBZq of {
          __DEFAULT ->
              case GHC.Integer.Type.quotRemInteger w_scBZw w1_scBZx of {
                (#,#) ipv_scBZC ipv1_scBZD ->
                    case GHC.Integer.Type.eqInteger# ipv1_scBZD lvl_rcBZq of {
                      __DEFAULT ->
                          case GHC.Integer.Type.eqInteger# w3_scBZz lvl_rcBZq of {
                            __DEFAULT ->
                                case GHC.Integer.Type.quotRemInteger w2_scBZy w3_scBZz of {
                                  (#,#) ipv2_scBZH [Occ=Once] ipv3_scBZI [Occ=Once] ->
                                      case GHC.Integer.Type.neqInteger# ipv_scBZC ipv2_scBZH of {
                                        __DEFAULT ->
                                            case
                                                $wsimplest'_rcBZs
                                                    w3_scBZz ipv3_scBZI w1_scBZx ipv1_scBZD
                                            of
                                            { (#,#) ww1_scBZL ww2_scBZM [Occ=Once] ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          ipv_scBZC ww1_scBZL
                                                  of
                                                  sat_scBZN
                                                  { __DEFAULT ->
                                                        case
                                                            GHC.Integer.Type.plusInteger
                                                                sat_scBZN ww2_scBZM
                                                        of
                                                        dt_scBZO
                                                        { __DEFAULT -> (#,#) [dt_scBZO ww1_scBZL];
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case
                                                GHC.Integer.Type.plusInteger ipv_scBZC lvl1_rcBZr
                                            of
                                            dt_scBZP
                                            { __DEFAULT -> (#,#) [dt_scBZP lvl1_rcBZr];
                                            };
                                      };
                                };
                            1# -> GHC.Real.divZeroError;
                          };
                      1# ->
                          case ipv_scBZC of dt_scBZR {
                            __DEFAULT -> (#,#) [dt_scBZR lvl1_rcBZr];
                          };
                    };
              };
          1# -> GHC.Real.divZeroError;
        };

Data.Ratio.$wsimplest [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,U><S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW]
        case
            GHC.Integer.Type.timesInteger ww_scBZT ww3_scBZW
        of
        sat_scBZY
        { __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger ww2_scBZV ww1_scBZU
              of
              sat_scBZX
              { __DEFAULT ->
                    case GHC.Integer.Type.ltInteger# sat_scBZX sat_scBZY of {
                      __DEFAULT ->
                          let-no-escape {
                            $j_scC00 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                              :: (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW] \r []
                                    case
                                        GHC.Real.$w$s$ccompare
                                            ww_scBZT ww1_scBZU lvl_rcBZq GHC.Real.$fEnumRatio1
                                    of
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.timesInteger lvl_rcBZq ww3_scBZW
                                          of
                                          sat_scC03
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.timesInteger
                                                        ww2_scBZV GHC.Real.$fEnumRatio1
                                                of
                                                sat_scC02
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.ltInteger#
                                                              sat_scC02 sat_scC03
                                                      of
                                                      { __DEFAULT -> (#,#) [lvl_rcBZq lvl1_rcBZr];
                                                        1# ->
                                                            let {
                                                              sat_scC06 [Occ=Once, Dmd=<L,1*U>]
                                                                :: GHC.Integer.Type.Integer
                                                              [LclId] =
                                                                  [ww_scBZT] \s []
                                                                      GHC.Integer.Type.negateInteger
                                                                          ww_scBZT;
                                                            } in 
                                                              case
                                                                  GHC.Integer.Type.negateInteger
                                                                      ww2_scBZV
                                                              of
                                                              sat_scC05
                                                              { __DEFAULT ->
                                                                    case
                                                                        $wsimplest'_rcBZs
                                                                            sat_scC05
                                                                            ww3_scBZW
                                                                            sat_scC06
                                                                            ww1_scBZU
                                                                    of
                                                                    { (#,#) ww5_scC08 [Occ=Once]
                                                                            ww6_scC09 [Occ=Once] ->
                                                                          case
                                                                              GHC.Integer.Type.negateInteger
                                                                                  ww5_scC08
                                                                          of
                                                                          dt_scC0a
                                                                          { __DEFAULT ->
                                                                                (#,#) [dt_scC0a
                                                                                       ww6_scC09];
                                                                          };
                                                                    };
                                                              };
                                                      };
                                                };
                                          };
                                      GHC.Types.GT ->
                                          $wsimplest'_rcBZs ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW;
                                    };
                          } in 
                            case GHC.Integer.Type.eqInteger# ww_scBZT ww2_scBZV of {
                              __DEFAULT -> $j_scC00;
                              1# ->
                                  case GHC.Integer.Type.eqInteger# ww1_scBZU ww3_scBZW of {
                                    __DEFAULT -> $j_scC00;
                                    1# -> (#,#) [ww_scBZT ww1_scBZU];
                                  };
                            };
                      1# -> Data.Ratio.$wsimplest ww2_scBZV ww3_scBZW ww_scBZT ww1_scBZU;
                    };
              };
        };

Data.Ratio.$wapproxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Real.RealFrac a =>
     a -> a -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scC0d w1_scC0e w2_scC0f]
        case
            GHC.Real.$p1RealFrac w_scC0d
        of
        $dReal_scC0g [Dmd=<S(LLC(S(SS))),U(A,A,C(U(U,U)))>]
        { __DEFAULT ->
              case GHC.Real.toRational $dReal_scC0g w1_scC0e of {
                GHC.Real.:% ww1_scC0i ww2_scC0j ->
                    case GHC.Real.toRational $dReal_scC0g w2_scC0f of {
                      GHC.Real.:% ww4_scC0l ww5_scC0m ->
                          case GHC.Real.$w$s$c- ww1_scC0i ww2_scC0j ww4_scC0l ww5_scC0m of {
                            (#,#) ww7_scC0o [Occ=Once] ww8_scC0p [Occ=Once] ->
                                case GHC.Real.$w$s$c+ ww1_scC0i ww2_scC0j ww4_scC0l ww5_scC0m of {
                                  (#,#) ww12_scC0r [Occ=Once] ww13_scC0s [Occ=Once] ->
                                      Data.Ratio.$wsimplest
                                          ww7_scC0o ww8_scC0p ww12_scC0r ww13_scC0s;
                                };
                          };
                    };
              };
        };

Data.Ratio.approxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Real.RealFrac a => a -> a -> GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_scC0t w1_scC0u w2_scC0v]
        case Data.Ratio.$wapproxRational w_scC0t w1_scC0u w2_scC0v of {
          (#,#) ww1_scC0x [Occ=Once] ww2_scC0y [Occ=Once] ->
              GHC.Real.:% [ww1_scC0x ww2_scC0y];
        };

Data.Ratio.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ratio.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule4];

Data.Ratio.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ratio"#;

Data.Ratio.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule2];

Data.Ratio.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ratio.$trModule3
                                     Data.Ratio.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:07:30.804501366 UTC

lvl_rcBZq :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_scBZu :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scBZv :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scBZu GHC.Types.[]];

lvl1_rcBZr :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scBZv;

$wsimplest'_rcBZs
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,1*U><S,U><L,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scBZw w1_scBZx w2_scBZy w3_scBZz]
        case GHC.Integer.Type.eqInteger# w1_scBZx lvl_rcBZq of {
          __DEFAULT ->
              case GHC.Integer.Type.quotRemInteger w_scBZw w1_scBZx of {
                (#,#) ipv_scBZC ipv1_scBZD ->
                    case GHC.Integer.Type.eqInteger# ipv1_scBZD lvl_rcBZq of {
                      __DEFAULT ->
                          case GHC.Integer.Type.eqInteger# w3_scBZz lvl_rcBZq of {
                            __DEFAULT ->
                                case GHC.Integer.Type.quotRemInteger w2_scBZy w3_scBZz of {
                                  (#,#) ipv2_scBZH [Occ=Once] ipv3_scBZI [Occ=Once] ->
                                      case GHC.Integer.Type.neqInteger# ipv_scBZC ipv2_scBZH of {
                                        __DEFAULT ->
                                            case
                                                $wsimplest'_rcBZs
                                                    w3_scBZz ipv3_scBZI w1_scBZx ipv1_scBZD
                                            of
                                            { (#,#) ww1_scBZL ww2_scBZM [Occ=Once] ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          ipv_scBZC ww1_scBZL
                                                  of
                                                  sat_scBZN
                                                  { __DEFAULT ->
                                                        case
                                                            GHC.Integer.Type.plusInteger
                                                                sat_scBZN ww2_scBZM
                                                        of
                                                        dt_scBZO
                                                        { __DEFAULT -> (#,#) [dt_scBZO ww1_scBZL];
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case
                                                GHC.Integer.Type.plusInteger ipv_scBZC lvl1_rcBZr
                                            of
                                            dt_scBZP
                                            { __DEFAULT -> (#,#) [dt_scBZP lvl1_rcBZr];
                                            };
                                      };
                                };
                            1# -> GHC.Real.divZeroError;
                          };
                      1# ->
                          case ipv_scBZC of dt_scBZR {
                            __DEFAULT -> (#,#) [dt_scBZR lvl1_rcBZr];
                          };
                    };
              };
          1# -> GHC.Real.divZeroError;
        };

Data.Ratio.$wsimplest [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,U><S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW]
        case
            GHC.Integer.Type.timesInteger ww_scBZT ww3_scBZW
        of
        sat_scBZY
        { __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger ww2_scBZV ww1_scBZU
              of
              sat_scBZX
              { __DEFAULT ->
                    case GHC.Integer.Type.ltInteger# sat_scBZX sat_scBZY of {
                      __DEFAULT ->
                          let-no-escape {
                            $j_scC00 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                              :: (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW] \r []
                                    case
                                        GHC.Real.$w$s$ccompare
                                            ww_scBZT ww1_scBZU lvl_rcBZq GHC.Real.$fEnumRatio1
                                    of
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.timesInteger lvl_rcBZq ww3_scBZW
                                          of
                                          sat_scC03
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.timesInteger
                                                        ww2_scBZV GHC.Real.$fEnumRatio1
                                                of
                                                sat_scC02
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.ltInteger#
                                                              sat_scC02 sat_scC03
                                                      of
                                                      { __DEFAULT -> (#,#) [lvl_rcBZq lvl1_rcBZr];
                                                        1# ->
                                                            let {
                                                              sat_scC06 [Occ=Once, Dmd=<L,1*U>]
                                                                :: GHC.Integer.Type.Integer
                                                              [LclId] =
                                                                  [ww_scBZT] \s []
                                                                      GHC.Integer.Type.negateInteger
                                                                          ww_scBZT;
                                                            } in 
                                                              case
                                                                  GHC.Integer.Type.negateInteger
                                                                      ww2_scBZV
                                                              of
                                                              sat_scC05
                                                              { __DEFAULT ->
                                                                    case
                                                                        $wsimplest'_rcBZs
                                                                            sat_scC05
                                                                            ww3_scBZW
                                                                            sat_scC06
                                                                            ww1_scBZU
                                                                    of
                                                                    { (#,#) ww5_scC08 [Occ=Once]
                                                                            ww6_scC09 [Occ=Once] ->
                                                                          case
                                                                              GHC.Integer.Type.negateInteger
                                                                                  ww5_scC08
                                                                          of
                                                                          dt_scC0a
                                                                          { __DEFAULT ->
                                                                                (#,#) [dt_scC0a
                                                                                       ww6_scC09];
                                                                          };
                                                                    };
                                                              };
                                                      };
                                                };
                                          };
                                      GHC.Types.GT ->
                                          $wsimplest'_rcBZs ww_scBZT ww1_scBZU ww2_scBZV ww3_scBZW;
                                    };
                          } in 
                            case GHC.Integer.Type.eqInteger# ww_scBZT ww2_scBZV of {
                              __DEFAULT -> $j_scC00;
                              1# ->
                                  case GHC.Integer.Type.eqInteger# ww1_scBZU ww3_scBZW of {
                                    __DEFAULT -> $j_scC00;
                                    1# -> (#,#) [ww_scBZT ww1_scBZU];
                                  };
                            };
                      1# -> Data.Ratio.$wsimplest ww2_scBZV ww3_scBZW ww_scBZT ww1_scBZU;
                    };
              };
        };

Data.Ratio.$wapproxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Real.RealFrac a =>
     a -> a -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scC0d w1_scC0e w2_scC0f]
        case
            GHC.Real.$p1RealFrac w_scC0d
        of
        $dReal_scC0g [Dmd=<S(LLC(S(SS))),U(A,A,C(U(U,U)))>]
        { __DEFAULT ->
              case GHC.Real.toRational $dReal_scC0g w1_scC0e of {
                GHC.Real.:% ww1_scC0i ww2_scC0j ->
                    case GHC.Real.toRational $dReal_scC0g w2_scC0f of {
                      GHC.Real.:% ww4_scC0l ww5_scC0m ->
                          case GHC.Real.$w$s$c- ww1_scC0i ww2_scC0j ww4_scC0l ww5_scC0m of {
                            (#,#) ww7_scC0o [Occ=Once] ww8_scC0p [Occ=Once] ->
                                case GHC.Real.$w$s$c+ ww1_scC0i ww2_scC0j ww4_scC0l ww5_scC0m of {
                                  (#,#) ww12_scC0r [Occ=Once] ww13_scC0s [Occ=Once] ->
                                      Data.Ratio.$wsimplest
                                          ww7_scC0o ww8_scC0p ww12_scC0r ww13_scC0s;
                                };
                          };
                    };
              };
        };

Data.Ratio.approxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Real.RealFrac a => a -> a -> GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_scC0t w1_scC0u w2_scC0v]
        case Data.Ratio.$wapproxRational w_scC0t w1_scC0u w2_scC0v of {
          (#,#) ww1_scC0x [Occ=Once] ww2_scC0y [Occ=Once] ->
              GHC.Real.:% [ww1_scC0x ww2_scC0y];
        };

Data.Ratio.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ratio.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule4];

Data.Ratio.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ratio"#;

Data.Ratio.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule2];

Data.Ratio.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ratio.$trModule3
                                     Data.Ratio.$trModule1];


==================== Pre unarise: ====================
2018-03-16 16:07:31.121310423 UTC

lvl_rcBZq :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_scCfX :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scCfY :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCfX GHC.Types.[]];

lvl1_rcBZr :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCfY;

$wsimplest'_rcBZs
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,1*U><S,U><L,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scCfZ w1_scCg0 w2_scCg1 w3_scCg2]
        case GHC.Integer.Type.eqInteger# w1_scCg0 lvl_rcBZq of {
          __DEFAULT ->
              case GHC.Integer.Type.quotRemInteger w_scCfZ w1_scCg0 of {
                (#,#) ipv_scCg5 ipv1_scCg6 ->
                    case GHC.Integer.Type.eqInteger# ipv1_scCg6 lvl_rcBZq of {
                      __DEFAULT ->
                          case GHC.Integer.Type.eqInteger# w3_scCg2 lvl_rcBZq of {
                            __DEFAULT ->
                                case GHC.Integer.Type.quotRemInteger w2_scCg1 w3_scCg2 of {
                                  (#,#) ipv2_scCga [Occ=Once] ipv3_scCgb [Occ=Once] ->
                                      case GHC.Integer.Type.neqInteger# ipv_scCg5 ipv2_scCga of {
                                        __DEFAULT ->
                                            case
                                                $wsimplest'_rcBZs
                                                    w3_scCg2 ipv3_scCgb w1_scCg0 ipv1_scCg6
                                            of
                                            { (#,#) ww1_scCge ww2_scCgf [Occ=Once] ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          ipv_scCg5 ww1_scCge
                                                  of
                                                  sat_scCgg
                                                  { __DEFAULT ->
                                                        case
                                                            GHC.Integer.Type.plusInteger
                                                                sat_scCgg ww2_scCgf
                                                        of
                                                        dt_scCgh
                                                        { __DEFAULT -> (#,#) [dt_scCgh ww1_scCge];
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case
                                                GHC.Integer.Type.plusInteger ipv_scCg5 lvl1_rcBZr
                                            of
                                            dt_scCgi
                                            { __DEFAULT -> (#,#) [dt_scCgi lvl1_rcBZr];
                                            };
                                      };
                                };
                            1# -> GHC.Real.divZeroError;
                          };
                      1# ->
                          case ipv_scCg5 of dt_scCgk {
                            __DEFAULT -> (#,#) [dt_scCgk lvl1_rcBZr];
                          };
                    };
              };
          1# -> GHC.Real.divZeroError;
        };

Data.Ratio.$wsimplest [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,U><S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp]
        case
            GHC.Integer.Type.timesInteger ww_scCgm ww3_scCgp
        of
        sat_scCgr
        { __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger ww2_scCgo ww1_scCgn
              of
              sat_scCgq
              { __DEFAULT ->
                    case GHC.Integer.Type.ltInteger# sat_scCgq sat_scCgr of {
                      __DEFAULT ->
                          let-no-escape {
                            $j_scCgt [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                              :: (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp] \r []
                                    case
                                        GHC.Real.$w$s$ccompare
                                            ww_scCgm ww1_scCgn lvl_rcBZq GHC.Real.$fEnumRatio1
                                    of
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.timesInteger lvl_rcBZq ww3_scCgp
                                          of
                                          sat_scCgw
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.timesInteger
                                                        ww2_scCgo GHC.Real.$fEnumRatio1
                                                of
                                                sat_scCgv
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.ltInteger#
                                                              sat_scCgv sat_scCgw
                                                      of
                                                      { __DEFAULT -> (#,#) [lvl_rcBZq lvl1_rcBZr];
                                                        1# ->
                                                            let {
                                                              sat_scCgz [Occ=Once, Dmd=<L,1*U>]
                                                                :: GHC.Integer.Type.Integer
                                                              [LclId] =
                                                                  [ww_scCgm] \s []
                                                                      GHC.Integer.Type.negateInteger
                                                                          ww_scCgm;
                                                            } in 
                                                              case
                                                                  GHC.Integer.Type.negateInteger
                                                                      ww2_scCgo
                                                              of
                                                              sat_scCgy
                                                              { __DEFAULT ->
                                                                    case
                                                                        $wsimplest'_rcBZs
                                                                            sat_scCgy
                                                                            ww3_scCgp
                                                                            sat_scCgz
                                                                            ww1_scCgn
                                                                    of
                                                                    { (#,#) ww5_scCgB [Occ=Once]
                                                                            ww6_scCgC [Occ=Once] ->
                                                                          case
                                                                              GHC.Integer.Type.negateInteger
                                                                                  ww5_scCgB
                                                                          of
                                                                          dt_scCgD
                                                                          { __DEFAULT ->
                                                                                (#,#) [dt_scCgD
                                                                                       ww6_scCgC];
                                                                          };
                                                                    };
                                                              };
                                                      };
                                                };
                                          };
                                      GHC.Types.GT ->
                                          $wsimplest'_rcBZs ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp;
                                    };
                          } in 
                            case GHC.Integer.Type.eqInteger# ww_scCgm ww2_scCgo of {
                              __DEFAULT -> $j_scCgt;
                              1# ->
                                  case GHC.Integer.Type.eqInteger# ww1_scCgn ww3_scCgp of {
                                    __DEFAULT -> $j_scCgt;
                                    1# -> (#,#) [ww_scCgm ww1_scCgn];
                                  };
                            };
                      1# -> Data.Ratio.$wsimplest ww2_scCgo ww3_scCgp ww_scCgm ww1_scCgn;
                    };
              };
        };

Data.Ratio.$wapproxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Real.RealFrac a =>
     a -> a -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scCgG w1_scCgH w2_scCgI]
        case
            GHC.Real.$p1RealFrac w_scCgG
        of
        $dReal_scCgJ [Dmd=<S(LLC(S(SS))),U(A,A,C(U(U,U)))>]
        { __DEFAULT ->
              case GHC.Real.toRational $dReal_scCgJ w1_scCgH of {
                GHC.Real.:% ww1_scCgL ww2_scCgM ->
                    case GHC.Real.toRational $dReal_scCgJ w2_scCgI of {
                      GHC.Real.:% ww4_scCgO ww5_scCgP ->
                          case GHC.Real.$w$s$c- ww1_scCgL ww2_scCgM ww4_scCgO ww5_scCgP of {
                            (#,#) ww7_scCgR [Occ=Once] ww8_scCgS [Occ=Once] ->
                                case GHC.Real.$w$s$c+ ww1_scCgL ww2_scCgM ww4_scCgO ww5_scCgP of {
                                  (#,#) ww12_scCgU [Occ=Once] ww13_scCgV [Occ=Once] ->
                                      Data.Ratio.$wsimplest
                                          ww7_scCgR ww8_scCgS ww12_scCgU ww13_scCgV;
                                };
                          };
                    };
              };
        };

Data.Ratio.approxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Real.RealFrac a => a -> a -> GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_scCgW w1_scCgX w2_scCgY]
        case Data.Ratio.$wapproxRational w_scCgW w1_scCgX w2_scCgY of {
          (#,#) ww1_scCh0 [Occ=Once] ww2_scCh1 [Occ=Once] ->
              GHC.Real.:% [ww1_scCh0 ww2_scCh1];
        };

Data.Ratio.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ratio.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule4];

Data.Ratio.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ratio"#;

Data.Ratio.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule2];

Data.Ratio.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ratio.$trModule3
                                     Data.Ratio.$trModule1];


==================== STG syntax: ====================
2018-03-16 16:07:31.125799821 UTC

lvl_rcBZq :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_scCfX :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scCfY :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCfX GHC.Types.[]];

lvl1_rcBZr :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCfY;

$wsimplest'_rcBZs
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,1*U><S,U><L,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scCfZ w1_scCg0 w2_scCg1 w3_scCg2]
        case GHC.Integer.Type.eqInteger# w1_scCg0 lvl_rcBZq of {
          __DEFAULT ->
              case GHC.Integer.Type.quotRemInteger w_scCfZ w1_scCg0 of {
                (#,#) ipv_scCg5 ipv1_scCg6 ->
                    case GHC.Integer.Type.eqInteger# ipv1_scCg6 lvl_rcBZq of {
                      __DEFAULT ->
                          case GHC.Integer.Type.eqInteger# w3_scCg2 lvl_rcBZq of {
                            __DEFAULT ->
                                case GHC.Integer.Type.quotRemInteger w2_scCg1 w3_scCg2 of {
                                  (#,#) ipv2_scCga [Occ=Once] ipv3_scCgb [Occ=Once] ->
                                      case GHC.Integer.Type.neqInteger# ipv_scCg5 ipv2_scCga of {
                                        __DEFAULT ->
                                            case
                                                $wsimplest'_rcBZs
                                                    w3_scCg2 ipv3_scCgb w1_scCg0 ipv1_scCg6
                                            of
                                            { (#,#) ww1_scCge ww2_scCgf [Occ=Once] ->
                                                  case
                                                      GHC.Integer.Type.timesInteger
                                                          ipv_scCg5 ww1_scCge
                                                  of
                                                  sat_scCgg
                                                  { __DEFAULT ->
                                                        case
                                                            GHC.Integer.Type.plusInteger
                                                                sat_scCgg ww2_scCgf
                                                        of
                                                        dt_scCgh
                                                        { __DEFAULT -> (#,#) [dt_scCgh ww1_scCge];
                                                        };
                                                  };
                                            };
                                        1# ->
                                            case
                                                GHC.Integer.Type.plusInteger ipv_scCg5 lvl1_rcBZr
                                            of
                                            dt_scCgi
                                            { __DEFAULT -> (#,#) [dt_scCgi lvl1_rcBZr];
                                            };
                                      };
                                };
                            1# -> GHC.Real.divZeroError;
                          };
                      1# ->
                          case ipv_scCg5 of dt_scCgk {
                            __DEFAULT -> (#,#) [dt_scCgk lvl1_rcBZr];
                          };
                    };
              };
          1# -> GHC.Real.divZeroError;
        };

Data.Ratio.$wsimplest [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=4, Str=<S,U><S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp]
        case
            GHC.Integer.Type.timesInteger ww_scCgm ww3_scCgp
        of
        sat_scCgr
        { __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger ww2_scCgo ww1_scCgn
              of
              sat_scCgq
              { __DEFAULT ->
                    case GHC.Integer.Type.ltInteger# sat_scCgq sat_scCgr of {
                      __DEFAULT ->
                          let-no-escape {
                            $j_scCgt [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                              :: (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                [ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp] \r []
                                    case
                                        GHC.Real.$w$s$ccompare
                                            ww_scCgm ww1_scCgn lvl_rcBZq GHC.Real.$fEnumRatio1
                                    of
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.timesInteger lvl_rcBZq ww3_scCgp
                                          of
                                          sat_scCgw
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.timesInteger
                                                        ww2_scCgo GHC.Real.$fEnumRatio1
                                                of
                                                sat_scCgv
                                                { __DEFAULT ->
                                                      case
                                                          GHC.Integer.Type.ltInteger#
                                                              sat_scCgv sat_scCgw
                                                      of
                                                      { __DEFAULT -> (#,#) [lvl_rcBZq lvl1_rcBZr];
                                                        1# ->
                                                            let {
                                                              sat_scCgz [Occ=Once, Dmd=<L,1*U>]
                                                                :: GHC.Integer.Type.Integer
                                                              [LclId] =
                                                                  [ww_scCgm] \s []
                                                                      GHC.Integer.Type.negateInteger
                                                                          ww_scCgm;
                                                            } in 
                                                              case
                                                                  GHC.Integer.Type.negateInteger
                                                                      ww2_scCgo
                                                              of
                                                              sat_scCgy
                                                              { __DEFAULT ->
                                                                    case
                                                                        $wsimplest'_rcBZs
                                                                            sat_scCgy
                                                                            ww3_scCgp
                                                                            sat_scCgz
                                                                            ww1_scCgn
                                                                    of
                                                                    { (#,#) ww5_scCgB [Occ=Once]
                                                                            ww6_scCgC [Occ=Once] ->
                                                                          case
                                                                              GHC.Integer.Type.negateInteger
                                                                                  ww5_scCgB
                                                                          of
                                                                          dt_scCgD
                                                                          { __DEFAULT ->
                                                                                (#,#) [dt_scCgD
                                                                                       ww6_scCgC];
                                                                          };
                                                                    };
                                                              };
                                                      };
                                                };
                                          };
                                      GHC.Types.GT ->
                                          $wsimplest'_rcBZs ww_scCgm ww1_scCgn ww2_scCgo ww3_scCgp;
                                    };
                          } in 
                            case GHC.Integer.Type.eqInteger# ww_scCgm ww2_scCgo of {
                              __DEFAULT -> $j_scCgt;
                              1# ->
                                  case GHC.Integer.Type.eqInteger# ww1_scCgn ww3_scCgp of {
                                    __DEFAULT -> $j_scCgt;
                                    1# -> (#,#) [ww_scCgm ww1_scCgn];
                                  };
                            };
                      1# -> Data.Ratio.$wsimplest ww2_scCgo ww3_scCgp ww_scCgm ww1_scCgn;
                    };
              };
        };

Data.Ratio.$wapproxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Real.RealFrac a =>
     a -> a -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scCgG w1_scCgH w2_scCgI]
        case
            GHC.Real.$p1RealFrac w_scCgG
        of
        $dReal_scCgJ [Dmd=<S(LLC(S(SS))),U(A,A,C(U(U,U)))>]
        { __DEFAULT ->
              case GHC.Real.toRational $dReal_scCgJ w1_scCgH of {
                GHC.Real.:% ww1_scCgL ww2_scCgM ->
                    case GHC.Real.toRational $dReal_scCgJ w2_scCgI of {
                      GHC.Real.:% ww4_scCgO ww5_scCgP ->
                          case GHC.Real.$w$s$c- ww1_scCgL ww2_scCgM ww4_scCgO ww5_scCgP of {
                            (#,#) ww7_scCgR [Occ=Once] ww8_scCgS [Occ=Once] ->
                                case GHC.Real.$w$s$c+ ww1_scCgL ww2_scCgM ww4_scCgO ww5_scCgP of {
                                  (#,#) ww12_scCgU [Occ=Once] ww13_scCgV [Occ=Once] ->
                                      Data.Ratio.$wsimplest
                                          ww7_scCgR ww8_scCgS ww12_scCgU ww13_scCgV;
                                };
                          };
                    };
              };
        };

Data.Ratio.approxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Real.RealFrac a => a -> a -> GHC.Real.Rational
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_scCgW w1_scCgX w2_scCgY]
        case Data.Ratio.$wapproxRational w_scCgW w1_scCgX w2_scCgY of {
          (#,#) ww1_scCh0 [Occ=Once] ww2_scCh1 [Occ=Once] ->
              GHC.Real.:% [ww1_scCh0 ww2_scCh1];
        };

Data.Ratio.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Ratio.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule4];

Data.Ratio.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Ratio"#;

Data.Ratio.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Ratio.$trModule2];

Data.Ratio.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Ratio.$trModule3
                                     Data.Ratio.$trModule1];

