
==================== Raw Cmm ====================
2018-03-16 16:06:56.196039961 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:56.199313187 UTC

[section ""data" . Data.List.isSubsequenceOf_closure" {
     Data.List.isSubsequenceOf_closure:
         const Data.List.isSubsequenceOf_info;
 },
 Data.List.isSubsequenceOf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc21Z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cc220; else goto uc22x;
       cc220: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.isSubsequenceOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       uc22x: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cc21P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.List.isSubsequenceOf_info" {
     Data.List.isSubsequenceOf_info:
         const Data.List.isSubsequenceOf_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc21P() //  []
         { []
         }
     {offset
       cc21P: // global
           I64[Sp - 8] = block_cc21S_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc22A; else goto cc21T;
       uc22A: // global
           call _cc21S(R1) args: 0, res: 0, upd: 0;
       cc21T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cc21S() //  [R1]
         { []
         }
     {offset
       cc21S: // global
           if (R1 & 7 == 1) goto cc21W; else goto cc21X;
       cc21W: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc21X: // global
           I64[Sp - 8] = block_cc227_info;
           _sc1ZY::P64 = R1;
           _sc1ZZ::P64 = P64[R1 + 6];
           _sc200::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _sc200::P64;
           P64[Sp + 16] = _sc1ZZ::P64;
           P64[Sp + 24] = _sc1ZY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc22B; else goto cc229;
       uc22B: // global
           call _cc227(R1) args: 0, res: 0, upd: 0;
       cc229: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc21S_info" {
     block_cc21S_info:
         const _cc21S;
         const 131;
         const 30;
 },
 _cc227() //  [R1]
         { []
         }
     {offset
       cc227: // global
           if (R1 & 7 == 1) goto cc22f; else goto cc22k;
       cc22f: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc22k: // global
           I64[Sp] = block_cc22i_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc227_info" {
     block_cc227_info:
         const _cc227;
         const 4;
         const 30;
 },
 _cc22i() //  [R1]
         { []
         }
     {offset
       cc22i: // global
           _sc1ZV::P64 = P64[Sp + 16];
           _sc203::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cc22q; else goto cc22u;
       cc22q: // global
           P64[Sp + 16] = _sc1ZV::P64;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = _sc203::P64;
           Sp = Sp + 16;
           goto uc22E;
       cc22u: // global
           P64[Sp + 16] = _sc1ZV::P64;
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = _sc203::P64;
           Sp = Sp + 16;
           goto uc22E;
       uc22E: // global
           call _cc21P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cc22i_info" {
     block_cc22i_info:
         const _cc22i;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.209701474 UTC

[section ""cstring" . Data.List.$trModule4_bytes" {
     Data.List.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.2113369 UTC

[section ""data" . Data.List.$trModule3_closure" {
     Data.List.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.212976423 UTC

[section ""cstring" . Data.List.$trModule2_bytes" {
     Data.List.$trModule2_bytes:
         I8[] [68,97,116,97,46,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.214749212 UTC

[section ""data" . Data.List.$trModule1_closure" {
     Data.List.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.21652558 UTC

[section ""data" . Data.List.$trModule_closure" {
     Data.List.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.List.$trModule3_closure+1;
         const Data.List.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.218602743 UTC

[section ""relreadonly" . Sc20W_srt" { Sc20W_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.253010101 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:56.256224869 UTC

[section ""data" . Data.List.isSubsequenceOf_closure" {
     Data.List.isSubsequenceOf_closure:
         const Data.List.isSubsequenceOf_info;
 },
 Data.List.isSubsequenceOf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc23B: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cc23C; else goto uc249;
       cc23C: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.isSubsequenceOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       uc249: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cc23r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.List.isSubsequenceOf_info" {
     Data.List.isSubsequenceOf_info:
         const Data.List.isSubsequenceOf_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cc23r() //  []
         { []
         }
     {offset
       cc23r: // global
           I64[Sp - 8] = block_cc23u_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc24c; else goto cc23v;
       uc24c: // global
           call _cc23u(R1) args: 0, res: 0, upd: 0;
       cc23v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cc23u() //  [R1]
         { []
         }
     {offset
       cc23u: // global
           if (R1 & 7 == 1) goto cc23y; else goto cc23z;
       cc23y: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc23z: // global
           I64[Sp - 8] = block_cc23J_info;
           _sc23j::P64 = R1;
           _sc23k::P64 = P64[R1 + 6];
           _sc23l::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _sc23l::P64;
           P64[Sp + 16] = _sc23k::P64;
           P64[Sp + 24] = _sc23j::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc24d; else goto cc23L;
       uc24d: // global
           call _cc23J(R1) args: 0, res: 0, upd: 0;
       cc23L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc23u_info" {
     block_cc23u_info:
         const _cc23u;
         const 131;
         const 30;
 },
 _cc23J() //  [R1]
         { []
         }
     {offset
       cc23J: // global
           if (R1 & 7 == 1) goto cc23R; else goto cc23W;
       cc23R: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc23W: // global
           I64[Sp] = block_cc23U_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 6];
           P64[Sp + 24] = P64[R1 + 14];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc23J_info" {
     block_cc23J_info:
         const _cc23J;
         const 4;
         const 30;
 },
 _cc23U() //  [R1]
         { []
         }
     {offset
       cc23U: // global
           _sc23g::P64 = P64[Sp + 16];
           _sc23o::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cc242; else goto cc246;
       cc242: // global
           P64[Sp + 16] = _sc23g::P64;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = _sc23o::P64;
           Sp = Sp + 16;
           goto uc24g;
       cc246: // global
           P64[Sp + 16] = _sc23g::P64;
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = _sc23o::P64;
           Sp = Sp + 16;
           goto uc24g;
       uc24g: // global
           call _cc23r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cc23U_info" {
     block_cc23U_info:
         const _cc23U;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.266312735 UTC

[section ""cstring" . Data.List.$trModule4_bytes" {
     Data.List.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.267984 UTC

[section ""data" . Data.List.$trModule3_closure" {
     Data.List.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.269622595 UTC

[section ""cstring" . Data.List.$trModule2_bytes" {
     Data.List.$trModule2_bytes:
         I8[] [68,97,116,97,46,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.271311237 UTC

[section ""data" . Data.List.$trModule1_closure" {
     Data.List.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.273069229 UTC

[section ""data" . Data.List.$trModule_closure" {
     Data.List.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.List.$trModule3_closure+1;
         const Data.List.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.275160067 UTC

[section ""relreadonly" . Sc24X_srt" { Sc24X_srt:
 }]

