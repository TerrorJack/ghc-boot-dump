
==================== Tidy Core ====================
2018-03-16 16:08:56.292134105 UTC

Result size of Tidy Core
  = {terms: 802, types: 2,735, coercions: 197, joins: 0/2}

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
bimap
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall a b c d. (a -> b) -> (c -> d) -> p a c -> p b d
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),U(U,A,A)>,
 RULES: Built in rule for bimap: "Class op bimap"]
bimap
  = \ (@ (p_adHMW :: * -> * -> *)) (v_B1 :: Bifunctor p_adHMW) ->
      case v_B1 of v_B1 { Data.Bifunctor.C:Bifunctor v_B2 v_B3 v_B4 ->
      v_B2
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
first
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall a b c. (a -> b) -> p a c -> p b c
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),U(A,U,A)>,
 RULES: Built in rule for first: "Class op first"]
first
  = \ (@ (p_adHMW :: * -> * -> *)) (v_B1 :: Bifunctor p_adHMW) ->
      case v_B1 of v_B1 { Data.Bifunctor.C:Bifunctor v_B2 v_B3 v_B4 ->
      v_B3
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
second
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall b c a. (b -> c) -> p a b -> p a c
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),U(A,A,U)>,
 RULES: Built in rule for second: "Class op second"]
second
  = \ (@ (p_adHMW :: * -> * -> *)) (v_B1 :: Bifunctor p_adHMW) ->
      case v_B1 of v_B1 { Data.Bifunctor.C:Bifunctor v_B2 v_B3 v_B4 ->
      v_B4
      }

-- RHS size: {terms: 18, types: 27, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,)_$cbimap
  :: forall a b c d. (a -> b) -> (c -> d) -> (a, c) -> (b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adHX1)
                 (@ b_adHX2)
                 (@ c_adHX3)
                 (@ d_adHX4)
                 (f_adHO7 [Occ=Once!] :: a_adHX1 -> b_adHX2)
                 (g_adHO8 [Occ=Once!] :: c_adHX3 -> d_adHX4)
                 (ds_ddI1i :: (a_adHX1, c_adHX3)) ->
                 (f_adHO7
                    (case ds_ddI1i of { (a1_adHO9 [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHO9
                     }),
                  g_adHO8
                    (case ds_ddI1i of { (_ [Occ=Dead], b1_adHOa [Occ=Once]) ->
                     b1_adHOa
                     }))}]
Data.Bifunctor.$fBifunctor(,)_$cbimap
  = \ (@ a_adHX1)
      (@ b_adHX2)
      (@ c_adHX3)
      (@ d_adHX4)
      (f_adHO7 :: a_adHX1 -> b_adHX2)
      (g_adHO8 :: c_adHX3 -> d_adHX4)
      (ds_ddI1i :: (a_adHX1, c_adHX3)) ->
      (f_adHO7 (case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> a1_adHO9 }),
       g_adHO8 (case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> b1_adHOa }))

-- RHS size: {terms: 23, types: 42, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,)_$cbimap
  :: forall x1 a b c d.
     (a -> b) -> (c -> d) -> (x1, a, c) -> (x1, b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHWp)
                 (@ a_adHWt)
                 (@ b_adHWu)
                 (@ c_adHWv)
                 (@ d_adHWw)
                 (f_adHO2 [Occ=Once!] :: a_adHWt -> b_adHWu)
                 (g_adHO3 [Occ=Once!] :: c_adHWv -> d_adHWw)
                 (ds_ddI0Z :: (x1_adHWp, a_adHWt, c_adHWv)) ->
                 (case ds_ddI0Z of
                  { (x2_adHO4 [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x2_adHO4
                  },
                  f_adHO2
                    (case ds_ddI0Z of
                     { (_ [Occ=Dead], a1_adHO5 [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHO5
                     }),
                  g_adHO3
                    (case ds_ddI0Z of
                     { (_ [Occ=Dead], _ [Occ=Dead], b1_adHO6 [Occ=Once]) ->
                     b1_adHO6
                     }))}]
Data.Bifunctor.$fBifunctor(,,)_$cbimap
  = \ (@ x1_adHWp)
      (@ a_adHWt)
      (@ b_adHWu)
      (@ c_adHWv)
      (@ d_adHWw)
      (f_adHO2 :: a_adHWt -> b_adHWu)
      (g_adHO3 :: c_adHWv -> d_adHWw)
      (ds_ddI0Z :: (x1_adHWp, a_adHWt, c_adHWv)) ->
      (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> x2_adHO4 },
       f_adHO2
         (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> a1_adHO5 }),
       g_adHO3
         (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> b1_adHO6 }))

-- RHS size: {terms: 28, types: 61, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,)_$cbimap
  :: forall x1 x2 a b c d.
     (a -> b) -> (c -> d) -> (x1, x2, a, c) -> (x1, x2, b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVP)
                 (@ x2_adHVQ)
                 (@ a_adHVU)
                 (@ b_adHVV)
                 (@ c_adHVW)
                 (@ d_adHVX)
                 (f_adHNV [Occ=Once!] :: a_adHVU -> b_adHVV)
                 (g_adHNW [Occ=Once!] :: c_adHVW -> d_adHVX)
                 (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHVU, c_adHVW)) ->
                 (case ds_ddI0x of
                  { (x4_adHNX [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNX
                  },
                  case ds_ddI0x of
                  { (_ [Occ=Dead], x5_adHNY [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNY
                  },
                  f_adHNV
                    (case ds_ddI0x of
                     { (_ [Occ=Dead], _ [Occ=Dead], a1_adHNZ [Occ=Once],
                        _ [Occ=Dead]) ->
                     a1_adHNZ
                     }),
                  g_adHNW
                    (case ds_ddI0x of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        b1_adHO0 [Occ=Once]) ->
                     b1_adHO0
                     }))}]
Data.Bifunctor.$fBifunctor(,,,)_$cbimap
  = \ (@ x1_adHVP)
      (@ x2_adHVQ)
      (@ a_adHVU)
      (@ b_adHVV)
      (@ c_adHVW)
      (@ d_adHVX)
      (f_adHNV :: a_adHVU -> b_adHVV)
      (g_adHNW :: c_adHVW -> d_adHVX)
      (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHVU, c_adHVW)) ->
      (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x4_adHNX
       },
       case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x5_adHNY
       },
       f_adHNV
         (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
          a1_adHNZ
          }),
       g_adHNW
         (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
          b1_adHO0
          }))

-- RHS size: {terms: 33, types: 84, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,)_$cbimap
  :: forall x1 x2 x3 a b c d.
     (a -> b) -> (c -> d) -> (x1, x2, x3, a, c) -> (x1, x2, x3, b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVe)
                 (@ x2_adHVf)
                 (@ x3_adHVg)
                 (@ a_adHVk)
                 (@ b_adHVl)
                 (@ c_adHVm)
                 (@ d_adHVn)
                 (f_adHNM [Occ=Once!] :: a_adHVk -> b_adHVl)
                 (g_adHNN [Occ=Once!] :: c_adHVm -> d_adHVn)
                 (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVk, c_adHVm)) ->
                 (case ds_ddHZU of
                  { (x4_adHNO [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNO
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], x5_adHNP [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNP
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], _ [Occ=Dead], x6_adHNQ [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x6_adHNQ
                  },
                  f_adHNM
                    (case ds_ddHZU of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], a1_adHNR [Occ=Once],
                        _ [Occ=Dead]) ->
                     a1_adHNR
                     }),
                  g_adHNN
                    (case ds_ddHZU of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        b1_adHNS [Occ=Once]) ->
                     b1_adHNS
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,)_$cbimap
  = \ (@ x1_adHVe)
      (@ x2_adHVf)
      (@ x3_adHVg)
      (@ a_adHVk)
      (@ b_adHVl)
      (@ c_adHVm)
      (@ d_adHVn)
      (f_adHNM :: a_adHVk -> b_adHVl)
      (g_adHNN :: c_adHVm -> d_adHVn)
      (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVk, c_adHVm)) ->
      (case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x4_adHNO
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x5_adHNP
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x6_adHNQ
       },
       f_adHNM
         (case ds_ddHZU of
          { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
          a1_adHNR
          }),
       g_adHNN
         (case ds_ddHZU of
          { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
          b1_adHNS
          }))

-- RHS size: {terms: 38, types: 111, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,)_$cbimap [InlPrag=NOUSERINLINE[0]]
  :: forall x1 x2 x3 x4 a b c d.
     (a -> b)
     -> (c -> d) -> (x1, x2, x3, x4, a, c) -> (x1, x2, x3, x4, b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_sdIcZ)
                 (@ x2_sdId0)
                 (@ x3_sdId1)
                 (@ x4_sdId2)
                 (@ a_sdId3)
                 (@ b_sdId4)
                 (@ c_sdId5)
                 (@ d_sdId6)
                 (w_sdId7 [Occ=Once!] :: a_sdId3 -> b_sdId4)
                 (w1_sdId8 [Occ=Once!] :: c_sdId5 -> d_sdId6)
                 (w2_sdId9
                    :: (x1_sdIcZ, x2_sdId0, x3_sdId1, x4_sdId2, a_sdId3, c_sdId5)) ->
                 (case w2_sdId9 of
                  { (x7_adHND [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHND
                  },
                  case w2_sdId9 of
                  { (_ [Occ=Dead], x8_adHNE [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNE
                  },
                  case w2_sdId9 of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNF [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNF
                  },
                  case w2_sdId9 of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNG [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNG
                  },
                  w_sdId7
                    (case w2_sdId9 of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        a1_adHNH [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHNH
                     }),
                  w1_sdId8
                    (case w2_sdId9 of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], b1_adHNI [Occ=Once]) ->
                     b1_adHNI
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,,)_$cbimap
  = \ (@ x1_sdIcZ)
      (@ x2_sdId0)
      (@ x3_sdId1)
      (@ x4_sdId2)
      (@ a_sdId3)
      (@ b_sdId4)
      (@ c_sdId5)
      (@ d_sdId6)
      (w_sdId7 :: a_sdId3 -> b_sdId4)
      (w1_sdId8 :: c_sdId5 -> d_sdId6)
      (w2_sdId9
         :: (x1_sdIcZ, x2_sdId0, x3_sdId1, x4_sdId2, a_sdId3, c_sdId5)) ->
      (case w2_sdId9 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x7_adHND
       },
       case w2_sdId9 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x8_adHNE
       },
       case w2_sdId9 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x9_adHNF
       },
       case w2_sdId9 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x10_adHNG
       },
       w_sdId7
         (case w2_sdId9 of
          { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
          a1_adHNH
          }),
       w1_sdId8
         (case w2_sdId9 of
          { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
          b1_adHNI
          }))

-- RHS size: {terms: 43, types: 142, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,,)_$cbimap [InlPrag=NOUSERINLINE[0]]
  :: forall x1 x2 x3 x4 x5 a b c d.
     (a -> b)
     -> (c -> d)
     -> (x1, x2, x3, x4, x5, a, c)
     -> (x1, x2, x3, x4, x5, b, d)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_sdIde)
                 (@ x2_sdIdf)
                 (@ x3_sdIdg)
                 (@ x4_sdIdh)
                 (@ x5_sdIdi)
                 (@ a_sdIdj)
                 (@ b_sdIdk)
                 (@ c_sdIdl)
                 (@ d_sdIdm)
                 (w_sdIdn [Occ=Once!] :: a_sdIdj -> b_sdIdk)
                 (w1_sdIdo [Occ=Once!] :: c_sdIdl -> d_sdIdm)
                 (w2_sdIdp
                    :: (x1_sdIde, x2_sdIdf, x3_sdIdg, x4_sdIdh, x5_sdIdi, a_sdIdj,
                        c_sdIdl)) ->
                 (case w2_sdIdp of
                  { (x7_adHNq [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHNq
                  },
                  case w2_sdIdp of
                  { (_ [Occ=Dead], x8_adHNr [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNr
                  },
                  case w2_sdIdp of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNs [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNs
                  },
                  case w2_sdIdp of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNt [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNt
                  },
                  case w2_sdIdp of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     x11_adHNu [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x11_adHNu
                  },
                  w_sdIdn
                    (case w2_sdIdp of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], a1_adHNv [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHNv
                     }),
                  w1_sdIdo
                    (case w2_sdIdp of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], _ [Occ=Dead], b1_adHNw [Occ=Once]) ->
                     b1_adHNw
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,,,)_$cbimap
  = \ (@ x1_sdIde)
      (@ x2_sdIdf)
      (@ x3_sdIdg)
      (@ x4_sdIdh)
      (@ x5_sdIdi)
      (@ a_sdIdj)
      (@ b_sdIdk)
      (@ c_sdIdl)
      (@ d_sdIdm)
      (w_sdIdn :: a_sdIdj -> b_sdIdk)
      (w1_sdIdo :: c_sdIdl -> d_sdIdm)
      (w2_sdIdp
         :: (x1_sdIde, x2_sdIdf, x3_sdIdg, x4_sdIdh, x5_sdIdi, a_sdIdj,
             c_sdIdl)) ->
      (case w2_sdIdp of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x7_adHNq
       },
       case w2_sdIdp of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x8_adHNr
       },
       case w2_sdIdp of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x9_adHNs
       },
       case w2_sdIdp of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x10_adHNt
       },
       case w2_sdIdp of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x11_adHNu
       },
       w_sdIdn
         (case w2_sdIdp of
          { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
             b1_adHNw) ->
          a1_adHNv
          }),
       w1_sdIdo
         (case w2_sdIdp of
          { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
             b1_adHNw) ->
          b1_adHNw
          }))

-- RHS size: {terms: 17, types: 24, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorEither_$cbimap
  :: forall a b c d. (a -> b) -> (c -> d) -> Either a c -> Either b d
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adHTq)
                 (@ b_adHTr)
                 (@ c_adHTs)
                 (@ d_adHTt)
                 (f_adHNf [Occ=Once!] :: a_adHTq -> b_adHTr)
                 (ds_ddHXQ [Occ=Once!] :: c_adHTs -> d_adHTt)
                 (ds1_ddHXR [Occ=Once!] :: Either a_adHTq c_adHTs) ->
                 case ds1_ddHXR of {
                   Left a1_adHNg [Occ=Once] ->
                     Data.Either.Left @ b_adHTr @ d_adHTt (f_adHNf a1_adHNg);
                   Right b1_adHNi [Occ=Once] ->
                     Data.Either.Right @ b_adHTr @ d_adHTt (ds_ddHXQ b1_adHNi)
                 }}]
Data.Bifunctor.$fBifunctorEither_$cbimap
  = \ (@ a_adHTq)
      (@ b_adHTr)
      (@ c_adHTs)
      (@ d_adHTt)
      (f_adHNf :: a_adHTq -> b_adHTr)
      (ds_ddHXQ :: c_adHTs -> d_adHTt)
      (ds1_ddHXR :: Either a_adHTq c_adHTs) ->
      case ds1_ddHXR of {
        Left a1_adHNg ->
          Data.Either.Left @ b_adHTr @ d_adHTt (f_adHNf a1_adHNg);
        Right b1_adHNi ->
          Data.Either.Right @ b_adHTr @ d_adHTt (ds_ddHXQ b1_adHNi)
      }

-- RHS size: {terms: 9, types: 17, coercions: 5, joins: 0/0}
Data.Bifunctor.$fBifunctorConst3
  :: forall a b c d. (a -> b) -> (c -> d) -> Const a c -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_adHSP)
                 (@ b_adHSQ)
                 (@ c_adHSR)
                 (@ d_adHSS)
                 (f_adHNd [Occ=Once!] :: a_adHSP -> b_adHSQ)
                 _ [Occ=Dead]
                 (ds1_ddHXL [Occ=Once] :: Const a_adHSP c_adHSR) ->
                 f_adHNd
                   (ds1_ddHXL
                    `cast` (Data.Functor.Const.N:Const[0] <*>_N <a_adHSP>_R <c_adHSR>_P
                            :: (Const a_adHSP c_adHSR :: *) ~R# (a_adHSP :: *)))}]
Data.Bifunctor.$fBifunctorConst3
  = \ (@ a_adHSP)
      (@ b_adHSQ)
      (@ c_adHSR)
      (@ d_adHSS)
      (f_adHNd :: a_adHSP -> b_adHSQ)
      _ [Occ=Dead]
      (ds1_ddHXL :: Const a_adHSP c_adHSR) ->
      f_adHNd
        (ds1_ddHXL
         `cast` (Data.Functor.Const.N:Const[0] <*>_N <a_adHSP>_R <c_adHSR>_P
                 :: (Const a_adHSP c_adHSR :: *) ~R# (a_adHSP :: *)))

-- RHS size: {terms: 10, types: 19, coercions: 6, joins: 0/0}
Data.Bifunctor.$fBifunctorK4
  :: forall i a b c d. (a -> b) -> (c -> d) -> K1 i a c -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ i_adHS9)
                 (@ a_adHSd)
                 (@ b_adHSe)
                 (@ c_adHSf)
                 (@ d_adHSg)
                 (f_adHNb [Occ=Once!] :: a_adHSd -> b_adHSe)
                 _ [Occ=Dead]
                 (ds1_ddHXF [Occ=Once] :: K1 i_adHS9 a_adHSd c_adHSf) ->
                 f_adHNb
                   (ds1_ddHXF
                    `cast` (GHC.Generics.N:K1[0]
                                <*>_N <i_adHS9>_P <a_adHSd>_R <c_adHSf>_P
                            :: (K1 i_adHS9 a_adHSd c_adHSf :: *) ~R# (a_adHSd :: *)))}]
Data.Bifunctor.$fBifunctorK4
  = \ (@ i_adHS9)
      (@ a_adHSd)
      (@ b_adHSe)
      (@ c_adHSf)
      (@ d_adHSg)
      (f_adHNb :: a_adHSd -> b_adHSe)
      _ [Occ=Dead]
      (ds1_ddHXF :: K1 i_adHS9 a_adHSd c_adHSf) ->
      f_adHNb
        (ds1_ddHXF
         `cast` (GHC.Generics.N:K1[0]
                     <*>_N <i_adHS9>_P <a_adHSd>_R <c_adHSf>_P
                 :: (K1 i_adHS9 a_adHSd c_adHSf :: *) ~R# (a_adHSd :: *)))

-- RHS size: {terms: 8, types: 20, coercions: 0, joins: 0/0}
Data.Bifunctor.$dmsecond
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall b c a. (b -> c) -> p a b -> p a c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (p_adHMW :: * -> * -> *))
                 ($dBifunctor_adHRl [Occ=Once] :: Bifunctor p_adHMW)
                 (@ b_adHRW)
                 (@ c_adHRX)
                 (@ a_adHRY) ->
                 bimap
                   @ p_adHMW
                   $dBifunctor_adHRl
                   @ a_adHRY
                   @ a_adHRY
                   @ b_adHRW
                   @ c_adHRX
                   (id @ a_adHRY)}]
Data.Bifunctor.$dmsecond
  = \ (@ (p_adHMW :: * -> * -> *))
      ($dBifunctor_adHRl :: Bifunctor p_adHMW)
      (@ b_adHRW)
      (@ c_adHRX)
      (@ a_adHRY) ->
      bimap
        @ p_adHMW
        $dBifunctor_adHRl
        @ a_adHRY
        @ a_adHRY
        @ b_adHRW
        @ c_adHRX
        (id @ a_adHRY)

-- RHS size: {terms: 10, types: 22, coercions: 0, joins: 0/0}
Data.Bifunctor.$dmfirst
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall a b c. (a -> b) -> p a c -> p b c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(S))LL),1*U(1*C1(C1(U)),A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (p_adHMW :: * -> * -> *))
                 ($dBifunctor_adHRl [Occ=Once] :: Bifunctor p_adHMW)
                 (@ a_adHRI)
                 (@ b_adHRJ)
                 (@ c_adHRK)
                 (f_adHN9 [Occ=Once] :: a_adHRI -> b_adHRJ) ->
                 bimap
                   @ p_adHMW
                   $dBifunctor_adHRl
                   @ a_adHRI
                   @ b_adHRJ
                   @ c_adHRK
                   @ c_adHRK
                   f_adHN9
                   (id @ c_adHRK)}]
Data.Bifunctor.$dmfirst
  = \ (@ (p_adHMW :: * -> * -> *))
      ($dBifunctor_adHRl :: Bifunctor p_adHMW)
      (@ a_adHRI)
      (@ b_adHRJ)
      (@ c_adHRK)
      (f_adHN9 :: a_adHRI -> b_adHRJ) ->
      bimap
        @ p_adHMW
        $dBifunctor_adHRl
        @ a_adHRI
        @ b_adHRJ
        @ c_adHRK
        @ c_adHRK
        f_adHN9
        (id @ c_adHRK)

-- RHS size: {terms: 8, types: 15, coercions: 6, joins: 0/0}
Data.Bifunctor.$fBifunctorK3
  :: forall c a i b. (a -> b) -> K1 i a c -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ c_adHSr)
                 (@ a_adHSp)
                 (@ i_XdHTm)
                 (@ b_adHSq)
                 (f_XdHOt [Occ=Once!] :: a_adHSp -> b_adHSq)
                 (ds_XdHYZ [Occ=Once] :: K1 i_XdHTm a_adHSp c_adHSr) ->
                 f_XdHOt
                   (ds_XdHYZ
                    `cast` (GHC.Generics.N:K1[0]
                                <*>_N <i_XdHTm>_P <a_adHSp>_R <c_adHSr>_P
                            :: (K1 i_XdHTm a_adHSp c_adHSr :: *) ~R# (a_adHSp :: *)))}]
Data.Bifunctor.$fBifunctorK3
  = \ (@ c_adHSr)
      (@ a_adHSp)
      (@ i_XdHTm)
      (@ b_adHSq)
      (f_XdHOt :: a_adHSp -> b_adHSq)
      (ds_XdHYZ :: K1 i_XdHTm a_adHSp c_adHSr) ->
      f_XdHOt
        (ds_XdHYZ
         `cast` (GHC.Generics.N:K1[0]
                     <*>_N <i_XdHTm>_P <a_adHSp>_R <c_adHSr>_P
                 :: (K1 i_XdHTm a_adHSp c_adHSr :: *) ~R# (a_adHSp :: *)))

-- RHS size: {terms: 7, types: 15, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorK2
  :: forall b a i c. (b -> c) -> K1 i a b -> K1 i a b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_adHSB)
                 (@ a_adHSD)
                 (@ i_XdHTk)
                 (@ c_adHSC)
                 _ [Occ=Dead]
                 (ds1_XdI0g [Occ=Once] :: K1 i_XdHTk a_adHSD b_adHSB) ->
                 ds1_XdI0g}]
Data.Bifunctor.$fBifunctorK2
  = \ (@ b_adHSB)
      (@ a_adHSD)
      (@ i_XdHTk)
      (@ c_adHSC)
      _ [Occ=Dead]
      (ds1_XdI0g :: K1 i_XdHTk a_adHSD b_adHSB) ->
      ds1_XdI0g

-- RHS size: {terms: 11, types: 26, coercions: 91, joins: 0/0}
Data.Bifunctor.$fBifunctorK1 [InlPrag=NOUSERINLINE CONLIKE]
  :: forall i. Bifunctor (K1 i)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ i_adHNa) ->
       Data.Bifunctor.C:Bifunctor TYPE: K1 i_adHNa
                                  (Data.Bifunctor.$fBifunctorK4 @ i_adHNa)
                                  `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                                          <a -> b>_R
                                          ->_R <c -> d>_R
                                          ->_R <K1 i_adHNa a c>_R
                                          ->_R Sym (GHC.Generics.N:K1[0]
                                                        <*>_N <i_adHNa>_P <b>_R <d>_P)
                                          :: (forall a b c d.
                                              (a -> b) -> (c -> d) -> K1 i_adHNa a c -> b :: *)
                                             ~R# (forall a b c d.
                                                  (a -> b)
                                                  -> (c -> d)
                                                  -> K1 i_adHNa a c
                                                  -> K1 i_adHNa b d :: *))
                                  (\ (@ a_adHSp) (@ b_adHSq) (@ c_adHSr) ->
                                     Data.Bifunctor.$fBifunctorK3
                                       @ c_adHSr @ a_adHSp @ i_adHNa @ b_adHSq)
                                  `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                          <a -> b>_R
                                          ->_R <K1 i_adHNa a c>_R
                                          ->_R Sym (GHC.Generics.N:K1[0]
                                                        <*>_N <i_adHNa>_P <b>_R <c>_P)
                                          :: (forall a b c. (a -> b) -> K1 i_adHNa a c -> b :: *)
                                             ~R# (forall a b c.
                                                  (a -> b)
                                                  -> K1 i_adHNa a c -> K1 i_adHNa b c :: *))
                                  (\ (@ b_adHSB) (@ c_adHSC) (@ a_adHSD) ->
                                     Data.Bifunctor.$fBifunctorK2
                                       @ b_adHSB @ a_adHSD @ i_adHNa @ c_adHSC)
                                  `cast` (forall (b :: <*>_N) (c :: <*>_N) (a :: <*>_N).
                                          <b -> c>_R
                                          ->_R <K1 i_adHNa a b>_R
                                          ->_R GHC.Generics.N:K1[0]
                                                   <*>_N
                                                   <i_adHNa>_P
                                                   <a>_R
                                                   <b>_P ; Sym (GHC.Generics.N:K1[0]
                                                                    <*>_N <i_adHNa>_P <a>_R <c>_P)
                                          :: (forall b c a.
                                              (b -> c) -> K1 i_adHNa a b -> K1 i_adHNa a b :: *)
                                             ~R# (forall b c a.
                                                  (b -> c)
                                                  -> K1 i_adHNa a b -> K1 i_adHNa a c :: *))]
Data.Bifunctor.$fBifunctorK1
  = \ (@ i_XdHTj) ->
      Data.Bifunctor.C:Bifunctor
        @ (K1 i_XdHTj)
        ((Data.Bifunctor.$fBifunctorK4 @ i_XdHTj)
         `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <a -> b>_R
                 ->_R <c -> d>_R
                 ->_R <K1 i_XdHTj a c>_R
                 ->_R Sym (GHC.Generics.N:K1[0] <*>_N <i_XdHTj>_P <b>_R <d>_P)
                 :: (forall a b c d.
                     (a -> b) -> (c -> d) -> K1 i_XdHTj a c -> b :: *)
                    ~R# (forall a b c d.
                         (a -> b) -> (c -> d) -> K1 i_XdHTj a c -> K1 i_XdHTj b d :: *)))
        ((\ (@ a_adHSp) (@ b_adHSq) (@ c_adHSr) ->
            Data.Bifunctor.$fBifunctorK3
              @ c_adHSr @ a_adHSp @ i_XdHTj @ b_adHSq)
         `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <a -> b>_R
                 ->_R <K1 i_XdHTj a c>_R
                 ->_R Sym (GHC.Generics.N:K1[0] <*>_N <i_XdHTj>_P <b>_R <c>_P)
                 :: (forall a b c. (a -> b) -> K1 i_XdHTj a c -> b :: *)
                    ~R# (forall a b c.
                         (a -> b) -> K1 i_XdHTj a c -> K1 i_XdHTj b c :: *)))
        ((\ (@ b_adHSB) (@ c_adHSC) (@ a_adHSD) ->
            Data.Bifunctor.$fBifunctorK2
              @ b_adHSB @ a_adHSD @ i_XdHTj @ c_adHSC)
         `cast` (forall (b :: <*>_N) (c :: <*>_N) (a :: <*>_N).
                 <b -> c>_R
                 ->_R <K1 i_XdHTj a b>_R
                 ->_R GHC.Generics.N:K1[0]
                          <*>_N <i_XdHTj>_P <a>_R <b>_P ; Sym (GHC.Generics.N:K1[0]
                                                                   <*>_N <i_XdHTj>_P <a>_R <c>_P)
                 :: (forall b c a.
                     (b -> c) -> K1 i_XdHTj a b -> K1 i_XdHTj a b :: *)
                    ~R# (forall b c a.
                         (b -> c) -> K1 i_XdHTj a b -> K1 i_XdHTj a c :: *)))

-- RHS size: {terms: 7, types: 13, coercions: 5, joins: 0/0}
Data.Bifunctor.$fBifunctorConst2
  :: forall c a b. (a -> b) -> Const a c -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ c_adHT2)
                 (@ a_adHT0)
                 (@ b_adHT1)
                 (f_XdHOx [Occ=Once!] :: a_adHT0 -> b_adHT1)
                 (ds_XdHZ9 [Occ=Once] :: Const a_adHT0 c_adHT2) ->
                 f_XdHOx
                   (ds_XdHZ9
                    `cast` (Data.Functor.Const.N:Const[0] <*>_N <a_adHT0>_R <c_adHT2>_P
                            :: (Const a_adHT0 c_adHT2 :: *) ~R# (a_adHT0 :: *)))}]
Data.Bifunctor.$fBifunctorConst2
  = \ (@ c_adHT2)
      (@ a_adHT0)
      (@ b_adHT1)
      (f_XdHOx :: a_adHT0 -> b_adHT1)
      (ds_XdHZ9 :: Const a_adHT0 c_adHT2) ->
      f_XdHOx
        (ds_XdHZ9
         `cast` (Data.Functor.Const.N:Const[0] <*>_N <a_adHT0>_R <c_adHT2>_P
                 :: (Const a_adHT0 c_adHT2 :: *) ~R# (a_adHT0 :: *)))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorConst1
  :: forall b a c. (b -> c) -> Const a b -> Const a b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_adHTc)
                 (@ a_adHTe)
                 (@ c_adHTd)
                 _ [Occ=Dead]
                 (ds1_XdI0u [Occ=Once] :: Const a_adHTe b_adHTc) ->
                 ds1_XdI0u}]
Data.Bifunctor.$fBifunctorConst1
  = \ (@ b_adHTc)
      (@ a_adHTe)
      (@ c_adHTd)
      _ [Occ=Dead]
      (ds1_XdI0u :: Const a_adHTe b_adHTc) ->
      ds1_XdI0u

-- RHS size: {terms: 10, types: 21, coercions: 84, joins: 0/0}
Data.Bifunctor.$fBifunctorConst [InlPrag=NOUSERINLINE CONLIKE]
  :: Bifunctor Const
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       Data.Bifunctor.C:Bifunctor TYPE: Const
                                  Data.Bifunctor.$fBifunctorConst3
                                  `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                                          <a -> b>_R
                                          ->_R <c -> d>_R
                                          ->_R <Const a c>_R
                                          ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <b>_R <d>_P)
                                          :: (forall a b c d.
                                              (a -> b) -> (c -> d) -> Const a c -> b :: *)
                                             ~R# (forall a b c d.
                                                  (a -> b)
                                                  -> (c -> d) -> Const a c -> Const b d :: *))
                                  (\ (@ a_adHT0) (@ b_adHT1) (@ c_adHT2) ->
                                     Data.Bifunctor.$fBifunctorConst2 @ c_adHT2 @ a_adHT0 @ b_adHT1)
                                  `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                                          <a -> b>_R
                                          ->_R <Const a c>_R
                                          ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <b>_R <c>_P)
                                          :: (forall a b c. (a -> b) -> Const a c -> b :: *)
                                             ~R# (forall a b c.
                                                  (a -> b) -> Const a c -> Const b c :: *))
                                  (\ (@ b_adHTc) (@ c_adHTd) (@ a_adHTe) ->
                                     Data.Bifunctor.$fBifunctorConst1 @ b_adHTc @ a_adHTe @ c_adHTd)
                                  `cast` (forall (b :: <*>_N) (c :: <*>_N) (a :: <*>_N).
                                          <b -> c>_R
                                          ->_R <Const a b>_R
                                          ->_R Data.Functor.Const.N:Const[0]
                                                   <*>_N
                                                   <a>_R
                                                   <b>_P ; Sym (Data.Functor.Const.N:Const[0]
                                                                    <*>_N <a>_R <c>_P)
                                          :: (forall b c a. (b -> c) -> Const a b -> Const a b :: *)
                                             ~R# (forall b c a.
                                                  (b -> c) -> Const a b -> Const a c :: *))]
Data.Bifunctor.$fBifunctorConst
  = Data.Bifunctor.C:Bifunctor
      @ Const
      (Data.Bifunctor.$fBifunctorConst3
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
               <a -> b>_R
               ->_R <c -> d>_R
               ->_R <Const a c>_R
               ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <b>_R <d>_P)
               :: (forall a b c d. (a -> b) -> (c -> d) -> Const a c -> b :: *)
                  ~R# (forall a b c d.
                       (a -> b) -> (c -> d) -> Const a c -> Const b d :: *)))
      ((\ (@ a_adHT0) (@ b_adHT1) (@ c_adHT2) ->
          Data.Bifunctor.$fBifunctorConst2 @ c_adHT2 @ a_adHT0 @ b_adHT1)
       `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
               <a -> b>_R
               ->_R <Const a c>_R
               ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <b>_R <c>_P)
               :: (forall a b c. (a -> b) -> Const a c -> b :: *)
                  ~R# (forall a b c. (a -> b) -> Const a c -> Const b c :: *)))
      ((\ (@ b_adHTc) (@ c_adHTd) (@ a_adHTe) ->
          Data.Bifunctor.$fBifunctorConst1 @ b_adHTc @ a_adHTe @ c_adHTd)
       `cast` (forall (b :: <*>_N) (c :: <*>_N) (a :: <*>_N).
               <b -> c>_R
               ->_R <Const a b>_R
               ->_R Data.Functor.Const.N:Const[0]
                        <*>_N <a>_R <b>_P ; Sym (Data.Functor.Const.N:Const[0]
                                                     <*>_N <a>_R <c>_P)
               :: (forall b c a. (b -> c) -> Const a b -> Const a b :: *)
                  ~R# (forall b c a. (b -> c) -> Const a b -> Const a c :: *)))

-- RHS size: {terms: 14, types: 20, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorEither_$cfirst
  :: forall a b c. (a -> b) -> Either a c -> Either b c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adHTC)
                 (@ b_adHTD)
                 (@ c_adHTE)
                 (f_adHN9 [Occ=Once!] :: a_adHTC -> b_adHTD)
                 (ds_ddHXR [Occ=Once!] :: Either a_adHTC c_adHTE) ->
                 case ds_ddHXR of {
                   Left a1_adHNg [Occ=Once] ->
                     Data.Either.Left @ b_adHTD @ c_adHTE (f_adHN9 a1_adHNg);
                   Right b1_adHNi [Occ=Once] ->
                     Data.Either.Right @ b_adHTD @ c_adHTE b1_adHNi
                 }}]
Data.Bifunctor.$fBifunctorEither_$cfirst
  = \ (@ a_adHTC)
      (@ b_adHTD)
      (@ c_adHTE)
      (f_adHN9 :: a_adHTC -> b_adHTD)
      (ds_ddHXR :: Either a_adHTC c_adHTE) ->
      case ds_ddHXR of {
        Left a1_adHNg ->
          Data.Either.Left @ b_adHTD @ c_adHTE (f_adHN9 a1_adHNg);
        Right b1_adHNi -> Data.Either.Right @ b_adHTD @ c_adHTE b1_adHNi
      }

-- RHS size: {terms: 14, types: 20, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorEither_$csecond
  :: forall b c a. (b -> c) -> Either a b -> Either a c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_adHTO)
                 (@ c_adHTP)
                 (@ a_adHTQ)
                 (ds_ddHXQ [Occ=Once!] :: b_adHTO -> c_adHTP)
                 (ds1_ddHXR [Occ=Once!] :: Either a_adHTQ b_adHTO) ->
                 case ds1_ddHXR of {
                   Left a1_adHNg [Occ=Once] ->
                     Data.Either.Left @ a_adHTQ @ c_adHTP a1_adHNg;
                   Right b1_adHNi [Occ=Once] ->
                     Data.Either.Right @ a_adHTQ @ c_adHTP (ds_ddHXQ b1_adHNi)
                 }}]
Data.Bifunctor.$fBifunctorEither_$csecond
  = \ (@ b_adHTO)
      (@ c_adHTP)
      (@ a_adHTQ)
      (ds_ddHXQ :: b_adHTO -> c_adHTP)
      (ds1_ddHXR :: Either a_adHTQ b_adHTO) ->
      case ds1_ddHXR of {
        Left a1_adHNg -> Data.Either.Left @ a_adHTQ @ c_adHTP a1_adHNg;
        Right b1_adHNi ->
          Data.Either.Right @ a_adHTQ @ c_adHTP (ds_ddHXQ b1_adHNi)
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctorEither [InlPrag=NOUSERINLINE CONLIKE]
  :: Bifunctor Either
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bifunctor.C:Bifunctor TYPE: Either
                                  Data.Bifunctor.$fBifunctorEither_$cbimap
                                  Data.Bifunctor.$fBifunctorEither_$cfirst
                                  Data.Bifunctor.$fBifunctorEither_$csecond]
Data.Bifunctor.$fBifunctorEither
  = Data.Bifunctor.C:Bifunctor
      @ Either
      Data.Bifunctor.$fBifunctorEither_$cbimap
      Data.Bifunctor.$fBifunctorEither_$cfirst
      Data.Bifunctor.$fBifunctorEither_$csecond

-- RHS size: {terms: 40, types: 138, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,,)_$cfirst [InlPrag=NOUSERINLINE[0]]
  :: forall x1 x2 x3 x4 x5 a b c.
     (a -> b)
     -> (x1, x2, x3, x4, x5, a, c) -> (x1, x2, x3, x4, x5, b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_sdIdu)
                 (@ x2_sdIdv)
                 (@ x3_sdIdw)
                 (@ x4_sdIdx)
                 (@ x5_sdIdy)
                 (@ a_sdIdz)
                 (@ b_sdIdA)
                 (@ c_sdIdB)
                 (w_sdIdC [Occ=Once!] :: a_sdIdz -> b_sdIdA)
                 (w1_sdIdD
                    :: (x1_sdIdu, x2_sdIdv, x3_sdIdw, x4_sdIdx, x5_sdIdy, a_sdIdz,
                        c_sdIdB)) ->
                 (case w1_sdIdD of
                  { (x7_adHNq [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHNq
                  },
                  case w1_sdIdD of
                  { (_ [Occ=Dead], x8_adHNr [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNr
                  },
                  case w1_sdIdD of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNs [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNs
                  },
                  case w1_sdIdD of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNt [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNt
                  },
                  case w1_sdIdD of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     x11_adHNu [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x11_adHNu
                  },
                  w_sdIdC
                    (case w1_sdIdD of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], a1_adHNv [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHNv
                     }),
                  case w1_sdIdD of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], b1_adHNw [Occ=Once]) ->
                  b1_adHNw
                  })}]
Data.Bifunctor.$fBifunctor(,,,,,,)_$cfirst
  = \ (@ x1_sdIdu)
      (@ x2_sdIdv)
      (@ x3_sdIdw)
      (@ x4_sdIdx)
      (@ x5_sdIdy)
      (@ a_sdIdz)
      (@ b_sdIdA)
      (@ c_sdIdB)
      (w_sdIdC :: a_sdIdz -> b_sdIdA)
      (w1_sdIdD
         :: (x1_sdIdu, x2_sdIdv, x3_sdIdw, x4_sdIdx, x5_sdIdy, a_sdIdz,
             c_sdIdB)) ->
      (case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x7_adHNq
       },
       case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x8_adHNr
       },
       case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x9_adHNs
       },
       case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x10_adHNt
       },
       case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x11_adHNu
       },
       w_sdIdC
         (case w1_sdIdD of
          { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
             b1_adHNw) ->
          a1_adHNv
          }),
       case w1_sdIdD of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       b1_adHNw
       })

-- RHS size: {terms: 40, types: 138, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,,)_$csecond [InlPrag=NOUSERINLINE[0]]
  :: forall x1 x2 x3 x4 x5 b c a.
     (b -> c)
     -> (x1, x2, x3, x4, x5, a, b) -> (x1, x2, x3, x4, x5, a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_sdIdI)
                 (@ x2_sdIdJ)
                 (@ x3_sdIdK)
                 (@ x4_sdIdL)
                 (@ x5_sdIdM)
                 (@ b_sdIdN)
                 (@ c_sdIdO)
                 (@ a_sdIdP)
                 (w_sdIdQ [Occ=Once!] :: b_sdIdN -> c_sdIdO)
                 (w1_sdIdR
                    :: (x1_sdIdI, x2_sdIdJ, x3_sdIdK, x4_sdIdL, x5_sdIdM, a_sdIdP,
                        b_sdIdN)) ->
                 (case w1_sdIdR of
                  { (x7_adHNq [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHNq
                  },
                  case w1_sdIdR of
                  { (_ [Occ=Dead], x8_adHNr [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNr
                  },
                  case w1_sdIdR of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNs [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNs
                  },
                  case w1_sdIdR of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNt [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNt
                  },
                  case w1_sdIdR of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     x11_adHNu [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x11_adHNu
                  },
                  case w1_sdIdR of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], a1_adHNv [Occ=Once], _ [Occ=Dead]) ->
                  a1_adHNv
                  },
                  w_sdIdQ
                    (case w1_sdIdR of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], _ [Occ=Dead], b1_adHNw [Occ=Once]) ->
                     b1_adHNw
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,,,)_$csecond
  = \ (@ x1_sdIdI)
      (@ x2_sdIdJ)
      (@ x3_sdIdK)
      (@ x4_sdIdL)
      (@ x5_sdIdM)
      (@ b_sdIdN)
      (@ c_sdIdO)
      (@ a_sdIdP)
      (w_sdIdQ :: b_sdIdN -> c_sdIdO)
      (w1_sdIdR
         :: (x1_sdIdI, x2_sdIdJ, x3_sdIdK, x4_sdIdL, x5_sdIdM, a_sdIdP,
             b_sdIdN)) ->
      (case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x7_adHNq
       },
       case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x8_adHNr
       },
       case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x9_adHNs
       },
       case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x10_adHNt
       },
       case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       x11_adHNu
       },
       case w1_sdIdR of
       { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
          b1_adHNw) ->
       a1_adHNv
       },
       w_sdIdQ
         (case w1_sdIdR of
          { (x7_adHNq, x8_adHNr, x9_adHNs, x10_adHNt, x11_adHNu, a1_adHNv,
             b1_adHNw) ->
          b1_adHNw
          }))

-- RHS size: {terms: 9, types: 31, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall x1 x2 x3 x4 x5. Bifunctor ((,,,,,,) x1 x2 x3 x4 x5)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ x1_adHNj)
             (@ x2_adHNk)
             (@ x3_adHNl)
             (@ x4_adHNm)
             (@ x5_adHNn) ->
       Data.Bifunctor.C:Bifunctor TYPE: (,,,,,,)
                                          x1_adHNj x2_adHNk x3_adHNl x4_adHNm x5_adHNn
                                  Data.Bifunctor.$fBifunctor(,,,,,,)_$cbimap
                                    @ x1_adHNj @ x2_adHNk @ x3_adHNl @ x4_adHNm @ x5_adHNn
                                  Data.Bifunctor.$fBifunctor(,,,,,,)_$cfirst
                                    @ x1_adHNj @ x2_adHNk @ x3_adHNl @ x4_adHNm @ x5_adHNn
                                  Data.Bifunctor.$fBifunctor(,,,,,,)_$csecond
                                    @ x1_adHNj @ x2_adHNk @ x3_adHNl @ x4_adHNm @ x5_adHNn]
Data.Bifunctor.$fBifunctor(,,,,,,)
  = \ (@ x1_adHTZ)
      (@ x2_adHU0)
      (@ x3_adHU1)
      (@ x4_adHU2)
      (@ x5_adHU3) ->
      Data.Bifunctor.C:Bifunctor
        @ ((,,,,,,) x1_adHTZ x2_adHU0 x3_adHU1 x4_adHU2 x5_adHU3)
        (Data.Bifunctor.$fBifunctor(,,,,,,)_$cbimap
           @ x1_adHTZ @ x2_adHU0 @ x3_adHU1 @ x4_adHU2 @ x5_adHU3)
        (Data.Bifunctor.$fBifunctor(,,,,,,)_$cfirst
           @ x1_adHTZ @ x2_adHU0 @ x3_adHU1 @ x4_adHU2 @ x5_adHU3)
        (Data.Bifunctor.$fBifunctor(,,,,,,)_$csecond
           @ x1_adHTZ @ x2_adHU0 @ x3_adHU1 @ x4_adHU2 @ x5_adHU3)

-- RHS size: {terms: 35, types: 107, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,)_$cfirst
  :: forall x1 x2 x3 x4 a b c.
     (a -> b) -> (x1, x2, x3, x4, a, c) -> (x1, x2, x3, x4, b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHUC)
                 (@ x2_adHUD)
                 (@ x3_adHUE)
                 (@ x4_adHUF)
                 (@ a_adHUR)
                 (@ b_adHUS)
                 (@ c_adHUT)
                 (f_adHN9 [Occ=Once!] :: a_adHUR -> b_adHUS)
                 (ds_ddHZ4
                    :: (x1_adHUC, x2_adHUD, x3_adHUE, x4_adHUF, a_adHUR, c_adHUT)) ->
                 (case ds_ddHZ4 of
                  { (x7_adHND [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHND
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], x8_adHNE [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNE
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNF [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNF
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNG [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNG
                  },
                  f_adHN9
                    (case ds_ddHZ4 of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        a1_adHNH [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHNH
                     }),
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], b1_adHNI [Occ=Once]) ->
                  b1_adHNI
                  })}]
Data.Bifunctor.$fBifunctor(,,,,,)_$cfirst
  = \ (@ x1_adHUC)
      (@ x2_adHUD)
      (@ x3_adHUE)
      (@ x4_adHUF)
      (@ a_adHUR)
      (@ b_adHUS)
      (@ c_adHUT)
      (f_adHN9 :: a_adHUR -> b_adHUS)
      (ds_ddHZ4
         :: (x1_adHUC, x2_adHUD, x3_adHUE, x4_adHUF, a_adHUR, c_adHUT)) ->
      (case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x7_adHND
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x8_adHNE
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x9_adHNF
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x10_adHNG
       },
       f_adHN9
         (case ds_ddHZ4 of
          { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
          a1_adHNH
          }),
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       b1_adHNI
       })

-- RHS size: {terms: 35, types: 107, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,)_$csecond
  :: forall x1 x2 x3 x4 b c a.
     (b -> c) -> (x1, x2, x3, x4, a, b) -> (x1, x2, x3, x4, a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHUC)
                 (@ x2_adHUD)
                 (@ x3_adHUE)
                 (@ x4_adHUF)
                 (@ b_adHV3)
                 (@ c_adHV4)
                 (@ a_adHV5)
                 (g_adHNC [Occ=Once!] :: b_adHV3 -> c_adHV4)
                 (ds_ddHZ4
                    :: (x1_adHUC, x2_adHUD, x3_adHUE, x4_adHUF, a_adHV5, b_adHV3)) ->
                 (case ds_ddHZ4 of
                  { (x7_adHND [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x7_adHND
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], x8_adHNE [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x8_adHNE
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], x9_adHNF [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x9_adHNF
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], x10_adHNG [Occ=Once],
                     _ [Occ=Dead], _ [Occ=Dead]) ->
                  x10_adHNG
                  },
                  case ds_ddHZ4 of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     a1_adHNH [Occ=Once], _ [Occ=Dead]) ->
                  a1_adHNH
                  },
                  g_adHNC
                    (case ds_ddHZ4 of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        _ [Occ=Dead], b1_adHNI [Occ=Once]) ->
                     b1_adHNI
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,,)_$csecond
  = \ (@ x1_adHUC)
      (@ x2_adHUD)
      (@ x3_adHUE)
      (@ x4_adHUF)
      (@ b_adHV3)
      (@ c_adHV4)
      (@ a_adHV5)
      (g_adHNC :: b_adHV3 -> c_adHV4)
      (ds_ddHZ4
         :: (x1_adHUC, x2_adHUD, x3_adHUE, x4_adHUF, a_adHV5, b_adHV3)) ->
      (case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x7_adHND
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x8_adHNE
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x9_adHNF
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       x10_adHNG
       },
       case ds_ddHZ4 of
       { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
       a1_adHNH
       },
       g_adHNC
         (case ds_ddHZ4 of
          { (x7_adHND, x8_adHNE, x9_adHNF, x10_adHNG, a1_adHNH, b1_adHNI) ->
          b1_adHNI
          }))

-- RHS size: {terms: 8, types: 25, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall x1 x2 x3 x4. Bifunctor ((,,,,,) x1 x2 x3 x4)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ x1_adHNx) (@ x2_adHNy) (@ x3_adHNz) (@ x4_adHNA) ->
       Data.Bifunctor.C:Bifunctor TYPE: (,,,,,)
                                          x1_adHNx x2_adHNy x3_adHNz x4_adHNA
                                  Data.Bifunctor.$fBifunctor(,,,,,)_$cbimap
                                    @ x1_adHNx @ x2_adHNy @ x3_adHNz @ x4_adHNA
                                  Data.Bifunctor.$fBifunctor(,,,,,)_$cfirst
                                    @ x1_adHNx @ x2_adHNy @ x3_adHNz @ x4_adHNA
                                  Data.Bifunctor.$fBifunctor(,,,,,)_$csecond
                                    @ x1_adHNx @ x2_adHNy @ x3_adHNz @ x4_adHNA]
Data.Bifunctor.$fBifunctor(,,,,,)
  = \ (@ x1_adHUC) (@ x2_adHUD) (@ x3_adHUE) (@ x4_adHUF) ->
      Data.Bifunctor.C:Bifunctor
        @ ((,,,,,) x1_adHUC x2_adHUD x3_adHUE x4_adHUF)
        (Data.Bifunctor.$fBifunctor(,,,,,)_$cbimap
           @ x1_adHUC @ x2_adHUD @ x3_adHUE @ x4_adHUF)
        (Data.Bifunctor.$fBifunctor(,,,,,)_$cfirst
           @ x1_adHUC @ x2_adHUD @ x3_adHUE @ x4_adHUF)
        (Data.Bifunctor.$fBifunctor(,,,,,)_$csecond
           @ x1_adHUC @ x2_adHUD @ x3_adHUE @ x4_adHUF)

-- RHS size: {terms: 30, types: 80, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,)_$cfirst
  :: forall x1 x2 x3 a b c.
     (a -> b) -> (x1, x2, x3, a, c) -> (x1, x2, x3, b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVe)
                 (@ x2_adHVf)
                 (@ x3_adHVg)
                 (@ a_adHVs)
                 (@ b_adHVt)
                 (@ c_adHVu)
                 (f_adHN9 [Occ=Once!] :: a_adHVs -> b_adHVt)
                 (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVs, c_adHVu)) ->
                 (case ds_ddHZU of
                  { (x4_adHNO [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNO
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], x5_adHNP [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNP
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], _ [Occ=Dead], x6_adHNQ [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x6_adHNQ
                  },
                  f_adHN9
                    (case ds_ddHZU of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], a1_adHNR [Occ=Once],
                        _ [Occ=Dead]) ->
                     a1_adHNR
                     }),
                  case ds_ddHZU of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     b1_adHNS [Occ=Once]) ->
                  b1_adHNS
                  })}]
Data.Bifunctor.$fBifunctor(,,,,)_$cfirst
  = \ (@ x1_adHVe)
      (@ x2_adHVf)
      (@ x3_adHVg)
      (@ a_adHVs)
      (@ b_adHVt)
      (@ c_adHVu)
      (f_adHN9 :: a_adHVs -> b_adHVt)
      (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVs, c_adHVu)) ->
      (case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x4_adHNO
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x5_adHNP
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x6_adHNQ
       },
       f_adHN9
         (case ds_ddHZU of
          { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
          a1_adHNR
          }),
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       b1_adHNS
       })

-- RHS size: {terms: 30, types: 80, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,)_$csecond
  :: forall x1 x2 x3 b c a.
     (b -> c) -> (x1, x2, x3, a, b) -> (x1, x2, x3, a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVe)
                 (@ x2_adHVf)
                 (@ x3_adHVg)
                 (@ b_adHVE)
                 (@ c_adHVF)
                 (@ a_adHVG)
                 (g_adHNN [Occ=Once!] :: b_adHVE -> c_adHVF)
                 (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVG, b_adHVE)) ->
                 (case ds_ddHZU of
                  { (x4_adHNO [Occ=Once], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNO
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], x5_adHNP [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNP
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], _ [Occ=Dead], x6_adHNQ [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x6_adHNQ
                  },
                  case ds_ddHZU of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], a1_adHNR [Occ=Once],
                     _ [Occ=Dead]) ->
                  a1_adHNR
                  },
                  g_adHNN
                    (case ds_ddHZU of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        b1_adHNS [Occ=Once]) ->
                     b1_adHNS
                     }))}]
Data.Bifunctor.$fBifunctor(,,,,)_$csecond
  = \ (@ x1_adHVe)
      (@ x2_adHVf)
      (@ x3_adHVg)
      (@ b_adHVE)
      (@ c_adHVF)
      (@ a_adHVG)
      (g_adHNN :: b_adHVE -> c_adHVF)
      (ds_ddHZU :: (x1_adHVe, x2_adHVf, x3_adHVg, a_adHVG, b_adHVE)) ->
      (case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x4_adHNO
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x5_adHNP
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       x6_adHNQ
       },
       case ds_ddHZU of
       { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
       a1_adHNR
       },
       g_adHNN
         (case ds_ddHZU of
          { (x4_adHNO, x5_adHNP, x6_adHNQ, a1_adHNR, b1_adHNS) ->
          b1_adHNS
          }))

-- RHS size: {terms: 7, types: 19, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall x1 x2 x3. Bifunctor ((,,,,) x1 x2 x3)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ x1_adHNJ) (@ x2_adHNK) (@ x3_adHNL) ->
       Data.Bifunctor.C:Bifunctor TYPE: (,,,,) x1_adHNJ x2_adHNK x3_adHNL
                                  Data.Bifunctor.$fBifunctor(,,,,)_$cbimap
                                    @ x1_adHNJ @ x2_adHNK @ x3_adHNL
                                  Data.Bifunctor.$fBifunctor(,,,,)_$cfirst
                                    @ x1_adHNJ @ x2_adHNK @ x3_adHNL
                                  Data.Bifunctor.$fBifunctor(,,,,)_$csecond
                                    @ x1_adHNJ @ x2_adHNK @ x3_adHNL]
Data.Bifunctor.$fBifunctor(,,,,)
  = \ (@ x1_adHVe) (@ x2_adHVf) (@ x3_adHVg) ->
      Data.Bifunctor.C:Bifunctor
        @ ((,,,,) x1_adHVe x2_adHVf x3_adHVg)
        (Data.Bifunctor.$fBifunctor(,,,,)_$cbimap
           @ x1_adHVe @ x2_adHVf @ x3_adHVg)
        (Data.Bifunctor.$fBifunctor(,,,,)_$cfirst
           @ x1_adHVe @ x2_adHVf @ x3_adHVg)
        (Data.Bifunctor.$fBifunctor(,,,,)_$csecond
           @ x1_adHVe @ x2_adHVf @ x3_adHVg)

-- RHS size: {terms: 25, types: 57, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,)_$cfirst
  :: forall x1 x2 a b c. (a -> b) -> (x1, x2, a, c) -> (x1, x2, b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVP)
                 (@ x2_adHVQ)
                 (@ a_adHW2)
                 (@ b_adHW3)
                 (@ c_adHW4)
                 (f_adHN9 [Occ=Once!] :: a_adHW2 -> b_adHW3)
                 (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHW2, c_adHW4)) ->
                 (case ds_ddI0x of
                  { (x4_adHNX [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNX
                  },
                  case ds_ddI0x of
                  { (_ [Occ=Dead], x5_adHNY [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNY
                  },
                  f_adHN9
                    (case ds_ddI0x of
                     { (_ [Occ=Dead], _ [Occ=Dead], a1_adHNZ [Occ=Once],
                        _ [Occ=Dead]) ->
                     a1_adHNZ
                     }),
                  case ds_ddI0x of
                  { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                     b1_adHO0 [Occ=Once]) ->
                  b1_adHO0
                  })}]
Data.Bifunctor.$fBifunctor(,,,)_$cfirst
  = \ (@ x1_adHVP)
      (@ x2_adHVQ)
      (@ a_adHW2)
      (@ b_adHW3)
      (@ c_adHW4)
      (f_adHN9 :: a_adHW2 -> b_adHW3)
      (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHW2, c_adHW4)) ->
      (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x4_adHNX
       },
       case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x5_adHNY
       },
       f_adHN9
         (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
          a1_adHNZ
          }),
       case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       b1_adHO0
       })

-- RHS size: {terms: 25, types: 57, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,)_$csecond
  :: forall x1 x2 b c a. (b -> c) -> (x1, x2, a, b) -> (x1, x2, a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHVP)
                 (@ x2_adHVQ)
                 (@ b_adHWe)
                 (@ c_adHWf)
                 (@ a_adHWg)
                 (g_adHNW [Occ=Once!] :: b_adHWe -> c_adHWf)
                 (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHWg, b_adHWe)) ->
                 (case ds_ddI0x of
                  { (x4_adHNX [Occ=Once], _ [Occ=Dead], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x4_adHNX
                  },
                  case ds_ddI0x of
                  { (_ [Occ=Dead], x5_adHNY [Occ=Once], _ [Occ=Dead],
                     _ [Occ=Dead]) ->
                  x5_adHNY
                  },
                  case ds_ddI0x of
                  { (_ [Occ=Dead], _ [Occ=Dead], a1_adHNZ [Occ=Once],
                     _ [Occ=Dead]) ->
                  a1_adHNZ
                  },
                  g_adHNW
                    (case ds_ddI0x of
                     { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead],
                        b1_adHO0 [Occ=Once]) ->
                     b1_adHO0
                     }))}]
Data.Bifunctor.$fBifunctor(,,,)_$csecond
  = \ (@ x1_adHVP)
      (@ x2_adHVQ)
      (@ b_adHWe)
      (@ c_adHWf)
      (@ a_adHWg)
      (g_adHNW :: b_adHWe -> c_adHWf)
      (ds_ddI0x :: (x1_adHVP, x2_adHVQ, a_adHWg, b_adHWe)) ->
      (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x4_adHNX
       },
       case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       x5_adHNY
       },
       case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
       a1_adHNZ
       },
       g_adHNW
         (case ds_ddI0x of { (x4_adHNX, x5_adHNY, a1_adHNZ, b1_adHO0) ->
          b1_adHO0
          }))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall x1 x2. Bifunctor ((,,,) x1 x2)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ x1_adHNT) (@ x2_adHNU) ->
       Data.Bifunctor.C:Bifunctor TYPE: (,,,) x1_adHNT x2_adHNU
                                  Data.Bifunctor.$fBifunctor(,,,)_$cbimap @ x1_adHNT @ x2_adHNU
                                  Data.Bifunctor.$fBifunctor(,,,)_$cfirst @ x1_adHNT @ x2_adHNU
                                  Data.Bifunctor.$fBifunctor(,,,)_$csecond @ x1_adHNT @ x2_adHNU]
Data.Bifunctor.$fBifunctor(,,,)
  = \ (@ x1_adHVP) (@ x2_adHVQ) ->
      Data.Bifunctor.C:Bifunctor
        @ ((,,,) x1_adHVP x2_adHVQ)
        (Data.Bifunctor.$fBifunctor(,,,)_$cbimap @ x1_adHVP @ x2_adHVQ)
        (Data.Bifunctor.$fBifunctor(,,,)_$cfirst @ x1_adHVP @ x2_adHVQ)
        (Data.Bifunctor.$fBifunctor(,,,)_$csecond @ x1_adHVP @ x2_adHVQ)

-- RHS size: {terms: 20, types: 38, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,)_$cfirst
  :: forall x1 a b c. (a -> b) -> (x1, a, c) -> (x1, b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHWp)
                 (@ a_adHWB)
                 (@ b_adHWC)
                 (@ c_adHWD)
                 (f_adHN9 [Occ=Once!] :: a_adHWB -> b_adHWC)
                 (ds_ddI0Z :: (x1_adHWp, a_adHWB, c_adHWD)) ->
                 (case ds_ddI0Z of
                  { (x2_adHO4 [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x2_adHO4
                  },
                  f_adHN9
                    (case ds_ddI0Z of
                     { (_ [Occ=Dead], a1_adHO5 [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHO5
                     }),
                  case ds_ddI0Z of
                  { (_ [Occ=Dead], _ [Occ=Dead], b1_adHO6 [Occ=Once]) ->
                  b1_adHO6
                  })}]
Data.Bifunctor.$fBifunctor(,,)_$cfirst
  = \ (@ x1_adHWp)
      (@ a_adHWB)
      (@ b_adHWC)
      (@ c_adHWD)
      (f_adHN9 :: a_adHWB -> b_adHWC)
      (ds_ddI0Z :: (x1_adHWp, a_adHWB, c_adHWD)) ->
      (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> x2_adHO4 },
       f_adHN9
         (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> a1_adHO5 }),
       case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> b1_adHO6 })

-- RHS size: {terms: 20, types: 38, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,)_$csecond
  :: forall x1 b c a. (b -> c) -> (x1, a, b) -> (x1, a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ x1_adHWp)
                 (@ b_adHWN)
                 (@ c_adHWO)
                 (@ a_adHWP)
                 (g_adHO3 [Occ=Once!] :: b_adHWN -> c_adHWO)
                 (ds_ddI0Z :: (x1_adHWp, a_adHWP, b_adHWN)) ->
                 (case ds_ddI0Z of
                  { (x2_adHO4 [Occ=Once], _ [Occ=Dead], _ [Occ=Dead]) ->
                  x2_adHO4
                  },
                  case ds_ddI0Z of
                  { (_ [Occ=Dead], a1_adHO5 [Occ=Once], _ [Occ=Dead]) ->
                  a1_adHO5
                  },
                  g_adHO3
                    (case ds_ddI0Z of
                     { (_ [Occ=Dead], _ [Occ=Dead], b1_adHO6 [Occ=Once]) ->
                     b1_adHO6
                     }))}]
Data.Bifunctor.$fBifunctor(,,)_$csecond
  = \ (@ x1_adHWp)
      (@ b_adHWN)
      (@ c_adHWO)
      (@ a_adHWP)
      (g_adHO3 :: b_adHWN -> c_adHWO)
      (ds_ddI0Z :: (x1_adHWp, a_adHWP, b_adHWN)) ->
      (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> x2_adHO4 },
       case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> a1_adHO5 },
       g_adHO3
         (case ds_ddI0Z of { (x2_adHO4, a1_adHO5, b1_adHO6) -> b1_adHO6 }))

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall x1. Bifunctor ((,,) x1)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ x1_adHO1) ->
       Data.Bifunctor.C:Bifunctor TYPE: (,,) x1_adHO1
                                  Data.Bifunctor.$fBifunctor(,,)_$cbimap @ x1_adHO1
                                  Data.Bifunctor.$fBifunctor(,,)_$cfirst @ x1_adHO1
                                  Data.Bifunctor.$fBifunctor(,,)_$csecond @ x1_adHO1]
Data.Bifunctor.$fBifunctor(,,)
  = \ (@ x1_adHWp) ->
      Data.Bifunctor.C:Bifunctor
        @ ((,,) x1_adHWp)
        (Data.Bifunctor.$fBifunctor(,,)_$cbimap @ x1_adHWp)
        (Data.Bifunctor.$fBifunctor(,,)_$cfirst @ x1_adHWp)
        (Data.Bifunctor.$fBifunctor(,,)_$csecond @ x1_adHWp)

-- RHS size: {terms: 15, types: 23, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,)_$cfirst
  :: forall a b c. (a -> b) -> (a, c) -> (b, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adHX9)
                 (@ b_adHXa)
                 (@ c_adHXb)
                 (f_adHN9 [Occ=Once!] :: a_adHX9 -> b_adHXa)
                 (ds_ddI1i :: (a_adHX9, c_adHXb)) ->
                 (f_adHN9
                    (case ds_ddI1i of { (a1_adHO9 [Occ=Once], _ [Occ=Dead]) ->
                     a1_adHO9
                     }),
                  case ds_ddI1i of { (_ [Occ=Dead], b1_adHOa [Occ=Once]) ->
                  b1_adHOa
                  })}]
Data.Bifunctor.$fBifunctor(,)_$cfirst
  = \ (@ a_adHX9)
      (@ b_adHXa)
      (@ c_adHXb)
      (f_adHN9 :: a_adHX9 -> b_adHXa)
      (ds_ddI1i :: (a_adHX9, c_adHXb)) ->
      (f_adHN9 (case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> a1_adHO9 }),
       case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> b1_adHOa })

-- RHS size: {terms: 15, types: 23, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,)_$csecond
  :: forall b c a. (b -> c) -> (a, b) -> (a, c)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U(1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_adHXl)
                 (@ c_adHXm)
                 (@ a_adHXn)
                 (g_adHO8 [Occ=Once!] :: b_adHXl -> c_adHXm)
                 (ds_ddI1i :: (a_adHXn, b_adHXl)) ->
                 (case ds_ddI1i of { (a1_adHO9 [Occ=Once], _ [Occ=Dead]) ->
                  a1_adHO9
                  },
                  g_adHO8
                    (case ds_ddI1i of { (_ [Occ=Dead], b1_adHOa [Occ=Once]) ->
                     b1_adHOa
                     }))}]
Data.Bifunctor.$fBifunctor(,)_$csecond
  = \ (@ b_adHXl)
      (@ c_adHXm)
      (@ a_adHXn)
      (g_adHO8 :: b_adHXl -> c_adHXm)
      (ds_ddI1i :: (a_adHXn, b_adHXl)) ->
      (case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> a1_adHO9 },
       g_adHO8 (case ds_ddI1i of { (a1_adHO9, b1_adHOa) -> b1_adHOa }))

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Data.Bifunctor.$fBifunctor(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: Bifunctor (,)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bifunctor.C:Bifunctor TYPE: (,)
                                  Data.Bifunctor.$fBifunctor(,)_$cbimap
                                  Data.Bifunctor.$fBifunctor(,)_$cfirst
                                  Data.Bifunctor.$fBifunctor(,)_$csecond]
Data.Bifunctor.$fBifunctor(,)
  = Data.Bifunctor.C:Bifunctor
      @ (,)
      Data.Bifunctor.$fBifunctor(,)_$cbimap
      Data.Bifunctor.$fBifunctor(,)_$cfirst
      Data.Bifunctor.$fBifunctor(,)_$csecond

-- RHS size: {terms: 20, types: 43, coercions: 0, joins: 0/2}
Data.Bifunctor.$dmbimap
  :: forall (p :: * -> * -> *).
     Bifunctor p =>
     forall a b c d. (a -> b) -> (c -> d) -> p a c -> p b d
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,1*C1(C(U)),1*C1(C(U)))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (p_adHMW :: * -> * -> *))
                 ($dBifunctor_adHRl :: Bifunctor p_adHMW)
                 (@ a_adHRn)
                 (@ b_adHRo)
                 (@ c_adHRp)
                 (@ d_adHRq)
                 (f_adHN7 [Occ=Once] :: a_adHRn -> b_adHRo)
                 (g_adHN8 [Occ=Once] :: c_adHRp -> d_adHRq) ->
                 let {
                   f1_i7Rxg [Occ=OnceL!]
                     :: p_adHMW a_adHRn d_adHRq -> p_adHMW b_adHRo d_adHRq
                   [LclId]
                   f1_i7Rxg
                     = first
                         @ p_adHMW
                         $dBifunctor_adHRl
                         @ a_adHRn
                         @ b_adHRo
                         @ d_adHRq
                         f_adHN7 } in
                 let {
                   g1_i7Rxh [Occ=OnceL!]
                     :: p_adHMW a_adHRn c_adHRp -> p_adHMW a_adHRn d_adHRq
                   [LclId]
                   g1_i7Rxh
                     = second
                         @ p_adHMW
                         $dBifunctor_adHRl
                         @ c_adHRp
                         @ d_adHRq
                         @ a_adHRn
                         g_adHN8 } in
                 \ (x_i7Rxi [Occ=Once] :: p_adHMW a_adHRn c_adHRp) ->
                   f1_i7Rxg (g1_i7Rxh x_i7Rxi)}]
Data.Bifunctor.$dmbimap
  = \ (@ (p_adHMW :: * -> * -> *))
      ($dBifunctor_adHRl :: Bifunctor p_adHMW)
      (@ a_adHRn)
      (@ b_adHRo)
      (@ c_adHRp)
      (@ d_adHRq)
      (f_adHN7 :: a_adHRn -> b_adHRo)
      (g_adHN8 :: c_adHRp -> d_adHRq) ->
      let {
        f1_sdI5W [Dmd=<L,C(U)>]
          :: p_adHMW a_adHRn d_adHRq -> p_adHMW b_adHRo d_adHRq
        [LclId]
        f1_sdI5W
          = first
              @ p_adHMW
              $dBifunctor_adHRl
              @ a_adHRn
              @ b_adHRo
              @ d_adHRq
              f_adHN7 } in
      let {
        g1_sdI5V [Dmd=<L,C(U)>]
          :: p_adHMW a_adHRn c_adHRp -> p_adHMW a_adHRn d_adHRq
        [LclId]
        g1_sdI5V
          = second
              @ p_adHMW
              $dBifunctor_adHRl
              @ c_adHRp
              @ d_adHRq
              @ a_adHRn
              g_adHN8 } in
      \ (x_i7Rxi :: p_adHMW a_adHRn c_adHRp) ->
        f1_sdI5W (g1_sdI5V x_i7Rxi)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Bifunctor.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Bifunctor.$trModule3
  = GHC.Types.TrNameS Data.Bifunctor.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
Data.Bifunctor.$trModule2 = "Data.Bifunctor"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Bifunctor.$trModule1
  = GHC.Types.TrNameS Data.Bifunctor.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Bifunctor.$trModule
  = GHC.Types.Module
      Data.Bifunctor.$trModule3 Data.Bifunctor.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rdIrJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rdIrJ
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$tcBifunctor1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Data.Bifunctor.$tcBifunctor1
  = GHC.Types.KindRepFun GHC.Types.krep$*->*->* $krep_rdIrJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$tcBifunctor3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Bifunctor.$tcBifunctor3 = "Bifunctor"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$tcBifunctor2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Bifunctor.$tcBifunctor2
  = GHC.Types.TrNameS Data.Bifunctor.$tcBifunctor3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Data.Bifunctor.$tcBifunctor :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Data.Bifunctor.$tcBifunctor
  = GHC.Types.TyCon
      15833243383698227199##
      9927729778853233711##
      Data.Bifunctor.$trModule
      Data.Bifunctor.$tcBifunctor2
      0#
      Data.Bifunctor.$tcBifunctor1


