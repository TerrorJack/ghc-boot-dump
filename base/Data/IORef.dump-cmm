
==================== Output Cmm ====================
2018-03-16 16:02:59.225663413 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.226894527 UTC

[section ""data" . Data.IORef.mkWeakIORef1_closure" {
     Data.IORef.mkWeakIORef1_closure:
         const Data.IORef.mkWeakIORef1_info;
 },
 Data.IORef.mkWeakIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RCx,
                       label: Data.IORef.mkWeakIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RCD; else goto c7RCE;
       c7RCD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.mkWeakIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RCE: // global
           I64[Sp - 16] = block_c7RCu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RCJ; else goto c7RCv;
       u7RCJ: // global
           call _c7RCu(R1) args: 0, res: 0, upd: 0;
       c7RCv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RCu() //  [R1]
         { info_tbl: [(c7RCu,
                       label: block_c7RCu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCu: // global
           _s7RBx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7RCA_info;
           R3 = _s7RBx::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RCA() //  [R1]
         { info_tbl: [(c7RCA,
                       label: block_c7RCA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RCI; else goto c7RCH;
       c7RCI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RCH: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.228495592 UTC

[section ""data" . Data.IORef.mkWeakIORef_closure" {
     Data.IORef.mkWeakIORef_closure:
         const Data.IORef.mkWeakIORef_info;
 },
 Data.IORef.mkWeakIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RCO,
                       label: Data.IORef.mkWeakIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCO: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.mkWeakIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.229655147 UTC

[section ""data" . Data.IORef.modifyIORef1_closure" {
     Data.IORef.modifyIORef1_closure:
         const Data.IORef.modifyIORef1_info;
 },
 Data.IORef.modifyIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RCY,
                       label: Data.IORef.modifyIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RCZ; else goto c7RD0;
       c7RCZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RD0: // global
           I64[Sp - 16] = block_c7RCV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RDa; else goto c7RCW;
       u7RDa: // global
           call _c7RCV(R1) args: 0, res: 0, upd: 0;
       c7RCW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RCV() //  [R1]
         { info_tbl: [(c7RCV,
                       label: block_c7RCV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RCV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7RD5; else goto c7RD4;
       c7RD5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RD4: // global
           _s7RBJ::P64 = P64[R1 + 7];
           _s7RBM::P64 = P64[_s7RBJ::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7RBM::P64;
           call MO_WriteBarrier();
           P64[_s7RBJ::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.2314533 UTC

[section ""data" . Data.IORef.modifyIORef_closure" {
     Data.IORef.modifyIORef_closure:
         const Data.IORef.modifyIORef_info;
 },
 Data.IORef.modifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RDf,
                       label: Data.IORef.modifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDf: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.232574975 UTC

[section ""data" . Data.IORef.modifyIORef'1_closure" {
     Data.IORef.modifyIORef'1_closure:
         const Data.IORef.modifyIORef'1_info;
 },
 Data.IORef.modifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RDp,
                       label: Data.IORef.modifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RDq; else goto c7RDr;
       c7RDq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RDr: // global
           I64[Sp - 16] = block_c7RDm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RDB; else goto c7RDn;
       u7RDB: // global
           call _c7RDm(R1) args: 0, res: 0, upd: 0;
       c7RDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RDm() //  [R1]
         { info_tbl: [(c7RDm,
                       label: block_c7RDm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDm: // global
           I64[Sp] = block_c7RDu_info;
           _s7RBT::P64 = P64[R1 + 7];
           R2 = P64[_s7RBT::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7RBT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RDu() //  [R1]
         { info_tbl: [(c7RDu,
                       label: block_c7RDu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDu: // global
           _s7RBT::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7RBT::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBT::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.233910423 UTC

[section ""data" . Data.IORef.modifyIORef'_closure" {
     Data.IORef.modifyIORef'_closure:
         const Data.IORef.modifyIORef'_info;
 },
 Data.IORef.modifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RDG,
                       label: Data.IORef.modifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDG: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.234737917 UTC

[section ""data" . Data.IORef.atomicModifyIORef_closure" {
     Data.IORef.atomicModifyIORef_closure:
         const Data.IORef.atomicModifyIORef_info;
 },
 Data.IORef.atomicModifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RDN,
                       label: Data.IORef.atomicModifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDN: // global
           R3 = R3;
           R2 = R2;
           call GHC.IORef.atomicModifyIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.236019154 UTC

[section ""data" . Data.IORef.atomicModifyIORef'1_closure" {
     Data.IORef.atomicModifyIORef'1_closure:
         const Data.IORef.atomicModifyIORef'1_info;
 },
 sat_s7RC9_entry() //  [R1, R2]
         { info_tbl: [(c7RE6,
                       label: sat_s7RC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RE6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7REa; else goto c7REb;
       c7REa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7REb: // global
           I64[Sp - 8] = block_c7RE4_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RE4() //  [R1]
         { info_tbl: [(c7RE4,
                       label: block_c7RE4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RE4: // global
           I64[Sp - 8] = block_c7RE9_info;
           _s7RC5::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp] = _s7RC5::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RE9() //  []
         { info_tbl: [(c7RE9,
                       label: block_c7RE9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RE9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicModifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7REf,
                       label: Data.IORef.atomicModifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7REj; else goto c7REk;
       c7REj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicModifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7REk: // global
           I64[Sp - 16] = block_c7RDU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7REr; else goto c7RDV;
       u7REr: // global
           call _c7RDU(R1) args: 0, res: 0, upd: 0;
       c7RDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RDU() //  [R1]
         { info_tbl: [(c7RDU,
                       label: block_c7RDU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RDU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7REn; else goto c7REm;
       c7REn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7REm: // global
           _s7RC3::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s7RC9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c7REg_info;
           R2 = Hp - 7;
           R1 = _s7RC3::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7REg() //  [R1]
         { info_tbl: [(c7REg,
                       label: block_c7REg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REg: // global
           I64[Sp - 8] = block_c7REi_info;
           _s7RCc::P64 = R1;
           R1 = R1;
           P64[Sp] = _s7RCc::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7REi() //  []
         { info_tbl: [(c7REi,
                       label: block_c7REi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.238008673 UTC

[section ""data" . Data.IORef.atomicModifyIORef'_closure" {
     Data.IORef.atomicModifyIORef'_closure:
         const Data.IORef.atomicModifyIORef'_info;
 },
 Data.IORef.atomicModifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7REw,
                       label: Data.IORef.atomicModifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REw: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicModifyIORef'1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.239187466 UTC

[section ""data" . Data.IORef.atomicWriteIORef1_closure" {
     Data.IORef.atomicWriteIORef1_closure:
         const Data.IORef.atomicWriteIORef1_info;
 },
 sat_s7RCl_entry() //  [R1]
         { info_tbl: [(c7REO,
                       label: sat_s7RCl_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REO: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicWriteIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RER,
                       label: Data.IORef.atomicWriteIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RER: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7REV; else goto c7REW;
       c7REV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicWriteIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7REW: // global
           I64[Sp - 16] = block_c7RED_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RF6; else goto c7REE;
       u7RF6: // global
           call _c7RED(R1) args: 0, res: 0, upd: 0;
       c7REE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RED() //  [R1]
         { info_tbl: [(c7RED,
                       label: block_c7RED_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RED: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7REZ; else goto c7REY;
       c7REZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7REY: // global
           _s7RCi::P64 = P64[R1 + 7];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = GHC.Tuple.()_closure+1;
           I64[Hp - 8] = sat_s7RCl_info;
           P64[Hp] = Hp - 31;
           I64[Sp + 8] = block_c7RES_info;
           R2 = Hp - 7;
           R1 = _s7RCi::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RES() //  [R1]
         { info_tbl: [(c7RES,
                       label: block_c7RES_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RES: // global
           I64[Sp] = block_c7REU_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7RF7; else goto c7RF1;
       u7RF7: // global
           call _c7REU() args: 0, res: 0, upd: 0;
       c7RF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7REU() //  []
         { info_tbl: [(c7REU,
                       label: block_c7REU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7REU: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.240818437 UTC

[section ""data" . Data.IORef.atomicWriteIORef_closure" {
     Data.IORef.atomicWriteIORef_closure:
         const Data.IORef.atomicWriteIORef_info;
 },
 Data.IORef.atomicWriteIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RFc,
                       label: Data.IORef.atomicWriteIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFc: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicWriteIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.241550036 UTC

[section ""cstring" . Data.IORef.$trModule4_bytes" {
     Data.IORef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.242080062 UTC

[section ""data" . Data.IORef.$trModule3_closure" {
     Data.IORef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.242655956 UTC

[section ""cstring" . Data.IORef.$trModule2_bytes" {
     Data.IORef.$trModule2_bytes:
         I8[] [68,97,116,97,46,73,79,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.243203647 UTC

[section ""data" . Data.IORef.$trModule1_closure" {
     Data.IORef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.243731186 UTC

[section ""data" . Data.IORef.$trModule_closure" {
     Data.IORef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.IORef.$trModule3_closure+1;
         const Data.IORef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.244263322 UTC

[section ""relreadonly" . S7RFf_srt" { S7RFf_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.244798149 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.245725709 UTC

[section ""data" . Data.IORef.mkWeakIORef1_closure" {
     Data.IORef.mkWeakIORef1_closure:
         const Data.IORef.mkWeakIORef1_info;
 },
 Data.IORef.mkWeakIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RFn,
                       label: Data.IORef.mkWeakIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RFt; else goto c7RFu;
       c7RFt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.mkWeakIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RFu: // global
           I64[Sp - 16] = block_c7RFk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RFz; else goto c7RFl;
       u7RFz: // global
           call _c7RFk(R1) args: 0, res: 0, upd: 0;
       c7RFl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RFk() //  [R1]
         { info_tbl: [(c7RFk,
                       label: block_c7RFk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFk: // global
           _s7RBx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7RFq_info;
           R3 = _s7RBx::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RFq() //  [R1]
         { info_tbl: [(c7RFq,
                       label: block_c7RFq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RFy; else goto c7RFx;
       c7RFy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RFx: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.247070267 UTC

[section ""data" . Data.IORef.mkWeakIORef_closure" {
     Data.IORef.mkWeakIORef_closure:
         const Data.IORef.mkWeakIORef_info;
 },
 Data.IORef.mkWeakIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RFE,
                       label: Data.IORef.mkWeakIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFE: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.mkWeakIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.248140014 UTC

[section ""data" . Data.IORef.modifyIORef1_closure" {
     Data.IORef.modifyIORef1_closure:
         const Data.IORef.modifyIORef1_info;
 },
 Data.IORef.modifyIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RFO,
                       label: Data.IORef.modifyIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RFP; else goto c7RFQ;
       c7RFP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RFQ: // global
           I64[Sp - 16] = block_c7RFL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RG0; else goto c7RFM;
       u7RG0: // global
           call _c7RFL(R1) args: 0, res: 0, upd: 0;
       c7RFM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RFL() //  [R1]
         { info_tbl: [(c7RFL,
                       label: block_c7RFL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RFL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7RFV; else goto c7RFU;
       c7RFV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RFU: // global
           _s7RBJ::P64 = P64[R1 + 7];
           _s7RBM::P64 = P64[_s7RBJ::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7RBM::P64;
           call MO_WriteBarrier();
           P64[_s7RBJ::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.249463552 UTC

[section ""data" . Data.IORef.modifyIORef_closure" {
     Data.IORef.modifyIORef_closure:
         const Data.IORef.modifyIORef_info;
 },
 Data.IORef.modifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RG5,
                       label: Data.IORef.modifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RG5: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.25040561 UTC

[section ""data" . Data.IORef.modifyIORef'1_closure" {
     Data.IORef.modifyIORef'1_closure:
         const Data.IORef.modifyIORef'1_info;
 },
 Data.IORef.modifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RGf,
                       label: Data.IORef.modifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RGg; else goto c7RGh;
       c7RGg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RGh: // global
           I64[Sp - 16] = block_c7RGc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RGr; else goto c7RGd;
       u7RGr: // global
           call _c7RGc(R1) args: 0, res: 0, upd: 0;
       c7RGd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RGc() //  [R1]
         { info_tbl: [(c7RGc,
                       label: block_c7RGc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGc: // global
           I64[Sp] = block_c7RGk_info;
           _s7RBT::P64 = P64[R1 + 7];
           R2 = P64[_s7RBT::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7RBT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RGk() //  [R1]
         { info_tbl: [(c7RGk,
                       label: block_c7RGk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGk: // global
           _s7RBT::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7RBT::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBT::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.251678174 UTC

[section ""data" . Data.IORef.modifyIORef'_closure" {
     Data.IORef.modifyIORef'_closure:
         const Data.IORef.modifyIORef'_info;
 },
 Data.IORef.modifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RGw,
                       label: Data.IORef.modifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGw: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.252485155 UTC

[section ""data" . Data.IORef.atomicModifyIORef_closure" {
     Data.IORef.atomicModifyIORef_closure:
         const Data.IORef.atomicModifyIORef_info;
 },
 Data.IORef.atomicModifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RGD,
                       label: Data.IORef.atomicModifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGD: // global
           R3 = R3;
           R2 = R2;
           call GHC.IORef.atomicModifyIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.253742849 UTC

[section ""data" . Data.IORef.atomicModifyIORef'1_closure" {
     Data.IORef.atomicModifyIORef'1_closure:
         const Data.IORef.atomicModifyIORef'1_info;
 },
 sat_s7RC9_entry() //  [R1, R2]
         { info_tbl: [(c7RGW,
                       label: sat_s7RC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RH0; else goto c7RH1;
       c7RH0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RH1: // global
           I64[Sp - 8] = block_c7RGU_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RGU() //  [R1]
         { info_tbl: [(c7RGU,
                       label: block_c7RGU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGU: // global
           I64[Sp - 8] = block_c7RGZ_info;
           _s7RC5::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp] = _s7RC5::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RGZ() //  []
         { info_tbl: [(c7RGZ,
                       label: block_c7RGZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicModifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RH5,
                       label: Data.IORef.atomicModifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RH5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RH9; else goto c7RHa;
       c7RH9: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicModifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RHa: // global
           I64[Sp - 16] = block_c7RGK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RHh; else goto c7RGL;
       u7RHh: // global
           call _c7RGK(R1) args: 0, res: 0, upd: 0;
       c7RGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RGK() //  [R1]
         { info_tbl: [(c7RGK,
                       label: block_c7RGK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RGK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RHd; else goto c7RHc;
       c7RHd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RHc: // global
           _s7RC3::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s7RC9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c7RH6_info;
           R2 = Hp - 7;
           R1 = _s7RC3::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RH6() //  [R1]
         { info_tbl: [(c7RH6,
                       label: block_c7RH6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RH6: // global
           I64[Sp - 8] = block_c7RH8_info;
           _s7RCc::P64 = R1;
           R1 = R1;
           P64[Sp] = _s7RCc::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RH8() //  []
         { info_tbl: [(c7RH8,
                       label: block_c7RH8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RH8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.255694924 UTC

[section ""data" . Data.IORef.atomicModifyIORef'_closure" {
     Data.IORef.atomicModifyIORef'_closure:
         const Data.IORef.atomicModifyIORef'_info;
 },
 Data.IORef.atomicModifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RHm,
                       label: Data.IORef.atomicModifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHm: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicModifyIORef'1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.256881814 UTC

[section ""data" . Data.IORef.atomicWriteIORef1_closure" {
     Data.IORef.atomicWriteIORef1_closure:
         const Data.IORef.atomicWriteIORef1_info;
 },
 sat_s7RCl_entry() //  [R1]
         { info_tbl: [(c7RHE,
                       label: sat_s7RCl_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHE: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicWriteIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RHH,
                       label: Data.IORef.atomicWriteIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RHL; else goto c7RHM;
       c7RHL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicWriteIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RHM: // global
           I64[Sp - 16] = block_c7RHt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RHW; else goto c7RHu;
       u7RHW: // global
           call _c7RHt(R1) args: 0, res: 0, upd: 0;
       c7RHu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RHt() //  [R1]
         { info_tbl: [(c7RHt,
                       label: block_c7RHt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7RHP; else goto c7RHO;
       c7RHP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RHO: // global
           _s7RCi::P64 = P64[R1 + 7];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = GHC.Tuple.()_closure+1;
           I64[Hp - 8] = sat_s7RCl_info;
           P64[Hp] = Hp - 31;
           I64[Sp + 8] = block_c7RHI_info;
           R2 = Hp - 7;
           R1 = _s7RCi::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RHI() //  [R1]
         { info_tbl: [(c7RHI,
                       label: block_c7RHI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHI: // global
           I64[Sp] = block_c7RHK_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7RHX; else goto c7RHR;
       u7RHX: // global
           call _c7RHK() args: 0, res: 0, upd: 0;
       c7RHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RHK() //  []
         { info_tbl: [(c7RHK,
                       label: block_c7RHK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RHK: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.258557006 UTC

[section ""data" . Data.IORef.atomicWriteIORef_closure" {
     Data.IORef.atomicWriteIORef_closure:
         const Data.IORef.atomicWriteIORef_info;
 },
 Data.IORef.atomicWriteIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RI2,
                       label: Data.IORef.atomicWriteIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RI2: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicWriteIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.259229263 UTC

[section ""cstring" . Data.IORef.$trModule4_bytes" {
     Data.IORef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.25976463 UTC

[section ""data" . Data.IORef.$trModule3_closure" {
     Data.IORef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.260310525 UTC

[section ""cstring" . Data.IORef.$trModule2_bytes" {
     Data.IORef.$trModule2_bytes:
         I8[] [68,97,116,97,46,73,79,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.260823399 UTC

[section ""data" . Data.IORef.$trModule1_closure" {
     Data.IORef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.261670005 UTC

[section ""data" . Data.IORef.$trModule_closure" {
     Data.IORef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.IORef.$trModule3_closure+1;
         const Data.IORef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.262224509 UTC

[section ""relreadonly" . S7RFf_srt" { S7RFf_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.263008437 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.264502863 UTC

[section ""data" . Data.IORef.mkWeakIORef1_closure" {
     Data.IORef.mkWeakIORef1_closure:
         const Data.IORef.mkWeakIORef1_info;
 },
 Data.IORef.mkWeakIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RIc,
                       label: Data.IORef.mkWeakIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RIc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RIi; else goto c7RIj;
       c7RIi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.mkWeakIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RIj: // global
           I64[Sp - 16] = block_c7RI9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RIo; else goto c7RIa;
       u7RIo: // global
           call _c7RI9(R1) args: 0, res: 0, upd: 0;
       c7RIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RI9() //  [R1]
         { info_tbl: [(c7RI9,
                       label: block_c7RI9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RI9: // global
           _s7RBx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7RIf_info;
           R3 = _s7RBx::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RIf() //  [R1]
         { info_tbl: [(c7RIf,
                       label: block_c7RIf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RIf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RIn; else goto c7RIm;
       c7RIn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RIm: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.272779326 UTC

[section ""data" . Data.IORef.mkWeakIORef_closure" {
     Data.IORef.mkWeakIORef_closure:
         const Data.IORef.mkWeakIORef_info;
 },
 Data.IORef.mkWeakIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RIG,
                       label: Data.IORef.mkWeakIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RIG: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.mkWeakIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.276258205 UTC

[section ""data" . Data.IORef.modifyIORef1_closure" {
     Data.IORef.modifyIORef1_closure:
         const Data.IORef.modifyIORef1_info;
 },
 Data.IORef.modifyIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RIU,
                       label: Data.IORef.modifyIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RIU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RIV; else goto c7RIW;
       c7RIV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RIW: // global
           I64[Sp - 16] = block_c7RIR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RJ6; else goto c7RIS;
       u7RJ6: // global
           call _c7RIR(R1) args: 0, res: 0, upd: 0;
       c7RIS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RIR() //  [R1]
         { info_tbl: [(c7RIR,
                       label: block_c7RIR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RIR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7RJ1; else goto c7RJ0;
       c7RJ1: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RJ0: // global
           _s7RBJ::P64 = P64[R1 + 7];
           _s7RBM::P64 = P64[_s7RBJ::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7RBM::P64;
           call MO_WriteBarrier();
           P64[_s7RBJ::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.282381087 UTC

[section ""data" . Data.IORef.modifyIORef_closure" {
     Data.IORef.modifyIORef_closure:
         const Data.IORef.modifyIORef_info;
 },
 Data.IORef.modifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RJo,
                       label: Data.IORef.modifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RJo: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.285925033 UTC

[section ""data" . Data.IORef.modifyIORef'1_closure" {
     Data.IORef.modifyIORef'1_closure:
         const Data.IORef.modifyIORef'1_info;
 },
 Data.IORef.modifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RJC,
                       label: Data.IORef.modifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RJD; else goto c7RJE;
       c7RJD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RJE: // global
           I64[Sp - 16] = block_c7RJz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RJO; else goto c7RJA;
       u7RJO: // global
           call _c7RJz(R1) args: 0, res: 0, upd: 0;
       c7RJA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RJz() //  [R1]
         { info_tbl: [(c7RJz,
                       label: block_c7RJz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RJz: // global
           I64[Sp] = block_c7RJH_info;
           _s7RBT::P64 = P64[R1 + 7];
           R2 = P64[_s7RBT::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7RBT::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RJH() //  [R1]
         { info_tbl: [(c7RJH,
                       label: block_c7RJH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RJH: // global
           _s7RBT::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7RBT::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RBT::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.29291286 UTC

[section ""data" . Data.IORef.modifyIORef'_closure" {
     Data.IORef.modifyIORef'_closure:
         const Data.IORef.modifyIORef'_info;
 },
 Data.IORef.modifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RK7,
                       label: Data.IORef.modifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RK7: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.29616112 UTC

[section ""data" . Data.IORef.atomicModifyIORef_closure" {
     Data.IORef.atomicModifyIORef_closure:
         const Data.IORef.atomicModifyIORef_info;
 },
 Data.IORef.atomicModifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RKi,
                       label: Data.IORef.atomicModifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKi: // global
           R3 = R3;
           R2 = R2;
           call GHC.IORef.atomicModifyIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.301124318 UTC

[section ""data" . Data.IORef.atomicModifyIORef'1_closure" {
     Data.IORef.atomicModifyIORef'1_closure:
         const Data.IORef.atomicModifyIORef'1_info;
 },
 sat_s7RC9_entry() //  [R1, R2]
         { info_tbl: [(c7RKF,
                       label: sat_s7RC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RKJ; else goto c7RKK;
       c7RKJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RKK: // global
           I64[Sp - 8] = block_c7RKD_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RKD() //  [R1]
         { info_tbl: [(c7RKD,
                       label: block_c7RKD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKD: // global
           I64[Sp - 8] = block_c7RKI_info;
           _s7RC5::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp] = _s7RC5::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RKI() //  []
         { info_tbl: [(c7RKI,
                       label: block_c7RKI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKI: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicModifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RKO,
                       label: Data.IORef.atomicModifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RKS; else goto c7RKT;
       c7RKS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicModifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RKT: // global
           I64[Sp - 16] = block_c7RKt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RL0; else goto c7RKu;
       u7RL0: // global
           call _c7RKt(R1) args: 0, res: 0, upd: 0;
       c7RKu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RKt() //  [R1]
         { info_tbl: [(c7RKt,
                       label: block_c7RKt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RKW; else goto c7RKV;
       c7RKW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RKV: // global
           _s7RC3::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s7RC9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c7RKP_info;
           R2 = Hp - 7;
           R1 = _s7RC3::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RKP() //  [R1]
         { info_tbl: [(c7RKP,
                       label: block_c7RKP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKP: // global
           I64[Sp - 8] = block_c7RKR_info;
           _s7RCc::P64 = R1;
           R1 = R1;
           P64[Sp] = _s7RCc::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RKR() //  []
         { info_tbl: [(c7RKR,
                       label: block_c7RKR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RKR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.315252886 UTC

[section ""data" . Data.IORef.atomicModifyIORef'_closure" {
     Data.IORef.atomicModifyIORef'_closure:
         const Data.IORef.atomicModifyIORef'_info;
 },
 Data.IORef.atomicModifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RLy,
                       label: Data.IORef.atomicModifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RLy: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicModifyIORef'1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.319245317 UTC

[section ""data" . Data.IORef.atomicWriteIORef1_closure" {
     Data.IORef.atomicWriteIORef1_closure:
         const Data.IORef.atomicWriteIORef1_info;
 },
 sat_s7RCl_entry() //  [R1]
         { info_tbl: [(c7RLU,
                       label: sat_s7RCl_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RLU: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicWriteIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RLX,
                       label: Data.IORef.atomicWriteIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RLX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RM1; else goto c7RM2;
       c7RM1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicWriteIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RM2: // global
           I64[Sp - 16] = block_c7RLJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RMc; else goto c7RLK;
       u7RMc: // global
           call _c7RLJ(R1) args: 0, res: 0, upd: 0;
       c7RLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RLJ() //  [R1]
         { info_tbl: [(c7RLJ,
                       label: block_c7RLJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RLJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7RM5; else goto c7RM4;
       c7RM5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RM4: // global
           _s7RCi::P64 = P64[R1 + 7];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = GHC.Tuple.()_closure+1;
           I64[Hp - 8] = sat_s7RCl_info;
           P64[Hp] = Hp - 31;
           I64[Sp + 8] = block_c7RLY_info;
           R2 = Hp - 7;
           R1 = _s7RCi::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RLY() //  [R1]
         { info_tbl: [(c7RLY,
                       label: block_c7RLY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RLY: // global
           I64[Sp] = block_c7RM0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7RMd; else goto c7RM7;
       u7RMd: // global
           call _c7RM0() args: 0, res: 0, upd: 0;
       c7RM7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RM0() //  []
         { info_tbl: [(c7RM0,
                       label: block_c7RM0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RM0: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.330218783 UTC

[section ""data" . Data.IORef.atomicWriteIORef_closure" {
     Data.IORef.atomicWriteIORef_closure:
         const Data.IORef.atomicWriteIORef_info;
 },
 Data.IORef.atomicWriteIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RMF,
                       label: Data.IORef.atomicWriteIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RMF: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicWriteIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.333340165 UTC

[section ""cstring" . Data.IORef.$trModule4_bytes" {
     Data.IORef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.335575436 UTC

[section ""data" . Data.IORef.$trModule3_closure" {
     Data.IORef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.337668023 UTC

[section ""cstring" . Data.IORef.$trModule2_bytes" {
     Data.IORef.$trModule2_bytes:
         I8[] [68,97,116,97,46,73,79,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.339406111 UTC

[section ""data" . Data.IORef.$trModule1_closure" {
     Data.IORef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.34109163 UTC

[section ""data" . Data.IORef.$trModule_closure" {
     Data.IORef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.IORef.$trModule3_closure+1;
         const Data.IORef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.342840168 UTC

[section ""relreadonly" . S7RFf_srt" { S7RFf_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.486897778 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.488623863 UTC

[section ""data" . Data.IORef.mkWeakIORef1_closure" {
     Data.IORef.mkWeakIORef1_closure:
         const Data.IORef.mkWeakIORef1_info;
 },
 Data.IORef.mkWeakIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RNT,
                       label: Data.IORef.mkWeakIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RNT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RNZ; else goto c7RO0;
       c7RNZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.mkWeakIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RO0: // global
           I64[Sp - 16] = block_c7RNQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RO5; else goto c7RNR;
       u7RO5: // global
           call _c7RNQ(R1) args: 0, res: 0, upd: 0;
       c7RNR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RNQ() //  [R1]
         { info_tbl: [(c7RNQ,
                       label: block_c7RNQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RNQ: // global
           _s7RMT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7RNW_info;
           R3 = _s7RMT::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RNW() //  [R1]
         { info_tbl: [(c7RNW,
                       label: block_c7RNW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RNW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RO4; else goto c7RO3;
       c7RO4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RO3: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.496632141 UTC

[section ""data" . Data.IORef.mkWeakIORef_closure" {
     Data.IORef.mkWeakIORef_closure:
         const Data.IORef.mkWeakIORef_info;
 },
 Data.IORef.mkWeakIORef_entry() //  [R2, R3]
         { info_tbl: [(c7ROq,
                       label: Data.IORef.mkWeakIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ROq: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.mkWeakIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.500515303 UTC

[section ""data" . Data.IORef.modifyIORef1_closure" {
     Data.IORef.modifyIORef1_closure:
         const Data.IORef.modifyIORef1_info;
 },
 Data.IORef.modifyIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7ROE,
                       label: Data.IORef.modifyIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ROE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ROF; else goto c7ROG;
       c7ROF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ROG: // global
           I64[Sp - 16] = block_c7ROB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ROQ; else goto c7ROC;
       u7ROQ: // global
           call _c7ROB(R1) args: 0, res: 0, upd: 0;
       c7ROC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ROB() //  [R1]
         { info_tbl: [(c7ROB,
                       label: block_c7ROB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ROB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ROL; else goto c7ROK;
       c7ROL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ROK: // global
           _s7RN5::P64 = P64[R1 + 7];
           _s7RN8::P64 = P64[_s7RN5::P64 + 8];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7RN8::P64;
           call MO_WriteBarrier();
           P64[_s7RN5::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RN5::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.507225383 UTC

[section ""data" . Data.IORef.modifyIORef_closure" {
     Data.IORef.modifyIORef_closure:
         const Data.IORef.modifyIORef_info;
 },
 Data.IORef.modifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RPb,
                       label: Data.IORef.modifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RPb: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.510981964 UTC

[section ""data" . Data.IORef.modifyIORef'1_closure" {
     Data.IORef.modifyIORef'1_closure:
         const Data.IORef.modifyIORef'1_info;
 },
 Data.IORef.modifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RPp,
                       label: Data.IORef.modifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RPp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RPq; else goto c7RPr;
       c7RPq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.modifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RPr: // global
           I64[Sp - 16] = block_c7RPm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RPB; else goto c7RPn;
       u7RPB: // global
           call _c7RPm(R1) args: 0, res: 0, upd: 0;
       c7RPn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RPm() //  [R1]
         { info_tbl: [(c7RPm,
                       label: block_c7RPm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RPm: // global
           I64[Sp] = block_c7RPu_info;
           _s7RNf::P64 = P64[R1 + 7];
           R2 = P64[_s7RNf::P64 + 8];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7RNf::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RPu() //  [R1]
         { info_tbl: [(c7RPu,
                       label: block_c7RPu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RPu: // global
           _s7RNf::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7RNf::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7RNf::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.519169646 UTC

[section ""data" . Data.IORef.modifyIORef'_closure" {
     Data.IORef.modifyIORef'_closure:
         const Data.IORef.modifyIORef'_info;
 },
 Data.IORef.modifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RPX,
                       label: Data.IORef.modifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RPX: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.modifyIORef'1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.52362177 UTC

[section ""data" . Data.IORef.atomicModifyIORef_closure" {
     Data.IORef.atomicModifyIORef_closure:
         const Data.IORef.atomicModifyIORef_info;
 },
 Data.IORef.atomicModifyIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RQ8,
                       label: Data.IORef.atomicModifyIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQ8: // global
           R3 = R3;
           R2 = R2;
           call GHC.IORef.atomicModifyIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.527677411 UTC

[section ""data" . Data.IORef.atomicModifyIORef'1_closure" {
     Data.IORef.atomicModifyIORef'1_closure:
         const Data.IORef.atomicModifyIORef'1_info;
 },
 sat_s7RNv_entry() //  [R1, R2]
         { info_tbl: [(c7RQv,
                       label: sat_s7RNv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RQz; else goto c7RQA;
       c7RQz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7RQA: // global
           I64[Sp - 8] = block_c7RQt_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RQt() //  [R1]
         { info_tbl: [(c7RQt,
                       label: block_c7RQt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQt: // global
           I64[Sp - 8] = block_c7RQy_info;
           _s7RNr::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp] = _s7RNr::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RQy() //  []
         { info_tbl: [(c7RQy,
                       label: block_c7RQy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQy: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicModifyIORef'1_entry() //  [R2, R3]
         { info_tbl: [(c7RQE,
                       label: Data.IORef.atomicModifyIORef'1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RQI; else goto c7RQJ;
       c7RQI: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicModifyIORef'1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RQJ: // global
           I64[Sp - 16] = block_c7RQj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RQQ; else goto c7RQk;
       u7RQQ: // global
           call _c7RQj(R1) args: 0, res: 0, upd: 0;
       c7RQk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RQj() //  [R1]
         { info_tbl: [(c7RQj,
                       label: block_c7RQj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7RQM; else goto c7RQL;
       c7RQM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RQL: // global
           _s7RNp::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s7RNv_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c7RQF_info;
           R2 = Hp - 7;
           R1 = _s7RNp::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RQF() //  [R1]
         { info_tbl: [(c7RQF,
                       label: block_c7RQF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQF: // global
           I64[Sp - 8] = block_c7RQH_info;
           _s7RNy::P64 = R1;
           R1 = R1;
           P64[Sp] = _s7RNy::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RQH() //  []
         { info_tbl: [(c7RQH,
                       label: block_c7RQH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RQH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.54216664 UTC

[section ""data" . Data.IORef.atomicModifyIORef'_closure" {
     Data.IORef.atomicModifyIORef'_closure:
         const Data.IORef.atomicModifyIORef'_info;
 },
 Data.IORef.atomicModifyIORef'_entry() //  [R2, R3]
         { info_tbl: [(c7RRu,
                       label: Data.IORef.atomicModifyIORef'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRu: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicModifyIORef'1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.546184929 UTC

[section ""data" . Data.IORef.atomicWriteIORef1_closure" {
     Data.IORef.atomicWriteIORef1_closure:
         const Data.IORef.atomicWriteIORef1_info;
 },
 sat_s7RNH_entry() //  [R1]
         { info_tbl: [(c7RRQ,
                       label: sat_s7RNH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRQ: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.IORef.atomicWriteIORef1_entry() //  [R2, R3]
         { info_tbl: [(c7RRT,
                       label: Data.IORef.atomicWriteIORef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7RRX; else goto c7RRY;
       c7RRX: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.IORef.atomicWriteIORef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7RRY: // global
           I64[Sp - 16] = block_c7RRF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7RS8; else goto c7RRG;
       u7RS8: // global
           call _c7RRF(R1) args: 0, res: 0, upd: 0;
       c7RRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RRF() //  [R1]
         { info_tbl: [(c7RRF,
                       label: block_c7RRF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7RS1; else goto c7RS0;
       c7RS1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7RS0: // global
           _s7RNE::P64 = P64[R1 + 7];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = GHC.Tuple.()_closure+1;
           I64[Hp - 8] = sat_s7RNH_info;
           P64[Hp] = Hp - 31;
           I64[Sp + 8] = block_c7RRU_info;
           R2 = Hp - 7;
           R1 = _s7RNE::P64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RRU() //  [R1]
         { info_tbl: [(c7RRU,
                       label: block_c7RRU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRU: // global
           I64[Sp] = block_c7RRW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7RS9; else goto c7RS3;
       u7RS9: // global
           call _c7RRW() args: 0, res: 0, upd: 0;
       c7RS3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7RRW() //  []
         { info_tbl: [(c7RRW,
                       label: block_c7RRW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RRW: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.55781939 UTC

[section ""data" . Data.IORef.atomicWriteIORef_closure" {
     Data.IORef.atomicWriteIORef_closure:
         const Data.IORef.atomicWriteIORef_info;
 },
 Data.IORef.atomicWriteIORef_entry() //  [R2, R3]
         { info_tbl: [(c7RSJ,
                       label: Data.IORef.atomicWriteIORef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7RSJ: // global
           R3 = R3;
           R2 = R2;
           call Data.IORef.atomicWriteIORef1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.561924545 UTC

[section ""cstring" . Data.IORef.$trModule4_bytes" {
     Data.IORef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.563611593 UTC

[section ""data" . Data.IORef.$trModule3_closure" {
     Data.IORef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.565378382 UTC

[section ""cstring" . Data.IORef.$trModule2_bytes" {
     Data.IORef.$trModule2_bytes:
         I8[] [68,97,116,97,46,73,79,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.567074699 UTC

[section ""data" . Data.IORef.$trModule1_closure" {
     Data.IORef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.IORef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.568894468 UTC

[section ""data" . Data.IORef.$trModule_closure" {
     Data.IORef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.IORef.$trModule3_closure+1;
         const Data.IORef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.570641973 UTC

[section ""relreadonly" . S7RSV_srt" { S7RSV_srt:
 }]

