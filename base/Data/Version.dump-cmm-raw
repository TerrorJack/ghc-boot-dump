
==================== Raw Cmm ====================
2018-03-16 16:06:58.191118071 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:58.192967672 UTC

[section ""data" . Data.Version.$fGenericVersion_$cto_closure" {
     Data.Version.$fGenericVersion_$cto_closure:
         const Data.Version.$fGenericVersion_$cto_info;
 },
 Data.Version.$fGenericVersion_$cto_entry() //  [R2]
         { []
         }
     {offset
       cc4Qk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc4Qo; else goto cc4Qp;
       cc4Qo: // global
           R2 = R2;
           R1 = Data.Version.$fGenericVersion_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc4Qp: // global
           I64[Sp - 8] = block_cc4Qi_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fGenericVersion_$cto_info" {
     Data.Version.$fGenericVersion_$cto_info:
         const Data.Version.$fGenericVersion_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc4Qi() //  [R1]
         { []
         }
     {offset
       cc4Qi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc4Qs; else goto cc4Qr;
       cc4Qs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc4Qr: // global
           _sc3YF::P64 = P64[R1 + 7];
           _sc3YG::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc3YF::P64;
           P64[Hp] = _sc3YG::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Qi_info" {
     block_cc4Qi_info:
         const _cc4Qi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.198718836 UTC

[section ""data" . Data.Version.$fGenericVersion1_closure" {
     Data.Version.$fGenericVersion1_closure:
         const Data.Version.$fGenericVersion1_info;
 },
 Data.Version.$fGenericVersion1_entry() //  [R2]
         { []
         }
     {offset
       cc4QJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc4QN; else goto cc4QO;
       cc4QN: // global
           R2 = R2;
           R1 = Data.Version.$fGenericVersion1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc4QO: // global
           I64[Sp - 8] = block_cc4QG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4QS; else goto cc4QH;
       uc4QS: // global
           call _cc4QG(R1) args: 0, res: 0, upd: 0;
       cc4QH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fGenericVersion1_info" {
     Data.Version.$fGenericVersion1_info:
         const Data.Version.$fGenericVersion1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc4QG() //  [R1]
         { []
         }
     {offset
       cc4QG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc4QR; else goto cc4QQ;
       cc4QR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc4QQ: // global
           _sc3YJ::P64 = P64[R1 + 7];
           _sc3YK::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sc3YJ::P64;
           P64[Hp] = _sc3YK::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4QG_info" {
     block_cc4QG_info:
         const _cc4QG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.205230921 UTC

[section ""data" . Data.Version.$fGenericVersion_closure" {
     Data.Version.$fGenericVersion_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Version.$fGenericVersion1_closure+1;
         const Data.Version.$fGenericVersion_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.207612543 UTC

[section ""data" . Data.Version.versionTags_closure" {
     Data.Version.versionTags_closure:
         const Data.Version.versionTags_info;
 },
 Data.Version.versionTags_entry() //  [R2]
         { []
         }
     {offset
       cc4Rb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc4Rc; else goto cc4Rd;
       cc4Rc: // global
           R2 = R2;
           R1 = Data.Version.versionTags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc4Rd: // global
           I64[Sp - 8] = block_cc4R8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4Rh; else goto cc4R9;
       uc4Rh: // global
           call _cc4R8(R1) args: 0, res: 0, upd: 0;
       cc4R9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.versionTags_info" {
     Data.Version.versionTags_info:
         const Data.Version.versionTags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc4R8() //  [R1]
         { []
         }
     {offset
       cc4R8: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4R8_info" {
     block_cc4R8_info:
         const _cc4R8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.213007173 UTC

[section ""data" . Data.Version.versionBranch_closure" {
     Data.Version.versionBranch_closure:
         const Data.Version.versionBranch_info;
 },
 Data.Version.versionBranch_entry() //  [R2]
         { []
         }
     {offset
       cc4RA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc4RB; else goto cc4RC;
       cc4RB: // global
           R2 = R2;
           R1 = Data.Version.versionBranch_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc4RC: // global
           I64[Sp - 8] = block_cc4Rx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4RG; else goto cc4Ry;
       uc4RG: // global
           call _cc4Rx(R1) args: 0, res: 0, upd: 0;
       cc4Ry: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.versionBranch_info" {
     Data.Version.versionBranch_info:
         const Data.Version.versionBranch_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc4Rx() //  [R1]
         { []
         }
     {offset
       cc4Rx: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Rx_info" {
     block_cc4Rx_info:
         const _cc4Rx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.218531324 UTC

[section ""data" . Data.Version.$fOrdVersion_$ccompare_closure" {
     Data.Version.$fOrdVersion_$ccompare_closure:
         const Data.Version.$fOrdVersion_$ccompare_info;
 },
 Data.Version.$fOrdVersion_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4RZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc4S3; else goto cc4S4;
       cc4S3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4S4: // global
           I64[Sp - 16] = block_cc4RW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4Sc; else goto cc4RX;
       uc4Sc: // global
           call _cc4RW(R1) args: 0, res: 0, upd: 0;
       cc4RX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$ccompare_info" {
     Data.Version.$fOrdVersion_$ccompare_info:
         const Data.Version.$fOrdVersion_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4RW() //  [R1]
         { []
         }
     {offset
       cc4RW: // global
           I64[Sp] = block_cc4S2_info;
           _sc3YW::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc3YW::P64;
           if (R1 & 7 != 0) goto uc4Sb; else goto cc4S6;
       uc4Sb: // global
           call _cc4S2(R1) args: 0, res: 0, upd: 0;
       cc4S6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4RW_info" {
     block_cc4RW_info:
         const _cc4RW;
         const 1;
         const 30;
 },
 _cc4S2() //  [R1]
         { []
         }
     {offset
       cc4S2: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4S2_info" {
     block_cc4S2_info:
         const _cc4S2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.225917645 UTC

[section ""data" . Data.Version.$w$c==_closure" {
     Data.Version.$w$c==_closure:
         const Data.Version.$w$c==_info;
 },
 Data.Version.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc4SA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc4SB; else goto cc4SC;
       cc4SB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4SC: // global
           I64[Sp - 24] = block_cc4Su_info;
           _sc3Z2::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _sc3Z2::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$c==_info" {
     Data.Version.$w$c==_info:
         const Data.Version.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc4Su() //  [R1]
         { []
         }
     {offset
       cc4Su: // global
           if (R1 & 7 == 1) goto cc4Sx; else goto cc4Sy;
       cc4Sx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4Sy: // global
           I64[Sp] = block_cc4SI_info;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fOrd[]_$s$ccompare1_closure+2;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Su_info" {
     block_cc4Su_info:
         const _cc4Su;
         const 2;
         const 30;
 },
 _cc4SI() //  [R1]
         { []
         }
     {offset
       cc4SI: // global
           _sc3Z2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc4SM_info;
           R3 = _sc3Z2::P64;
           R2 = GHC.Classes.$fOrd[]_$s$ccompare1_closure+2;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4SI_info" {
     block_cc4SI_info:
         const _cc4SI;
         const 130;
         const 30;
 },
 _cc4SM() //  [R1]
         { []
         }
     {offset
       cc4SM: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Classes.$fEq[]_$s$c==1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4SM_info" {
     block_cc4SM_info:
         const _cc4SM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.235154217 UTC

[section ""data" . Data.Version.$fEqVersion_$c==_closure" {
     Data.Version.$fEqVersion_$c==_closure:
         const Data.Version.$fEqVersion_$c==_info;
 },
 Data.Version.$fEqVersion_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Th: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc4Tl; else goto cc4Tm;
       cc4Tl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fEqVersion_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4Tm: // global
           I64[Sp - 16] = block_cc4Te_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4Tu; else goto cc4Tf;
       uc4Tu: // global
           call _cc4Te(R1) args: 0, res: 0, upd: 0;
       cc4Tf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fEqVersion_$c==_info" {
     Data.Version.$fEqVersion_$c==_info:
         const Data.Version.$fEqVersion_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4Te() //  [R1]
         { []
         }
     {offset
       cc4Te: // global
           I64[Sp - 8] = block_cc4Tk_info;
           _sc3Zb::P64 = P64[R1 + 7];
           _sc3Zc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc3Zc::P64;
           P64[Sp + 8] = _sc3Zb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4Tt; else goto cc4To;
       uc4Tt: // global
           call _cc4Tk(R1) args: 0, res: 0, upd: 0;
       cc4To: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Te_info" {
     block_cc4Te_info:
         const _cc4Te;
         const 1;
         const 30;
 },
 _cc4Tk() //  [R1]
         { []
         }
     {offset
       cc4Tk: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Version.$w$c==_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Tk_info" {
     block_cc4Tk_info:
         const _cc4Tk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.243132859 UTC

[section ""data" . Data.Version.$fEqVersion_$c/=_closure" {
     Data.Version.$fEqVersion_$c/=_closure:
         const Data.Version.$fEqVersion_$c/=_info;
 },
 Data.Version.$fEqVersion_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4TP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc4TT; else goto cc4TU;
       cc4TT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fEqVersion_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4TU: // global
           I64[Sp - 16] = block_cc4TM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4Ue; else goto cc4TN;
       uc4Ue: // global
           call _cc4TM(R1) args: 0, res: 0, upd: 0;
       cc4TN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fEqVersion_$c/=_info" {
     Data.Version.$fEqVersion_$c/=_info:
         const Data.Version.$fEqVersion_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4TM() //  [R1]
         { []
         }
     {offset
       cc4TM: // global
           I64[Sp - 8] = block_cc4TS_info;
           _sc3Zj::P64 = P64[R1 + 7];
           _sc3Zk::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc3Zk::P64;
           P64[Sp + 8] = _sc3Zj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4Ud; else goto cc4TW;
       uc4Ud: // global
           call _cc4TS(R1) args: 0, res: 0, upd: 0;
       cc4TW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4TM_info" {
     block_cc4TM_info:
         const _cc4TM;
         const 1;
         const 30;
 },
 _cc4TS() //  [R1]
         { []
         }
     {offset
       cc4TS: // global
           _sc3Zj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cc4U0_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _sc3Zj::P64;
           Sp = Sp + 16;
           call Data.Version.$w$c==_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4TS_info" {
     block_cc4TS_info:
         const _cc4TS;
         const 2;
         const 30;
 },
 _cc4U0() //  [R1]
         { []
         }
     {offset
       cc4U0: // global
           if (R1 & 7 == 1) goto cc4U7; else goto cc4Ub;
       cc4U7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4Ub: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4U0_info" {
     block_cc4U0_info:
         const _cc4U0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.250716512 UTC

[section ""data" . Data.Version.$fEqVersion_closure" {
     Data.Version.$fEqVersion_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Version.$fEqVersion_$c==_closure+2;
         const Data.Version.$fEqVersion_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.253886416 UTC

[section ""data" . Data.Version.$fOrdVersion_$c<_closure" {
     Data.Version.$fOrdVersion_$c<_closure:
         const Data.Version.$fOrdVersion_$c<_info;
 },
 Data.Version.$fOrdVersion_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4UH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc4UL; else goto cc4UM;
       cc4UL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4UM: // global
           I64[Sp - 16] = block_cc4UE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4V6; else goto cc4UF;
       uc4V6: // global
           call _cc4UE(R1) args: 0, res: 0, upd: 0;
       cc4UF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c<_info" {
     Data.Version.$fOrdVersion_$c<_info:
         const Data.Version.$fOrdVersion_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4UE() //  [R1]
         { []
         }
     {offset
       cc4UE: // global
           I64[Sp] = block_cc4UK_info;
           _sc3Zs::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc3Zs::P64;
           if (R1 & 7 != 0) goto uc4V5; else goto cc4UO;
       uc4V5: // global
           call _cc4UK(R1) args: 0, res: 0, upd: 0;
       cc4UO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4UE_info" {
     block_cc4UE_info:
         const _cc4UE;
         const 1;
         const 30;
 },
 _cc4UK() //  [R1]
         { []
         }
     {offset
       cc4UK: // global
           _sc3Zs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc4US_info;
           R3 = P64[R1 + 7];
           R2 = _sc3Zs::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4UK_info" {
     block_cc4UK_info:
         const _cc4UK;
         const 1;
         const 30;
 },
 _cc4US() //  [R1]
         { []
         }
     {offset
       cc4US: // global
           if (R1 & 7 == 1) goto cc4V3; else goto cc4UZ;
       cc4V3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4UZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4US_info" {
     block_cc4US_info:
         const _cc4US;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.262766982 UTC

[section ""data" . Data.Version.$fOrdVersion_$c>=_closure" {
     Data.Version.$fOrdVersion_$c>=_closure:
         const Data.Version.$fOrdVersion_$c>=_info;
 },
 Data.Version.$fOrdVersion_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Vy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc4VC; else goto cc4VD;
       cc4VC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4VD: // global
           I64[Sp - 16] = block_cc4Vv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4VX; else goto cc4Vw;
       uc4VX: // global
           call _cc4Vv(R1) args: 0, res: 0, upd: 0;
       cc4Vw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c>=_info" {
     Data.Version.$fOrdVersion_$c>=_info:
         const Data.Version.$fOrdVersion_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4Vv() //  [R1]
         { []
         }
     {offset
       cc4Vv: // global
           I64[Sp] = block_cc4VB_info;
           _sc3ZB::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc3ZB::P64;
           if (R1 & 7 != 0) goto uc4VW; else goto cc4VF;
       uc4VW: // global
           call _cc4VB(R1) args: 0, res: 0, upd: 0;
       cc4VF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Vv_info" {
     block_cc4Vv_info:
         const _cc4Vv;
         const 1;
         const 30;
 },
 _cc4VB() //  [R1]
         { []
         }
     {offset
       cc4VB: // global
           _sc3ZB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc4VJ_info;
           R3 = P64[R1 + 7];
           R2 = _sc3ZB::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4VB_info" {
     block_cc4VB_info:
         const _cc4VB;
         const 1;
         const 30;
 },
 _cc4VJ() //  [R1]
         { []
         }
     {offset
       cc4VJ: // global
           if (R1 & 7 == 1) goto cc4VU; else goto cc4VQ;
       cc4VU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4VQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4VJ_info" {
     block_cc4VJ_info:
         const _cc4VJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.272533302 UTC

[section ""data" . Data.Version.$fOrdVersion_$c>_closure" {
     Data.Version.$fOrdVersion_$c>_closure:
         const Data.Version.$fOrdVersion_$c>_info;
 },
 Data.Version.$fOrdVersion_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Wp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc4Wt; else goto cc4Wu;
       cc4Wt: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4Wu: // global
           I64[Sp - 16] = block_cc4Wm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4WO; else goto cc4Wn;
       uc4WO: // global
           call _cc4Wm(R1) args: 0, res: 0, upd: 0;
       cc4Wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c>_info" {
     Data.Version.$fOrdVersion_$c>_info:
         const Data.Version.$fOrdVersion_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4Wm() //  [R1]
         { []
         }
     {offset
       cc4Wm: // global
           I64[Sp] = block_cc4Ws_info;
           _sc3ZK::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc3ZK::P64;
           if (R1 & 7 != 0) goto uc4WN; else goto cc4Ww;
       uc4WN: // global
           call _cc4Ws(R1) args: 0, res: 0, upd: 0;
       cc4Ww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Wm_info" {
     block_cc4Wm_info:
         const _cc4Wm;
         const 1;
         const 30;
 },
 _cc4Ws() //  [R1]
         { []
         }
     {offset
       cc4Ws: // global
           _sc3ZK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc4WA_info;
           R3 = P64[R1 + 7];
           R2 = _sc3ZK::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Ws_info" {
     block_cc4Ws_info:
         const _cc4Ws;
         const 1;
         const 30;
 },
 _cc4WA() //  [R1]
         { []
         }
     {offset
       cc4WA: // global
           if (R1 & 7 == 3) goto cc4WL; else goto cc4WH;
       cc4WL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4WH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4WA_info" {
     block_cc4WA_info:
         const _cc4WA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.281513307 UTC

[section ""data" . Data.Version.$fOrdVersion_$c<=_closure" {
     Data.Version.$fOrdVersion_$c<=_closure:
         const Data.Version.$fOrdVersion_$c<=_info;
 },
 Data.Version.$fOrdVersion_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Xg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc4Xk; else goto cc4Xl;
       cc4Xk: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4Xl: // global
           I64[Sp - 16] = block_cc4Xd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4XF; else goto cc4Xe;
       uc4XF: // global
           call _cc4Xd(R1) args: 0, res: 0, upd: 0;
       cc4Xe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c<=_info" {
     Data.Version.$fOrdVersion_$c<=_info:
         const Data.Version.$fOrdVersion_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4Xd() //  [R1]
         { []
         }
     {offset
       cc4Xd: // global
           I64[Sp] = block_cc4Xj_info;
           _sc3ZT::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc3ZT::P64;
           if (R1 & 7 != 0) goto uc4XE; else goto cc4Xn;
       uc4XE: // global
           call _cc4Xj(R1) args: 0, res: 0, upd: 0;
       cc4Xn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Xd_info" {
     block_cc4Xd_info:
         const _cc4Xd;
         const 1;
         const 30;
 },
 _cc4Xj() //  [R1]
         { []
         }
     {offset
       cc4Xj: // global
           _sc3ZT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc4Xr_info;
           R3 = P64[R1 + 7];
           R2 = _sc3ZT::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Xj_info" {
     block_cc4Xj_info:
         const _cc4Xj;
         const 1;
         const 30;
 },
 _cc4Xr() //  [R1]
         { []
         }
     {offset
       cc4Xr: // global
           if (R1 & 7 == 3) goto cc4XC; else goto cc4Xy;
       cc4XC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc4Xy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Xr_info" {
     block_cc4Xr_info:
         const _cc4Xr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.290340415 UTC

[section ""data" . Data.Version.$fOrdVersion_$cmax_closure" {
     Data.Version.$fOrdVersion_$cmax_closure:
         const Data.Version.$fOrdVersion_$cmax_info;
 },
 Data.Version.$fOrdVersion_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Y7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc4Yb; else goto cc4Yc;
       cc4Yb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4Yc: // global
           I64[Sp - 16] = block_cc4Y4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4Yw; else goto cc4Y5;
       uc4Yw: // global
           call _cc4Y4(R1) args: 0, res: 0, upd: 0;
       cc4Y5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$cmax_info" {
     Data.Version.$fOrdVersion_$cmax_info:
         const Data.Version.$fOrdVersion_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4Y4() //  [R1]
         { []
         }
     {offset
       cc4Y4: // global
           I64[Sp - 8] = block_cc4Ya_info;
           _sc401::P64 = R1;
           _sc402::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc402::P64;
           P64[Sp + 8] = _sc401::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4Yv; else goto cc4Ye;
       uc4Yv: // global
           call _cc4Ya(R1) args: 0, res: 0, upd: 0;
       cc4Ye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Y4_info" {
     block_cc4Y4_info:
         const _cc4Y4;
         const 1;
         const 30;
 },
 _cc4Ya() //  [R1]
         { []
         }
     {offset
       cc4Ya: // global
           I64[Sp] = block_cc4Yi_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Ya_info" {
     block_cc4Ya_info:
         const _cc4Ya;
         const 2;
         const 30;
 },
 _cc4Yi() //  [R1]
         { []
         }
     {offset
       cc4Yi: // global
           if (R1 & 7 == 3) goto cc4Yt; else goto cc4Yp;
       cc4Yt: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc4Yp: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Yi_info" {
     block_cc4Yi_info:
         const _cc4Yi;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.299677066 UTC

[section ""data" . Data.Version.$fOrdVersion_$cmin_closure" {
     Data.Version.$fOrdVersion_$cmin_closure:
         const Data.Version.$fOrdVersion_$cmin_info;
 },
 Data.Version.$fOrdVersion_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       cc4Z0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc4Z4; else goto cc4Z5;
       cc4Z4: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc4Z5: // global
           I64[Sp - 16] = block_cc4YX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc4Zp; else goto cc4YY;
       uc4Zp: // global
           call _cc4YX(R1) args: 0, res: 0, upd: 0;
       cc4YY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$cmin_info" {
     Data.Version.$fOrdVersion_$cmin_info:
         const Data.Version.$fOrdVersion_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc4YX() //  [R1]
         { []
         }
     {offset
       cc4YX: // global
           I64[Sp - 8] = block_cc4Z3_info;
           _sc40a::P64 = R1;
           _sc40b::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc40b::P64;
           P64[Sp + 8] = _sc40a::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc4Zo; else goto cc4Z7;
       uc4Zo: // global
           call _cc4Z3(R1) args: 0, res: 0, upd: 0;
       cc4Z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4YX_info" {
     block_cc4YX_info:
         const _cc4YX;
         const 1;
         const 30;
 },
 _cc4Z3() //  [R1]
         { []
         }
     {offset
       cc4Z3: // global
           I64[Sp] = block_cc4Zb_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Z3_info" {
     block_cc4Z3_info:
         const _cc4Z3;
         const 2;
         const 30;
 },
 _cc4Zb() //  [R1]
         { []
         }
     {offset
       cc4Zb: // global
           if (R1 & 7 == 3) goto cc4Zm; else goto cc4Zi;
       cc4Zm: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc4Zi: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc4Zb_info" {
     block_cc4Zb_info:
         const _cc4Zb;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.307998314 UTC

[section ""data" . Data.Version.$fOrdVersion_closure" {
     Data.Version.$fOrdVersion_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Version.$fEqVersion_closure+1;
         const Data.Version.$fOrdVersion_$ccompare_closure+2;
         const Data.Version.$fOrdVersion_$c<_closure+2;
         const Data.Version.$fOrdVersion_$c<=_closure+2;
         const Data.Version.$fOrdVersion_$c>_closure+2;
         const Data.Version.$fOrdVersion_$c>=_closure+2;
         const Data.Version.$fOrdVersion_$cmax_closure+2;
         const Data.Version.$fOrdVersion_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.310314035 UTC

[section ""data" . Data.Version.makeVersion_closure" {
     Data.Version.makeVersion_closure:
         const Data.Version.makeVersion_info;
 },
 Data.Version.makeVersion_entry() //  [R2]
         { []
         }
     {offset
       cc4ZS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc4ZW; else goto cc4ZV;
       cc4ZW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Version.makeVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc4ZV: // global
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.makeVersion_info" {
     Data.Version.makeVersion_info:
         const Data.Version.makeVersion_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.31378121 UTC

[section ""cstring" . Data.Version.$trModule4_bytes" {
     Data.Version.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.315348123 UTC

[section ""data" . Data.Version.$trModule3_closure" {
     Data.Version.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.316992138 UTC

[section ""cstring" . Data.Version.$trModule2_bytes" {
     Data.Version.$trModule2_bytes:
         I8[] [68,97,116,97,46,86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.318641136 UTC

[section ""data" . Data.Version.$trModule1_closure" {
     Data.Version.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.32026003 UTC

[section ""data" . Data.Version.$trModule_closure" {
     Data.Version.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Version.$trModule3_closure+1;
         const Data.Version.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.321943645 UTC

[section ""data" . $krep_rc3Yn_closure" {
     $krep_rc3Yn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.323633705 UTC

[section ""data" . $krep1_rc3Yo_closure" {
     $krep1_rc3Yo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.325316217 UTC

[section ""data" . $krep2_rc3Yp_closure" {
     $krep2_rc3Yp_closure:
         const :_con_info;
         const $krep_rc3Yn_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.327024199 UTC

[section ""data" . $krep3_rc3Yq_closure" {
     $krep3_rc3Yq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_rc3Yp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.328688075 UTC

[section ""data" . $krep4_rc3Yr_closure" {
     $krep4_rc3Yr_closure:
         const :_con_info;
         const $krep1_rc3Yo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.330295182 UTC

[section ""data" . $krep5_rc3Ys_closure" {
     $krep5_rc3Ys_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rc3Yr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.33234128 UTC

[section ""data" . $krep6_rc3Yt_closure" {
     $krep6_rc3Yt_closure:
         const :_con_info;
         const $krep3_rc3Yq_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.334275579 UTC

[section ""data" . $krep7_rc3Yu_closure" {
     $krep7_rc3Yu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep6_rc3Yt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.335903811 UTC

[section ""cstring" . Data.Version.$fReadVersion19_bytes" {
     Data.Version.$fReadVersion19_bytes:
         I8[] [86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.337517782 UTC

[section ""data" . Data.Version.$tcVersion1_closure" {
     Data.Version.$tcVersion1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$fReadVersion19_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.339139735 UTC

[section ""data" . Data.Version.$tcVersion_closure" {
     Data.Version.$tcVersion_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Version.$trModule_closure+1;
         const Data.Version.$tcVersion1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18148779789861942324;
         const 12675349638857785520;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.340881546 UTC

[section ""data" . $krep8_rc3Yv_closure" {
     $krep8_rc3Yv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Version.$tcVersion_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.34250738 UTC

[section ""data" . $krep9_rc3Yw_closure" {
     $krep9_rc3Yw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rc3Yu_closure+1;
         const $krep8_rc3Yv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.344107835 UTC

[section ""data" . Data.Version.$tc'Version1_closure" {
     Data.Version.$tc'Version1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rc3Ys_closure+1;
         const $krep9_rc3Yw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.345797609 UTC

[section ""cstring" . Data.Version.$tc'Version3_bytes" {
     Data.Version.$tc'Version3_bytes:
         I8[] [39,86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.347458903 UTC

[section ""data" . Data.Version.$tc'Version2_closure" {
     Data.Version.$tc'Version2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$tc'Version3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.349151127 UTC

[section ""data" . Data.Version.$tc'Version_closure" {
     Data.Version.$tc'Version_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Version.$trModule_closure+1;
         const Data.Version.$tc'Version2_closure+1;
         const Data.Version.$tc'Version1_closure+4;
         const 3698077959655346891;
         const 8062481246695158651;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.350910034 UTC

[section ""cstring" . f_rc3Yx_bytes" {
     f_rc3Yx_bytes:
         I8[] [86,101,114,115,105,111,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.353198677 UTC

[section ""data" . f1_rc3Yy_closure" {
     f1_rc3Yy_closure:
         const f1_rc3Yy_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rc3Yy_entry() //  [R1]
         { []
         }
     {offset
       cc50v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc50w; else goto cc50x;
       cc50w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc50x: // global
           (_cc50s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc50s::I64 == 0) goto cc50u; else goto cc50t;
       cc50u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc50t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc50s::I64;
           R2 = f_rc3Yx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rc3Yy_info" {
     f1_rc3Yy_info:
         const f1_rc3Yy_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.35803774 UTC

[section ""cstring" . lvl_rc3Yz_bytes" {
     lvl_rc3Yz_bytes:
         I8[] [118,101,114,115,105,111,110,66,114,97,110,99,104,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.359661548 UTC

[section ""cstring" . lvl1_rc3YA_bytes" {
     lvl1_rc3YA_bytes:
         I8[] [118,101,114,115,105,111,110,84,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.361276927 UTC

[section ""cstring" . Data.Version.$fReadVersion5_bytes" {
     Data.Version.$fReadVersion5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.376393904 UTC

[section ""data" . Data.Version.$w$cshowsPrec_closure" {
     Data.Version.$w$cshowsPrec_closure:
         const Data.Version.$w$cshowsPrec_info;
         const 0;
 },
 Data.Version.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cc50J: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 s1_sc40p_entry() //  [R1]
         { []
         }
     {offset
       cc51c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc51d; else goto cc51e;
       cc51d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc51e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.$fReadVersion5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . s1_sc40p_info" {
     s1_sc40p_info:
         const s1_sc40p_entry;
         const 1;
         const 16;
 },
 sat_sc40B_entry() //  [R1]
         { []
         }
     {offset
       cc51L: // global
           _sc40B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc51M; else goto cc51N;
       cc51N: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc51P; else goto cc51O;
       cc51P: // global
           HpAlloc = 56;
           goto cc51M;
       cc51M: // global
           R1 = _sc40B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc51O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc40B::P64;
           _sc40u::P64 = P64[_sc40B::P64 + 16];
           _sc40x::P64 = P64[_sc40B::P64 + 24];
           _sc40y::P64 = P64[_sc40B::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sc40u::P64;
           P64[Hp - 24] = _sc40y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sc40x::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc40B_info" {
     sat_sc40B_info:
         const sat_sc40B_entry;
         const 3;
         const 4294967311;
         const Sc4eo_srt;
 },
 showl_sc40u_entry() //  [R1, R2]
         { []
         }
     {offset
       cc51U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc51V; else goto cc51W;
       cc51V: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc51W: // global
           I64[Sp - 24] = block_cc51z_info;
           _sc40u::P64 = R1;
           _sc40t::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc40t::P64;
           P64[Sp - 8] = _sc40u::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc524; else goto cc51A;
       uc524: // global
           call _cc51z(R1) args: 0, res: 0, upd: 0;
       cc51A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sc40u_info" {
     showl_sc40u_info:
         const showl_sc40u_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sc4eo_srt;
 },
 _cc51z() //  [R1]
         { []
         }
     {offset
       cc51z: // global
           if (R1 & 7 == 1) goto cc51R; else goto cc51S;
       cc51R: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc51S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc523; else goto cc522;
       cc523: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc522: // global
           _sc40x::P64 = P64[R1 + 6];
           _sc40y::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sc40B_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sc40x::P64;
           P64[Hp - 48] = _sc40y::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)3_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc51z_info" {
     block_cc51z_info:
         const _cc51z;
         const 2;
         const 4294967326;
         const Sc4eo_srt;
 },
 sat_sc40D_entry() //  [R1]
         { []
         }
     {offset
       cc525: // global
           _sc40D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc526; else goto cc527;
       cc527: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc529; else goto cc528;
       cc529: // global
           HpAlloc = 40;
           goto cc526;
       cc526: // global
           R1 = _sc40D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc528: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc40D::P64;
           _sc40p::P64 = P64[_sc40D::P64 + 16];
           _sc40s::P64 = P64[_sc40D::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _sc40p::P64;
           I64[Hp - 8] = showl_sc40u_info;
           P64[Hp] = Hp - 30;
           R2 = _sc40s::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sc40u_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc40D_info" {
     sat_sc40D_info:
         const sat_sc40D_entry;
         const 2;
         const 4294967314;
         const Sc4eo_srt;
 },
 sat_sc40F_entry() //  [R1]
         { []
         }
     {offset
       cc52b: // global
           _sc40F::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc52c; else goto cc52d;
       cc52d: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc52f; else goto cc52e;
       cc52f: // global
           HpAlloc = 56;
           goto cc52c;
       cc52c: // global
           R1 = _sc40F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc52e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc40F::P64;
           _sc40p::P64 = P64[_sc40F::P64 + 16];
           _sc40r::P64 = P64[_sc40F::P64 + 24];
           _sc40s::P64 = P64[_sc40F::P64 + 32];
           I64[Hp - 48] = sat_sc40D_info;
           P64[Hp - 32] = _sc40p::P64;
           P64[Hp - 24] = _sc40s::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sc40r::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc40F_info" {
     sat_sc40F_info:
         const sat_sc40F_entry;
         const 3;
         const 4294967311;
         const Sc4eo_srt;
 },
 sat_sc40H_entry() //  [R1]
         { []
         }
     {offset
       cc52k: // global
           _sc40H::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc52l; else goto cc52m;
       cc52m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc52o; else goto cc52n;
       cc52o: // global
           HpAlloc = 24;
           goto cc52l;
       cc52l: // global
           R1 = _sc40H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc52n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc40H::P64;
           _sc40k::P64 = P64[_sc40H::P64 + 16];
           _sc40n::P64 = P64[_sc40H::P64 + 24];
           I64[Hp - 16] = s1_sc40p_info;
           P64[Hp] = _sc40n::P64;
           I64[Sp - 32] = block_cc51f_info;
           R1 = _sc40k::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc52w; else goto cc51g;
       uc52w: // global
           call _cc51f(R1) args: 0, res: 0, upd: 0;
       cc51g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc40H_info" {
     sat_sc40H_info:
         const sat_sc40H_entry;
         const 2;
         const 4294967314;
         const Sc4eo_srt;
 },
 _cc51f() //  [R1]
         { []
         }
     {offset
       cc51f: // global
           _cc518::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc52h; else goto cc52i;
       cc52h: // global
           R3 = _cc518::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cc52i: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc52v; else goto cc52u;
       cc52v: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc52u: // global
           _sc40r::P64 = P64[R1 + 6];
           _sc40s::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sc40F_info;
           P64[Hp - 64] = _cc518::P64;
           P64[Hp - 56] = _sc40r::P64;
           P64[Hp - 48] = _sc40s::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)3_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc51f_info" {
     block_cc51f_info:
         const _cc51f;
         const 1;
         const 4294967326;
         const Sc4eo_srt;
 },
 sat_sc40I_entry() //  [R1]
         { []
         }
     {offset
       cc52x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc52B; else goto cc52A;
       cc52B: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc52A: // global
           _sc40k::P64 = P64[R1 + 16];
           _sc40n::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sc40H_info;
           P64[Hp - 8] = _sc40k::P64;
           P64[Hp] = _sc40n::P64;
           R3 = Hp - 24;
           R2 = lvl1_rc3YA_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc40I_info" {
     sat_sc40I_info:
         const sat_sc40I_entry;
         const 2;
         const 4294967314;
         const Sc4eo_srt;
 },
 s_sc40o_entry() //  [R1]
         { []
         }
     {offset
       cc52C: // global
           _sc40o::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc52D; else goto cc52E;
       cc52E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc52G; else goto cc52F;
       cc52G: // global
           HpAlloc = 32;
           goto cc52D;
       cc52D: // global
           R1 = _sc40o::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc52F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc40o::P64;
           _sc40k::P64 = P64[_sc40o::P64 + 16];
           _sc40n::P64 = P64[_sc40o::P64 + 24];
           I64[Hp - 24] = sat_sc40I_info;
           P64[Hp - 8] = _sc40k::P64;
           P64[Hp] = _sc40n::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . s_sc40o_info" {
     s_sc40o_info:
         const s_sc40o_entry;
         const 2;
         const 12884901906;
         const Sc4eo_srt;
 },
 sat_sc410_entry() //  [R1]
         { []
         }
     {offset
       cc53j: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc53q; else goto cc53r;
       cc53q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc53r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc53g_info;
           _sc40P::P64 = P64[R1 + 16];
           _sc40T::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sc40P::P64;
           P64[Sp - 24] = _sc40T::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc53y; else goto cc53h;
       uc53y: // global
           call _cc53g(R1) args: 0, res: 0, upd: 0;
       cc53h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc410_info" {
     sat_sc410_info:
         const sat_sc410_entry;
         const 3;
         const 15;
 },
 _cc53g() //  [R1]
         { []
         }
     {offset
       cc53g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc53u; else goto cc53t;
       cc53u: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc53t: // global
           _sc40V::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cc53n_info;
           R4 = Hp - 24;
           R3 = _sc40V::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc53g_info" {
     block_cc53g_info:
         const _cc53g;
         const 2;
         const 30;
 },
 _cc53n() //  [R1, R2]
         { []
         }
     {offset
       cc53n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc53x; else goto cc53w;
       cc53x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc53w: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc53n_info" {
     block_cc53n_info:
         const _cc53n;
         const 0;
         const 30;
 },
 showl_sc40P_entry() //  [R1, R2]
         { []
         }
     {offset
       cc53D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc53E; else goto cc53F;
       cc53E: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc53F: // global
           I64[Sp - 24] = block_cc536_info;
           _sc40P::P64 = R1;
           _sc40O::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc40O::P64;
           P64[Sp - 8] = _sc40P::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc53M; else goto cc537;
       uc53M: // global
           call _cc536(R1) args: 0, res: 0, upd: 0;
       cc537: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sc40P_info" {
     showl_sc40P_info:
         const showl_sc40P_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc536() //  [R1]
         { []
         }
     {offset
       cc536: // global
           if (R1 & 7 == 1) goto cc53A; else goto cc53B;
       cc53A: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc53B: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc53L; else goto cc53K;
       cc53L: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc53K: // global
           _sc40S::P64 = P64[R1 + 6];
           _sc40T::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sc410_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sc40S::P64;
           P64[Hp - 24] = _sc40T::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc536_info" {
     block_cc536_info:
         const _cc536;
         const 2;
         const 30;
 },
 sat_sc411_entry() //  [R1]
         { []
         }
     {offset
       cc53N: // global
           _sc411::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc53O; else goto cc53P;
       cc53P: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc53R; else goto cc53Q;
       cc53R: // global
           HpAlloc = 40;
           goto cc53O;
       cc53O: // global
           R1 = _sc411::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc53Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc411::P64;
           _sc40o::P64 = P64[_sc411::P64 + 16];
           _sc40L::P64 = P64[_sc411::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _sc40o::P64;
           I64[Hp - 8] = showl_sc40P_info;
           P64[Hp] = Hp - 30;
           R2 = _sc40L::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sc40P_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc411_info" {
     sat_sc411_info:
         const sat_sc411_entry;
         const 2;
         const 18;
 },
 sat_sc415_entry() //  [R1]
         { []
         }
     {offset
       cc53S: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc53W; else goto cc53X;
       cc53W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc53X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc52R_info;
           _sc40o::P64 = P64[R1 + 16];
           _sc40L::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sc40o::P64;
           P64[Sp - 24] = _sc40L::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc544; else goto cc52S;
       uc544: // global
           call _cc52R(R1) args: 0, res: 0, upd: 0;
       cc52S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc415_info" {
     sat_sc415_info:
         const sat_sc415_entry;
         const 3;
         const 15;
 },
 _cc52R() //  [R1]
         { []
         }
     {offset
       cc52R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc540; else goto cc53Z;
       cc540: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc53Z: // global
           _sc40N::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sc411_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cc53T_info;
           R4 = Hp - 24;
           R3 = _sc40N::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc52R_info" {
     block_cc52R_info:
         const _cc52R;
         const 2;
         const 30;
 },
 _cc53T() //  [R1, R2]
         { []
         }
     {offset
       cc53T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc543; else goto cc542;
       cc543: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc542: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc53T_info" {
     block_cc53T_info:
         const _cc53T;
         const 0;
         const 30;
 },
 sat_sc416_entry() //  [R1]
         { []
         }
     {offset
       cc549: // global
           _sc416::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc54a; else goto cc54b;
       cc54b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc54d; else goto cc54c;
       cc54d: // global
           HpAlloc = 32;
           goto cc54a;
       cc54a: // global
           R1 = _sc416::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc54c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc416::P64;
           _sc40j::P64 = P64[_sc416::P64 + 16];
           _sc40k::P64 = P64[_sc416::P64 + 24];
           _sc40n::P64 = P64[_sc416::P64 + 32];
           I64[Hp - 24] = s_sc40o_info;
           P64[Hp - 8] = _sc40k::P64;
           P64[Hp] = _sc40n::P64;
           I64[Sp - 32] = block_cc52H_info;
           R1 = _sc40j::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc54k; else goto cc52I;
       uc54k: // global
           call _cc52H(R1) args: 0, res: 0, upd: 0;
       cc52I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc416_info" {
     sat_sc416_info:
         const sat_sc416_entry;
         const 3;
         const 12884901903;
         const Sc4eo_srt;
 },
 _cc52H() //  [R1]
         { []
         }
     {offset
       cc52H: // global
           _cc50W::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc546; else goto cc547;
       cc546: // global
           R3 = _cc50W::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cc547: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc54j; else goto cc54i;
       cc54j: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc54i: // global
           _sc40K::P64 = P64[R1 + 6];
           _sc40L::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sc415_info;
           P64[Hp - 40] = _cc50W::P64;
           P64[Hp - 32] = _sc40K::P64;
           P64[Hp - 24] = _sc40L::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc52H_info" {
     block_cc52H_info:
         const _cc52H;
         const 1;
         const 30;
 },
 g_sc40m_entry() //  [R1, R2]
         { []
         }
     {offset
       cc54l: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc54p; else goto cc54o;
       cc54p: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc54o: // global
           _sc40j::P64 = P64[R1 + 7];
           _sc40k::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sc416_info;
           P64[Hp - 16] = _sc40j::P64;
           P64[Hp - 8] = _sc40k::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl_rc3Yz_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g_sc40m_info" {
     g_sc40m_info:
         const g_sc40m_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const Sc4eo_srt;
 },
 sat_sc418_entry() //  [R1]
         { []
         }
     {offset
       cc54x: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g_sc40m_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc418_info" {
     sat_sc418_info:
         const sat_sc418_entry;
         const 2;
         const 12884901906;
         const Sc4eo_srt;
 },
 sat_sc41a_entry() //  [R1]
         { []
         }
     {offset
       cc54K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc54O; else goto cc54N;
       cc54O: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc54N: // global
           _sc40l::P64 = P64[R1 + 16];
           _sc40m::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sc40l::P64;
           R2 = Hp - 14;
           R1 = _sc40m::P64;
           call g_sc40m_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc41a_info" {
     sat_sc41a_info:
         const sat_sc41a_entry;
         const 2;
         const 12884901906;
         const Sc4eo_srt;
 },
 sat_sc41b_entry() //  [R1]
         { []
         }
     {offset
       cc54P: // global
           _sc41b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc54Q; else goto cc54R;
       cc54R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc54T; else goto cc54S;
       cc54T: // global
           HpAlloc = 32;
           goto cc54Q;
       cc54Q: // global
           R1 = _sc41b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc54S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc41b::P64;
           _sc40l::P64 = P64[_sc41b::P64 + 16];
           _sc40m::P64 = P64[_sc41b::P64 + 24];
           I64[Hp - 24] = sat_sc41a_info;
           P64[Hp - 8] = _sc40l::P64;
           P64[Hp] = _sc40m::P64;
           R3 = Hp - 24;
           R2 = f1_rc3Yy_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc41b_info" {
     sat_sc41b_info:
         const sat_sc41b_entry;
         const 2;
         const 30064771090;
         const Sc4eo_srt;
 },
 Data.Version.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc54X: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cc551; else goto cc550;
       cc551: // global
           HpAlloc = 80;
           R1 = Data.Version.$w$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cc550: // global
           I64[Hp - 72] = g_sc40m_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           _cc50N::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto cc54V; else goto cc54W;
       cc54V: // global
           I64[Hp - 48] = sat_sc418_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _cc50N::P64;
           _cc54t::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cc54t::P64;
           R2 = f1_rc3Yy_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cc54W: // global
           I64[Hp - 48] = sat_sc41b_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _cc50N::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$cshowsPrec_info" {
     Data.Version.$w$cshowsPrec_info:
         const Data.Version.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 17179869184;
         const Sc4eo_srt;
         const 68;
         const Data.Version.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.426439106 UTC

[section ""data" . Data.Version.$fShowVersion_$cshowsPrec_closure" {
     Data.Version.$fShowVersion_$cshowsPrec_closure:
         const Data.Version.$fShowVersion_$cshowsPrec_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc57m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc57q; else goto cc57r;
       cc57q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fShowVersion_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc57r: // global
           I64[Sp - 24] = block_cc57j_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc57z; else goto cc57k;
       uc57z: // global
           call _cc57j(R1) args: 0, res: 0, upd: 0;
       cc57k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshowsPrec_info" {
     Data.Version.$fShowVersion_$cshowsPrec_info:
         const Data.Version.$fShowVersion_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sc4eo_srt+24;
 },
 _cc57j() //  [R1]
         { []
         }
     {offset
       cc57j: // global
           I64[Sp] = block_cc57p_info;
           _sc41g::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc41g::I64;
           if (R1 & 7 != 0) goto uc57y; else goto cc57t;
       uc57y: // global
           call _cc57p(R1) args: 0, res: 0, upd: 0;
       cc57t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc57j_info" {
     block_cc57j_info:
         const _cc57j;
         const 2;
         const 4294967326;
         const Sc4eo_srt+24;
 },
 _cc57p() //  [R1]
         { []
         }
     {offset
       cc57p: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc57p_info" {
     block_cc57p_info:
         const _cc57p;
         const 66;
         const 4294967326;
         const Sc4eo_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.432773195 UTC

[section ""data" . Data.Version.$fShowVersion2_closure" {
     Data.Version.$fShowVersion2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.435139608 UTC

[section ""data" . Data.Version.$fShowVersion_$cshow_closure" {
     Data.Version.$fShowVersion_$cshow_closure:
         const Data.Version.$fShowVersion_$cshow_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cc57V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc57W; else goto cc57X;
       cc57W: // global
           R2 = R2;
           R1 = Data.Version.$fShowVersion_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc57X: // global
           I64[Sp - 8] = block_cc57S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc581; else goto cc57T;
       uc581: // global
           call _cc57S(R1) args: 0, res: 0, upd: 0;
       cc57T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshow_info" {
     Data.Version.$fShowVersion_$cshow_info:
         const Data.Version.$fShowVersion_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sc4eo_srt+24;
 },
 _cc57S() //  [R1]
         { []
         }
     {offset
       cc57S: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc57S_info" {
     block_cc57S_info:
         const _cc57S;
         const 0;
         const 4294967326;
         const Sc4eo_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.440446304 UTC

[section ""data" . Data.Version.$fShowVersion1_closure" {
     Data.Version.$fShowVersion1_closure:
         const Data.Version.$fShowVersion1_info;
         const 0;
 },
 Data.Version.$fShowVersion1_entry() //  [R2, R3]
         { []
         }
     {offset
       cc58i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc58j; else goto cc58k;
       cc58j: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fShowVersion1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc58k: // global
           I64[Sp - 16] = block_cc58f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc58o; else goto cc58g;
       uc58o: // global
           call _cc58f(R1) args: 0, res: 0, upd: 0;
       cc58g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion1_info" {
     Data.Version.$fShowVersion1_info:
         const Data.Version.$fShowVersion1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc4eo_srt+24;
 },
 _cc58f() //  [R1]
         { []
         }
     {offset
       cc58f: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc58f_info" {
     block_cc58f_info:
         const _cc58f;
         const 1;
         const 4294967326;
         const Sc4eo_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.44628309 UTC

[section ""data" . Data.Version.$fShowVersion_$cshowList_closure" {
     Data.Version.$fShowVersion_$cshowList_closure:
         const Data.Version.$fShowVersion_$cshowList_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cc58C: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Version.$fShowVersion1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshowList_info" {
     Data.Version.$fShowVersion_$cshowList_info:
         const Data.Version.$fShowVersion_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sc4eo_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.449286576 UTC

[section ""data" . Data.Version.$fShowVersion_closure" {
     Data.Version.$fShowVersion_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Version.$fShowVersion_$cshowsPrec_closure+3;
         const Data.Version.$fShowVersion_$cshow_closure+1;
         const Data.Version.$fShowVersion_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.450941938 UTC

[section ""data" . f2_rc3YB_closure" {
     f2_rc3YB_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.452574164 UTC

[section ""cstring" . Data.Version.showVersion2_bytes" {
     Data.Version.showVersion2_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.454717434 UTC

[section ""data" . Data.Version.showVersion1_closure" {
     Data.Version.showVersion1_closure:
         const Data.Version.showVersion1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.showVersion1_entry() //  [R1]
         { []
         }
     {offset
       cc58S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc58T; else goto cc58U;
       cc58T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc58U: // global
           (_cc58P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc58P::I64 == 0) goto cc58R; else goto cc58Q;
       cc58R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc58Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc58P::I64;
           R2 = Data.Version.showVersion2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.showVersion1_info" {
     Data.Version.showVersion1_info:
         const Data.Version.showVersion1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.459740936 UTC

[section ""data" . Data.Version.showVersion_go_closure" {
     Data.Version.showVersion_go_closure:
         const Data.Version.showVersion_go_info;
 },
 sat_sc41A_entry() //  [R1]
         { []
         }
     {offset
       cc59g: // global
           R2 = P64[R1 + 16];
           call Data.Version.showVersion_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc41A_info" {
     sat_sc41A_info:
         const sat_sc41A_entry;
         const 1;
         const 16;
 },
 Data.Version.showVersion_go_entry() //  [R2]
         { []
         }
     {offset
       cc59n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc59o; else goto cc59p;
       cc59o: // global
           R2 = R2;
           R1 = Data.Version.showVersion_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc59p: // global
           I64[Sp - 8] = block_cc596_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc59w; else goto cc597;
       uc59w: // global
           call _cc596(R1) args: 0, res: 0, upd: 0;
       cc597: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.showVersion_go_info" {
     Data.Version.showVersion_go_info:
         const Data.Version.showVersion_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc596() //  [R1]
         { []
         }
     {offset
       cc596: // global
           if (R1 & 7 == 1) goto cc59k; else goto cc59l;
       cc59k: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc59l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc59v; else goto cc59u;
       cc59v: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc59u: // global
           _sc41x::P64 = P64[R1 + 6];
           _sc41y::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_sc41A_info;
           P64[Hp - 24] = _sc41y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = f2_rc3YB_closure+1;
           P64[Hp] = _sc41x::P64;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc596_info" {
     block_cc596_info:
         const _cc596;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.469055815 UTC

[section ""data" . Data.Version.$wshowVersion_closure" {
     Data.Version.$wshowVersion_closure:
         const Data.Version.$wshowVersion_info;
         const 0;
 },
 arg_sc41D_entry() //  [R1]
         { []
         }
     {offset
       cc59U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc59V; else goto cc59W;
       cc59V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc59W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Version.showVersion_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . arg_sc41D_info" {
     arg_sc41D_info:
         const arg_sc41D_entry;
         const 1;
         const 16;
 },
 sat_sc41M_entry() //  [R1]
         { []
         }
     {offset
       cc5ah: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_sc41H_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc41M_info" {
     sat_sc41M_info:
         const sat_sc41M_entry;
         const 2;
         const 18;
 },
 go_sc41H_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5ao: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5ap; else goto cc5aq;
       cc5ap: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5aq: // global
           I64[Sp - 24] = block_cc5a7_info;
           _sc41H::P64 = R1;
           _sc41D::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc41D::P64;
           P64[Sp - 8] = _sc41H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc5aw; else goto cc5a8;
       uc5aw: // global
           call _cc5a7(R1) args: 0, res: 0, upd: 0;
       cc5a8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc41H_info" {
     go_sc41H_info:
         const go_sc41H_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5a7() //  [R1]
         { []
         }
     {offset
       cc5a7: // global
           if (R1 & 7 == 1) goto cc5al; else goto cc5am;
       cc5al: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5am: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5av; else goto cc5au;
       cc5av: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5au: // global
           _sc41K::P64 = P64[R1 + 6];
           _sc41L::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sc41M_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc41L::P64;
           R3 = Hp - 24;
           R2 = _sc41K::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5a7_info" {
     block_cc5a7_info:
         const _cc5a7;
         const 2;
         const 30;
 },
 sat_sc41N_entry() //  [R1]
         { []
         }
     {offset
       cc5aB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5aC; else goto cc5aD;
       cc5aC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5aD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.showVersion1_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc41N_info" {
     sat_sc41N_info:
         const sat_sc41N_entry;
         const 1;
         const 4294967312;
         const Sc4eo_srt+56;
 },
 Data.Version.$wshowVersion_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5aI: // global
           _sc41C::P64 = R3;
           _sc41B::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5aJ; else goto cc5aK;
       cc5aK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5aM; else goto cc5aL;
       cc5aM: // global
           HpAlloc = 24;
           goto cc5aJ;
       cc5aJ: // global
           R3 = _sc41C::P64;
           R2 = _sc41B::P64;
           R1 = Data.Version.$wshowVersion_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5aL: // global
           I64[Hp - 16] = arg_sc41D_info;
           P64[Hp] = _sc41C::P64;
           I64[Sp - 16] = block_cc59X_info;
           R3 = _sc41B::P64;
           R2 = GHC.Show.$fShowInt_$cshow_closure+1;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wshowVersion_info" {
     Data.Version.$wshowVersion_info:
         const Data.Version.$wshowVersion_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc4eo_srt+56;
 },
 _cc59X() //  [R1]
         { []
         }
     {offset
       cc59X: // global
           _cc59Q::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc5aF; else goto cc5aG;
       cc5aF: // global
           R1 = _cc59Q::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5aG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc5aS; else goto cc5aR;
       cc5aS: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5aR: // global
           _sc41F::P64 = P64[R1 + 6];
           _sc41G::P64 = P64[R1 + 14];
           I64[Hp - 56] = go_sc41H_info;
           P64[Hp - 48] = _cc59Q::P64;
           I64[Hp - 40] = sat_sc41N_info;
           P64[Hp - 24] = _sc41G::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc41F::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call go_sc41H_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc59X_info" {
     block_cc59X_info:
         const _cc59X;
         const 1;
         const 4294967326;
         const Sc4eo_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.483832175 UTC

[section ""data" . Data.Version.showVersion_closure" {
     Data.Version.showVersion_closure:
         const Data.Version.showVersion_info;
         const 0;
 },
 Data.Version.showVersion_entry() //  [R2]
         { []
         }
     {offset
       cc5bC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5bD; else goto cc5bE;
       cc5bD: // global
           R2 = R2;
           R1 = Data.Version.showVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5bE: // global
           I64[Sp - 8] = block_cc5bz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5bI; else goto cc5bA;
       uc5bI: // global
           call _cc5bz(R1) args: 0, res: 0, upd: 0;
       cc5bA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.showVersion_info" {
     Data.Version.showVersion_info:
         const Data.Version.showVersion_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc4eo_srt+64;
 },
 _cc5bz() //  [R1]
         { []
         }
     {offset
       cc5bz: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Version.$wshowVersion_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5bz_info" {
     block_cc5bz_info:
         const _cc5bz;
         const 0;
         const 4294967326;
         const Sc4eo_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.488931198 UTC

[section ""data" . Data.Version.$fReadVersion18_closure" {
     Data.Version.$fReadVersion18_closure:
         const Data.Version.$fReadVersion18_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion18_entry() //  [R1]
         { []
         }
     {offset
       cc5bY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5bZ; else goto cc5c0;
       cc5bZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5c0: // global
           (_cc5bV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5bV::I64 == 0) goto cc5bX; else goto cc5bW;
       cc5bX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5bW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5bV::I64;
           R2 = Data.Version.$fReadVersion19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion18_info" {
     Data.Version.$fReadVersion18_info:
         const Data.Version.$fReadVersion18_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.492486011 UTC

[section ""data" . Data.Version.$fReadVersion_lexeme1_closure" {
     Data.Version.$fReadVersion_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Version.$fReadVersion18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.494135183 UTC

[section ""cstring" . Data.Version.$fReadVersion17_bytes" {
     Data.Version.$fReadVersion17_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.496285064 UTC

[section ""data" . Data.Version.$fReadVersion16_closure" {
     Data.Version.$fReadVersion16_closure:
         const Data.Version.$fReadVersion16_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion16_entry() //  [R1]
         { []
         }
     {offset
       cc5cg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5ch; else goto cc5ci;
       cc5ch: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5ci: // global
           (_cc5cd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5cd::I64 == 0) goto cc5cf; else goto cc5ce;
       cc5cf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5ce: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5cd::I64;
           R2 = Data.Version.$fReadVersion17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion16_info" {
     Data.Version.$fReadVersion16_info:
         const Data.Version.$fReadVersion16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.500225699 UTC

[section ""data" . Data.Version.$fReadVersion_lexeme_closure" {
     Data.Version.$fReadVersion_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion16_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.501847127 UTC

[section ""cstring" . Data.Version.$fReadVersion15_bytes" {
     Data.Version.$fReadVersion15_bytes:
         I8[] [118,101,114,115,105,111,110,66,114,97,110,99,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.503955412 UTC

[section ""data" . Data.Version.$fReadVersion14_closure" {
     Data.Version.$fReadVersion14_closure:
         const Data.Version.$fReadVersion14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion14_entry() //  [R1]
         { []
         }
     {offset
       cc5cy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5cz; else goto cc5cA;
       cc5cz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5cA: // global
           (_cc5cv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5cv::I64 == 0) goto cc5cx; else goto cc5cw;
       cc5cx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5cw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5cv::I64;
           R2 = Data.Version.$fReadVersion15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion14_info" {
     Data.Version.$fReadVersion14_info:
         const Data.Version.$fReadVersion14_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.507872959 UTC

[section ""data" . Data.Version.$fReadVersion13_closure" {
     Data.Version.$fReadVersion13_closure:
         const Data.Version.$fReadVersion13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion13_entry() //  [R1]
         { []
         }
     {offset
       cc5cO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5cP; else goto cc5cQ;
       cc5cP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5cQ: // global
           (_cc5cL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5cL::I64 == 0) goto cc5cN; else goto cc5cM;
       cc5cN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5cM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5cL::I64;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion13_info" {
     Data.Version.$fReadVersion13_info:
         const Data.Version.$fReadVersion13_entry;
         const 0;
         const 4294967317;
         const Sc4eo_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.512299673 UTC

[section ""data" . Data.Version.$fReadVersion12_closure" {
     Data.Version.$fReadVersion12_closure:
         const Data.Version.$fReadVersion12_info;
         const 0;
 },
 Data.Version.$fReadVersion12_entry() //  []
         { []
         }
     {offset
       cc5d2: // global
           R1 = Data.Version.$fReadVersion13_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion12_info" {
     Data.Version.$fReadVersion12_info:
         const Data.Version.$fReadVersion12_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc4eo_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.515247008 UTC

[section ""data" . Data.Version.$fReadVersion_n_closure" {
     Data.Version.$fReadVersion_n_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.516833336 UTC

[section ""cstring" . Data.Version.$fReadVersion11_bytes" {
     Data.Version.$fReadVersion11_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.518967322 UTC

[section ""data" . Data.Version.$fReadVersion10_closure" {
     Data.Version.$fReadVersion10_closure:
         const Data.Version.$fReadVersion10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion10_entry() //  [R1]
         { []
         }
     {offset
       cc5dh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5di; else goto cc5dj;
       cc5di: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5dj: // global
           (_cc5de::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5de::I64 == 0) goto cc5dg; else goto cc5df;
       cc5dg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5df: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5de::I64;
           R2 = Data.Version.$fReadVersion11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion10_info" {
     Data.Version.$fReadVersion10_info:
         const Data.Version.$fReadVersion10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.522445118 UTC

[section ""data" . Data.Version.$fReadVersion9_closure" {
     Data.Version.$fReadVersion9_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.524049692 UTC

[section ""cstring" . Data.Version.$fReadVersion8_bytes" {
     Data.Version.$fReadVersion8_bytes:
         I8[] [118,101,114,115,105,111,110,84,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.526544011 UTC

[section ""data" . Data.Version.$fReadVersion7_closure" {
     Data.Version.$fReadVersion7_closure:
         const Data.Version.$fReadVersion7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion7_entry() //  [R1]
         { []
         }
     {offset
       cc5dz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5dA; else goto cc5dB;
       cc5dA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5dB: // global
           (_cc5dw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5dw::I64 == 0) goto cc5dy; else goto cc5dx;
       cc5dy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5dx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5dw::I64;
           R2 = Data.Version.$fReadVersion8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion7_info" {
     Data.Version.$fReadVersion7_info:
         const Data.Version.$fReadVersion7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.530235057 UTC

[section ""data" . Data.Version.$fReadVersion6_closure" {
     Data.Version.$fReadVersion6_closure:
         const Data.Version.$fReadVersion6_info;
         const 0;
 },
 Data.Version.$fReadVersion6_entry() //  []
         { []
         }
     {offset
       cc5dN: // global
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion6_info" {
     Data.Version.$fReadVersion6_info:
         const Data.Version.$fReadVersion6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc4eo_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.533784675 UTC

[section ""data" . Data.Version.$fReadVersion4_closure" {
     Data.Version.$fReadVersion4_closure:
         const Data.Version.$fReadVersion4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion4_entry() //  [R1]
         { []
         }
     {offset
       cc5e0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5e1; else goto cc5e2;
       cc5e1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5e2: // global
           (_cc5dX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5dX::I64 == 0) goto cc5dZ; else goto cc5dY;
       cc5dZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5dY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5dX::I64;
           R2 = Data.Version.$fReadVersion5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion4_info" {
     Data.Version.$fReadVersion4_info:
         const Data.Version.$fReadVersion4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.53716253 UTC

[section ""data" . Data.Version.$fReadVersion3_closure" {
     Data.Version.$fReadVersion3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.544648241 UTC

[section ""data" . Data.Version.$w$creadPrec_closure" {
     Data.Version.$w$creadPrec_closure:
         const Data.Version.$w$creadPrec_info;
         const 0;
 },
 sat_sc425_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5eO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5eS; else goto cc5eR;
       cc5eS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5eR: // global
           _sc41W::P64 = P64[R1 + 7];
           _sc420::P64 = P64[R1 + 15];
           _sc422::P64 = P64[R1 + 23];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc420::P64;
           P64[Hp] = _sc422::P64;
           R2 = Hp - 15;
           R1 = _sc41W::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc425_info" {
     sat_sc425_info:
         const sat_sc425_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sc428_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5eW: // global
           _sc422::P64 = R2;
           _sc428::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5eX; else goto cc5eY;
       cc5eY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5f0; else goto cc5eZ;
       cc5f0: // global
           HpAlloc = 32;
           goto cc5eX;
       cc5eX: // global
           R2 = _sc422::P64;
           R1 = _sc428::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5eZ: // global
           _sc41W::P64 = P64[_sc428::P64 + 7];
           _sc420::P64 = P64[_sc428::P64 + 15];
           I64[Hp - 24] = sat_sc425_info;
           P64[Hp - 16] = _sc41W::P64;
           P64[Hp - 8] = _sc420::P64;
           P64[Hp] = _sc422::P64;
           I64[Sp - 8] = block_cc5eT_info;
           R3 = Hp - 23;
           R2 = Data.Version.$fReadVersion3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc428_info" {
     sat_sc428_info:
         const sat_sc428_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const Sc4eo_srt+104;
 },
 _cc5eT() //  [R1]
         { []
         }
     {offset
       cc5eT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5f3; else goto cc5f2;
       cc5f3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5f2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5eT_info" {
     block_cc5eT_info:
         const _cc5eT;
         const 0;
         const 30;
 },
 sat_sc429_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5f4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5f8; else goto cc5f7;
       cc5f8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5f7: // global
           _sc41W::P64 = P64[R1 + 7];
           _sc420::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sc428_info;
           P64[Hp - 8] = _sc41W::P64;
           P64[Hp] = _sc420::P64;
           R5 = Hp - 15;
           R4 = Data.Version.$fReadVersion_n_closure+1;
           R3 = Data.Version.$fReadVersion6_closure+1;
           R2 = Data.Version.$fReadVersion7_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc429_info" {
     sat_sc429_info:
         const sat_sc429_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const Sc4eo_srt+104;
 },
 sat_sc42c_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5fc: // global
           _sc420::P64 = R2;
           _sc42c::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5fd; else goto cc5fe;
       cc5fe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5fg; else goto cc5ff;
       cc5fg: // global
           HpAlloc = 24;
           goto cc5fd;
       cc5fd: // global
           R2 = _sc420::P64;
           R1 = _sc42c::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5ff: // global
           _sc41W::P64 = P64[_sc42c::P64 + 7];
           I64[Hp - 16] = sat_sc429_info;
           P64[Hp - 8] = _sc41W::P64;
           P64[Hp] = _sc420::P64;
           I64[Sp - 8] = block_cc5f9_info;
           R3 = Hp - 15;
           R2 = Data.Version.$fReadVersion9_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42c_info" {
     sat_sc42c_info:
         const sat_sc42c_entry;
         const 1;
         const 270582939657;
         const 4294967301;
         const Sc4eo_srt+104;
 },
 _cc5f9() //  [R1]
         { []
         }
     {offset
       cc5f9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fj; else goto cc5fi;
       cc5fj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5fi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5f9_info" {
     block_cc5f9_info:
         const _cc5f9;
         const 0;
         const 30;
 },
 sat_sc42d_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5fk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fo; else goto cc5fn;
       cc5fo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5fn: // global
           _sc41W::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_sc42c_info;
           P64[Hp] = _sc41W::P64;
           R5 = Hp - 7;
           R4 = Data.Version.$fReadVersion_n_closure+1;
           R3 = Data.Version.$fReadVersion12_closure+1;
           R2 = Data.Version.$fReadVersion14_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42d_info" {
     sat_sc42d_info:
         const sat_sc42d_entry;
         const 1;
         const 1095216660489;
         const 4294967301;
         const Sc4eo_srt+104;
 },
 sat_sc42g_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5fs: // global
           _sc41Y::P64 = R2;
           _sc42g::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5ft; else goto cc5fu;
       cc5fu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fw; else goto cc5fv;
       cc5fw: // global
           HpAlloc = 16;
           goto cc5ft;
       cc5ft: // global
           R2 = _sc41Y::P64;
           R1 = _sc42g::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5fv: // global
           _sc41W::P64 = P64[_sc42g::P64 + 7];
           I64[Hp - 8] = sat_sc42d_info;
           P64[Hp] = _sc41W::P64;
           I64[Sp - 8] = block_cc5fp_info;
           R3 = Hp - 7;
           R2 = Data.Version.$fReadVersion_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42g_info" {
     sat_sc42g_info:
         const sat_sc42g_entry;
         const 1;
         const 2194728288265;
         const 4294967301;
         const Sc4eo_srt+104;
 },
 _cc5fp() //  [R1]
         { []
         }
     {offset
       cc5fp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fz; else goto cc5fy;
       cc5fz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5fy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5fp_info" {
     block_cc5fp_info:
         const _cc5fp;
         const 0;
         const 30;
 },
 Data.Version.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5fD: // global
           _sc41W::P64 = R3;
           _sc41V::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5fE; else goto cc5fF;
       cc5fF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fH; else goto cc5fG;
       cc5fH: // global
           HpAlloc = 16;
           goto cc5fE;
       cc5fE: // global
           R3 = _sc41W::P64;
           R2 = _sc41V::I64;
           R1 = Data.Version.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5fG: // global
           if (%MO_S_Gt_W64(_sc41V::I64, 11)) goto cc5fB; else goto cc5fC;
       cc5fB: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5fC: // global
           I64[Hp - 8] = sat_sc42g_info;
           P64[Hp] = _sc41W::P64;
           I64[Sp - 8] = block_cc5fI_info;
           R3 = Hp - 7;
           R2 = Data.Version.$fReadVersion_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$creadPrec_info" {
     Data.Version.$w$creadPrec_info:
         const Data.Version.$w$creadPrec_entry;
         const 0;
         const 8791798054926;
         const 8589934605;
         const Sc4eo_srt+104;
 },
 _cc5fI() //  [R1]
         { []
         }
     {offset
       cc5fI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5fN; else goto cc5fM;
       cc5fN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5fM: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5fI_info" {
     block_cc5fI_info:
         const _cc5fI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.566044778 UTC

[section ""data" . Data.Version.$fReadVersion2_closure" {
     Data.Version.$fReadVersion2_closure:
         const Data.Version.$fReadVersion2_info;
         const 0;
 },
 Data.Version.$fReadVersion2_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5gC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5gD; else goto cc5gE;
       cc5gD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fReadVersion2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5gE: // global
           I64[Sp - 16] = block_cc5gz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5gI; else goto cc5gA;
       uc5gI: // global
           call _cc5gz(R1) args: 0, res: 0, upd: 0;
       cc5gA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion2_info" {
     Data.Version.$fReadVersion2_info:
         const Data.Version.$fReadVersion2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc4eo_srt+176;
 },
 _cc5gz() //  [R1]
         { []
         }
     {offset
       cc5gz: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Version.$w$creadPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5gz_info" {
     block_cc5gz_info:
         const _cc5gz;
         const 1;
         const 4294967326;
         const Sc4eo_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.571077119 UTC

[section ""data" . Data.Version.$fReadVersion1_closure" {
     Data.Version.$fReadVersion1_closure:
         const Data.Version.$fReadVersion1_info;
         const 0;
 },
 Data.Version.$fReadVersion1_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5gW: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Version.$fReadVersion2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion1_info" {
     Data.Version.$fReadVersion1_info:
         const Data.Version.$fReadVersion1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc4eo_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.574912383 UTC

[section ""data" . Data.Version.$fReadVersion_$creadsPrec_closure" {
     Data.Version.$fReadVersion_$creadsPrec_closure:
         const Data.Version.$fReadVersion_$creadsPrec_info;
         const 0;
 },
 sat_sc42o_entry() //  [R1]
         { []
         }
     {offset
       cc5hb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5hc; else goto cc5hd;
       cc5hc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5hd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.$fReadVersion2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc42o_info" {
     sat_sc42o_info:
         const sat_sc42o_entry;
         const 1;
         const 12884901904;
         const Sc4eo_srt+192;
 },
 Data.Version.$fReadVersion_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cc5he: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5hi; else goto cc5hh;
       cc5hi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Version.$fReadVersion_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5hh: // global
           I64[Hp - 16] = sat_sc42o_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadsPrec_info" {
     Data.Version.$fReadVersion_$creadsPrec_info:
         const Data.Version.$fReadVersion_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const Sc4eo_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.581224968 UTC

[section ""data" . Data.Version.$fReadVersion_$creadListPrec_closure" {
     Data.Version.$fReadVersion_$creadListPrec_closure:
         const Data.Version.$fReadVersion_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       cc5hx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5hy; else goto cc5hz;
       cc5hy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5hz: // global
           (_cc5hu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5hu::I64 == 0) goto cc5hw; else goto cc5hv;
       cc5hw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5hv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5hu::I64;
           R2 = Data.Version.$fReadVersion1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadListPrec_info" {
     Data.Version.$fReadVersion_$creadListPrec_info:
         const Data.Version.$fReadVersion_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const Sc4eo_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.585190461 UTC

[section ""data" . Data.Version.$fReadVersion20_closure" {
     Data.Version.$fReadVersion20_closure:
         const Data.Version.$fReadVersion20_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion20_entry() //  [R1]
         { []
         }
     {offset
       cc5hN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5hO; else goto cc5hP;
       cc5hO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5hP: // global
           (_cc5hK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5hK::I64 == 0) goto cc5hM; else goto cc5hL;
       cc5hM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5hL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5hK::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Version.$fReadVersion_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion20_info" {
     Data.Version.$fReadVersion20_info:
         const Data.Version.$fReadVersion20_entry;
         const 0;
         const 4294967317;
         const Sc4eo_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.588908308 UTC

[section ""data" . Data.Version.$fReadVersion_$creadList_closure" {
     Data.Version.$fReadVersion_$creadList_closure:
         const Data.Version.$fReadVersion_$creadList_info;
         const 0;
 },
 Data.Version.$fReadVersion_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cc5i1: // global
           R3 = R2;
           R2 = Data.Version.$fReadVersion20_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadList_info" {
     Data.Version.$fReadVersion_$creadList_info:
         const Data.Version.$fReadVersion_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc4eo_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.592196702 UTC

[section ""data" . Data.Version.$fReadVersion_closure" {
     Data.Version.$fReadVersion_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Version.$fReadVersion_$creadsPrec_closure+1;
         const Data.Version.$fReadVersion_$creadList_closure+1;
         const Data.Version.$fReadVersion1_closure+2;
         const Data.Version.$fReadVersion_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.594429977 UTC

[section ""data" . Data.Version.parseVersion5_closure" {
     Data.Version.parseVersion5_closure:
         const Data.Version.parseVersion5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion5_entry() //  [R1]
         { []
         }
     {offset
       cc5if: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5ig; else goto cc5ih;
       cc5ig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5ih: // global
           (_cc5ic::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5ic::I64 == 0) goto cc5ie; else goto cc5id;
       cc5ie: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5id: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5ic::I64;
           R2 = Text.Read.readEither5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion5_info" {
     Data.Version.parseVersion5_info:
         const Data.Version.parseVersion5_entry;
         const 0;
         const 12884901909;
         const Sc4eo_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.598400162 UTC

[section ""data" . Data.Version.parseVersion4_closure" {
     Data.Version.parseVersion4_closure:
         const Data.Version.parseVersion4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion4_entry() //  [R1]
         { []
         }
     {offset
       cc5iv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5iw; else goto cc5ix;
       cc5iw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5ix: // global
           (_cc5is::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5is::I64 == 0) goto cc5iu; else goto cc5it;
       cc5iu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5it: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5is::I64;
           R2 = Text.Read.readEither2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion4_info" {
     Data.Version.parseVersion4_info:
         const Data.Version.parseVersion4_entry;
         const 0;
         const 21474836501;
         const Sc4eo_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.60232474 UTC

[section ""data" . Data.Version.parseVersion6_closure" {
     Data.Version.parseVersion6_closure:
         const Data.Version.parseVersion6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion6_entry() //  [R1]
         { []
         }
     {offset
       cc5iL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5iM; else goto cc5iN;
       cc5iM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5iN: // global
           (_cc5iI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5iI::I64 == 0) goto cc5iK; else goto cc5iJ;
       cc5iK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5iJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5iI::I64;
           R4 = Text.Read.readEither7_closure+1;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion6_info" {
     Data.Version.parseVersion6_info:
         const Data.Version.parseVersion6_entry;
         const 0;
         const 12884901909;
         const Sc4eo_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.609787965 UTC

[section ""data" . Data.Version.$wp_closure" {
     Data.Version.$wp_closure:
         const Data.Version.$wp_info;
         const 0;
 },
 sat_sc42G_entry() //  [R1]
         { []
         }
     {offset
       cc5jy: // global
           _sc42G::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc5jz; else goto cc5jA;
       cc5jA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5jC; else goto cc5jB;
       cc5jC: // global
           HpAlloc = 24;
           goto cc5jz;
       cc5jz: // global
           R1 = _sc42G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5jB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc42G::P64;
           _sc42r::P64 = P64[_sc42G::P64 + 16];
           _sc42x::P64 = P64[_sc42G::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc42r::P64;
           P64[Hp] = _sc42x::P64;
           I64[Sp - 24] = block_cc5jw_info;
           R3 = Hp - 14;
           R2 = Data.Version.parseVersion6_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc42G_info" {
     sat_sc42G_info:
         const sat_sc42G_entry;
         const 2;
         const 30064771090;
         const Sc4eo_srt+288;
 },
 _cc5jw() //  [R1]
         { []
         }
     {offset
       cc5jw: // global
           I64[Sp] = block_cc5jF_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5jw_info" {
     block_cc5jw_info:
         const _cc5jw;
         const 0;
         const 12884901918;
         const Sc4eo_srt+288;
 },
 _cc5jF() //  [R1]
         { []
         }
     {offset
       cc5jF: // global
           if (R1 & 7 == 1) goto cc5jM; else goto cc5jR;
       cc5jM: // global
           R1 = Data.Version.parseVersion5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc5jR: // global
           I64[Sp - 8] = block_cc5jP_info;
           _sc42B::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sc42B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5k5; else goto cc5jS;
       uc5k5: // global
           call _cc5jP(R1) args: 0, res: 0, upd: 0;
       cc5jS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5jF_info" {
     block_cc5jF_info:
         const _cc5jF;
         const 0;
         const 12884901918;
         const Sc4eo_srt+288;
 },
 _cc5jP() //  [R1]
         { []
         }
     {offset
       cc5jP: // global
           if (R1 & 7 == 1) goto cc5jY; else goto cc5k2;
       cc5jY: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc5k2: // global
           R1 = Data.Version.parseVersion4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5jP_info" {
     block_cc5jP_info:
         const _cc5jP;
         const 1;
         const 4294967326;
         const Sc4eo_srt+288;
 },
 sat_sc42H_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5k6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5ka; else goto cc5k9;
       cc5ka: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5k9: // global
           _sc42p::P64 = P64[R1 + 7];
           _sc42r::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sc42G_info;
           P64[Hp - 8] = _sc42r::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sc42p::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42H_info" {
     sat_sc42H_info:
         const sat_sc42H_entry;
         const 2;
         const 30064771083;
         const 4294967301;
         const Sc4eo_srt+288;
 },
 sat_sc42K_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5kb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5kc; else goto cc5kd;
       cc5kc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5kd: // global
           I64[Sp - 16] = block_cc5j4_info;
           _sc42p::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc42p::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5kq; else goto cc5j5;
       uc5kq: // global
           call _cc5j4(R1) args: 0, res: 0, upd: 0;
       cc5j5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42K_info" {
     sat_sc42K_info:
         const sat_sc42K_entry;
         const 1;
         const 30064771081;
         const 4294967301;
         const Sc4eo_srt+288;
 },
 _cc5j4() //  [R1]
         { []
         }
     {offset
       cc5j4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5kg; else goto cc5kf;
       cc5kg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5kf: // global
           if (I64[R1 + 7] - 48 > 9) goto cc5ki; else goto cc5km;
       cc5ki: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5km: // global
           I64[Hp - 16] = sat_sc42H_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc5kj_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5j4_info" {
     block_cc5j4_info:
         const _cc5j4;
         const 1;
         const 30064771102;
         const Sc4eo_srt+288;
 },
 _cc5kj() //  [R1]
         { []
         }
     {offset
       cc5kj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5kp; else goto cc5ko;
       cc5kp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5ko: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5kj_info" {
     block_cc5kj_info:
         const _cc5kj;
         const 0;
         const 30;
 },
 Data.Version.$wp_entry() //  [R2]
         { []
         }
     {offset
       cc5kr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5kv; else goto cc5ku;
       cc5kv: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Version.$wp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5ku: // global
           I64[Hp - 8] = sat_sc42K_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wp_info" {
     Data.Version.$wp_info:
         const Data.Version.$wp_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const Sc4eo_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.627738597 UTC

[section ""data" . Data.Version.parseVersion3_closure" {
     Data.Version.parseVersion3_closure:
         const Data.Version.parseVersion3_info;
         const 0;
 },
 Data.Version.parseVersion3_entry() //  [R2]
         { []
         }
     {offset
       cc5ln: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5lo; else goto cc5lp;
       cc5lo: // global
           R2 = R2;
           R1 = Data.Version.parseVersion3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5lp: // global
           I64[Sp - 8] = block_cc5lk_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wp_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion3_info" {
     Data.Version.parseVersion3_info:
         const Data.Version.parseVersion3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc4eo_srt+312;
 },
 _cc5lk() //  [R1]
         { []
         }
     {offset
       cc5lk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5ls; else goto cc5lr;
       cc5ls: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5lr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5lk_info" {
     block_cc5lk_info:
         const _cc5lk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.634529917 UTC

[section ""data" . Data.Version.parseVersion_m2_closure" {
     Data.Version.parseVersion_m2_closure:
         const Data.Version.parseVersion_m2_info;
         const 0;
 },
 lvl4_sc42P_entry() //  [R1]
         { []
         }
     {offset
       cc5lN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5lO; else goto cc5lP;
       cc5lO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5lP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc5lK_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Version.$wp_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_sc42P_info" {
     lvl4_sc42P_info:
         const lvl4_sc42P_entry;
         const 1;
         const 4294967312;
         const Sc4eo_srt+312;
 },
 _cc5lK() //  [R1]
         { []
         }
     {offset
       cc5lK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5lS; else goto cc5lR;
       cc5lS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc5lR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5lK_info" {
     block_cc5lK_info:
         const _cc5lK;
         const 0;
         const 30;
 },
 sat_sc42W_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5m1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5m2; else goto cc5m3;
       cc5m2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5m3: // global
           I64[Sp - 16] = block_cc5lY_info;
           _sc42P::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc42P::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5mb; else goto cc5lZ;
       uc5mb: // global
           call _cc5lY(R1) args: 0, res: 0, upd: 0;
       cc5lZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc42W_info" {
     sat_sc42W_info:
         const sat_sc42W_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5lY() //  [R1]
         { []
         }
     {offset
       cc5lY: // global
           if (I64[R1 + 7] == 46) goto cc5ma; else goto cc5m9;
       cc5ma: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5m9: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5lY_info" {
     block_cc5lY_info:
         const _cc5lY;
         const 1;
         const 30;
 },
 Data.Version.parseVersion_m2_entry() //  [R2]
         { []
         }
     {offset
       cc5md: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc5mh; else goto cc5mg;
       cc5mh: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Version.parseVersion_m2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5mg: // global
           I64[Hp - 48] = lvl4_sc42P_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_sc42W_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion_m2_info" {
     Data.Version.parseVersion_m2_info:
         const Data.Version.parseVersion_m2_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sc4eo_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.647321075 UTC

[section ""data" . Data.Version.$wlvl_closure" {
     Data.Version.$wlvl_closure:
         const Data.Version.$wlvl_info;
 },
 sat_sc439_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5n5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5n9; else goto cc5n8;
       cc5n9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5n8: // global
           _sc42X::P64 = P64[R1 + 7];
           _sc436::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc436::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _sc42X::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc439_info" {
     sat_sc439_info:
         const sat_sc439_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 $www1_sc42Y_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5na: // global
           _sc42Z::I64 = R2;
           _sc42Y::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5nb; else goto cc5nc;
       cc5nc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc5ne; else goto cc5nd;
       cc5ne: // global
           HpAlloc = 40;
           goto cc5nb;
       cc5nb: // global
           R2 = _sc42Z::I64;
           R1 = _sc42Y::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5nd: // global
           _sc42X::P64 = P64[_sc42Y::P64 + 7];
           (_sc434::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(_sc42Z::I64);
           if (_sc434::I64 == 0) goto cc5nn; else goto cc5nj;
       cc5nn: // global
           Hp = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5nj: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sc42Z::I64;
           I64[Hp - 16] = sat_sc439_info;
           P64[Hp - 8] = _sc42X::P64;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_cc5nf_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isAlphaNum_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $www1_sc42Y_info" {
     $www1_sc42Y_info:
         const $www1_sc42Y_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 _cc5nf() //  [R1]
         { []
         }
     {offset
       cc5nf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5nm; else goto cc5nl;
       cc5nm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5nl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5nf_info" {
     block_cc5nf_info:
         const _cc5nf;
         const 0;
         const 30;
 },
 ww1_sc43c_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5nw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5nx; else goto cc5ny;
       cc5nx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5ny: // global
           I64[Sp - 16] = block_cc5nt_info;
           _sc42Y::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc42Y::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5nC; else goto cc5nu;
       uc5nC: // global
           call _cc5nt(R1) args: 0, res: 0, upd: 0;
       cc5nu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ww1_sc43c_info" {
     ww1_sc43c_info:
         const ww1_sc43c_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5nt() //  [R1]
         { []
         }
     {offset
       cc5nt: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $www1_sc42Y_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5nt_info" {
     block_cc5nt_info:
         const _cc5nt;
         const 1;
         const 30;
 },
 sat_sc43l_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5nM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5nN; else goto cc5nO;
       cc5nN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5nO: // global
           I64[Sp - 16] = block_cc5nJ_info;
           _sc43g::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc43g::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5nW; else goto cc5nK;
       uc5nW: // global
           call _cc5nJ(R1) args: 0, res: 0, upd: 0;
       cc5nK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc43l_info" {
     sat_sc43l_info:
         const sat_sc43l_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5nJ() //  [R1]
         { []
         }
     {offset
       cc5nJ: // global
           if (I64[R1 + 7] == 45) goto cc5nV; else goto cc5nU;
       cc5nV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5nU: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5nJ_info" {
     block_cc5nJ_info:
         const _cc5nJ;
         const 1;
         const 30;
 },
 Data.Version.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cc5nX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc5o1; else goto cc5o0;
       cc5o1: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Data.Version.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5o0: // global
           I64[Hp - 56] = $www1_sc42Y_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ww1_sc43c_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = sat_sc43l_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wlvl_info" {
     Data.Version.$wlvl_info:
         const Data.Version.$wlvl_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.663474143 UTC

[section ""data" . Data.Version.parseVersion2_closure" {
     Data.Version.parseVersion2_closure:
         const Data.Version.parseVersion2_info;
 },
 Data.Version.parseVersion2_entry() //  [R2]
         { []
         }
     {offset
       cc5oM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5oN; else goto cc5oO;
       cc5oN: // global
           R2 = R2;
           R1 = Data.Version.parseVersion2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5oO: // global
           I64[Sp - 8] = block_cc5oJ_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wlvl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion2_info" {
     Data.Version.parseVersion2_info:
         const Data.Version.parseVersion2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5oJ() //  [R1]
         { []
         }
     {offset
       cc5oJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5oR; else goto cc5oQ;
       cc5oR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5oQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5oJ_info" {
     block_cc5oJ_info:
         const _cc5oJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.672613673 UTC

[section ""data" . Data.Version.$wparseVersion_closure" {
     Data.Version.$wparseVersion_closure:
         const Data.Version.$wparseVersion_info;
         const 0;
 },
 a2_sc43y_entry() //  [R1]
         { []
         }
     {offset
       cc5pE: // global
           _sc43y::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc5pF; else goto cc5pG;
       cc5pG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5pI; else goto cc5pH;
       cc5pI: // global
           HpAlloc = 24;
           goto cc5pF;
       cc5pF: // global
           R1 = _sc43y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5pH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc43y::P64;
           _sc43r::P64 = P64[_sc43y::P64 + 16];
           _sc43x::P64 = P64[_sc43y::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc43r::P64;
           P64[Hp] = _sc43x::P64;
           I64[Sp - 24] = block_cc5pC_info;
           R3 = Hp - 14;
           R2 = Data.Version.parseVersion6_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . a2_sc43y_info" {
     a2_sc43y_info:
         const a2_sc43y_entry;
         const 2;
         const 30064771090;
         const Sc4eo_srt+288;
 },
 _cc5pC() //  [R1]
         { []
         }
     {offset
       cc5pC: // global
           I64[Sp] = block_cc5pL_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5pC_info" {
     block_cc5pC_info:
         const _cc5pC;
         const 0;
         const 12884901918;
         const Sc4eo_srt+288;
 },
 _cc5pL() //  [R1]
         { []
         }
     {offset
       cc5pL: // global
           if (R1 & 7 == 1) goto cc5pS; else goto cc5pX;
       cc5pS: // global
           R1 = Data.Version.parseVersion5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc5pX: // global
           I64[Sp - 8] = block_cc5pV_info;
           _sc43C::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sc43C::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5qb; else goto cc5pY;
       uc5qb: // global
           call _cc5pV(R1) args: 0, res: 0, upd: 0;
       cc5pY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5pL_info" {
     block_cc5pL_info:
         const _cc5pL;
         const 0;
         const 12884901918;
         const Sc4eo_srt+288;
 },
 _cc5pV() //  [R1]
         { []
         }
     {offset
       cc5pV: // global
           if (R1 & 7 == 1) goto cc5q4; else goto cc5q8;
       cc5q4: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc5q8: // global
           R1 = Data.Version.parseVersion4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5pV_info" {
     block_cc5pV_info:
         const _cc5pV;
         const 1;
         const 4294967326;
         const Sc4eo_srt+288;
 },
 sat_sc43L_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5qo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5qs; else goto cc5qr;
       cc5qs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5qr: // global
           _sc43p::P64 = P64[R1 + 7];
           _sc43I::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc43I::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sc43p::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc43L_info" {
     sat_sc43L_info:
         const sat_sc43L_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sc43M_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5qt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc5qx; else goto cc5qw;
       cc5qx: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5qw: // global
           _sc43p::P64 = P64[R1 + 7];
           _sc43y::P64 = P64[R1 + 15];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sc43y::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sc43L_info;
           P64[Hp - 8] = _sc43p::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 15;
           R2 = Data.Version.parseVersion2_closure+1;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc43M_info" {
     sat_sc43M_info:
         const sat_sc43M_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sc4eo_srt+336;
 },
 sat_sc43N_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5qy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc5qC; else goto cc5qB;
       cc5qC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5qB: // global
           _sc43p::P64 = P64[R1 + 7];
           _sc43r::P64 = P64[R1 + 15];
           I64[Hp - 48] = a2_sc43y_info;
           P64[Hp - 32] = _sc43r::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sc43M_info;
           P64[Hp - 8] = _sc43p::P64;
           P64[Hp] = Hp - 48;
           R3 = Hp - 15;
           R2 = Data.Version.parseVersion_m2_closure+1;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc43N_info" {
     sat_sc43N_info:
         const sat_sc43N_entry;
         const 2;
         const 442381631499;
         const 4294967301;
         const Sc4eo_srt+288;
 },
 sat_sc43Q_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5qD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5qE; else goto cc5qF;
       cc5qE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5qF: // global
           I64[Sp - 16] = block_cc5pa_info;
           _sc43p::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc43p::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5qS; else goto cc5pb;
       uc5qS: // global
           call _cc5pa(R1) args: 0, res: 0, upd: 0;
       cc5pb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc43Q_info" {
     sat_sc43Q_info:
         const sat_sc43Q_entry;
         const 1;
         const 442381631497;
         const 4294967301;
         const Sc4eo_srt+288;
 },
 _cc5pa() //  [R1]
         { []
         }
     {offset
       cc5pa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5qI; else goto cc5qH;
       cc5qI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5qH: // global
           if (I64[R1 + 7] - 48 > 9) goto cc5qK; else goto cc5qO;
       cc5qK: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5qO: // global
           I64[Hp - 16] = sat_sc43N_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc5qL_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5pa_info" {
     block_cc5pa_info:
         const _cc5pa;
         const 1;
         const 442381631518;
         const Sc4eo_srt+288;
 },
 _cc5qL() //  [R1]
         { []
         }
     {offset
       cc5qL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5qR; else goto cc5qQ;
       cc5qR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5qQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5qL_info" {
     block_cc5qL_info:
         const _cc5qL;
         const 0;
         const 30;
 },
 Data.Version.$wparseVersion_entry() //  [R2]
         { []
         }
     {offset
       cc5qT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5qX; else goto cc5qW;
       cc5qX: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Version.$wparseVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5qW: // global
           I64[Hp - 8] = sat_sc43Q_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wparseVersion_info" {
     Data.Version.$wparseVersion_info:
         const Data.Version.$wparseVersion_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const Sc4eo_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.694161034 UTC

[section ""data" . Data.Version.parseVersion1_closure" {
     Data.Version.parseVersion1_closure:
         const Data.Version.parseVersion1_info;
         const 0;
 },
 Data.Version.parseVersion1_entry() //  [R2]
         { []
         }
     {offset
       cc5rX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5rY; else goto cc5rZ;
       cc5rY: // global
           R2 = R2;
           R1 = Data.Version.parseVersion1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5rZ: // global
           I64[Sp - 8] = block_cc5rU_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wparseVersion_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion1_info" {
     Data.Version.parseVersion1_info:
         const Data.Version.parseVersion1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc4eo_srt+344;
 },
 _cc5rU() //  [R1]
         { []
         }
     {offset
       cc5rU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5s2; else goto cc5s1;
       cc5s2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5s1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5rU_info" {
     block_cc5rU_info:
         const _cc5rU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.699097677 UTC

[section ""data" . Data.Version.parseVersion_closure" {
     Data.Version.parseVersion_closure:
         const Data.Version.parseVersion_info;
         const 0;
 },
 Data.Version.parseVersion_entry() //  [R2]
         { []
         }
     {offset
       cc5sg: // global
           R2 = R2;
           call Data.Version.parseVersion1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion_info" {
     Data.Version.parseVersion_info:
         const Data.Version.parseVersion_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc4eo_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.702465262 UTC

[section ""data" . Data.Version.Version_closure" {
     Data.Version.Version_closure:
         const Data.Version.Version_info;
 },
 Data.Version.Version_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5ss: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5sw; else goto cc5sv;
       cc5sw: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.Version_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5sv: // global
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.Version_info" {
     Data.Version.Version_info:
         const Data.Version.Version_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.70593488 UTC

[section ""cstring" . ic4Qd_str" {
     ic4Qd_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,86,101,114,115,105,111,110,46,86,101,114,115,105,111,110]
 },
 Data.Version.Version_con_entry() //  [R1]
         { []
         }
     {offset
       cc5sC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.Version_con_info" {
     Data.Version.Version_con_info:
         const Data.Version.Version_con_entry;
         const 2;
         const 4;
         const ic4Qd_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:58.709000291 UTC

[section ""relreadonly" . Sc4eo_srt" {
     Sc4eo_srt:
         const GHC.Show.showLitString_closure;
         const GHC.Show.showCommaSpace1_closure;
         const f1_rc3Yy_closure;
         const Data.Version.$w$cshowsPrec_closure;
         const Data.Version.$fShowVersion_$cshowsPrec_closure;
         const Data.Version.$fShowVersion_$cshow_closure;
         const Data.Version.$fShowVersion1_closure;
         const Data.Version.showVersion1_closure;
         const Data.Version.$wshowVersion_closure;
         const Data.Version.showVersion_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const Data.Version.$fReadVersion13_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Version.$fReadVersion3_closure;
         const GHC.Read.readField_closure;
         const Data.Version.$fReadVersion6_closure;
         const Data.Version.$fReadVersion7_closure;
         const Data.Version.$fReadVersion9_closure;
         const Data.Version.$fReadVersion12_closure;
         const Data.Version.$fReadVersion14_closure;
         const Data.Version.$fReadVersion_lexeme_closure;
         const Data.Version.$w$creadPrec_closure;
         const Data.Version.$fReadVersion_lexeme1_closure;
         const Data.Version.$fReadVersion2_closure;
         const GHC.Read.list3_closure;
         const Data.Version.$fReadVersion_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Version.$fReadVersion1_closure;
         const Data.Version.$fReadVersion_$creadListPrec_closure;
         const Data.Version.$fReadVersion20_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.readEither5_closure;
         const Text.Read.readEither2_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Data.Version.parseVersion4_closure;
         const Data.Version.parseVersion5_closure;
         const Data.Version.parseVersion6_closure;
         const Data.Version.$wp_closure;
         const Data.Version.parseVersion3_closure;
         const Data.Version.parseVersion_m2_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Data.Version.$wparseVersion_closure;
         const Data.Version.parseVersion1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.826809723 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:59.828932178 UTC

[section ""data" . Data.Version.$fGenericVersion_$cto_closure" {
     Data.Version.$fGenericVersion_$cto_closure:
         const Data.Version.$fGenericVersion_$cto_info;
 },
 Data.Version.$fGenericVersion_$cto_entry() //  [R2]
         { []
         }
     {offset
       cc5y6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5ya; else goto cc5yb;
       cc5ya: // global
           R2 = R2;
           R1 = Data.Version.$fGenericVersion_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5yb: // global
           I64[Sp - 8] = block_cc5y4_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fGenericVersion_$cto_info" {
     Data.Version.$fGenericVersion_$cto_info:
         const Data.Version.$fGenericVersion_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5y4() //  [R1]
         { []
         }
     {offset
       cc5y4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5ye; else goto cc5yd;
       cc5ye: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5yd: // global
           _sc5sL::P64 = P64[R1 + 7];
           _sc5sM::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc5sL::P64;
           P64[Hp] = _sc5sM::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5y4_info" {
     block_cc5y4_info:
         const _cc5y4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.835039275 UTC

[section ""data" . Data.Version.$fGenericVersion1_closure" {
     Data.Version.$fGenericVersion1_closure:
         const Data.Version.$fGenericVersion1_info;
 },
 Data.Version.$fGenericVersion1_entry() //  [R2]
         { []
         }
     {offset
       cc5yx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5yB; else goto cc5yC;
       cc5yB: // global
           R2 = R2;
           R1 = Data.Version.$fGenericVersion1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5yC: // global
           I64[Sp - 8] = block_cc5yu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5yG; else goto cc5yv;
       uc5yG: // global
           call _cc5yu(R1) args: 0, res: 0, upd: 0;
       cc5yv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fGenericVersion1_info" {
     Data.Version.$fGenericVersion1_info:
         const Data.Version.$fGenericVersion1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5yu() //  [R1]
         { []
         }
     {offset
       cc5yu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5yF; else goto cc5yE;
       cc5yF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5yE: // global
           _sc5sP::P64 = P64[R1 + 7];
           _sc5sQ::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sc5sP::P64;
           P64[Hp] = _sc5sQ::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5yu_info" {
     block_cc5yu_info:
         const _cc5yu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.840761307 UTC

[section ""data" . Data.Version.$fGenericVersion_closure" {
     Data.Version.$fGenericVersion_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Version.$fGenericVersion1_closure+1;
         const Data.Version.$fGenericVersion_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.843085931 UTC

[section ""data" . Data.Version.versionTags_closure" {
     Data.Version.versionTags_closure:
         const Data.Version.versionTags_info;
 },
 Data.Version.versionTags_entry() //  [R2]
         { []
         }
     {offset
       cc5z1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5z2; else goto cc5z3;
       cc5z2: // global
           R2 = R2;
           R1 = Data.Version.versionTags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5z3: // global
           I64[Sp - 8] = block_cc5yY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5z7; else goto cc5yZ;
       uc5z7: // global
           call _cc5yY(R1) args: 0, res: 0, upd: 0;
       cc5yZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.versionTags_info" {
     Data.Version.versionTags_info:
         const Data.Version.versionTags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5yY() //  [R1]
         { []
         }
     {offset
       cc5yY: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5yY_info" {
     block_cc5yY_info:
         const _cc5yY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.848393424 UTC

[section ""data" . Data.Version.versionBranch_closure" {
     Data.Version.versionBranch_closure:
         const Data.Version.versionBranch_info;
 },
 Data.Version.versionBranch_entry() //  [R2]
         { []
         }
     {offset
       cc5zr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5zs; else goto cc5zt;
       cc5zs: // global
           R2 = R2;
           R1 = Data.Version.versionBranch_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5zt: // global
           I64[Sp - 8] = block_cc5zo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5zx; else goto cc5zp;
       uc5zx: // global
           call _cc5zo(R1) args: 0, res: 0, upd: 0;
       cc5zp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.versionBranch_info" {
     Data.Version.versionBranch_info:
         const Data.Version.versionBranch_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5zo() //  [R1]
         { []
         }
     {offset
       cc5zo: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5zo_info" {
     block_cc5zo_info:
         const _cc5zo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.853852053 UTC

[section ""data" . Data.Version.$fOrdVersion_$ccompare_closure" {
     Data.Version.$fOrdVersion_$ccompare_closure:
         const Data.Version.$fOrdVersion_$ccompare_info;
 },
 Data.Version.$fOrdVersion_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5zR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5zV; else goto cc5zW;
       cc5zV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5zW: // global
           I64[Sp - 16] = block_cc5zO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5A4; else goto cc5zP;
       uc5A4: // global
           call _cc5zO(R1) args: 0, res: 0, upd: 0;
       cc5zP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$ccompare_info" {
     Data.Version.$fOrdVersion_$ccompare_info:
         const Data.Version.$fOrdVersion_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5zO() //  [R1]
         { []
         }
     {offset
       cc5zO: // global
           I64[Sp] = block_cc5zU_info;
           _sc5t2::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc5t2::P64;
           if (R1 & 7 != 0) goto uc5A3; else goto cc5zY;
       uc5A3: // global
           call _cc5zU(R1) args: 0, res: 0, upd: 0;
       cc5zY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5zO_info" {
     block_cc5zO_info:
         const _cc5zO;
         const 1;
         const 30;
 },
 _cc5zU() //  [R1]
         { []
         }
     {offset
       cc5zU: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5zU_info" {
     block_cc5zU_info:
         const _cc5zU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.861138229 UTC

[section ""data" . Data.Version.$w$c==_closure" {
     Data.Version.$w$c==_closure:
         const Data.Version.$w$c==_info;
 },
 Data.Version.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc5Au: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Av; else goto cc5Aw;
       cc5Av: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5Aw: // global
           I64[Sp - 24] = block_cc5Ao_info;
           _sc5t8::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _sc5t8::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fEq[]_$s$c==_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$c==_info" {
     Data.Version.$w$c==_info:
         const Data.Version.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cc5Ao() //  [R1]
         { []
         }
     {offset
       cc5Ao: // global
           if (R1 & 7 == 1) goto cc5Ar; else goto cc5As;
       cc5Ar: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5As: // global
           I64[Sp] = block_cc5AC_info;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fOrd[]_$s$ccompare1_closure+2;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Ao_info" {
     block_cc5Ao_info:
         const _cc5Ao;
         const 2;
         const 30;
 },
 _cc5AC() //  [R1]
         { []
         }
     {offset
       cc5AC: // global
           _sc5t8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc5AG_info;
           R3 = _sc5t8::P64;
           R2 = GHC.Classes.$fOrd[]_$s$ccompare1_closure+2;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5AC_info" {
     block_cc5AC_info:
         const _cc5AC;
         const 130;
         const 30;
 },
 _cc5AG() //  [R1]
         { []
         }
     {offset
       cc5AG: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Classes.$fEq[]_$s$c==1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5AG_info" {
     block_cc5AG_info:
         const _cc5AG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.871016989 UTC

[section ""data" . Data.Version.$fEqVersion_$c==_closure" {
     Data.Version.$fEqVersion_$c==_closure:
         const Data.Version.$fEqVersion_$c==_info;
 },
 Data.Version.$fEqVersion_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5Bh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Bl; else goto cc5Bm;
       cc5Bl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fEqVersion_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5Bm: // global
           I64[Sp - 16] = block_cc5Be_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5Bu; else goto cc5Bf;
       uc5Bu: // global
           call _cc5Be(R1) args: 0, res: 0, upd: 0;
       cc5Bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fEqVersion_$c==_info" {
     Data.Version.$fEqVersion_$c==_info:
         const Data.Version.$fEqVersion_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5Be() //  [R1]
         { []
         }
     {offset
       cc5Be: // global
           I64[Sp - 8] = block_cc5Bk_info;
           _sc5th::P64 = P64[R1 + 7];
           _sc5ti::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc5ti::P64;
           P64[Sp + 8] = _sc5th::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5Bt; else goto cc5Bo;
       uc5Bt: // global
           call _cc5Bk(R1) args: 0, res: 0, upd: 0;
       cc5Bo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Be_info" {
     block_cc5Be_info:
         const _cc5Be;
         const 1;
         const 30;
 },
 _cc5Bk() //  [R1]
         { []
         }
     {offset
       cc5Bk: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Version.$w$c==_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Bk_info" {
     block_cc5Bk_info:
         const _cc5Bk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.878769324 UTC

[section ""data" . Data.Version.$fEqVersion_$c/=_closure" {
     Data.Version.$fEqVersion_$c/=_closure:
         const Data.Version.$fEqVersion_$c/=_info;
 },
 Data.Version.$fEqVersion_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5BR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5BV; else goto cc5BW;
       cc5BV: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fEqVersion_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5BW: // global
           I64[Sp - 16] = block_cc5BO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5Cg; else goto cc5BP;
       uc5Cg: // global
           call _cc5BO(R1) args: 0, res: 0, upd: 0;
       cc5BP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fEqVersion_$c/=_info" {
     Data.Version.$fEqVersion_$c/=_info:
         const Data.Version.$fEqVersion_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5BO() //  [R1]
         { []
         }
     {offset
       cc5BO: // global
           I64[Sp - 8] = block_cc5BU_info;
           _sc5tp::P64 = P64[R1 + 7];
           _sc5tq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc5tq::P64;
           P64[Sp + 8] = _sc5tp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5Cf; else goto cc5BY;
       uc5Cf: // global
           call _cc5BU(R1) args: 0, res: 0, upd: 0;
       cc5BY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5BO_info" {
     block_cc5BO_info:
         const _cc5BO;
         const 1;
         const 30;
 },
 _cc5BU() //  [R1]
         { []
         }
     {offset
       cc5BU: // global
           _sc5tp::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cc5C2_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _sc5tp::P64;
           Sp = Sp + 16;
           call Data.Version.$w$c==_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5BU_info" {
     block_cc5BU_info:
         const _cc5BU;
         const 2;
         const 30;
 },
 _cc5C2() //  [R1]
         { []
         }
     {offset
       cc5C2: // global
           if (R1 & 7 == 1) goto cc5C9; else goto cc5Cd;
       cc5C9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5Cd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5C2_info" {
     block_cc5C2_info:
         const _cc5C2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.886495253 UTC

[section ""data" . Data.Version.$fEqVersion_closure" {
     Data.Version.$fEqVersion_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Version.$fEqVersion_$c==_closure+2;
         const Data.Version.$fEqVersion_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.88945209 UTC

[section ""data" . Data.Version.$fOrdVersion_$c<_closure" {
     Data.Version.$fOrdVersion_$c<_closure:
         const Data.Version.$fOrdVersion_$c<_info;
 },
 Data.Version.$fOrdVersion_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5CO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5CS; else goto cc5CT;
       cc5CS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5CT: // global
           I64[Sp - 16] = block_cc5CL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5Dd; else goto cc5CM;
       uc5Dd: // global
           call _cc5CL(R1) args: 0, res: 0, upd: 0;
       cc5CM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c<_info" {
     Data.Version.$fOrdVersion_$c<_info:
         const Data.Version.$fOrdVersion_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5CL() //  [R1]
         { []
         }
     {offset
       cc5CL: // global
           I64[Sp] = block_cc5CR_info;
           _sc5ty::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc5ty::P64;
           if (R1 & 7 != 0) goto uc5Dc; else goto cc5CV;
       uc5Dc: // global
           call _cc5CR(R1) args: 0, res: 0, upd: 0;
       cc5CV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5CL_info" {
     block_cc5CL_info:
         const _cc5CL;
         const 1;
         const 30;
 },
 _cc5CR() //  [R1]
         { []
         }
     {offset
       cc5CR: // global
           _sc5ty::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc5CZ_info;
           R3 = P64[R1 + 7];
           R2 = _sc5ty::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5CR_info" {
     block_cc5CR_info:
         const _cc5CR;
         const 1;
         const 30;
 },
 _cc5CZ() //  [R1]
         { []
         }
     {offset
       cc5CZ: // global
           if (R1 & 7 == 1) goto cc5Da; else goto cc5D6;
       cc5Da: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5D6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5CZ_info" {
     block_cc5CZ_info:
         const _cc5CZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.898493973 UTC

[section ""data" . Data.Version.$fOrdVersion_$c>=_closure" {
     Data.Version.$fOrdVersion_$c>=_closure:
         const Data.Version.$fOrdVersion_$c>=_info;
 },
 Data.Version.$fOrdVersion_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5DK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5DO; else goto cc5DP;
       cc5DO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5DP: // global
           I64[Sp - 16] = block_cc5DH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5E9; else goto cc5DI;
       uc5E9: // global
           call _cc5DH(R1) args: 0, res: 0, upd: 0;
       cc5DI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c>=_info" {
     Data.Version.$fOrdVersion_$c>=_info:
         const Data.Version.$fOrdVersion_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5DH() //  [R1]
         { []
         }
     {offset
       cc5DH: // global
           I64[Sp] = block_cc5DN_info;
           _sc5tH::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc5tH::P64;
           if (R1 & 7 != 0) goto uc5E8; else goto cc5DR;
       uc5E8: // global
           call _cc5DN(R1) args: 0, res: 0, upd: 0;
       cc5DR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5DH_info" {
     block_cc5DH_info:
         const _cc5DH;
         const 1;
         const 30;
 },
 _cc5DN() //  [R1]
         { []
         }
     {offset
       cc5DN: // global
           _sc5tH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc5DV_info;
           R3 = P64[R1 + 7];
           R2 = _sc5tH::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5DN_info" {
     block_cc5DN_info:
         const _cc5DN;
         const 1;
         const 30;
 },
 _cc5DV() //  [R1]
         { []
         }
     {offset
       cc5DV: // global
           if (R1 & 7 == 1) goto cc5E6; else goto cc5E2;
       cc5E6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5E2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5DV_info" {
     block_cc5DV_info:
         const _cc5DV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.908219555 UTC

[section ""data" . Data.Version.$fOrdVersion_$c>_closure" {
     Data.Version.$fOrdVersion_$c>_closure:
         const Data.Version.$fOrdVersion_$c>_info;
 },
 Data.Version.$fOrdVersion_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5EG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5EK; else goto cc5EL;
       cc5EK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5EL: // global
           I64[Sp - 16] = block_cc5ED_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5F5; else goto cc5EE;
       uc5F5: // global
           call _cc5ED(R1) args: 0, res: 0, upd: 0;
       cc5EE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c>_info" {
     Data.Version.$fOrdVersion_$c>_info:
         const Data.Version.$fOrdVersion_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5ED() //  [R1]
         { []
         }
     {offset
       cc5ED: // global
           I64[Sp] = block_cc5EJ_info;
           _sc5tQ::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc5tQ::P64;
           if (R1 & 7 != 0) goto uc5F4; else goto cc5EN;
       uc5F4: // global
           call _cc5EJ(R1) args: 0, res: 0, upd: 0;
       cc5EN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5ED_info" {
     block_cc5ED_info:
         const _cc5ED;
         const 1;
         const 30;
 },
 _cc5EJ() //  [R1]
         { []
         }
     {offset
       cc5EJ: // global
           _sc5tQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc5ER_info;
           R3 = P64[R1 + 7];
           R2 = _sc5tQ::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5EJ_info" {
     block_cc5EJ_info:
         const _cc5EJ;
         const 1;
         const 30;
 },
 _cc5ER() //  [R1]
         { []
         }
     {offset
       cc5ER: // global
           if (R1 & 7 == 3) goto cc5F2; else goto cc5EY;
       cc5F2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5EY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5ER_info" {
     block_cc5ER_info:
         const _cc5ER;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.917827798 UTC

[section ""data" . Data.Version.$fOrdVersion_$c<=_closure" {
     Data.Version.$fOrdVersion_$c<=_closure:
         const Data.Version.$fOrdVersion_$c<=_info;
 },
 Data.Version.$fOrdVersion_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5FC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5FG; else goto cc5FH;
       cc5FG: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5FH: // global
           I64[Sp - 16] = block_cc5Fz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5G1; else goto cc5FA;
       uc5G1: // global
           call _cc5Fz(R1) args: 0, res: 0, upd: 0;
       cc5FA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$c<=_info" {
     Data.Version.$fOrdVersion_$c<=_info:
         const Data.Version.$fOrdVersion_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5Fz() //  [R1]
         { []
         }
     {offset
       cc5Fz: // global
           I64[Sp] = block_cc5FF_info;
           _sc5tZ::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sc5tZ::P64;
           if (R1 & 7 != 0) goto uc5G0; else goto cc5FJ;
       uc5G0: // global
           call _cc5FF(R1) args: 0, res: 0, upd: 0;
       cc5FJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Fz_info" {
     block_cc5Fz_info:
         const _cc5Fz;
         const 1;
         const 30;
 },
 _cc5FF() //  [R1]
         { []
         }
     {offset
       cc5FF: // global
           _sc5tZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc5FN_info;
           R3 = P64[R1 + 7];
           R2 = _sc5tZ::P64;
           Sp = Sp + 8;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5FF_info" {
     block_cc5FF_info:
         const _cc5FF;
         const 1;
         const 30;
 },
 _cc5FN() //  [R1]
         { []
         }
     {offset
       cc5FN: // global
           if (R1 & 7 == 3) goto cc5FY; else goto cc5FU;
       cc5FY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5FU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5FN_info" {
     block_cc5FN_info:
         const _cc5FN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.926807696 UTC

[section ""data" . Data.Version.$fOrdVersion_$cmax_closure" {
     Data.Version.$fOrdVersion_$cmax_closure:
         const Data.Version.$fOrdVersion_$cmax_info;
 },
 Data.Version.$fOrdVersion_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5Gy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5GC; else goto cc5GD;
       cc5GC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5GD: // global
           I64[Sp - 16] = block_cc5Gv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5GX; else goto cc5Gw;
       uc5GX: // global
           call _cc5Gv(R1) args: 0, res: 0, upd: 0;
       cc5Gw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$cmax_info" {
     Data.Version.$fOrdVersion_$cmax_info:
         const Data.Version.$fOrdVersion_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5Gv() //  [R1]
         { []
         }
     {offset
       cc5Gv: // global
           I64[Sp - 8] = block_cc5GB_info;
           _sc5u7::P64 = R1;
           _sc5u8::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc5u8::P64;
           P64[Sp + 8] = _sc5u7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5GW; else goto cc5GF;
       uc5GW: // global
           call _cc5GB(R1) args: 0, res: 0, upd: 0;
       cc5GF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Gv_info" {
     block_cc5Gv_info:
         const _cc5Gv;
         const 1;
         const 30;
 },
 _cc5GB() //  [R1]
         { []
         }
     {offset
       cc5GB: // global
           I64[Sp] = block_cc5GJ_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5GB_info" {
     block_cc5GB_info:
         const _cc5GB;
         const 2;
         const 30;
 },
 _cc5GJ() //  [R1]
         { []
         }
     {offset
       cc5GJ: // global
           if (R1 & 7 == 3) goto cc5GU; else goto cc5GQ;
       cc5GU: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5GQ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5GJ_info" {
     block_cc5GJ_info:
         const _cc5GJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.936075503 UTC

[section ""data" . Data.Version.$fOrdVersion_$cmin_closure" {
     Data.Version.$fOrdVersion_$cmin_closure:
         const Data.Version.$fOrdVersion_$cmin_info;
 },
 Data.Version.$fOrdVersion_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5Hu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Hy; else goto cc5Hz;
       cc5Hy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fOrdVersion_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5Hz: // global
           I64[Sp - 16] = block_cc5Hr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5HT; else goto cc5Hs;
       uc5HT: // global
           call _cc5Hr(R1) args: 0, res: 0, upd: 0;
       cc5Hs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fOrdVersion_$cmin_info" {
     Data.Version.$fOrdVersion_$cmin_info:
         const Data.Version.$fOrdVersion_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cc5Hr() //  [R1]
         { []
         }
     {offset
       cc5Hr: // global
           I64[Sp - 8] = block_cc5Hx_info;
           _sc5ug::P64 = R1;
           _sc5uh::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _sc5uh::P64;
           P64[Sp + 8] = _sc5ug::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5HS; else goto cc5HB;
       uc5HS: // global
           call _cc5Hx(R1) args: 0, res: 0, upd: 0;
       cc5HB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Hr_info" {
     block_cc5Hr_info:
         const _cc5Hr;
         const 1;
         const 30;
 },
 _cc5Hx() //  [R1]
         { []
         }
     {offset
       cc5Hx: // global
           I64[Sp] = block_cc5HF_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Classes.$fOrd[]_$s$ccompare_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Hx_info" {
     block_cc5Hx_info:
         const _cc5Hx;
         const 2;
         const 30;
 },
 _cc5HF() //  [R1]
         { []
         }
     {offset
       cc5HF: // global
           if (R1 & 7 == 3) goto cc5HQ; else goto cc5HM;
       cc5HQ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5HM: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5HF_info" {
     block_cc5HF_info:
         const _cc5HF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.944570124 UTC

[section ""data" . Data.Version.$fOrdVersion_closure" {
     Data.Version.$fOrdVersion_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Version.$fEqVersion_closure+1;
         const Data.Version.$fOrdVersion_$ccompare_closure+2;
         const Data.Version.$fOrdVersion_$c<_closure+2;
         const Data.Version.$fOrdVersion_$c<=_closure+2;
         const Data.Version.$fOrdVersion_$c>_closure+2;
         const Data.Version.$fOrdVersion_$c>=_closure+2;
         const Data.Version.$fOrdVersion_$cmax_closure+2;
         const Data.Version.$fOrdVersion_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.947169815 UTC

[section ""data" . Data.Version.makeVersion_closure" {
     Data.Version.makeVersion_closure:
         const Data.Version.makeVersion_info;
 },
 Data.Version.makeVersion_entry() //  [R2]
         { []
         }
     {offset
       cc5Ip: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5It; else goto cc5Is;
       cc5It: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Version.makeVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Is: // global
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.makeVersion_info" {
     Data.Version.makeVersion_info:
         const Data.Version.makeVersion_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.950256388 UTC

[section ""cstring" . Data.Version.$trModule4_bytes" {
     Data.Version.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.951812346 UTC

[section ""data" . Data.Version.$trModule3_closure" {
     Data.Version.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.953404785 UTC

[section ""cstring" . Data.Version.$trModule2_bytes" {
     Data.Version.$trModule2_bytes:
         I8[] [68,97,116,97,46,86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.954957382 UTC

[section ""data" . Data.Version.$trModule1_closure" {
     Data.Version.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.956591277 UTC

[section ""data" . Data.Version.$trModule_closure" {
     Data.Version.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Version.$trModule3_closure+1;
         const Data.Version.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.958253012 UTC

[section ""data" . $krep_rc3Yn_closure" {
     $krep_rc3Yn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.959939034 UTC

[section ""data" . $krep1_rc3Yo_closure" {
     $krep1_rc3Yo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.962071027 UTC

[section ""data" . $krep2_rc3Yp_closure" {
     $krep2_rc3Yp_closure:
         const :_con_info;
         const $krep_rc3Yn_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.96373984 UTC

[section ""data" . $krep3_rc3Yq_closure" {
     $krep3_rc3Yq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_rc3Yp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.965424345 UTC

[section ""data" . $krep4_rc3Yr_closure" {
     $krep4_rc3Yr_closure:
         const :_con_info;
         const $krep1_rc3Yo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.967551028 UTC

[section ""data" . $krep5_rc3Ys_closure" {
     $krep5_rc3Ys_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rc3Yr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.96917295 UTC

[section ""data" . $krep6_rc3Yt_closure" {
     $krep6_rc3Yt_closure:
         const :_con_info;
         const $krep3_rc3Yq_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.970791895 UTC

[section ""data" . $krep7_rc3Yu_closure" {
     $krep7_rc3Yu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep6_rc3Yt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.972328767 UTC

[section ""cstring" . Data.Version.$fReadVersion19_bytes" {
     Data.Version.$fReadVersion19_bytes:
         I8[] [86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.974432297 UTC

[section ""data" . Data.Version.$tcVersion1_closure" {
     Data.Version.$tcVersion1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$fReadVersion19_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.976069683 UTC

[section ""data" . Data.Version.$tcVersion_closure" {
     Data.Version.$tcVersion_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Version.$trModule_closure+1;
         const Data.Version.$tcVersion1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18148779789861942324;
         const 12675349638857785520;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.977804618 UTC

[section ""data" . $krep8_rc3Yv_closure" {
     $krep8_rc3Yv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Version.$tcVersion_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.979415727 UTC

[section ""data" . $krep9_rc3Yw_closure" {
     $krep9_rc3Yw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rc3Yu_closure+1;
         const $krep8_rc3Yv_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.980995596 UTC

[section ""data" . Data.Version.$tc'Version1_closure" {
     Data.Version.$tc'Version1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rc3Ys_closure+1;
         const $krep9_rc3Yw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.982625489 UTC

[section ""cstring" . Data.Version.$tc'Version3_bytes" {
     Data.Version.$tc'Version3_bytes:
         I8[] [39,86,101,114,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.984170141 UTC

[section ""data" . Data.Version.$tc'Version2_closure" {
     Data.Version.$tc'Version2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Version.$tc'Version3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.985830751 UTC

[section ""data" . Data.Version.$tc'Version_closure" {
     Data.Version.$tc'Version_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Version.$trModule_closure+1;
         const Data.Version.$tc'Version2_closure+1;
         const Data.Version.$tc'Version1_closure+4;
         const 3698077959655346891;
         const 8062481246695158651;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.987481744 UTC

[section ""cstring" . f_rc3Yx_bytes" {
     f_rc3Yx_bytes:
         I8[] [86,101,114,115,105,111,110,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.990130449 UTC

[section ""data" . f1_rc3Yy_closure" {
     f1_rc3Yy_closure:
         const f1_rc3Yy_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rc3Yy_entry() //  [R1]
         { []
         }
     {offset
       cc5J5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5J6; else goto cc5J7;
       cc5J6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5J7: // global
           (_cc5J2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5J2::I64 == 0) goto cc5J4; else goto cc5J3;
       cc5J4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5J3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5J2::I64;
           R2 = f_rc3Yx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rc3Yy_info" {
     f1_rc3Yy_info:
         const f1_rc3Yy_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.994062299 UTC

[section ""cstring" . lvl_rc3Yz_bytes" {
     lvl_rc3Yz_bytes:
         I8[] [118,101,114,115,105,111,110,66,114,97,110,99,104,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.995540027 UTC

[section ""cstring" . lvl1_rc3YA_bytes" {
     lvl1_rc3YA_bytes:
         I8[] [118,101,114,115,105,111,110,84,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:59.997011937 UTC

[section ""cstring" . Data.Version.$fReadVersion5_bytes" {
     Data.Version.$fReadVersion5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.012541423 UTC

[section ""data" . Data.Version.$w$cshowsPrec_closure" {
     Data.Version.$w$cshowsPrec_closure:
         const Data.Version.$w$cshowsPrec_info;
         const 0;
 },
 Data.Version.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cc5Jk: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 s1_sc5uv_entry() //  [R1]
         { []
         }
     {offset
       cc5JN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5JO; else goto cc5JP;
       cc5JO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5JP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.$fReadVersion5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . s1_sc5uv_info" {
     s1_sc5uv_info:
         const s1_sc5uv_entry;
         const 1;
         const 16;
 },
 sat_sc5uH_entry() //  [R1]
         { []
         }
     {offset
       cc5Km: // global
           _sc5uH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Kn; else goto cc5Ko;
       cc5Ko: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc5Kq; else goto cc5Kp;
       cc5Kq: // global
           HpAlloc = 56;
           goto cc5Kn;
       cc5Kn: // global
           R1 = _sc5uH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Kp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5uH::P64;
           _sc5uA::P64 = P64[_sc5uH::P64 + 16];
           _sc5uD::P64 = P64[_sc5uH::P64 + 24];
           _sc5uE::P64 = P64[_sc5uH::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sc5uA::P64;
           P64[Hp - 24] = _sc5uE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sc5uD::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5uH_info" {
     sat_sc5uH_info:
         const sat_sc5uH_entry;
         const 3;
         const 4294967311;
         const Sc5NE_srt;
 },
 showl_sc5uA_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Kv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Kw; else goto cc5Kx;
       cc5Kw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Kx: // global
           I64[Sp - 24] = block_cc5Ka_info;
           _sc5uA::P64 = R1;
           _sc5uz::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc5uz::P64;
           P64[Sp - 8] = _sc5uA::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc5KF; else goto cc5Kb;
       uc5KF: // global
           call _cc5Ka(R1) args: 0, res: 0, upd: 0;
       cc5Kb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sc5uA_info" {
     showl_sc5uA_info:
         const showl_sc5uA_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sc5NE_srt;
 },
 _cc5Ka() //  [R1]
         { []
         }
     {offset
       cc5Ka: // global
           if (R1 & 7 == 1) goto cc5Ks; else goto cc5Kt;
       cc5Ks: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5Kt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc5KE; else goto cc5KD;
       cc5KE: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5KD: // global
           _sc5uD::P64 = P64[R1 + 6];
           _sc5uE::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sc5uH_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sc5uD::P64;
           P64[Hp - 48] = _sc5uE::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)3_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Ka_info" {
     block_cc5Ka_info:
         const _cc5Ka;
         const 2;
         const 4294967326;
         const Sc5NE_srt;
 },
 sat_sc5uJ_entry() //  [R1]
         { []
         }
     {offset
       cc5KG: // global
           _sc5uJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5KH; else goto cc5KI;
       cc5KI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc5KK; else goto cc5KJ;
       cc5KK: // global
           HpAlloc = 40;
           goto cc5KH;
       cc5KH: // global
           R1 = _sc5uJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5KJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5uJ::P64;
           _sc5uv::P64 = P64[_sc5uJ::P64 + 16];
           _sc5uy::P64 = P64[_sc5uJ::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _sc5uv::P64;
           I64[Hp - 8] = showl_sc5uA_info;
           P64[Hp] = Hp - 30;
           R2 = _sc5uy::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sc5uA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5uJ_info" {
     sat_sc5uJ_info:
         const sat_sc5uJ_entry;
         const 2;
         const 4294967314;
         const Sc5NE_srt;
 },
 sat_sc5uL_entry() //  [R1]
         { []
         }
     {offset
       cc5KM: // global
           _sc5uL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5KN; else goto cc5KO;
       cc5KO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc5KQ; else goto cc5KP;
       cc5KQ: // global
           HpAlloc = 56;
           goto cc5KN;
       cc5KN: // global
           R1 = _sc5uL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5KP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5uL::P64;
           _sc5uv::P64 = P64[_sc5uL::P64 + 16];
           _sc5ux::P64 = P64[_sc5uL::P64 + 24];
           _sc5uy::P64 = P64[_sc5uL::P64 + 32];
           I64[Hp - 48] = sat_sc5uJ_info;
           P64[Hp - 32] = _sc5uv::P64;
           P64[Hp - 24] = _sc5uy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sc5ux::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5uL_info" {
     sat_sc5uL_info:
         const sat_sc5uL_entry;
         const 3;
         const 4294967311;
         const Sc5NE_srt;
 },
 sat_sc5uN_entry() //  [R1]
         { []
         }
     {offset
       cc5KV: // global
           _sc5uN::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc5KW; else goto cc5KX;
       cc5KX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5KZ; else goto cc5KY;
       cc5KZ: // global
           HpAlloc = 24;
           goto cc5KW;
       cc5KW: // global
           R1 = _sc5uN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5KY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5uN::P64;
           _sc5uq::P64 = P64[_sc5uN::P64 + 16];
           _sc5ut::P64 = P64[_sc5uN::P64 + 24];
           I64[Hp - 16] = s1_sc5uv_info;
           P64[Hp] = _sc5ut::P64;
           I64[Sp - 32] = block_cc5JQ_info;
           R1 = _sc5uq::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc5L7; else goto cc5JR;
       uc5L7: // global
           call _cc5JQ(R1) args: 0, res: 0, upd: 0;
       cc5JR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5uN_info" {
     sat_sc5uN_info:
         const sat_sc5uN_entry;
         const 2;
         const 4294967314;
         const Sc5NE_srt;
 },
 _cc5JQ() //  [R1]
         { []
         }
     {offset
       cc5JQ: // global
           _cc5JJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc5KS; else goto cc5KT;
       cc5KS: // global
           R3 = _cc5JJ::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cc5KT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cc5L6; else goto cc5L5;
       cc5L6: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc5L5: // global
           _sc5ux::P64 = P64[R1 + 6];
           _sc5uy::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sc5uL_info;
           P64[Hp - 64] = _cc5JJ::P64;
           P64[Hp - 56] = _sc5ux::P64;
           P64[Hp - 48] = _sc5uy::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)3_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5JQ_info" {
     block_cc5JQ_info:
         const _cc5JQ;
         const 1;
         const 4294967326;
         const Sc5NE_srt;
 },
 sat_sc5uO_entry() //  [R1]
         { []
         }
     {offset
       cc5L8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5Lc; else goto cc5Lb;
       cc5Lc: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Lb: // global
           _sc5uq::P64 = P64[R1 + 16];
           _sc5ut::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sc5uN_info;
           P64[Hp - 8] = _sc5uq::P64;
           P64[Hp] = _sc5ut::P64;
           R3 = Hp - 24;
           R2 = lvl1_rc3YA_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5uO_info" {
     sat_sc5uO_info:
         const sat_sc5uO_entry;
         const 2;
         const 4294967314;
         const Sc5NE_srt;
 },
 s_sc5uu_entry() //  [R1]
         { []
         }
     {offset
       cc5Ld: // global
           _sc5uu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Le; else goto cc5Lf;
       cc5Lf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5Lh; else goto cc5Lg;
       cc5Lh: // global
           HpAlloc = 32;
           goto cc5Le;
       cc5Le: // global
           R1 = _sc5uu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Lg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5uu::P64;
           _sc5uq::P64 = P64[_sc5uu::P64 + 16];
           _sc5ut::P64 = P64[_sc5uu::P64 + 24];
           I64[Hp - 24] = sat_sc5uO_info;
           P64[Hp - 8] = _sc5uq::P64;
           P64[Hp] = _sc5ut::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . s_sc5uu_info" {
     s_sc5uu_info:
         const s_sc5uu_entry;
         const 2;
         const 12884901906;
         const Sc5NE_srt;
 },
 sat_sc5v6_entry() //  [R1]
         { []
         }
     {offset
       cc5LU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc5M1; else goto cc5M2;
       cc5M1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5M2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc5LR_info;
           _sc5uV::P64 = P64[R1 + 16];
           _sc5uZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sc5uV::P64;
           P64[Sp - 24] = _sc5uZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc5M9; else goto cc5LS;
       uc5M9: // global
           call _cc5LR(R1) args: 0, res: 0, upd: 0;
       cc5LS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5v6_info" {
     sat_sc5v6_info:
         const sat_sc5v6_entry;
         const 3;
         const 15;
 },
 _cc5LR() //  [R1]
         { []
         }
     {offset
       cc5LR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5M5; else goto cc5M4;
       cc5M5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc5M4: // global
           _sc5v1::I64 = I64[R1 + 7];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cc5LY_info;
           R4 = Hp - 24;
           R3 = _sc5v1::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5LR_info" {
     block_cc5LR_info:
         const _cc5LR;
         const 2;
         const 30;
 },
 _cc5LY() //  [R1, R2]
         { []
         }
     {offset
       cc5LY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5M8; else goto cc5M7;
       cc5M8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc5M7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5LY_info" {
     block_cc5LY_info:
         const _cc5LY;
         const 0;
         const 30;
 },
 showl_sc5uV_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Me: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Mf; else goto cc5Mg;
       cc5Mf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Mg: // global
           I64[Sp - 24] = block_cc5LH_info;
           _sc5uV::P64 = R1;
           _sc5uU::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc5uU::P64;
           P64[Sp - 8] = _sc5uV::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc5Mn; else goto cc5LI;
       uc5Mn: // global
           call _cc5LH(R1) args: 0, res: 0, upd: 0;
       cc5LI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_sc5uV_info" {
     showl_sc5uV_info:
         const showl_sc5uV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5LH() //  [R1]
         { []
         }
     {offset
       cc5LH: // global
           if (R1 & 7 == 1) goto cc5Mb; else goto cc5Mc;
       cc5Mb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5Mc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc5Mm; else goto cc5Ml;
       cc5Mm: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5Ml: // global
           _sc5uY::P64 = P64[R1 + 6];
           _sc5uZ::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sc5v6_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _sc5uY::P64;
           P64[Hp - 24] = _sc5uZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5LH_info" {
     block_cc5LH_info:
         const _cc5LH;
         const 2;
         const 30;
 },
 sat_sc5v7_entry() //  [R1]
         { []
         }
     {offset
       cc5Mo: // global
           _sc5v7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Mp; else goto cc5Mq;
       cc5Mq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc5Ms; else goto cc5Mr;
       cc5Ms: // global
           HpAlloc = 40;
           goto cc5Mp;
       cc5Mp: // global
           R1 = _sc5v7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Mr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5v7::P64;
           _sc5uu::P64 = P64[_sc5v7::P64 + 16];
           _sc5uR::P64 = P64[_sc5v7::P64 + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Show.showList__2_closure;
           P64[Hp - 16] = _sc5uu::P64;
           I64[Hp - 8] = showl_sc5uV_info;
           P64[Hp] = Hp - 30;
           R2 = _sc5uR::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call showl_sc5uV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5v7_info" {
     sat_sc5v7_info:
         const sat_sc5v7_entry;
         const 2;
         const 18;
 },
 sat_sc5vb_entry() //  [R1]
         { []
         }
     {offset
       cc5Mt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cc5Mx; else goto cc5My;
       cc5Mx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5My: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cc5Ls_info;
           _sc5uu::P64 = P64[R1 + 16];
           _sc5uR::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sc5uu::P64;
           P64[Sp - 24] = _sc5uR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uc5MF; else goto cc5Lt;
       uc5MF: // global
           call _cc5Ls(R1) args: 0, res: 0, upd: 0;
       cc5Lt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5vb_info" {
     sat_sc5vb_info:
         const sat_sc5vb_entry;
         const 3;
         const 15;
 },
 _cc5Ls() //  [R1]
         { []
         }
     {offset
       cc5Ls: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5MB; else goto cc5MA;
       cc5MB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc5MA: // global
           _sc5uT::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sc5v7_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cc5Mu_info;
           R4 = Hp - 24;
           R3 = _sc5uT::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5Ls_info" {
     block_cc5Ls_info:
         const _cc5Ls;
         const 2;
         const 30;
 },
 _cc5Mu() //  [R1, R2]
         { []
         }
     {offset
       cc5Mu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5ME; else goto cc5MD;
       cc5ME: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc5MD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5Mu_info" {
     block_cc5Mu_info:
         const _cc5Mu;
         const 0;
         const 30;
 },
 sat_sc5vc_entry() //  [R1]
         { []
         }
     {offset
       cc5MK: // global
           _sc5vc::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc5ML; else goto cc5MM;
       cc5MM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5MO; else goto cc5MN;
       cc5MO: // global
           HpAlloc = 32;
           goto cc5ML;
       cc5ML: // global
           R1 = _sc5vc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5MN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5vc::P64;
           _sc5up::P64 = P64[_sc5vc::P64 + 16];
           _sc5uq::P64 = P64[_sc5vc::P64 + 24];
           _sc5ut::P64 = P64[_sc5vc::P64 + 32];
           I64[Hp - 24] = s_sc5uu_info;
           P64[Hp - 8] = _sc5uq::P64;
           P64[Hp] = _sc5ut::P64;
           I64[Sp - 32] = block_cc5Li_info;
           R1 = _sc5up::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uc5MV; else goto cc5Lj;
       uc5MV: // global
           call _cc5Li(R1) args: 0, res: 0, upd: 0;
       cc5Lj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5vc_info" {
     sat_sc5vc_info:
         const sat_sc5vc_entry;
         const 3;
         const 12884901903;
         const Sc5NE_srt;
 },
 _cc5Li() //  [R1]
         { []
         }
     {offset
       cc5Li: // global
           _cc5Jx::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc5MH; else goto cc5MI;
       cc5MH: // global
           R3 = _cc5Jx::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cc5MI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc5MU; else goto cc5MT;
       cc5MU: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc5MT: // global
           _sc5uQ::P64 = P64[R1 + 6];
           _sc5uR::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sc5vb_info;
           P64[Hp - 40] = _cc5Jx::P64;
           P64[Hp - 32] = _sc5uQ::P64;
           P64[Hp - 24] = _sc5uR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc5Li_info" {
     block_cc5Li_info:
         const _cc5Li;
         const 1;
         const 30;
 },
 g_sc5us_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5MW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc5N0; else goto cc5MZ;
       cc5N0: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5MZ: // global
           _sc5up::P64 = P64[R1 + 7];
           _sc5uq::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sc5vc_info;
           P64[Hp - 16] = _sc5up::P64;
           P64[Hp - 8] = _sc5uq::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = lvl_rc3Yz_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g_sc5us_info" {
     g_sc5us_info:
         const g_sc5us_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const Sc5NE_srt;
 },
 sat_sc5ve_entry() //  [R1]
         { []
         }
     {offset
       cc5N8: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g_sc5us_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5ve_info" {
     sat_sc5ve_info:
         const sat_sc5ve_entry;
         const 2;
         const 12884901906;
         const Sc5NE_srt;
 },
 sat_sc5vg_entry() //  [R1]
         { []
         }
     {offset
       cc5Nl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5Np; else goto cc5No;
       cc5Np: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5No: // global
           _sc5ur::P64 = P64[R1 + 16];
           _sc5us::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sc5ur::P64;
           R2 = Hp - 14;
           R1 = _sc5us::P64;
           call g_sc5us_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5vg_info" {
     sat_sc5vg_info:
         const sat_sc5vg_entry;
         const 2;
         const 12884901906;
         const Sc5NE_srt;
 },
 sat_sc5vh_entry() //  [R1]
         { []
         }
     {offset
       cc5Nq: // global
           _sc5vh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Nr; else goto cc5Ns;
       cc5Ns: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5Nu; else goto cc5Nt;
       cc5Nu: // global
           HpAlloc = 32;
           goto cc5Nr;
       cc5Nr: // global
           R1 = _sc5vh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Nt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5vh::P64;
           _sc5ur::P64 = P64[_sc5vh::P64 + 16];
           _sc5us::P64 = P64[_sc5vh::P64 + 24];
           I64[Hp - 24] = sat_sc5vg_info;
           P64[Hp - 8] = _sc5ur::P64;
           P64[Hp] = _sc5us::P64;
           R3 = Hp - 24;
           R2 = f1_rc3Yy_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5vh_info" {
     sat_sc5vh_info:
         const sat_sc5vh_entry;
         const 2;
         const 30064771090;
         const Sc5NE_srt;
 },
 Data.Version.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cc5Ny: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cc5NC; else goto cc5NB;
       cc5NC: // global
           HpAlloc = 80;
           R1 = Data.Version.$w$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cc5NB: // global
           I64[Hp - 72] = g_sc5us_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           _cc5Jo::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto cc5Nw; else goto cc5Nx;
       cc5Nw: // global
           I64[Hp - 48] = sat_sc5ve_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _cc5Jo::P64;
           _cc5N4::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cc5N4::P64;
           R2 = f1_rc3Yy_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cc5Nx: // global
           I64[Hp - 48] = sat_sc5vh_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _cc5Jo::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$cshowsPrec_info" {
     Data.Version.$w$cshowsPrec_info:
         const Data.Version.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 17179869184;
         const Sc5NE_srt;
         const 68;
         const Data.Version.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.064207942 UTC

[section ""data" . Data.Version.$fShowVersion_$cshowsPrec_closure" {
     Data.Version.$fShowVersion_$cshowsPrec_closure:
         const Data.Version.$fShowVersion_$cshowsPrec_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc5R0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5R4; else goto cc5R5;
       cc5R4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fShowVersion_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5R5: // global
           I64[Sp - 24] = block_cc5QX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc5Rd; else goto cc5QY;
       uc5Rd: // global
           call _cc5QX(R1) args: 0, res: 0, upd: 0;
       cc5QY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshowsPrec_info" {
     Data.Version.$fShowVersion_$cshowsPrec_info:
         const Data.Version.$fShowVersion_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sc5NE_srt+24;
 },
 _cc5QX() //  [R1]
         { []
         }
     {offset
       cc5QX: // global
           I64[Sp] = block_cc5R3_info;
           _sc5vm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc5vm::I64;
           if (R1 & 7 != 0) goto uc5Rc; else goto cc5R7;
       uc5Rc: // global
           call _cc5R3(R1) args: 0, res: 0, upd: 0;
       cc5R7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5QX_info" {
     block_cc5QX_info:
         const _cc5QX;
         const 2;
         const 4294967326;
         const Sc5NE_srt+24;
 },
 _cc5R3() //  [R1]
         { []
         }
     {offset
       cc5R3: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5R3_info" {
     block_cc5R3_info:
         const _cc5R3;
         const 66;
         const 4294967326;
         const Sc5NE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.071030282 UTC

[section ""data" . Data.Version.$fShowVersion2_closure" {
     Data.Version.$fShowVersion2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.074018711 UTC

[section ""data" . Data.Version.$fShowVersion_$cshow_closure" {
     Data.Version.$fShowVersion_$cshow_closure:
         const Data.Version.$fShowVersion_$cshow_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cc5RB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5RC; else goto cc5RD;
       cc5RC: // global
           R2 = R2;
           R1 = Data.Version.$fShowVersion_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5RD: // global
           I64[Sp - 8] = block_cc5Ry_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5RH; else goto cc5Rz;
       uc5RH: // global
           call _cc5Ry(R1) args: 0, res: 0, upd: 0;
       cc5Rz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshow_info" {
     Data.Version.$fShowVersion_$cshow_info:
         const Data.Version.$fShowVersion_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sc5NE_srt+24;
 },
 _cc5Ry() //  [R1]
         { []
         }
     {offset
       cc5Ry: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Ry_info" {
     block_cc5Ry_info:
         const _cc5Ry;
         const 0;
         const 4294967326;
         const Sc5NE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.079525251 UTC

[section ""data" . Data.Version.$fShowVersion1_closure" {
     Data.Version.$fShowVersion1_closure:
         const Data.Version.$fShowVersion1_info;
         const 0;
 },
 Data.Version.$fShowVersion1_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5S0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5S1; else goto cc5S2;
       cc5S1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fShowVersion1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5S2: // global
           I64[Sp - 16] = block_cc5RX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc5S6; else goto cc5RY;
       uc5S6: // global
           call _cc5RX(R1) args: 0, res: 0, upd: 0;
       cc5RY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion1_info" {
     Data.Version.$fShowVersion1_info:
         const Data.Version.$fShowVersion1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc5NE_srt+24;
 },
 _cc5RX() //  [R1]
         { []
         }
     {offset
       cc5RX: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call Data.Version.$w$cshowsPrec_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5RX_info" {
     block_cc5RX_info:
         const _cc5RX;
         const 1;
         const 4294967326;
         const Sc5NE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.084550392 UTC

[section ""data" . Data.Version.$fShowVersion_$cshowList_closure" {
     Data.Version.$fShowVersion_$cshowList_closure:
         const Data.Version.$fShowVersion_$cshowList_info;
         const 0;
 },
 Data.Version.$fShowVersion_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5Sl: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Version.$fShowVersion1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fShowVersion_$cshowList_info" {
     Data.Version.$fShowVersion_$cshowList_info:
         const Data.Version.$fShowVersion_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sc5NE_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.087588304 UTC

[section ""data" . Data.Version.$fShowVersion_closure" {
     Data.Version.$fShowVersion_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Version.$fShowVersion_$cshowsPrec_closure+3;
         const Data.Version.$fShowVersion_$cshow_closure+1;
         const Data.Version.$fShowVersion_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.089295689 UTC

[section ""data" . f2_rc3YB_closure" {
     f2_rc3YB_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.090938946 UTC

[section ""cstring" . Data.Version.showVersion2_bytes" {
     Data.Version.showVersion2_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.09311025 UTC

[section ""data" . Data.Version.showVersion1_closure" {
     Data.Version.showVersion1_closure:
         const Data.Version.showVersion1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.showVersion1_entry() //  [R1]
         { []
         }
     {offset
       cc5SB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5SC; else goto cc5SD;
       cc5SC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5SD: // global
           (_cc5Sy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5Sy::I64 == 0) goto cc5SA; else goto cc5Sz;
       cc5SA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5Sz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5Sy::I64;
           R2 = Data.Version.showVersion2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.showVersion1_info" {
     Data.Version.showVersion1_info:
         const Data.Version.showVersion1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.099000601 UTC

[section ""data" . Data.Version.showVersion_go_closure" {
     Data.Version.showVersion_go_closure:
         const Data.Version.showVersion_go_info;
 },
 sat_sc5vG_entry() //  [R1]
         { []
         }
     {offset
       cc5T0: // global
           R2 = P64[R1 + 16];
           call Data.Version.showVersion_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5vG_info" {
     sat_sc5vG_info:
         const sat_sc5vG_entry;
         const 1;
         const 16;
 },
 Data.Version.showVersion_go_entry() //  [R2]
         { []
         }
     {offset
       cc5T7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5T8; else goto cc5T9;
       cc5T8: // global
           R2 = R2;
           R1 = Data.Version.showVersion_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5T9: // global
           I64[Sp - 8] = block_cc5SQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5Tg; else goto cc5SR;
       uc5Tg: // global
           call _cc5SQ(R1) args: 0, res: 0, upd: 0;
       cc5SR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.showVersion_go_info" {
     Data.Version.showVersion_go_info:
         const Data.Version.showVersion_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc5SQ() //  [R1]
         { []
         }
     {offset
       cc5SQ: // global
           if (R1 & 7 == 1) goto cc5T4; else goto cc5T5;
       cc5T4: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5T5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc5Tf; else goto cc5Te;
       cc5Tf: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5Te: // global
           _sc5vD::P64 = P64[R1 + 6];
           _sc5vE::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_sc5vG_info;
           P64[Hp - 24] = _sc5vE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = f2_rc3YB_closure+1;
           P64[Hp] = _sc5vD::P64;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5SQ_info" {
     block_cc5SQ_info:
         const _cc5SQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.109041324 UTC

[section ""data" . Data.Version.$wshowVersion_closure" {
     Data.Version.$wshowVersion_closure:
         const Data.Version.$wshowVersion_info;
         const 0;
 },
 arg_sc5vJ_entry() //  [R1]
         { []
         }
     {offset
       cc5TJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5TK; else goto cc5TL;
       cc5TK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5TL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Version.showVersion_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . arg_sc5vJ_info" {
     arg_sc5vJ_info:
         const arg_sc5vJ_entry;
         const 1;
         const 16;
 },
 sat_sc5vS_entry() //  [R1]
         { []
         }
     {offset
       cc5U6: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_sc5vN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5vS_info" {
     sat_sc5vS_info:
         const sat_sc5vS_entry;
         const 2;
         const 18;
 },
 go_sc5vN_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Ud: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc5Ue; else goto cc5Uf;
       cc5Ue: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Uf: // global
           I64[Sp - 24] = block_cc5TW_info;
           _sc5vN::P64 = R1;
           _sc5vJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sc5vJ::P64;
           P64[Sp - 8] = _sc5vN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uc5Ul; else goto cc5TX;
       uc5Ul: // global
           call _cc5TW(R1) args: 0, res: 0, upd: 0;
       cc5TX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sc5vN_info" {
     go_sc5vN_info:
         const go_sc5vN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc5TW() //  [R1]
         { []
         }
     {offset
       cc5TW: // global
           if (R1 & 7 == 1) goto cc5Ua; else goto cc5Ub;
       cc5Ua: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5Ub: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5Uk; else goto cc5Uj;
       cc5Uk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5Uj: // global
           _sc5vQ::P64 = P64[R1 + 6];
           _sc5vR::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sc5vS_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sc5vR::P64;
           R3 = Hp - 24;
           R2 = _sc5vQ::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5TW_info" {
     block_cc5TW_info:
         const _cc5TW;
         const 2;
         const 30;
 },
 sat_sc5vT_entry() //  [R1]
         { []
         }
     {offset
       cc5Uq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Ur; else goto cc5Us;
       cc5Ur: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Us: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.showVersion1_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5vT_info" {
     sat_sc5vT_info:
         const sat_sc5vT_entry;
         const 1;
         const 4294967312;
         const Sc5NE_srt+56;
 },
 Data.Version.$wshowVersion_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5Ux: // global
           _sc5vI::P64 = R3;
           _sc5vH::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Uy; else goto cc5Uz;
       cc5Uz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5UB; else goto cc5UA;
       cc5UB: // global
           HpAlloc = 24;
           goto cc5Uy;
       cc5Uy: // global
           R3 = _sc5vI::P64;
           R2 = _sc5vH::P64;
           R1 = Data.Version.$wshowVersion_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5UA: // global
           I64[Hp - 16] = arg_sc5vJ_info;
           P64[Hp] = _sc5vI::P64;
           I64[Sp - 16] = block_cc5TM_info;
           R3 = _sc5vH::P64;
           R2 = GHC.Show.$fShowInt_$cshow_closure+1;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wshowVersion_info" {
     Data.Version.$wshowVersion_info:
         const Data.Version.$wshowVersion_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc5NE_srt+56;
 },
 _cc5TM() //  [R1]
         { []
         }
     {offset
       cc5TM: // global
           _cc5TF::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cc5Uu; else goto cc5Uv;
       cc5Uu: // global
           R1 = _cc5TF::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc5Uv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc5UH; else goto cc5UG;
       cc5UH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5UG: // global
           _sc5vL::P64 = P64[R1 + 6];
           _sc5vM::P64 = P64[R1 + 14];
           I64[Hp - 56] = go_sc5vN_info;
           P64[Hp - 48] = _cc5TF::P64;
           I64[Hp - 40] = sat_sc5vT_info;
           P64[Hp - 24] = _sc5vM::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc5vL::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           R1 = Hp - 55;
           Sp = Sp + 16;
           call go_sc5vN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5TM_info" {
     block_cc5TM_info:
         const _cc5TM;
         const 1;
         const 4294967326;
         const Sc5NE_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.12366513 UTC

[section ""data" . Data.Version.showVersion_closure" {
     Data.Version.showVersion_closure:
         const Data.Version.showVersion_info;
         const 0;
 },
 Data.Version.showVersion_entry() //  [R2]
         { []
         }
     {offset
       cc5VB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc5VC; else goto cc5VD;
       cc5VC: // global
           R2 = R2;
           R1 = Data.Version.showVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5VD: // global
           I64[Sp - 8] = block_cc5Vy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc5VH; else goto cc5Vz;
       uc5VH: // global
           call _cc5Vy(R1) args: 0, res: 0, upd: 0;
       cc5Vz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.showVersion_info" {
     Data.Version.showVersion_info:
         const Data.Version.showVersion_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc5NE_srt+64;
 },
 _cc5Vy() //  [R1]
         { []
         }
     {offset
       cc5Vy: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Version.$wshowVersion_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Vy_info" {
     block_cc5Vy_info:
         const _cc5Vy;
         const 0;
         const 4294967326;
         const Sc5NE_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.128905893 UTC

[section ""data" . Data.Version.$fReadVersion18_closure" {
     Data.Version.$fReadVersion18_closure:
         const Data.Version.$fReadVersion18_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion18_entry() //  [R1]
         { []
         }
     {offset
       cc5VY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5VZ; else goto cc5W0;
       cc5VZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5W0: // global
           (_cc5VV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5VV::I64 == 0) goto cc5VX; else goto cc5VW;
       cc5VX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5VW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5VV::I64;
           R2 = Data.Version.$fReadVersion19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion18_info" {
     Data.Version.$fReadVersion18_info:
         const Data.Version.$fReadVersion18_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.132593502 UTC

[section ""data" . Data.Version.$fReadVersion_lexeme1_closure" {
     Data.Version.$fReadVersion_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Version.$fReadVersion18_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.134720085 UTC

[section ""cstring" . Data.Version.$fReadVersion17_bytes" {
     Data.Version.$fReadVersion17_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.137549573 UTC

[section ""data" . Data.Version.$fReadVersion16_closure" {
     Data.Version.$fReadVersion16_closure:
         const Data.Version.$fReadVersion16_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion16_entry() //  [R1]
         { []
         }
     {offset
       cc5Wh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Wi; else goto cc5Wj;
       cc5Wi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Wj: // global
           (_cc5We::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5We::I64 == 0) goto cc5Wg; else goto cc5Wf;
       cc5Wg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5Wf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5We::I64;
           R2 = Data.Version.$fReadVersion17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion16_info" {
     Data.Version.$fReadVersion16_info:
         const Data.Version.$fReadVersion16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.141135499 UTC

[section ""data" . Data.Version.$fReadVersion_lexeme_closure" {
     Data.Version.$fReadVersion_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion16_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.142792207 UTC

[section ""cstring" . Data.Version.$fReadVersion15_bytes" {
     Data.Version.$fReadVersion15_bytes:
         I8[] [118,101,114,115,105,111,110,66,114,97,110,99,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.144939102 UTC

[section ""data" . Data.Version.$fReadVersion14_closure" {
     Data.Version.$fReadVersion14_closure:
         const Data.Version.$fReadVersion14_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion14_entry() //  [R1]
         { []
         }
     {offset
       cc5WA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5WB; else goto cc5WC;
       cc5WB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5WC: // global
           (_cc5Wx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5Wx::I64 == 0) goto cc5Wz; else goto cc5Wy;
       cc5Wz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5Wy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5Wx::I64;
           R2 = Data.Version.$fReadVersion15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion14_info" {
     Data.Version.$fReadVersion14_info:
         const Data.Version.$fReadVersion14_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.149344495 UTC

[section ""data" . Data.Version.$fReadVersion13_closure" {
     Data.Version.$fReadVersion13_closure:
         const Data.Version.$fReadVersion13_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion13_entry() //  [R1]
         { []
         }
     {offset
       cc5WR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5WS; else goto cc5WT;
       cc5WS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5WT: // global
           (_cc5WO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5WO::I64 == 0) goto cc5WQ; else goto cc5WP;
       cc5WQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5WP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5WO::I64;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion13_info" {
     Data.Version.$fReadVersion13_info:
         const Data.Version.$fReadVersion13_entry;
         const 0;
         const 4294967317;
         const Sc5NE_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.15316345 UTC

[section ""data" . Data.Version.$fReadVersion12_closure" {
     Data.Version.$fReadVersion12_closure:
         const Data.Version.$fReadVersion12_info;
         const 0;
 },
 Data.Version.$fReadVersion12_entry() //  []
         { []
         }
     {offset
       cc5X6: // global
           R1 = Data.Version.$fReadVersion13_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion12_info" {
     Data.Version.$fReadVersion12_info:
         const Data.Version.$fReadVersion12_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc5NE_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.156542642 UTC

[section ""data" . Data.Version.$fReadVersion_n_closure" {
     Data.Version.$fReadVersion_n_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.158291387 UTC

[section ""cstring" . Data.Version.$fReadVersion11_bytes" {
     Data.Version.$fReadVersion11_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.160479865 UTC

[section ""data" . Data.Version.$fReadVersion10_closure" {
     Data.Version.$fReadVersion10_closure:
         const Data.Version.$fReadVersion10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion10_entry() //  [R1]
         { []
         }
     {offset
       cc5Xl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Xm; else goto cc5Xn;
       cc5Xm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Xn: // global
           (_cc5Xi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5Xi::I64 == 0) goto cc5Xk; else goto cc5Xj;
       cc5Xk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5Xj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5Xi::I64;
           R2 = Data.Version.$fReadVersion11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion10_info" {
     Data.Version.$fReadVersion10_info:
         const Data.Version.$fReadVersion10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.164051437 UTC

[section ""data" . Data.Version.$fReadVersion9_closure" {
     Data.Version.$fReadVersion9_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.165940667 UTC

[section ""cstring" . Data.Version.$fReadVersion8_bytes" {
     Data.Version.$fReadVersion8_bytes:
         I8[] [118,101,114,115,105,111,110,84,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.168570717 UTC

[section ""data" . Data.Version.$fReadVersion7_closure" {
     Data.Version.$fReadVersion7_closure:
         const Data.Version.$fReadVersion7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion7_entry() //  [R1]
         { []
         }
     {offset
       cc5XE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5XF; else goto cc5XG;
       cc5XF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5XG: // global
           (_cc5XB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5XB::I64 == 0) goto cc5XD; else goto cc5XC;
       cc5XD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5XC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5XB::I64;
           R2 = Data.Version.$fReadVersion8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion7_info" {
     Data.Version.$fReadVersion7_info:
         const Data.Version.$fReadVersion7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.172303947 UTC

[section ""data" . Data.Version.$fReadVersion6_closure" {
     Data.Version.$fReadVersion6_closure:
         const Data.Version.$fReadVersion6_info;
         const 0;
 },
 Data.Version.$fReadVersion6_entry() //  []
         { []
         }
     {offset
       cc5XT: // global
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion6_info" {
     Data.Version.$fReadVersion6_info:
         const Data.Version.$fReadVersion6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc5NE_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.175905423 UTC

[section ""data" . Data.Version.$fReadVersion4_closure" {
     Data.Version.$fReadVersion4_closure:
         const Data.Version.$fReadVersion4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion4_entry() //  [R1]
         { []
         }
     {offset
       cc5Y6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc5Y7; else goto cc5Y8;
       cc5Y7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc5Y8: // global
           (_cc5Y3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc5Y3::I64 == 0) goto cc5Y5; else goto cc5Y4;
       cc5Y5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc5Y4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc5Y3::I64;
           R2 = Data.Version.$fReadVersion5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion4_info" {
     Data.Version.$fReadVersion4_info:
         const Data.Version.$fReadVersion4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.1797646 UTC

[section ""data" . Data.Version.$fReadVersion3_closure" {
     Data.Version.$fReadVersion3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Version.$fReadVersion4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.186447106 UTC

[section ""data" . Data.Version.$w$creadPrec_closure" {
     Data.Version.$w$creadPrec_closure:
         const Data.Version.$w$creadPrec_info;
         const 0;
 },
 sat_sc5wb_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5YV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5YZ; else goto cc5YY;
       cc5YZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5YY: // global
           _sc5w2::P64 = P64[R1 + 7];
           _sc5w6::P64 = P64[R1 + 15];
           _sc5w8::P64 = P64[R1 + 23];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc5w6::P64;
           P64[Hp] = _sc5w8::P64;
           R2 = Hp - 15;
           R1 = _sc5w2::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wb_info" {
     sat_sc5wb_info:
         const sat_sc5wb_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sc5we_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Z3: // global
           _sc5w8::P64 = R2;
           _sc5we::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5Z4; else goto cc5Z5;
       cc5Z5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc5Z7; else goto cc5Z6;
       cc5Z7: // global
           HpAlloc = 32;
           goto cc5Z4;
       cc5Z4: // global
           R2 = _sc5w8::P64;
           R1 = _sc5we::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Z6: // global
           _sc5w2::P64 = P64[_sc5we::P64 + 7];
           _sc5w6::P64 = P64[_sc5we::P64 + 15];
           I64[Hp - 24] = sat_sc5wb_info;
           P64[Hp - 16] = _sc5w2::P64;
           P64[Hp - 8] = _sc5w6::P64;
           P64[Hp] = _sc5w8::P64;
           I64[Sp - 8] = block_cc5Z0_info;
           R3 = Hp - 23;
           R2 = Data.Version.$fReadVersion3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5we_info" {
     sat_sc5we_info:
         const sat_sc5we_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const Sc5NE_srt+104;
 },
 _cc5Z0() //  [R1]
         { []
         }
     {offset
       cc5Z0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5Za; else goto cc5Z9;
       cc5Za: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5Z9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Z0_info" {
     block_cc5Z0_info:
         const _cc5Z0;
         const 0;
         const 30;
 },
 sat_sc5wf_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Zb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5Zf; else goto cc5Ze;
       cc5Zf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Ze: // global
           _sc5w2::P64 = P64[R1 + 7];
           _sc5w6::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sc5we_info;
           P64[Hp - 8] = _sc5w2::P64;
           P64[Hp] = _sc5w6::P64;
           R5 = Hp - 15;
           R4 = Data.Version.$fReadVersion_n_closure+1;
           R3 = Data.Version.$fReadVersion6_closure+1;
           R2 = Data.Version.$fReadVersion7_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wf_info" {
     sat_sc5wf_info:
         const sat_sc5wf_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const Sc5NE_srt+104;
 },
 sat_sc5wi_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Zj: // global
           _sc5w6::P64 = R2;
           _sc5wi::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5Zk; else goto cc5Zl;
       cc5Zl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc5Zn; else goto cc5Zm;
       cc5Zn: // global
           HpAlloc = 24;
           goto cc5Zk;
       cc5Zk: // global
           R2 = _sc5w6::P64;
           R1 = _sc5wi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Zm: // global
           _sc5w2::P64 = P64[_sc5wi::P64 + 7];
           I64[Hp - 16] = sat_sc5wf_info;
           P64[Hp - 8] = _sc5w2::P64;
           P64[Hp] = _sc5w6::P64;
           I64[Sp - 8] = block_cc5Zg_info;
           R3 = Hp - 15;
           R2 = Data.Version.$fReadVersion9_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wi_info" {
     sat_sc5wi_info:
         const sat_sc5wi_entry;
         const 1;
         const 270582939657;
         const 4294967301;
         const Sc5NE_srt+104;
 },
 _cc5Zg() //  [R1]
         { []
         }
     {offset
       cc5Zg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5Zq; else goto cc5Zp;
       cc5Zq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5Zp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Zg_info" {
     block_cc5Zg_info:
         const _cc5Zg;
         const 0;
         const 30;
 },
 sat_sc5wj_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Zr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5Zv; else goto cc5Zu;
       cc5Zv: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5Zu: // global
           _sc5w2::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_sc5wi_info;
           P64[Hp] = _sc5w2::P64;
           R5 = Hp - 7;
           R4 = Data.Version.$fReadVersion_n_closure+1;
           R3 = Data.Version.$fReadVersion12_closure+1;
           R2 = Data.Version.$fReadVersion14_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wj_info" {
     sat_sc5wj_info:
         const sat_sc5wj_entry;
         const 1;
         const 1095216660489;
         const 4294967301;
         const Sc5NE_srt+104;
 },
 sat_sc5wm_entry() //  [R1, R2]
         { []
         }
     {offset
       cc5Zz: // global
           _sc5w4::P64 = R2;
           _sc5wm::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5ZA; else goto cc5ZB;
       cc5ZB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5ZD; else goto cc5ZC;
       cc5ZD: // global
           HpAlloc = 16;
           goto cc5ZA;
       cc5ZA: // global
           R2 = _sc5w4::P64;
           R1 = _sc5wm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc5ZC: // global
           _sc5w2::P64 = P64[_sc5wm::P64 + 7];
           I64[Hp - 8] = sat_sc5wj_info;
           P64[Hp] = _sc5w2::P64;
           I64[Sp - 8] = block_cc5Zw_info;
           R3 = Hp - 7;
           R2 = Data.Version.$fReadVersion_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wm_info" {
     sat_sc5wm_info:
         const sat_sc5wm_entry;
         const 1;
         const 2194728288265;
         const 4294967301;
         const Sc5NE_srt+104;
 },
 _cc5Zw() //  [R1]
         { []
         }
     {offset
       cc5Zw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5ZG; else goto cc5ZF;
       cc5ZG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5ZF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5Zw_info" {
     block_cc5Zw_info:
         const _cc5Zw;
         const 0;
         const 30;
 },
 Data.Version.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cc5ZK: // global
           _sc5w2::P64 = R3;
           _sc5w1::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cc5ZL; else goto cc5ZM;
       cc5ZM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5ZO; else goto cc5ZN;
       cc5ZO: // global
           HpAlloc = 16;
           goto cc5ZL;
       cc5ZL: // global
           R3 = _sc5w2::P64;
           R2 = _sc5w1::I64;
           R1 = Data.Version.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc5ZN: // global
           if (%MO_S_Gt_W64(_sc5w1::I64, 11)) goto cc5ZI; else goto cc5ZJ;
       cc5ZI: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc5ZJ: // global
           I64[Hp - 8] = sat_sc5wm_info;
           P64[Hp] = _sc5w2::P64;
           I64[Sp - 8] = block_cc5ZP_info;
           R3 = Hp - 7;
           R2 = Data.Version.$fReadVersion_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$w$creadPrec_info" {
     Data.Version.$w$creadPrec_info:
         const Data.Version.$w$creadPrec_entry;
         const 0;
         const 8791798054926;
         const 8589934605;
         const Sc5NE_srt+104;
 },
 _cc5ZP() //  [R1]
         { []
         }
     {offset
       cc5ZP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc5ZU; else goto cc5ZT;
       cc5ZU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc5ZT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc5ZP_info" {
     block_cc5ZP_info:
         const _cc5ZP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.209132039 UTC

[section ""data" . Data.Version.$fReadVersion2_closure" {
     Data.Version.$fReadVersion2_closure:
         const Data.Version.$fReadVersion2_info;
         const 0;
 },
 Data.Version.$fReadVersion2_entry() //  [R2, R3]
         { []
         }
     {offset
       cc60Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc610; else goto cc611;
       cc610: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.$fReadVersion2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc611: // global
           I64[Sp - 16] = block_cc60W_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc615; else goto cc60X;
       uc615: // global
           call _cc60W(R1) args: 0, res: 0, upd: 0;
       cc60X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion2_info" {
     Data.Version.$fReadVersion2_info:
         const Data.Version.$fReadVersion2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc5NE_srt+176;
 },
 _cc60W() //  [R1]
         { []
         }
     {offset
       cc60W: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.Version.$w$creadPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc60W_info" {
     block_cc60W_info:
         const _cc60W;
         const 1;
         const 4294967326;
         const Sc5NE_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.214140761 UTC

[section ""data" . Data.Version.$fReadVersion1_closure" {
     Data.Version.$fReadVersion1_closure:
         const Data.Version.$fReadVersion1_info;
         const 0;
 },
 Data.Version.$fReadVersion1_entry() //  [R2, R3]
         { []
         }
     {offset
       cc61k: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Version.$fReadVersion2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion1_info" {
     Data.Version.$fReadVersion1_info:
         const Data.Version.$fReadVersion1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc5NE_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.218603986 UTC

[section ""data" . Data.Version.$fReadVersion_$creadsPrec_closure" {
     Data.Version.$fReadVersion_$creadsPrec_closure:
         const Data.Version.$fReadVersion_$creadsPrec_info;
         const 0;
 },
 sat_sc5wu_entry() //  [R1]
         { []
         }
     {offset
       cc61z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc61A; else goto cc61B;
       cc61A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc61B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Version.$fReadVersion2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5wu_info" {
     sat_sc5wu_info:
         const sat_sc5wu_entry;
         const 1;
         const 12884901904;
         const Sc5NE_srt+192;
 },
 Data.Version.$fReadVersion_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cc61C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc61G; else goto cc61F;
       cc61G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Version.$fReadVersion_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc61F: // global
           I64[Hp - 16] = sat_sc5wu_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadsPrec_info" {
     Data.Version.$fReadVersion_$creadsPrec_info:
         const Data.Version.$fReadVersion_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const Sc5NE_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.224116585 UTC

[section ""data" . Data.Version.$fReadVersion_$creadListPrec_closure" {
     Data.Version.$fReadVersion_$creadListPrec_closure:
         const Data.Version.$fReadVersion_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       cc61Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc620; else goto cc621;
       cc620: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc621: // global
           (_cc61W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc61W::I64 == 0) goto cc61Y; else goto cc61X;
       cc61Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc61X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc61W::I64;
           R2 = Data.Version.$fReadVersion1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadListPrec_info" {
     Data.Version.$fReadVersion_$creadListPrec_info:
         const Data.Version.$fReadVersion_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const Sc5NE_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.228251123 UTC

[section ""data" . Data.Version.$fReadVersion20_closure" {
     Data.Version.$fReadVersion20_closure:
         const Data.Version.$fReadVersion20_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.$fReadVersion20_entry() //  [R1]
         { []
         }
     {offset
       cc62g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc62h; else goto cc62i;
       cc62h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc62i: // global
           (_cc62d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc62d::I64 == 0) goto cc62f; else goto cc62e;
       cc62f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc62e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc62d::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = Data.Version.$fReadVersion_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion20_info" {
     Data.Version.$fReadVersion20_info:
         const Data.Version.$fReadVersion20_entry;
         const 0;
         const 4294967317;
         const Sc5NE_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.232441239 UTC

[section ""data" . Data.Version.$fReadVersion_$creadList_closure" {
     Data.Version.$fReadVersion_$creadList_closure:
         const Data.Version.$fReadVersion_$creadList_info;
         const 0;
 },
 Data.Version.$fReadVersion_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cc62w: // global
           R3 = R2;
           R2 = Data.Version.$fReadVersion20_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$fReadVersion_$creadList_info" {
     Data.Version.$fReadVersion_$creadList_info:
         const Data.Version.$fReadVersion_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc5NE_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.235677328 UTC

[section ""data" . Data.Version.$fReadVersion_closure" {
     Data.Version.$fReadVersion_closure:
         const GHC.Read.C:Read_con_info;
         const Data.Version.$fReadVersion_$creadsPrec_closure+1;
         const Data.Version.$fReadVersion_$creadList_closure+1;
         const Data.Version.$fReadVersion1_closure+2;
         const Data.Version.$fReadVersion_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.237952589 UTC

[section ""data" . Data.Version.parseVersion5_closure" {
     Data.Version.parseVersion5_closure:
         const Data.Version.parseVersion5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion5_entry() //  [R1]
         { []
         }
     {offset
       cc62K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc62L; else goto cc62M;
       cc62L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc62M: // global
           (_cc62H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc62H::I64 == 0) goto cc62J; else goto cc62I;
       cc62J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc62I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc62H::I64;
           R2 = Text.Read.readEither5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion5_info" {
     Data.Version.parseVersion5_info:
         const Data.Version.parseVersion5_entry;
         const 0;
         const 12884901909;
         const Sc5NE_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.242991309 UTC

[section ""data" . Data.Version.parseVersion4_closure" {
     Data.Version.parseVersion4_closure:
         const Data.Version.parseVersion4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion4_entry() //  [R1]
         { []
         }
     {offset
       cc631: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc632; else goto cc633;
       cc632: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc633: // global
           (_cc62Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc62Y::I64 == 0) goto cc630; else goto cc62Z;
       cc630: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc62Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc62Y::I64;
           R2 = Text.Read.readEither2_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion4_info" {
     Data.Version.parseVersion4_info:
         const Data.Version.parseVersion4_entry;
         const 0;
         const 21474836501;
         const Sc5NE_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.24696273 UTC

[section ""data" . Data.Version.parseVersion6_closure" {
     Data.Version.parseVersion6_closure:
         const Data.Version.parseVersion6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Version.parseVersion6_entry() //  [R1]
         { []
         }
     {offset
       cc63i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc63j; else goto cc63k;
       cc63j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc63k: // global
           (_cc63f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc63f::I64 == 0) goto cc63h; else goto cc63g;
       cc63h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc63g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc63f::I64;
           R4 = Text.Read.readEither7_closure+1;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion6_info" {
     Data.Version.parseVersion6_info:
         const Data.Version.parseVersion6_entry;
         const 0;
         const 12884901909;
         const Sc5NE_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.25445661 UTC

[section ""data" . Data.Version.$wp_closure" {
     Data.Version.$wp_closure:
         const Data.Version.$wp_info;
         const 0;
 },
 sat_sc5wM_entry() //  [R1]
         { []
         }
     {offset
       cc648: // global
           _sc5wM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc649; else goto cc64a;
       cc64a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc64c; else goto cc64b;
       cc64c: // global
           HpAlloc = 24;
           goto cc649;
       cc649: // global
           R1 = _sc5wM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc64b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5wM::P64;
           _sc5wx::P64 = P64[_sc5wM::P64 + 16];
           _sc5wD::P64 = P64[_sc5wM::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc5wx::P64;
           P64[Hp] = _sc5wD::P64;
           I64[Sp - 24] = block_cc646_info;
           R3 = Hp - 14;
           R2 = Data.Version.parseVersion6_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc5wM_info" {
     sat_sc5wM_info:
         const sat_sc5wM_entry;
         const 2;
         const 30064771090;
         const Sc5NE_srt+288;
 },
 _cc646() //  [R1]
         { []
         }
     {offset
       cc646: // global
           I64[Sp] = block_cc64f_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc646_info" {
     block_cc646_info:
         const _cc646;
         const 0;
         const 12884901918;
         const Sc5NE_srt+288;
 },
 _cc64f() //  [R1]
         { []
         }
     {offset
       cc64f: // global
           if (R1 & 7 == 1) goto cc64m; else goto cc64r;
       cc64m: // global
           R1 = Data.Version.parseVersion5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc64r: // global
           I64[Sp - 8] = block_cc64p_info;
           _sc5wH::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sc5wH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc64F; else goto cc64s;
       uc64F: // global
           call _cc64p(R1) args: 0, res: 0, upd: 0;
       cc64s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc64f_info" {
     block_cc64f_info:
         const _cc64f;
         const 0;
         const 12884901918;
         const Sc5NE_srt+288;
 },
 _cc64p() //  [R1]
         { []
         }
     {offset
       cc64p: // global
           if (R1 & 7 == 1) goto cc64y; else goto cc64C;
       cc64y: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc64C: // global
           R1 = Data.Version.parseVersion4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc64p_info" {
     block_cc64p_info:
         const _cc64p;
         const 1;
         const 4294967326;
         const Sc5NE_srt+288;
 },
 sat_sc5wN_entry() //  [R1, R2]
         { []
         }
     {offset
       cc64G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc64K; else goto cc64J;
       cc64K: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc64J: // global
           _sc5wv::P64 = P64[R1 + 7];
           _sc5wx::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sc5wM_info;
           P64[Hp - 8] = _sc5wx::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sc5wv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wN_info" {
     sat_sc5wN_info:
         const sat_sc5wN_entry;
         const 2;
         const 30064771083;
         const 4294967301;
         const Sc5NE_srt+288;
 },
 sat_sc5wQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cc64L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc64M; else goto cc64N;
       cc64M: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc64N: // global
           I64[Sp - 16] = block_cc63E_info;
           _sc5wv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc5wv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc650; else goto cc63F;
       uc650: // global
           call _cc63E(R1) args: 0, res: 0, upd: 0;
       cc63F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5wQ_info" {
     sat_sc5wQ_info:
         const sat_sc5wQ_entry;
         const 1;
         const 30064771081;
         const 4294967301;
         const Sc5NE_srt+288;
 },
 _cc63E() //  [R1]
         { []
         }
     {offset
       cc63E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc64Q; else goto cc64P;
       cc64Q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc64P: // global
           if (I64[R1 + 7] - 48 > 9) goto cc64S; else goto cc64W;
       cc64S: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc64W: // global
           I64[Hp - 16] = sat_sc5wN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc64T_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc63E_info" {
     block_cc63E_info:
         const _cc63E;
         const 1;
         const 30064771102;
         const Sc5NE_srt+288;
 },
 _cc64T() //  [R1]
         { []
         }
     {offset
       cc64T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc64Z; else goto cc64Y;
       cc64Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc64Y: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc64T_info" {
     block_cc64T_info:
         const _cc64T;
         const 0;
         const 30;
 },
 Data.Version.$wp_entry() //  [R2]
         { []
         }
     {offset
       cc651: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc655; else goto cc654;
       cc655: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Version.$wp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc654: // global
           I64[Hp - 8] = sat_sc5wQ_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wp_info" {
     Data.Version.$wp_info:
         const Data.Version.$wp_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const Sc5NE_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.272521515 UTC

[section ""data" . Data.Version.parseVersion3_closure" {
     Data.Version.parseVersion3_closure:
         const Data.Version.parseVersion3_info;
         const 0;
 },
 Data.Version.parseVersion3_entry() //  [R2]
         { []
         }
     {offset
       cc66a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc66b; else goto cc66c;
       cc66b: // global
           R2 = R2;
           R1 = Data.Version.parseVersion3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc66c: // global
           I64[Sp - 8] = block_cc667_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wp_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion3_info" {
     Data.Version.parseVersion3_info:
         const Data.Version.parseVersion3_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc5NE_srt+312;
 },
 _cc667() //  [R1]
         { []
         }
     {offset
       cc667: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc66f; else goto cc66e;
       cc66f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc66e: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc667_info" {
     block_cc667_info:
         const _cc667;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.282923163 UTC

[section ""data" . Data.Version.parseVersion_m2_closure" {
     Data.Version.parseVersion_m2_closure:
         const Data.Version.parseVersion_m2_info;
         const 0;
 },
 lvl4_sc5wV_entry() //  [R1]
         { []
         }
     {offset
       cc66C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc66D; else goto cc66E;
       cc66D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc66E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc66z_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.Version.$wp_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_sc5wV_info" {
     lvl4_sc5wV_info:
         const lvl4_sc5wV_entry;
         const 1;
         const 4294967312;
         const Sc5NE_srt+312;
 },
 _cc66z() //  [R1]
         { []
         }
     {offset
       cc66z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc66H; else goto cc66G;
       cc66H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cc66G: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc66z_info" {
     block_cc66z_info:
         const _cc66z;
         const 0;
         const 30;
 },
 sat_sc5x2_entry() //  [R1, R2]
         { []
         }
     {offset
       cc66Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc66R; else goto cc66S;
       cc66R: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc66S: // global
           I64[Sp - 16] = block_cc66N_info;
           _sc5wV::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc5wV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc670; else goto cc66O;
       uc670: // global
           call _cc66N(R1) args: 0, res: 0, upd: 0;
       cc66O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5x2_info" {
     sat_sc5x2_info:
         const sat_sc5x2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc66N() //  [R1]
         { []
         }
     {offset
       cc66N: // global
           if (I64[R1 + 7] == 46) goto cc66Z; else goto cc66Y;
       cc66Z: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cc66Y: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc66N_info" {
     block_cc66N_info:
         const _cc66N;
         const 1;
         const 30;
 },
 Data.Version.parseVersion_m2_entry() //  [R2]
         { []
         }
     {offset
       cc672: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc676; else goto cc675;
       cc676: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Version.parseVersion_m2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc675: // global
           I64[Hp - 48] = lvl4_sc5wV_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_sc5x2_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion_m2_info" {
     Data.Version.parseVersion_m2_info:
         const Data.Version.parseVersion_m2_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sc5NE_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.298893662 UTC

[section ""data" . Data.Version.$wlvl_closure" {
     Data.Version.$wlvl_closure:
         const Data.Version.$wlvl_info;
 },
 sat_sc5xf_entry() //  [R1, R2]
         { []
         }
     {offset
       cc682: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc686; else goto cc685;
       cc686: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc685: // global
           _sc5x3::P64 = P64[R1 + 7];
           _sc5xc::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc5xc::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _sc5x3::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xf_info" {
     sat_sc5xf_info:
         const sat_sc5xf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 $www1_sc5x4_entry() //  [R1, R2]
         { []
         }
     {offset
       cc687: // global
           _sc5x5::I64 = R2;
           _sc5x4::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cc688; else goto cc689;
       cc689: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cc68b; else goto cc68a;
       cc68b: // global
           HpAlloc = 40;
           goto cc688;
       cc688: // global
           R2 = _sc5x5::I64;
           R1 = _sc5x4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc68a: // global
           _sc5x3::P64 = P64[_sc5x4::P64 + 7];
           (_sc5xa::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(_sc5x5::I64);
           if (_sc5xa::I64 == 0) goto cc68k; else goto cc68g;
       cc68k: // global
           Hp = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc68g: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _sc5x5::I64;
           I64[Hp - 16] = sat_sc5xf_info;
           P64[Hp - 8] = _sc5x3::P64;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_cc68c_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isAlphaNum_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $www1_sc5x4_info" {
     $www1_sc5x4_info:
         const $www1_sc5x4_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 _cc68c() //  [R1]
         { []
         }
     {offset
       cc68c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc68j; else goto cc68i;
       cc68j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc68i: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc68c_info" {
     block_cc68c_info:
         const _cc68c;
         const 0;
         const 30;
 },
 ww1_sc5xi_entry() //  [R1, R2]
         { []
         }
     {offset
       cc68t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc68u; else goto cc68v;
       cc68u: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc68v: // global
           I64[Sp - 16] = block_cc68q_info;
           _sc5x4::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc5x4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc68z; else goto cc68r;
       uc68z: // global
           call _cc68q(R1) args: 0, res: 0, upd: 0;
       cc68r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ww1_sc5xi_info" {
     ww1_sc5xi_info:
         const ww1_sc5xi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc68q() //  [R1]
         { []
         }
     {offset
       cc68q: // global
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $www1_sc5x4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc68q_info" {
     block_cc68q_info:
         const _cc68q;
         const 1;
         const 30;
 },
 sat_sc5xr_entry() //  [R1, R2]
         { []
         }
     {offset
       cc68J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc68K; else goto cc68L;
       cc68K: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc68L: // global
           I64[Sp - 16] = block_cc68G_info;
           _sc5xm::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc5xm::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc68T; else goto cc68H;
       uc68T: // global
           call _cc68G(R1) args: 0, res: 0, upd: 0;
       cc68H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xr_info" {
     sat_sc5xr_info:
         const sat_sc5xr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cc68G() //  [R1]
         { []
         }
     {offset
       cc68G: // global
           if (I64[R1 + 7] == 45) goto cc68S; else goto cc68R;
       cc68S: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc68R: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc68G_info" {
     block_cc68G_info:
         const _cc68G;
         const 1;
         const 30;
 },
 Data.Version.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cc68U: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cc68Y; else goto cc68X;
       cc68Y: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Data.Version.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc68X: // global
           I64[Hp - 56] = $www1_sc5x4_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = ww1_sc5xi_info;
           P64[Hp - 32] = Hp - 55;
           I64[Hp - 24] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = sat_sc5xr_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wlvl_info" {
     Data.Version.$wlvl_info:
         const Data.Version.$wlvl_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.317583926 UTC

[section ""data" . Data.Version.parseVersion2_closure" {
     Data.Version.parseVersion2_closure:
         const Data.Version.parseVersion2_info;
 },
 Data.Version.parseVersion2_entry() //  [R2]
         { []
         }
     {offset
       cc69X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc69Y; else goto cc69Z;
       cc69Y: // global
           R2 = R2;
           R1 = Data.Version.parseVersion2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc69Z: // global
           I64[Sp - 8] = block_cc69U_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wlvl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion2_info" {
     Data.Version.parseVersion2_info:
         const Data.Version.parseVersion2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc69U() //  [R1]
         { []
         }
     {offset
       cc69U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc6a2; else goto cc6a1;
       cc6a2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc6a1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc69U_info" {
     block_cc69U_info:
         const _cc69U;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.328716444 UTC

[section ""data" . Data.Version.$wparseVersion_closure" {
     Data.Version.$wparseVersion_closure:
         const Data.Version.$wparseVersion_info;
         const 0;
 },
 a2_sc5xE_entry() //  [R1]
         { []
         }
     {offset
       cc6aR: // global
           _sc5xE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cc6aS; else goto cc6aT;
       cc6aT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc6aV; else goto cc6aU;
       cc6aV: // global
           HpAlloc = 24;
           goto cc6aS;
       cc6aS: // global
           R1 = _sc5xE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc6aU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sc5xE::P64;
           _sc5xx::P64 = P64[_sc5xE::P64 + 16];
           _sc5xD::P64 = P64[_sc5xE::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sc5xx::P64;
           P64[Hp] = _sc5xD::P64;
           I64[Sp - 24] = block_cc6aP_info;
           R3 = Hp - 14;
           R2 = Data.Version.parseVersion6_closure;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . a2_sc5xE_info" {
     a2_sc5xE_info:
         const a2_sc5xE_entry;
         const 2;
         const 30064771090;
         const Sc5NE_srt+288;
 },
 _cc6aP() //  [R1]
         { []
         }
     {offset
       cc6aP: // global
           I64[Sp] = block_cc6aY_info;
           R2 = R1;
           call Text.Read.readEither8_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc6aP_info" {
     block_cc6aP_info:
         const _cc6aP;
         const 0;
         const 12884901918;
         const Sc5NE_srt+288;
 },
 _cc6aY() //  [R1]
         { []
         }
     {offset
       cc6aY: // global
           if (R1 & 7 == 1) goto cc6b5; else goto cc6ba;
       cc6b5: // global
           R1 = Data.Version.parseVersion5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc6ba: // global
           I64[Sp - 8] = block_cc6b8_info;
           _sc5xI::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sc5xI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc6bo; else goto cc6bb;
       uc6bo: // global
           call _cc6b8(R1) args: 0, res: 0, upd: 0;
       cc6bb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cc6aY_info" {
     block_cc6aY_info:
         const _cc6aY;
         const 0;
         const 12884901918;
         const Sc5NE_srt+288;
 },
 _cc6b8() //  [R1]
         { []
         }
     {offset
       cc6b8: // global
           if (R1 & 7 == 1) goto cc6bh; else goto cc6bl;
       cc6bh: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cc6bl: // global
           R1 = Data.Version.parseVersion4_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc6b8_info" {
     block_cc6b8_info:
         const _cc6b8;
         const 1;
         const 4294967326;
         const Sc5NE_srt+288;
 },
 sat_sc5xR_entry() //  [R1, R2]
         { []
         }
     {offset
       cc6bB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc6bF; else goto cc6bE;
       cc6bF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6bE: // global
           _sc5xv::P64 = P64[R1 + 7];
           _sc5xO::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = _sc5xO::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sc5xv::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xR_info" {
     sat_sc5xR_info:
         const sat_sc5xR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sc5xS_entry() //  [R1, R2]
         { []
         }
     {offset
       cc6bG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cc6bK; else goto cc6bJ;
       cc6bK: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6bJ: // global
           _sc5xv::P64 = P64[R1 + 7];
           _sc5xE::P64 = P64[R1 + 15];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sc5xE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sc5xR_info;
           P64[Hp - 8] = _sc5xv::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 15;
           R2 = Data.Version.parseVersion2_closure+1;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xS_info" {
     sat_sc5xS_info:
         const sat_sc5xS_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sc5NE_srt+336;
 },
 sat_sc5xT_entry() //  [R1, R2]
         { []
         }
     {offset
       cc6bL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc6bP; else goto cc6bO;
       cc6bP: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6bO: // global
           _sc5xv::P64 = P64[R1 + 7];
           _sc5xx::P64 = P64[R1 + 15];
           I64[Hp - 48] = a2_sc5xE_info;
           P64[Hp - 32] = _sc5xx::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sc5xS_info;
           P64[Hp - 8] = _sc5xv::P64;
           P64[Hp] = Hp - 48;
           R3 = Hp - 15;
           R2 = Data.Version.parseVersion_m2_closure+1;
           call Text.ParserCombinators.ReadP.endBy3_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xT_info" {
     sat_sc5xT_info:
         const sat_sc5xT_entry;
         const 2;
         const 442381631499;
         const 4294967301;
         const Sc5NE_srt+288;
 },
 sat_sc5xW_entry() //  [R1, R2]
         { []
         }
     {offset
       cc6bQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc6bR; else goto cc6bS;
       cc6bR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6bS: // global
           I64[Sp - 16] = block_cc6an_info;
           _sc5xv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sc5xv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc6c5; else goto cc6ao;
       uc6c5: // global
           call _cc6an(R1) args: 0, res: 0, upd: 0;
       cc6ao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc5xW_info" {
     sat_sc5xW_info:
         const sat_sc5xW_entry;
         const 1;
         const 442381631497;
         const 4294967301;
         const Sc5NE_srt+288;
 },
 _cc6an() //  [R1]
         { []
         }
     {offset
       cc6an: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc6bV; else goto cc6bU;
       cc6bV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc6bU: // global
           if (I64[R1 + 7] - 48 > 9) goto cc6bX; else goto cc6c1;
       cc6bX: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc6c1: // global
           I64[Hp - 16] = sat_sc5xT_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           I64[Sp + 8] = block_cc6bY_info;
           R3 = Hp - 15;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc6an_info" {
     block_cc6an_info:
         const _cc6an;
         const 1;
         const 442381631518;
         const Sc5NE_srt+288;
 },
 _cc6bY() //  [R1]
         { []
         }
     {offset
       cc6bY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc6c4; else goto cc6c3;
       cc6c4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc6c3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc6bY_info" {
     block_cc6bY_info:
         const _cc6bY;
         const 0;
         const 30;
 },
 Data.Version.$wparseVersion_entry() //  [R2]
         { []
         }
     {offset
       cc6c6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc6ca; else goto cc6c9;
       cc6ca: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Data.Version.$wparseVersion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6c9: // global
           I64[Hp - 8] = sat_sc5xW_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.$wparseVersion_info" {
     Data.Version.$wparseVersion_info:
         const Data.Version.$wparseVersion_entry;
         const 0;
         const 992137445390;
         const 4294967301;
         const Sc5NE_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.350720409 UTC

[section ""data" . Data.Version.parseVersion1_closure" {
     Data.Version.parseVersion1_closure:
         const Data.Version.parseVersion1_info;
         const 0;
 },
 Data.Version.parseVersion1_entry() //  [R2]
         { []
         }
     {offset
       cc6dr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc6ds; else goto cc6dt;
       cc6ds: // global
           R2 = R2;
           R1 = Data.Version.parseVersion1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc6dt: // global
           I64[Sp - 8] = block_cc6do_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Version.$wparseVersion_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion1_info" {
     Data.Version.parseVersion1_info:
         const Data.Version.parseVersion1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sc5NE_srt+344;
 },
 _cc6do() //  [R1]
         { []
         }
     {offset
       cc6do: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc6dw; else goto cc6dv;
       cc6dw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc6dv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc6do_info" {
     block_cc6do_info:
         const _cc6do;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.356348703 UTC

[section ""data" . Data.Version.parseVersion_closure" {
     Data.Version.parseVersion_closure:
         const Data.Version.parseVersion_info;
         const 0;
 },
 Data.Version.parseVersion_entry() //  [R2]
         { []
         }
     {offset
       cc6dM: // global
           R2 = R2;
           call Data.Version.parseVersion1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.parseVersion_info" {
     Data.Version.parseVersion_info:
         const Data.Version.parseVersion_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc5NE_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.360567247 UTC

[section ""data" . Data.Version.Version_closure" {
     Data.Version.Version_closure:
         const Data.Version.Version_info;
 },
 Data.Version.Version_entry() //  [R2, R3]
         { []
         }
     {offset
       cc6dY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc6e2; else goto cc6e1;
       cc6e2: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Version.Version_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc6e1: // global
           I64[Hp - 16] = Data.Version.Version_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.Version_info" {
     Data.Version.Version_info:
         const Data.Version.Version_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.365154207 UTC

[section ""cstring" . ic6ea_str" {
     ic6ea_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,86,101,114,115,105,111,110,46,86,101,114,115,105,111,110]
 },
 Data.Version.Version_con_entry() //  [R1]
         { []
         }
     {offset
       cc6e9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Version.Version_con_info" {
     Data.Version.Version_con_info:
         const Data.Version.Version_con_entry;
         const 2;
         const 4;
         const ic6ea_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:00.368755417 UTC

[section ""relreadonly" . Sc5NE_srt" {
     Sc5NE_srt:
         const GHC.Show.showLitString_closure;
         const GHC.Show.showCommaSpace1_closure;
         const f1_rc3Yy_closure;
         const Data.Version.$w$cshowsPrec_closure;
         const Data.Version.$fShowVersion_$cshowsPrec_closure;
         const Data.Version.$fShowVersion_$cshow_closure;
         const Data.Version.$fShowVersion1_closure;
         const Data.Version.showVersion1_closure;
         const Data.Version.$wshowVersion_closure;
         const Data.Version.showVersion_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const Data.Version.$fReadVersion13_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Version.$fReadVersion3_closure;
         const GHC.Read.readField_closure;
         const Data.Version.$fReadVersion6_closure;
         const Data.Version.$fReadVersion7_closure;
         const Data.Version.$fReadVersion9_closure;
         const Data.Version.$fReadVersion12_closure;
         const Data.Version.$fReadVersion14_closure;
         const Data.Version.$fReadVersion_lexeme_closure;
         const Data.Version.$w$creadPrec_closure;
         const Data.Version.$fReadVersion_lexeme1_closure;
         const Data.Version.$fReadVersion2_closure;
         const GHC.Read.list3_closure;
         const Data.Version.$fReadVersion_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Version.$fReadVersion1_closure;
         const Data.Version.$fReadVersion_$creadListPrec_closure;
         const Data.Version.$fReadVersion20_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Text.Read.readEither5_closure;
         const Text.Read.readEither2_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const Data.Version.parseVersion4_closure;
         const Data.Version.parseVersion5_closure;
         const Data.Version.parseVersion6_closure;
         const Data.Version.$wp_closure;
         const Data.Version.parseVersion3_closure;
         const Data.Version.parseVersion_m2_closure;
         const Text.ParserCombinators.ReadP.endBy3_closure;
         const Data.Version.$wparseVersion_closure;
         const Data.Version.parseVersion1_closure;
 }]

