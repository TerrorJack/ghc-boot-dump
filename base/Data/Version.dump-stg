
==================== Pre unarise: ====================
2018-03-16 16:06:57.896729154 UTC

Data.Version.$fGenericVersion_$cto
  :: forall x.
     GHC.Generics.Rep Data.Version.Version x -> Data.Version.Version
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_sc3YD]
        case ds_sc3YD of {
          GHC.Generics.:*: ds1_sc3YF [Occ=Once] ds2_sc3YG [Occ=Once] ->
              Data.Version.Version [ds1_sc3YF ds2_sc3YG];
        };

Data.Version.$fGenericVersion1
  :: forall x.
     Data.Version.Version
     -> GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Version" 'GHC.Generics.PrefixI 'GHC.Types.True)
          (GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "versionBranch")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "versionTags")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [GHC.Base.String]))
          x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x1_sc3YH]
        case x1_sc3YH of {
          Data.Version.Version g1_sc3YJ [Occ=Once] g2_sc3YK [Occ=Once] ->
              GHC.Generics.:*: [g1_sc3YJ g2_sc3YK];
        };

Data.Version.$fGenericVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Generics.Generic Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Generics.C:Generic! [Data.Version.$fGenericVersion1
                                           Data.Version.$fGenericVersion_$cto];

Data.Version.versionTags
  :: Data.Version.Version -> [GHC.Base.String]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sc3YL]
        case ds_sc3YL of {
          Data.Version.Version _ [Occ=Dead] ds2_sc3YO [Occ=Once] ->
              ds2_sc3YO;
        };

Data.Version.versionBranch
  :: Data.Version.Version -> [GHC.Types.Int]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sc3YP]
        case ds_sc3YP of {
          Data.Version.Version ds1_sc3YR [Occ=Once] _ [Occ=Dead] ->
              ds1_sc3YR;
        };

Data.Version.$fOrdVersion_$ccompare
  :: Data.Version.Version
     -> Data.Version.Version -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [v1_sc3YT v2_sc3YU]
        case v1_sc3YT of {
          Data.Version.Version ds_sc3YW [Occ=Once] _ [Occ=Dead] ->
              case v2_sc3YU of {
                Data.Version.Version ds2_sc3YZ [Occ=Once] _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare ds_sc3YW ds2_sc3YZ;
              };
        };

Data.Version.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int]
     -> [GHC.Base.String]
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sc3Z1 ww1_sc3Z2 ww2_sc3Z3 ww3_sc3Z4]
        case GHC.Classes.$fEq[]_$s$c== ww_sc3Z1 ww2_sc3Z3 of {
          GHC.Types.False -> GHC.Types.False [];
          GHC.Types.True ->
              case
                  Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww3_sc3Z4
              of
              sat_sc3Z7
              { __DEFAULT ->
                    case
                        Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww1_sc3Z2
                    of
                    sat_sc3Z6
                    { __DEFAULT -> GHC.Classes.$fEq[]_$s$c==1 sat_sc3Z6 sat_sc3Z7;
                    };
              };
        };

Data.Version.$fEqVersion_$c== [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sc3Z8 w1_sc3Z9]
        case w_sc3Z8 of {
          Data.Version.Version ww1_sc3Zb [Occ=Once] ww2_sc3Zc [Occ=Once] ->
              case w1_sc3Z9 of {
                Data.Version.Version ww4_sc3Ze [Occ=Once] ww5_sc3Zf [Occ=Once] ->
                    Data.Version.$w$c== ww1_sc3Zb ww2_sc3Zc ww4_sc3Ze ww5_sc3Zf;
              };
        };

Data.Version.$fEqVersion_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sc3Zg eta1_sc3Zh]
        case eta_sc3Zg of {
          Data.Version.Version ww1_sc3Zj [Occ=Once] ww2_sc3Zk [Occ=Once] ->
              case eta1_sc3Zh of {
                Data.Version.Version ww4_sc3Zm [Occ=Once] ww5_sc3Zn [Occ=Once] ->
                    case
                        Data.Version.$w$c== ww1_sc3Zj ww2_sc3Zk ww4_sc3Zm ww5_sc3Zn
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fEqVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Version.$fEqVersion_$c==
                                     Data.Version.$fEqVersion_$c/=];

Data.Version.$fOrdVersion_$c<
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3Zp y_sc3Zq]
        case x_sc3Zp of {
          Data.Version.Version ds_sc3Zs [Occ=Once] _ [Occ=Dead] ->
              case y_sc3Zq of {
                Data.Version.Version ds2_sc3Zv [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3Zs ds2_sc3Zv of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3Zy y_sc3Zz]
        case x_sc3Zy of {
          Data.Version.Version ds_sc3ZB [Occ=Once] _ [Occ=Dead] ->
              case y_sc3Zz of {
                Data.Version.Version ds2_sc3ZE [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZB ds2_sc3ZE of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3ZH y_sc3ZI]
        case x_sc3ZH of {
          Data.Version.Version ds_sc3ZK [Occ=Once] _ [Occ=Dead] ->
              case y_sc3ZI of {
                Data.Version.Version ds2_sc3ZN [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZK ds2_sc3ZN of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c<=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3ZQ y_sc3ZR]
        case x_sc3ZQ of {
          Data.Version.Version ds_sc3ZT [Occ=Once] _ [Occ=Dead] ->
              case y_sc3ZR of {
                Data.Version.Version ds2_sc3ZW [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZT ds2_sc3ZW of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$cmax
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc3ZZ y_sc400]
        case x_sc3ZZ of wild_sc401 {
          Data.Version.Version ds_sc402 [Occ=Once] _ [Occ=Dead] ->
              case y_sc400 of wild1_sc404 {
                Data.Version.Version ds2_sc405 [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc402 ds2_sc405 of {
                      __DEFAULT -> wild1_sc404;
                      GHC.Types.GT -> wild_sc401;
                    };
              };
        };

Data.Version.$fOrdVersion_$cmin
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc408 y_sc409]
        case x_sc408 of wild_sc40a {
          Data.Version.Version ds_sc40b [Occ=Once] _ [Occ=Dead] ->
              case y_sc409 of wild1_sc40d {
                Data.Version.Version ds2_sc40e [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc40b ds2_sc40e of {
                      __DEFAULT -> wild_sc40a;
                      GHC.Types.GT -> wild1_sc40d;
                    };
              };
        };

Data.Version.$fOrdVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Version.$fEqVersion
                                      Data.Version.$fOrdVersion_$ccompare
                                      Data.Version.$fOrdVersion_$c<
                                      Data.Version.$fOrdVersion_$c<=
                                      Data.Version.$fOrdVersion_$c>
                                      Data.Version.$fOrdVersion_$c>=
                                      Data.Version.$fOrdVersion_$cmax
                                      Data.Version.$fOrdVersion_$cmin];

Data.Version.makeVersion :: [GHC.Types.Int] -> Data.Version.Version
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [b_sc40h] Data.Version.Version [b_sc40h GHC.Types.[]];

Data.Version.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Version.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule4];

Data.Version.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Version"#;

Data.Version.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule2];

Data.Version.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Version.$trModule3
                                     Data.Version.$trModule1];

$krep_rc3Yn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3Yo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rc3Yp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3Yn GHC.Types.[]];

$krep3_rc3Yq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3Yp];

$krep4_rc3Yr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rc3Yo GHC.Types.[]];

$krep5_rc3Ys :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rc3Yr];

$krep6_rc3Yt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rc3Yq GHC.Types.[]];

$krep7_rc3Yu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep6_rc3Yt];

Data.Version.$fReadVersion19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version"#;

Data.Version.$tcVersion1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$fReadVersion19];

Data.Version.$tcVersion :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18148779789861942324##
                                    12675349638857785520##
                                    Data.Version.$trModule
                                    Data.Version.$tcVersion1
                                    0#
                                    GHC.Types.krep$*];

$krep8_rc3Yv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Version.$tcVersion
                                              GHC.Types.[]];

$krep9_rc3Yw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rc3Yu $krep8_rc3Yv];

Data.Version.$tc'Version1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3Ys $krep9_rc3Yw];

Data.Version.$tc'Version3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Version"#;

Data.Version.$tc'Version2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$tc'Version3];

Data.Version.$tc'Version :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3698077959655346891##
                                    8062481246695158651##
                                    Data.Version.$trModule
                                    Data.Version.$tc'Version2
                                    0#
                                    Data.Version.$tc'Version1];

f_rc3Yx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version {"#;

f1_rc3Yy :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rc3Yx;

lvl_rc3Yz :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch = "#;

lvl1_rc3YA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags = "#;

Data.Version.$fReadVersion5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

Data.Version.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sc40i ww1_sc40j ww2_sc40k w_sc40l]
        let {
          g_sc40m [Occ=Once*!, Dmd=<L,1*C1(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sc40j ww2_sc40k] \r [x_sc40n]
                  let {
                    sat_sc416 [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sc40j ww2_sc40k x_sc40n] \u []
                            let {
                              s_sc40o [Occ=OnceL*] :: GHC.Base.String
                              [LclId] =
                                  [ww2_sc40k x_sc40n] \u []
                                      let {
                                        sat_sc40I [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sc40k x_sc40n] \s []
                                                let {
                                                  sat_sc40H [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sc40k x_sc40n] \u []
                                                          let {
                                                            s1_sc40p [Occ=OnceL*] :: GHC.Base.String
                                                            [LclId] =
                                                                [x_sc40n] \u []
                                                                    GHC.CString.unpackAppendCString#
                                                                        Data.Version.$fReadVersion5
                                                                        x_sc40n;
                                                          } in 
                                                            case ww2_sc40k of {
                                                              [] ->
                                                                  GHC.CString.unpackAppendCString#
                                                                      GHC.Show.showList__4 s1_sc40p;
                                                              : x1_sc40r [Occ=Once]
                                                                xs_sc40s [Occ=Once] ->
                                                                  let {
                                                                    sat_sc40F [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [s1_sc40p
                                                                         x1_sc40r
                                                                         xs_sc40s] \u []
                                                                            let {
                                                                              sat_sc40D [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  [s1_sc40p
                                                                                   xs_sc40s] \u []
                                                                                      let {
                                                                                        lvl45_sc40t [Occ=OnceL]
                                                                                          :: [GHC.Types.Char]
                                                                                        [LclId,
                                                                                         Unf=OtherCon []] =
                                                                                            CCCS :! [GHC.Show.showList__2
                                                                                                     s1_sc40p]; } in
                                                                                      let {
                                                                                        showl_sc40u [Occ=LoopBreaker]
                                                                                          :: [[GHC.Types.Char]]
                                                                                             -> GHC.Base.String
                                                                                        [LclId,
                                                                                         Arity=1,
                                                                                         Str=<S,1*U>,
                                                                                         Unf=OtherCon []] =
                                                                                            sat-only [lvl45_sc40t
                                                                                                      showl_sc40u] \r [ds2_sc40v]
                                                                                                case
                                                                                                    ds2_sc40v
                                                                                                of
                                                                                                { [] ->
                                                                                                      lvl45_sc40t;
                                                                                                  : y_sc40x [Occ=Once]
                                                                                                    ys_sc40y [Occ=Once] ->
                                                                                                      let {
                                                                                                        sat_sc40B [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [showl_sc40u
                                                                                                             y_sc40x
                                                                                                             ys_sc40y] \u []
                                                                                                                let {
                                                                                                                  sat_sc40z [Occ=Once]
                                                                                                                    :: [GHC.Types.Char]
                                                                                                                  [LclId] =
                                                                                                                      [showl_sc40u
                                                                                                                       ys_sc40y] \u []
                                                                                                                          showl_sc40u
                                                                                                                              ys_sc40y; } in
                                                                                                                let {
                                                                                                                  sat_sc40A [Occ=Once]
                                                                                                                    :: GHC.Base.String
                                                                                                                  [LclId] =
                                                                                                                      CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                               sat_sc40z];
                                                                                                                } in 
                                                                                                                  GHC.Show.showLitString
                                                                                                                      y_sc40x
                                                                                                                      sat_sc40A; } in
                                                                                                      let {
                                                                                                        sat_sc40C [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                     sat_sc40B];
                                                                                                      } in 
                                                                                                        : [GHC.Show.showList__1
                                                                                                           sat_sc40C];
                                                                                                };
                                                                                      } in 
                                                                                        showl_sc40u
                                                                                            xs_sc40s; } in
                                                                            let {
                                                                              sat_sc40E [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sc40D];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  x1_sc40r
                                                                                  sat_sc40E; } in
                                                                  let {
                                                                    sat_sc40G [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sc40F];
                                                                  } in 
                                                                    : [GHC.Show.showList__3
                                                                       sat_sc40G];
                                                            };
                                                } in 
                                                  GHC.CString.unpackAppendCString#
                                                      lvl1_rc3YA sat_sc40H;
                                      } in  GHC.Base.++ GHC.Show.showCommaSpace1 sat_sc40I;
                            } in 
                              case ww1_sc40j of {
                                [] ->
                                    GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sc40o;
                                : x1_sc40K [Occ=Once!] xs_sc40L [Occ=Once] ->
                                    let {
                                      sat_sc415 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sc40o x1_sc40K xs_sc40L] \u []
                                              case x1_sc40K of {
                                                GHC.Types.I# ww4_sc40N [Occ=Once] ->
                                                    let {
                                                      sat_sc411 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [s_sc40o xs_sc40L] \u []
                                                              let {
                                                                lvl45_sc40O [Occ=OnceL]
                                                                  :: [GHC.Types.Char]
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS :! [GHC.Show.showList__2
                                                                             s_sc40o]; } in
                                                              let {
                                                                showl_sc40P [Occ=LoopBreaker]
                                                                  :: [GHC.Types.Int]
                                                                     -> GHC.Base.String
                                                                [LclId,
                                                                 Arity=1,
                                                                 Str=<S,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl45_sc40O
                                                                              showl_sc40P] \r [ds2_sc40Q]
                                                                        case ds2_sc40Q of {
                                                                          [] -> lvl45_sc40O;
                                                                          : y_sc40S [Occ=Once!]
                                                                            ys_sc40T [Occ=Once] ->
                                                                              let {
                                                                                sat_sc410 [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [showl_sc40P
                                                                                     y_sc40S
                                                                                     ys_sc40T] \u []
                                                                                        case
                                                                                            y_sc40S
                                                                                        of
                                                                                        { GHC.Types.I# ww6_sc40V [Occ=Once] ->
                                                                                              let {
                                                                                                sat_sc40W [Occ=Once]
                                                                                                  :: GHC.Base.String
                                                                                                [LclId] =
                                                                                                    [showl_sc40P
                                                                                                     ys_sc40T] \u []
                                                                                                        showl_sc40P
                                                                                                            ys_sc40T;
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        ww6_sc40V
                                                                                                        sat_sc40W
                                                                                                of
                                                                                                { (#,#) ww8_sc40Y [Occ=Once]
                                                                                                        ww9_sc40Z [Occ=Once] ->
                                                                                                      : [ww8_sc40Y
                                                                                                         ww9_sc40Z];
                                                                                                };
                                                                                        };
                                                                              } in 
                                                                                : [GHC.Show.showList__1
                                                                                   sat_sc410];
                                                                        };
                                                              } in  showl_sc40P xs_sc40L;
                                                    } in 
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# ww4_sc40N sat_sc411
                                                      of
                                                      { (#,#) ww6_sc413 [Occ=Once]
                                                              ww7_sc414 [Occ=Once] ->
                                                            : [ww6_sc413 ww7_sc414];
                                                      };
                                              };
                                    } in  : [GHC.Show.showList__3 sat_sc415];
                              };
                  } in  GHC.CString.unpackAppendCString# lvl_rc3Yz sat_sc416;
        } in 
          case >=# [ww_sc40i 11#] of {
            __DEFAULT ->
                let {
                  sat_sc418 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc40l g_sc40m] \s [] g_sc40m w_sc40l;
                } in  GHC.Base.++ f1_rc3Yy sat_sc418;
            1# ->
                let {
                  sat_sc41b [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc40l g_sc40m] \u []
                          let {
                            sat_sc41a [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [w_sc40l g_sc40m] \s []
                                    let {
                                      sat_sc419 [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)2 w_sc40l];
                                    } in  g_sc40m sat_sc419;
                          } in  GHC.Base.++ f1_rc3Yy sat_sc41a;
                } in  : [GHC.Show.$fShow(,)4 sat_sc41b];
          };

Data.Version.$fShowVersion_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Version.Version -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sc41c w1_sc41d w2_sc41e]
        case w_sc41c of {
          GHC.Types.I# ww1_sc41g [Occ=Once] ->
              case w1_sc41d of {
                Data.Version.Version ww3_sc41i [Occ=Once] ww4_sc41j [Occ=Once] ->
                    Data.Version.$w$cshowsPrec ww1_sc41g ww3_sc41i ww4_sc41j w2_sc41e;
              };
        };

Data.Version.$fShowVersion2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Version.$fShowVersion_$cshow
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_sc41k]
        case x_sc41k of {
          Data.Version.Version ww1_sc41m [Occ=Once] ww2_sc41n [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc41m ww2_sc41n GHC.Types.[];
        };

Data.Version.$fShowVersion1
  :: Data.Version.Version -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sc41o w1_sc41p]
        case w_sc41o of {
          Data.Version.Version ww1_sc41r [Occ=Once] ww2_sc41s [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc41r ww2_sc41s w1_sc41p;
        };

Data.Version.$fShowVersion_$cshowList
  :: [Data.Version.Version] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc41t s_sc41u]
        GHC.Show.showList__ Data.Version.$fShowVersion1 ls_sc41t s_sc41u;

Data.Version.$fShowVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Version.$fShowVersion_$cshowsPrec
                                    Data.Version.$fShowVersion_$cshow
                                    Data.Version.$fShowVersion_$cshowList];

f2_rc3YB :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

Data.Version.showVersion2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

Data.Version.showVersion1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.showVersion2;

Data.Version.showVersion_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sc41v]
        case ds_sc41v of {
          [] -> [] [];
          : y_sc41x [Occ=Once] ys_sc41y [Occ=Once] ->
              let {
                sat_sc41A [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ys_sc41y] \s [] Data.Version.showVersion_go ys_sc41y; } in
              let {
                sat_sc41z [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [f2_rc3YB y_sc41x];
              } in  GHC.Base.++ sat_sc41z sat_sc41A;
        };

Data.Version.$wshowVersion [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int] -> [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sc41B ww1_sc41C]
        let {
          arg_sc41D [Occ=OnceL*] :: [GHC.Types.Char]
          [LclId] =
              [ww1_sc41C] \u [] Data.Version.showVersion_go ww1_sc41C;
        } in 
          case GHC.Base.map GHC.Show.$fShowInt_$cshow ww_sc41B of {
            [] -> arg_sc41D;
            : x_sc41F [Occ=Once] xs_sc41G [Occ=Once] ->
                let {
                  go_sc41H [Occ=LoopBreaker]
                    :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [arg_sc41D go_sc41H] \r [ds_sc41I]
                          case ds_sc41I of {
                            [] -> arg_sc41D;
                            : y_sc41K [Occ=Once] ys_sc41L [Occ=Once] ->
                                let {
                                  sat_sc41M [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [go_sc41H ys_sc41L] \s [] go_sc41H ys_sc41L;
                                } in  GHC.Base.++ y_sc41K sat_sc41M;
                          }; } in
                let {
                  sat_sc41N [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      [xs_sc41G] \u []
                          Data.OldList.prependToAll Data.Version.showVersion1 xs_sc41G; } in
                let {
                  sat_sc41O [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      CCCS :! [x_sc41F sat_sc41N];
                } in  go_sc41H sat_sc41O;
          };

Data.Version.showVersion [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [w_sc41P]
        case w_sc41P of {
          Data.Version.Version ww1_sc41R [Occ=Once] ww2_sc41S [Occ=Once] ->
              Data.Version.$wshowVersion ww1_sc41R ww2_sc41S;
        };

Data.Version.$fReadVersion18 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion19;

Data.Version.$fReadVersion_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Version.$fReadVersion18];

Data.Version.$fReadVersion17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

Data.Version.$fReadVersion16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion17;

Data.Version.$fReadVersion_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion16];

Data.Version.$fReadVersion15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch"#;

Data.Version.$fReadVersion14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion15;

Data.Version.$fReadVersion13
  :: Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc41T] Data.Version.$fReadVersion13;

Data.Version.$fReadVersion_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Version.$fReadVersion11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

Data.Version.$fReadVersion10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion11;

Data.Version.$fReadVersion9 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion10];

Data.Version.$fReadVersion8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags"#;

Data.Version.$fReadVersion7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion8;

Data.Version.$fReadVersion6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Base.String]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc41U]
        GHC.Read.$fRead[]_$s$creadListPrec1
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion5;

Data.Version.$fReadVersion3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion4];

Data.Version.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_sc41V w_sc41W]
        case <=# [ww_sc41V 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_sc42g [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                [LclId] =
                    [w_sc41W] \r [a1_sc41Y]
                        let {
                          sat_sc42d [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                          [LclId] =
                              [w_sc41W] \r [a2_sc41Z]
                                  let {
                                    sat_sc42c [Occ=Once]
                                      :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_sc3N8
                                    [LclId] =
                                        [w_sc41W] \r [a3_sc420]
                                            let {
                                              sat_sc429 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                                              [LclId] =
                                                  [w_sc41W a3_sc420] \r [a4_sc421]
                                                      let {
                                                        sat_sc428 [Occ=Once]
                                                          :: [GHC.Base.String]
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_sc3N8
                                                        [LclId] =
                                                            [w_sc41W a3_sc420] \r [a5_sc422]
                                                                let {
                                                                  sat_sc425 [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_sc3N8
                                                                  [LclId] =
                                                                      [w_sc41W
                                                                       a3_sc420
                                                                       a5_sc422] \r [a6_sc423]
                                                                          let {
                                                                            sat_sc424 [Occ=Once]
                                                                              :: Data.Version.Version
                                                                            [LclId] =
                                                                                CCCS Data.Version.Version! [a3_sc420
                                                                                                            a5_sc422];
                                                                          } in  w_sc41W sat_sc424;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          Data.Version.$fReadVersion3
                                                                          sat_sc425
                                                                  of
                                                                  { Unit# ww2_sc427 [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_sc427];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            Data.Version.$fReadVersion7
                                                            Data.Version.$fReadVersion6
                                                            Data.Version.$fReadVersion_n
                                                            sat_sc428;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      Data.Version.$fReadVersion9 sat_sc429
                                              of
                                              { Unit# ww2_sc42b [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_sc42b];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        Data.Version.$fReadVersion14
                                        Data.Version.$fReadVersion12
                                        Data.Version.$fReadVersion_n
                                        sat_sc42c;
                        } in 
                          case
                              Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme sat_sc42d
                          of
                          { Unit# ww2_sc42f [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_sc42f];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme1 sat_sc42g
                of
                { Unit# ww2_sc42i [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_sc42i];
                };
        };

Data.Version.$fReadVersion2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42j w1_sc42k]
        case w_sc42j of {
          GHC.Types.I# ww1_sc42m [Occ=Once] ->
              Data.Version.$w$creadPrec ww1_sc42m w1_sc42k;
        };

Data.Version.$fReadVersion1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Version.$fReadVersion2 eta_B2 eta_B1;

Data.Version.$fReadVersion_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Data.Version.Version
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_sc42n]
        let {
          sat_sc42o [Occ=Once]
            :: Text.ParserCombinators.ReadP.P Data.Version.Version
          [LclId] =
              [n_sc42n] \u []
                  GHC.Read.list3
                      Data.Version.$fReadVersion2
                      n_sc42n
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_sc42o;

Data.Version.$fReadVersion_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Version.Version]
[GblId] =
    [] \u [] GHC.Read.list Data.Version.$fReadVersion1;

Data.Version.$fReadVersion20
  :: Text.ParserCombinators.ReadP.P [Data.Version.Version]
[GblId] =
    [] \u []
        Data.Version.$fReadVersion_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Version.$fReadVersion_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Data.Version.Version]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            Data.Version.$fReadVersion20 eta_B1;

Data.Version.$fReadVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Version.$fReadVersion_$creadsPrec
                                    Data.Version.$fReadVersion_$creadList
                                    Data.Version.$fReadVersion1
                                    Data.Version.$fReadVersion_$creadListPrec];

Data.Version.parseVersion5 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

Data.Version.parseVersion4 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

Data.Version.parseVersion6
  :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

Data.Version.$wp [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42p]
        let {
          sat_sc42K [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nf
          [LclId] =
              [w_sc42p] \r [a_sc42q]
                  case a_sc42q of wild_sc42r {
                    GHC.Types.C# c#_sc42s [Occ=Once] ->
                        case ord# [c#_sc42s] of sat_sc42t {
                          __DEFAULT ->
                              case -# [sat_sc42t 48#] of sat_sc42u {
                                __DEFAULT ->
                                    case int2Word# [sat_sc42u] of sat_sc42v {
                                      __DEFAULT ->
                                          case leWord# [sat_sc42v 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc42H [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nf
                                                  [LclId] =
                                                      [w_sc42p wild_sc42r] \r [a1_sc42x]
                                                          let {
                                                            sat_sc42G [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc42r a1_sc42x] \u []
                                                                    let {
                                                                      sat_sc42y [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc42r
                                                                                   a1_sc42x];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc42y
                                                                      of
                                                                      sat_sc42z
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc42z
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc42B [Occ=Once]
                                                                                ds_sc42C [Occ=Once!] ->
                                                                                  case ds_sc42C of {
                                                                                    [] -> x_sc42B;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      };
                                                          } in  w_sc42p sat_sc42G;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc42H
                                                  of
                                                  { Unit# ww1_sc42J [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc42J];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc42K];

Data.Version.parseVersion3 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc42L]
        case Data.Version.$wp w_sc42L of {
          Unit# ww1_sc42N [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc42N];
        };

Data.Version.parseVersion_m2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_sc42O]
        let {
          lvl4_sc42P [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [k_sc42O] \u []
                  case Data.Version.$wp k_sc42O of {
                    Unit# ww1_sc42R [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_sc42R];
                  }; } in
        let {
          sat_sc42W [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [lvl4_sc42P] \r [a_sc42S]
                  case a_sc42S of {
                    GHC.Types.C# y_sc42U [Occ=Once!] ->
                        case y_sc42U of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl4_sc42P;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_sc42W];

Data.Version.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42X]
        let {
          $www1_sc42Y [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [w_sc42X] \r [ww_sc42Z]
                  case ord# [ww_sc42Z] of sat_sc431 {
                    __DEFAULT ->
                        case __pkg_ccall base-4.11.0.0 [sat_sc431 GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_sc434 [Occ=Once!] ->
                              case ds1_sc434 of {
                                __DEFAULT ->
                                    let {
                                      wild_sc436 [Occ=OnceL] :: GHC.Types.Char
                                      [LclId, Unf=OtherCon []] =
                                          CCCS GHC.Types.C#! [ww_sc42Z]; } in
                                    let {
                                      sat_sc439 [Occ=Once]
                                        :: GHC.Base.String
                                           -> Text.ParserCombinators.ReadP.P b1_sc3Nr
                                      [LclId] =
                                          [w_sc42X wild_sc436] \r [a1_sc437]
                                              let {
                                                sat_sc438 [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [wild_sc436 a1_sc437];
                                              } in  w_sc42X sat_sc438;
                                    } in 
                                      case
                                          Text.ParserCombinators.ReadP.$wmunch
                                              GHC.Unicode.isAlphaNum sat_sc439
                                      of
                                      { Unit# ww2_sc43b [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Look [ww2_sc43b];
                                      };
                                0# -> Text.ParserCombinators.ReadP.Fail [];
                              };
                        };
                  }; } in
        let {
          ww1_sc43c [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [$www1_sc42Y] \r [w1_sc43d]
                  case w1_sc43d of {
                    GHC.Types.C# ww2_sc43f [Occ=Once] -> $www1_sc42Y ww2_sc43f;
                  }; } in
        let {
          lvl4_sc43g [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [ww1_sc43c]; } in
        let {
          sat_sc43l [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId] =
              [lvl4_sc43g] \r [a_sc43h]
                  case a_sc43h of {
                    GHC.Types.C# y_sc43j [Occ=Once!] ->
                        case y_sc43j of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '-'# -> lvl4_sc43g;
                        };
                  };
        } in  Unit# [sat_sc43l];

Data.Version.parseVersion2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc43m]
        case Data.Version.$wlvl w_sc43m of {
          Unit# ww1_sc43o [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc43o];
        };

Data.Version.$wparseVersion [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc43p]
        let {
          sat_sc43Q [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nx
          [LclId] =
              [w_sc43p] \r [a_sc43q]
                  case a_sc43q of wild_sc43r {
                    GHC.Types.C# c#_sc43s [Occ=Once] ->
                        case ord# [c#_sc43s] of sat_sc43t {
                          __DEFAULT ->
                              case -# [sat_sc43t 48#] of sat_sc43u {
                                __DEFAULT ->
                                    case int2Word# [sat_sc43u] of sat_sc43v {
                                      __DEFAULT ->
                                          case leWord# [sat_sc43v 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc43N [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nx
                                                  [LclId] =
                                                      [w_sc43p wild_sc43r] \r [a1_sc43x]
                                                          let {
                                                            a2_sc43y [Occ=OnceL] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc43r a1_sc43x] \u []
                                                                    let {
                                                                      sat_sc43z [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc43r
                                                                                   a1_sc43x];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc43z
                                                                      of
                                                                      sat_sc43A
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc43A
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc43C [Occ=Once]
                                                                                ds_sc43D [Occ=Once!] ->
                                                                                  case ds_sc43D of {
                                                                                    [] -> x_sc43C;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      }; } in
                                                          let {
                                                            sat_sc43M [Occ=Once]
                                                              :: [GHC.Types.Int]
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_sc3Nx
                                                            [LclId] =
                                                                [w_sc43p a2_sc43y] \r [a3_sc43H]
                                                                    let {
                                                                      a4_sc43I [Occ=OnceL]
                                                                        :: [GHC.Types.Int]
                                                                      [LclId, Unf=OtherCon []] =
                                                                          CCCS :! [a2_sc43y
                                                                                   a3_sc43H]; } in
                                                                    let {
                                                                      sat_sc43L [Occ=Once]
                                                                        :: [GHC.Base.String]
                                                                           -> Text.ParserCombinators.ReadP.P
                                                                                b1_sc3Nx
                                                                      [LclId] =
                                                                          [w_sc43p
                                                                           a4_sc43I] \r [a5_sc43J]
                                                                              let {
                                                                                sat_sc43K [Occ=Once]
                                                                                  :: Data.Version.Version
                                                                                [LclId] =
                                                                                    CCCS Data.Version.Version! [a4_sc43I
                                                                                                                a5_sc43J];
                                                                              } in 
                                                                                w_sc43p sat_sc43K;
                                                                    } in 
                                                                      Text.ParserCombinators.ReadP.endBy3
                                                                          Data.Version.parseVersion2
                                                                          sat_sc43L;
                                                          } in 
                                                            Text.ParserCombinators.ReadP.endBy3
                                                                Data.Version.parseVersion_m2
                                                                sat_sc43M;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc43N
                                                  of
                                                  { Unit# ww1_sc43P [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc43P];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc43Q];

Data.Version.parseVersion1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc43R]
        case Data.Version.$wparseVersion w_sc43R of {
          Unit# ww1_sc43T [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc43T];
        };

Data.Version.parseVersion
  :: Text.ParserCombinators.ReadP.ReadP Data.Version.Version
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Version.parseVersion1 eta_B1;

Data.Version.Version
  :: [GHC.Types.Int] -> [GHC.Base.String] -> Data.Version.Version
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Version.Version [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:57.916675601 UTC

Data.Version.$fGenericVersion_$cto
  :: forall x.
     GHC.Generics.Rep Data.Version.Version x -> Data.Version.Version
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_sc3YD]
        case ds_sc3YD of {
          GHC.Generics.:*: ds1_sc3YF [Occ=Once] ds2_sc3YG [Occ=Once] ->
              Data.Version.Version [ds1_sc3YF ds2_sc3YG];
        };

Data.Version.$fGenericVersion1
  :: forall x.
     Data.Version.Version
     -> GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Version" 'GHC.Generics.PrefixI 'GHC.Types.True)
          (GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "versionBranch")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "versionTags")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [GHC.Base.String]))
          x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x1_sc3YH]
        case x1_sc3YH of {
          Data.Version.Version g1_sc3YJ [Occ=Once] g2_sc3YK [Occ=Once] ->
              GHC.Generics.:*: [g1_sc3YJ g2_sc3YK];
        };

Data.Version.$fGenericVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Generics.Generic Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Generics.C:Generic! [Data.Version.$fGenericVersion1
                                           Data.Version.$fGenericVersion_$cto];

Data.Version.versionTags
  :: Data.Version.Version -> [GHC.Base.String]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sc3YL]
        case ds_sc3YL of {
          Data.Version.Version _ [Occ=Dead] ds2_sc3YO [Occ=Once] ->
              ds2_sc3YO;
        };

Data.Version.versionBranch
  :: Data.Version.Version -> [GHC.Types.Int]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sc3YP]
        case ds_sc3YP of {
          Data.Version.Version ds1_sc3YR [Occ=Once] _ [Occ=Dead] ->
              ds1_sc3YR;
        };

Data.Version.$fOrdVersion_$ccompare
  :: Data.Version.Version
     -> Data.Version.Version -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [v1_sc3YT v2_sc3YU]
        case v1_sc3YT of {
          Data.Version.Version ds_sc3YW [Occ=Once] _ [Occ=Dead] ->
              case v2_sc3YU of {
                Data.Version.Version ds2_sc3YZ [Occ=Once] _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare ds_sc3YW ds2_sc3YZ;
              };
        };

Data.Version.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int]
     -> [GHC.Base.String]
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sc3Z1 ww1_sc3Z2 ww2_sc3Z3 ww3_sc3Z4]
        case GHC.Classes.$fEq[]_$s$c== ww_sc3Z1 ww2_sc3Z3 of {
          GHC.Types.False -> GHC.Types.False [];
          GHC.Types.True ->
              case
                  Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww3_sc3Z4
              of
              sat_sc3Z7
              { __DEFAULT ->
                    case
                        Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww1_sc3Z2
                    of
                    sat_sc3Z6
                    { __DEFAULT -> GHC.Classes.$fEq[]_$s$c==1 sat_sc3Z6 sat_sc3Z7;
                    };
              };
        };

Data.Version.$fEqVersion_$c== [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sc3Z8 w1_sc3Z9]
        case w_sc3Z8 of {
          Data.Version.Version ww1_sc3Zb [Occ=Once] ww2_sc3Zc [Occ=Once] ->
              case w1_sc3Z9 of {
                Data.Version.Version ww4_sc3Ze [Occ=Once] ww5_sc3Zf [Occ=Once] ->
                    Data.Version.$w$c== ww1_sc3Zb ww2_sc3Zc ww4_sc3Ze ww5_sc3Zf;
              };
        };

Data.Version.$fEqVersion_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sc3Zg eta1_sc3Zh]
        case eta_sc3Zg of {
          Data.Version.Version ww1_sc3Zj [Occ=Once] ww2_sc3Zk [Occ=Once] ->
              case eta1_sc3Zh of {
                Data.Version.Version ww4_sc3Zm [Occ=Once] ww5_sc3Zn [Occ=Once] ->
                    case
                        Data.Version.$w$c== ww1_sc3Zj ww2_sc3Zk ww4_sc3Zm ww5_sc3Zn
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fEqVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Version.$fEqVersion_$c==
                                     Data.Version.$fEqVersion_$c/=];

Data.Version.$fOrdVersion_$c<
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3Zp y_sc3Zq]
        case x_sc3Zp of {
          Data.Version.Version ds_sc3Zs [Occ=Once] _ [Occ=Dead] ->
              case y_sc3Zq of {
                Data.Version.Version ds2_sc3Zv [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3Zs ds2_sc3Zv of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3Zy y_sc3Zz]
        case x_sc3Zy of {
          Data.Version.Version ds_sc3ZB [Occ=Once] _ [Occ=Dead] ->
              case y_sc3Zz of {
                Data.Version.Version ds2_sc3ZE [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZB ds2_sc3ZE of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3ZH y_sc3ZI]
        case x_sc3ZH of {
          Data.Version.Version ds_sc3ZK [Occ=Once] _ [Occ=Dead] ->
              case y_sc3ZI of {
                Data.Version.Version ds2_sc3ZN [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZK ds2_sc3ZN of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c<=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc3ZQ y_sc3ZR]
        case x_sc3ZQ of {
          Data.Version.Version ds_sc3ZT [Occ=Once] _ [Occ=Dead] ->
              case y_sc3ZR of {
                Data.Version.Version ds2_sc3ZW [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc3ZT ds2_sc3ZW of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$cmax
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc3ZZ y_sc400]
        case x_sc3ZZ of wild_sc401 {
          Data.Version.Version ds_sc402 [Occ=Once] _ [Occ=Dead] ->
              case y_sc400 of wild1_sc404 {
                Data.Version.Version ds2_sc405 [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc402 ds2_sc405 of {
                      __DEFAULT -> wild1_sc404;
                      GHC.Types.GT -> wild_sc401;
                    };
              };
        };

Data.Version.$fOrdVersion_$cmin
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc408 y_sc409]
        case x_sc408 of wild_sc40a {
          Data.Version.Version ds_sc40b [Occ=Once] _ [Occ=Dead] ->
              case y_sc409 of wild1_sc40d {
                Data.Version.Version ds2_sc40e [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc40b ds2_sc40e of {
                      __DEFAULT -> wild_sc40a;
                      GHC.Types.GT -> wild1_sc40d;
                    };
              };
        };

Data.Version.$fOrdVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Version.$fEqVersion
                                      Data.Version.$fOrdVersion_$ccompare
                                      Data.Version.$fOrdVersion_$c<
                                      Data.Version.$fOrdVersion_$c<=
                                      Data.Version.$fOrdVersion_$c>
                                      Data.Version.$fOrdVersion_$c>=
                                      Data.Version.$fOrdVersion_$cmax
                                      Data.Version.$fOrdVersion_$cmin];

Data.Version.makeVersion :: [GHC.Types.Int] -> Data.Version.Version
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [b_sc40h] Data.Version.Version [b_sc40h GHC.Types.[]];

Data.Version.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Version.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule4];

Data.Version.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Version"#;

Data.Version.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule2];

Data.Version.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Version.$trModule3
                                     Data.Version.$trModule1];

$krep_rc3Yn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3Yo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rc3Yp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3Yn GHC.Types.[]];

$krep3_rc3Yq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3Yp];

$krep4_rc3Yr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rc3Yo GHC.Types.[]];

$krep5_rc3Ys :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rc3Yr];

$krep6_rc3Yt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rc3Yq GHC.Types.[]];

$krep7_rc3Yu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep6_rc3Yt];

Data.Version.$fReadVersion19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version"#;

Data.Version.$tcVersion1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$fReadVersion19];

Data.Version.$tcVersion :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18148779789861942324##
                                    12675349638857785520##
                                    Data.Version.$trModule
                                    Data.Version.$tcVersion1
                                    0#
                                    GHC.Types.krep$*];

$krep8_rc3Yv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Version.$tcVersion
                                              GHC.Types.[]];

$krep9_rc3Yw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rc3Yu $krep8_rc3Yv];

Data.Version.$tc'Version1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3Ys $krep9_rc3Yw];

Data.Version.$tc'Version3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Version"#;

Data.Version.$tc'Version2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$tc'Version3];

Data.Version.$tc'Version :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3698077959655346891##
                                    8062481246695158651##
                                    Data.Version.$trModule
                                    Data.Version.$tc'Version2
                                    0#
                                    Data.Version.$tc'Version1];

f_rc3Yx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version {"#;

f1_rc3Yy :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rc3Yx;

lvl_rc3Yz :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch = "#;

lvl1_rc3YA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags = "#;

Data.Version.$fReadVersion5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

Data.Version.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sc40i ww1_sc40j ww2_sc40k w_sc40l]
        let {
          g_sc40m [Occ=Once*!, Dmd=<L,1*C1(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sc40j ww2_sc40k] \r [x_sc40n]
                  let {
                    sat_sc416 [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sc40j ww2_sc40k x_sc40n] \u []
                            let {
                              s_sc40o [Occ=OnceL*] :: GHC.Base.String
                              [LclId] =
                                  [ww2_sc40k x_sc40n] \u []
                                      let {
                                        sat_sc40I [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sc40k x_sc40n] \s []
                                                let {
                                                  sat_sc40H [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sc40k x_sc40n] \u []
                                                          let {
                                                            s1_sc40p [Occ=OnceL*] :: GHC.Base.String
                                                            [LclId] =
                                                                [x_sc40n] \u []
                                                                    GHC.CString.unpackAppendCString#
                                                                        Data.Version.$fReadVersion5
                                                                        x_sc40n;
                                                          } in 
                                                            case ww2_sc40k of {
                                                              [] ->
                                                                  GHC.CString.unpackAppendCString#
                                                                      GHC.Show.showList__4 s1_sc40p;
                                                              : x1_sc40r [Occ=Once]
                                                                xs_sc40s [Occ=Once] ->
                                                                  let {
                                                                    sat_sc40F [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [s1_sc40p
                                                                         x1_sc40r
                                                                         xs_sc40s] \u []
                                                                            let {
                                                                              sat_sc40D [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  [s1_sc40p
                                                                                   xs_sc40s] \u []
                                                                                      let {
                                                                                        lvl45_sc40t [Occ=OnceL]
                                                                                          :: [GHC.Types.Char]
                                                                                        [LclId,
                                                                                         Unf=OtherCon []] =
                                                                                            CCCS :! [GHC.Show.showList__2
                                                                                                     s1_sc40p]; } in
                                                                                      let {
                                                                                        showl_sc40u [Occ=LoopBreaker]
                                                                                          :: [[GHC.Types.Char]]
                                                                                             -> GHC.Base.String
                                                                                        [LclId,
                                                                                         Arity=1,
                                                                                         Str=<S,1*U>,
                                                                                         Unf=OtherCon []] =
                                                                                            sat-only [lvl45_sc40t
                                                                                                      showl_sc40u] \r [ds2_sc40v]
                                                                                                case
                                                                                                    ds2_sc40v
                                                                                                of
                                                                                                { [] ->
                                                                                                      lvl45_sc40t;
                                                                                                  : y_sc40x [Occ=Once]
                                                                                                    ys_sc40y [Occ=Once] ->
                                                                                                      let {
                                                                                                        sat_sc40B [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [showl_sc40u
                                                                                                             y_sc40x
                                                                                                             ys_sc40y] \u []
                                                                                                                let {
                                                                                                                  sat_sc40z [Occ=Once]
                                                                                                                    :: [GHC.Types.Char]
                                                                                                                  [LclId] =
                                                                                                                      [showl_sc40u
                                                                                                                       ys_sc40y] \u []
                                                                                                                          showl_sc40u
                                                                                                                              ys_sc40y; } in
                                                                                                                let {
                                                                                                                  sat_sc40A [Occ=Once]
                                                                                                                    :: GHC.Base.String
                                                                                                                  [LclId] =
                                                                                                                      CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                               sat_sc40z];
                                                                                                                } in 
                                                                                                                  GHC.Show.showLitString
                                                                                                                      y_sc40x
                                                                                                                      sat_sc40A; } in
                                                                                                      let {
                                                                                                        sat_sc40C [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                     sat_sc40B];
                                                                                                      } in 
                                                                                                        : [GHC.Show.showList__1
                                                                                                           sat_sc40C];
                                                                                                };
                                                                                      } in 
                                                                                        showl_sc40u
                                                                                            xs_sc40s; } in
                                                                            let {
                                                                              sat_sc40E [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sc40D];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  x1_sc40r
                                                                                  sat_sc40E; } in
                                                                  let {
                                                                    sat_sc40G [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sc40F];
                                                                  } in 
                                                                    : [GHC.Show.showList__3
                                                                       sat_sc40G];
                                                            };
                                                } in 
                                                  GHC.CString.unpackAppendCString#
                                                      lvl1_rc3YA sat_sc40H;
                                      } in  GHC.Base.++ GHC.Show.showCommaSpace1 sat_sc40I;
                            } in 
                              case ww1_sc40j of {
                                [] ->
                                    GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sc40o;
                                : x1_sc40K [Occ=Once!] xs_sc40L [Occ=Once] ->
                                    let {
                                      sat_sc415 [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sc40o x1_sc40K xs_sc40L] \u []
                                              case x1_sc40K of {
                                                GHC.Types.I# ww4_sc40N [Occ=Once] ->
                                                    let {
                                                      sat_sc411 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [s_sc40o xs_sc40L] \u []
                                                              let {
                                                                lvl45_sc40O [Occ=OnceL]
                                                                  :: [GHC.Types.Char]
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS :! [GHC.Show.showList__2
                                                                             s_sc40o]; } in
                                                              let {
                                                                showl_sc40P [Occ=LoopBreaker]
                                                                  :: [GHC.Types.Int]
                                                                     -> GHC.Base.String
                                                                [LclId,
                                                                 Arity=1,
                                                                 Str=<S,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl45_sc40O
                                                                              showl_sc40P] \r [ds2_sc40Q]
                                                                        case ds2_sc40Q of {
                                                                          [] -> lvl45_sc40O;
                                                                          : y_sc40S [Occ=Once!]
                                                                            ys_sc40T [Occ=Once] ->
                                                                              let {
                                                                                sat_sc410 [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [showl_sc40P
                                                                                     y_sc40S
                                                                                     ys_sc40T] \u []
                                                                                        case
                                                                                            y_sc40S
                                                                                        of
                                                                                        { GHC.Types.I# ww6_sc40V [Occ=Once] ->
                                                                                              let {
                                                                                                sat_sc40W [Occ=Once]
                                                                                                  :: GHC.Base.String
                                                                                                [LclId] =
                                                                                                    [showl_sc40P
                                                                                                     ys_sc40T] \u []
                                                                                                        showl_sc40P
                                                                                                            ys_sc40T;
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        ww6_sc40V
                                                                                                        sat_sc40W
                                                                                                of
                                                                                                { (#,#) ww8_sc40Y [Occ=Once]
                                                                                                        ww9_sc40Z [Occ=Once] ->
                                                                                                      : [ww8_sc40Y
                                                                                                         ww9_sc40Z];
                                                                                                };
                                                                                        };
                                                                              } in 
                                                                                : [GHC.Show.showList__1
                                                                                   sat_sc410];
                                                                        };
                                                              } in  showl_sc40P xs_sc40L;
                                                    } in 
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# ww4_sc40N sat_sc411
                                                      of
                                                      { (#,#) ww6_sc413 [Occ=Once]
                                                              ww7_sc414 [Occ=Once] ->
                                                            : [ww6_sc413 ww7_sc414];
                                                      };
                                              };
                                    } in  : [GHC.Show.showList__3 sat_sc415];
                              };
                  } in  GHC.CString.unpackAppendCString# lvl_rc3Yz sat_sc416;
        } in 
          case >=# [ww_sc40i 11#] of {
            __DEFAULT ->
                let {
                  sat_sc418 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc40l g_sc40m] \s [] g_sc40m w_sc40l;
                } in  GHC.Base.++ f1_rc3Yy sat_sc418;
            1# ->
                let {
                  sat_sc41b [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc40l g_sc40m] \u []
                          let {
                            sat_sc41a [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [w_sc40l g_sc40m] \s []
                                    let {
                                      sat_sc419 [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)2 w_sc40l];
                                    } in  g_sc40m sat_sc419;
                          } in  GHC.Base.++ f1_rc3Yy sat_sc41a;
                } in  : [GHC.Show.$fShow(,)4 sat_sc41b];
          };

Data.Version.$fShowVersion_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Version.Version -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sc41c w1_sc41d w2_sc41e]
        case w_sc41c of {
          GHC.Types.I# ww1_sc41g [Occ=Once] ->
              case w1_sc41d of {
                Data.Version.Version ww3_sc41i [Occ=Once] ww4_sc41j [Occ=Once] ->
                    Data.Version.$w$cshowsPrec ww1_sc41g ww3_sc41i ww4_sc41j w2_sc41e;
              };
        };

Data.Version.$fShowVersion2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Version.$fShowVersion_$cshow
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_sc41k]
        case x_sc41k of {
          Data.Version.Version ww1_sc41m [Occ=Once] ww2_sc41n [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc41m ww2_sc41n GHC.Types.[];
        };

Data.Version.$fShowVersion1
  :: Data.Version.Version -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sc41o w1_sc41p]
        case w_sc41o of {
          Data.Version.Version ww1_sc41r [Occ=Once] ww2_sc41s [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc41r ww2_sc41s w1_sc41p;
        };

Data.Version.$fShowVersion_$cshowList
  :: [Data.Version.Version] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc41t s_sc41u]
        GHC.Show.showList__ Data.Version.$fShowVersion1 ls_sc41t s_sc41u;

Data.Version.$fShowVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Version.$fShowVersion_$cshowsPrec
                                    Data.Version.$fShowVersion_$cshow
                                    Data.Version.$fShowVersion_$cshowList];

f2_rc3YB :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

Data.Version.showVersion2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

Data.Version.showVersion1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.showVersion2;

Data.Version.showVersion_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sc41v]
        case ds_sc41v of {
          [] -> [] [];
          : y_sc41x [Occ=Once] ys_sc41y [Occ=Once] ->
              let {
                sat_sc41A [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ys_sc41y] \s [] Data.Version.showVersion_go ys_sc41y; } in
              let {
                sat_sc41z [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [f2_rc3YB y_sc41x];
              } in  GHC.Base.++ sat_sc41z sat_sc41A;
        };

Data.Version.$wshowVersion [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int] -> [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sc41B ww1_sc41C]
        let {
          arg_sc41D [Occ=OnceL*] :: [GHC.Types.Char]
          [LclId] =
              [ww1_sc41C] \u [] Data.Version.showVersion_go ww1_sc41C;
        } in 
          case GHC.Base.map GHC.Show.$fShowInt_$cshow ww_sc41B of {
            [] -> arg_sc41D;
            : x_sc41F [Occ=Once] xs_sc41G [Occ=Once] ->
                let {
                  go_sc41H [Occ=LoopBreaker]
                    :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [arg_sc41D go_sc41H] \r [ds_sc41I]
                          case ds_sc41I of {
                            [] -> arg_sc41D;
                            : y_sc41K [Occ=Once] ys_sc41L [Occ=Once] ->
                                let {
                                  sat_sc41M [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [go_sc41H ys_sc41L] \s [] go_sc41H ys_sc41L;
                                } in  GHC.Base.++ y_sc41K sat_sc41M;
                          }; } in
                let {
                  sat_sc41N [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      [xs_sc41G] \u []
                          Data.OldList.prependToAll Data.Version.showVersion1 xs_sc41G; } in
                let {
                  sat_sc41O [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      CCCS :! [x_sc41F sat_sc41N];
                } in  go_sc41H sat_sc41O;
          };

Data.Version.showVersion [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [w_sc41P]
        case w_sc41P of {
          Data.Version.Version ww1_sc41R [Occ=Once] ww2_sc41S [Occ=Once] ->
              Data.Version.$wshowVersion ww1_sc41R ww2_sc41S;
        };

Data.Version.$fReadVersion18 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion19;

Data.Version.$fReadVersion_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Version.$fReadVersion18];

Data.Version.$fReadVersion17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

Data.Version.$fReadVersion16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion17;

Data.Version.$fReadVersion_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion16];

Data.Version.$fReadVersion15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch"#;

Data.Version.$fReadVersion14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion15;

Data.Version.$fReadVersion13
  :: Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc41T] Data.Version.$fReadVersion13;

Data.Version.$fReadVersion_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Version.$fReadVersion11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

Data.Version.$fReadVersion10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion11;

Data.Version.$fReadVersion9 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion10];

Data.Version.$fReadVersion8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags"#;

Data.Version.$fReadVersion7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion8;

Data.Version.$fReadVersion6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Base.String]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc41U]
        GHC.Read.$fRead[]_$s$creadListPrec1
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion5;

Data.Version.$fReadVersion3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion4];

Data.Version.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_sc41V w_sc41W]
        case <=# [ww_sc41V 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_sc42g [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                [LclId] =
                    [w_sc41W] \r [a1_sc41Y]
                        let {
                          sat_sc42d [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                          [LclId] =
                              [w_sc41W] \r [a2_sc41Z]
                                  let {
                                    sat_sc42c [Occ=Once]
                                      :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_sc3N8
                                    [LclId] =
                                        [w_sc41W] \r [a3_sc420]
                                            let {
                                              sat_sc429 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                                              [LclId] =
                                                  [w_sc41W a3_sc420] \r [a4_sc421]
                                                      let {
                                                        sat_sc428 [Occ=Once]
                                                          :: [GHC.Base.String]
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_sc3N8
                                                        [LclId] =
                                                            [w_sc41W a3_sc420] \r [a5_sc422]
                                                                let {
                                                                  sat_sc425 [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_sc3N8
                                                                  [LclId] =
                                                                      [w_sc41W
                                                                       a3_sc420
                                                                       a5_sc422] \r [a6_sc423]
                                                                          let {
                                                                            sat_sc424 [Occ=Once]
                                                                              :: Data.Version.Version
                                                                            [LclId] =
                                                                                CCCS Data.Version.Version! [a3_sc420
                                                                                                            a5_sc422];
                                                                          } in  w_sc41W sat_sc424;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          Data.Version.$fReadVersion3
                                                                          sat_sc425
                                                                  of
                                                                  { Unit# ww2_sc427 [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_sc427];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            Data.Version.$fReadVersion7
                                                            Data.Version.$fReadVersion6
                                                            Data.Version.$fReadVersion_n
                                                            sat_sc428;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      Data.Version.$fReadVersion9 sat_sc429
                                              of
                                              { Unit# ww2_sc42b [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_sc42b];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        Data.Version.$fReadVersion14
                                        Data.Version.$fReadVersion12
                                        Data.Version.$fReadVersion_n
                                        sat_sc42c;
                        } in 
                          case
                              Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme sat_sc42d
                          of
                          { Unit# ww2_sc42f [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_sc42f];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme1 sat_sc42g
                of
                { Unit# ww2_sc42i [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_sc42i];
                };
        };

Data.Version.$fReadVersion2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42j w1_sc42k]
        case w_sc42j of {
          GHC.Types.I# ww1_sc42m [Occ=Once] ->
              Data.Version.$w$creadPrec ww1_sc42m w1_sc42k;
        };

Data.Version.$fReadVersion1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Version.$fReadVersion2 eta_B2 eta_B1;

Data.Version.$fReadVersion_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Data.Version.Version
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_sc42n]
        let {
          sat_sc42o [Occ=Once]
            :: Text.ParserCombinators.ReadP.P Data.Version.Version
          [LclId] =
              [n_sc42n] \u []
                  GHC.Read.list3
                      Data.Version.$fReadVersion2
                      n_sc42n
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_sc42o;

Data.Version.$fReadVersion_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Version.Version]
[GblId] =
    [] \u [] GHC.Read.list Data.Version.$fReadVersion1;

Data.Version.$fReadVersion20
  :: Text.ParserCombinators.ReadP.P [Data.Version.Version]
[GblId] =
    [] \u []
        Data.Version.$fReadVersion_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Version.$fReadVersion_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Data.Version.Version]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            Data.Version.$fReadVersion20 eta_B1;

Data.Version.$fReadVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Version.$fReadVersion_$creadsPrec
                                    Data.Version.$fReadVersion_$creadList
                                    Data.Version.$fReadVersion1
                                    Data.Version.$fReadVersion_$creadListPrec];

Data.Version.parseVersion5 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

Data.Version.parseVersion4 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

Data.Version.parseVersion6
  :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

Data.Version.$wp [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42p]
        let {
          sat_sc42K [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nf
          [LclId] =
              [w_sc42p] \r [a_sc42q]
                  case a_sc42q of wild_sc42r {
                    GHC.Types.C# c#_sc42s [Occ=Once] ->
                        case ord# [c#_sc42s] of sat_sc42t {
                          __DEFAULT ->
                              case -# [sat_sc42t 48#] of sat_sc42u {
                                __DEFAULT ->
                                    case int2Word# [sat_sc42u] of sat_sc42v {
                                      __DEFAULT ->
                                          case leWord# [sat_sc42v 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc42H [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nf
                                                  [LclId] =
                                                      [w_sc42p wild_sc42r] \r [a1_sc42x]
                                                          let {
                                                            sat_sc42G [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc42r a1_sc42x] \u []
                                                                    let {
                                                                      sat_sc42y [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc42r
                                                                                   a1_sc42x];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc42y
                                                                      of
                                                                      sat_sc42z
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc42z
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc42B [Occ=Once]
                                                                                ds_sc42C [Occ=Once!] ->
                                                                                  case ds_sc42C of {
                                                                                    [] -> x_sc42B;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      };
                                                          } in  w_sc42p sat_sc42G;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc42H
                                                  of
                                                  { Unit# ww1_sc42J [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc42J];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc42K];

Data.Version.parseVersion3 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc42L]
        case Data.Version.$wp w_sc42L of {
          Unit# ww1_sc42N [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc42N];
        };

Data.Version.parseVersion_m2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_sc42O]
        let {
          lvl4_sc42P [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [k_sc42O] \u []
                  case Data.Version.$wp k_sc42O of {
                    Unit# ww1_sc42R [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_sc42R];
                  }; } in
        let {
          sat_sc42W [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [lvl4_sc42P] \r [a_sc42S]
                  case a_sc42S of {
                    GHC.Types.C# y_sc42U [Occ=Once!] ->
                        case y_sc42U of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl4_sc42P;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_sc42W];

Data.Version.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc42X]
        let {
          $www1_sc42Y [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [w_sc42X] \r [ww_sc42Z]
                  case ord# [ww_sc42Z] of sat_sc431 {
                    __DEFAULT ->
                        case __pkg_ccall base-4.11.0.0 [sat_sc431 GHC.Prim.realWorld#] of {
                          Unit# ds1_sc434 [Occ=Once!] ->
                              case ds1_sc434 of {
                                __DEFAULT ->
                                    let {
                                      wild_sc436 [Occ=OnceL] :: GHC.Types.Char
                                      [LclId, Unf=OtherCon []] =
                                          CCCS GHC.Types.C#! [ww_sc42Z]; } in
                                    let {
                                      sat_sc439 [Occ=Once]
                                        :: GHC.Base.String
                                           -> Text.ParserCombinators.ReadP.P b1_sc3Nr
                                      [LclId] =
                                          [w_sc42X wild_sc436] \r [a1_sc437]
                                              let {
                                                sat_sc438 [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [wild_sc436 a1_sc437];
                                              } in  w_sc42X sat_sc438;
                                    } in 
                                      case
                                          Text.ParserCombinators.ReadP.$wmunch
                                              GHC.Unicode.isAlphaNum sat_sc439
                                      of
                                      { Unit# ww2_sc43b [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Look [ww2_sc43b];
                                      };
                                0# -> Text.ParserCombinators.ReadP.Fail [];
                              };
                        };
                  }; } in
        let {
          ww1_sc43c [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [$www1_sc42Y] \r [w1_sc43d]
                  case w1_sc43d of {
                    GHC.Types.C# ww2_sc43f [Occ=Once] -> $www1_sc42Y ww2_sc43f;
                  }; } in
        let {
          lvl4_sc43g [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [ww1_sc43c]; } in
        let {
          sat_sc43l [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId] =
              [lvl4_sc43g] \r [a_sc43h]
                  case a_sc43h of {
                    GHC.Types.C# y_sc43j [Occ=Once!] ->
                        case y_sc43j of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '-'# -> lvl4_sc43g;
                        };
                  };
        } in  Unit# [sat_sc43l];

Data.Version.parseVersion2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc43m]
        case Data.Version.$wlvl w_sc43m of {
          Unit# ww1_sc43o [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc43o];
        };

Data.Version.$wparseVersion [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc43p]
        let {
          sat_sc43Q [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nx
          [LclId] =
              [w_sc43p] \r [a_sc43q]
                  case a_sc43q of wild_sc43r {
                    GHC.Types.C# c#_sc43s [Occ=Once] ->
                        case ord# [c#_sc43s] of sat_sc43t {
                          __DEFAULT ->
                              case -# [sat_sc43t 48#] of sat_sc43u {
                                __DEFAULT ->
                                    case int2Word# [sat_sc43u] of sat_sc43v {
                                      __DEFAULT ->
                                          case leWord# [sat_sc43v 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc43N [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nx
                                                  [LclId] =
                                                      [w_sc43p wild_sc43r] \r [a1_sc43x]
                                                          let {
                                                            a2_sc43y [Occ=OnceL] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc43r a1_sc43x] \u []
                                                                    let {
                                                                      sat_sc43z [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc43r
                                                                                   a1_sc43x];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc43z
                                                                      of
                                                                      sat_sc43A
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc43A
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc43C [Occ=Once]
                                                                                ds_sc43D [Occ=Once!] ->
                                                                                  case ds_sc43D of {
                                                                                    [] -> x_sc43C;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      }; } in
                                                          let {
                                                            sat_sc43M [Occ=Once]
                                                              :: [GHC.Types.Int]
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_sc3Nx
                                                            [LclId] =
                                                                [w_sc43p a2_sc43y] \r [a3_sc43H]
                                                                    let {
                                                                      a4_sc43I [Occ=OnceL]
                                                                        :: [GHC.Types.Int]
                                                                      [LclId, Unf=OtherCon []] =
                                                                          CCCS :! [a2_sc43y
                                                                                   a3_sc43H]; } in
                                                                    let {
                                                                      sat_sc43L [Occ=Once]
                                                                        :: [GHC.Base.String]
                                                                           -> Text.ParserCombinators.ReadP.P
                                                                                b1_sc3Nx
                                                                      [LclId] =
                                                                          [w_sc43p
                                                                           a4_sc43I] \r [a5_sc43J]
                                                                              let {
                                                                                sat_sc43K [Occ=Once]
                                                                                  :: Data.Version.Version
                                                                                [LclId] =
                                                                                    CCCS Data.Version.Version! [a4_sc43I
                                                                                                                a5_sc43J];
                                                                              } in 
                                                                                w_sc43p sat_sc43K;
                                                                    } in 
                                                                      Text.ParserCombinators.ReadP.endBy3
                                                                          Data.Version.parseVersion2
                                                                          sat_sc43L;
                                                          } in 
                                                            Text.ParserCombinators.ReadP.endBy3
                                                                Data.Version.parseVersion_m2
                                                                sat_sc43M;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc43N
                                                  of
                                                  { Unit# ww1_sc43P [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc43P];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc43Q];

Data.Version.parseVersion1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc43R]
        case Data.Version.$wparseVersion w_sc43R of {
          Unit# ww1_sc43T [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc43T];
        };

Data.Version.parseVersion
  :: Text.ParserCombinators.ReadP.ReadP Data.Version.Version
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Version.parseVersion1 eta_B1;

Data.Version.Version
  :: [GHC.Types.Int] -> [GHC.Base.String] -> Data.Version.Version
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Version.Version [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:06:59.777901399 UTC

Data.Version.$fGenericVersion_$cto
  :: forall x.
     GHC.Generics.Rep Data.Version.Version x -> Data.Version.Version
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_sc5sJ]
        case ds_sc5sJ of {
          GHC.Generics.:*: ds1_sc5sL [Occ=Once] ds2_sc5sM [Occ=Once] ->
              Data.Version.Version [ds1_sc5sL ds2_sc5sM];
        };

Data.Version.$fGenericVersion1
  :: forall x.
     Data.Version.Version
     -> GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Version" 'GHC.Generics.PrefixI 'GHC.Types.True)
          (GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "versionBranch")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "versionTags")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [GHC.Base.String]))
          x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x1_sc5sN]
        case x1_sc5sN of {
          Data.Version.Version g1_sc5sP [Occ=Once] g2_sc5sQ [Occ=Once] ->
              GHC.Generics.:*: [g1_sc5sP g2_sc5sQ];
        };

Data.Version.$fGenericVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Generics.Generic Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Generics.C:Generic! [Data.Version.$fGenericVersion1
                                           Data.Version.$fGenericVersion_$cto];

Data.Version.versionTags
  :: Data.Version.Version -> [GHC.Base.String]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sc5sR]
        case ds_sc5sR of {
          Data.Version.Version _ [Occ=Dead] ds2_sc5sU [Occ=Once] ->
              ds2_sc5sU;
        };

Data.Version.versionBranch
  :: Data.Version.Version -> [GHC.Types.Int]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sc5sV]
        case ds_sc5sV of {
          Data.Version.Version ds1_sc5sX [Occ=Once] _ [Occ=Dead] ->
              ds1_sc5sX;
        };

Data.Version.$fOrdVersion_$ccompare
  :: Data.Version.Version
     -> Data.Version.Version -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [v1_sc5sZ v2_sc5t0]
        case v1_sc5sZ of {
          Data.Version.Version ds_sc5t2 [Occ=Once] _ [Occ=Dead] ->
              case v2_sc5t0 of {
                Data.Version.Version ds2_sc5t5 [Occ=Once] _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare ds_sc5t2 ds2_sc5t5;
              };
        };

Data.Version.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int]
     -> [GHC.Base.String]
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sc5t7 ww1_sc5t8 ww2_sc5t9 ww3_sc5ta]
        case GHC.Classes.$fEq[]_$s$c== ww_sc5t7 ww2_sc5t9 of {
          GHC.Types.False -> GHC.Types.False [];
          GHC.Types.True ->
              case
                  Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww3_sc5ta
              of
              sat_sc5td
              { __DEFAULT ->
                    case
                        Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww1_sc5t8
                    of
                    sat_sc5tc
                    { __DEFAULT -> GHC.Classes.$fEq[]_$s$c==1 sat_sc5tc sat_sc5td;
                    };
              };
        };

Data.Version.$fEqVersion_$c== [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sc5te w1_sc5tf]
        case w_sc5te of {
          Data.Version.Version ww1_sc5th [Occ=Once] ww2_sc5ti [Occ=Once] ->
              case w1_sc5tf of {
                Data.Version.Version ww4_sc5tk [Occ=Once] ww5_sc5tl [Occ=Once] ->
                    Data.Version.$w$c== ww1_sc5th ww2_sc5ti ww4_sc5tk ww5_sc5tl;
              };
        };

Data.Version.$fEqVersion_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sc5tm eta1_sc5tn]
        case eta_sc5tm of {
          Data.Version.Version ww1_sc5tp [Occ=Once] ww2_sc5tq [Occ=Once] ->
              case eta1_sc5tn of {
                Data.Version.Version ww4_sc5ts [Occ=Once] ww5_sc5tt [Occ=Once] ->
                    case
                        Data.Version.$w$c== ww1_sc5tp ww2_sc5tq ww4_sc5ts ww5_sc5tt
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fEqVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Version.$fEqVersion_$c==
                                     Data.Version.$fEqVersion_$c/=];

Data.Version.$fOrdVersion_$c<
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tv y_sc5tw]
        case x_sc5tv of {
          Data.Version.Version ds_sc5ty [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tw of {
                Data.Version.Version ds2_sc5tB [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5ty ds2_sc5tB of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tE y_sc5tF]
        case x_sc5tE of {
          Data.Version.Version ds_sc5tH [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tF of {
                Data.Version.Version ds2_sc5tK [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tH ds2_sc5tK of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tN y_sc5tO]
        case x_sc5tN of {
          Data.Version.Version ds_sc5tQ [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tO of {
                Data.Version.Version ds2_sc5tT [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tQ ds2_sc5tT of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c<=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tW y_sc5tX]
        case x_sc5tW of {
          Data.Version.Version ds_sc5tZ [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tX of {
                Data.Version.Version ds2_sc5u2 [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tZ ds2_sc5u2 of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$cmax
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc5u5 y_sc5u6]
        case x_sc5u5 of wild_sc5u7 {
          Data.Version.Version ds_sc5u8 [Occ=Once] _ [Occ=Dead] ->
              case y_sc5u6 of wild1_sc5ua {
                Data.Version.Version ds2_sc5ub [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5u8 ds2_sc5ub of {
                      __DEFAULT -> wild1_sc5ua;
                      GHC.Types.GT -> wild_sc5u7;
                    };
              };
        };

Data.Version.$fOrdVersion_$cmin
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc5ue y_sc5uf]
        case x_sc5ue of wild_sc5ug {
          Data.Version.Version ds_sc5uh [Occ=Once] _ [Occ=Dead] ->
              case y_sc5uf of wild1_sc5uj {
                Data.Version.Version ds2_sc5uk [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5uh ds2_sc5uk of {
                      __DEFAULT -> wild_sc5ug;
                      GHC.Types.GT -> wild1_sc5uj;
                    };
              };
        };

Data.Version.$fOrdVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Version.$fEqVersion
                                      Data.Version.$fOrdVersion_$ccompare
                                      Data.Version.$fOrdVersion_$c<
                                      Data.Version.$fOrdVersion_$c<=
                                      Data.Version.$fOrdVersion_$c>
                                      Data.Version.$fOrdVersion_$c>=
                                      Data.Version.$fOrdVersion_$cmax
                                      Data.Version.$fOrdVersion_$cmin];

Data.Version.makeVersion :: [GHC.Types.Int] -> Data.Version.Version
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [b_sc5un] Data.Version.Version [b_sc5un GHC.Types.[]];

Data.Version.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Version.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule4];

Data.Version.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Version"#;

Data.Version.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule2];

Data.Version.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Version.$trModule3
                                     Data.Version.$trModule1];

$krep_rc3Yn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3Yo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rc3Yp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3Yn GHC.Types.[]];

$krep3_rc3Yq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3Yp];

$krep4_rc3Yr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rc3Yo GHC.Types.[]];

$krep5_rc3Ys :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rc3Yr];

$krep6_rc3Yt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rc3Yq GHC.Types.[]];

$krep7_rc3Yu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep6_rc3Yt];

Data.Version.$fReadVersion19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version"#;

Data.Version.$tcVersion1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$fReadVersion19];

Data.Version.$tcVersion :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18148779789861942324##
                                    12675349638857785520##
                                    Data.Version.$trModule
                                    Data.Version.$tcVersion1
                                    0#
                                    GHC.Types.krep$*];

$krep8_rc3Yv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Version.$tcVersion
                                              GHC.Types.[]];

$krep9_rc3Yw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rc3Yu $krep8_rc3Yv];

Data.Version.$tc'Version1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3Ys $krep9_rc3Yw];

Data.Version.$tc'Version3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Version"#;

Data.Version.$tc'Version2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$tc'Version3];

Data.Version.$tc'Version :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3698077959655346891##
                                    8062481246695158651##
                                    Data.Version.$trModule
                                    Data.Version.$tc'Version2
                                    0#
                                    Data.Version.$tc'Version1];

f_rc3Yx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version {"#;

f1_rc3Yy :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rc3Yx;

lvl_rc3Yz :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch = "#;

lvl1_rc3YA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags = "#;

Data.Version.$fReadVersion5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

Data.Version.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sc5uo ww1_sc5up ww2_sc5uq w_sc5ur]
        let {
          g_sc5us [Occ=Once*!, Dmd=<L,1*C1(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sc5up ww2_sc5uq] \r [x_sc5ut]
                  let {
                    sat_sc5vc [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sc5up ww2_sc5uq x_sc5ut] \u []
                            let {
                              s_sc5uu [Occ=OnceL*] :: GHC.Base.String
                              [LclId] =
                                  [ww2_sc5uq x_sc5ut] \u []
                                      let {
                                        sat_sc5uO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sc5uq x_sc5ut] \s []
                                                let {
                                                  sat_sc5uN [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sc5uq x_sc5ut] \u []
                                                          let {
                                                            s1_sc5uv [Occ=OnceL*] :: GHC.Base.String
                                                            [LclId] =
                                                                [x_sc5ut] \u []
                                                                    GHC.CString.unpackAppendCString#
                                                                        Data.Version.$fReadVersion5
                                                                        x_sc5ut;
                                                          } in 
                                                            case ww2_sc5uq of {
                                                              [] ->
                                                                  GHC.CString.unpackAppendCString#
                                                                      GHC.Show.showList__4 s1_sc5uv;
                                                              : x1_sc5ux [Occ=Once]
                                                                xs_sc5uy [Occ=Once] ->
                                                                  let {
                                                                    sat_sc5uL [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [s1_sc5uv
                                                                         x1_sc5ux
                                                                         xs_sc5uy] \u []
                                                                            let {
                                                                              sat_sc5uJ [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  [s1_sc5uv
                                                                                   xs_sc5uy] \u []
                                                                                      let {
                                                                                        lvl45_sc5uz [Occ=OnceL]
                                                                                          :: [GHC.Types.Char]
                                                                                        [LclId,
                                                                                         Unf=OtherCon []] =
                                                                                            CCCS :! [GHC.Show.showList__2
                                                                                                     s1_sc5uv]; } in
                                                                                      let {
                                                                                        showl_sc5uA [Occ=LoopBreaker]
                                                                                          :: [[GHC.Types.Char]]
                                                                                             -> GHC.Base.String
                                                                                        [LclId,
                                                                                         Arity=1,
                                                                                         Str=<S,1*U>,
                                                                                         Unf=OtherCon []] =
                                                                                            sat-only [lvl45_sc5uz
                                                                                                      showl_sc5uA] \r [ds2_sc5uB]
                                                                                                case
                                                                                                    ds2_sc5uB
                                                                                                of
                                                                                                { [] ->
                                                                                                      lvl45_sc5uz;
                                                                                                  : y_sc5uD [Occ=Once]
                                                                                                    ys_sc5uE [Occ=Once] ->
                                                                                                      let {
                                                                                                        sat_sc5uH [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [showl_sc5uA
                                                                                                             y_sc5uD
                                                                                                             ys_sc5uE] \u []
                                                                                                                let {
                                                                                                                  sat_sc5uF [Occ=Once]
                                                                                                                    :: [GHC.Types.Char]
                                                                                                                  [LclId] =
                                                                                                                      [showl_sc5uA
                                                                                                                       ys_sc5uE] \u []
                                                                                                                          showl_sc5uA
                                                                                                                              ys_sc5uE; } in
                                                                                                                let {
                                                                                                                  sat_sc5uG [Occ=Once]
                                                                                                                    :: GHC.Base.String
                                                                                                                  [LclId] =
                                                                                                                      CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                               sat_sc5uF];
                                                                                                                } in 
                                                                                                                  GHC.Show.showLitString
                                                                                                                      y_sc5uD
                                                                                                                      sat_sc5uG; } in
                                                                                                      let {
                                                                                                        sat_sc5uI [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                     sat_sc5uH];
                                                                                                      } in 
                                                                                                        : [GHC.Show.showList__1
                                                                                                           sat_sc5uI];
                                                                                                };
                                                                                      } in 
                                                                                        showl_sc5uA
                                                                                            xs_sc5uy; } in
                                                                            let {
                                                                              sat_sc5uK [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sc5uJ];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  x1_sc5ux
                                                                                  sat_sc5uK; } in
                                                                  let {
                                                                    sat_sc5uM [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sc5uL];
                                                                  } in 
                                                                    : [GHC.Show.showList__3
                                                                       sat_sc5uM];
                                                            };
                                                } in 
                                                  GHC.CString.unpackAppendCString#
                                                      lvl1_rc3YA sat_sc5uN;
                                      } in  GHC.Base.++ GHC.Show.showCommaSpace1 sat_sc5uO;
                            } in 
                              case ww1_sc5up of {
                                [] ->
                                    GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sc5uu;
                                : x1_sc5uQ [Occ=Once!] xs_sc5uR [Occ=Once] ->
                                    let {
                                      sat_sc5vb [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sc5uu x1_sc5uQ xs_sc5uR] \u []
                                              case x1_sc5uQ of {
                                                GHC.Types.I# ww4_sc5uT [Occ=Once] ->
                                                    let {
                                                      sat_sc5v7 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [s_sc5uu xs_sc5uR] \u []
                                                              let {
                                                                lvl45_sc5uU [Occ=OnceL]
                                                                  :: [GHC.Types.Char]
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS :! [GHC.Show.showList__2
                                                                             s_sc5uu]; } in
                                                              let {
                                                                showl_sc5uV [Occ=LoopBreaker]
                                                                  :: [GHC.Types.Int]
                                                                     -> GHC.Base.String
                                                                [LclId,
                                                                 Arity=1,
                                                                 Str=<S,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl45_sc5uU
                                                                              showl_sc5uV] \r [ds2_sc5uW]
                                                                        case ds2_sc5uW of {
                                                                          [] -> lvl45_sc5uU;
                                                                          : y_sc5uY [Occ=Once!]
                                                                            ys_sc5uZ [Occ=Once] ->
                                                                              let {
                                                                                sat_sc5v6 [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [showl_sc5uV
                                                                                     y_sc5uY
                                                                                     ys_sc5uZ] \u []
                                                                                        case
                                                                                            y_sc5uY
                                                                                        of
                                                                                        { GHC.Types.I# ww6_sc5v1 [Occ=Once] ->
                                                                                              let {
                                                                                                sat_sc5v2 [Occ=Once]
                                                                                                  :: GHC.Base.String
                                                                                                [LclId] =
                                                                                                    [showl_sc5uV
                                                                                                     ys_sc5uZ] \u []
                                                                                                        showl_sc5uV
                                                                                                            ys_sc5uZ;
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        ww6_sc5v1
                                                                                                        sat_sc5v2
                                                                                                of
                                                                                                { (#,#) ww8_sc5v4 [Occ=Once]
                                                                                                        ww9_sc5v5 [Occ=Once] ->
                                                                                                      : [ww8_sc5v4
                                                                                                         ww9_sc5v5];
                                                                                                };
                                                                                        };
                                                                              } in 
                                                                                : [GHC.Show.showList__1
                                                                                   sat_sc5v6];
                                                                        };
                                                              } in  showl_sc5uV xs_sc5uR;
                                                    } in 
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# ww4_sc5uT sat_sc5v7
                                                      of
                                                      { (#,#) ww6_sc5v9 [Occ=Once]
                                                              ww7_sc5va [Occ=Once] ->
                                                            : [ww6_sc5v9 ww7_sc5va];
                                                      };
                                              };
                                    } in  : [GHC.Show.showList__3 sat_sc5vb];
                              };
                  } in  GHC.CString.unpackAppendCString# lvl_rc3Yz sat_sc5vc;
        } in 
          case >=# [ww_sc5uo 11#] of {
            __DEFAULT ->
                let {
                  sat_sc5ve [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc5ur g_sc5us] \s [] g_sc5us w_sc5ur;
                } in  GHC.Base.++ f1_rc3Yy sat_sc5ve;
            1# ->
                let {
                  sat_sc5vh [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc5ur g_sc5us] \u []
                          let {
                            sat_sc5vg [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [w_sc5ur g_sc5us] \s []
                                    let {
                                      sat_sc5vf [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)2 w_sc5ur];
                                    } in  g_sc5us sat_sc5vf;
                          } in  GHC.Base.++ f1_rc3Yy sat_sc5vg;
                } in  : [GHC.Show.$fShow(,)4 sat_sc5vh];
          };

Data.Version.$fShowVersion_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Version.Version -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sc5vi w1_sc5vj w2_sc5vk]
        case w_sc5vi of {
          GHC.Types.I# ww1_sc5vm [Occ=Once] ->
              case w1_sc5vj of {
                Data.Version.Version ww3_sc5vo [Occ=Once] ww4_sc5vp [Occ=Once] ->
                    Data.Version.$w$cshowsPrec ww1_sc5vm ww3_sc5vo ww4_sc5vp w2_sc5vk;
              };
        };

Data.Version.$fShowVersion2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Version.$fShowVersion_$cshow
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_sc5vq]
        case x_sc5vq of {
          Data.Version.Version ww1_sc5vs [Occ=Once] ww2_sc5vt [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc5vs ww2_sc5vt GHC.Types.[];
        };

Data.Version.$fShowVersion1
  :: Data.Version.Version -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sc5vu w1_sc5vv]
        case w_sc5vu of {
          Data.Version.Version ww1_sc5vx [Occ=Once] ww2_sc5vy [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc5vx ww2_sc5vy w1_sc5vv;
        };

Data.Version.$fShowVersion_$cshowList
  :: [Data.Version.Version] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc5vz s_sc5vA]
        GHC.Show.showList__ Data.Version.$fShowVersion1 ls_sc5vz s_sc5vA;

Data.Version.$fShowVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Version.$fShowVersion_$cshowsPrec
                                    Data.Version.$fShowVersion_$cshow
                                    Data.Version.$fShowVersion_$cshowList];

f2_rc3YB :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

Data.Version.showVersion2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

Data.Version.showVersion1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.showVersion2;

Data.Version.showVersion_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sc5vB]
        case ds_sc5vB of {
          [] -> [] [];
          : y_sc5vD [Occ=Once] ys_sc5vE [Occ=Once] ->
              let {
                sat_sc5vG [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ys_sc5vE] \s [] Data.Version.showVersion_go ys_sc5vE; } in
              let {
                sat_sc5vF [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [f2_rc3YB y_sc5vD];
              } in  GHC.Base.++ sat_sc5vF sat_sc5vG;
        };

Data.Version.$wshowVersion [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int] -> [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sc5vH ww1_sc5vI]
        let {
          arg_sc5vJ [Occ=OnceL*] :: [GHC.Types.Char]
          [LclId] =
              [ww1_sc5vI] \u [] Data.Version.showVersion_go ww1_sc5vI;
        } in 
          case GHC.Base.map GHC.Show.$fShowInt_$cshow ww_sc5vH of {
            [] -> arg_sc5vJ;
            : x_sc5vL [Occ=Once] xs_sc5vM [Occ=Once] ->
                let {
                  go_sc5vN [Occ=LoopBreaker]
                    :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [arg_sc5vJ go_sc5vN] \r [ds_sc5vO]
                          case ds_sc5vO of {
                            [] -> arg_sc5vJ;
                            : y_sc5vQ [Occ=Once] ys_sc5vR [Occ=Once] ->
                                let {
                                  sat_sc5vS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [go_sc5vN ys_sc5vR] \s [] go_sc5vN ys_sc5vR;
                                } in  GHC.Base.++ y_sc5vQ sat_sc5vS;
                          }; } in
                let {
                  sat_sc5vT [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      [xs_sc5vM] \u []
                          Data.OldList.prependToAll Data.Version.showVersion1 xs_sc5vM; } in
                let {
                  sat_sc5vU [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      CCCS :! [x_sc5vL sat_sc5vT];
                } in  go_sc5vN sat_sc5vU;
          };

Data.Version.showVersion [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [w_sc5vV]
        case w_sc5vV of {
          Data.Version.Version ww1_sc5vX [Occ=Once] ww2_sc5vY [Occ=Once] ->
              Data.Version.$wshowVersion ww1_sc5vX ww2_sc5vY;
        };

Data.Version.$fReadVersion18 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion19;

Data.Version.$fReadVersion_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Version.$fReadVersion18];

Data.Version.$fReadVersion17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

Data.Version.$fReadVersion16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion17;

Data.Version.$fReadVersion_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion16];

Data.Version.$fReadVersion15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch"#;

Data.Version.$fReadVersion14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion15;

Data.Version.$fReadVersion13
  :: Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc5vZ] Data.Version.$fReadVersion13;

Data.Version.$fReadVersion_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Version.$fReadVersion11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

Data.Version.$fReadVersion10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion11;

Data.Version.$fReadVersion9 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion10];

Data.Version.$fReadVersion8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags"#;

Data.Version.$fReadVersion7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion8;

Data.Version.$fReadVersion6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Base.String]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc5w0]
        GHC.Read.$fRead[]_$s$creadListPrec1
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion5;

Data.Version.$fReadVersion3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion4];

Data.Version.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_sc5w1 w_sc5w2]
        case <=# [ww_sc5w1 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_sc5wm [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                [LclId] =
                    [w_sc5w2] \r [a1_sc5w4]
                        let {
                          sat_sc5wj [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                          [LclId] =
                              [w_sc5w2] \r [a2_sc5w5]
                                  let {
                                    sat_sc5wi [Occ=Once]
                                      :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_sc3N8
                                    [LclId] =
                                        [w_sc5w2] \r [a3_sc5w6]
                                            let {
                                              sat_sc5wf [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                                              [LclId] =
                                                  [w_sc5w2 a3_sc5w6] \r [a4_sc5w7]
                                                      let {
                                                        sat_sc5we [Occ=Once]
                                                          :: [GHC.Base.String]
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_sc3N8
                                                        [LclId] =
                                                            [w_sc5w2 a3_sc5w6] \r [a5_sc5w8]
                                                                let {
                                                                  sat_sc5wb [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_sc3N8
                                                                  [LclId] =
                                                                      [w_sc5w2
                                                                       a3_sc5w6
                                                                       a5_sc5w8] \r [a6_sc5w9]
                                                                          let {
                                                                            sat_sc5wa [Occ=Once]
                                                                              :: Data.Version.Version
                                                                            [LclId] =
                                                                                CCCS Data.Version.Version! [a3_sc5w6
                                                                                                            a5_sc5w8];
                                                                          } in  w_sc5w2 sat_sc5wa;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          Data.Version.$fReadVersion3
                                                                          sat_sc5wb
                                                                  of
                                                                  { Unit# ww2_sc5wd [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_sc5wd];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            Data.Version.$fReadVersion7
                                                            Data.Version.$fReadVersion6
                                                            Data.Version.$fReadVersion_n
                                                            sat_sc5we;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      Data.Version.$fReadVersion9 sat_sc5wf
                                              of
                                              { Unit# ww2_sc5wh [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_sc5wh];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        Data.Version.$fReadVersion14
                                        Data.Version.$fReadVersion12
                                        Data.Version.$fReadVersion_n
                                        sat_sc5wi;
                        } in 
                          case
                              Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme sat_sc5wj
                          of
                          { Unit# ww2_sc5wl [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_sc5wl];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme1 sat_sc5wm
                of
                { Unit# ww2_sc5wo [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_sc5wo];
                };
        };

Data.Version.$fReadVersion2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5wp w1_sc5wq]
        case w_sc5wp of {
          GHC.Types.I# ww1_sc5ws [Occ=Once] ->
              Data.Version.$w$creadPrec ww1_sc5ws w1_sc5wq;
        };

Data.Version.$fReadVersion1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Version.$fReadVersion2 eta_B2 eta_B1;

Data.Version.$fReadVersion_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Data.Version.Version
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_sc5wt]
        let {
          sat_sc5wu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P Data.Version.Version
          [LclId] =
              [n_sc5wt] \u []
                  GHC.Read.list3
                      Data.Version.$fReadVersion2
                      n_sc5wt
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_sc5wu;

Data.Version.$fReadVersion_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Version.Version]
[GblId] =
    [] \u [] GHC.Read.list Data.Version.$fReadVersion1;

Data.Version.$fReadVersion20
  :: Text.ParserCombinators.ReadP.P [Data.Version.Version]
[GblId] =
    [] \u []
        Data.Version.$fReadVersion_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Version.$fReadVersion_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Data.Version.Version]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            Data.Version.$fReadVersion20 eta_B1;

Data.Version.$fReadVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Version.$fReadVersion_$creadsPrec
                                    Data.Version.$fReadVersion_$creadList
                                    Data.Version.$fReadVersion1
                                    Data.Version.$fReadVersion_$creadListPrec];

Data.Version.parseVersion5 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

Data.Version.parseVersion4 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

Data.Version.parseVersion6
  :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

Data.Version.$wp [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5wv]
        let {
          sat_sc5wQ [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nf
          [LclId] =
              [w_sc5wv] \r [a_sc5ww]
                  case a_sc5ww of wild_sc5wx {
                    GHC.Types.C# c#_sc5wy [Occ=Once] ->
                        case ord# [c#_sc5wy] of sat_sc5wz {
                          __DEFAULT ->
                              case -# [sat_sc5wz 48#] of sat_sc5wA {
                                __DEFAULT ->
                                    case int2Word# [sat_sc5wA] of sat_sc5wB {
                                      __DEFAULT ->
                                          case leWord# [sat_sc5wB 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc5wN [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nf
                                                  [LclId] =
                                                      [w_sc5wv wild_sc5wx] \r [a1_sc5wD]
                                                          let {
                                                            sat_sc5wM [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc5wx a1_sc5wD] \u []
                                                                    let {
                                                                      sat_sc5wE [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc5wx
                                                                                   a1_sc5wD];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc5wE
                                                                      of
                                                                      sat_sc5wF
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc5wF
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc5wH [Occ=Once]
                                                                                ds_sc5wI [Occ=Once!] ->
                                                                                  case ds_sc5wI of {
                                                                                    [] -> x_sc5wH;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      };
                                                          } in  w_sc5wv sat_sc5wM;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc5wN
                                                  of
                                                  { Unit# ww1_sc5wP [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc5wP];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc5wQ];

Data.Version.parseVersion3 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5wR]
        case Data.Version.$wp w_sc5wR of {
          Unit# ww1_sc5wT [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5wT];
        };

Data.Version.parseVersion_m2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_sc5wU]
        let {
          lvl4_sc5wV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [k_sc5wU] \u []
                  case Data.Version.$wp k_sc5wU of {
                    Unit# ww1_sc5wX [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_sc5wX];
                  }; } in
        let {
          sat_sc5x2 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [lvl4_sc5wV] \r [a_sc5wY]
                  case a_sc5wY of {
                    GHC.Types.C# y_sc5x0 [Occ=Once!] ->
                        case y_sc5x0 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl4_sc5wV;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_sc5x2];

Data.Version.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5x3]
        let {
          $www1_sc5x4 [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [w_sc5x3] \r [ww_sc5x5]
                  case ord# [ww_sc5x5] of sat_sc5x7 {
                    __DEFAULT ->
                        case __pkg_ccall base-4.11.0.0 [sat_sc5x7 GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_sc5xa [Occ=Once!] ->
                              case ds1_sc5xa of {
                                __DEFAULT ->
                                    let {
                                      wild_sc5xc [Occ=OnceL] :: GHC.Types.Char
                                      [LclId, Unf=OtherCon []] =
                                          CCCS GHC.Types.C#! [ww_sc5x5]; } in
                                    let {
                                      sat_sc5xf [Occ=Once]
                                        :: GHC.Base.String
                                           -> Text.ParserCombinators.ReadP.P b1_sc3Nr
                                      [LclId] =
                                          [w_sc5x3 wild_sc5xc] \r [a1_sc5xd]
                                              let {
                                                sat_sc5xe [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [wild_sc5xc a1_sc5xd];
                                              } in  w_sc5x3 sat_sc5xe;
                                    } in 
                                      case
                                          Text.ParserCombinators.ReadP.$wmunch
                                              GHC.Unicode.isAlphaNum sat_sc5xf
                                      of
                                      { Unit# ww2_sc5xh [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Look [ww2_sc5xh];
                                      };
                                0# -> Text.ParserCombinators.ReadP.Fail [];
                              };
                        };
                  }; } in
        let {
          ww1_sc5xi [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [$www1_sc5x4] \r [w1_sc5xj]
                  case w1_sc5xj of {
                    GHC.Types.C# ww2_sc5xl [Occ=Once] -> $www1_sc5x4 ww2_sc5xl;
                  }; } in
        let {
          lvl4_sc5xm [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [ww1_sc5xi]; } in
        let {
          sat_sc5xr [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId] =
              [lvl4_sc5xm] \r [a_sc5xn]
                  case a_sc5xn of {
                    GHC.Types.C# y_sc5xp [Occ=Once!] ->
                        case y_sc5xp of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '-'# -> lvl4_sc5xm;
                        };
                  };
        } in  Unit# [sat_sc5xr];

Data.Version.parseVersion2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5xs]
        case Data.Version.$wlvl w_sc5xs of {
          Unit# ww1_sc5xu [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5xu];
        };

Data.Version.$wparseVersion [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5xv]
        let {
          sat_sc5xW [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nx
          [LclId] =
              [w_sc5xv] \r [a_sc5xw]
                  case a_sc5xw of wild_sc5xx {
                    GHC.Types.C# c#_sc5xy [Occ=Once] ->
                        case ord# [c#_sc5xy] of sat_sc5xz {
                          __DEFAULT ->
                              case -# [sat_sc5xz 48#] of sat_sc5xA {
                                __DEFAULT ->
                                    case int2Word# [sat_sc5xA] of sat_sc5xB {
                                      __DEFAULT ->
                                          case leWord# [sat_sc5xB 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc5xT [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nx
                                                  [LclId] =
                                                      [w_sc5xv wild_sc5xx] \r [a1_sc5xD]
                                                          let {
                                                            a2_sc5xE [Occ=OnceL] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc5xx a1_sc5xD] \u []
                                                                    let {
                                                                      sat_sc5xF [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc5xx
                                                                                   a1_sc5xD];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc5xF
                                                                      of
                                                                      sat_sc5xG
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc5xG
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc5xI [Occ=Once]
                                                                                ds_sc5xJ [Occ=Once!] ->
                                                                                  case ds_sc5xJ of {
                                                                                    [] -> x_sc5xI;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      }; } in
                                                          let {
                                                            sat_sc5xS [Occ=Once]
                                                              :: [GHC.Types.Int]
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_sc3Nx
                                                            [LclId] =
                                                                [w_sc5xv a2_sc5xE] \r [a3_sc5xN]
                                                                    let {
                                                                      a4_sc5xO [Occ=OnceL]
                                                                        :: [GHC.Types.Int]
                                                                      [LclId, Unf=OtherCon []] =
                                                                          CCCS :! [a2_sc5xE
                                                                                   a3_sc5xN]; } in
                                                                    let {
                                                                      sat_sc5xR [Occ=Once]
                                                                        :: [GHC.Base.String]
                                                                           -> Text.ParserCombinators.ReadP.P
                                                                                b1_sc3Nx
                                                                      [LclId] =
                                                                          [w_sc5xv
                                                                           a4_sc5xO] \r [a5_sc5xP]
                                                                              let {
                                                                                sat_sc5xQ [Occ=Once]
                                                                                  :: Data.Version.Version
                                                                                [LclId] =
                                                                                    CCCS Data.Version.Version! [a4_sc5xO
                                                                                                                a5_sc5xP];
                                                                              } in 
                                                                                w_sc5xv sat_sc5xQ;
                                                                    } in 
                                                                      Text.ParserCombinators.ReadP.endBy3
                                                                          Data.Version.parseVersion2
                                                                          sat_sc5xR;
                                                          } in 
                                                            Text.ParserCombinators.ReadP.endBy3
                                                                Data.Version.parseVersion_m2
                                                                sat_sc5xS;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc5xT
                                                  of
                                                  { Unit# ww1_sc5xV [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc5xV];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc5xW];

Data.Version.parseVersion1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5xX]
        case Data.Version.$wparseVersion w_sc5xX of {
          Unit# ww1_sc5xZ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5xZ];
        };

Data.Version.parseVersion
  :: Text.ParserCombinators.ReadP.ReadP Data.Version.Version
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Version.parseVersion1 eta_B1;

Data.Version.Version
  :: [GHC.Types.Int] -> [GHC.Base.String] -> Data.Version.Version
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Version.Version [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:59.808244158 UTC

Data.Version.$fGenericVersion_$cto
  :: forall x.
     GHC.Generics.Rep Data.Version.Version x -> Data.Version.Version
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_sc5sJ]
        case ds_sc5sJ of {
          GHC.Generics.:*: ds1_sc5sL [Occ=Once] ds2_sc5sM [Occ=Once] ->
              Data.Version.Version [ds1_sc5sL ds2_sc5sM];
        };

Data.Version.$fGenericVersion1
  :: forall x.
     Data.Version.Version
     -> GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Version" 'GHC.Generics.PrefixI 'GHC.Types.True)
          (GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "versionBranch")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "versionTags")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [GHC.Base.String]))
          x
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x1_sc5sN]
        case x1_sc5sN of {
          Data.Version.Version g1_sc5sP [Occ=Once] g2_sc5sQ [Occ=Once] ->
              GHC.Generics.:*: [g1_sc5sP g2_sc5sQ];
        };

Data.Version.$fGenericVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Generics.Generic Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Generics.C:Generic! [Data.Version.$fGenericVersion1
                                           Data.Version.$fGenericVersion_$cto];

Data.Version.versionTags
  :: Data.Version.Version -> [GHC.Base.String]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sc5sR]
        case ds_sc5sR of {
          Data.Version.Version _ [Occ=Dead] ds2_sc5sU [Occ=Once] ->
              ds2_sc5sU;
        };

Data.Version.versionBranch
  :: Data.Version.Version -> [GHC.Types.Int]
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sc5sV]
        case ds_sc5sV of {
          Data.Version.Version ds1_sc5sX [Occ=Once] _ [Occ=Dead] ->
              ds1_sc5sX;
        };

Data.Version.$fOrdVersion_$ccompare
  :: Data.Version.Version
     -> Data.Version.Version -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [v1_sc5sZ v2_sc5t0]
        case v1_sc5sZ of {
          Data.Version.Version ds_sc5t2 [Occ=Once] _ [Occ=Dead] ->
              case v2_sc5t0 of {
                Data.Version.Version ds2_sc5t5 [Occ=Once] _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare ds_sc5t2 ds2_sc5t5;
              };
        };

Data.Version.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int]
     -> [GHC.Base.String]
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Types.Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sc5t7 ww1_sc5t8 ww2_sc5t9 ww3_sc5ta]
        case GHC.Classes.$fEq[]_$s$c== ww_sc5t7 ww2_sc5t9 of {
          GHC.Types.False -> GHC.Types.False [];
          GHC.Types.True ->
              case
                  Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww3_sc5ta
              of
              sat_sc5td
              { __DEFAULT ->
                    case
                        Data.OldList.sortBy GHC.Classes.$fOrd[]_$s$ccompare1 ww1_sc5t8
                    of
                    sat_sc5tc
                    { __DEFAULT -> GHC.Classes.$fEq[]_$s$c==1 sat_sc5tc sat_sc5td;
                    };
              };
        };

Data.Version.$fEqVersion_$c== [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sc5te w1_sc5tf]
        case w_sc5te of {
          Data.Version.Version ww1_sc5th [Occ=Once] ww2_sc5ti [Occ=Once] ->
              case w1_sc5tf of {
                Data.Version.Version ww4_sc5tk [Occ=Once] ww5_sc5tl [Occ=Once] ->
                    Data.Version.$w$c== ww1_sc5th ww2_sc5ti ww4_sc5tk ww5_sc5tl;
              };
        };

Data.Version.$fEqVersion_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [eta_sc5tm eta1_sc5tn]
        case eta_sc5tm of {
          Data.Version.Version ww1_sc5tp [Occ=Once] ww2_sc5tq [Occ=Once] ->
              case eta1_sc5tn of {
                Data.Version.Version ww4_sc5ts [Occ=Once] ww5_sc5tt [Occ=Once] ->
                    case
                        Data.Version.$w$c== ww1_sc5tp ww2_sc5tq ww4_sc5ts ww5_sc5tt
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fEqVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Version.$fEqVersion_$c==
                                     Data.Version.$fEqVersion_$c/=];

Data.Version.$fOrdVersion_$c<
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tv y_sc5tw]
        case x_sc5tv of {
          Data.Version.Version ds_sc5ty [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tw of {
                Data.Version.Version ds2_sc5tB [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5ty ds2_sc5tB of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tE y_sc5tF]
        case x_sc5tE of {
          Data.Version.Version ds_sc5tH [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tF of {
                Data.Version.Version ds2_sc5tK [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tH ds2_sc5tK of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c>
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tN y_sc5tO]
        case x_sc5tN of {
          Data.Version.Version ds_sc5tQ [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tO of {
                Data.Version.Version ds2_sc5tT [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tQ ds2_sc5tT of {
                      __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

Data.Version.$fOrdVersion_$c<=
  :: Data.Version.Version -> Data.Version.Version -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
 Unf=OtherCon []] =
    [] \r [x_sc5tW y_sc5tX]
        case x_sc5tW of {
          Data.Version.Version ds_sc5tZ [Occ=Once] _ [Occ=Dead] ->
              case y_sc5tX of {
                Data.Version.Version ds2_sc5u2 [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5tZ ds2_sc5u2 of {
                      __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

Data.Version.$fOrdVersion_$cmax
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc5u5 y_sc5u6]
        case x_sc5u5 of wild_sc5u7 {
          Data.Version.Version ds_sc5u8 [Occ=Once] _ [Occ=Dead] ->
              case y_sc5u6 of wild1_sc5ua {
                Data.Version.Version ds2_sc5ub [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5u8 ds2_sc5ub of {
                      __DEFAULT -> wild1_sc5ua;
                      GHC.Types.GT -> wild_sc5u7;
                    };
              };
        };

Data.Version.$fOrdVersion_$cmin
  :: Data.Version.Version
     -> Data.Version.Version -> Data.Version.Version
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_sc5ue y_sc5uf]
        case x_sc5ue of wild_sc5ug {
          Data.Version.Version ds_sc5uh [Occ=Once] _ [Occ=Dead] ->
              case y_sc5uf of wild1_sc5uj {
                Data.Version.Version ds2_sc5uk [Occ=Once] _ [Occ=Dead] ->
                    case GHC.Classes.$fOrd[]_$s$ccompare ds_sc5uh ds2_sc5uk of {
                      __DEFAULT -> wild_sc5ug;
                      GHC.Types.GT -> wild1_sc5uj;
                    };
              };
        };

Data.Version.$fOrdVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord Data.Version.Version
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Version.$fEqVersion
                                      Data.Version.$fOrdVersion_$ccompare
                                      Data.Version.$fOrdVersion_$c<
                                      Data.Version.$fOrdVersion_$c<=
                                      Data.Version.$fOrdVersion_$c>
                                      Data.Version.$fOrdVersion_$c>=
                                      Data.Version.$fOrdVersion_$cmax
                                      Data.Version.$fOrdVersion_$cmin];

Data.Version.makeVersion :: [GHC.Types.Int] -> Data.Version.Version
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [b_sc5un] Data.Version.Version [b_sc5un GHC.Types.[]];

Data.Version.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Version.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule4];

Data.Version.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Version"#;

Data.Version.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$trModule2];

Data.Version.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Version.$trModule3
                                     Data.Version.$trModule1];

$krep_rc3Yn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rc3Yo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rc3Yp :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rc3Yn GHC.Types.[]];

$krep3_rc3Yq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_rc3Yp];

$krep4_rc3Yr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rc3Yo GHC.Types.[]];

$krep5_rc3Ys :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rc3Yr];

$krep6_rc3Yt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rc3Yq GHC.Types.[]];

$krep7_rc3Yu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep6_rc3Yt];

Data.Version.$fReadVersion19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version"#;

Data.Version.$tcVersion1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$fReadVersion19];

Data.Version.$tcVersion :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18148779789861942324##
                                    12675349638857785520##
                                    Data.Version.$trModule
                                    Data.Version.$tcVersion1
                                    0#
                                    GHC.Types.krep$*];

$krep8_rc3Yv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Version.$tcVersion
                                              GHC.Types.[]];

$krep9_rc3Yw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_rc3Yu $krep8_rc3Yv];

Data.Version.$tc'Version1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rc3Ys $krep9_rc3Yw];

Data.Version.$tc'Version3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Version"#;

Data.Version.$tc'Version2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Version.$tc'Version3];

Data.Version.$tc'Version :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3698077959655346891##
                                    8062481246695158651##
                                    Data.Version.$trModule
                                    Data.Version.$tc'Version2
                                    0#
                                    Data.Version.$tc'Version1];

f_rc3Yx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Version {"#;

f1_rc3Yy :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rc3Yx;

lvl_rc3Yz :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch = "#;

lvl1_rc3YA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags = "#;

Data.Version.$fReadVersion5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

Data.Version.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Int]
     -> [GHC.Base.String]
     -> GHC.Base.String
     -> GHC.Base.String
[GblId, Arity=4, Str=<S,U><L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sc5uo ww1_sc5up ww2_sc5uq w_sc5ur]
        let {
          g_sc5us [Occ=Once*!, Dmd=<L,1*C1(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sc5up ww2_sc5uq] \r [x_sc5ut]
                  let {
                    sat_sc5vc [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sc5up ww2_sc5uq x_sc5ut] \u []
                            let {
                              s_sc5uu [Occ=OnceL*] :: GHC.Base.String
                              [LclId] =
                                  [ww2_sc5uq x_sc5ut] \u []
                                      let {
                                        sat_sc5uO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sc5uq x_sc5ut] \s []
                                                let {
                                                  sat_sc5uN [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sc5uq x_sc5ut] \u []
                                                          let {
                                                            s1_sc5uv [Occ=OnceL*] :: GHC.Base.String
                                                            [LclId] =
                                                                [x_sc5ut] \u []
                                                                    GHC.CString.unpackAppendCString#
                                                                        Data.Version.$fReadVersion5
                                                                        x_sc5ut;
                                                          } in 
                                                            case ww2_sc5uq of {
                                                              [] ->
                                                                  GHC.CString.unpackAppendCString#
                                                                      GHC.Show.showList__4 s1_sc5uv;
                                                              : x1_sc5ux [Occ=Once]
                                                                xs_sc5uy [Occ=Once] ->
                                                                  let {
                                                                    sat_sc5uL [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [s1_sc5uv
                                                                         x1_sc5ux
                                                                         xs_sc5uy] \u []
                                                                            let {
                                                                              sat_sc5uJ [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  [s1_sc5uv
                                                                                   xs_sc5uy] \u []
                                                                                      let {
                                                                                        lvl45_sc5uz [Occ=OnceL]
                                                                                          :: [GHC.Types.Char]
                                                                                        [LclId,
                                                                                         Unf=OtherCon []] =
                                                                                            CCCS :! [GHC.Show.showList__2
                                                                                                     s1_sc5uv]; } in
                                                                                      let {
                                                                                        showl_sc5uA [Occ=LoopBreaker]
                                                                                          :: [[GHC.Types.Char]]
                                                                                             -> GHC.Base.String
                                                                                        [LclId,
                                                                                         Arity=1,
                                                                                         Str=<S,1*U>,
                                                                                         Unf=OtherCon []] =
                                                                                            sat-only [lvl45_sc5uz
                                                                                                      showl_sc5uA] \r [ds2_sc5uB]
                                                                                                case
                                                                                                    ds2_sc5uB
                                                                                                of
                                                                                                { [] ->
                                                                                                      lvl45_sc5uz;
                                                                                                  : y_sc5uD [Occ=Once]
                                                                                                    ys_sc5uE [Occ=Once] ->
                                                                                                      let {
                                                                                                        sat_sc5uH [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [showl_sc5uA
                                                                                                             y_sc5uD
                                                                                                             ys_sc5uE] \u []
                                                                                                                let {
                                                                                                                  sat_sc5uF [Occ=Once]
                                                                                                                    :: [GHC.Types.Char]
                                                                                                                  [LclId] =
                                                                                                                      [showl_sc5uA
                                                                                                                       ys_sc5uE] \u []
                                                                                                                          showl_sc5uA
                                                                                                                              ys_sc5uE; } in
                                                                                                                let {
                                                                                                                  sat_sc5uG [Occ=Once]
                                                                                                                    :: GHC.Base.String
                                                                                                                  [LclId] =
                                                                                                                      CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                               sat_sc5uF];
                                                                                                                } in 
                                                                                                                  GHC.Show.showLitString
                                                                                                                      y_sc5uD
                                                                                                                      sat_sc5uG; } in
                                                                                                      let {
                                                                                                        sat_sc5uI [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                     sat_sc5uH];
                                                                                                      } in 
                                                                                                        : [GHC.Show.showList__1
                                                                                                           sat_sc5uI];
                                                                                                };
                                                                                      } in 
                                                                                        showl_sc5uA
                                                                                            xs_sc5uy; } in
                                                                            let {
                                                                              sat_sc5uK [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sc5uJ];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  x1_sc5ux
                                                                                  sat_sc5uK; } in
                                                                  let {
                                                                    sat_sc5uM [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sc5uL];
                                                                  } in 
                                                                    : [GHC.Show.showList__3
                                                                       sat_sc5uM];
                                                            };
                                                } in 
                                                  GHC.CString.unpackAppendCString#
                                                      lvl1_rc3YA sat_sc5uN;
                                      } in  GHC.Base.++ GHC.Show.showCommaSpace1 sat_sc5uO;
                            } in 
                              case ww1_sc5up of {
                                [] ->
                                    GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sc5uu;
                                : x1_sc5uQ [Occ=Once!] xs_sc5uR [Occ=Once] ->
                                    let {
                                      sat_sc5vb [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sc5uu x1_sc5uQ xs_sc5uR] \u []
                                              case x1_sc5uQ of {
                                                GHC.Types.I# ww4_sc5uT [Occ=Once] ->
                                                    let {
                                                      sat_sc5v7 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [s_sc5uu xs_sc5uR] \u []
                                                              let {
                                                                lvl45_sc5uU [Occ=OnceL]
                                                                  :: [GHC.Types.Char]
                                                                [LclId, Unf=OtherCon []] =
                                                                    CCCS :! [GHC.Show.showList__2
                                                                             s_sc5uu]; } in
                                                              let {
                                                                showl_sc5uV [Occ=LoopBreaker]
                                                                  :: [GHC.Types.Int]
                                                                     -> GHC.Base.String
                                                                [LclId,
                                                                 Arity=1,
                                                                 Str=<S,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [lvl45_sc5uU
                                                                              showl_sc5uV] \r [ds2_sc5uW]
                                                                        case ds2_sc5uW of {
                                                                          [] -> lvl45_sc5uU;
                                                                          : y_sc5uY [Occ=Once!]
                                                                            ys_sc5uZ [Occ=Once] ->
                                                                              let {
                                                                                sat_sc5v6 [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [showl_sc5uV
                                                                                     y_sc5uY
                                                                                     ys_sc5uZ] \u []
                                                                                        case
                                                                                            y_sc5uY
                                                                                        of
                                                                                        { GHC.Types.I# ww6_sc5v1 [Occ=Once] ->
                                                                                              let {
                                                                                                sat_sc5v2 [Occ=Once]
                                                                                                  :: GHC.Base.String
                                                                                                [LclId] =
                                                                                                    [showl_sc5uV
                                                                                                     ys_sc5uZ] \u []
                                                                                                        showl_sc5uV
                                                                                                            ys_sc5uZ;
                                                                                              } in 
                                                                                                case
                                                                                                    GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        ww6_sc5v1
                                                                                                        sat_sc5v2
                                                                                                of
                                                                                                { (#,#) ww8_sc5v4 [Occ=Once]
                                                                                                        ww9_sc5v5 [Occ=Once] ->
                                                                                                      : [ww8_sc5v4
                                                                                                         ww9_sc5v5];
                                                                                                };
                                                                                        };
                                                                              } in 
                                                                                : [GHC.Show.showList__1
                                                                                   sat_sc5v6];
                                                                        };
                                                              } in  showl_sc5uV xs_sc5uR;
                                                    } in 
                                                      case
                                                          GHC.Show.$wshowSignedInt
                                                              0# ww4_sc5uT sat_sc5v7
                                                      of
                                                      { (#,#) ww6_sc5v9 [Occ=Once]
                                                              ww7_sc5va [Occ=Once] ->
                                                            : [ww6_sc5v9 ww7_sc5va];
                                                      };
                                              };
                                    } in  : [GHC.Show.showList__3 sat_sc5vb];
                              };
                  } in  GHC.CString.unpackAppendCString# lvl_rc3Yz sat_sc5vc;
        } in 
          case >=# [ww_sc5uo 11#] of {
            __DEFAULT ->
                let {
                  sat_sc5ve [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc5ur g_sc5us] \s [] g_sc5us w_sc5ur;
                } in  GHC.Base.++ f1_rc3Yy sat_sc5ve;
            1# ->
                let {
                  sat_sc5vh [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sc5ur g_sc5us] \u []
                          let {
                            sat_sc5vg [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [w_sc5ur g_sc5us] \s []
                                    let {
                                      sat_sc5vf [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [GHC.Show.$fShow(,)2 w_sc5ur];
                                    } in  g_sc5us sat_sc5vf;
                          } in  GHC.Base.++ f1_rc3Yy sat_sc5vg;
                } in  : [GHC.Show.$fShow(,)4 sat_sc5vh];
          };

Data.Version.$fShowVersion_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> Data.Version.Version -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sc5vi w1_sc5vj w2_sc5vk]
        case w_sc5vi of {
          GHC.Types.I# ww1_sc5vm [Occ=Once] ->
              case w1_sc5vj of {
                Data.Version.Version ww3_sc5vo [Occ=Once] ww4_sc5vp [Occ=Once] ->
                    Data.Version.$w$cshowsPrec ww1_sc5vm ww3_sc5vo ww4_sc5vp w2_sc5vk;
              };
        };

Data.Version.$fShowVersion2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Version.$fShowVersion_$cshow
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [x_sc5vq]
        case x_sc5vq of {
          Data.Version.Version ww1_sc5vs [Occ=Once] ww2_sc5vt [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc5vs ww2_sc5vt GHC.Types.[];
        };

Data.Version.$fShowVersion1
  :: Data.Version.Version -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U(1*U,1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sc5vu w1_sc5vv]
        case w_sc5vu of {
          Data.Version.Version ww1_sc5vx [Occ=Once] ww2_sc5vy [Occ=Once] ->
              Data.Version.$w$cshowsPrec 0# ww1_sc5vx ww2_sc5vy w1_sc5vv;
        };

Data.Version.$fShowVersion_$cshowList
  :: [Data.Version.Version] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sc5vz s_sc5vA]
        GHC.Show.showList__ Data.Version.$fShowVersion1 ls_sc5vz s_sc5vA;

Data.Version.$fShowVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Version.$fShowVersion_$cshowsPrec
                                    Data.Version.$fShowVersion_$cshow
                                    Data.Version.$fShowVersion_$cshowList];

f2_rc3YB :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

Data.Version.showVersion2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

Data.Version.showVersion1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.showVersion2;

Data.Version.showVersion_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sc5vB]
        case ds_sc5vB of {
          [] -> [] [];
          : y_sc5vD [Occ=Once] ys_sc5vE [Occ=Once] ->
              let {
                sat_sc5vG [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ys_sc5vE] \s [] Data.Version.showVersion_go ys_sc5vE; } in
              let {
                sat_sc5vF [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [f2_rc3YB y_sc5vD];
              } in  GHC.Base.++ sat_sc5vF sat_sc5vG;
        };

Data.Version.$wshowVersion [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Int] -> [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sc5vH ww1_sc5vI]
        let {
          arg_sc5vJ [Occ=OnceL*] :: [GHC.Types.Char]
          [LclId] =
              [ww1_sc5vI] \u [] Data.Version.showVersion_go ww1_sc5vI;
        } in 
          case GHC.Base.map GHC.Show.$fShowInt_$cshow ww_sc5vH of {
            [] -> arg_sc5vJ;
            : x_sc5vL [Occ=Once] xs_sc5vM [Occ=Once] ->
                let {
                  go_sc5vN [Occ=LoopBreaker]
                    :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [arg_sc5vJ go_sc5vN] \r [ds_sc5vO]
                          case ds_sc5vO of {
                            [] -> arg_sc5vJ;
                            : y_sc5vQ [Occ=Once] ys_sc5vR [Occ=Once] ->
                                let {
                                  sat_sc5vS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [go_sc5vN ys_sc5vR] \s [] go_sc5vN ys_sc5vR;
                                } in  GHC.Base.++ y_sc5vQ sat_sc5vS;
                          }; } in
                let {
                  sat_sc5vT [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      [xs_sc5vM] \u []
                          Data.OldList.prependToAll Data.Version.showVersion1 xs_sc5vM; } in
                let {
                  sat_sc5vU [Occ=Once] :: [[GHC.Types.Char]]
                  [LclId] =
                      CCCS :! [x_sc5vL sat_sc5vT];
                } in  go_sc5vN sat_sc5vU;
          };

Data.Version.showVersion [InlPrag=NOUSERINLINE[0]]
  :: Data.Version.Version -> GHC.Base.String
[GblId, Arity=1, Str=<S(SL),1*U(1*U,1*U)>, Unf=OtherCon []] =
    [] \r [w_sc5vV]
        case w_sc5vV of {
          Data.Version.Version ww1_sc5vX [Occ=Once] ww2_sc5vY [Occ=Once] ->
              Data.Version.$wshowVersion ww1_sc5vX ww2_sc5vY;
        };

Data.Version.$fReadVersion18 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion19;

Data.Version.$fReadVersion_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Version.$fReadVersion18];

Data.Version.$fReadVersion17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "{"#;

Data.Version.$fReadVersion16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion17;

Data.Version.$fReadVersion_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion16];

Data.Version.$fReadVersion15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionBranch"#;

Data.Version.$fReadVersion14 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion15;

Data.Version.$fReadVersion13
  :: Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Types.Int]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc5vZ] Data.Version.$fReadVersion13;

Data.Version.$fReadVersion_n
  :: Text.ParserCombinators.ReadPrec.Prec
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

Data.Version.$fReadVersion11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

Data.Version.$fReadVersion10 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion11;

Data.Version.$fReadVersion9 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion10];

Data.Version.$fReadVersion8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "versionTags"#;

Data.Version.$fReadVersion7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion8;

Data.Version.$fReadVersion6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP [GHC.Base.String]
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds1_sc5w0]
        GHC.Read.$fRead[]_$s$creadListPrec1
            Text.ParserCombinators.ReadPrec.minPrec;

Data.Version.$fReadVersion4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Version.$fReadVersion5;

Data.Version.$fReadVersion3 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [Data.Version.$fReadVersion4];

Data.Version.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S,U><L,C(U)>, Unf=OtherCon []] =
    [] \r [ww_sc5w1 w_sc5w2]
        case <=# [ww_sc5w1 11#] of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
          1# ->
              let {
                sat_sc5wm [Occ=Once]
                  :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                [LclId] =
                    [w_sc5w2] \r [a1_sc5w4]
                        let {
                          sat_sc5wj [Occ=Once]
                            :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                          [LclId] =
                              [w_sc5w2] \r [a2_sc5w5]
                                  let {
                                    sat_sc5wi [Occ=Once]
                                      :: [GHC.Types.Int] -> Text.ParserCombinators.ReadP.P b_sc3N8
                                    [LclId] =
                                        [w_sc5w2] \r [a3_sc5w6]
                                            let {
                                              sat_sc5wf [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b_sc3N8
                                              [LclId] =
                                                  [w_sc5w2 a3_sc5w6] \r [a4_sc5w7]
                                                      let {
                                                        sat_sc5we [Occ=Once]
                                                          :: [GHC.Base.String]
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b_sc3N8
                                                        [LclId] =
                                                            [w_sc5w2 a3_sc5w6] \r [a5_sc5w8]
                                                                let {
                                                                  sat_sc5wb [Occ=Once]
                                                                    :: ()
                                                                       -> Text.ParserCombinators.ReadP.P
                                                                            b_sc3N8
                                                                  [LclId] =
                                                                      [w_sc5w2
                                                                       a3_sc5w6
                                                                       a5_sc5w8] \r [a6_sc5w9]
                                                                          let {
                                                                            sat_sc5wa [Occ=Once]
                                                                              :: Data.Version.Version
                                                                            [LclId] =
                                                                                CCCS Data.Version.Version! [a3_sc5w6
                                                                                                            a5_sc5w8];
                                                                          } in  w_sc5w2 sat_sc5wa;
                                                                } in 
                                                                  case
                                                                      Text.Read.Lex.$wexpect
                                                                          Data.Version.$fReadVersion3
                                                                          sat_sc5wb
                                                                  of
                                                                  { Unit# ww2_sc5wd [Occ=Once] ->
                                                                        Text.ParserCombinators.ReadP.Look [ww2_sc5wd];
                                                                  };
                                                      } in 
                                                        GHC.Read.readField
                                                            Data.Version.$fReadVersion7
                                                            Data.Version.$fReadVersion6
                                                            Data.Version.$fReadVersion_n
                                                            sat_sc5we;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      Data.Version.$fReadVersion9 sat_sc5wf
                                              of
                                              { Unit# ww2_sc5wh [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww2_sc5wh];
                                              };
                                  } in 
                                    GHC.Read.readField
                                        Data.Version.$fReadVersion14
                                        Data.Version.$fReadVersion12
                                        Data.Version.$fReadVersion_n
                                        sat_sc5wi;
                        } in 
                          case
                              Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme sat_sc5wj
                          of
                          { Unit# ww2_sc5wl [Occ=Once] ->
                                Text.ParserCombinators.ReadP.Look [ww2_sc5wl];
                          };
              } in 
                case
                    Text.Read.Lex.$wexpect Data.Version.$fReadVersion_lexeme1 sat_sc5wm
                of
                { Unit# ww2_sc5wo [Occ=Once] ->
                      Text.ParserCombinators.ReadP.Look [ww2_sc5wo];
                };
        };

Data.Version.$fReadVersion2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<S(S),1*U(U)><L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5wp w1_sc5wq]
        case w_sc5wp of {
          GHC.Types.I# ww1_sc5ws [Occ=Once] ->
              Data.Version.$w$creadPrec ww1_sc5ws w1_sc5wq;
        };

Data.Version.$fReadVersion1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Version.Version -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Version.$fReadVersion2 eta_B2 eta_B1;

Data.Version.$fReadVersion_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Data.Version.Version
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_sc5wt]
        let {
          sat_sc5wu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P Data.Version.Version
          [LclId] =
              [n_sc5wt] \u []
                  GHC.Read.list3
                      Data.Version.$fReadVersion2
                      n_sc5wt
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_sc5wu;

Data.Version.$fReadVersion_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Data.Version.Version]
[GblId] =
    [] \u [] GHC.Read.list Data.Version.$fReadVersion1;

Data.Version.$fReadVersion20
  :: Text.ParserCombinators.ReadP.P [Data.Version.Version]
[GblId] =
    [] \u []
        Data.Version.$fReadVersion_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Version.$fReadVersion_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Data.Version.Version]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            Data.Version.$fReadVersion20 eta_B1;

Data.Version.$fReadVersion [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Data.Version.Version
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Version.$fReadVersion_$creadsPrec
                                    Data.Version.$fReadVersion_$creadList
                                    Data.Version.$fReadVersion1
                                    Data.Version.$fReadVersion_$creadListPrec];

Data.Version.parseVersion5 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

Data.Version.parseVersion4 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

Data.Version.parseVersion6
  :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

Data.Version.$wp [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5wv]
        let {
          sat_sc5wQ [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nf
          [LclId] =
              [w_sc5wv] \r [a_sc5ww]
                  case a_sc5ww of wild_sc5wx {
                    GHC.Types.C# c#_sc5wy [Occ=Once] ->
                        case ord# [c#_sc5wy] of sat_sc5wz {
                          __DEFAULT ->
                              case -# [sat_sc5wz 48#] of sat_sc5wA {
                                __DEFAULT ->
                                    case int2Word# [sat_sc5wA] of sat_sc5wB {
                                      __DEFAULT ->
                                          case leWord# [sat_sc5wB 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc5wN [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nf
                                                  [LclId] =
                                                      [w_sc5wv wild_sc5wx] \r [a1_sc5wD]
                                                          let {
                                                            sat_sc5wM [Occ=Once] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc5wx a1_sc5wD] \u []
                                                                    let {
                                                                      sat_sc5wE [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc5wx
                                                                                   a1_sc5wD];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc5wE
                                                                      of
                                                                      sat_sc5wF
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc5wF
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc5wH [Occ=Once]
                                                                                ds_sc5wI [Occ=Once!] ->
                                                                                  case ds_sc5wI of {
                                                                                    [] -> x_sc5wH;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      };
                                                          } in  w_sc5wv sat_sc5wM;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc5wN
                                                  of
                                                  { Unit# ww1_sc5wP [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc5wP];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc5wQ];

Data.Version.parseVersion3 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5wR]
        case Data.Version.$wp w_sc5wR of {
          Unit# ww1_sc5wT [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5wT];
        };

Data.Version.parseVersion_m2
  :: forall b1.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [k_sc5wU]
        let {
          lvl4_sc5wV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [k_sc5wU] \u []
                  case Data.Version.$wp k_sc5wU of {
                    Unit# ww1_sc5wX [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_sc5wX];
                  }; } in
        let {
          sat_sc5x2 [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_ic3w9
          [LclId] =
              [lvl4_sc5wV] \r [a_sc5wY]
                  case a_sc5wY of {
                    GHC.Types.C# y_sc5x0 [Occ=Once!] ->
                        case y_sc5x0 of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '.'# -> lvl4_sc5wV;
                        };
                  };
        } in  Text.ParserCombinators.ReadP.Get [sat_sc5x2];

Data.Version.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5x3]
        let {
          $www1_sc5x4 [InlPrag=NOUSERINLINE[0], Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [w_sc5x3] \r [ww_sc5x5]
                  case ord# [ww_sc5x5] of sat_sc5x7 {
                    __DEFAULT ->
                        case __pkg_ccall base-4.11.0.0 [sat_sc5x7 GHC.Prim.realWorld#] of {
                          Unit# ds1_sc5xa [Occ=Once!] ->
                              case ds1_sc5xa of {
                                __DEFAULT ->
                                    let {
                                      wild_sc5xc [Occ=OnceL] :: GHC.Types.Char
                                      [LclId, Unf=OtherCon []] =
                                          CCCS GHC.Types.C#! [ww_sc5x5]; } in
                                    let {
                                      sat_sc5xf [Occ=Once]
                                        :: GHC.Base.String
                                           -> Text.ParserCombinators.ReadP.P b1_sc3Nr
                                      [LclId] =
                                          [w_sc5x3 wild_sc5xc] \r [a1_sc5xd]
                                              let {
                                                sat_sc5xe [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [wild_sc5xc a1_sc5xd];
                                              } in  w_sc5x3 sat_sc5xe;
                                    } in 
                                      case
                                          Text.ParserCombinators.ReadP.$wmunch
                                              GHC.Unicode.isAlphaNum sat_sc5xf
                                      of
                                      { Unit# ww2_sc5xh [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Look [ww2_sc5xh];
                                      };
                                0# -> Text.ParserCombinators.ReadP.Fail [];
                              };
                        };
                  }; } in
        let {
          ww1_sc5xi [InlPrag=NOUSERINLINE[0], Occ=OnceL]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
              [$www1_sc5x4] \r [w1_sc5xj]
                  case w1_sc5xj of {
                    GHC.Types.C# ww2_sc5xl [Occ=Once] -> $www1_sc5x4 ww2_sc5xl;
                  }; } in
        let {
          lvl4_sc5xm [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId, Unf=OtherCon []] =
              CCCS Text.ParserCombinators.ReadP.Get! [ww1_sc5xi]; } in
        let {
          sat_sc5xr [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nr
          [LclId] =
              [lvl4_sc5xm] \r [a_sc5xn]
                  case a_sc5xn of {
                    GHC.Types.C# y_sc5xp [Occ=Once!] ->
                        case y_sc5xp of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '-'# -> lvl4_sc5xm;
                        };
                  };
        } in  Unit# [sat_sc5xr];

Data.Version.parseVersion2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Base.String -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5xs]
        case Data.Version.$wlvl w_sc5xs of {
          Unit# ww1_sc5xu [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5xu];
        };

Data.Version.$wparseVersion [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_sc5xv]
        let {
          sat_sc5xW [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1_sc3Nx
          [LclId] =
              [w_sc5xv] \r [a_sc5xw]
                  case a_sc5xw of wild_sc5xx {
                    GHC.Types.C# c#_sc5xy [Occ=Once] ->
                        case ord# [c#_sc5xy] of sat_sc5xz {
                          __DEFAULT ->
                              case -# [sat_sc5xz 48#] of sat_sc5xA {
                                __DEFAULT ->
                                    case int2Word# [sat_sc5xA] of sat_sc5xB {
                                      __DEFAULT ->
                                          case leWord# [sat_sc5xB 9##] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_sc5xT [Occ=Once]
                                                    :: GHC.Base.String
                                                       -> Text.ParserCombinators.ReadP.P b1_sc3Nx
                                                  [LclId] =
                                                      [w_sc5xv wild_sc5xx] \r [a1_sc5xD]
                                                          let {
                                                            a2_sc5xE [Occ=OnceL] :: GHC.Types.Int
                                                            [LclId] =
                                                                [wild_sc5xx a1_sc5xD] \u []
                                                                    let {
                                                                      sat_sc5xF [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [wild_sc5xx
                                                                                   a1_sc5xD];
                                                                    } in 
                                                                      case
                                                                          Text.ParserCombinators.ReadP.run
                                                                              Data.Version.parseVersion6
                                                                              sat_sc5xF
                                                                      of
                                                                      sat_sc5xG
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Text.Read.readEither8
                                                                                    sat_sc5xG
                                                                            of
                                                                            { [] ->
                                                                                  Data.Version.parseVersion5;
                                                                              : x_sc5xI [Occ=Once]
                                                                                ds_sc5xJ [Occ=Once!] ->
                                                                                  case ds_sc5xJ of {
                                                                                    [] -> x_sc5xI;
                                                                                    : _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                                        Data.Version.parseVersion4;
                                                                                  };
                                                                            };
                                                                      }; } in
                                                          let {
                                                            sat_sc5xS [Occ=Once]
                                                              :: [GHC.Types.Int]
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_sc3Nx
                                                            [LclId] =
                                                                [w_sc5xv a2_sc5xE] \r [a3_sc5xN]
                                                                    let {
                                                                      a4_sc5xO [Occ=OnceL]
                                                                        :: [GHC.Types.Int]
                                                                      [LclId, Unf=OtherCon []] =
                                                                          CCCS :! [a2_sc5xE
                                                                                   a3_sc5xN]; } in
                                                                    let {
                                                                      sat_sc5xR [Occ=Once]
                                                                        :: [GHC.Base.String]
                                                                           -> Text.ParserCombinators.ReadP.P
                                                                                b1_sc3Nx
                                                                      [LclId] =
                                                                          [w_sc5xv
                                                                           a4_sc5xO] \r [a5_sc5xP]
                                                                              let {
                                                                                sat_sc5xQ [Occ=Once]
                                                                                  :: Data.Version.Version
                                                                                [LclId] =
                                                                                    CCCS Data.Version.Version! [a4_sc5xO
                                                                                                                a5_sc5xP];
                                                                              } in 
                                                                                w_sc5xv sat_sc5xQ;
                                                                    } in 
                                                                      Text.ParserCombinators.ReadP.endBy3
                                                                          Data.Version.parseVersion2
                                                                          sat_sc5xR;
                                                          } in 
                                                            Text.ParserCombinators.ReadP.endBy3
                                                                Data.Version.parseVersion_m2
                                                                sat_sc5xS;
                                                } in 
                                                  case
                                                      Text.ParserCombinators.ReadP.$wmunch
                                                          GHC.Unicode.isDigit sat_sc5xT
                                                  of
                                                  { Unit# ww1_sc5xV [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww1_sc5xV];
                                                  };
                                          };
                                    };
                              };
                        };
                  };
        } in  Unit# [sat_sc5xW];

Data.Version.parseVersion1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Data.Version.Version -> Text.ParserCombinators.ReadP.P b1)
     -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [w_sc5xX]
        case Data.Version.$wparseVersion w_sc5xX of {
          Unit# ww1_sc5xZ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_sc5xZ];
        };

Data.Version.parseVersion
  :: Text.ParserCombinators.ReadP.ReadP Data.Version.Version
[GblId, Arity=1, Str=<L,C(U)>m1, Unf=OtherCon []] =
    [] \r [eta_B1] Data.Version.parseVersion1 eta_B1;

Data.Version.Version
  :: [GHC.Types.Int] -> [GHC.Base.String] -> Data.Version.Version
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Data.Version.Version [eta_B2 eta_B1];

