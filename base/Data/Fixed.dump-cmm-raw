
==================== Raw Cmm ====================
2018-03-16 16:12:18.681878287 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:18.68330919 UTC

[section ""data" . Data.Fixed.resolution_closure" {
     Data.Fixed.resolution_closure:
         const Data.Fixed.resolution_info;
 },
 Data.Fixed.resolution_entry() //  [R2]
         { []
         }
     {offset
       cgq0u: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.resolution_info" {
     Data.Fixed.resolution_info:
         const Data.Fixed.resolution_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.686928881 UTC

[section ""data" . Data.Fixed.$fDataFixed2_closure" {
     Data.Fixed.$fDataFixed2_closure:
         const Data.Fixed.$fDataFixed2_info;
 },
 Data.Fixed.$fDataFixed2_entry() //  [R2]
         { []
         }
     {offset
       cgq0F: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed2_info" {
     Data.Fixed.$fDataFixed2_info:
         const Data.Fixed.$fDataFixed2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.691144117 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgfoldl_closure" {
     Data.Fixed.$fDataFixed_$cgfoldl_closure:
         const Data.Fixed.$fDataFixed_$cgfoldl_info;
         const 0;
 },
 sat_sgoz3_entry() //  [R1]
         { []
         }
     {offset
       cgq0W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq0X; else goto cgq0Y;
       cgq0X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq0Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fDataFixed2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoz3_info" {
     sat_sgoz3_info:
         const sat_sgoz3_entry;
         const 1;
         const 16;
 },
 Data.Fixed.$fDataFixed_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgq0Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgq13; else goto cgq12;
       cgq13: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgq12: // global
           I64[Hp - 16] = sat_sgoz3_info;
           P64[Hp] = R4;
           R4 = R5;
           _sgoz0::P64 = R3;
           R3 = Hp - 16;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgoz0::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgfoldl_info" {
     Data.Fixed.$fDataFixed_$cgfoldl_info:
         const Data.Fixed.$fDataFixed_$cgfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgoHz_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.698886547 UTC

[section ""data" . Data.Fixed.$fEnumFixed1_closure" {
     Data.Fixed.$fEnumFixed1_closure:
         const Data.Fixed.$fEnumFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fEnumFixed1_entry() //  [R1]
         { []
         }
     {offset
       cgq1i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq1j; else goto cgq1k;
       cgq1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq1k: // global
           (_cgq1f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgq1f::I64 == 0) goto cgq1h; else goto cgq1g;
       cgq1h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgq1g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgq1f::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed1_info" {
     Data.Fixed.$fEnumFixed1_info:
         const Data.Fixed.$fEnumFixed1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.706908842 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_info;
         const 0;
 },
 sat_sgozd_entry() //  [R1]
         { []
         }
     {offset
       cgq1T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq1U; else goto cgq1V;
       cgq1U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq1V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgq1R_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgozd_info" {
     sat_sgozd_info:
         const sat_sgozd_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+16;
 },
 _cgq1R() //  [R1]
         { []
         }
     {offset
       cgq1R: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgoz9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgq1R_info" {
     block_cgq1R_info:
         const _cgq1R;
         const 1;
         const 4294967326;
         const SgoHz_srt+16;
 },
 go_sgoz9_entry() //  [R1, R2]
         { []
         }
     {offset
       cgq22: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq23; else goto cgq24;
       cgq23: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgq24: // global
           I64[Sp - 32] = block_cgq1J_info;
           R3 = P64[R1 + 7];
           _sgoza::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgoza::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgoz9_info" {
     go_sgoz9_info:
         const go_sgoz9_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgoHz_srt+16;
 },
 _cgq1J() //  [R1]
         { []
         }
     {offset
       cgq1J: // global
           if (R1 == 1) goto cgq21; else goto cgq20;
       cgq21: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgq20: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgq28; else goto cgq27;
       cgq28: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgq27: // global
           I64[Hp - 56] = sat_sgozd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sgoza::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgoza::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgoza::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq1J_info" {
     block_cgq1J_info:
         const _cgq1J;
         const 3;
         const 4294967326;
         const SgoHz_srt+16;
 },
 sat_sgozi_entry() //  [R1]
         { []
         }
     {offset
       cgq2t: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq2u; else goto cgq2v;
       cgq2u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq2v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgq2r_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgozi_info" {
     sat_sgozi_info:
         const sat_sgozi_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+16;
 },
 _cgq2r() //  [R1]
         { []
         }
     {offset
       cgq2r: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgoze_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgq2r_info" {
     block_cgq2r_info:
         const _cgq2r;
         const 1;
         const 4294967326;
         const SgoHz_srt+16;
 },
 go_sgoze_entry() //  [R1, R2]
         { []
         }
     {offset
       cgq2C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq2D; else goto cgq2E;
       cgq2D: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgq2E: // global
           I64[Sp - 32] = block_cgq2j_info;
           R3 = P64[R1 + 7];
           _sgozf::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgozf::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgoze_info" {
     go_sgoze_info:
         const go_sgoze_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgoHz_srt+16;
 },
 _cgq2j() //  [R1]
         { []
         }
     {offset
       cgq2j: // global
           if (R1 == 1) goto cgq2B; else goto cgq2A;
       cgq2B: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgq2A: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgq2I; else goto cgq2H;
       cgq2I: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgq2H: // global
           I64[Hp - 56] = sat_sgozi_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sgozf::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgozf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgozf::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq2j_info" {
     block_cgq2j_info:
         const _cgq2j;
         const 3;
         const 4294967326;
         const SgoHz_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgq2M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq2N; else goto cgq2O;
       cgq2N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgq2O: // global
           I64[Sp - 24] = block_cgq1w_info;
           _sgoz5::P64 = R3;
           R3 = R2;
           _sgoz4::P64 = R2;
           R2 = _sgoz5::P64;
           P64[Sp - 16] = _sgoz4::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromThenTo_info" {
     Data.Fixed.$fEnumFixed_$cenumFromThenTo_info:
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SgoHz_srt+16;
 },
 _cgq1w() //  [R1]
         { []
         }
     {offset
       cgq1w: // global
           I64[Sp - 8] = block_cgq1A_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq1w_info" {
     block_cgq1w_info:
         const _cgq1w;
         const 2;
         const 38654705694;
         const SgoHz_srt+16;
 },
 _cgq1A() //  [R1]
         { []
         }
     {offset
       cgq1A: // global
           _sgoz4::P64 = P64[Sp + 16];
           _sgoz6::P64 = P64[Sp + 24];
           _sgoz7::P64 = P64[Sp + 8];
           if (R1 == 1) goto cgq2V; else goto cgq2R;
       cgq2V: // global
           Hp = Hp + 24;
           _sgoz8::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cgq2Y; else goto cgq2X;
       cgq2X: // global
           I64[Hp - 16] = go_sgoze_info;
           P64[Hp - 8] = _sgoz6::P64;
           P64[Hp] = _sgoz7::P64;
           R2 = _sgoz4::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sgoze_entry(R2, R1) args: 8, res: 0, upd: 8;
       cgq2R: // global
           Hp = Hp + 24;
           _sgoz8::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cgq2Y; else goto cgq2T;
       cgq2Y: // global
           HpAlloc = 24;
           R1 = _sgoz8::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgq2T: // global
           I64[Hp - 16] = go_sgoz9_info;
           P64[Hp - 8] = _sgoz6::P64;
           P64[Hp] = _sgoz7::P64;
           R2 = _sgoz4::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sgoz9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq1A_info" {
     block_cgq1A_info:
         const _cgq1A;
         const 3;
         const 4294967326;
         const SgoHz_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.727707389 UTC

[section ""data" . sat_sgozj_closure" {
     sat_sgozj_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.729615499 UTC

[section ""data" . sat_sgozk_closure" {
     sat_sgozk_closure:
         const :_con_info;
         const sat_sgozj_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.732146167 UTC

[section ""data" . Data.Fixed.$fEnumFixed2_closure" {
     Data.Fixed.$fEnumFixed2_closure:
         const Data.Fixed.$fEnumFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fEnumFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgq3Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq3Z; else goto cgq40;
       cgq3Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq40: // global
           (_cgq3V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgq3V::I64 == 0) goto cgq3X; else goto cgq3W;
       cgq3X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgq3W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgq3V::I64;
           R3 = sat_sgozk_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed2_info" {
     Data.Fixed.$fEnumFixed2_info:
         const Data.Fixed.$fEnumFixed2_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.738133394 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromTo_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromTo_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromTo_info;
         const 0;
 },
 sat_sgozr_entry() //  [R1]
         { []
         }
     {offset
       cgq4r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq4s; else goto cgq4t;
       cgq4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgq4p_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgozr_info" {
     sat_sgozr_info:
         const sat_sgozr_entry;
         const 2;
         const 141733920786;
         const SgoHz_srt+16;
 },
 _cgq4p() //  [R1]
         { []
         }
     {offset
       cgq4p: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgozn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgq4p_info" {
     block_cgq4p_info:
         const _cgq4p;
         const 1;
         const 141733920798;
         const SgoHz_srt+16;
 },
 go_sgozn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgq4A: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgq4B; else goto cgq4C;
       cgq4B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgq4C: // global
           I64[Sp - 24] = block_cgq4h_info;
           R3 = P64[R1 + 7];
           _sgozo::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgozo::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgozn_info" {
     go_sgozn_info:
         const go_sgozn_entry;
         const 1;
         const 141733920777;
         const 4294967301;
         const SgoHz_srt+16;
 },
 _cgq4h() //  [R1]
         { []
         }
     {offset
       cgq4h: // global
           if (R1 == 1) goto cgq4z; else goto cgq4y;
       cgq4z: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgq4y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgq4G; else goto cgq4F;
       cgq4G: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgq4F: // global
           I64[Hp - 48] = sat_sgozr_info;
           P64[Hp - 32] = P64[Sp + 8];
           _sgozo::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sgozo::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgozo::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq4h_info" {
     block_cgq4h_info:
         const _cgq4h;
         const 2;
         const 141733920798;
         const SgoHz_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cgq4K: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgq4O; else goto cgq4N;
       cgq4O: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgq4N: // global
           I64[Hp - 8] = go_sgozn_info;
           P64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_sgozn_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromTo_info" {
     Data.Fixed.$fEnumFixed_$cenumFromTo_info:
         const Data.Fixed.$fEnumFixed_$cenumFromTo_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SgoHz_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.751832097 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromThen_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromThen_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromThen_info;
         const 0;
 },
 d_sgozu_entry() //  [R1]
         { []
         }
     {offset
       cgq5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq5l; else goto cgq5m;
       cgq5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_sgozu_info" {
     d_sgozu_info:
         const d_sgozu_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+24;
 },
 sat_sgozz_entry() //  [R1]
         { []
         }
     {offset
       cgq5D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgq5E; else goto cgq5F;
       cgq5E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq5F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgq5B_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgozz_info" {
     sat_sgozz_info:
         const sat_sgozz_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+16;
 },
 _cgq5B() //  [R1]
         { []
         }
     {offset
       cgq5B: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgozv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgq5B_info" {
     block_cgq5B_info:
         const _cgq5B;
         const 1;
         const 4294967326;
         const SgoHz_srt+16;
 },
 go_sgozv_entry() //  [R1, R2]
         { []
         }
     {offset
       cgq5J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgq5L; else goto cgq5M;
       cgq5L: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgq5M: // global
           I64[Sp - 24] = block_cgq5s_info;
           _sgozv::P64 = R1;
           _sgozu::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sgozu::P64;
           P64[Sp - 8] = _sgozv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugq5Q; else goto cgq5t;
       ugq5Q: // global
           call _cgq5s(R1) args: 0, res: 0, upd: 0;
       cgq5t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgozv_info" {
     go_sgozv_info:
         const go_sgozv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+16;
 },
 _cgq5s() //  [R1]
         { []
         }
     {offset
       cgq5s: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgq5P; else goto cgq5O;
       cgq5P: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgq5O: // global
           I64[Hp - 56] = sat_sgozz_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq5s_info" {
     block_cgq5s_info:
         const _cgq5s;
         const 2;
         const 4294967326;
         const SgoHz_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cgq5R: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgq5V; else goto cgq5U;
       cgq5V: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgq5U: // global
           I64[Hp - 40] = d_sgozu_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = go_sgozv_info;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 7;
           call go_sgozv_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromThen_info" {
     Data.Fixed.$fEnumFixed_$cenumFromThen_info:
         const Data.Fixed.$fEnumFixed_$cenumFromThen_entry;
         const 0;
         const 562640715790;
         const 8589934607;
         const SgoHz_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.764852785 UTC

[section ""data" . Data.Fixed.$fEnumFixed3_closure" {
     Data.Fixed.$fEnumFixed3_closure:
         const Data.Fixed.$fEnumFixed3_info;
         const 0;
 },
 sat_sgozD_entry() //  [R1]
         { []
         }
     {offset
       cgq6E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgq6F; else goto cgq6G;
       cgq6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgq6C_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgozD_info" {
     sat_sgozD_info:
         const sat_sgozD_entry;
         const 1;
         const 1241245548560;
         const SgoHz_srt+16;
 },
 _cgq6C() //  [R1]
         { []
         }
     {offset
       cgq6C: // global
           R2 = R1;
           Sp = Sp + 8;
           call Data.Fixed.$fEnumFixed3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgq6C_info" {
     block_cgq6C_info:
         const _cgq6C;
         const 0;
         const 4294967326;
         const SgoHz_srt+80;
 },
 Data.Fixed.$fEnumFixed3_entry() //  [R2]
         { []
         }
     {offset
       cgq6K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgq6M; else goto cgq6N;
       cgq6M: // global
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgq6N: // global
           I64[Sp - 8] = block_cgq6t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugq6R; else goto cgq6u;
       ugq6R: // global
           call _cgq6t(R1) args: 0, res: 0, upd: 0;
       cgq6u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed3_info" {
     Data.Fixed.$fEnumFixed3_info:
         const Data.Fixed.$fEnumFixed3_entry;
         const 0;
         const 1241245548558;
         const 4294967301;
         const SgoHz_srt+16;
 },
 _cgq6t() //  [R1]
         { []
         }
     {offset
       cgq6t: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgq6Q; else goto cgq6P;
       cgq6Q: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgq6P: // global
           I64[Hp - 40] = sat_sgozD_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgq6t_info" {
     block_cgq6t_info:
         const _cgq6t;
         const 0;
         const 1241245548574;
         const SgoHz_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.773419831 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFrom_closure" {
     Data.Fixed.$fEnumFixed_$cenumFrom_closure:
         const Data.Fixed.$fEnumFixed_$cenumFrom_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cgq7e: // global
           R2 = R2;
           call Data.Fixed.$fEnumFixed3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFrom_info" {
     Data.Fixed.$fEnumFixed_$cenumFrom_info:
         const Data.Fixed.$fEnumFixed_$cenumFrom_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.777205326 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cfromEnum_closure" {
     Data.Fixed.$fEnumFixed_$cfromEnum_closure:
         const Data.Fixed.$fEnumFixed_$cfromEnum_info;
 },
 Data.Fixed.$fEnumFixed_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cgq7p: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cfromEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cfromEnum_info" {
     Data.Fixed.$fEnumFixed_$cfromEnum_info:
         const Data.Fixed.$fEnumFixed_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.780829991 UTC

[section ""data" . Data.Fixed.$fEnumFixed4_closure" {
     Data.Fixed.$fEnumFixed4_closure:
         const Data.Fixed.$fEnumFixed4_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed4_entry() //  [R2]
         { []
         }
     {offset
       cgq7A: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cpred_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed4_info" {
     Data.Fixed.$fEnumFixed4_info:
         const Data.Fixed.$fEnumFixed4_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.784056356 UTC

[section ""data" . Data.Fixed.$fEnumFixed5_closure" {
     Data.Fixed.$fEnumFixed5_closure:
         const Data.Fixed.$fEnumFixed5_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed5_entry() //  [R2]
         { []
         }
     {offset
       cgq7L: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$csucc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed5_info" {
     Data.Fixed.$fEnumFixed5_info:
         const Data.Fixed.$fEnumFixed5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.787492658 UTC

[section ""data" . Data.Fixed.$fEnumFixed_closure" {
     Data.Fixed.$fEnumFixed_closure:
         const GHC.Enum.C:Enum_con_info;
         const Data.Fixed.$fEnumFixed5_closure+1;
         const Data.Fixed.$fEnumFixed4_closure+1;
         const GHC.Enum.$fEnumInteger_$ctoEnum_closure+1;
         const Data.Fixed.$fEnumFixed_$cfromEnum_closure+1;
         const Data.Fixed.$fEnumFixed_$cenumFrom_closure+1;
         const Data.Fixed.$fEnumFixed_$cenumFromThen_closure+2;
         const Data.Fixed.$fEnumFixed_$cenumFromTo_closure+2;
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.789629945 UTC

[section ""data" . Data.Fixed.$fHasResolutionE0_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE0_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE0_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE0_$cresolution_entry() //  []
         { []
         }
     {offset
       cgq7X: // global
           R1 = Data.Fixed.$fEnumFixed2_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE0_$cresolution_info" {
     Data.Fixed.$fHasResolutionE0_$cresolution_info:
         const Data.Fixed.$fHasResolutionE0_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.792952253 UTC

[section ""data" . Data.Fixed.$fHasResolutionE0_closure" {
     Data.Fixed.$fHasResolutionE0_closure:
         const Data.Fixed.$fHasResolutionE0_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE0_entry() //  [R2]
         { []
         }
     {offset
       cgq89: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE0_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE0_info" {
     Data.Fixed.$fHasResolutionE0_info:
         const Data.Fixed.$fHasResolutionE0_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.795965344 UTC

[section ""data" . sat_sgozJ_closure" {
     sat_sgozJ_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.79765637 UTC

[section ""data" . sat_sgozK_closure" {
     sat_sgozK_closure:
         const :_con_info;
         const sat_sgozJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.799982833 UTC

[section ""data" . Data.Fixed.$fHasResolutionE4_closure" {
     Data.Fixed.$fHasResolutionE4_closure:
         const Data.Fixed.$fHasResolutionE4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE4_entry() //  [R1]
         { []
         }
     {offset
       cgq8o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq8p; else goto cgq8q;
       cgq8p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq8q: // global
           (_cgq8l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgq8l::I64 == 0) goto cgq8n; else goto cgq8m;
       cgq8n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgq8m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgq8l::I64;
           R3 = sat_sgozK_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE4_info" {
     Data.Fixed.$fHasResolutionE4_info:
         const Data.Fixed.$fHasResolutionE4_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.804181855 UTC

[section ""data" . Data.Fixed.$fHasResolutionE1_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE1_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE1_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE1_$cresolution_entry() //  []
         { []
         }
     {offset
       cgq8C: // global
           R1 = Data.Fixed.$fHasResolutionE4_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE1_$cresolution_info" {
     Data.Fixed.$fHasResolutionE1_$cresolution_info:
         const Data.Fixed.$fHasResolutionE1_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.808388323 UTC

[section ""data" . Data.Fixed.$fHasResolutionE1_closure" {
     Data.Fixed.$fHasResolutionE1_closure:
         const Data.Fixed.$fHasResolutionE1_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE1_entry() //  [R2]
         { []
         }
     {offset
       cgq8O: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE1_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE1_info" {
     Data.Fixed.$fHasResolutionE1_info:
         const Data.Fixed.$fHasResolutionE1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.81191463 UTC

[section ""data" . sat_sgozM_closure" {
     sat_sgozM_closure:
         const GHC.Types.I#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.81388987 UTC

[section ""data" . sat_sgozN_closure" {
     sat_sgozN_closure:
         const :_con_info;
         const sat_sgozM_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.816577007 UTC

[section ""data" . Data.Fixed.$fHasResolutionE7_closure" {
     Data.Fixed.$fHasResolutionE7_closure:
         const Data.Fixed.$fHasResolutionE7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE7_entry() //  [R1]
         { []
         }
     {offset
       cgq93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq94; else goto cgq95;
       cgq94: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq95: // global
           (_cgq90::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgq90::I64 == 0) goto cgq92; else goto cgq91;
       cgq92: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgq91: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgq90::I64;
           R3 = sat_sgozN_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE7_info" {
     Data.Fixed.$fHasResolutionE7_info:
         const Data.Fixed.$fHasResolutionE7_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.82094492 UTC

[section ""data" . Data.Fixed.$fHasResolutionE2_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE2_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE2_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE2_$cresolution_entry() //  []
         { []
         }
     {offset
       cgq9h: // global
           R1 = Data.Fixed.$fHasResolutionE7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE2_$cresolution_info" {
     Data.Fixed.$fHasResolutionE2_$cresolution_info:
         const Data.Fixed.$fHasResolutionE2_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.824682452 UTC

[section ""data" . Data.Fixed.$fHasResolutionE2_closure" {
     Data.Fixed.$fHasResolutionE2_closure:
         const Data.Fixed.$fHasResolutionE2_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE2_entry() //  [R2]
         { []
         }
     {offset
       cgq9t: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE2_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE2_info" {
     Data.Fixed.$fHasResolutionE2_info:
         const Data.Fixed.$fHasResolutionE2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.828034829 UTC

[section ""data" . sat_sgozP_closure" {
     sat_sgozP_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.82996887 UTC

[section ""data" . sat_sgozQ_closure" {
     sat_sgozQ_closure:
         const :_con_info;
         const sat_sgozP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.832368146 UTC

[section ""data" . Data.Fixed.$fHasResolutionE8_closure" {
     Data.Fixed.$fHasResolutionE8_closure:
         const Data.Fixed.$fHasResolutionE8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE8_entry() //  [R1]
         { []
         }
     {offset
       cgq9I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgq9J; else goto cgq9K;
       cgq9J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgq9K: // global
           (_cgq9F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgq9F::I64 == 0) goto cgq9H; else goto cgq9G;
       cgq9H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgq9G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgq9F::I64;
           R3 = sat_sgozQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE8_info" {
     Data.Fixed.$fHasResolutionE8_info:
         const Data.Fixed.$fHasResolutionE8_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.836281662 UTC

[section ""data" . Data.Fixed.$fHasResolutionE3_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE3_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE3_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE3_$cresolution_entry() //  []
         { []
         }
     {offset
       cgq9W: // global
           R1 = Data.Fixed.$fHasResolutionE8_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE3_$cresolution_info" {
     Data.Fixed.$fHasResolutionE3_$cresolution_info:
         const Data.Fixed.$fHasResolutionE3_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.840225691 UTC

[section ""data" . Data.Fixed.$fHasResolutionE3_closure" {
     Data.Fixed.$fHasResolutionE3_closure:
         const Data.Fixed.$fHasResolutionE3_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE3_entry() //  [R2]
         { []
         }
     {offset
       cgqa8: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE3_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE3_info" {
     Data.Fixed.$fHasResolutionE3_info:
         const Data.Fixed.$fHasResolutionE3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.844025993 UTC

[section ""data" . sat_sgozS_closure" {
     sat_sgozS_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.846178655 UTC

[section ""data" . sat_sgozT_closure" {
     sat_sgozT_closure:
         const :_con_info;
         const sat_sgozS_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.848768572 UTC

[section ""data" . Data.Fixed.$fHasResolutionE10_closure" {
     Data.Fixed.$fHasResolutionE10_closure:
         const Data.Fixed.$fHasResolutionE10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE10_entry() //  [R1]
         { []
         }
     {offset
       cgqan: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqao; else goto cgqap;
       cgqao: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqap: // global
           (_cgqak::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqak::I64 == 0) goto cgqam; else goto cgqal;
       cgqam: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqal: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqak::I64;
           R3 = sat_sgozT_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE10_info" {
     Data.Fixed.$fHasResolutionE10_info:
         const Data.Fixed.$fHasResolutionE10_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.853449975 UTC

[section ""data" . Data.Fixed.$fHasResolutionE6_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE6_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE6_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE6_$cresolution_entry() //  []
         { []
         }
     {offset
       cgqaB: // global
           R1 = Data.Fixed.$fHasResolutionE10_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE6_$cresolution_info" {
     Data.Fixed.$fHasResolutionE6_$cresolution_info:
         const Data.Fixed.$fHasResolutionE6_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.85713741 UTC

[section ""data" . Data.Fixed.$fHasResolutionE6_closure" {
     Data.Fixed.$fHasResolutionE6_closure:
         const Data.Fixed.$fHasResolutionE6_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE6_entry() //  [R2]
         { []
         }
     {offset
       cgqaN: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE6_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE6_info" {
     Data.Fixed.$fHasResolutionE6_info:
         const Data.Fixed.$fHasResolutionE6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.860543156 UTC

[section ""data" . sat_sgozV_closure" {
     sat_sgozV_closure:
         const GHC.Types.I#_con_info;
         const 1000000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.862456397 UTC

[section ""data" . sat_sgozW_closure" {
     sat_sgozW_closure:
         const :_con_info;
         const sat_sgozV_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.865599082 UTC

[section ""data" . Data.Fixed.$fHasResolutionE11_closure" {
     Data.Fixed.$fHasResolutionE11_closure:
         const Data.Fixed.$fHasResolutionE11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE11_entry() //  [R1]
         { []
         }
     {offset
       cgqb2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqb3; else goto cgqb4;
       cgqb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqb4: // global
           (_cgqaZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqaZ::I64 == 0) goto cgqb1; else goto cgqb0;
       cgqb1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqb0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqaZ::I64;
           R3 = sat_sgozW_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE11_info" {
     Data.Fixed.$fHasResolutionE11_info:
         const Data.Fixed.$fHasResolutionE11_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.870007411 UTC

[section ""data" . Data.Fixed.$fHasResolutionE9_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE9_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE9_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE9_$cresolution_entry() //  []
         { []
         }
     {offset
       cgqbg: // global
           R1 = Data.Fixed.$fHasResolutionE11_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE9_$cresolution_info" {
     Data.Fixed.$fHasResolutionE9_$cresolution_info:
         const Data.Fixed.$fHasResolutionE9_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.874555452 UTC

[section ""data" . Data.Fixed.$fHasResolutionE9_closure" {
     Data.Fixed.$fHasResolutionE9_closure:
         const Data.Fixed.$fHasResolutionE9_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE9_entry() //  [R2]
         { []
         }
     {offset
       cgqbs: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE9_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE9_info" {
     Data.Fixed.$fHasResolutionE9_info:
         const Data.Fixed.$fHasResolutionE9_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.878302751 UTC

[section ""data" . sat_sgozZ_closure" {
     sat_sgozZ_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.880338242 UTC

[section ""data" . sat_sgoA0_closure" {
     sat_sgoA0_closure:
         const :_con_info;
         const sat_sgozZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.882334417 UTC

[section ""data" . sat_sgozY_closure" {
     sat_sgozY_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.884206129 UTC

[section ""data" . sat_sgoA1_closure" {
     sat_sgoA1_closure:
         const :_con_info;
         const sat_sgozY_closure+1;
         const sat_sgoA0_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.88691149 UTC

[section ""data" . Data.Fixed.$fHasResolutionE5_closure" {
     Data.Fixed.$fHasResolutionE5_closure:
         const Data.Fixed.$fHasResolutionE5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE5_entry() //  [R1]
         { []
         }
     {offset
       cgqbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqbK; else goto cgqbL;
       cgqbK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqbL: // global
           (_cgqbG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqbG::I64 == 0) goto cgqbI; else goto cgqbH;
       cgqbI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqbH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqbG::I64;
           R3 = sat_sgoA1_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE5_info" {
     Data.Fixed.$fHasResolutionE5_info:
         const Data.Fixed.$fHasResolutionE5_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.891690433 UTC

[section ""data" . Data.Fixed.$fHasResolutionE12_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE12_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE12_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE12_$cresolution_entry() //  []
         { []
         }
     {offset
       cgqbX: // global
           R1 = Data.Fixed.$fHasResolutionE5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE12_$cresolution_info" {
     Data.Fixed.$fHasResolutionE12_$cresolution_info:
         const Data.Fixed.$fHasResolutionE12_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.895519296 UTC

[section ""data" . Data.Fixed.$fHasResolutionE12_closure" {
     Data.Fixed.$fHasResolutionE12_closure:
         const Data.Fixed.$fHasResolutionE12_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE12_entry() //  [R2]
         { []
         }
     {offset
       cgqc9: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE12_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE12_info" {
     Data.Fixed.$fHasResolutionE12_info:
         const Data.Fixed.$fHasResolutionE12_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.899304091 UTC

[section ""cstring" . Data.Fixed.$fDataFixed6_bytes" {
     Data.Fixed.$fDataFixed6_bytes:
         I8[] [68,97,116,97,46,70,105,120,101,100,46,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.902031293 UTC

[section ""data" . Data.Fixed.$fDataFixed5_closure" {
     Data.Fixed.$fDataFixed5_closure:
         const Data.Fixed.$fDataFixed5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fDataFixed5_entry() //  [R1]
         { []
         }
     {offset
       cgqcn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqco; else goto cgqcp;
       cgqco: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqcp: // global
           (_cgqck::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqck::I64 == 0) goto cgqcm; else goto cgqcl;
       cgqcm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqcl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqck::I64;
           R2 = Data.Fixed.$fDataFixed6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed5_info" {
     Data.Fixed.$fDataFixed5_info:
         const Data.Fixed.$fDataFixed5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.905947651 UTC

[section ""cstring" . w1_rgoyk_bytes" {
     w1_rgoyk_bytes:
         I8[] [77,107,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.908755406 UTC

[section ""data" . w2_rgoyl_closure" {
     w2_rgoyl_closure:
         const w2_rgoyl_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rgoyl_entry() //  [R1]
         { []
         }
     {offset
       cgqcE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqcF; else goto cgqcG;
       cgqcF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqcG: // global
           (_cgqcB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqcB::I64 == 0) goto cgqcD; else goto cgqcC;
       cgqcD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqcC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqcB::I64;
           R2 = w1_rgoyk_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_rgoyl_info" {
     w2_rgoyl_info:
         const w2_rgoyl_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.91531453 UTC

[section ""data" . go61_rgoym_closure" {
     go61_rgoym_closure:
         const go61_rgoym_info;
         const 0;
 },
 go61_rgoym_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqcZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqd0; else goto ugqdD;
       cgqd0: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgoym_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ugqdD: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgqcP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgoym_info" {
     go61_rgoym_info:
         const go61_rgoym_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgoHz_srt+256;
 },
 _cgqcP() //  []
         { []
         }
     {offset
       cgqcP: // global
           _sgoA3::P64 = P64[Sp];
           I64[Sp] = block_cgqcS_info;
           R1 = _sgoA3::P64;
           if (R1 & 7 != 0) goto ugqdH; else goto cgqcT;
       ugqdH: // global
           call _cgqcS(R1) args: 0, res: 0, upd: 0;
       cgqcT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgqcS() //  [R1]
         { []
         }
     {offset
       cgqcS: // global
           if (R1 & 7 == 1) goto ugqdE; else goto cgqcX;
       ugqdE: // global
           Sp = Sp + 16;
           call _cgqdf() args: 0, res: 0, upd: 0;
       cgqcX: // global
           I64[Sp - 8] = block_cgqd7_info;
           _sgoA6::P64 = P64[R1 + 6];
           _sgoA7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgoA7::P64;
           P64[Sp + 8] = _sgoA6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqdI; else goto cgqd9;
       ugqdI: // global
           call _cgqd7(R1) args: 0, res: 0, upd: 0;
       cgqd9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqcS_info" {
     block_cgqcS_info:
         const _cgqcS;
         const 1;
         const 12884901918;
         const SgoHz_srt+256;
 },
 _cgqd7() //  [R1]
         { []
         }
     {offset
       cgqd7: // global
           if (R1 & 7 == 1) goto ugqdF; else goto cgqdk;
       ugqdF: // global
           Sp = Sp + 24;
           call _cgqdf() args: 0, res: 0, upd: 0;
       cgqdk: // global
           I64[Sp - 8] = block_cgqdi_info;
           _sgoA9::P64 = P64[R1 + 6];
           _sgoAa::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgoAa::P64;
           P64[Sp + 16] = _sgoA9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqdL; else goto cgqdl;
       ugqdL: // global
           call _cgqdi(R1) args: 0, res: 0, upd: 0;
       cgqdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqd7_info" {
     block_cgqd7_info:
         const _cgqd7;
         const 2;
         const 12884901918;
         const SgoHz_srt+256;
 },
 _cgqdf() //  []
         { []
         }
     {offset
       cgqdf: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgqdi() //  [R1]
         { []
         }
     {offset
       cgqdi: // global
           I64[Sp] = block_cgqdp_info;
           R3 = w2_rgoyl_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqdi_info" {
     block_cgqdi_info:
         const _cgqdi;
         const 3;
         const 12884901918;
         const SgoHz_srt+256;
 },
 _cgqdp() //  [R1]
         { []
         }
     {offset
       cgqdp: // global
           if (R1 & 7 == 1) goto cgqdw; else goto cgqdA;
       cgqdw: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgqcP() args: 0, res: 0, upd: 0;
       cgqdA: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqdp_info" {
     block_cgqdp_info:
         const _cgqdp;
         const 3;
         const 12884901918;
         const SgoHz_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.927474284 UTC

[section ""data" . conMkFixed1_rgoyn_closure" {
     conMkFixed1_rgoyn_closure:
         const Data.Data.AlgConstr_con_info;
         const conMkFixed2_rgoyo_closure;
         const 0;
 },
 section ""data" . Data.Fixed.$fDataFixed4_closure" {
     Data.Fixed.$fDataFixed4_closure:
         const :_con_info;
         const Data.Fixed.conMkFixed_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Fixed.$fDataFixed3_closure" {
     Data.Fixed.$fDataFixed3_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Fixed.$fDataFixed4_closure+2;
         const 0;
 },
 section ""data" . Data.Fixed.tyFixed_closure" {
     Data.Fixed.tyFixed_closure:
         const Data.Data.DataType_con_info;
         const Data.Fixed.$fDataFixed5_closure;
         const Data.Fixed.$fDataFixed3_closure+1;
         const 0;
 },
 section ""data" . Data.Fixed.conMkFixed_closure" {
     Data.Fixed.conMkFixed_closure:
         const Data.Data.Constr_con_info;
         const conMkFixed1_rgoyn_closure+1;
         const w2_rgoyl_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Fixed.tyFixed_closure+1;
         const 0;
 },
 section ""data" . conMkFixed2_rgoyo_closure" {
     conMkFixed2_rgoyo_closure:
         const conMkFixed2_rgoyo_info;
         const 0;
         const 0;
         const 0;
 },
 conMkFixed2_rgoyo_entry() //  [R1]
         { []
         }
     {offset
       cgqes: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqet; else goto cgqeu;
       cgqet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqeu: // global
           (_cgqep::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqep::I64 == 0) goto cgqer; else goto cgqeq;
       cgqer: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqeq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqep::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Fixed.$fDataFixed4_closure+2;
           Sp = Sp - 16;
           call go61_rgoym_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . conMkFixed2_rgoyo_info" {
     conMkFixed2_rgoyo_info:
         const conMkFixed2_rgoyo_entry;
         const 0;
         const 30064771093;
         const SgoHz_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.93440274 UTC

[section ""cstring" . Data.Fixed.$trModule4_bytes" {
     Data.Fixed.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.936585117 UTC

[section ""data" . loc_rgoyp_closure" {
     loc_rgoyp_closure:
         const loc_rgoyp_info;
         const 0;
         const 0;
         const 0;
 },
 loc_rgoyp_entry() //  [R1]
         { []
         }
     {offset
       cgqeO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqeP; else goto cgqeQ;
       cgqeP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqeQ: // global
           (_cgqeL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqeL::I64 == 0) goto cgqeN; else goto cgqeM;
       cgqeN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqeM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqeL::I64;
           R2 = Data.Fixed.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_rgoyp_info" {
     loc_rgoyp_info:
         const loc_rgoyp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.940040271 UTC

[section ""cstring" . Data.Fixed.$trModule2_bytes" {
     Data.Fixed.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.94226816 UTC

[section ""data" . loc1_rgoyq_closure" {
     loc1_rgoyq_closure:
         const loc1_rgoyq_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rgoyq_entry() //  [R1]
         { []
         }
     {offset
       cgqf5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqf6; else goto cgqf7;
       cgqf6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqf7: // global
           (_cgqf2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqf2::I64 == 0) goto cgqf4; else goto cgqf3;
       cgqf4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqf3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqf2::I64;
           R2 = Data.Fixed.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rgoyq_info" {
     loc1_rgoyq_info:
         const loc1_rgoyq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.946226342 UTC

[section ""cstring" . loc2_rgoyr_bytes" {
     loc2_rgoyr_bytes:
         I8[] [46,47,68,97,116,97,47,70,105,120,101,100,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.948314766 UTC

[section ""data" . loc3_rgoys_closure" {
     loc3_rgoys_closure:
         const loc3_rgoys_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_rgoys_entry() //  [R1]
         { []
         }
     {offset
       cgqfm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqfn; else goto cgqfo;
       cgqfn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqfo: // global
           (_cgqfj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqfj::I64 == 0) goto cgqfl; else goto cgqfk;
       cgqfl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqfk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqfj::I64;
           R2 = loc2_rgoyr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_rgoys_info" {
     loc3_rgoys_info:
         const loc3_rgoys_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.951973056 UTC

[section ""data" . loc4_rgoyt_closure" {
     loc4_rgoyt_closure:
         const GHC.Types.I#_con_info;
         const 83;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.953570534 UTC

[section ""data" . loc5_rgoyu_closure" {
     loc5_rgoyu_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.955126259 UTC

[section ""data" . loc6_rgoyv_closure" {
     loc6_rgoyv_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.956739098 UTC

[section ""cstring" . $dIP_rgoyw_bytes" {
     $dIP_rgoyw_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.958920414 UTC

[section ""data" . $dIP1_rgoyx_closure" {
     $dIP1_rgoyx_closure:
         const $dIP1_rgoyx_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_rgoyx_entry() //  [R1]
         { []
         }
     {offset
       cgqfG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqfH; else goto cgqfI;
       cgqfH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqfI: // global
           (_cgqfD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqfD::I64 == 0) goto cgqfF; else goto cgqfE;
       cgqfF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqfE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqfD::I64;
           R2 = $dIP_rgoyw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_rgoyx_info" {
     $dIP1_rgoyx_info:
         const $dIP1_rgoyx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.96277569 UTC

[section ""data" . $dIP2_rgoyy_closure" {
     $dIP2_rgoyy_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_rgoyp_closure;
         const loc1_rgoyq_closure;
         const loc3_rgoys_closure;
         const loc4_rgoyt_closure+1;
         const loc5_rgoyu_closure+1;
         const loc4_rgoyt_closure+1;
         const loc6_rgoyv_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.964512909 UTC

[section ""data" . $dIP3_rgoyz_closure" {
     $dIP3_rgoyz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rgoyx_closure;
         const $dIP2_rgoyy_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.966198317 UTC

[section ""data" . Data.Fixed.$trModule3_closure" {
     Data.Fixed.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.967896881 UTC

[section ""data" . Data.Fixed.$trModule1_closure" {
     Data.Fixed.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.969587844 UTC

[section ""data" . Data.Fixed.$trModule_closure" {
     Data.Fixed.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Fixed.$trModule3_closure+1;
         const Data.Fixed.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.971813344 UTC

[section ""data" . $krep_rgoyA_closure" {
     $krep_rgoyA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.973577032 UTC

[section ""data" . $krep1_rgoyB_closure" {
     $krep1_rgoyB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.975194302 UTC

[section ""data" . Data.Fixed.$tcHasResolution1_closure" {
     Data.Fixed.$tcHasResolution1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rgoyB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.976946308 UTC

[section ""data" . $krep2_rgoyC_closure" {
     $krep2_rgoyC_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.979035171 UTC

[section ""cstring" . Data.Fixed.$fDataFixed10_bytes" {
     Data.Fixed.$fDataFixed10_bytes:
         I8[] [70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.980636982 UTC

[section ""data" . Data.Fixed.$fDataFixed9_closure" {
     Data.Fixed.$fDataFixed9_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$fDataFixed10_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.982352437 UTC

[section ""data" . Data.Fixed.$tcFixed_closure" {
     Data.Fixed.$tcFixed_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$fDataFixed9_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12850707307297787398;
         const 5875431371990069009;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.984105058 UTC

[section ""data" . $krep3_rgoyD_closure" {
     $krep3_rgoyD_closure:
         const :_con_info;
         const $krep2_rgoyC_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.985807087 UTC

[section ""data" . $krep4_rgoyE_closure" {
     $krep4_rgoyE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Fixed.$tcFixed_closure+1;
         const $krep3_rgoyD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.987463184 UTC

[section ""data" . Data.Fixed.$tc'MkFixed1_closure" {
     Data.Fixed.$tc'MkFixed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgoyA_closure+1;
         const $krep4_rgoyE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.98905965 UTC

[section ""cstring" . Data.Fixed.$tc'MkFixed3_bytes" {
     Data.Fixed.$tc'MkFixed3_bytes:
         I8[] [39,77,107,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.990619235 UTC

[section ""data" . Data.Fixed.$tc'MkFixed2_closure" {
     Data.Fixed.$tc'MkFixed2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tc'MkFixed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.99242087 UTC

[section ""data" . Data.Fixed.$tc'MkFixed_closure" {
     Data.Fixed.$tc'MkFixed_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tc'MkFixed2_closure+1;
         const Data.Fixed.$tc'MkFixed1_closure+4;
         const 8992689233320522225;
         const 9587721628087041380;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:18.996244032 UTC

[section ""data" . Data.Fixed.$fDataFixed8_closure" {
     Data.Fixed.$fDataFixed8_closure:
         const Data.Fixed.$fDataFixed8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fDataFixed8_entry() //  [R1]
         { []
         }
     {offset
       cgqgj: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgqgk; else goto cgqgl;
       cgqgk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqgl: // global
           (_cgqgb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqgb::I64 == 0) goto cgqgd; else goto cgqgc;
       cgqgd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqgc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqgb::I64;
           I64[Sp - 24] = block_cgqge_info;
           R6 = 0;
           R5 = Data.Fixed.$fDataFixed9_closure+1;
           R4 = Data.Fixed.$trModule_closure+1;
           R3 = 5875431371990069009;
           R2 = 12850707307297787398;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed8_info" {
     Data.Fixed.$fDataFixed8_info:
         const Data.Fixed.$fDataFixed8_entry;
         const 0;
         const 4294967317;
         const SgoHz_srt+296;
 },
 _cgqge() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgqge: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgqgf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqge_info" {
     block_cgqge_info:
         const _cgqge;
         const 0;
         const 30;
 },
 _cgqgf() //  []
         { []
         }
     {offset
       cgqgf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgqgo; else goto cgqgn;
       cgqgo: // global
           HpAlloc = 48;
           I64[Sp] = block_cgqgf_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cgqgn: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqgf_info" {
     block_cgqgf_info:
         const _cgqgf;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.005315026 UTC

[section ""data" . Data.Fixed.$fDataFixed7_closure" {
     Data.Fixed.$fDataFixed7_closure:
         const Data.Fixed.$fDataFixed7_info;
         const 0;
 },
 Data.Fixed.$fDataFixed7_entry() //  [R2]
         { []
         }
     {offset
       cgqgO: // global
           R3 = R2;
           R2 = Data.Fixed.$fDataFixed8_closure;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed7_info" {
     Data.Fixed.$fDataFixed7_info:
         const Data.Fixed.$fDataFixed7_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgoHz_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.008966788 UTC

[section ""data" . Data.Fixed.$fDataFixed1_closure" {
     Data.Fixed.$fDataFixed1_closure:
         const (,)_con_info;
         const Data.Fixed.$fDataFixed2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.020010337 UTC

[section ""data" . Data.Fixed.$w$cgmapMp_closure" {
     Data.Fixed.$w$cgmapMp_closure:
         const Data.Fixed.$w$cgmapMp_info;
         const 0;
 },
 lvl17_sgoAs_entry() //  [R1]
         { []
         }
     {offset
       cgqh4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqh5; else goto cgqh6;
       cgqh5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgoAs_info" {
     lvl17_sgoAs_info:
         const lvl17_sgoAs_entry;
         const 1;
         const 16;
 },
 sat_sgoAP_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqhj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqhk; else goto cgqhl;
       cgqhk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqhl: // global
           I64[Sp - 24] = block_cgqhg_info;
           _sgoAs::P64 = P64[R1 + 7];
           _sgoAt::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgoAs::P64;
           P64[Sp - 8] = _sgoAt::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugqhD; else goto cgqhh;
       ugqhD: // global
           call _cgqhg(R1) args: 0, res: 0, upd: 0;
       cgqhh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoAP_info" {
     sat_sgoAP_info:
         const sat_sgoAP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgqhg() //  [R1]
         { []
         }
     {offset
       cgqhg: // global
           I64[Sp - 8] = block_cgqho_info;
           _sgoAM::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgoAM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqhC; else goto cgqhq;
       ugqhC: // global
           call _cgqho(R1) args: 0, res: 0, upd: 0;
       cgqhq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqhg_info" {
     block_cgqhg_info:
         const _cgqhg;
         const 2;
         const 30;
 },
 _cgqho() //  [R1]
         { []
         }
     {offset
       cgqho: // global
           if (R1 & 7 == 1) goto cgqhw; else goto cgqhA;
       cgqhw: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqhA: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqho_info" {
     block_cgqho_info:
         const _cgqho;
         const 3;
         const 30;
 },
 lvl18_sgoAu_entry() //  [R1]
         { []
         }
     {offset
       cgqhM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqhN; else goto cgqhO;
       cgqhN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqhO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgoAu_info" {
     lvl18_sgoAu_info:
         const lvl18_sgoAu_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 sat_sgoAH_entry() //  [R1]
         { []
         }
     {offset
       cgqi5: // global
           _sgoAH::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgqi6; else goto cgqi7;
       cgqi7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqi9; else goto cgqi8;
       cgqi9: // global
           HpAlloc = 56;
           goto cgqi6;
       cgqi6: // global
           R1 = _sgoAH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqi8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoAH::P64;
           _sgoAr::P64 = P64[_sgoAH::P64 + 16];
           _sgoAt::P64 = P64[_sgoAH::P64 + 24];
           _sgoAy::P64 = P64[_sgoAH::P64 + 32];
           _sgoAz::P64 = P64[_sgoAH::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgoAy::P64;
           P64[Hp - 24] = _sgoAr::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgoAz::P64;
           R2 = _sgoAt::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoAH_info" {
     sat_sgoAH_info:
         const sat_sgoAH_entry;
         const 4;
         const 15;
 },
 sat_sgoAD_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqil: // global
           _sgoAA::P64 = R2;
           _sgoAD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgqim; else goto cgqin;
       cgqin: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqip; else goto cgqio;
       cgqip: // global
           HpAlloc = 56;
           goto cgqim;
       cgqim: // global
           R2 = _sgoAA::P64;
           R1 = _sgoAD::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqio: // global
           _sgoAt::P64 = P64[_sgoAD::P64 + 7];
           _sgoAy::P64 = P64[_sgoAD::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgoAy::P64;
           P64[Hp - 24] = _sgoAA::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgoAt::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoAD_info" {
     sat_sgoAD_info:
         const sat_sgoAD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgoAE_entry() //  [R1]
         { []
         }
     {offset
       cgqiq: // global
           _sgoAE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqir; else goto cgqis;
       cgqis: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqiu; else goto cgqit;
       cgqiu: // global
           HpAlloc = 24;
           goto cgqir;
       cgqir: // global
           R1 = _sgoAE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoAE::P64;
           _sgoAt::P64 = P64[_sgoAE::P64 + 16];
           _sgoAu::P64 = P64[_sgoAE::P64 + 24];
           _sgoAy::P64 = P64[_sgoAE::P64 + 32];
           I64[Hp - 16] = sat_sgoAD_info;
           P64[Hp - 8] = _sgoAt::P64;
           P64[Hp] = _sgoAy::P64;
           R2 = _sgoAt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgoAu::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoAE_info" {
     sat_sgoAE_info:
         const sat_sgoAE_entry;
         const 3;
         const 15;
 },
 sat_sgoAI_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqiv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqiw; else goto cgqix;
       cgqiw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqix: // global
           I64[Sp - 40] = block_cgqhU_info;
           _sgoAp::P64 = P64[R1 + 7];
           _sgoAr::P64 = P64[R1 + 15];
           _sgoAt::P64 = P64[R1 + 23];
           _sgoAu::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgoAp::P64;
           P64[Sp - 24] = _sgoAr::P64;
           P64[Sp - 16] = _sgoAt::P64;
           P64[Sp - 8] = _sgoAu::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugqiB; else goto cgqhV;
       ugqiB: // global
           call _cgqhU(R1) args: 0, res: 0, upd: 0;
       cgqhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoAI_info" {
     sat_sgoAI_info:
         const sat_sgoAI_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgqhU() //  [R1]
         { []
         }
     {offset
       cgqhU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgqiA; else goto cgqiz;
       cgqiA: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqiz: // global
           _sgoAy::P64 = P64[R1 + 7];
           _sgoAz::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgoAH_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sgoAt::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sgoAt::P64;
           P64[Hp - 48] = _sgoAy::P64;
           P64[Hp - 40] = _sgoAz::P64;
           I64[Hp - 32] = sat_sgoAE_info;
           P64[Hp - 16] = _sgoAt::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgoAy::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqhU_info" {
     block_cgqhU_info:
         const _cgqhU;
         const 4;
         const 30;
 },
 sat_sgoAv_entry() //  [R1]
         { []
         }
     {offset
       cgqiG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqiH; else goto cgqiI;
       cgqiH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqiI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoAv_info" {
     sat_sgoAv_info:
         const sat_sgoAv_entry;
         const 1;
         const 16;
 },
 sat_sgoAJ_entry() //  [R1]
         { []
         }
     {offset
       cgqiJ: // global
           _sgoAJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqiK; else goto cgqiL;
       cgqiL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgqiN; else goto cgqiM;
       cgqiN: // global
           HpAlloc = 96;
           goto cgqiK;
       cgqiK: // global
           R1 = _sgoAJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqiM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoAJ::P64;
           _sgoAp::P64 = P64[_sgoAJ::P64 + 16];
           _sgoAq::P64 = P64[_sgoAJ::P64 + 24];
           _sgoAr::P64 = P64[_sgoAJ::P64 + 32];
           _sgoAt::P64 = P64[_sgoAJ::P64 + 40];
           I64[Hp - 88] = lvl18_sgoAu_info;
           P64[Hp - 72] = _sgoAq::P64;
           P64[Hp - 64] = _sgoAr::P64;
           I64[Hp - 56] = sat_sgoAI_info;
           P64[Hp - 48] = _sgoAp::P64;
           P64[Hp - 40] = _sgoAr::P64;
           P64[Hp - 32] = _sgoAt::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgoAv_info;
           P64[Hp] = _sgoAt::P64;
           R2 = _sgoAt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoAJ_info" {
     sat_sgoAJ_info:
         const sat_sgoAJ_entry;
         const 4;
         const 4294967311;
         const SgoHz_srt+320;
 },
 Data.Fixed.$w$cgmapMp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqiO: // global
           _sgoAr::P64 = R4;
           _sgoAq::P64 = R3;
           _sgoAp::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqiP; else goto cgqiQ;
       cgqiQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqiS; else goto cgqiR;
       cgqiS: // global
           HpAlloc = 24;
           goto cgqiP;
       cgqiP: // global
           R4 = _sgoAr::P64;
           R3 = _sgoAq::P64;
           R2 = _sgoAp::P64;
           R1 = Data.Fixed.$w$cgmapMp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqiR: // global
           I64[Hp - 16] = lvl17_sgoAs_info;
           P64[Hp] = _sgoAp::P64;
           I64[Sp - 40] = block_cgqh7_info;
           R2 = _sgoAp::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgoAp::P64;
           P64[Sp - 16] = _sgoAq::P64;
           P64[Sp - 8] = _sgoAr::P64;
           Sp = Sp - 40;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapMp_info" {
     Data.Fixed.$w$cgmapMp_info:
         const Data.Fixed.$w$cgmapMp_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgoHz_srt+320;
 },
 _cgqh7() //  [R1]
         { []
         }
     {offset
       cgqh7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgqiV; else goto cgqiU;
       cgqiV: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqiU: // global
           I64[Hp - 64] = sat_sgoAP_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sgoAJ_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 63;
           Sp = Sp + 16;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqh7_info" {
     block_cgqh7_info:
         const _cgqh7;
         const 4;
         const 4294967326;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.048672814 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapMp_closure" {
     Data.Fixed.$fDataFixed_$cgmapMp_closure:
         const Data.Fixed.$fDataFixed_$cgmapMp_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapMp_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgqkg: // global
           _sgoAS::P64 = R4;
           R4 = R5;
           _sgoAR::P64 = R3;
           R3 = _sgoAS::P64;
           R2 = _sgoAR::P64;
           call Data.Fixed.$w$cgmapMp_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapMp_info" {
     Data.Fixed.$fDataFixed_$cgmapMp_info:
         const Data.Fixed.$fDataFixed_$cgmapMp_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SgoHz_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.054280208 UTC

[section ""data" . Data.Fixed.$w$cgmapM_closure" {
     Data.Fixed.$w$cgmapM_closure:
         const Data.Fixed.$w$cgmapM_info;
         const 0;
 },
 lvl17_sgoAX_entry() //  [R1]
         { []
         }
     {offset
       cgqkv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqkw; else goto cgqkx;
       cgqkw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqkx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgoAX_info" {
     lvl17_sgoAX_info:
         const lvl17_sgoAX_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 sat_sgoB2_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqkJ: // global
           _sgoB0::P64 = R2;
           _sgoB2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgqkK; else goto cgqkL;
       cgqkL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgqkN; else goto cgqkM;
       cgqkN: // global
           HpAlloc = 32;
           goto cgqkK;
       cgqkK: // global
           R2 = _sgoB0::P64;
           R1 = _sgoB2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqkM: // global
           _sgoAU::P64 = P64[_sgoB2::P64 + 7];
           _sgoAZ::P64 = P64[_sgoB2::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgoAZ::P64;
           P64[Hp] = _sgoB0::P64;
           R2 = _sgoAU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoB2_info" {
     sat_sgoB2_info:
         const sat_sgoB2_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgoB3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqkO: // global
           _sgoAZ::P64 = R2;
           _sgoB3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgqkP; else goto cgqkQ;
       cgqkQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqkS; else goto cgqkR;
       cgqkS: // global
           HpAlloc = 24;
           goto cgqkP;
       cgqkP: // global
           R2 = _sgoAZ::P64;
           R1 = _sgoB3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqkR: // global
           _sgoAU::P64 = P64[_sgoB3::P64 + 7];
           _sgoAX::P64 = P64[_sgoB3::P64 + 15];
           I64[Hp - 16] = sat_sgoB2_info;
           P64[Hp - 8] = _sgoAU::P64;
           P64[Hp] = _sgoAZ::P64;
           R2 = _sgoAU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgoAX::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoB3_info" {
     sat_sgoB3_info:
         const sat_sgoB3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgoAY_entry() //  [R1]
         { []
         }
     {offset
       cgqkX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqkY; else goto cgqkZ;
       cgqkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoAY_info" {
     sat_sgoAY_info:
         const sat_sgoAY_entry;
         const 1;
         const 16;
 },
 Data.Fixed.$w$cgmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgql0: // global
           _sgoAW::P64 = R4;
           _sgoAV::P64 = R3;
           _sgoAU::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgql1; else goto cgql2;
       cgql2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgql4; else goto cgql3;
       cgql4: // global
           HpAlloc = 80;
           goto cgql1;
       cgql1: // global
           R4 = _sgoAW::P64;
           R3 = _sgoAV::P64;
           R2 = _sgoAU::P64;
           R1 = Data.Fixed.$w$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgql3: // global
           I64[Hp - 72] = lvl17_sgoAX_info;
           P64[Hp - 56] = _sgoAV::P64;
           P64[Hp - 48] = _sgoAW::P64;
           I64[Hp - 40] = sat_sgoB3_info;
           P64[Hp - 32] = _sgoAU::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = sat_sgoAY_info;
           P64[Hp] = _sgoAU::P64;
           R2 = _sgoAU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapM_info" {
     Data.Fixed.$w$cgmapM_info:
         const Data.Fixed.$w$cgmapM_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.065471327 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapM_closure" {
     Data.Fixed.$fDataFixed_$cgmapM_closure:
         const Data.Fixed.$fDataFixed_$cgmapM_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapM_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgqlz: // global
           _sgoB6::P64 = R4;
           R4 = R5;
           _sgoB5::P64 = R3;
           R3 = _sgoB6::P64;
           R2 = _sgoB5::P64;
           call Data.Fixed.$w$cgmapM_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapM_info" {
     Data.Fixed.$fDataFixed_$cgmapM_info:
         const Data.Fixed.$fDataFixed_$cgmapM_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SgoHz_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.069738581 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapQi_closure" {
     Data.Fixed.$fDataFixed_$cgmapQi_closure:
         const Data.Fixed.$fDataFixed_$cgmapQi_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqlN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqlO; else goto cgqlP;
       cgqlO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqlP: // global
           I64[Sp - 24] = block_cgqlK_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugqlX; else goto cgqlL;
       ugqlX: // global
           call _cgqlK(R1) args: 0, res: 0, upd: 0;
       cgqlL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapQi_info" {
     Data.Fixed.$fDataFixed_$cgmapQi_info:
         const Data.Fixed.$fDataFixed_$cgmapQi_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const SgoHz_srt+320;
 },
 _cgqlK() //  [R1]
         { []
         }
     {offset
       cgqlK: // global
           if (I64[R1 + 7] == 0) goto cgqlW; else goto cgqlV;
       cgqlW: // global
           R3 = P64[Sp + 16];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqlV: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqlK_info" {
     block_cgqlK_info:
         const _cgqlK;
         const 2;
         const 38654705694;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.082476161 UTC

[section ""data" . Data.Fixed.$w$cgmapMo_closure" {
     Data.Fixed.$w$cgmapMo_closure:
         const Data.Fixed.$w$cgmapMo_info;
         const 0;
 },
 lvl17_sgoBi_entry() //  [R1]
         { []
         }
     {offset
       cgqmf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqmg; else goto cgqmh;
       cgqmg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqmh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgoBi_info" {
     lvl17_sgoBi_info:
         const lvl17_sgoBi_entry;
         const 1;
         const 16;
 },
 sat_sgoBI_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqmu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqmv; else goto cgqmw;
       cgqmv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqmw: // global
           I64[Sp - 24] = block_cgqmr_info;
           _sgoBi::P64 = P64[R1 + 7];
           _sgoBj::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgoBi::P64;
           P64[Sp - 8] = _sgoBj::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugqmO; else goto cgqms;
       ugqmO: // global
           call _cgqmr(R1) args: 0, res: 0, upd: 0;
       cgqms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoBI_info" {
     sat_sgoBI_info:
         const sat_sgoBI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgqmr() //  [R1]
         { []
         }
     {offset
       cgqmr: // global
           I64[Sp - 8] = block_cgqmz_info;
           _sgoBF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgoBF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqmN; else goto cgqmB;
       ugqmN: // global
           call _cgqmz(R1) args: 0, res: 0, upd: 0;
       cgqmB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqmr_info" {
     block_cgqmr_info:
         const _cgqmr;
         const 2;
         const 30;
 },
 _cgqmz() //  [R1]
         { []
         }
     {offset
       cgqmz: // global
           if (R1 & 7 == 1) goto cgqmH; else goto cgqmL;
       cgqmH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqmL: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqmz_info" {
     block_cgqmz_info:
         const _cgqmz;
         const 3;
         const 30;
 },
 lvl18_sgoBk_entry() //  [R1]
         { []
         }
     {offset
       cgqmX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqmY; else goto cgqmZ;
       cgqmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgoBk_info" {
     lvl18_sgoBk_info:
         const lvl18_sgoBk_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 sat_sgoBy_entry() //  [R1]
         { []
         }
     {offset
       cgqnl: // global
           _sgoBy::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgqnm; else goto cgqnn;
       cgqnn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqnp; else goto cgqno;
       cgqnp: // global
           HpAlloc = 56;
           goto cgqnm;
       cgqnm: // global
           R1 = _sgoBy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqno: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoBy::P64;
           _sgoBh::P64 = P64[_sgoBy::P64 + 16];
           _sgoBj::P64 = P64[_sgoBy::P64 + 24];
           _sgoBo::P64 = P64[_sgoBy::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgoBo::P64;
           P64[Hp - 24] = _sgoBh::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgoBj::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoBy_info" {
     sat_sgoBy_info:
         const sat_sgoBy_entry;
         const 3;
         const 15;
 },
 sat_sgoBu_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqnB: // global
           _sgoBr::P64 = R2;
           _sgoBu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgqnC; else goto cgqnD;
       cgqnD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqnF; else goto cgqnE;
       cgqnF: // global
           HpAlloc = 56;
           goto cgqnC;
       cgqnC: // global
           R2 = _sgoBr::P64;
           R1 = _sgoBu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqnE: // global
           _sgoBj::P64 = P64[_sgoBu::P64 + 7];
           _sgoBo::P64 = P64[_sgoBu::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgoBo::P64;
           P64[Hp - 24] = _sgoBr::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgoBj::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoBu_info" {
     sat_sgoBu_info:
         const sat_sgoBu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgoBv_entry() //  [R1]
         { []
         }
     {offset
       cgqnG: // global
           _sgoBv::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqnH; else goto cgqnI;
       cgqnI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqnK; else goto cgqnJ;
       cgqnK: // global
           HpAlloc = 24;
           goto cgqnH;
       cgqnH: // global
           R1 = _sgoBv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqnJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoBv::P64;
           _sgoBj::P64 = P64[_sgoBv::P64 + 16];
           _sgoBk::P64 = P64[_sgoBv::P64 + 24];
           _sgoBo::P64 = P64[_sgoBv::P64 + 32];
           I64[Hp - 16] = sat_sgoBu_info;
           P64[Hp - 8] = _sgoBj::P64;
           P64[Hp] = _sgoBo::P64;
           R2 = _sgoBj::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgoBk::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoBv_info" {
     sat_sgoBv_info:
         const sat_sgoBv_entry;
         const 3;
         const 15;
 },
 sat_sgoBB_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqnL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgqnM; else goto cgqnN;
       cgqnM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqnN: // global
           I64[Sp - 40] = block_cgqn5_info;
           _sgoBf::P64 = P64[R1 + 7];
           _sgoBh::P64 = P64[R1 + 15];
           _sgoBj::P64 = P64[R1 + 23];
           _sgoBk::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgoBf::P64;
           P64[Sp - 24] = _sgoBh::P64;
           P64[Sp - 16] = _sgoBj::P64;
           P64[Sp - 8] = _sgoBk::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugqo4; else goto cgqn6;
       ugqo4: // global
           call _cgqn5(R1) args: 0, res: 0, upd: 0;
       cgqn6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoBB_info" {
     sat_sgoBB_info:
         const sat_sgoBB_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgqn5() //  [R1]
         { []
         }
     {offset
       cgqn5: // global
           I64[Sp - 8] = block_cgqna_info;
           _sgoBo::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgoBo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqo3; else goto cgqnb;
       ugqo3: // global
           call _cgqna(R1) args: 0, res: 0, upd: 0;
       cgqnb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqn5_info" {
     block_cgqn5_info:
         const _cgqn5;
         const 4;
         const 30;
 },
 _cgqna() //  [R1]
         { []
         }
     {offset
       cgqna: // global
           _sgoBh::P64 = P64[Sp + 24];
           _sgoBj::P64 = P64[Sp + 32];
           _sgoBo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgqnQ; else goto cgqnU;
       cgqnQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgqnT; else goto cgqnS;
       cgqnT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqnS: // global
           I64[Hp - 72] = sat_sgoBy_info;
           P64[Hp - 56] = _sgoBh::P64;
           P64[Hp - 48] = _sgoBj::P64;
           P64[Hp - 40] = _sgoBo::P64;
           I64[Hp - 32] = sat_sgoBv_info;
           P64[Hp - 16] = _sgoBj::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgoBo::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgqnU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqnZ; else goto cgqnY;
       cgqnZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqnY: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgoBo::P64;
           P64[Hp - 24] = _sgoBh::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgoBj::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqna_info" {
     block_cgqna_info:
         const _cgqna;
         const 5;
         const 30;
 },
 sat_sgoBl_entry() //  [R1]
         { []
         }
     {offset
       cgqo9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqoa; else goto cgqob;
       cgqoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqob: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoBl_info" {
     sat_sgoBl_info:
         const sat_sgoBl_entry;
         const 1;
         const 16;
 },
 sat_sgoBC_entry() //  [R1]
         { []
         }
     {offset
       cgqoc: // global
           _sgoBC::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqod; else goto cgqoe;
       cgqoe: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgqog; else goto cgqof;
       cgqog: // global
           HpAlloc = 96;
           goto cgqod;
       cgqod: // global
           R1 = _sgoBC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqof: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoBC::P64;
           _sgoBf::P64 = P64[_sgoBC::P64 + 16];
           _sgoBg::P64 = P64[_sgoBC::P64 + 24];
           _sgoBh::P64 = P64[_sgoBC::P64 + 32];
           _sgoBj::P64 = P64[_sgoBC::P64 + 40];
           I64[Hp - 88] = lvl18_sgoBk_info;
           P64[Hp - 72] = _sgoBg::P64;
           P64[Hp - 64] = _sgoBh::P64;
           I64[Hp - 56] = sat_sgoBB_info;
           P64[Hp - 48] = _sgoBf::P64;
           P64[Hp - 40] = _sgoBh::P64;
           P64[Hp - 32] = _sgoBj::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgoBl_info;
           P64[Hp] = _sgoBj::P64;
           R2 = _sgoBj::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoBC_info" {
     sat_sgoBC_info:
         const sat_sgoBC_entry;
         const 4;
         const 4294967311;
         const SgoHz_srt+320;
 },
 Data.Fixed.$w$cgmapMo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqoh: // global
           _sgoBh::P64 = R4;
           _sgoBg::P64 = R3;
           _sgoBf::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqoi; else goto cgqoj;
       cgqoj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqol; else goto cgqok;
       cgqol: // global
           HpAlloc = 24;
           goto cgqoi;
       cgqoi: // global
           R4 = _sgoBh::P64;
           R3 = _sgoBg::P64;
           R2 = _sgoBf::P64;
           R1 = Data.Fixed.$w$cgmapMo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqok: // global
           I64[Hp - 16] = lvl17_sgoBi_info;
           P64[Hp] = _sgoBf::P64;
           I64[Sp - 40] = block_cgqmi_info;
           R2 = _sgoBf::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgoBf::P64;
           P64[Sp - 16] = _sgoBg::P64;
           P64[Sp - 8] = _sgoBh::P64;
           Sp = Sp - 40;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapMo_info" {
     Data.Fixed.$w$cgmapMo_info:
         const Data.Fixed.$w$cgmapMo_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const SgoHz_srt+320;
 },
 _cgqmi() //  [R1]
         { []
         }
     {offset
       cgqmi: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgqoo; else goto cgqon;
       cgqoo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqon: // global
           I64[Hp - 64] = sat_sgoBI_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sgoBC_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 63;
           Sp = Sp + 16;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqmi_info" {
     block_cgqmi_info:
         const _cgqmi;
         const 4;
         const 4294967326;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.112542647 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapMo_closure" {
     Data.Fixed.$fDataFixed_$cgmapMo_closure:
         const Data.Fixed.$fDataFixed_$cgmapMo_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapMo_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgqpQ: // global
           _sgoBL::P64 = R4;
           R4 = R5;
           _sgoBK::P64 = R3;
           R3 = _sgoBL::P64;
           R2 = _sgoBK::P64;
           call Data.Fixed.$w$cgmapMo_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapMo_info" {
     Data.Fixed.$fDataFixed_$cgmapMo_info:
         const Data.Fixed.$fDataFixed_$cgmapMo_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SgoHz_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.115987574 UTC

[section ""data" . lvl_rgoyF_closure" {
     lvl_rgoyF_closure:
         const lvl_rgoyF_info;
         const 0;
 },
 lvl_rgoyF_entry() //  []
         { []
         }
     {offset
       cgqq1: // global
           R1 = Data.Fixed.conMkFixed_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rgoyF_info" {
     lvl_rgoyF_info:
         const lvl_rgoyF_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.119258869 UTC

[section ""data" . lvl1_rgoyG_closure" {
     lvl1_rgoyG_closure:
         const lvl1_rgoyG_info;
         const 0;
 },
 lvl1_rgoyG_entry() //  []
         { []
         }
     {offset
       cgqqd: // global
           R1 = Data.Fixed.tyFixed_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rgoyG_info" {
     lvl1_rgoyG_info:
         const lvl1_rgoyG_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgoHz_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.122958036 UTC

[section ""data" . lvl2_rgoyH_closure" {
     lvl2_rgoyH_closure:
         const lvl2_rgoyH_info;
 },
 lvl2_rgoyH_entry() //  []
         { []
         }
     {offset
       cgqqp: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rgoyH_info" {
     lvl2_rgoyH_info:
         const lvl2_rgoyH_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.126220553 UTC

[section ""data" . lvl3_rgoyI_closure" {
     lvl3_rgoyI_closure:
         const lvl3_rgoyI_info;
 },
 lvl3_rgoyI_entry() //  []
         { []
         }
     {offset
       cgqqB: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rgoyI_info" {
     lvl3_rgoyI_info:
         const lvl3_rgoyI_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.129513397 UTC

[section ""data" . lvl4_rgoyJ_closure" {
     lvl4_rgoyJ_closure:
         const lvl4_rgoyJ_info;
         const 0;
 },
 lvl4_rgoyJ_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqqN: // global
           R3 = R3;
           _sgoBT::P64 = R2;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgoBT::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rgoyJ_info" {
     lvl4_rgoyJ_info:
         const lvl4_rgoyJ_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.133522984 UTC

[section ""data" . lvl5_rgoyK_closure" {
     lvl5_rgoyK_closure:
         const lvl5_rgoyK_info;
         const 0;
 },
 sat_sgoBZ_entry() //  [R1]
         { []
         }
     {offset
       cgqr2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqr3; else goto cgqr4;
       cgqr3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqr4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoBZ_info" {
     sat_sgoBZ_info:
         const sat_sgoBZ_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 lvl5_rgoyK_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqr5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgqr9; else goto cgqr8;
       cgqr9: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl5_rgoyK_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqr8: // global
           I64[Hp - 24] = sat_sgoBZ_info;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sgoBW::P64 = R3;
           R3 = Hp - 24;
           _sgoBV::P64 = R2;
           R2 = _sgoBW::P64;
           R1 = _sgoBV::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rgoyK_info" {
     lvl5_rgoyK_info:
         const lvl5_rgoyK_entry;
         const 0;
         const 1103806595086;
         const 17179869208;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.139318816 UTC

[section ""data" . lvl6_rgoyL_closure" {
     lvl6_rgoyL_closure:
         const lvl6_rgoyL_info;
         const 0;
 },
 sat_sgoC4_entry() //  [R1]
         { []
         }
     {offset
       cgqrq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqrr; else goto cgqrs;
       cgqrr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqrs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoC4_info" {
     sat_sgoC4_info:
         const sat_sgoC4_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 lvl6_rgoyL_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqrt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgqrx; else goto cgqrw;
       cgqrx: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl6_rgoyL_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqrw: // global
           I64[Hp - 24] = sat_sgoC4_info;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R3 = R3;
           _sgoC0::P64 = R2;
           R2 = Hp - 24;
           R1 = _sgoC0::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rgoyL_info" {
     lvl6_rgoyL_info:
         const lvl6_rgoyL_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.14504934 UTC

[section ""data" . lvl7_rgoyM_closure" {
     lvl7_rgoyM_closure:
         const lvl7_rgoyM_info;
         const 0;
 },
 sat_sgoC7_entry() //  [R1]
         { []
         }
     {offset
       cgqrO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqrP; else goto cgqrQ;
       cgqrP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqrQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoC7_info" {
     sat_sgoC7_info:
         const sat_sgoC7_entry;
         const 2;
         const 4294967314;
         const SgoHz_srt+320;
 },
 lvl7_rgoyM_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqrS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqrW; else goto cgqrV;
       cgqrW: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = lvl7_rgoyM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqrV: // global
           I64[Hp - 48] = sat_sgoC7_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rgoyM_info" {
     lvl7_rgoyM_info:
         const lvl7_rgoyM_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.15097096 UTC

[section ""data" . lvl8_rgoyN_closure" {
     lvl8_rgoyN_closure:
         const lvl8_rgoyN_info;
         const 0;
 },
 sat_sgoCb_entry() //  [R1]
         { []
         }
     {offset
       cgqsf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqsg; else goto cgqsh;
       cgqsg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqsh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fDataFixed2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCb_info" {
     sat_sgoCb_info:
         const sat_sgoCb_entry;
         const 1;
         const 16;
 },
 lvl8_rgoyN_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqsi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqsm; else goto cgqsl;
       cgqsm: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl8_rgoyN_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqsl: // global
           I64[Hp - 16] = sat_sgoCb_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sgoC8::P64 = R2;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgoC8::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rgoyN_info" {
     lvl8_rgoyN_info:
         const lvl8_rgoyN_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const SgoHz_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.1584132 UTC

[section ""data" . Data.Fixed.$fDataFixed_closure" {
     Data.Fixed.$fDataFixed_closure:
         const Data.Fixed.$fDataFixed_info;
         const 0;
 },
 sat_sgoCf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgqsE: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fDataFixed_$cgmapQi_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoCf_info" {
     sat_sgoCf_info:
         const sat_sgoCf_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SgoHz_srt+352;
 },
 sat_sgoCe_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgqsM: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fDataFixed_$cgfoldl_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoCe_info" {
     sat_sgoCe_info:
         const sat_sgoCe_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SgoHz_srt+416;
 },
 sat_sgoCd_entry() //  [R1]
         { []
         }
     {offset
       cgqsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqsU; else goto cgqsV;
       cgqsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqsV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fDataFixed7_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCd_info" {
     sat_sgoCd_info:
         const sat_sgoCd_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+424;
 },
 Data.Fixed.$fDataFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqsX: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cgqt1; else goto cgqt0;
       cgqt1: // global
           HpAlloc = 184;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqt0: // global
           I64[Hp - 176] = sat_sgoCf_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgoCe_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgoCd_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = lvl8_rgoyN_closure+3;
           P64[Hp - 88] = lvl_rgoyF_closure+1;
           P64[Hp - 80] = lvl1_rgoyG_closure+1;
           P64[Hp - 72] = lvl2_rgoyH_closure+2;
           P64[Hp - 64] = lvl3_rgoyI_closure+2;
           P64[Hp - 56] = lvl4_rgoyJ_closure+2;
           P64[Hp - 48] = lvl5_rgoyK_closure+4;
           P64[Hp - 40] = lvl6_rgoyL_closure+4;
           P64[Hp - 32] = lvl7_rgoyM_closure+2;
           P64[Hp - 24] = Hp - 173;
           P64[Hp - 16] = Data.Fixed.$w$cgmapM_closure+3;
           P64[Hp - 8] = Data.Fixed.$w$cgmapMp_closure+3;
           P64[Hp] = Data.Fixed.$w$cgmapMo_closure+3;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_info" {
     Data.Fixed.$fDataFixed_info:
         const Data.Fixed.$fDataFixed_entry;
         const 0;
         const 562516161724430;
         const 4294967301;
         const SgoHz_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.166708125 UTC

[section ""cstring" . Data.Fixed.$tcHasResolution3_bytes" {
     Data.Fixed.$tcHasResolution3_bytes:
         I8[] [72,97,115,82,101,115,111,108,117,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.168271674 UTC

[section ""data" . Data.Fixed.$tcHasResolution2_closure" {
     Data.Fixed.$tcHasResolution2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcHasResolution3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.169986666 UTC

[section ""data" . Data.Fixed.$tcHasResolution_closure" {
     Data.Fixed.$tcHasResolution_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcHasResolution2_closure+1;
         const Data.Fixed.$tcHasResolution1_closure+4;
         const 7410670074803796200;
         const 11622449620609036983;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.171750701 UTC

[section ""cstring" . Data.Fixed.$tcE5_bytes" {
     Data.Fixed.$tcE5_bytes:
         I8[] [69,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.173525092 UTC

[section ""data" . Data.Fixed.$tcE4_closure" {
     Data.Fixed.$tcE4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.175267688 UTC

[section ""data" . Data.Fixed.$tcE0_closure" {
     Data.Fixed.$tcE0_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE4_closure+1;
         const GHC.Types.krep$*_closure;
         const 1111589946053822622;
         const 14645449775626969178;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.176940323 UTC

[section ""cstring" . Data.Fixed.$tcE8_bytes" {
     Data.Fixed.$tcE8_bytes:
         I8[] [69,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.178606605 UTC

[section ""data" . Data.Fixed.$tcE7_closure" {
     Data.Fixed.$tcE7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.180414714 UTC

[section ""data" . Data.Fixed.$tcE1_closure" {
     Data.Fixed.$tcE1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE7_closure+1;
         const GHC.Types.krep$*_closure;
         const 17242267792727872229;
         const 10571291330004494282;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.182496542 UTC

[section ""cstring" . Data.Fixed.$tcE14_bytes" {
     Data.Fixed.$tcE14_bytes:
         I8[] [69,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.184133002 UTC

[section ""data" . Data.Fixed.$tcE13_closure" {
     Data.Fixed.$tcE13_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE14_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.186602876 UTC

[section ""data" . Data.Fixed.$tcE2_closure" {
     Data.Fixed.$tcE2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE13_closure+1;
         const GHC.Types.krep$*_closure;
         const 18184774527647329547;
         const 15895109557895358229;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.188303403 UTC

[section ""cstring" . Data.Fixed.$tcE16_bytes" {
     Data.Fixed.$tcE16_bytes:
         I8[] [69,51]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.189935831 UTC

[section ""data" . Data.Fixed.$tcE15_closure" {
     Data.Fixed.$tcE15_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE16_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.191628227 UTC

[section ""data" . Data.Fixed.$tcE3_closure" {
     Data.Fixed.$tcE3_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE15_closure+1;
         const GHC.Types.krep$*_closure;
         const 2281297682271263739;
         const 13982938170987291273;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.194048318 UTC

[section ""cstring" . Data.Fixed.$tcE18_bytes" {
     Data.Fixed.$tcE18_bytes:
         I8[] [69,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.195689991 UTC

[section ""data" . Data.Fixed.$tcE17_closure" {
     Data.Fixed.$tcE17_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE18_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.1974456 UTC

[section ""data" . Data.Fixed.$tcE6_closure" {
     Data.Fixed.$tcE6_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE17_closure+1;
         const GHC.Types.krep$*_closure;
         const 6430880657524859014;
         const 16351944333195325805;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.19906005 UTC

[section ""cstring" . Data.Fixed.$tcE20_bytes" {
     Data.Fixed.$tcE20_bytes:
         I8[] [69,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.20055531 UTC

[section ""data" . Data.Fixed.$tcE19_closure" {
     Data.Fixed.$tcE19_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE20_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.202210273 UTC

[section ""data" . Data.Fixed.$tcE9_closure" {
     Data.Fixed.$tcE9_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE19_closure+1;
         const GHC.Types.krep$*_closure;
         const 8202840314884717291;
         const 5390706447224283764;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.20393933 UTC

[section ""cstring" . Data.Fixed.$tcE11_bytes" {
     Data.Fixed.$tcE11_bytes:
         I8[] [69,49,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.205979968 UTC

[section ""data" . Data.Fixed.$tcE10_closure" {
     Data.Fixed.$tcE10_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.207590518 UTC

[section ""data" . Data.Fixed.$tcE12_closure" {
     Data.Fixed.$tcE12_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE10_closure+1;
         const GHC.Types.krep$*_closure;
         const 11177455628646877585;
         const 1804744900678580889;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.210880747 UTC

[section ""data" . Data.Fixed.div'_closure" {
     Data.Fixed.div'_closure:
         const Data.Fixed.div'_info;
         const 0;
 },
 Data.Fixed.div'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqtO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgqtW; else goto cgqtX;
       cgqtW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.div'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqtX: // global
           I64[Sp - 32] = block_cgqtM_info;
           _sgoCg::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R4;
           P64[Sp - 24] = _sgoCg::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Real.toRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.div'_info" {
     Data.Fixed.div'_info:
         const Data.Fixed.div'_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SgoHz_srt+464;
 },
 _cgqtM() //  [R1]
         { []
         }
     {offset
       cgqtM: // global
           I64[Sp] = block_cgqtR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqtM_info" {
     block_cgqtM_info:
         const _cgqtM;
         const 3;
         const 12884901918;
         const SgoHz_srt+464;
 },
 _cgqtR() //  [R1]
         { []
         }
     {offset
       cgqtR: // global
           _sgoCm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqtV_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sgoCm::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqtR_info" {
     block_cgqtR_info:
         const _cgqtR;
         const 3;
         const 12884901918;
         const SgoHz_srt+464;
 },
 _cgqtV() //  [R1, R2]
         { []
         }
     {offset
       cgqtV: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqtV_info" {
     block_cgqtV_info:
         const _cgqtV;
         const 130;
         const 4294967326;
         const SgoHz_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.223357912 UTC

[section ""data" . Data.Fixed.$wdivMod'_closure" {
     Data.Fixed.$wdivMod'_closure:
         const Data.Fixed.$wdivMod'_info;
         const 0;
 },
 f_sgoCx_entry() //  [R1]
         { []
         }
     {offset
       cgqur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqus; else goto cgqut;
       cgqus: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.div'_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgoCx_info" {
     f_sgoCx_info:
         const f_sgoCx_entry;
         const 4;
         const 4294967311;
         const SgoHz_srt+480;
 },
 sat_sgoCz_entry() //  [R1]
         { []
         }
     {offset
       cgquO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgquP; else goto cgquQ;
       cgquP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgquQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCz_info" {
     sat_sgoCz_info:
         const sat_sgoCz_entry;
         const 2;
         const 18;
 },
 sat_sgoCA_entry() //  [R1]
         { []
         }
     {offset
       cgquR: // global
           _sgoCA::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgquS; else goto cgquT;
       cgquT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgquV; else goto cgquU;
       cgquV: // global
           HpAlloc = 32;
           goto cgquS;
       cgquS: // global
           R1 = _sgoCA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgquU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoCA::P64;
           _sgoCu::P64 = P64[_sgoCA::P64 + 16];
           _sgoCx::P64 = P64[_sgoCA::P64 + 24];
           _sgoCy::P64 = P64[_sgoCA::P64 + 32];
           I64[Hp - 24] = sat_sgoCz_info;
           P64[Hp - 8] = _sgoCu::P64;
           P64[Hp] = _sgoCx::P64;
           R2 = _sgoCy::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCA_info" {
     sat_sgoCA_info:
         const sat_sgoCA_entry;
         const 3;
         const 15;
 },
 sat_sgoCB_entry() //  [R1]
         { []
         }
     {offset
       cgquW: // global
           _sgoCB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgquX; else goto cgquY;
       cgquY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgqv0; else goto cgquZ;
       cgqv0: // global
           HpAlloc = 40;
           goto cgquX;
       cgquX: // global
           R1 = _sgoCB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgquZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoCB::P64;
           _sgoCu::P64 = P64[_sgoCB::P64 + 16];
           _sgoCw::P64 = P64[_sgoCB::P64 + 24];
           _sgoCx::P64 = P64[_sgoCB::P64 + 32];
           _sgoCy::P64 = P64[_sgoCB::P64 + 40];
           I64[Hp - 32] = sat_sgoCA_info;
           P64[Hp - 16] = _sgoCu::P64;
           P64[Hp - 8] = _sgoCx::P64;
           P64[Hp] = _sgoCy::P64;
           R2 = _sgoCy::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgoCw::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCB_info" {
     sat_sgoCB_info:
         const sat_sgoCB_entry;
         const 4;
         const 15;
 },
 sat_sgoCC_entry() //  [R1]
         { []
         }
     {offset
       cgqv1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgqv2; else goto cgqv3;
       cgqv2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqv3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgquy_info;
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 56;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCC_info" {
     sat_sgoCC_info:
         const sat_sgoCC_entry;
         const 5;
         const 15;
 },
 _cgquy() //  [R1]
         { []
         }
     {offset
       cgquy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgqv6; else goto cgqv5;
       cgqv6: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgqv5: // global
           I64[Hp - 40] = sat_sgoCB_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           _sgoCv::P64 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _sgoCv::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgquy_info" {
     block_cgquy_info:
         const _cgquy;
         const 4;
         const 30;
 },
 Data.Fixed.$wdivMod'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqv7: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgqvb; else goto cgqva;
       cgqvb: // global
           HpAlloc = 104;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$wdivMod'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqva: // global
           I64[Hp - 96] = f_sgoCx_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = sat_sgoCC_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           _cgqun::P64 = Hp - 96;
           P64[Hp] = _cgqun::P64;
           R2 = Hp - 48;
           R1 = _cgqun::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$wdivMod'_info" {
     Data.Fixed.$wdivMod'_info:
         const Data.Fixed.$wdivMod'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgoHz_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.238385576 UTC

[section ""data" . Data.Fixed.divMod'_closure" {
     Data.Fixed.divMod'_closure:
         const Data.Fixed.divMod'_info;
         const 0;
 },
 Data.Fixed.divMod'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgqvW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgqvX; else goto cgqvY;
       cgqvX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.divMod'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqvY: // global
           I64[Sp - 8] = block_cgqvT_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Fixed.$wdivMod'_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.divMod'_info" {
     Data.Fixed.divMod'_info:
         const Data.Fixed.divMod'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgoHz_srt+488;
 },
 _cgqvT() //  [R1, R2]
         { []
         }
     {offset
       cgqvT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqw1; else goto cgqw0;
       cgqw1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqw0: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqvT_info" {
     block_cgqvT_info:
         const _cgqvT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.245918965 UTC

[section ""data" . Data.Fixed.mod'_closure" {
     Data.Fixed.mod'_closure:
         const Data.Fixed.mod'_info;
         const 0;
 },
 sat_sgoCO_entry() //  [R1]
         { []
         }
     {offset
       cgqwv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqww; else goto cgqwx;
       cgqww: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqwx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 24];
           R3 = GHC.Real.$fIntegralInteger_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.div'_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCO_info" {
     sat_sgoCO_info:
         const sat_sgoCO_entry;
         const 3;
         const 38654705679;
         const SgoHz_srt+480;
 },
 sat_sgoCP_entry() //  [R1]
         { []
         }
     {offset
       cgqwy: // global
           _sgoCP::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgqwz; else goto cgqwA;
       cgqwA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgqwC; else goto cgqwB;
       cgqwC: // global
           HpAlloc = 40;
           goto cgqwz;
       cgqwz: // global
           R1 = _sgoCP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqwB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoCP::P64;
           _sgoCK::P64 = P64[_sgoCP::P64 + 16];
           _sgoCL::P64 = P64[_sgoCP::P64 + 24];
           _sgoCM::P64 = P64[_sgoCP::P64 + 32];
           _sgoCN::P64 = P64[_sgoCP::P64 + 40];
           I64[Hp - 32] = sat_sgoCO_info;
           P64[Hp - 16] = _sgoCK::P64;
           P64[Hp - 8] = _sgoCL::P64;
           P64[Hp] = _sgoCM::P64;
           R2 = _sgoCN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCP_info" {
     sat_sgoCP_info:
         const sat_sgoCP_entry;
         const 4;
         const 38654705679;
         const SgoHz_srt+480;
 },
 sat_sgoCQ_entry() //  [R1]
         { []
         }
     {offset
       cgqwD: // global
           _sgoCQ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqwE; else goto cgqwF;
       cgqwF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgqwH; else goto cgqwG;
       cgqwH: // global
           HpAlloc = 48;
           goto cgqwE;
       cgqwE: // global
           R1 = _sgoCQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqwG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoCQ::P64;
           _sgoCK::P64 = P64[_sgoCQ::P64 + 16];
           _sgoCL::P64 = P64[_sgoCQ::P64 + 24];
           _sgoCM::P64 = P64[_sgoCQ::P64 + 32];
           _sgoCN::P64 = P64[_sgoCQ::P64 + 40];
           I64[Hp - 40] = sat_sgoCP_info;
           P64[Hp - 24] = _sgoCK::P64;
           P64[Hp - 16] = _sgoCL::P64;
           P64[Hp - 8] = _sgoCM::P64;
           P64[Hp] = _sgoCN::P64;
           R2 = _sgoCN::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _sgoCM::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoCQ_info" {
     sat_sgoCQ_info:
         const sat_sgoCQ_entry;
         const 4;
         const 38654705679;
         const SgoHz_srt+480;
 },
 Data.Fixed.mod'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqwI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqwJ; else goto cgqwK;
       cgqwJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.mod'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqwK: // global
           I64[Sp - 32] = block_cgqwf_info;
           _sgoCK::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgoCK::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.mod'_info" {
     Data.Fixed.mod'_info:
         const Data.Fixed.mod'_entry;
         const 0;
         const 107374182414;
         const 12884901911;
         const SgoHz_srt+480;
 },
 _cgqwf() //  [R1]
         { []
         }
     {offset
       cgqwf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgqwN; else goto cgqwM;
       cgqwN: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqwM: // global
           I64[Hp - 40] = sat_sgoCQ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqwf_info" {
     block_cgqwf_info:
         const _cgqwf;
         const 3;
         const 38654705694;
         const SgoHz_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.25829867 UTC

[section ""data" . Data.Fixed.$fFractionalFixed2_closure" {
     Data.Fixed.$fFractionalFixed2_closure:
         const Data.Fixed.$fFractionalFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fFractionalFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgqxk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqxl; else goto cgqxm;
       cgqxl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqxm: // global
           (_cgqxh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqxh::I64 == 0) goto cgqxj; else goto cgqxi;
       cgqxj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqxi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqxh::I64;
           R2 = $dIP3_rgoyz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed2_info" {
     Data.Fixed.$fFractionalFixed2_info:
         const Data.Fixed.$fFractionalFixed2_entry;
         const 0;
         const 12884901909;
         const SgoHz_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.263161285 UTC

[section ""data" . Data.Fixed.$w$cfromRational_closure" {
     Data.Fixed.$w$cfromRational_closure:
         const Data.Fixed.$w$cfromRational_info;
         const 0;
 },
 Data.Fixed.$w$cfromRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqxA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqxM; else goto cgqxN;
       cgqxM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$w$cfromRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqxN: // global
           I64[Sp - 24] = block_cgqxy_info;
           _sgoCR::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgoCR::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cfromRational_info" {
     Data.Fixed.$w$cfromRational_info:
         const Data.Fixed.$w$cfromRational_entry;
         const 0;
         const 34157874905102;
         const 12884901911;
         const SgoHz_srt+472;
 },
 _cgqxy() //  [R1]
         { []
         }
     {offset
       cgqxy: // global
           I64[Sp] = block_cgqxD_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqxy_info" {
     block_cgqxy_info:
         const _cgqxy;
         const 2;
         const 7769595838494;
         const SgoHz_srt+472;
 },
 _cgqxD() //  [R1]
         { []
         }
     {offset
       cgqxD: // global
           _sgoCS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqxH_info;
           R3 = P64[Sp + 16];
           R2 = _sgoCS::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqxD_info" {
     block_cgqxD_info:
         const _cgqxD;
         const 2;
         const 3371549327390;
         const SgoHz_srt+472;
 },
 _cgqxH() //  [R1]
         { []
         }
     {offset
       cgqxH: // global
           _sgoCW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqxL_info;
           R3 = _sgoCW::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqxH_info" {
     block_cgqxH_info:
         const _cgqxH;
         const 1;
         const 2272037699614;
         const SgoHz_srt+472;
 },
 _cgqxL() //  [R1, R2]
         { []
         }
     {offset
       cgqxL: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqxL_info" {
     block_cgqxL_info:
         const _cgqxL;
         const 0;
         const 73014444062;
         const SgoHz_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.273284512 UTC

[section ""data" . Data.Fixed.$fFractionalFixed1_closure" {
     Data.Fixed.$fFractionalFixed1_closure:
         const Data.Fixed.$fFractionalFixed1_info;
         const 0;
 },
 Data.Fixed.$fFractionalFixed1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqyh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqyi; else goto cgqyj;
       cgqyi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqyj: // global
           I64[Sp - 16] = block_cgqye_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugqyn; else goto cgqyf;
       ugqyn: // global
           call _cgqye(R1) args: 0, res: 0, upd: 0;
       cgqyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed1_info" {
     Data.Fixed.$fFractionalFixed1_info:
         const Data.Fixed.$fFractionalFixed1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SgoHz_srt+560;
 },
 _cgqye() //  [R1]
         { []
         }
     {offset
       cgqye: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Fixed.$w$cfromRational_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqye_info" {
     block_cgqye_info:
         const _cgqye;
         const 1;
         const 4294967326;
         const SgoHz_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.279271482 UTC

[section ""data" . Data.Fixed.$fRealFixed_$ctoRational_closure" {
     Data.Fixed.$fRealFixed_$ctoRational_closure:
         const Data.Fixed.$fRealFixed_$ctoRational_info;
         const 0;
 },
 Data.Fixed.$fRealFixed_$ctoRational_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqyD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqyJ; else goto cgqyK;
       cgqyJ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFixed_$ctoRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqyK: // global
           I64[Sp - 16] = block_cgqyB_info;
           _sgoD5::P64 = R2;
           R2 = R3;
           R1 = _sgoD5::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFixed_$ctoRational_info" {
     Data.Fixed.$fRealFixed_$ctoRational_info:
         const Data.Fixed.$fRealFixed_$ctoRational_entry;
         const 0;
         const 149537876344846;
         const 8589934607;
         const SgoHz_srt+464;
 },
 _cgqyB() //  [R1]
         { []
         }
     {offset
       cgqyB: // global
           _sgoD6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqyG_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _sgoD6::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqyB_info" {
     block_cgqyB_info:
         const _cgqyB;
         const 1;
         const 8800387989534;
         const SgoHz_srt+464;
 },
 _cgqyG() //  [R1, R2]
         { []
         }
     {offset
       cgqyG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqyO; else goto cgqyN;
       cgqyO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqyN: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqyG_info" {
     block_cgqyG_info:
         const _cgqyG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.287504303 UTC

[section ""data" . Data.Fixed.$fFractionalFixed3_closure" {
     Data.Fixed.$fFractionalFixed3_closure:
         const Data.Fixed.$fFractionalFixed3_info;
         const 0;
 },
 section ""relreadonly" . ugqzt_srtd" {
     ugqzt_srtd:
         const SgoHz_srt+40;
         const 72;
         const 4611686018427387905;
         const 224;
 },
 Data.Fixed.$fFractionalFixed3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqza: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqzb; else goto cgqzc;
       cgqzb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqzc: // global
           I64[Sp - 32] = block_cgqz5_info;
           _sgoDc::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgoDb::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgoDb::P64;
           P64[Sp - 16] = _sgoDc::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed3_info" {
     Data.Fixed.$fFractionalFixed3_info:
         const Data.Fixed.$fFractionalFixed3_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugqzt_srtd;
 },
 _cgqz5() //  [R1]
         { []
         }
     {offset
       cgqz5: // global
           if (R1 == 1) goto cgqz9; else goto cgqz8;
       cgqz9: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqz8: // global
           _sgoDb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqzf_info;
           R2 = P64[Sp + 16];
           R1 = _sgoDb::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqz5_info" {
     block_cgqz5_info:
         const _cgqz5;
         const 3;
         const 1653562408990;
         const SgoHz_srt+536;
 },
 _cgqzf() //  [R1]
         { []
         }
     {offset
       cgqzf: // global
           _sgoDc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqzj_info;
           R3 = R1;
           R2 = _sgoDc::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqzf_info" {
     block_cgqzf_info:
         const _cgqzf;
         const 2;
         const 554050781214;
         const SgoHz_srt+536;
 },
 _cgqzj() //  [R1]
         { []
         }
     {offset
       cgqzj: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqzj_info" {
     block_cgqzj_info:
         const _cgqzj;
         const 1;
         const 4294967326;
         const SgoHz_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.297898058 UTC

[section ""data" . Data.Fixed.$fFractionalFixed_$crecip_closure" {
     Data.Fixed.$fFractionalFixed_$crecip_closure:
         const Data.Fixed.$fFractionalFixed_$crecip_info;
         const 0;
 },
 section ""relreadonly" . ugqAb_srtd" {
     ugqAb_srtd:
         const SgoHz_srt+40;
         const 73;
         const 4611686018427387905;
         const 352;
 },
 Data.Fixed.$fFractionalFixed_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqzS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqzT; else goto cgqzU;
       cgqzT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqzU: // global
           I64[Sp - 24] = block_cgqzN_info;
           _sgoDi::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgoDh::P64 = R2;
           R2 = _sgoDi::P64;
           P64[Sp - 16] = _sgoDh::P64;
           P64[Sp - 8] = _sgoDi::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed_$crecip_info" {
     Data.Fixed.$fFractionalFixed_$crecip_info:
         const Data.Fixed.$fFractionalFixed_$crecip_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugqAb_srtd;
 },
 _cgqzN() //  [R1]
         { []
         }
     {offset
       cgqzN: // global
           if (R1 == 1) goto cgqzR; else goto cgqzQ;
       cgqzR: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqzQ: // global
           _sgoDh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqzX_info;
           R2 = P64[Sp + 16];
           R1 = _sgoDh::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqzN_info" {
     block_cgqzN_info:
         const _cgqzN;
         const 2;
         const 1653562408990;
         const SgoHz_srt+536;
 },
 _cgqzX() //  [R1]
         { []
         }
     {offset
       cgqzX: // global
           I64[Sp] = block_cgqA1_info;
           R3 = R1;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqzX_info" {
     block_cgqzX_info:
         const _cgqzX;
         const 1;
         const 554050781214;
         const SgoHz_srt+536;
 },
 _cgqA1() //  [R1]
         { []
         }
     {offset
       cgqA1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqA1_info" {
     block_cgqA1_info:
         const _cgqA1;
         const 1;
         const 4294967326;
         const SgoHz_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.307834819 UTC

[section ""data" . Data.Fixed.$fNumFixed_$c*_closure" {
     Data.Fixed.$fNumFixed_$c*_closure:
         const Data.Fixed.$fNumFixed_$c*_info;
         const 0;
 },
 section ""relreadonly" . ugqAT_srtd" {
     ugqAT_srtd:
         const SgoHz_srt+40;
         const 74;
         const 4611686018427387905;
         const 608;
 },
 Data.Fixed.$fNumFixed_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqAx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqAy; else goto cgqAz;
       cgqAy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqAz: // global
           I64[Sp - 24] = block_cgqAv_info;
           _sgoDm::P64 = R2;
           R2 = R3;
           R1 = _sgoDm::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed_$c*_info" {
     Data.Fixed.$fNumFixed_$c*_info:
         const Data.Fixed.$fNumFixed_$c*_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugqAT_srtd;
 },
 section ""relreadonly" . ugqAU_srtd" {
     ugqAU_srtd:
         const SgoHz_srt+40;
         const 71;
         const 4611686018427387905;
         const 96;
 },
 _cgqAv() //  [R1]
         { []
         }
     {offset
       cgqAv: // global
           I64[Sp - 8] = block_cgqAC_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqAv_info" {
     block_cgqAv_info:
         const _cgqAv;
         const 2;
         const 18446744069414584350;
         const ugqAU_srtd;
 },
 _cgqAC() //  [R1]
         { []
         }
     {offset
       cgqAC: // global
           if (R1 == 1) goto cgqAS; else goto cgqAK;
       cgqAS: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqAK: // global
           I64[Sp] = block_cgqAH_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqAC_info" {
     block_cgqAC_info:
         const _cgqAC;
         const 3;
         const 1653562408990;
         const SgoHz_srt+536;
 },
 _cgqAH() //  [R1]
         { []
         }
     {offset
       cgqAH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqAH_info" {
     block_cgqAH_info:
         const _cgqAH;
         const 387;
         const 4294967326;
         const SgoHz_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.317569566 UTC

[section ""data" . Data.Fixed.$fNumFixed1_closure" {
     Data.Fixed.$fNumFixed1_closure:
         const Data.Fixed.$fNumFixed1_info;
         const 0;
 },
 Data.Fixed.$fNumFixed1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqBh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqBi; else goto cgqBj;
       cgqBi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqBj: // global
           I64[Sp - 16] = block_cgqBf_info;
           _sgoDs::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgoDs::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed1_info" {
     Data.Fixed.$fNumFixed1_info:
         const Data.Fixed.$fNumFixed1_entry;
         const 0;
         const 17665200488462;
         const 8589934607;
         const SgoHz_srt+536;
 },
 _cgqBf() //  [R1]
         { []
         }
     {offset
       cgqBf: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqBf_info" {
     block_cgqBf_info:
         const _cgqBf;
         const 1;
         const 4294967326;
         const SgoHz_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.32318229 UTC

[section ""data" . Data.Fixed.$fNumFixed2_closure" {
     Data.Fixed.$fNumFixed2_closure:
         const Data.Fixed.$fNumFixed2_info;
         const 0;
 },
 Data.Fixed.$fNumFixed2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgqBB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqBF; else goto cgqBG;
       cgqBF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqBG: // global
           I64[Sp - 16] = block_cgqBz_info;
           _sgoDv::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgoDv::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed2_info" {
     Data.Fixed.$fNumFixed2_info:
         const Data.Fixed.$fNumFixed2_entry;
         const 0;
         const 35257386532878;
         const 8589934607;
         const SgoHz_srt+536;
 },
 _cgqBz() //  [R1]
         { []
         }
     {offset
       cgqBz: // global
           I64[Sp] = block_cgqBE_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqBz_info" {
     block_cgqBz_info:
         const _cgqBz;
         const 1;
         const 4294967326;
         const SgoHz_srt+536;
 },
 _cgqBE() //  [R1]
         { []
         }
     {offset
       cgqBE: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqBE_info" {
     block_cgqBE_info:
         const _cgqBE;
         const 1;
         const 4294967326;
         const SgoHz_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.331415507 UTC

[section ""data" . Data.Fixed.$fNumFixed_closure" {
     Data.Fixed.$fNumFixed_closure:
         const Data.Fixed.$fNumFixed_info;
         const 0;
 },
 sat_sgoDC_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqC6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fNumFixed1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDC_info" {
     sat_sgoDC_info:
         const sat_sgoDC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+632;
 },
 sat_sgoDB_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqCe: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fNumFixed2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDB_info" {
     sat_sgoDB_info:
         const sat_sgoDB_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+640;
 },
 sat_sgoDA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqCm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fNumFixed_$c*_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDA_info" {
     sat_sgoDA_info:
         const sat_sgoDA_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+624;
 },
 section ""relreadonly" . ugqCv_srtd" {
     ugqCv_srtd:
         const SgoHz_srt+16;
         const 80;
         const 3;
         const 61440;
 },
 Data.Fixed.$fNumFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqCq: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgqCu; else goto cgqCt;
       cgqCu: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqCt: // global
           I64[Hp - 104] = sat_sgoDC_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgoDB_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgoDA_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = GHC.Integer.Type.plusInteger_closure+2;
           P64[Hp - 40] = GHC.Integer.Type.minusInteger_closure+2;
           P64[Hp - 32] = Hp - 70;
           P64[Hp - 24] = GHC.Integer.Type.negateInteger_closure+1;
           P64[Hp - 16] = GHC.Integer.Type.absInteger_closure+1;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed_info" {
     Data.Fixed.$fNumFixed_info:
         const Data.Fixed.$fNumFixed_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugqCv_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.342293326 UTC

[section ""data" . Data.Fixed.$fFractionalFixed_closure" {
     Data.Fixed.$fFractionalFixed_closure:
         const Data.Fixed.$fFractionalFixed_info;
         const 0;
 },
 sat_sgoDH_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqCX: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fFractionalFixed1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDH_info" {
     sat_sgoDH_info:
         const sat_sgoDH_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+576;
 },
 sat_sgoDG_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqD5: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fFractionalFixed_$crecip_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDG_info" {
     sat_sgoDG_info:
         const sat_sgoDG_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+616;
 },
 sat_sgoDF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqDd: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fFractionalFixed3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoDF_info" {
     sat_sgoDF_info:
         const sat_sgoDF_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+608;
 },
 sat_sgoDE_entry() //  [R1]
         { []
         }
     {offset
       cgqDk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqDl; else goto cgqDm;
       cgqDl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqDm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoDE_info" {
     sat_sgoDE_info:
         const sat_sgoDE_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+648;
 },
 Data.Fixed.$fFractionalFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqDo: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgqDs; else goto cgqDr;
       cgqDs: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqDr: // global
           I64[Hp - 104] = sat_sgoDH_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgoDG_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgoDF_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgoDE_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed_info" {
     Data.Fixed.$fFractionalFixed_info:
         const Data.Fixed.$fFractionalFixed_entry;
         const 0;
         const 6807523164174;
         const 4294967301;
         const SgoHz_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.352322992 UTC

[section ""data" . Data.Fixed.$fReadFixed2_closure" {
     Data.Fixed.$fReadFixed2_closure:
         const Data.Fixed.$fReadFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fReadFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgqDY: // global
           _rgoxK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgqE1; else goto cgqE2;
       cgqE2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgqE4; else goto cgqE3;
       cgqE4: // global
           HpAlloc = 16;
           goto cgqE1;
       cgqE1: // global
           R1 = _rgoxK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqE3: // global
           (_cgqDS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgoxK::P64);
           if (_cgqDS::I64 == 0) goto cgqDU; else goto cgqDT;
       cgqDU: // global
           call (I64[I64[_rgoxK::P64]])() args: 8, res: 0, upd: 8;
       cgqDT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqDS::I64;
           (_cgqDV::F64) = call MO_F64_Log(10.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgqDV::F64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed2_info" {
     Data.Fixed.$fReadFixed2_info:
         const Data.Fixed.$fReadFixed2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.3562121 UTC

[section ""data" . lvl9_rgoyO_closure" {
     lvl9_rgoyO_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.358479636 UTC

[section ""data" . lvl10_rgoyP_closure" {
     lvl10_rgoyP_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.360090391 UTC

[section ""data" . lvl11_rgoyQ_closure" {
     lvl11_rgoyQ_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.362400086 UTC

[section ""data" . lvl12_rgoyR_closure" {
     lvl12_rgoyR_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_rgoyp_closure;
         const loc1_rgoyq_closure;
         const loc3_rgoys_closure;
         const lvl9_rgoyO_closure+1;
         const lvl10_rgoyP_closure+1;
         const lvl9_rgoyO_closure+1;
         const lvl11_rgoyQ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.36422121 UTC

[section ""data" . lvl13_rgoyS_closure" {
     lvl13_rgoyS_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rgoyx_closure;
         const lvl12_rgoyR_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.366617952 UTC

[section ""data" . Data.Fixed.$fReadFixed3_closure" {
     Data.Fixed.$fReadFixed3_closure:
         const Data.Fixed.$fReadFixed3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fReadFixed3_entry() //  [R1]
         { []
         }
     {offset
       cgqEp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqEq; else goto cgqEr;
       cgqEq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqEr: // global
           (_cgqEm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgqEm::I64 == 0) goto cgqEo; else goto cgqEn;
       cgqEo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgqEn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgqEm::I64;
           R2 = lvl13_rgoyS_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed3_info" {
     Data.Fixed.$fReadFixed3_info:
         const Data.Fixed.$fReadFixed3_entry;
         const 0;
         const 1125904201809941;
         const SgoHz_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.379151406 UTC

[section ""data" . Data.Fixed.$fReadFixed1_closure" {
     Data.Fixed.$fReadFixed1_closure:
         const Data.Fixed.$fReadFixed1_info;
         const 0;
 },
 lvl17_sgoDK_entry() //  [R1]
         { []
         }
     {offset
       cgqEH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqEI; else goto cgqEJ;
       cgqEI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqEJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgoDK_info" {
     lvl17_sgoDK_info:
         const lvl17_sgoDK_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+568;
 },
 e_sgoDL_entry() //  [R1]
         { []
         }
     {offset
       cgqEQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqF2; else goto cgqF3;
       cgqF2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqF3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgqEO_info;
           R2 = Data.Fixed.$fReadFixed3_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . e_sgoDL_info" {
     e_sgoDL_info:
         const e_sgoDL_entry;
         const 1;
         const 133143986192;
         const SgoHz_srt+672;
 },
 _cgqEO() //  [R1]
         { []
         }
     {offset
       cgqEO: // global
           I64[Sp] = block_cgqET_info;
           R2 = R1;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqEO_info" {
     block_cgqEO_info:
         const _cgqEO;
         const 0;
         const 115964117022;
         const SgoHz_srt+672;
 },
 _cgqET() //  [D1]
         { []
         }
     {offset
       cgqET: // global
           _cgqEY::F64 = D1;
           (_cgqEX::F64) = call MO_F64_Log(_cgqEY::F64);
           I64[Sp - 8] = block_cgqF1_info;
           R1 = Data.Fixed.$fReadFixed2_closure;
           F64[Sp] = _cgqEX::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqG6; else goto cgqF6;
       ugqG6: // global
           call _cgqF1(R1) args: 0, res: 0, upd: 0;
       cgqF6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqET_info" {
     block_cgqET_info:
         const _cgqET;
         const 0;
         const 115964117022;
         const SgoHz_srt+672;
 },
 _cgqF1() //  [R1]
         { []
         }
     {offset
       cgqF1: // global
           _sgoDS::F64 = %MO_F_Neg_W64(%MO_F_Quot_W64(F64[Sp + 8],
                                                      F64[R1 + 7]));
           I64[Sp + 8] = block_cgqFh_info;
           D1 = _sgoDS::F64;
           Sp = Sp + 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqF1_info" {
     block_cgqF1_info:
         const _cgqF1;
         const 65;
         const 107374182430;
         const SgoHz_srt+672;
 },
 _cgqFh() //  [R1, R2]
         { []
         }
     {offset
       cgqFh: // global
           if (%MO_S_Ge_W64(R2, 0)) goto cgqFr; else goto cgqG5;
       cgqFr: // global
           I64[Sp] = block_cgqFp_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       cgqG5: // global
           _sgoDY::I64 = -R2;
           if (%MO_S_Le_W64(_sgoDY::I64, 52)) goto cgqFM; else goto cgqFU;
       cgqFM: // global
           I64[Sp - 8] = block_cgqFD_info;
           R2 = R1;
           I64[Sp] = _sgoDY::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
       cgqFU: // global
           I64[Sp] = block_cgqFT_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqFh_info" {
     block_cgqFh_info:
         const _cgqFh;
         const 0;
         const 12884901918;
         const SgoHz_srt+696;
 },
 _cgqFp() //  [R1]
         { []
         }
     {offset
       cgqFp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqFp_info" {
     block_cgqFp_info:
         const _cgqFp;
         const 0;
         const 30;
 },
 _cgqFD() //  [R1]
         { []
         }
     {offset
       cgqFD: // global
           _sgoE1::I64 = %MO_S_Shr_W64(R1, I64[Sp + 8]);
           I64[Sp + 8] = block_cgqFK_info;
           R2 = _sgoE1::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqFD_info" {
     block_cgqFD_info:
         const _cgqFD;
         const 65;
         const 30;
 },
 _cgqFK() //  [R1]
         { []
         }
     {offset
       cgqFK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqFK_info" {
     block_cgqFK_info:
         const _cgqFK;
         const 0;
         const 30;
 },
 _cgqFT() //  [R1]
         { []
         }
     {offset
       cgqFT: // global
           if (R1 == 1) goto cgqG4; else goto cgqG0;
       cgqG4: // global
           R1 = Data.Fixed.$fEnumFixed2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cgqG0: // global
           R1 = Data.Fixed.$fEnumFixed1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqFT_info" {
     block_cgqFT_info:
         const _cgqFT;
         const 0;
         const 12884901918;
         const SgoHz_srt+696;
 },
 section ""relreadonly" . ugqI0_srtd" {
     ugqI0_srtd:
         const SgoHz_srt+120;
         const 57;
         const 76561193665298433;
 },
 sat_sgoE7_entry() //  [R1]
         { []
         }
     {offset
       cgqGh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqGi; else goto cgqGj;
       cgqGi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqGj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgqGf_info;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoE7_info" {
     sat_sgoE7_info:
         const sat_sgoE7_entry;
         const 1;
         const 18446744069414584336;
         const ugqI0_srtd;
 },
 section ""relreadonly" . ugqI1_srtd" {
     ugqI1_srtd:
         const SgoHz_srt+120;
         const 53;
         const 4503599627370497;
 },
 _cgqGf() //  [R1]
         { []
         }
     {offset
       cgqGf: // global
           R3 = R1;
           R2 = Data.Fixed.$fHasResolutionE4_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqGf_info" {
     block_cgqGf_info:
         const _cgqGf;
         const 0;
         const 18446744069414584350;
         const ugqI1_srtd;
 },
 sat_sgoE5_entry() //  [R1]
         { []
         }
     {offset
       cgqGr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqGs; else goto cgqGt;
       cgqGs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoE5_info" {
     sat_sgoE5_info:
         const sat_sgoE5_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+648;
 },
 section ""relreadonly" . ugqI2_srtd" {
     ugqI2_srtd:
         const SgoHz_srt+120;
         const 75;
         const 76842668642009089;
         const 1028;
 },
 lvl18_sgoE4_entry() //  [R1]
         { []
         }
     {offset
       cgqGu: // global
           _sgoE4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgqGv; else goto cgqGw;
       cgqGw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgqGy; else goto cgqGx;
       cgqGy: // global
           HpAlloc = 48;
           goto cgqGv;
       cgqGv: // global
           R1 = _sgoE4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoE4::P64;
           _sgoDJ::P64 = P64[_sgoE4::P64 + 16];
           _sgoDL::P64 = P64[_sgoE4::P64 + 24];
           I64[Hp - 40] = sat_sgoE7_info;
           P64[Hp - 24] = _sgoDJ::P64;
           I64[Hp - 16] = sat_sgoE5_info;
           P64[Hp] = _sgoDJ::P64;
           R5 = _sgoDL::P64;
           R4 = Hp - 40;
           R3 = GHC.Real.$fIntegralInteger_closure;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgoE4_info" {
     lvl18_sgoE4_info:
         const lvl18_sgoE4_entry;
         const 2;
         const 18446744069414584338;
         const ugqI2_srtd;
 },
 section ""relreadonly" . ugqI3_srtd" {
     ugqI3_srtd:
         const SgoHz_srt+16;
         const 75;
         const 1;
         const 1026;
 },
 x_sgoEh_entry() //  [R1]
         { []
         }
     {offset
       cgqH0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgqH8; else goto cgqH9;
       cgqH8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqH9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgqGY_info;
           _sgoDK::P64 = P64[R1 + 24];
           R3 = _sgoDK::P64;
           R2 = P64[R1 + 48];
           P64[Sp - 48] = P64[R1 + 16];
           P64[Sp - 40] = _sgoDK::P64;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 56;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_sgoEh_info" {
     x_sgoEh_info:
         const x_sgoEh_entry;
         const 5;
         const 18446744069414584335;
         const ugqI3_srtd;
 },
 section ""relreadonly" . ugqI4_srtd" {
     ugqI4_srtd:
         const SgoHz_srt+16;
         const 75;
         const 1;
         const 1026;
 },
 _cgqGY() //  [R1]
         { []
         }
     {offset
       cgqGY: // global
           _sgoDJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqH3_info;
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = _sgoDJ::P64;
           Sp = Sp + 8;
           call Data.Fixed.$fFractionalFixed3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqGY_info" {
     block_cgqGY_info:
         const _cgqGY;
         const 4;
         const 18446744069414584350;
         const ugqI4_srtd;
 },
 section ""relreadonly" . ugqI5_srtd" {
     ugqI5_srtd:
         const SgoHz_srt+16;
         const 66;
         const 1;
         const 2;
 },
 _cgqH3() //  [R1]
         { []
         }
     {offset
       cgqH3: // global
           I64[Sp + 16] = block_cgqH7_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqH3_info" {
     block_cgqH3_info:
         const _cgqH3;
         const 131;
         const 18446744069414584350;
         const ugqI5_srtd;
 },
 _cgqH7() //  [R1]
         { []
         }
     {offset
       cgqH7: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqH7_info" {
     block_cgqH7_info:
         const _cgqH7;
         const 1;
         const 4294967326;
         const SgoHz_srt+720;
 },
 sat_sgoEn_entry() //  [R1, R3]
         { []
         }
     {offset
       cgqHl: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEn_info" {
     sat_sgoEn_info:
         const sat_sgoEn_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgoEo_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqHs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqHt; else goto cgqHu;
       cgqHt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqHu: // global
           I64[Sp - 40] = block_cgqGE_info;
           _sgoDJ::P64 = P64[R1 + 7];
           _sgoDK::P64 = P64[R1 + 15];
           _sgoDL::P64 = P64[R1 + 23];
           _sgoE4::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgoDJ::P64;
           P64[Sp - 24] = _sgoDK::P64;
           P64[Sp - 16] = _sgoDL::P64;
           P64[Sp - 8] = _sgoE4::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugqHN; else goto cgqGF;
       ugqHN: // global
           call _cgqGE(R1) args: 0, res: 0, upd: 0;
       cgqGF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEo_info" {
     sat_sgoEo_info:
         const sat_sgoEo_entry;
         const 4;
         const 108088594375114760;
         const 4294967301;
         const SgoHz_srt+536;
 },
 _cgqGE() //  [R1]
         { []
         }
     {offset
       cgqGE: // global
           if (R1 & 7 == 6) goto cgqHq; else goto ugqHI;
       cgqHq: // global
           I64[Sp] = block_cgqGK_info;
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 24];
           call Text.Read.Lex.numberToFixed_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       ugqHI: // global
           Sp = Sp + 40;
           call _cgqHB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqGE_info" {
     block_cgqGE_info:
         const _cgqGE;
         const 4;
         const 108088594375114782;
         const SgoHz_srt+536;
 },
 _cgqGK() //  [R1]
         { []
         }
     {offset
       cgqGK: // global
           if (R1 & 7 == 1) goto ugqHJ; else goto cgqHD;
       ugqHJ: // global
           Sp = Sp + 40;
           call _cgqHB() args: 0, res: 0, upd: 0;
       cgqHD: // global
           I64[Sp] = block_cgqGP_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ugqHL; else goto cgqGQ;
       ugqHL: // global
           call _cgqGP(R1) args: 0, res: 0, upd: 0;
       cgqGQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqGK_info" {
     block_cgqGK_info:
         const _cgqGK;
         const 260;
         const 36031000337186846;
         const SgoHz_srt+536;
 },
 _cgqGP() //  [R1]
         { []
         }
     {offset
       cgqGP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgqHG; else goto cgqHF;
       cgqHG: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqHF: // global
           _sgoEf::P64 = P64[R1 + 7];
           _sgoEg::P64 = P64[R1 + 15];
           I64[Hp - 64] = x_sgoEh_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgoEf::P64;
           P64[Hp - 16] = _sgoEg::P64;
           I64[Hp - 8] = sat_sgoEn_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqGP_info" {
     block_cgqGP_info:
         const _cgqGP;
         const 260;
         const 36031000337186846;
         const SgoHz_srt+536;
 },
 _cgqHB() //  []
         { []
         }
     {offset
       cgqHB: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sgoE8_entry() //  [R1]
         { []
         }
     {offset
       cgqHS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqHT; else goto cgqHU;
       cgqHT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoE8_info" {
     sat_sgoE8_info:
         const sat_sgoE8_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+648;
 },
 section ""relreadonly" . ugqI6_srtd" {
     ugqI6_srtd:
         const SgoHz_srt+120;
         const 79;
         const 2382685677855703041;
         const 32740;
 },
 Data.Fixed.$fReadFixed1_entry() //  [R2]
         { []
         }
     {offset
       cgqHV: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgqHZ; else goto cgqHY;
       cgqHZ: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqHY: // global
           I64[Hp - 136] = lvl17_sgoDK_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = e_sgoDL_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = lvl18_sgoE4_info;
           P64[Hp - 72] = R2;
           _cgqEK::P64 = Hp - 112;
           P64[Hp - 64] = _cgqEK::P64;
           I64[Hp - 56] = sat_sgoEo_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = _cgqEK::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgoE8_info;
           P64[Hp] = R2;
           R3 = Hp - 55;
           R2 = Hp - 16;
           R1 = GHC.Read.readNumber1_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed1_info" {
     Data.Fixed.$fReadFixed1_info:
         const Data.Fixed.$fReadFixed1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugqI6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.428211039 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadsPrec_closure" {
     Data.Fixed.$fReadFixed_$creadsPrec_closure:
         const Data.Fixed.$fReadFixed_$creadsPrec_info;
         const 0;
 },
 ds_sgoEq_entry() //  [R1]
         { []
         }
     {offset
       cgqK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqKa; else goto cgqKb;
       cgqKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqKb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgoEq_info" {
     ds_sgoEq_info:
         const ds_sgoEq_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+744;
 },
 sat_sgoEs_entry() //  [R1]
         { []
         }
     {offset
       cgqKl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqKm; else goto cgqKn;
       cgqKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEs_info" {
     sat_sgoEs_info:
         const sat_sgoEs_entry;
         const 2;
         const 18;
 },
 sat_sgoEt_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqKo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgqKs; else goto cgqKr;
       cgqKs: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqKr: // global
           _sgoEq::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgoEs_info;
           P64[Hp - 8] = _sgoEq::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEt_info" {
     sat_sgoEt_info:
         const sat_sgoEt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Fixed.$fReadFixed_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cgqKt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgqKx; else goto cgqKw;
       cgqKx: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqKw: // global
           I64[Hp - 32] = ds_sgoEq_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sgoEt_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadsPrec_info" {
     Data.Fixed.$fReadFixed_$creadsPrec_info:
         const Data.Fixed.$fReadFixed_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgoHz_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.437092446 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadListPrec_closure" {
     Data.Fixed.$fReadFixed_$creadListPrec_closure:
         const Data.Fixed.$fReadFixed_$creadListPrec_info;
         const 0;
 },
 sat_sgoEv_entry() //  [R1]
         { []
         }
     {offset
       cgqKX: // global
           R2 = P64[R1 + 16];
           call Data.Fixed.$fReadFixed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEv_info" {
     sat_sgoEv_info:
         const sat_sgoEv_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+744;
 },
 Data.Fixed.$fReadFixed_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cgqL0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqL4; else goto cgqL3;
       cgqL4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqL3: // global
           I64[Hp - 16] = sat_sgoEv_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadListPrec_info" {
     Data.Fixed.$fReadFixed_$creadListPrec_info:
         const Data.Fixed.$fReadFixed_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SgoHz_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.444387859 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadList_closure" {
     Data.Fixed.$fReadFixed_$creadList_closure:
         const Data.Fixed.$fReadFixed_$creadList_info;
         const 0;
 },
 sat_sgoEx_entry() //  [R1]
         { []
         }
     {offset
       cgqLo: // global
           R2 = P64[R1 + 16];
           call Data.Fixed.$fReadFixed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEx_info" {
     sat_sgoEx_info:
         const sat_sgoEx_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+744;
 },
 sat_sgoEy_entry() //  [R1]
         { []
         }
     {offset
       cgqLr: // global
           _sgoEy::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgqLs; else goto cgqLt;
       cgqLt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqLv; else goto cgqLu;
       cgqLv: // global
           HpAlloc = 24;
           goto cgqLs;
       cgqLs: // global
           R1 = _sgoEy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqLu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgoEy::P64;
           _sgoEw::P64 = P64[_sgoEy::P64 + 16];
           I64[Hp - 16] = sat_sgoEx_info;
           P64[Hp] = _sgoEw::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEy_info" {
     sat_sgoEy_info:
         const sat_sgoEy_entry;
         const 1;
         const 21474836496;
         const SgoHz_srt+744;
 },
 Data.Fixed.$fReadFixed_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cgqLw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqLA; else goto cgqLz;
       cgqLA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqLz: // global
           I64[Hp - 16] = sat_sgoEy_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadList_info" {
     Data.Fixed.$fReadFixed_$creadList_info:
         const Data.Fixed.$fReadFixed_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SgoHz_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.452890461 UTC

[section ""data" . Data.Fixed.$fReadFixed_closure" {
     Data.Fixed.$fReadFixed_closure:
         const Data.Fixed.$fReadFixed_info;
         const 0;
 },
 sat_sgoED_entry() //  [R1]
         { []
         }
     {offset
       cgqLU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqLV; else goto cgqLW;
       cgqLV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqLW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoED_info" {
     sat_sgoED_info:
         const sat_sgoED_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+768;
 },
 sat_sgoEC_entry() //  [R1]
         { []
         }
     {offset
       cgqM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqM2; else goto cgqM3;
       cgqM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEC_info" {
     sat_sgoEC_info:
         const sat_sgoEC_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+744;
 },
 sat_sgoEB_entry() //  [R1]
         { []
         }
     {offset
       cgqM8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqM9; else goto cgqMa;
       cgqM9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqMa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEB_info" {
     sat_sgoEB_info:
         const sat_sgoEB_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+776;
 },
 sat_sgoEA_entry() //  [R1]
         { []
         }
     {offset
       cgqMf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqMg; else goto cgqMh;
       cgqMg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqMh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEA_info" {
     sat_sgoEA_info:
         const sat_sgoEA_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+752;
 },
 Data.Fixed.$fReadFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqMj: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cgqMn; else goto cgqMm;
       cgqMn: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqMm: // global
           I64[Hp - 128] = sat_sgoED_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgoEC_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgoEB_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgoEA_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_info" {
     Data.Fixed.$fReadFixed_info:
         const Data.Fixed.$fReadFixed_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SgoHz_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.462844192 UTC

[section ""data" . Data.Fixed.$fEqFixed_closure" {
     Data.Fixed.$fEqFixed_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.464691718 UTC

[section ""data" . Data.Fixed.$fOrdFixed_closure" {
     Data.Fixed.$fOrdFixed_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Fixed.$fEqFixed_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.467860154 UTC

[section ""data" . Data.Fixed.$fRealFixed_closure" {
     Data.Fixed.$fRealFixed_closure:
         const Data.Fixed.$fRealFixed_info;
         const 0;
 },
 sat_sgoEG_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqMY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fRealFixed_$ctoRational_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoEG_info" {
     sat_sgoEG_info:
         const sat_sgoEG_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+584;
 },
 sat_sgoEF_entry() //  [R1]
         { []
         }
     {offset
       cgqN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqN6; else goto cgqN7;
       cgqN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEF_info" {
     sat_sgoEF_info:
         const sat_sgoEF_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+648;
 },
 Data.Fixed.$fRealFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqN9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgqNd; else goto cgqNc;
       cgqNd: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Fixed.$fRealFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqNc: // global
           I64[Hp - 64] = sat_sgoEG_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sgoEF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Data.Fixed.$fOrdFixed_closure+1;
           P64[Hp] = Hp - 63;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFixed_info" {
     Data.Fixed.$fRealFixed_info:
         const Data.Fixed.$fRealFixed_entry;
         const 0;
         const 288231479958306830;
         const 4294967301;
         const SgoHz_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.477548144 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$ctruncate_closure" {
     Data.Fixed.$fRealFracFixed_$ctruncate_closure:
         const Data.Fixed.$fRealFracFixed_$ctruncate_info;
         const 0;
 },
 sat_sgoEV_entry() //  [R1]
         { []
         }
     {offset
       cgqNL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqNM; else goto cgqNN;
       cgqNM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqNN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgqNG_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgoEN::P64 = P64[R1 + 24];
           R2 = _sgoEN::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _sgoEN::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoEV_info" {
     sat_sgoEV_info:
         const sat_sgoEV_entry;
         const 2;
         const 35188667056146;
         const SgoHz_srt+600;
 },
 _cgqNG() //  [R1]
         { []
         }
     {offset
       cgqNG: // global
           if (R1 == 1) goto cgqNK; else goto cgqNJ;
       cgqNK: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cgqNJ: // global
           _sgoEN::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgqNQ_info;
           R3 = _sgoEN::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqNG_info" {
     block_cgqNG_info:
         const _cgqNG;
         const 2;
         const 4294967326;
         const SgoHz_srt+600;
 },
 _cgqNQ() //  [R1]
         { []
         }
     {offset
       cgqNQ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqNQ_info" {
     block_cgqNQ_info:
         const _cgqNQ;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugqOe_srtd" {
     ugqOe_srtd:
         const SgoHz_srt+464;
         const 43;
         const 4399120386049;
 },
 Data.Fixed.$fRealFracFixed_$ctruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqNX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqO3; else goto cgqO4;
       cgqO3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$ctruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqO4: // global
           I64[Sp - 24] = block_cgqNw_info;
           _sgoEH::P64 = R2;
           R2 = R4;
           R1 = _sgoEH::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$ctruncate_info" {
     Data.Fixed.$fRealFracFixed_$ctruncate_info:
         const Data.Fixed.$fRealFracFixed_$ctruncate_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugqOe_srtd;
 },
 _cgqNw() //  [R1]
         { []
         }
     {offset
       cgqNw: // global
           I64[Sp] = block_cgqNA_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqNw_info" {
     block_cgqNw_info:
         const _cgqNw;
         const 2;
         const 4612257768768798750;
         const SgoHz_srt+464;
 },
 _cgqNA() //  [R1, R2]
         { []
         }
     {offset
       cgqNA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgqO8; else goto cgqO7;
       cgqO8: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqO7: // global
           I64[Hp - 24] = sat_sgoEV_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           _sgoEI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqNY_info;
           R2 = _sgoEI::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqNA_info" {
     block_cgqNA_info:
         const _cgqNA;
         const 130;
         const 35188667056158;
         const SgoHz_srt+600;
 },
 _cgqNY() //  [R1]
         { []
         }
     {offset
       cgqNY: // global
           I64[Sp] = block_cgqO2_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqNY_info" {
     block_cgqNY_info:
         const _cgqNY;
         const 1;
         const 30;
 },
 _cgqO2() //  [R1]
         { []
         }
     {offset
       cgqO2: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqO2_info" {
     block_cgqO2_info:
         const _cgqO2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.492644724 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cround_closure" {
     Data.Fixed.$fRealFracFixed_$cround_closure:
         const Data.Fixed.$fRealFracFixed_$cround_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqOR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqOV; else goto cgqOW;
       cgqOV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqOW: // global
           I64[Sp - 24] = block_cgqOP_info;
           _sgoEW::P64 = R2;
           R2 = R4;
           R1 = _sgoEW::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cround_info" {
     Data.Fixed.$fRealFracFixed_$cround_info:
         const Data.Fixed.$fRealFracFixed_$cround_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SgoHz_srt+808;
 },
 _cgqOP() //  [R1]
         { []
         }
     {offset
       cgqOP: // global
           I64[Sp] = block_cgqOU_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqOP_info" {
     block_cgqOP_info:
         const _cgqOP;
         const 2;
         const 55834574878;
         const SgoHz_srt+808;
 },
 _cgqOU() //  [R1, R2]
         { []
         }
     {offset
       cgqOU: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqOU_info" {
     block_cgqOU_info:
         const _cgqOU;
         const 130;
         const 4294967326;
         const SgoHz_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.499845119 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cceiling_closure" {
     Data.Fixed.$fRealFracFixed_$cceiling_closure:
         const Data.Fixed.$fRealFracFixed_$cceiling_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqPh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqPl; else goto cgqPm;
       cgqPl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqPm: // global
           I64[Sp - 24] = block_cgqPf_info;
           _sgoF3::P64 = R2;
           R2 = R4;
           R1 = _sgoF3::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cceiling_info" {
     Data.Fixed.$fRealFracFixed_$cceiling_info:
         const Data.Fixed.$fRealFracFixed_$cceiling_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SgoHz_srt+824;
 },
 _cgqPf() //  [R1]
         { []
         }
     {offset
       cgqPf: // global
           I64[Sp] = block_cgqPk_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqPf_info" {
     block_cgqPf_info:
         const _cgqPf;
         const 2;
         const 30064771102;
         const SgoHz_srt+824;
 },
 _cgqPk() //  [R1, R2]
         { []
         }
     {offset
       cgqPk: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cceiling_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqPk_info" {
     block_cgqPk_info:
         const _cgqPk;
         const 130;
         const 4294967326;
         const SgoHz_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.507316063 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cfloor_closure" {
     Data.Fixed.$fRealFracFixed_$cfloor_closure:
         const Data.Fixed.$fRealFracFixed_$cfloor_info;
         const 0;
 },
 section ""relreadonly" . ugqPQ_srtd" {
     ugqPQ_srtd:
         const SgoHz_srt+472;
         const 49;
         const 334251534843905;
 },
 Data.Fixed.$fRealFracFixed_$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqPH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgqPL; else goto cgqPM;
       cgqPL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqPM: // global
           I64[Sp - 24] = block_cgqPF_info;
           _sgoFa::P64 = R2;
           R2 = R4;
           R1 = _sgoFa::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cfloor_info" {
     Data.Fixed.$fRealFracFixed_$cfloor_info:
         const Data.Fixed.$fRealFracFixed_$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugqPQ_srtd;
 },
 section ""relreadonly" . ugqPR_srtd" {
     ugqPR_srtd:
         const SgoHz_srt+472;
         const 46;
         const 52776558133249;
 },
 _cgqPF() //  [R1]
         { []
         }
     {offset
       cgqPF: // global
           I64[Sp] = block_cgqPK_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqPF_info" {
     block_cgqPF_info:
         const _cgqPF;
         const 2;
         const 18446744069414584350;
         const ugqPR_srtd;
 },
 _cgqPK() //  [R1, R2]
         { []
         }
     {offset
       cgqPK: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqPK_info" {
     block_cgqPK_info:
         const _cgqPK;
         const 130;
         const 4294967326;
         const SgoHz_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.517523098 UTC

[section ""data" . Data.Fixed.$w$cproperFraction_closure" {
     Data.Fixed.$w$cproperFraction_closure:
         const Data.Fixed.$w$cproperFraction_info;
         const 0;
 },
 i_sgoFk_entry() //  [R1]
         { []
         }
     {offset
       cgqQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqQe; else goto cgqQf;
       cgqQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fRealFracFixed_$ctruncate_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . i_sgoFk_info" {
     i_sgoFk_info:
         const i_sgoFk_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+800;
 },
 sat_sgoFo_entry() //  [R1]
         { []
         }
     {offset
       cgqQm: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgqQu; else goto cgqQv;
       cgqQu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cgqQk_info;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           _sgoFi::P64 = P64[R1 + 24];
           _sgoFj::P64 = P64[R1 + 32];
           _sgoFk::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sgoFi::P64;
           P64[Sp - 32] = _sgoFj::P64;
           P64[Sp - 24] = _sgoFk::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoFo_info" {
     sat_sgoFo_info:
         const sat_sgoFo_entry;
         const 4;
         const 30064771087;
         const SgoHz_srt+872;
 },
 _cgqQk() //  [R1]
         { []
         }
     {offset
       cgqQk: // global
           _sgoFi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgqQp_info;
           R2 = _sgoFi::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqQk_info" {
     block_cgqQk_info:
         const _cgqQk;
         const 3;
         const 12884901918;
         const SgoHz_srt+880;
 },
 _cgqQp() //  [R1]
         { []
         }
     {offset
       cgqQp: // global
           I64[Sp] = block_cgqQt_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqQp_info" {
     block_cgqQp_info:
         const _cgqQp;
         const 2;
         const 12884901918;
         const SgoHz_srt+880;
 },
 _cgqQt() //  [R1]
         { []
         }
     {offset
       cgqQt: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqQt_info" {
     block_cgqQt_info:
         const _cgqQt;
         const 130;
         const 4294967326;
         const SgoHz_srt+888;
 },
 Data.Fixed.$w$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqQC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgqQG; else goto cgqQF;
       cgqQG: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$w$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqQF: // global
           I64[Hp - 80] = i_sgoFk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgoFo_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           _cgqQ9::P64 = Hp - 80;
           P64[Hp] = _cgqQ9::P64;
           R2 = Hp - 40;
           R1 = _cgqQ9::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cproperFraction_info" {
     Data.Fixed.$w$cproperFraction_info:
         const Data.Fixed.$w$cproperFraction_entry;
         const 0;
         const 32989643800590;
         const 12884901911;
         const SgoHz_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.529895023 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cproperFraction_closure" {
     Data.Fixed.$fRealFracFixed_$cproperFraction_closure:
         const Data.Fixed.$fRealFracFixed_$cproperFraction_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cproperFraction_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cgqRb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgqRc; else goto cgqRd;
       cgqRc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqRd: // global
           I64[Sp - 8] = block_cgqR8_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Fixed.$w$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cproperFraction_info" {
     Data.Fixed.$fRealFracFixed_$cproperFraction_info:
         const Data.Fixed.$fRealFracFixed_$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgoHz_srt+896;
 },
 _cgqR8() //  [R1, R2]
         { []
         }
     {offset
       cgqR8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqRg; else goto cgqRf;
       cgqRg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqRf: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqR8_info" {
     block_cgqR8_info:
         const _cgqR8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.537709572 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_closure" {
     Data.Fixed.$fRealFracFixed_closure:
         const Data.Fixed.$fRealFracFixed_info;
         const 0;
 },
 sat_sgoFC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqRz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cfloor_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoFC_info" {
     sat_sgoFC_info:
         const sat_sgoFC_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+856;
 },
 sat_sgoFB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqRH: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cceiling_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoFB_info" {
     sat_sgoFB_info:
         const sat_sgoFB_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+848;
 },
 sat_sgoFA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqRP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cround_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoFA_info" {
     sat_sgoFA_info:
         const sat_sgoFA_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+816;
 },
 sat_sgoFz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqRX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$ctruncate_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoFz_info" {
     sat_sgoFz_info:
         const sat_sgoFz_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+800;
 },
 sat_sgoFy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgqS5: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cproperFraction_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoFy_info" {
     sat_sgoFy_info:
         const sat_sgoFy_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+904;
 },
 sat_sgoFx_entry() //  [R1]
         { []
         }
     {offset
       cgqSc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqSd; else goto cgqSe;
       cgqSd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqSe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fFractionalFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoFx_info" {
     sat_sgoFx_info:
         const sat_sgoFx_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+656;
 },
 sat_sgoFw_entry() //  [R1]
         { []
         }
     {offset
       cgqSj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqSk; else goto cgqSl;
       cgqSk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqSl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fRealFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoFw_info" {
     sat_sgoFw_info:
         const sat_sgoFw_entry;
         const 1;
         const 4294967312;
         const SgoHz_srt+792;
 },
 section ""relreadonly" . ugqSs_srtd" {
     ugqSs_srtd:
         const SgoHz_srt+656;
         const 33;
         const 6494224385;
 },
 Data.Fixed.$fRealFracFixed_entry() //  [R2]
         { []
         }
     {offset
       cgqSn: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cgqSr; else goto cgqSq;
       cgqSr: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqSq: // global
           I64[Hp - 184] = sat_sgoFC_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sgoFB_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sgoFA_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sgoFz_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sgoFy_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgoFx_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgoFw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 118;
           P64[Hp - 24] = Hp - 134;
           P64[Hp - 16] = Hp - 150;
           P64[Hp - 8] = Hp - 166;
           P64[Hp] = Hp - 182;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_info" {
     Data.Fixed.$fRealFracFixed_info:
         const Data.Fixed.$fRealFracFixed_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugqSs_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.555541733 UTC

[section ""data" . chopZeros_rgnn4_closure" {
     chopZeros_rgnn4_closure:
         const chopZeros_rgnn4_info;
         const 0;
 },
 section ""relreadonly" . ugqTK_srtd" {
     ugqTK_srtd:
         const SgoHz_srt+120;
         const 103;
         const 576460752303423489;
         const 481036337664;
 },
 chopZeros_rgnn4_entry() //  [R2]
         { []
         }
     {offset
       cgqTc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqTd; else goto ugqTG;
       cgqTd: // global
           R2 = R2;
           R1 = chopZeros_rgnn4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ugqTG: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _cgqT4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . chopZeros_rgnn4_info" {
     chopZeros_rgnn4_info:
         const chopZeros_rgnn4_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugqTK_srtd;
 },
 _cgqT4() //  []
         { []
         }
     {offset
       cgqT4: // global
           I64[Sp - 8] = block_cgqT7_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugqTL_srtd" {
     ugqTL_srtd:
         const SgoHz_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgqT7() //  [R1]
         { []
         }
     {offset
       cgqT7: // global
           if (R1 == 1) goto cgqTb; else goto cgqTa;
       cgqTb: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgqTa: // global
           I64[Sp] = block_cgqTh_info;
           R3 = Data.Fixed.$fHasResolutionE4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqT7_info" {
     block_cgqT7_info:
         const _cgqT7;
         const 1;
         const 18446744069414584350;
         const ugqTL_srtd;
 },
 section ""relreadonly" . ugqTM_srtd" {
     ugqTM_srtd:
         const SgoHz_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgqTh() //  [R1]
         { []
         }
     {offset
       cgqTh: // global
           I64[Sp] = block_cgqTm_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqTh_info" {
     block_cgqTh_info:
         const _cgqTh;
         const 1;
         const 18446744069414584350;
         const ugqTM_srtd;
 },
 section ""relreadonly" . ugqTN_srtd" {
     ugqTN_srtd:
         const SgoHz_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgqTm() //  [R1]
         { []
         }
     {offset
       cgqTm: // global
           _sgoFD::P64 = P64[Sp + 8];
           if (R1 == 1) goto cgqTy; else goto cgqTt;
       cgqTy: // global
           I64[Sp + 8] = block_cgqTw_info;
           R3 = Data.Fixed.$fHasResolutionE4_closure;
           R2 = _sgoFD::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       cgqTt: // global
           R2 = _sgoFD::P64;
           Sp = Sp + 16;
           call GHC.Show.$fShowInteger_$cshow_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqTm_info" {
     block_cgqTm_info:
         const _cgqTm;
         const 1;
         const 18446744069414584350;
         const ugqTN_srtd;
 },
 section ""relreadonly" . ugqTO_srtd" {
     ugqTO_srtd:
         const SgoHz_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgqTw() //  [R1]
         { []
         }
     {offset
       cgqTw: // global
           P64[Sp] = R1;
           call _cgqT4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqTw_info" {
     block_cgqTw_info:
         const _cgqTw;
         const 0;
         const 18446744069414584350;
         const ugqTO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.568009484 UTC

[section ""data" . lvl14_rgoyT_closure" {
     lvl14_rgoyT_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.569747475 UTC

[section ""data" . lvl15_rgoyU_closure" {
     lvl15_rgoyU_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.571384342 UTC

[section ""cstring" . lvl16_rgoyV_bytes" {
     lvl16_rgoyV_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.586458243 UTC

[section ""data" . Data.Fixed.showFixed_closure" {
     Data.Fixed.showFixed_closure:
         const Data.Fixed.showFixed_info;
         const 0;
 },
 n1_sgoGj_entry() //  [R1]
         { []
         }
     {offset
       cgqVI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqVJ; else goto cgqVK;
       cgqVJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqVK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgqVB_info;
           _sgoG5::P64 = P64[R1 + 24];
           _sgoGb::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sgoG5::P64;
           P64[Sp - 24] = _sgoGb::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugqVR; else goto cgqVC;
       ugqVR: // global
           call _cgqVB(R1) args: 0, res: 0, upd: 0;
       cgqVC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n1_sgoGj_info" {
     n1_sgoGj_info:
         const n1_sgoGj_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+936;
 },
 _cgqVB() //  [R1]
         { []
         }
     {offset
       cgqVB: // global
           if (R1 & 7 == 1) goto cgqVF; else goto cgqVG;
       cgqVF: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cgqVG: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call chopZeros_rgnn4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqVB_info" {
     block_cgqVB_info:
         const _cgqVB;
         const 2;
         const 4294967326;
         const SgoHz_srt+936;
 },
 sat_sgoGq_entry() //  [R1]
         { []
         }
     {offset
       cgqW6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgqW7; else goto cgqW8;
       cgqW7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqW8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_sgoGm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoGq_info" {
     sat_sgoGq_info:
         const sat_sgoGq_entry;
         const 4294967297;
         const 19;
 },
 $wxs_sgoGm_entry() //  [R1, R2]
         { []
         }
     {offset
       cgqWc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgqWg; else goto cgqWf;
       cgqWg: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgqWf: // global
           if (R2 == 1) goto cgqWb; else goto cgqWa;
       cgqWb: // global
           _sgoGl::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _sgoGl::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgqWa: // global
           I64[Hp - 48] = sat_sgoGq_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_rgoyT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_sgoGm_info" {
     $wxs_sgoGm_info:
         const $wxs_sgoGm_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 section ""relreadonly" . ugqZz_srtd" {
     ugqZz_srtd:
         const SgoHz_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 sat_sgoGK_entry() //  [R1]
         { []
         }
     {offset
       cgqWi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqWj; else goto cgqWk;
       cgqWj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqWk: // global
           I64[Sp - 32] = block_cgqUF_info;
           _sgoFM::P64 = P64[R1 + 24];
           R2 = _sgoFM::P64;
           P64[Sp - 24] = P64[R1 + 16];
           P64[Sp - 16] = _sgoFM::P64;
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 32;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoGK_info" {
     sat_sgoGK_info:
         const sat_sgoGK_entry;
         const 3;
         const 18446744069414584335;
         const ugqZz_srtd;
 },
 section ""relreadonly" . ugqZA_srtd" {
     ugqZA_srtd:
         const SgoHz_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgqUF() //  [D1]
         { []
         }
     {offset
       cgqUF: // global
           _cgqUK::F64 = D1;
           (_cgqUJ::F64) = call MO_F64_Log(_cgqUK::F64);
           I64[Sp - 8] = block_cgqUN_info;
           R1 = Data.Fixed.$fReadFixed2_closure;
           F64[Sp] = _cgqUJ::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqYO; else goto cgqUO;
       ugqYO: // global
           call _cgqUN(R1) args: 0, res: 0, upd: 0;
       cgqUO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUF_info" {
     block_cgqUF_info:
         const _cgqUF;
         const 3;
         const 18446744069414584350;
         const ugqZA_srtd;
 },
 section ""relreadonly" . ugqZB_srtd" {
     ugqZB_srtd:
         const SgoHz_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835136;
 },
 _cgqUN() //  [R1]
         { []
         }
     {offset
       cgqUN: // global
           _sgoFQ::P64 = P64[Sp + 32];
           _sgoFZ::F64 = %MO_F_Quot_W64(F64[Sp + 8], F64[R1 + 7]);
           _sgoG0::I64 = %MO_FS_Conv_W64_W64(_sgoFZ::F64);
           if (%MO_F_Lt_W64(%MO_SF_Conv_W64_W64(_sgoG0::I64),
                            _sgoFZ::F64)) goto cgqYz; else goto cgqYy;
       cgqYz: // global
           _sgoG2::I64 = _sgoG0::I64 + 1;
           goto sgoG1;
       cgqYy: // global
           _sgoG2::I64 = _sgoG0::I64;
           goto sgoG1;
       sgoG1: // global
           if (%MO_S_Ge_W64(_sgoG2::I64, 0)) goto cgqYt; else goto cgqYu;
       cgqYt: // global
           if (_sgoG2::I64 == 0) goto cgqYk; else goto cgqXX;
       cgqYk: // global
           I64[Sp + 8] = block_cgqY7_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _sgoFQ::P64;
           I64[Sp + 32] = _sgoG2::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       cgqXX: // global
           I64[Sp] = block_cgqXF_info;
           R3 = _sgoG2::I64;
           R2 = Data.Fixed.$fHasResolutionE4_closure;
           I64[Sp + 8] = _sgoG2::I64;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 8, upd: 8;
       cgqYu: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUN_info" {
     block_cgqUN_info:
         const _cgqUN;
         const 68;
         const 18446744069414584350;
         const ugqZB_srtd;
 },
 section ""relreadonly" . ugqZC_srtd" {
     ugqZC_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26525718110209;
 },
 _cgqY7() //  [R1]
         { []
         }
     {offset
       cgqY7: // global
           I64[Sp] = block_cgqYb_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqY7_info" {
     block_cgqY7_info:
         const _cgqY7;
         const 259;
         const 18446744069414584350;
         const ugqZC_srtd;
 },
 section ""relreadonly" . ugqZD_srtd" {
     ugqZD_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26525718044673;
 },
 _cgqYb() //  [R1]
         { []
         }
     {offset
       cgqYb: // global
           I64[Sp] = block_cgqYf_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqYb_info" {
     block_cgqYb_info:
         const _cgqYb;
         const 259;
         const 18446744069414584350;
         const ugqZD_srtd;
 },
 section ""relreadonly" . ugqZE_srtd" {
     ugqZE_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26388279083009;
 },
 _cgqYf() //  [R1]
         { []
         }
     {offset
       cgqYf: // global
           I64[Sp] = block_cgqYj_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqYf_info" {
     block_cgqYf_info:
         const _cgqYf;
         const 259;
         const 18446744069414584350;
         const ugqZE_srtd;
 },
 _cgqYj() //  [R1]
         { []
         }
     {offset
       cgqYj: // global
           I64[Sp] = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call _sgoG4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqYj_info" {
     block_cgqYj_info:
         const _cgqYj;
         const 387;
         const 6917529031936049182;
         const SgoHz_srt+704;
 },
 section ""relreadonly" . ugqZF_srtd" {
     ugqZF_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26594437586945;
 },
 _cgqXF() //  [R1]
         { []
         }
     {offset
       cgqXF: // global
           I64[Sp] = block_cgqXJ_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqXF_info" {
     block_cgqXF_info:
         const _cgqXF;
         const 68;
         const 18446744069414584350;
         const ugqZF_srtd;
 },
 section ""relreadonly" . ugqZG_srtd" {
     ugqZG_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26525718110209;
 },
 _cgqXJ() //  [R1]
         { []
         }
     {offset
       cgqXJ: // global
           I64[Sp] = block_cgqXN_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqXJ_info" {
     block_cgqXJ_info:
         const _cgqXJ;
         const 580;
         const 18446744069414584350;
         const ugqZG_srtd;
 },
 section ""relreadonly" . ugqZH_srtd" {
     ugqZH_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26525718044673;
 },
 _cgqXN() //  [R1]
         { []
         }
     {offset
       cgqXN: // global
           I64[Sp] = block_cgqXR_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqXN_info" {
     block_cgqXN_info:
         const _cgqXN;
         const 580;
         const 18446744069414584350;
         const ugqZH_srtd;
 },
 section ""relreadonly" . ugqZI_srtd" {
     ugqZI_srtd:
         const SgoHz_srt+592;
         const 45;
         const 26388279083009;
 },
 _cgqXR() //  [R1]
         { []
         }
     {offset
       cgqXR: // global
           I64[Sp] = block_cgqXV_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqXR_info" {
     block_cgqXR_info:
         const _cgqXR;
         const 580;
         const 18446744069414584350;
         const ugqZI_srtd;
 },
 _cgqXV() //  [R1]
         { []
         }
     {offset
       cgqXV: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _sgoG4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqXV_info" {
     block_cgqXV_info:
         const _cgqXV;
         const 836;
         const 6917529031936049182;
         const SgoHz_srt+704;
 },
 _sgoG4() //  []
         { []
         }
     {offset
       sgoG4: // global
           I64[Sp - 8] = block_cgqWo_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugqYX; else goto cgqXh;
       ugqYX: // global
           call _cgqWo(R1) args: 0, res: 0, upd: 0;
       cgqXh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgqWo() //  [R1]
         { []
         }
     {offset
       cgqWo: // global
           if (R1 & 7 == 1) goto ugqYJ; else goto cgqXs;
       ugqYJ: // global
           Sp = Sp + 8;
           call _sgoG6() args: 0, res: 0, upd: 0;
       cgqXs: // global
           I64[Sp] = block_cgqXq_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqWo_info" {
     block_cgqWo_info:
         const _cgqWo;
         const 324;
         const 6917529031936049182;
         const SgoHz_srt+704;
 },
 _cgqXq() //  [R1]
         { []
         }
     {offset
       cgqXq: // global
           if (R1 == 1) goto ugqYK; else goto ugqYL;
       ugqYK: // global
           Sp = Sp + 40;
           call _cgqXC() args: 0, res: 0, upd: 0;
       ugqYL: // global
           Sp = Sp + 8;
           call _sgoG6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgqXq_info" {
     block_cgqXq_info:
         const _cgqXq;
         const 324;
         const 12884901918;
         const SgoHz_srt+936;
 },
 _sgoG6() //  []
         { []
         }
     {offset
       sgoG6: // global
           I64[Sp - 8] = block_cgqVj_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[Sp + 24];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _cgqVj() //  [R1, R2]
         { []
         }
     {offset
       cgqVj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqWt; else goto cgqWs;
       cgqWt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqWs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp] = block_cgqVm_info;
           R3 = 0;
           _cgqVl::P64 = Hp - 14;
           R2 = _cgqVl::P64;
           P64[Sp + 24] = _cgqVl::P64;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqVj_info" {
     block_cgqVj_info:
         const _cgqVj;
         const 324;
         const 4294967326;
         const SgoHz_srt+936;
 },
 _cgqVm() //  [R1]
         { []
         }
     {offset
       cgqVm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgqWw; else goto cgqWv;
       cgqWw: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgqWv: // global
           _sgoFJ::P64 = P64[Sp + 16];
           _sgoGd::I64 = I64[Sp + 8] - R1;
           if (%MO_S_Ge_W64(0, _sgoGd::I64)) goto cgqWz; else goto cgqX3;
       cgqWz: // global
           Hp = Hp - 80;
           I64[Sp + 16] = block_cgqWx_info;
           R1 = _sgoFJ::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ugqYP; else goto cgqWA;
       ugqYP: // global
           call _cgqWx(R1) args: 0, res: 0, upd: 0;
       cgqWA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cgqX3: // global
           I64[Hp - 72] = n1_sgoGj_info;
           P64[Hp - 56] = _sgoFJ::P64;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl14_rgoyT_closure+1;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = $wxs_sgoGm_info;
           P64[Hp] = Hp - 30;
           I64[Sp + 32] = block_cgqX2_info;
           R2 = _sgoGd::I64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call $wxs_sgoGm_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqVm_info" {
     block_cgqVm_info:
         const _cgqVm;
         const 68;
         const 4294967326;
         const SgoHz_srt+936;
 },
 _cgqWx() //  [R1]
         { []
         }
     {offset
       cgqWx: // global
           if (R1 & 7 == 1) goto cgqWG; else goto cgqWO;
       cgqWG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqWJ; else goto cgqWI;
       cgqWJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqWI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgqWO: // global
           _sgoG5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgqWM_info;
           R2 = _sgoG5::P64;
           Sp = Sp + 16;
           call chopZeros_rgnn4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqWx_info" {
     block_cgqWx_info:
         const _cgqWx;
         const 2;
         const 4294967326;
         const SgoHz_srt+936;
 },
 _cgqWM() //  [R1]
         { []
         }
     {offset
       cgqWM: // global
           if (R1 & 7 == 1) goto ugqYM; else goto cgqWY;
       ugqYM: // global
           Sp = Sp + 8;
           call _cgqXC() args: 0, res: 0, upd: 0;
       cgqWY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqX1; else goto cgqX0;
       cgqX1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqX0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqWM_info" {
     block_cgqWM_info:
         const _cgqWM;
         const 0;
         const 30;
 },
 _cgqX2() //  [R1]
         { []
         }
     {offset
       cgqX2: // global
           if (R1 & 7 == 1) goto ugqYN; else goto cgqXd;
       ugqYN: // global
           Sp = Sp + 8;
           call _cgqXC() args: 0, res: 0, upd: 0;
       cgqXd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgqXg; else goto cgqXf;
       cgqXg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgqXf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqX2_info" {
     block_cgqX2_info:
         const _cgqX2;
         const 0;
         const 30;
 },
 _cgqXC() //  []
         { []
         }
     {offset
       cgqXC: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sgoGN_entry() //  [R1]
         { []
         }
     {offset
       cgqZ6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgqZ7; else goto cgqZ8;
       cgqZ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgqZ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgqZ4_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgoGN_info" {
     sat_sgoGN_info:
         const sat_sgoGN_entry;
         const 3;
         const 4294967311;
         const SgoHz_srt+968;
 },
 _cgqZ4() //  [R1]
         { []
         }
     {offset
       cgqZ4: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgqZ4_info" {
     block_cgqZ4_info:
         const _cgqZ4;
         const 2;
         const 4294967326;
         const SgoHz_srt+968;
 },
 section ""relreadonly" . ugqZJ_srtd" {
     ugqZJ_srtd:
         const SgoHz_srt+120;
         const 108;
         const 1729382256910270465;
         const 17323767368512;
 },
 Data.Fixed.showFixed_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgqZf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgqZg; else goto cgqZh;
       cgqZg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.showFixed_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgqZh: // global
           I64[Sp - 32] = block_cgqUl_info;
           _sgoFJ::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgoFI::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgoFI::P64;
           P64[Sp - 16] = _sgoFJ::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.showFixed_info" {
     Data.Fixed.showFixed_info:
         const Data.Fixed.showFixed_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugqZJ_srtd;
 },
 section ""relreadonly" . ugqZK_srtd" {
     ugqZK_srtd:
         const SgoHz_srt+120;
         const 108;
         const 1729382256910270465;
         const 17323767368512;
 },
 _cgqUl() //  [R1]
         { []
         }
     {offset
       cgqUl: // global
           _sgoFI::P64 = P64[Sp + 8];
           _sgoFK::P64 = P64[Sp + 24];
           if (R1 == 1) goto cgqZe; else goto cgqZd;
       cgqZe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgqZy; else goto cgqZx;
       cgqZy: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgqZx: // global
           I64[Hp - 32] = sat_sgoGN_info;
           P64[Hp - 16] = _sgoFI::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgoFK::P64;
           R3 = Hp - 32;
           R2 = lvl16_rgoyV_bytes;
           Sp = Sp + 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cgqZd: // global
           I64[Sp + 8] = block_cgqUp_info;
           R2 = _sgoFK::P64;
           R1 = _sgoFI::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUl_info" {
     block_cgqUl_info:
         const _cgqUl;
         const 3;
         const 18446744069414584350;
         const ugqZK_srtd;
 },
 section ""relreadonly" . ugqZL_srtd" {
     ugqZL_srtd:
         const SgoHz_srt+120;
         const 108;
         const 1729382256910270465;
         const 12925720857408;
 },
 _cgqUp() //  [R1]
         { []
         }
     {offset
       cgqUp: // global
           I64[Sp - 8] = block_cgqUt_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUp_info" {
     block_cgqUp_info:
         const _cgqUp;
         const 2;
         const 18446744069414584350;
         const ugqZL_srtd;
 },
 section ""relreadonly" . ugqZM_srtd" {
     ugqZM_srtd:
         const SgoHz_srt+120;
         const 108;
         const 1729382256910270465;
         const 12925720857408;
 },
 _cgqUt() //  [R1]
         { []
         }
     {offset
       cgqUt: // global
           if (R1 == 1) goto cgqZv; else goto cgqZn;
       cgqZv: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgqZn: // global
           I64[Sp] = block_cgqUx_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUt_info" {
     block_cgqUt_info:
         const _cgqUt;
         const 3;
         const 18446744069414584350;
         const ugqZM_srtd;
 },
 section ""relreadonly" . ugqZN_srtd" {
     ugqZN_srtd:
         const SgoHz_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgqUx() //  [R1, R2]
         { []
         }
     {offset
       cgqUx: // global
           I64[Sp] = block_cgqUz_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R1;
           _sgoFQ::P64 = R2;
           R2 = 0;
           P64[Sp + 24] = _sgoFQ::P64;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUx_info" {
     block_cgqUx_info:
         const _cgqUx;
         const 259;
         const 18446744069414584350;
         const ugqZN_srtd;
 },
 section ""relreadonly" . ugqZO_srtd" {
     ugqZO_srtd:
         const SgoHz_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgqUz() //  [R1, R2]
         { []
         }
     {offset
       cgqUz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgqZr; else goto cgqZq;
       cgqZr: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgqZq: // global
           I64[Hp - 56] = sat_sgoGK_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgqUz_info" {
     block_cgqUz_info:
         const _cgqUz;
         const 3;
         const 18446744069414584350;
         const ugqZO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.655731532 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshow_closure" {
     Data.Fixed.$fShowFixed_$cshow_closure:
         const Data.Fixed.$fShowFixed_$cshow_info;
         const 0;
 },
 Data.Fixed.$fShowFixed_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cgr2x: // global
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshow_info" {
     Data.Fixed.$fShowFixed_$cshow_info:
         const Data.Fixed.$fShowFixed_$cshow_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SgoHz_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.660865027 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshowsPrec_closure" {
     Data.Fixed.$fShowFixed_$cshowsPrec_closure:
         const Data.Fixed.$fShowFixed_$cshowsPrec_info;
         const 0;
 },
 Data.Fixed.$fShowFixed_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgr2K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgr2L; else goto cgr2M;
       cgr2L: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgr2M: // global
           I64[Sp - 16] = block_cgr2I_info;
           R4 = R4;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 16;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshowsPrec_info" {
     Data.Fixed.$fShowFixed_$cshowsPrec_info:
         const Data.Fixed.$fShowFixed_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SgoHz_srt+968;
 },
 _cgr2I() //  [R1]
         { []
         }
     {offset
       cgr2I: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgr2I_info" {
     block_cgr2I_info:
         const _cgr2I;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.667794019 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshowList_closure" {
     Data.Fixed.$fShowFixed_$cshowList_closure:
         const Data.Fixed.$fShowFixed_$cshowList_info;
         const 0;
 },
 sat_sgoH0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgr39: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgr3a; else goto cgr3b;
       cgr3a: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgr3b: // global
           I64[Sp - 16] = block_cgr37_info;
           R4 = R2;
           _sgoGY::P64 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sgoGY::P64;
           Sp = Sp - 16;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoH0_info" {
     sat_sgoH0_info:
         const sat_sgoH0_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+968;
 },
 _cgr37() //  [R1]
         { []
         }
     {offset
       cgr37: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgr37_info" {
     block_cgr37_info:
         const _cgr37;
         const 1;
         const 30;
 },
 Data.Fixed.$fShowFixed_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgr3f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgr3j; else goto cgr3i;
       cgr3j: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgr3i: // global
           I64[Hp - 8] = sat_sgoH0_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshowList_info" {
     Data.Fixed.$fShowFixed_$cshowList_info:
         const Data.Fixed.$fShowFixed_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SgoHz_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.676345232 UTC

[section ""data" . Data.Fixed.$fShowFixed_closure" {
     Data.Fixed.$fShowFixed_closure:
         const Data.Fixed.$fShowFixed_info;
         const 0;
 },
 sat_sgoH4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgr3E: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fShowFixed_$cshowList_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoH4_info" {
     sat_sgoH4_info:
         const sat_sgoH4_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgoHz_srt+992;
 },
 sat_sgoH3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgr3M: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fShowFixed_$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoH3_info" {
     sat_sgoH3_info:
         const sat_sgoH3_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SgoHz_srt+1000;
 },
 sat_sgoH2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgr3U: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fShowFixed_$cshowsPrec_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgoH2_info" {
     sat_sgoH2_info:
         const sat_sgoH2_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SgoHz_srt+984;
 },
 Data.Fixed.$fShowFixed_entry() //  [R2]
         { []
         }
     {offset
       cgr3Y: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgr42; else goto cgr41;
       cgr42: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgr41: // global
           I64[Hp - 72] = sat_sgoH4_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgoH3_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgoH2_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_info" {
     Data.Fixed.$fShowFixed_info:
         const Data.Fixed.$fShowFixed_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SgoHz_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:19.685041128 UTC

[section ""relreadonly" . SgoHz_srt" {
     SgoHz_srt:
         const Data.Data.$fDataInteger_closure;
         const Data.Fixed.$fDataFixed_$cgfoldl_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure;
         const Data.Fixed.$fEnumFixed1_closure;
         const sat_sgozk_closure;
         const Data.Fixed.$fEnumFixed2_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromTo_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromThen_closure;
         const Data.Fixed.$fEnumFixed3_closure;
         const GHC.Enum.$fEnumInteger_$cpred_closure;
         const GHC.Enum.$fEnumInteger_$csucc_closure;
         const Data.Fixed.$fHasResolutionE0_$cresolution_closure;
         const sat_sgozK_closure;
         const Data.Fixed.$fHasResolutionE4_closure;
         const Data.Fixed.$fHasResolutionE1_$cresolution_closure;
         const sat_sgozN_closure;
         const Data.Fixed.$fHasResolutionE7_closure;
         const Data.Fixed.$fHasResolutionE2_$cresolution_closure;
         const sat_sgozQ_closure;
         const Data.Fixed.$fHasResolutionE8_closure;
         const Data.Fixed.$fHasResolutionE3_$cresolution_closure;
         const sat_sgozT_closure;
         const Data.Fixed.$fHasResolutionE10_closure;
         const Data.Fixed.$fHasResolutionE6_$cresolution_closure;
         const sat_sgozW_closure;
         const Data.Fixed.$fHasResolutionE11_closure;
         const Data.Fixed.$fHasResolutionE9_$cresolution_closure;
         const sat_sgoA1_closure;
         const Data.Fixed.$fHasResolutionE5_closure;
         const Data.Fixed.$fHasResolutionE12_$cresolution_closure;
         const GHC.List.badHead_closure;
         const w2_rgoyl_closure;
         const go61_rgoym_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Fixed.$fDataFixed4_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Fixed.$fDataFixed8_closure;
         const Data.Data.$fDataInteger_closure;
         const Data.Fixed.$w$cgmapMp_closure;
         const Data.Fixed.$w$cgmapM_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Fixed.$fDataFixed_$cgmapQi_closure;
         const Data.Fixed.$w$cgmapMo_closure;
         const Data.Fixed.conMkFixed_closure;
         const Data.Fixed.tyFixed_closure;
         const lvl5_rgoyK_closure;
         const lvl6_rgoyL_closure;
         const lvl7_rgoyM_closure;
         const lvl8_rgoyN_closure;
         const Data.Fixed.$fDataFixed_$cgfoldl_closure;
         const Data.Fixed.$fDataFixed7_closure;
         const Data.Fixed.$fDataFixed_closure;
         const lvl_rgoyF_closure;
         const lvl1_rgoyG_closure;
         const lvl4_rgoyJ_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const Data.Fixed.div'_closure;
         const Data.Fixed.$wdivMod'_closure;
         const Data.Fixed.divMod'_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const Data.Fixed.mod'_closure;
         const GHC.Err.undefined_closure;
         const $dIP3_rgoyz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const Data.Fixed.$w$cfromRational_closure;
         const Data.Fixed.$fFractionalFixed2_closure;
         const Data.Fixed.$fFractionalFixed1_closure;
         const Data.Fixed.$fRealFixed_$ctoRational_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.divZeroError_closure;
         const Data.Fixed.$fFractionalFixed3_closure;
         const Data.Fixed.$fFractionalFixed_$crecip_closure;
         const Data.Fixed.$fNumFixed_$c*_closure;
         const Data.Fixed.$fNumFixed1_closure;
         const Data.Fixed.$fNumFixed2_closure;
         const Data.Fixed.$fNumFixed_closure;
         const Data.Fixed.$fFractionalFixed_closure;
         const lvl13_rgoyS_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const Data.Fixed.$fReadFixed2_closure;
         const Data.Fixed.$fReadFixed3_closure;
         const Data.Fixed.$fEnumFixed2_closure;
         const Data.Fixed.$fEnumFixed1_closure;
         const GHC.Real.^_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const GHC.Read.readNumber1_closure;
         const Data.Fixed.$fReadFixed1_closure;
         const Data.Fixed.$fReadFixed_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Fixed.$fReadFixed_$creadListPrec_closure;
         const Data.Fixed.$fReadFixed_$creadList_closure;
         const Data.Fixed.$fReadFixed_closure;
         const Data.Fixed.$fRealFixed_closure;
         const Data.Fixed.$fRealFracFixed_$ctruncate_closure;
         const GHC.Real.$w$s$cround_closure;
         const Data.Fixed.$fRealFracFixed_$cround_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$cceiling_closure;
         const Data.Fixed.$fRealFracFixed_$cceiling_closure;
         const Data.Fixed.$fRealFracFixed_$cfloor_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const Data.Fixed.$fFractionalFixed2_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const Data.Fixed.$w$cproperFraction_closure;
         const Data.Fixed.$fRealFracFixed_$cproperFraction_closure;
         const Data.Fixed.$fRealFracFixed_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Show.$fShowInteger_$cshow_closure;
         const chopZeros_rgnn4_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$wf_closure;
         const Data.Fixed.showFixed_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const Data.Fixed.$fShowFixed_$cshowsPrec_closure;
         const Data.Fixed.$fShowFixed_$cshowList_closure;
         const Data.Fixed.$fShowFixed_$cshow_closure;
         const Data.Fixed.$fShowFixed_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.577306689 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:22.579848221 UTC

[section ""data" . Data.Fixed.resolution_closure" {
     Data.Fixed.resolution_closure:
         const Data.Fixed.resolution_info;
 },
 Data.Fixed.resolution_entry() //  [R2]
         { []
         }
     {offset
       cgrcx: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.resolution_info" {
     Data.Fixed.resolution_info:
         const Data.Fixed.resolution_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.585651625 UTC

[section ""data" . Data.Fixed.$fDataFixed2_closure" {
     Data.Fixed.$fDataFixed2_closure:
         const Data.Fixed.$fDataFixed2_info;
 },
 Data.Fixed.$fDataFixed2_entry() //  [R2]
         { []
         }
     {offset
       cgrcI: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed2_info" {
     Data.Fixed.$fDataFixed2_info:
         const Data.Fixed.$fDataFixed2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.592159419 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgfoldl_closure" {
     Data.Fixed.$fDataFixed_$cgfoldl_closure:
         const Data.Fixed.$fDataFixed_$cgfoldl_info;
         const 0;
 },
 sat_sgr4r_entry() //  [R1]
         { []
         }
     {offset
       cgrcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrd0; else goto cgrd1;
       cgrd0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrd1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fDataFixed2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr4r_info" {
     sat_sgr4r_info:
         const sat_sgr4r_entry;
         const 1;
         const 16;
 },
 Data.Fixed.$fDataFixed_$cgfoldl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrd2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrd6; else goto cgrd5;
       cgrd6: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_$cgfoldl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrd5: // global
           I64[Hp - 16] = sat_sgr4r_info;
           P64[Hp] = R4;
           R4 = R5;
           _sgr4o::P64 = R3;
           R3 = Hp - 16;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgr4o::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgfoldl_info" {
     Data.Fixed.$fDataFixed_$cgfoldl_info:
         const Data.Fixed.$fDataFixed_$cgfoldl_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sgrd7_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.601485866 UTC

[section ""data" . Data.Fixed.$fEnumFixed1_closure" {
     Data.Fixed.$fEnumFixed1_closure:
         const Data.Fixed.$fEnumFixed1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fEnumFixed1_entry() //  [R1]
         { []
         }
     {offset
       cgrdo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrdp; else goto cgrdq;
       cgrdp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrdq: // global
           (_cgrdl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrdl::I64 == 0) goto cgrdn; else goto cgrdm;
       cgrdn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrdm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrdl::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed1_info" {
     Data.Fixed.$fEnumFixed1_info:
         const Data.Fixed.$fEnumFixed1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.616312878 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_info;
         const 0;
 },
 sat_sgr4B_entry() //  [R1]
         { []
         }
     {offset
       cgre2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgre3; else goto cgre4;
       cgre3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgre4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgre0_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr4B_info" {
     sat_sgr4B_info:
         const sat_sgr4B_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+16;
 },
 _cgre0() //  [R1]
         { []
         }
     {offset
       cgre0: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgr4x_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgre0_info" {
     block_cgre0_info:
         const _cgre0;
         const 1;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 go_sgr4x_entry() //  [R1, R2]
         { []
         }
     {offset
       cgreb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrec; else goto cgred;
       cgrec: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgred: // global
           I64[Sp - 32] = block_cgrdS_info;
           R3 = P64[R1 + 7];
           _sgr4y::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgr4y::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgr4x_info" {
     go_sgr4x_info:
         const go_sgr4x_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sgrd7_srt+16;
 },
 _cgrdS() //  [R1]
         { []
         }
     {offset
       cgrdS: // global
           if (R1 == 1) goto cgrea; else goto cgre9;
       cgrea: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgre9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgreh; else goto cgreg;
       cgreh: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgreg: // global
           I64[Hp - 56] = sat_sgr4B_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sgr4y::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgr4y::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgr4y::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrdS_info" {
     block_cgrdS_info:
         const _cgrdS;
         const 3;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 sat_sgr4G_entry() //  [R1]
         { []
         }
     {offset
       cgreC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgreD; else goto cgreE;
       cgreD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgreE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgreA_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr4G_info" {
     sat_sgr4G_info:
         const sat_sgr4G_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+16;
 },
 _cgreA() //  [R1]
         { []
         }
     {offset
       cgreA: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgr4C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgreA_info" {
     block_cgreA_info:
         const _cgreA;
         const 1;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 go_sgr4C_entry() //  [R1, R2]
         { []
         }
     {offset
       cgreL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgreM; else goto cgreN;
       cgreM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgreN: // global
           I64[Sp - 32] = block_cgres_info;
           R3 = P64[R1 + 7];
           _sgr4D::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgr4D::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgr4C_info" {
     go_sgr4C_info:
         const go_sgr4C_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sgrd7_srt+16;
 },
 _cgres() //  [R1]
         { []
         }
     {offset
       cgres: // global
           if (R1 == 1) goto cgreK; else goto cgreJ;
       cgreK: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgreJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgreR; else goto cgreQ;
       cgreR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgreQ: // global
           I64[Hp - 56] = sat_sgr4G_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           _sgr4D::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgr4D::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgr4D::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgres_info" {
     block_cgres_info:
         const _cgres;
         const 3;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgreV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgreW; else goto cgreX;
       cgreW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgreX: // global
           I64[Sp - 24] = block_cgrdF_info;
           _sgr4t::P64 = R3;
           R3 = R2;
           _sgr4s::P64 = R2;
           R2 = _sgr4t::P64;
           P64[Sp - 16] = _sgr4s::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromThenTo_info" {
     Data.Fixed.$fEnumFixed_$cenumFromThenTo_info:
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sgrd7_srt+16;
 },
 _cgrdF() //  [R1]
         { []
         }
     {offset
       cgrdF: // global
           I64[Sp - 8] = block_cgrdJ_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrdF_info" {
     block_cgrdF_info:
         const _cgrdF;
         const 2;
         const 38654705694;
         const Sgrd7_srt+16;
 },
 _cgrdJ() //  [R1]
         { []
         }
     {offset
       cgrdJ: // global
           _sgr4s::P64 = P64[Sp + 16];
           _sgr4u::P64 = P64[Sp + 24];
           _sgr4v::P64 = P64[Sp + 8];
           if (R1 == 1) goto cgrf4; else goto cgrf0;
       cgrf4: // global
           Hp = Hp + 24;
           _sgr4w::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cgrf7; else goto cgrf6;
       cgrf6: // global
           I64[Hp - 16] = go_sgr4C_info;
           P64[Hp - 8] = _sgr4u::P64;
           P64[Hp] = _sgr4v::P64;
           R2 = _sgr4s::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sgr4C_entry(R2, R1) args: 8, res: 0, upd: 8;
       cgrf0: // global
           Hp = Hp + 24;
           _sgr4w::I64 = R1;
           if (Hp > HpLim) (likely: False) goto cgrf7; else goto cgrf2;
       cgrf7: // global
           HpAlloc = 24;
           R1 = _sgr4w::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgrf2: // global
           I64[Hp - 16] = go_sgr4x_info;
           P64[Hp - 8] = _sgr4u::P64;
           P64[Hp] = _sgr4v::P64;
           R2 = _sgr4s::P64;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call go_sgr4x_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrdJ_info" {
     block_cgrdJ_info:
         const _cgrdJ;
         const 3;
         const 4294967326;
         const Sgrd7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.647116444 UTC

[section ""data" . sat_sgr4H_closure" {
     sat_sgr4H_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.649669961 UTC

[section ""data" . sat_sgr4I_closure" {
     sat_sgr4I_closure:
         const :_con_info;
         const sat_sgr4H_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.652648067 UTC

[section ""data" . Data.Fixed.$fEnumFixed2_closure" {
     Data.Fixed.$fEnumFixed2_closure:
         const Data.Fixed.$fEnumFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fEnumFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgrgn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrgo; else goto cgrgp;
       cgrgo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrgp: // global
           (_cgrgk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrgk::I64 == 0) goto cgrgm; else goto cgrgl;
       cgrgm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrgl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrgk::I64;
           R3 = sat_sgr4I_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed2_info" {
     Data.Fixed.$fEnumFixed2_info:
         const Data.Fixed.$fEnumFixed2_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.659161985 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromTo_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromTo_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromTo_info;
         const 0;
 },
 sat_sgr4P_entry() //  [R1]
         { []
         }
     {offset
       cgrgS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrgT; else goto cgrgU;
       cgrgT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrgU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgrgQ_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr4P_info" {
     sat_sgr4P_info:
         const sat_sgr4P_entry;
         const 2;
         const 141733920786;
         const Sgrd7_srt+16;
 },
 _cgrgQ() //  [R1]
         { []
         }
     {offset
       cgrgQ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgr4L_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrgQ_info" {
     block_cgrgQ_info:
         const _cgrgQ;
         const 1;
         const 141733920798;
         const Sgrd7_srt+16;
 },
 go_sgr4L_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrh1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrh2; else goto cgrh3;
       cgrh2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrh3: // global
           I64[Sp - 24] = block_cgrgI_info;
           R3 = P64[R1 + 7];
           _sgr4M::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sgr4M::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgr4L_info" {
     go_sgr4L_info:
         const go_sgr4L_entry;
         const 1;
         const 141733920777;
         const 4294967301;
         const Sgrd7_srt+16;
 },
 _cgrgI() //  [R1]
         { []
         }
     {offset
       cgrgI: // global
           if (R1 == 1) goto cgrh0; else goto cgrgZ;
       cgrh0: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgrgZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrh7; else goto cgrh6;
       cgrh7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgrh6: // global
           I64[Hp - 48] = sat_sgr4P_info;
           P64[Hp - 32] = P64[Sp + 8];
           _sgr4M::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sgr4M::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sgr4M::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrgI_info" {
     block_cgrgI_info:
         const _cgrgI;
         const 2;
         const 141733920798;
         const Sgrd7_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrhb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgrhf; else goto cgrhe;
       cgrhf: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrhe: // global
           I64[Hp - 8] = go_sgr4L_info;
           P64[Hp] = R3;
           R2 = R2;
           R1 = Hp - 7;
           call go_sgr4L_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromTo_info" {
     Data.Fixed.$fEnumFixed_$cenumFromTo_info:
         const Data.Fixed.$fEnumFixed_$cenumFromTo_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const Sgrd7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.672147499 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFromThen_closure" {
     Data.Fixed.$fEnumFixed_$cenumFromThen_closure:
         const Data.Fixed.$fEnumFixed_$cenumFromThen_info;
         const 0;
 },
 d_sgr4S_entry() //  [R1]
         { []
         }
     {offset
       cgrhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrhT; else goto cgrhU;
       cgrhT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrhU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_sgr4S_info" {
     d_sgr4S_info:
         const d_sgr4S_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+24;
 },
 sat_sgr4X_entry() //  [R1]
         { []
         }
     {offset
       cgrib: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgric; else goto cgrid;
       cgric: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrid: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgri9_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr4X_info" {
     sat_sgr4X_info:
         const sat_sgr4X_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+16;
 },
 _cgri9() //  [R1]
         { []
         }
     {offset
       cgri9: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sgr4T_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgri9_info" {
     block_cgri9_info:
         const _cgri9;
         const 1;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 go_sgr4T_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrih: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrij; else goto cgrik;
       cgrij: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrik: // global
           I64[Sp - 24] = block_cgri0_info;
           _sgr4T::P64 = R1;
           _sgr4S::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sgr4S::P64;
           P64[Sp - 8] = _sgr4T::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugrio; else goto cgri1;
       ugrio: // global
           call _cgri0(R1) args: 0, res: 0, upd: 0;
       cgri1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sgr4T_info" {
     go_sgr4T_info:
         const go_sgr4T_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+16;
 },
 _cgri0() //  [R1]
         { []
         }
     {offset
       cgri0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgrin; else goto cgrim;
       cgrin: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrim: // global
           I64[Hp - 56] = sat_sgr4X_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgri0_info" {
     block_cgri0_info:
         const _cgri0;
         const 2;
         const 4294967326;
         const Sgrd7_srt+16;
 },
 Data.Fixed.$fEnumFixed_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrip: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrit; else goto cgris;
       cgrit: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgris: // global
           I64[Hp - 40] = d_sgr4S_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = go_sgr4T_info;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 7;
           call go_sgr4T_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFromThen_info" {
     Data.Fixed.$fEnumFixed_$cenumFromThen_info:
         const Data.Fixed.$fEnumFixed_$cenumFromThen_entry;
         const 0;
         const 562640715790;
         const 8589934607;
         const Sgrd7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.688267781 UTC

[section ""data" . Data.Fixed.$fEnumFixed3_closure" {
     Data.Fixed.$fEnumFixed3_closure:
         const Data.Fixed.$fEnumFixed3_info;
         const 0;
 },
 sat_sgr51_entry() //  [R1]
         { []
         }
     {offset
       cgrjk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrjl; else goto cgrjm;
       cgrjl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrjm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgrji_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr51_info" {
     sat_sgr51_info:
         const sat_sgr51_entry;
         const 1;
         const 1241245548560;
         const Sgrd7_srt+16;
 },
 _cgrji() //  [R1]
         { []
         }
     {offset
       cgrji: // global
           R2 = R1;
           Sp = Sp + 8;
           call Data.Fixed.$fEnumFixed3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrji_info" {
     block_cgrji_info:
         const _cgrji;
         const 0;
         const 4294967326;
         const Sgrd7_srt+80;
 },
 Data.Fixed.$fEnumFixed3_entry() //  [R2]
         { []
         }
     {offset
       cgrjq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgrjs; else goto cgrjt;
       cgrjs: // global
           R2 = R2;
           R1 = Data.Fixed.$fEnumFixed3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrjt: // global
           I64[Sp - 8] = block_cgrj9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrjx; else goto cgrja;
       ugrjx: // global
           call _cgrj9(R1) args: 0, res: 0, upd: 0;
       cgrja: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed3_info" {
     Data.Fixed.$fEnumFixed3_info:
         const Data.Fixed.$fEnumFixed3_entry;
         const 0;
         const 1241245548558;
         const 4294967301;
         const Sgrd7_srt+16;
 },
 _cgrj9() //  [R1]
         { []
         }
     {offset
       cgrj9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrjw; else goto cgrjv;
       cgrjw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrjv: // global
           I64[Hp - 40] = sat_sgr51_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrj9_info" {
     block_cgrj9_info:
         const _cgrj9;
         const 0;
         const 1241245548574;
         const Sgrd7_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.698903496 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cenumFrom_closure" {
     Data.Fixed.$fEnumFixed_$cenumFrom_closure:
         const Data.Fixed.$fEnumFixed_$cenumFrom_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cgrjZ: // global
           R2 = R2;
           call Data.Fixed.$fEnumFixed3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cenumFrom_info" {
     Data.Fixed.$fEnumFixed_$cenumFrom_info:
         const Data.Fixed.$fEnumFixed_$cenumFrom_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.702899385 UTC

[section ""data" . Data.Fixed.$fEnumFixed_$cfromEnum_closure" {
     Data.Fixed.$fEnumFixed_$cfromEnum_closure:
         const Data.Fixed.$fEnumFixed_$cfromEnum_info;
 },
 Data.Fixed.$fEnumFixed_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cgrka: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cfromEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed_$cfromEnum_info" {
     Data.Fixed.$fEnumFixed_$cfromEnum_info:
         const Data.Fixed.$fEnumFixed_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.707292259 UTC

[section ""data" . Data.Fixed.$fEnumFixed4_closure" {
     Data.Fixed.$fEnumFixed4_closure:
         const Data.Fixed.$fEnumFixed4_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed4_entry() //  [R2]
         { []
         }
     {offset
       cgrkl: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cpred_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed4_info" {
     Data.Fixed.$fEnumFixed4_info:
         const Data.Fixed.$fEnumFixed4_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.712075238 UTC

[section ""data" . Data.Fixed.$fEnumFixed5_closure" {
     Data.Fixed.$fEnumFixed5_closure:
         const Data.Fixed.$fEnumFixed5_info;
         const 0;
 },
 Data.Fixed.$fEnumFixed5_entry() //  [R2]
         { []
         }
     {offset
       cgrkw: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$csucc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fEnumFixed5_info" {
     Data.Fixed.$fEnumFixed5_info:
         const Data.Fixed.$fEnumFixed5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.715968241 UTC

[section ""data" . Data.Fixed.$fEnumFixed_closure" {
     Data.Fixed.$fEnumFixed_closure:
         const GHC.Enum.C:Enum_con_info;
         const Data.Fixed.$fEnumFixed5_closure+1;
         const Data.Fixed.$fEnumFixed4_closure+1;
         const GHC.Enum.$fEnumInteger_$ctoEnum_closure+1;
         const Data.Fixed.$fEnumFixed_$cfromEnum_closure+1;
         const Data.Fixed.$fEnumFixed_$cenumFrom_closure+1;
         const Data.Fixed.$fEnumFixed_$cenumFromThen_closure+2;
         const Data.Fixed.$fEnumFixed_$cenumFromTo_closure+2;
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.718413249 UTC

[section ""data" . Data.Fixed.$fHasResolutionE0_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE0_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE0_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE0_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrkI: // global
           R1 = Data.Fixed.$fEnumFixed2_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE0_$cresolution_info" {
     Data.Fixed.$fHasResolutionE0_$cresolution_info:
         const Data.Fixed.$fHasResolutionE0_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.722270936 UTC

[section ""data" . Data.Fixed.$fHasResolutionE0_closure" {
     Data.Fixed.$fHasResolutionE0_closure:
         const Data.Fixed.$fHasResolutionE0_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE0_entry() //  [R2]
         { []
         }
     {offset
       cgrkU: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE0_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE0_info" {
     Data.Fixed.$fHasResolutionE0_info:
         const Data.Fixed.$fHasResolutionE0_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.725532714 UTC

[section ""data" . sat_sgr57_closure" {
     sat_sgr57_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.727357011 UTC

[section ""data" . sat_sgr58_closure" {
     sat_sgr58_closure:
         const :_con_info;
         const sat_sgr57_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.729882736 UTC

[section ""data" . Data.Fixed.$fHasResolutionE4_closure" {
     Data.Fixed.$fHasResolutionE4_closure:
         const Data.Fixed.$fHasResolutionE4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE4_entry() //  [R1]
         { []
         }
     {offset
       cgrl9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrla; else goto cgrlb;
       cgrla: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrlb: // global
           (_cgrl6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrl6::I64 == 0) goto cgrl8; else goto cgrl7;
       cgrl8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrl7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrl6::I64;
           R3 = sat_sgr58_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE4_info" {
     Data.Fixed.$fHasResolutionE4_info:
         const Data.Fixed.$fHasResolutionE4_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.734767881 UTC

[section ""data" . Data.Fixed.$fHasResolutionE1_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE1_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE1_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE1_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrlp: // global
           R1 = Data.Fixed.$fHasResolutionE4_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE1_$cresolution_info" {
     Data.Fixed.$fHasResolutionE1_$cresolution_info:
         const Data.Fixed.$fHasResolutionE1_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.739193232 UTC

[section ""data" . Data.Fixed.$fHasResolutionE1_closure" {
     Data.Fixed.$fHasResolutionE1_closure:
         const Data.Fixed.$fHasResolutionE1_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE1_entry() //  [R2]
         { []
         }
     {offset
       cgrlB: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE1_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE1_info" {
     Data.Fixed.$fHasResolutionE1_info:
         const Data.Fixed.$fHasResolutionE1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.742460674 UTC

[section ""data" . sat_sgr5a_closure" {
     sat_sgr5a_closure:
         const GHC.Types.I#_con_info;
         const 100;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.744235613 UTC

[section ""data" . sat_sgr5b_closure" {
     sat_sgr5b_closure:
         const :_con_info;
         const sat_sgr5a_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.746992343 UTC

[section ""data" . Data.Fixed.$fHasResolutionE7_closure" {
     Data.Fixed.$fHasResolutionE7_closure:
         const Data.Fixed.$fHasResolutionE7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE7_entry() //  [R1]
         { []
         }
     {offset
       cgrlQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrlR; else goto cgrlS;
       cgrlR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrlS: // global
           (_cgrlN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrlN::I64 == 0) goto cgrlP; else goto cgrlO;
       cgrlP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrlO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrlN::I64;
           R3 = sat_sgr5b_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE7_info" {
     Data.Fixed.$fHasResolutionE7_info:
         const Data.Fixed.$fHasResolutionE7_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.751058163 UTC

[section ""data" . Data.Fixed.$fHasResolutionE2_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE2_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE2_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE2_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrm6: // global
           R1 = Data.Fixed.$fHasResolutionE7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE2_$cresolution_info" {
     Data.Fixed.$fHasResolutionE2_$cresolution_info:
         const Data.Fixed.$fHasResolutionE2_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.754476244 UTC

[section ""data" . Data.Fixed.$fHasResolutionE2_closure" {
     Data.Fixed.$fHasResolutionE2_closure:
         const Data.Fixed.$fHasResolutionE2_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE2_entry() //  [R2]
         { []
         }
     {offset
       cgrmi: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE2_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE2_info" {
     Data.Fixed.$fHasResolutionE2_info:
         const Data.Fixed.$fHasResolutionE2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.757818505 UTC

[section ""data" . sat_sgr5d_closure" {
     sat_sgr5d_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.759629019 UTC

[section ""data" . sat_sgr5e_closure" {
     sat_sgr5e_closure:
         const :_con_info;
         const sat_sgr5d_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.762216062 UTC

[section ""data" . Data.Fixed.$fHasResolutionE8_closure" {
     Data.Fixed.$fHasResolutionE8_closure:
         const Data.Fixed.$fHasResolutionE8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE8_entry() //  [R1]
         { []
         }
     {offset
       cgrmx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrmy; else goto cgrmz;
       cgrmy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrmz: // global
           (_cgrmu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrmu::I64 == 0) goto cgrmw; else goto cgrmv;
       cgrmw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrmv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrmu::I64;
           R3 = sat_sgr5e_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE8_info" {
     Data.Fixed.$fHasResolutionE8_info:
         const Data.Fixed.$fHasResolutionE8_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.76704581 UTC

[section ""data" . Data.Fixed.$fHasResolutionE3_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE3_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE3_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE3_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrmN: // global
           R1 = Data.Fixed.$fHasResolutionE8_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE3_$cresolution_info" {
     Data.Fixed.$fHasResolutionE3_$cresolution_info:
         const Data.Fixed.$fHasResolutionE3_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.771236696 UTC

[section ""data" . Data.Fixed.$fHasResolutionE3_closure" {
     Data.Fixed.$fHasResolutionE3_closure:
         const Data.Fixed.$fHasResolutionE3_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE3_entry() //  [R2]
         { []
         }
     {offset
       cgrmZ: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE3_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE3_info" {
     Data.Fixed.$fHasResolutionE3_info:
         const Data.Fixed.$fHasResolutionE3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.774533878 UTC

[section ""data" . sat_sgr5g_closure" {
     sat_sgr5g_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.776396367 UTC

[section ""data" . sat_sgr5h_closure" {
     sat_sgr5h_closure:
         const :_con_info;
         const sat_sgr5g_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.778767658 UTC

[section ""data" . Data.Fixed.$fHasResolutionE10_closure" {
     Data.Fixed.$fHasResolutionE10_closure:
         const Data.Fixed.$fHasResolutionE10_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE10_entry() //  [R1]
         { []
         }
     {offset
       cgrne: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrnf; else goto cgrng;
       cgrnf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrng: // global
           (_cgrnb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrnb::I64 == 0) goto cgrnd; else goto cgrnc;
       cgrnd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrnc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrnb::I64;
           R3 = sat_sgr5h_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE10_info" {
     Data.Fixed.$fHasResolutionE10_info:
         const Data.Fixed.$fHasResolutionE10_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.783002742 UTC

[section ""data" . Data.Fixed.$fHasResolutionE6_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE6_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE6_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE6_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrnu: // global
           R1 = Data.Fixed.$fHasResolutionE10_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE6_$cresolution_info" {
     Data.Fixed.$fHasResolutionE6_$cresolution_info:
         const Data.Fixed.$fHasResolutionE6_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.787158998 UTC

[section ""data" . Data.Fixed.$fHasResolutionE6_closure" {
     Data.Fixed.$fHasResolutionE6_closure:
         const Data.Fixed.$fHasResolutionE6_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE6_entry() //  [R2]
         { []
         }
     {offset
       cgrnG: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE6_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE6_info" {
     Data.Fixed.$fHasResolutionE6_info:
         const Data.Fixed.$fHasResolutionE6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.790668331 UTC

[section ""data" . sat_sgr5j_closure" {
     sat_sgr5j_closure:
         const GHC.Types.I#_con_info;
         const 1000000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.793187471 UTC

[section ""data" . sat_sgr5k_closure" {
     sat_sgr5k_closure:
         const :_con_info;
         const sat_sgr5j_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.795767463 UTC

[section ""data" . Data.Fixed.$fHasResolutionE11_closure" {
     Data.Fixed.$fHasResolutionE11_closure:
         const Data.Fixed.$fHasResolutionE11_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE11_entry() //  [R1]
         { []
         }
     {offset
       cgrnV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrnW; else goto cgrnX;
       cgrnW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrnX: // global
           (_cgrnS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrnS::I64 == 0) goto cgrnU; else goto cgrnT;
       cgrnU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrnT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrnS::I64;
           R3 = sat_sgr5k_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE11_info" {
     Data.Fixed.$fHasResolutionE11_info:
         const Data.Fixed.$fHasResolutionE11_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.800066278 UTC

[section ""data" . Data.Fixed.$fHasResolutionE9_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE9_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE9_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE9_$cresolution_entry() //  []
         { []
         }
     {offset
       cgrob: // global
           R1 = Data.Fixed.$fHasResolutionE11_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE9_$cresolution_info" {
     Data.Fixed.$fHasResolutionE9_$cresolution_info:
         const Data.Fixed.$fHasResolutionE9_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.803618245 UTC

[section ""data" . Data.Fixed.$fHasResolutionE9_closure" {
     Data.Fixed.$fHasResolutionE9_closure:
         const Data.Fixed.$fHasResolutionE9_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE9_entry() //  [R2]
         { []
         }
     {offset
       cgron: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE9_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE9_info" {
     Data.Fixed.$fHasResolutionE9_info:
         const Data.Fixed.$fHasResolutionE9_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.806864027 UTC

[section ""data" . sat_sgr5n_closure" {
     sat_sgr5n_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.80864967 UTC

[section ""data" . sat_sgr5o_closure" {
     sat_sgr5o_closure:
         const :_con_info;
         const sat_sgr5n_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.810424981 UTC

[section ""data" . sat_sgr5m_closure" {
     sat_sgr5m_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.812279777 UTC

[section ""data" . sat_sgr5p_closure" {
     sat_sgr5p_closure:
         const :_con_info;
         const sat_sgr5m_closure+1;
         const sat_sgr5o_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.815090057 UTC

[section ""data" . Data.Fixed.$fHasResolutionE5_closure" {
     Data.Fixed.$fHasResolutionE5_closure:
         const Data.Fixed.$fHasResolutionE5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fHasResolutionE5_entry() //  [R1]
         { []
         }
     {offset
       cgroE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgroF; else goto cgroG;
       cgroF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgroG: // global
           (_cgroB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgroB::I64 == 0) goto cgroD; else goto cgroC;
       cgroD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgroC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgroB::I64;
           R3 = sat_sgr5p_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE5_info" {
     Data.Fixed.$fHasResolutionE5_info:
         const Data.Fixed.$fHasResolutionE5_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.820214347 UTC

[section ""data" . Data.Fixed.$fHasResolutionE12_$cresolution_closure" {
     Data.Fixed.$fHasResolutionE12_$cresolution_closure:
         const Data.Fixed.$fHasResolutionE12_$cresolution_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE12_$cresolution_entry() //  []
         { []
         }
     {offset
       cgroU: // global
           R1 = Data.Fixed.$fHasResolutionE5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE12_$cresolution_info" {
     Data.Fixed.$fHasResolutionE12_$cresolution_info:
         const Data.Fixed.$fHasResolutionE12_$cresolution_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.824294202 UTC

[section ""data" . Data.Fixed.$fHasResolutionE12_closure" {
     Data.Fixed.$fHasResolutionE12_closure:
         const Data.Fixed.$fHasResolutionE12_info;
         const 0;
 },
 Data.Fixed.$fHasResolutionE12_entry() //  [R2]
         { []
         }
     {offset
       cgrp6: // global
           R2 = R2;
           call Data.Fixed.$fHasResolutionE12_$cresolution_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fHasResolutionE12_info" {
     Data.Fixed.$fHasResolutionE12_info:
         const Data.Fixed.$fHasResolutionE12_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.827639704 UTC

[section ""cstring" . Data.Fixed.$fDataFixed6_bytes" {
     Data.Fixed.$fDataFixed6_bytes:
         I8[] [68,97,116,97,46,70,105,120,101,100,46,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.830770233 UTC

[section ""data" . Data.Fixed.$fDataFixed5_closure" {
     Data.Fixed.$fDataFixed5_closure:
         const Data.Fixed.$fDataFixed5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fDataFixed5_entry() //  [R1]
         { []
         }
     {offset
       cgrpk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrpl; else goto cgrpm;
       cgrpl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrpm: // global
           (_cgrph::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrph::I64 == 0) goto cgrpj; else goto cgrpi;
       cgrpj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrpi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrph::I64;
           R2 = Data.Fixed.$fDataFixed6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed5_info" {
     Data.Fixed.$fDataFixed5_info:
         const Data.Fixed.$fDataFixed5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.83452863 UTC

[section ""cstring" . w1_rgoyk_bytes" {
     w1_rgoyk_bytes:
         I8[] [77,107,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.836863845 UTC

[section ""data" . w2_rgoyl_closure" {
     w2_rgoyl_closure:
         const w2_rgoyl_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rgoyl_entry() //  [R1]
         { []
         }
     {offset
       cgrpC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrpD; else goto cgrpE;
       cgrpD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrpE: // global
           (_cgrpz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrpz::I64 == 0) goto cgrpB; else goto cgrpA;
       cgrpB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrpA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrpz::I64;
           R2 = w1_rgoyk_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_rgoyl_info" {
     w2_rgoyl_info:
         const w2_rgoyl_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.843520489 UTC

[section ""data" . go61_rgoym_closure" {
     go61_rgoym_closure:
         const go61_rgoym_info;
         const 0;
 },
 go61_rgoym_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrpY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrpZ; else goto ugrqC;
       cgrpZ: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgoym_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ugrqC: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgrpO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgoym_info" {
     go61_rgoym_info:
         const go61_rgoym_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sgrd7_srt+256;
 },
 _cgrpO() //  []
         { []
         }
     {offset
       cgrpO: // global
           _sgr5r::P64 = P64[Sp];
           I64[Sp] = block_cgrpR_info;
           R1 = _sgr5r::P64;
           if (R1 & 7 != 0) goto ugrqG; else goto cgrpS;
       ugrqG: // global
           call _cgrpR(R1) args: 0, res: 0, upd: 0;
       cgrpS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgrpR() //  [R1]
         { []
         }
     {offset
       cgrpR: // global
           if (R1 & 7 == 1) goto ugrqD; else goto cgrpW;
       ugrqD: // global
           Sp = Sp + 16;
           call _cgrqe() args: 0, res: 0, upd: 0;
       cgrpW: // global
           I64[Sp - 8] = block_cgrq6_info;
           _sgr5u::P64 = P64[R1 + 6];
           _sgr5v::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgr5v::P64;
           P64[Sp + 8] = _sgr5u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrqH; else goto cgrq8;
       ugrqH: // global
           call _cgrq6(R1) args: 0, res: 0, upd: 0;
       cgrq8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrpR_info" {
     block_cgrpR_info:
         const _cgrpR;
         const 1;
         const 12884901918;
         const Sgrd7_srt+256;
 },
 _cgrq6() //  [R1]
         { []
         }
     {offset
       cgrq6: // global
           if (R1 & 7 == 1) goto ugrqE; else goto cgrqj;
       ugrqE: // global
           Sp = Sp + 24;
           call _cgrqe() args: 0, res: 0, upd: 0;
       cgrqj: // global
           I64[Sp - 8] = block_cgrqh_info;
           _sgr5x::P64 = P64[R1 + 6];
           _sgr5y::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgr5y::P64;
           P64[Sp + 16] = _sgr5x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrqK; else goto cgrqk;
       ugrqK: // global
           call _cgrqh(R1) args: 0, res: 0, upd: 0;
       cgrqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrq6_info" {
     block_cgrq6_info:
         const _cgrq6;
         const 2;
         const 12884901918;
         const Sgrd7_srt+256;
 },
 _cgrqe() //  []
         { []
         }
     {offset
       cgrqe: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgrqh() //  [R1]
         { []
         }
     {offset
       cgrqh: // global
           I64[Sp] = block_cgrqo_info;
           R3 = w2_rgoyl_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrqh_info" {
     block_cgrqh_info:
         const _cgrqh;
         const 3;
         const 12884901918;
         const Sgrd7_srt+256;
 },
 _cgrqo() //  [R1]
         { []
         }
     {offset
       cgrqo: // global
           if (R1 & 7 == 1) goto cgrqv; else goto cgrqz;
       cgrqv: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgrpO() args: 0, res: 0, upd: 0;
       cgrqz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrqo_info" {
     block_cgrqo_info:
         const _cgrqo;
         const 3;
         const 12884901918;
         const Sgrd7_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.857671711 UTC

[section ""data" . conMkFixed1_rgoyn_closure" {
     conMkFixed1_rgoyn_closure:
         const Data.Data.AlgConstr_con_info;
         const conMkFixed2_rgoyo_closure;
         const 0;
 },
 section ""data" . Data.Fixed.$fDataFixed4_closure" {
     Data.Fixed.$fDataFixed4_closure:
         const :_con_info;
         const Data.Fixed.conMkFixed_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Fixed.$fDataFixed3_closure" {
     Data.Fixed.$fDataFixed3_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Fixed.$fDataFixed4_closure+2;
         const 0;
 },
 section ""data" . Data.Fixed.tyFixed_closure" {
     Data.Fixed.tyFixed_closure:
         const Data.Data.DataType_con_info;
         const Data.Fixed.$fDataFixed5_closure;
         const Data.Fixed.$fDataFixed3_closure+1;
         const 0;
 },
 section ""data" . Data.Fixed.conMkFixed_closure" {
     Data.Fixed.conMkFixed_closure:
         const Data.Data.Constr_con_info;
         const conMkFixed1_rgoyn_closure+1;
         const w2_rgoyl_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Fixed.tyFixed_closure+1;
         const 0;
 },
 section ""data" . conMkFixed2_rgoyo_closure" {
     conMkFixed2_rgoyo_closure:
         const conMkFixed2_rgoyo_info;
         const 0;
         const 0;
         const 0;
 },
 conMkFixed2_rgoyo_entry() //  [R1]
         { []
         }
     {offset
       cgrrv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrrw; else goto cgrrx;
       cgrrw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrrx: // global
           (_cgrrs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrrs::I64 == 0) goto cgrru; else goto cgrrt;
       cgrru: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrrt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrrs::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Fixed.$fDataFixed4_closure+2;
           Sp = Sp - 16;
           call go61_rgoym_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . conMkFixed2_rgoyo_info" {
     conMkFixed2_rgoyo_info:
         const conMkFixed2_rgoyo_entry;
         const 0;
         const 30064771093;
         const Sgrd7_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.864941948 UTC

[section ""cstring" . Data.Fixed.$trModule4_bytes" {
     Data.Fixed.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.867452337 UTC

[section ""data" . loc_rgoyp_closure" {
     loc_rgoyp_closure:
         const loc_rgoyp_info;
         const 0;
         const 0;
         const 0;
 },
 loc_rgoyp_entry() //  [R1]
         { []
         }
     {offset
       cgrrS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrrT; else goto cgrrU;
       cgrrT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrrU: // global
           (_cgrrP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrrP::I64 == 0) goto cgrrR; else goto cgrrQ;
       cgrrR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrrQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrrP::I64;
           R2 = Data.Fixed.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_rgoyp_info" {
     loc_rgoyp_info:
         const loc_rgoyp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.871395648 UTC

[section ""cstring" . Data.Fixed.$trModule2_bytes" {
     Data.Fixed.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.874017536 UTC

[section ""data" . loc1_rgoyq_closure" {
     loc1_rgoyq_closure:
         const loc1_rgoyq_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rgoyq_entry() //  [R1]
         { []
         }
     {offset
       cgrsa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrsb; else goto cgrsc;
       cgrsb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrsc: // global
           (_cgrs7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrs7::I64 == 0) goto cgrs9; else goto cgrs8;
       cgrs9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrs8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrs7::I64;
           R2 = Data.Fixed.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rgoyq_info" {
     loc1_rgoyq_info:
         const loc1_rgoyq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.878505175 UTC

[section ""cstring" . loc2_rgoyr_bytes" {
     loc2_rgoyr_bytes:
         I8[] [46,47,68,97,116,97,47,70,105,120,101,100,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.880904456 UTC

[section ""data" . loc3_rgoys_closure" {
     loc3_rgoys_closure:
         const loc3_rgoys_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_rgoys_entry() //  [R1]
         { []
         }
     {offset
       cgrss: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrst; else goto cgrsu;
       cgrst: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrsu: // global
           (_cgrsp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrsp::I64 == 0) goto cgrsr; else goto cgrsq;
       cgrsr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrsq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrsp::I64;
           R2 = loc2_rgoyr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_rgoys_info" {
     loc3_rgoys_info:
         const loc3_rgoys_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.884804681 UTC

[section ""data" . loc4_rgoyt_closure" {
     loc4_rgoyt_closure:
         const GHC.Types.I#_con_info;
         const 83;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.886643215 UTC

[section ""data" . loc5_rgoyu_closure" {
     loc5_rgoyu_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.888446386 UTC

[section ""data" . loc6_rgoyv_closure" {
     loc6_rgoyv_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.890185675 UTC

[section ""cstring" . $dIP_rgoyw_bytes" {
     $dIP_rgoyw_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.892662681 UTC

[section ""data" . $dIP1_rgoyx_closure" {
     $dIP1_rgoyx_closure:
         const $dIP1_rgoyx_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_rgoyx_entry() //  [R1]
         { []
         }
     {offset
       cgrsN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrsO; else goto cgrsP;
       cgrsO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrsP: // global
           (_cgrsK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrsK::I64 == 0) goto cgrsM; else goto cgrsL;
       cgrsM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrsL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrsK::I64;
           R2 = $dIP_rgoyw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_rgoyx_info" {
     $dIP1_rgoyx_info:
         const $dIP1_rgoyx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.89703844 UTC

[section ""data" . $dIP2_rgoyy_closure" {
     $dIP2_rgoyy_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_rgoyp_closure;
         const loc1_rgoyq_closure;
         const loc3_rgoys_closure;
         const loc4_rgoyt_closure+1;
         const loc5_rgoyu_closure+1;
         const loc4_rgoyt_closure+1;
         const loc6_rgoyv_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.899100842 UTC

[section ""data" . $dIP3_rgoyz_closure" {
     $dIP3_rgoyz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rgoyx_closure;
         const $dIP2_rgoyy_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.901068526 UTC

[section ""data" . Data.Fixed.$trModule3_closure" {
     Data.Fixed.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.903014924 UTC

[section ""data" . Data.Fixed.$trModule1_closure" {
     Data.Fixed.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.905662239 UTC

[section ""data" . Data.Fixed.$trModule_closure" {
     Data.Fixed.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Fixed.$trModule3_closure+1;
         const Data.Fixed.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.907461911 UTC

[section ""data" . $krep_rgoyA_closure" {
     $krep_rgoyA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.909219952 UTC

[section ""data" . $krep1_rgoyB_closure" {
     $krep1_rgoyB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.911032203 UTC

[section ""data" . Data.Fixed.$tcHasResolution1_closure" {
     Data.Fixed.$tcHasResolution1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rgoyB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.9128714 UTC

[section ""data" . $krep2_rgoyC_closure" {
     $krep2_rgoyC_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.91472724 UTC

[section ""cstring" . Data.Fixed.$fDataFixed10_bytes" {
     Data.Fixed.$fDataFixed10_bytes:
         I8[] [70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.91645074 UTC

[section ""data" . Data.Fixed.$fDataFixed9_closure" {
     Data.Fixed.$fDataFixed9_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$fDataFixed10_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.918326699 UTC

[section ""data" . Data.Fixed.$tcFixed_closure" {
     Data.Fixed.$tcFixed_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$fDataFixed9_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12850707307297787398;
         const 5875431371990069009;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.920273768 UTC

[section ""data" . $krep3_rgoyD_closure" {
     $krep3_rgoyD_closure:
         const :_con_info;
         const $krep2_rgoyC_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.922144344 UTC

[section ""data" . $krep4_rgoyE_closure" {
     $krep4_rgoyE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Fixed.$tcFixed_closure+1;
         const $krep3_rgoyD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.924011297 UTC

[section ""data" . Data.Fixed.$tc'MkFixed1_closure" {
     Data.Fixed.$tc'MkFixed1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgoyA_closure+1;
         const $krep4_rgoyE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.92603445 UTC

[section ""cstring" . Data.Fixed.$tc'MkFixed3_bytes" {
     Data.Fixed.$tc'MkFixed3_bytes:
         I8[] [39,77,107,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.927885982 UTC

[section ""data" . Data.Fixed.$tc'MkFixed2_closure" {
     Data.Fixed.$tc'MkFixed2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tc'MkFixed3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.929884303 UTC

[section ""data" . Data.Fixed.$tc'MkFixed_closure" {
     Data.Fixed.$tc'MkFixed_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tc'MkFixed2_closure+1;
         const Data.Fixed.$tc'MkFixed1_closure+4;
         const 8992689233320522225;
         const 9587721628087041380;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.934019661 UTC

[section ""data" . Data.Fixed.$fDataFixed8_closure" {
     Data.Fixed.$fDataFixed8_closure:
         const Data.Fixed.$fDataFixed8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fDataFixed8_entry() //  [R1]
         { []
         }
     {offset
       cgrtr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgrts; else goto cgrtt;
       cgrts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrtt: // global
           (_cgrtj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrtj::I64 == 0) goto cgrtl; else goto cgrtk;
       cgrtl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrtk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrtj::I64;
           I64[Sp - 24] = block_cgrtm_info;
           R6 = 0;
           R5 = Data.Fixed.$fDataFixed9_closure+1;
           R4 = Data.Fixed.$trModule_closure+1;
           R3 = 5875431371990069009;
           R2 = 12850707307297787398;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed8_info" {
     Data.Fixed.$fDataFixed8_info:
         const Data.Fixed.$fDataFixed8_entry;
         const 0;
         const 4294967317;
         const Sgrd7_srt+296;
 },
 _cgrtm() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgrtm: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgrtn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgrtm_info" {
     block_cgrtm_info:
         const _cgrtm;
         const 0;
         const 30;
 },
 _cgrtn() //  []
         { []
         }
     {offset
       cgrtn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrtw; else goto cgrtv;
       cgrtw: // global
           HpAlloc = 48;
           I64[Sp] = block_cgrtn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cgrtv: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrtn_info" {
     block_cgrtn_info:
         const _cgrtn;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.942017885 UTC

[section ""data" . Data.Fixed.$fDataFixed7_closure" {
     Data.Fixed.$fDataFixed7_closure:
         const Data.Fixed.$fDataFixed7_info;
         const 0;
 },
 Data.Fixed.$fDataFixed7_entry() //  [R2]
         { []
         }
     {offset
       cgru3: // global
           R3 = R2;
           R2 = Data.Fixed.$fDataFixed8_closure;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed7_info" {
     Data.Fixed.$fDataFixed7_info:
         const Data.Fixed.$fDataFixed7_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sgrd7_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.945418083 UTC

[section ""data" . Data.Fixed.$fDataFixed1_closure" {
     Data.Fixed.$fDataFixed1_closure:
         const (,)_con_info;
         const Data.Fixed.$fDataFixed2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.956336378 UTC

[section ""data" . Data.Fixed.$w$cgmapMp_closure" {
     Data.Fixed.$w$cgmapMp_closure:
         const Data.Fixed.$w$cgmapMp_info;
         const 0;
 },
 lvl17_sgr5Q_entry() //  [R1]
         { []
         }
     {offset
       cgruj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgruk; else goto cgrul;
       cgruk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgr5Q_info" {
     lvl17_sgr5Q_info:
         const lvl17_sgr5Q_entry;
         const 1;
         const 16;
 },
 sat_sgr6d_entry() //  [R1, R2]
         { []
         }
     {offset
       cgruy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgruz; else goto cgruA;
       cgruz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgruA: // global
           I64[Sp - 24] = block_cgruv_info;
           _sgr5Q::P64 = P64[R1 + 7];
           _sgr5R::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgr5Q::P64;
           P64[Sp - 8] = _sgr5R::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugruS; else goto cgruw;
       ugruS: // global
           call _cgruv(R1) args: 0, res: 0, upd: 0;
       cgruw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr6d_info" {
     sat_sgr6d_info:
         const sat_sgr6d_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgruv() //  [R1]
         { []
         }
     {offset
       cgruv: // global
           I64[Sp - 8] = block_cgruD_info;
           _sgr6a::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgr6a::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugruR; else goto cgruF;
       ugruR: // global
           call _cgruD(R1) args: 0, res: 0, upd: 0;
       cgruF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgruv_info" {
     block_cgruv_info:
         const _cgruv;
         const 2;
         const 30;
 },
 _cgruD() //  [R1]
         { []
         }
     {offset
       cgruD: // global
           if (R1 & 7 == 1) goto cgruL; else goto cgruP;
       cgruL: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgruP: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgruD_info" {
     block_cgruD_info:
         const _cgruD;
         const 3;
         const 30;
 },
 lvl18_sgr5S_entry() //  [R1]
         { []
         }
     {offset
       cgrv1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrv2; else goto cgrv3;
       cgrv2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrv3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgr5S_info" {
     lvl18_sgr5S_info:
         const lvl18_sgr5S_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 sat_sgr65_entry() //  [R1]
         { []
         }
     {offset
       cgrvk: // global
           _sgr65::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgrvl; else goto cgrvm;
       cgrvm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrvo; else goto cgrvn;
       cgrvo: // global
           HpAlloc = 56;
           goto cgrvl;
       cgrvl: // global
           R1 = _sgr65::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrvn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr65::P64;
           _sgr5P::P64 = P64[_sgr65::P64 + 16];
           _sgr5R::P64 = P64[_sgr65::P64 + 24];
           _sgr5W::P64 = P64[_sgr65::P64 + 32];
           _sgr5X::P64 = P64[_sgr65::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgr5W::P64;
           P64[Hp - 24] = _sgr5P::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgr5X::P64;
           R2 = _sgr5R::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr65_info" {
     sat_sgr65_info:
         const sat_sgr65_entry;
         const 4;
         const 15;
 },
 sat_sgr61_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrvA: // global
           _sgr5Y::P64 = R2;
           _sgr61::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgrvB; else goto cgrvC;
       cgrvC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrvE; else goto cgrvD;
       cgrvE: // global
           HpAlloc = 56;
           goto cgrvB;
       cgrvB: // global
           R2 = _sgr5Y::P64;
           R1 = _sgr61::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrvD: // global
           _sgr5R::P64 = P64[_sgr61::P64 + 7];
           _sgr5W::P64 = P64[_sgr61::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgr5W::P64;
           P64[Hp - 24] = _sgr5Y::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgr5R::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr61_info" {
     sat_sgr61_info:
         const sat_sgr61_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgr62_entry() //  [R1]
         { []
         }
     {offset
       cgrvF: // global
           _sgr62::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrvG; else goto cgrvH;
       cgrvH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrvJ; else goto cgrvI;
       cgrvJ: // global
           HpAlloc = 24;
           goto cgrvG;
       cgrvG: // global
           R1 = _sgr62::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrvI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr62::P64;
           _sgr5R::P64 = P64[_sgr62::P64 + 16];
           _sgr5S::P64 = P64[_sgr62::P64 + 24];
           _sgr5W::P64 = P64[_sgr62::P64 + 32];
           I64[Hp - 16] = sat_sgr61_info;
           P64[Hp - 8] = _sgr5R::P64;
           P64[Hp] = _sgr5W::P64;
           R2 = _sgr5R::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgr5S::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr62_info" {
     sat_sgr62_info:
         const sat_sgr62_entry;
         const 3;
         const 15;
 },
 sat_sgr66_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrvK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgrvL; else goto cgrvM;
       cgrvL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrvM: // global
           I64[Sp - 40] = block_cgrv9_info;
           _sgr5N::P64 = P64[R1 + 7];
           _sgr5P::P64 = P64[R1 + 15];
           _sgr5R::P64 = P64[R1 + 23];
           _sgr5S::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgr5N::P64;
           P64[Sp - 24] = _sgr5P::P64;
           P64[Sp - 16] = _sgr5R::P64;
           P64[Sp - 8] = _sgr5S::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugrvQ; else goto cgrva;
       ugrvQ: // global
           call _cgrv9(R1) args: 0, res: 0, upd: 0;
       cgrva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr66_info" {
     sat_sgr66_info:
         const sat_sgr66_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgrv9() //  [R1]
         { []
         }
     {offset
       cgrv9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgrvP; else goto cgrvO;
       cgrvP: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrvO: // global
           _sgr5W::P64 = P64[R1 + 7];
           _sgr5X::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgr65_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sgr5R::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sgr5R::P64;
           P64[Hp - 48] = _sgr5W::P64;
           P64[Hp - 40] = _sgr5X::P64;
           I64[Hp - 32] = sat_sgr62_info;
           P64[Hp - 16] = _sgr5R::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgr5W::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrv9_info" {
     block_cgrv9_info:
         const _cgrv9;
         const 4;
         const 30;
 },
 sat_sgr5T_entry() //  [R1]
         { []
         }
     {offset
       cgrvV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrvW; else goto cgrvX;
       cgrvW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrvX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr5T_info" {
     sat_sgr5T_info:
         const sat_sgr5T_entry;
         const 1;
         const 16;
 },
 sat_sgr67_entry() //  [R1]
         { []
         }
     {offset
       cgrvY: // global
           _sgr67::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrvZ; else goto cgrw0;
       cgrw0: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgrw2; else goto cgrw1;
       cgrw2: // global
           HpAlloc = 96;
           goto cgrvZ;
       cgrvZ: // global
           R1 = _sgr67::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrw1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr67::P64;
           _sgr5N::P64 = P64[_sgr67::P64 + 16];
           _sgr5O::P64 = P64[_sgr67::P64 + 24];
           _sgr5P::P64 = P64[_sgr67::P64 + 32];
           _sgr5R::P64 = P64[_sgr67::P64 + 40];
           I64[Hp - 88] = lvl18_sgr5S_info;
           P64[Hp - 72] = _sgr5O::P64;
           P64[Hp - 64] = _sgr5P::P64;
           I64[Hp - 56] = sat_sgr66_info;
           P64[Hp - 48] = _sgr5N::P64;
           P64[Hp - 40] = _sgr5P::P64;
           P64[Hp - 32] = _sgr5R::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgr5T_info;
           P64[Hp] = _sgr5R::P64;
           R2 = _sgr5R::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr67_info" {
     sat_sgr67_info:
         const sat_sgr67_entry;
         const 4;
         const 4294967311;
         const Sgrd7_srt+320;
 },
 Data.Fixed.$w$cgmapMp_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrw3: // global
           _sgr5P::P64 = R4;
           _sgr5O::P64 = R3;
           _sgr5N::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrw4; else goto cgrw5;
       cgrw5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrw7; else goto cgrw6;
       cgrw7: // global
           HpAlloc = 24;
           goto cgrw4;
       cgrw4: // global
           R4 = _sgr5P::P64;
           R3 = _sgr5O::P64;
           R2 = _sgr5N::P64;
           R1 = Data.Fixed.$w$cgmapMp_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrw6: // global
           I64[Hp - 16] = lvl17_sgr5Q_info;
           P64[Hp] = _sgr5N::P64;
           I64[Sp - 40] = block_cgrum_info;
           R2 = _sgr5N::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgr5N::P64;
           P64[Sp - 16] = _sgr5O::P64;
           P64[Sp - 8] = _sgr5P::P64;
           Sp = Sp - 40;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapMp_info" {
     Data.Fixed.$w$cgmapMp_info:
         const Data.Fixed.$w$cgmapMp_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sgrd7_srt+320;
 },
 _cgrum() //  [R1]
         { []
         }
     {offset
       cgrum: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgrwa; else goto cgrw9;
       cgrwa: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrw9: // global
           I64[Hp - 64] = sat_sgr6d_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sgr67_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 63;
           Sp = Sp + 16;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrum_info" {
     block_cgrum_info:
         const _cgrum;
         const 4;
         const 4294967326;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.986869846 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapMp_closure" {
     Data.Fixed.$fDataFixed_$cgmapMp_closure:
         const Data.Fixed.$fDataFixed_$cgmapMp_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapMp_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgry3: // global
           _sgr6g::P64 = R4;
           R4 = R5;
           _sgr6f::P64 = R3;
           R3 = _sgr6g::P64;
           R2 = _sgr6f::P64;
           call Data.Fixed.$w$cgmapMp_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapMp_info" {
     Data.Fixed.$fDataFixed_$cgmapMp_info:
         const Data.Fixed.$fDataFixed_$cgmapMp_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const Sgrd7_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:22.994014061 UTC

[section ""data" . Data.Fixed.$w$cgmapM_closure" {
     Data.Fixed.$w$cgmapM_closure:
         const Data.Fixed.$w$cgmapM_info;
         const 0;
 },
 lvl17_sgr6l_entry() //  [R1]
         { []
         }
     {offset
       cgryi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgryj; else goto cgryk;
       cgryj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgryk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgr6l_info" {
     lvl17_sgr6l_info:
         const lvl17_sgr6l_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 sat_sgr6q_entry() //  [R1, R2]
         { []
         }
     {offset
       cgryw: // global
           _sgr6o::P64 = R2;
           _sgr6q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgryx; else goto cgryy;
       cgryy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgryA; else goto cgryz;
       cgryA: // global
           HpAlloc = 32;
           goto cgryx;
       cgryx: // global
           R2 = _sgr6o::P64;
           R1 = _sgr6q::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgryz: // global
           _sgr6i::P64 = P64[_sgr6q::P64 + 7];
           _sgr6n::P64 = P64[_sgr6q::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgr6n::P64;
           P64[Hp] = _sgr6o::P64;
           R2 = _sgr6i::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr6q_info" {
     sat_sgr6q_info:
         const sat_sgr6q_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgr6r_entry() //  [R1, R2]
         { []
         }
     {offset
       cgryB: // global
           _sgr6n::P64 = R2;
           _sgr6r::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgryC; else goto cgryD;
       cgryD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgryF; else goto cgryE;
       cgryF: // global
           HpAlloc = 24;
           goto cgryC;
       cgryC: // global
           R2 = _sgr6n::P64;
           R1 = _sgr6r::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgryE: // global
           _sgr6i::P64 = P64[_sgr6r::P64 + 7];
           _sgr6l::P64 = P64[_sgr6r::P64 + 15];
           I64[Hp - 16] = sat_sgr6q_info;
           P64[Hp - 8] = _sgr6i::P64;
           P64[Hp] = _sgr6n::P64;
           R2 = _sgr6i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgr6l::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr6r_info" {
     sat_sgr6r_info:
         const sat_sgr6r_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgr6m_entry() //  [R1]
         { []
         }
     {offset
       cgryK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgryL; else goto cgryM;
       cgryL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgryM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr6m_info" {
     sat_sgr6m_info:
         const sat_sgr6m_entry;
         const 1;
         const 16;
 },
 Data.Fixed.$w$cgmapM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgryN: // global
           _sgr6k::P64 = R4;
           _sgr6j::P64 = R3;
           _sgr6i::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgryO; else goto cgryP;
       cgryP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgryR; else goto cgryQ;
       cgryR: // global
           HpAlloc = 80;
           goto cgryO;
       cgryO: // global
           R4 = _sgr6k::P64;
           R3 = _sgr6j::P64;
           R2 = _sgr6i::P64;
           R1 = Data.Fixed.$w$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgryQ: // global
           I64[Hp - 72] = lvl17_sgr6l_info;
           P64[Hp - 56] = _sgr6j::P64;
           P64[Hp - 48] = _sgr6k::P64;
           I64[Hp - 40] = sat_sgr6r_info;
           P64[Hp - 32] = _sgr6i::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = sat_sgr6m_info;
           P64[Hp] = _sgr6i::P64;
           R2 = _sgr6i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapM_info" {
     Data.Fixed.$w$cgmapM_info:
         const Data.Fixed.$w$cgmapM_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.006274702 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapM_closure" {
     Data.Fixed.$fDataFixed_$cgmapM_closure:
         const Data.Fixed.$fDataFixed_$cgmapM_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapM_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgrzy: // global
           _sgr6u::P64 = R4;
           R4 = R5;
           _sgr6t::P64 = R3;
           R3 = _sgr6u::P64;
           R2 = _sgr6t::P64;
           call Data.Fixed.$w$cgmapM_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapM_info" {
     Data.Fixed.$fDataFixed_$cgmapM_info:
         const Data.Fixed.$fDataFixed_$cgmapM_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const Sgrd7_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.010934371 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapQi_closure" {
     Data.Fixed.$fDataFixed_$cgmapQi_closure:
         const Data.Fixed.$fDataFixed_$cgmapQi_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapQi_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrzM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrzN; else goto cgrzO;
       cgrzN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_$cgmapQi_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrzO: // global
           I64[Sp - 24] = block_cgrzJ_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugrzW; else goto cgrzK;
       ugrzW: // global
           call _cgrzJ(R1) args: 0, res: 0, upd: 0;
       cgrzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapQi_info" {
     Data.Fixed.$fDataFixed_$cgmapQi_info:
         const Data.Fixed.$fDataFixed_$cgmapQi_entry;
         const 0;
         const 107374182414;
         const 17179869208;
         const Sgrd7_srt+320;
 },
 _cgrzJ() //  [R1]
         { []
         }
     {offset
       cgrzJ: // global
           if (I64[R1 + 7] == 0) goto cgrzV; else goto cgrzU;
       cgrzV: // global
           R3 = P64[Sp + 16];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrzU: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrzJ_info" {
     block_cgrzJ_info:
         const _cgrzJ;
         const 2;
         const 38654705694;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.025790024 UTC

[section ""data" . Data.Fixed.$w$cgmapMo_closure" {
     Data.Fixed.$w$cgmapMo_closure:
         const Data.Fixed.$w$cgmapMo_info;
         const 0;
 },
 lvl17_sgr6G_entry() //  [R1]
         { []
         }
     {offset
       cgrAf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrAg; else goto cgrAh;
       cgrAg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrAh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgr6G_info" {
     lvl17_sgr6G_info:
         const lvl17_sgr6G_entry;
         const 1;
         const 16;
 },
 sat_sgr76_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrAu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrAv; else goto cgrAw;
       cgrAv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrAw: // global
           I64[Sp - 24] = block_cgrAr_info;
           _sgr6G::P64 = P64[R1 + 7];
           _sgr6H::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgr6G::P64;
           P64[Sp - 8] = _sgr6H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugrAO; else goto cgrAs;
       ugrAO: // global
           call _cgrAr(R1) args: 0, res: 0, upd: 0;
       cgrAs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr76_info" {
     sat_sgr76_info:
         const sat_sgr76_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgrAr() //  [R1]
         { []
         }
     {offset
       cgrAr: // global
           I64[Sp - 8] = block_cgrAz_info;
           _sgr73::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgr73::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrAN; else goto cgrAB;
       ugrAN: // global
           call _cgrAz(R1) args: 0, res: 0, upd: 0;
       cgrAB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrAr_info" {
     block_cgrAr_info:
         const _cgrAr;
         const 2;
         const 30;
 },
 _cgrAz() //  [R1]
         { []
         }
     {offset
       cgrAz: // global
           if (R1 & 7 == 1) goto cgrAH; else goto cgrAL;
       cgrAH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgrAL: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrAz_info" {
     block_cgrAz_info:
         const _cgrAz;
         const 3;
         const 30;
 },
 lvl18_sgr6I_entry() //  [R1]
         { []
         }
     {offset
       cgrAX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrAY; else goto cgrAZ;
       cgrAY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrAZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgr6I_info" {
     lvl18_sgr6I_info:
         const lvl18_sgr6I_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 sat_sgr6W_entry() //  [R1]
         { []
         }
     {offset
       cgrBl: // global
           _sgr6W::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgrBm; else goto cgrBn;
       cgrBn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrBp; else goto cgrBo;
       cgrBp: // global
           HpAlloc = 56;
           goto cgrBm;
       cgrBm: // global
           R1 = _sgr6W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr6W::P64;
           _sgr6F::P64 = P64[_sgr6W::P64 + 16];
           _sgr6H::P64 = P64[_sgr6W::P64 + 24];
           _sgr6M::P64 = P64[_sgr6W::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgr6M::P64;
           P64[Hp - 24] = _sgr6F::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgr6H::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr6W_info" {
     sat_sgr6W_info:
         const sat_sgr6W_entry;
         const 3;
         const 15;
 },
 sat_sgr6S_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrBB: // global
           _sgr6P::P64 = R2;
           _sgr6S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgrBC; else goto cgrBD;
       cgrBD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrBF; else goto cgrBE;
       cgrBF: // global
           HpAlloc = 56;
           goto cgrBC;
       cgrBC: // global
           R2 = _sgr6P::P64;
           R1 = _sgr6S::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrBE: // global
           _sgr6H::P64 = P64[_sgr6S::P64 + 7];
           _sgr6M::P64 = P64[_sgr6S::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgr6M::P64;
           P64[Hp - 24] = _sgr6P::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgr6H::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr6S_info" {
     sat_sgr6S_info:
         const sat_sgr6S_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgr6T_entry() //  [R1]
         { []
         }
     {offset
       cgrBG: // global
           _sgr6T::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrBH; else goto cgrBI;
       cgrBI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrBK; else goto cgrBJ;
       cgrBK: // global
           HpAlloc = 24;
           goto cgrBH;
       cgrBH: // global
           R1 = _sgr6T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr6T::P64;
           _sgr6H::P64 = P64[_sgr6T::P64 + 16];
           _sgr6I::P64 = P64[_sgr6T::P64 + 24];
           _sgr6M::P64 = P64[_sgr6T::P64 + 32];
           I64[Hp - 16] = sat_sgr6S_info;
           P64[Hp - 8] = _sgr6H::P64;
           P64[Hp] = _sgr6M::P64;
           R2 = _sgr6H::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgr6I::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr6T_info" {
     sat_sgr6T_info:
         const sat_sgr6T_entry;
         const 3;
         const 15;
 },
 sat_sgr6Z_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrBL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgrBM; else goto cgrBN;
       cgrBM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrBN: // global
           I64[Sp - 40] = block_cgrB5_info;
           _sgr6D::P64 = P64[R1 + 7];
           _sgr6F::P64 = P64[R1 + 15];
           _sgr6H::P64 = P64[R1 + 23];
           _sgr6I::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgr6D::P64;
           P64[Sp - 24] = _sgr6F::P64;
           P64[Sp - 16] = _sgr6H::P64;
           P64[Sp - 8] = _sgr6I::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugrC4; else goto cgrB6;
       ugrC4: // global
           call _cgrB5(R1) args: 0, res: 0, upd: 0;
       cgrB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr6Z_info" {
     sat_sgr6Z_info:
         const sat_sgr6Z_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgrB5() //  [R1]
         { []
         }
     {offset
       cgrB5: // global
           I64[Sp - 8] = block_cgrBa_info;
           _sgr6M::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgr6M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrC3; else goto cgrBb;
       ugrC3: // global
           call _cgrBa(R1) args: 0, res: 0, upd: 0;
       cgrBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrB5_info" {
     block_cgrB5_info:
         const _cgrB5;
         const 4;
         const 30;
 },
 _cgrBa() //  [R1]
         { []
         }
     {offset
       cgrBa: // global
           _sgr6F::P64 = P64[Sp + 24];
           _sgr6H::P64 = P64[Sp + 32];
           _sgr6M::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgrBQ; else goto cgrBU;
       cgrBQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgrBT; else goto cgrBS;
       cgrBT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrBS: // global
           I64[Hp - 72] = sat_sgr6W_info;
           P64[Hp - 56] = _sgr6F::P64;
           P64[Hp - 48] = _sgr6H::P64;
           P64[Hp - 40] = _sgr6M::P64;
           I64[Hp - 32] = sat_sgr6T_info;
           P64[Hp - 16] = _sgr6H::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgr6M::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgrBU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrBZ; else goto cgrBY;
       cgrBZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrBY: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgr6M::P64;
           P64[Hp - 24] = _sgr6F::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgr6H::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrBa_info" {
     block_cgrBa_info:
         const _cgrBa;
         const 5;
         const 30;
 },
 sat_sgr6J_entry() //  [R1]
         { []
         }
     {offset
       cgrC9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrCa; else goto cgrCb;
       cgrCa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrCb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Fixed.$fDataFixed1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr6J_info" {
     sat_sgr6J_info:
         const sat_sgr6J_entry;
         const 1;
         const 16;
 },
 sat_sgr70_entry() //  [R1]
         { []
         }
     {offset
       cgrCc: // global
           _sgr70::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrCd; else goto cgrCe;
       cgrCe: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgrCg; else goto cgrCf;
       cgrCg: // global
           HpAlloc = 96;
           goto cgrCd;
       cgrCd: // global
           R1 = _sgr70::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrCf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr70::P64;
           _sgr6D::P64 = P64[_sgr70::P64 + 16];
           _sgr6E::P64 = P64[_sgr70::P64 + 24];
           _sgr6F::P64 = P64[_sgr70::P64 + 32];
           _sgr6H::P64 = P64[_sgr70::P64 + 40];
           I64[Hp - 88] = lvl18_sgr6I_info;
           P64[Hp - 72] = _sgr6E::P64;
           P64[Hp - 64] = _sgr6F::P64;
           I64[Hp - 56] = sat_sgr6Z_info;
           P64[Hp - 48] = _sgr6D::P64;
           P64[Hp - 40] = _sgr6F::P64;
           P64[Hp - 32] = _sgr6H::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgr6J_info;
           P64[Hp] = _sgr6H::P64;
           R2 = _sgr6H::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr70_info" {
     sat_sgr70_info:
         const sat_sgr70_entry;
         const 4;
         const 4294967311;
         const Sgrd7_srt+320;
 },
 Data.Fixed.$w$cgmapMo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrCh: // global
           _sgr6F::P64 = R4;
           _sgr6E::P64 = R3;
           _sgr6D::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrCi; else goto cgrCj;
       cgrCj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrCl; else goto cgrCk;
       cgrCl: // global
           HpAlloc = 24;
           goto cgrCi;
       cgrCi: // global
           R4 = _sgr6F::P64;
           R3 = _sgr6E::P64;
           R2 = _sgr6D::P64;
           R1 = Data.Fixed.$w$cgmapMo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrCk: // global
           I64[Hp - 16] = lvl17_sgr6G_info;
           P64[Hp] = _sgr6D::P64;
           I64[Sp - 40] = block_cgrAi_info;
           R2 = _sgr6D::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgr6D::P64;
           P64[Sp - 16] = _sgr6E::P64;
           P64[Sp - 8] = _sgr6F::P64;
           Sp = Sp - 40;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cgmapMo_info" {
     Data.Fixed.$w$cgmapMo_info:
         const Data.Fixed.$w$cgmapMo_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const Sgrd7_srt+320;
 },
 _cgrAi() //  [R1]
         { []
         }
     {offset
       cgrAi: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgrCo; else goto cgrCn;
       cgrCo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrCn: // global
           I64[Hp - 64] = sat_sgr76_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = sat_sgr70_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           P64[Sp + 32] = Hp - 63;
           Sp = Sp + 16;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrAi_info" {
     block_cgrAi_info:
         const _cgrAi;
         const 4;
         const 4294967326;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.060081001 UTC

[section ""data" . Data.Fixed.$fDataFixed_$cgmapMo_closure" {
     Data.Fixed.$fDataFixed_$cgmapMo_closure:
         const Data.Fixed.$fDataFixed_$cgmapMo_info;
         const 0;
 },
 Data.Fixed.$fDataFixed_$cgmapMo_entry() //  [R3, R4, R5]
         { []
         }
     {offset
       cgrEw: // global
           _sgr79::P64 = R4;
           R4 = R5;
           _sgr78::P64 = R3;
           R3 = _sgr79::P64;
           R2 = _sgr78::P64;
           call Data.Fixed.$w$cgmapMo_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_$cgmapMo_info" {
     Data.Fixed.$fDataFixed_$cgmapMo_info:
         const Data.Fixed.$fDataFixed_$cgmapMo_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const Sgrd7_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.063813921 UTC

[section ""data" . lvl_rgoyF_closure" {
     lvl_rgoyF_closure:
         const lvl_rgoyF_info;
         const 0;
 },
 lvl_rgoyF_entry() //  []
         { []
         }
     {offset
       cgrEH: // global
           R1 = Data.Fixed.conMkFixed_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rgoyF_info" {
     lvl_rgoyF_info:
         const lvl_rgoyF_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.067407704 UTC

[section ""data" . lvl1_rgoyG_closure" {
     lvl1_rgoyG_closure:
         const lvl1_rgoyG_info;
         const 0;
 },
 lvl1_rgoyG_entry() //  []
         { []
         }
     {offset
       cgrET: // global
           R1 = Data.Fixed.tyFixed_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rgoyG_info" {
     lvl1_rgoyG_info:
         const lvl1_rgoyG_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sgrd7_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.072993162 UTC

[section ""data" . lvl2_rgoyH_closure" {
     lvl2_rgoyH_closure:
         const lvl2_rgoyH_info;
 },
 lvl2_rgoyH_entry() //  []
         { []
         }
     {offset
       cgrF5: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rgoyH_info" {
     lvl2_rgoyH_info:
         const lvl2_rgoyH_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.077696643 UTC

[section ""data" . lvl3_rgoyI_closure" {
     lvl3_rgoyI_closure:
         const lvl3_rgoyI_info;
 },
 lvl3_rgoyI_entry() //  []
         { []
         }
     {offset
       cgrFi: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rgoyI_info" {
     lvl3_rgoyI_info:
         const lvl3_rgoyI_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.082058259 UTC

[section ""data" . lvl4_rgoyJ_closure" {
     lvl4_rgoyJ_closure:
         const lvl4_rgoyJ_info;
         const 0;
 },
 lvl4_rgoyJ_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrFv: // global
           R3 = R3;
           _sgr7h::P64 = R2;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgr7h::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rgoyJ_info" {
     lvl4_rgoyJ_info:
         const lvl4_rgoyJ_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.087927208 UTC

[section ""data" . lvl5_rgoyK_closure" {
     lvl5_rgoyK_closure:
         const lvl5_rgoyK_info;
         const 0;
 },
 sat_sgr7n_entry() //  [R1]
         { []
         }
     {offset
       cgrFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrFL; else goto cgrFM;
       cgrFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrFM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7n_info" {
     sat_sgr7n_info:
         const sat_sgr7n_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 lvl5_rgoyK_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrFN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgrFR; else goto cgrFQ;
       cgrFR: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl5_rgoyK_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrFQ: // global
           I64[Hp - 24] = sat_sgr7n_info;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sgr7k::P64 = R3;
           R3 = Hp - 24;
           _sgr7j::P64 = R2;
           R2 = _sgr7k::P64;
           R1 = _sgr7j::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rgoyK_info" {
     lvl5_rgoyK_info:
         const lvl5_rgoyK_entry;
         const 0;
         const 1103806595086;
         const 17179869208;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.095248919 UTC

[section ""data" . lvl6_rgoyL_closure" {
     lvl6_rgoyL_closure:
         const lvl6_rgoyL_info;
         const 0;
 },
 sat_sgr7s_entry() //  [R1]
         { []
         }
     {offset
       cgrGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrGb; else goto cgrGc;
       cgrGb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrGc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7s_info" {
     sat_sgr7s_info:
         const sat_sgr7s_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 lvl6_rgoyL_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrGd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgrGh; else goto cgrGg;
       cgrGh: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl6_rgoyL_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrGg: // global
           I64[Hp - 24] = sat_sgr7s_info;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R3 = R3;
           _sgr7o::P64 = R2;
           R2 = Hp - 24;
           R1 = _sgr7o::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rgoyL_info" {
     lvl6_rgoyL_info:
         const lvl6_rgoyL_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.102759001 UTC

[section ""data" . lvl7_rgoyM_closure" {
     lvl7_rgoyM_closure:
         const lvl7_rgoyM_info;
         const 0;
 },
 sat_sgr7v_entry() //  [R1]
         { []
         }
     {offset
       cgrGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrGB; else goto cgrGC;
       cgrGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Data.$fDataInteger_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7v_info" {
     sat_sgr7v_info:
         const sat_sgr7v_entry;
         const 2;
         const 4294967314;
         const Sgrd7_srt+320;
 },
 lvl7_rgoyM_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrGE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgrGI; else goto cgrGH;
       cgrGI: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = lvl7_rgoyM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrGH: // global
           I64[Hp - 48] = sat_sgr7v_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rgoyM_info" {
     lvl7_rgoyM_info:
         const lvl7_rgoyM_entry;
         const 0;
         const 4402341478414;
         const 8589934607;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.110814307 UTC

[section ""data" . lvl8_rgoyN_closure" {
     lvl8_rgoyN_closure:
         const lvl8_rgoyN_info;
         const 0;
 },
 sat_sgr7z_entry() //  [R1]
         { []
         }
     {offset
       cgrH6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrH7; else goto cgrH8;
       cgrH7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrH8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fDataFixed2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7z_info" {
     sat_sgr7z_info:
         const sat_sgr7z_entry;
         const 1;
         const 16;
 },
 lvl8_rgoyN_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrH9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrHd; else goto cgrHc;
       cgrHd: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl8_rgoyN_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrHc: // global
           I64[Hp - 16] = sat_sgr7z_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sgr7w::P64 = R2;
           R2 = Data.Data.$fDataInteger_closure;
           R1 = _sgr7w::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rgoyN_info" {
     lvl8_rgoyN_info:
         const lvl8_rgoyN_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sgrd7_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.118310411 UTC

[section ""data" . Data.Fixed.$fDataFixed_closure" {
     Data.Fixed.$fDataFixed_closure:
         const Data.Fixed.$fDataFixed_info;
         const 0;
 },
 sat_sgr7D_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgrHx: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fDataFixed_$cgmapQi_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr7D_info" {
     sat_sgr7D_info:
         const sat_sgr7D_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sgrd7_srt+352;
 },
 sat_sgr7C_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgrHF: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fDataFixed_$cgfoldl_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr7C_info" {
     sat_sgr7C_info:
         const sat_sgr7C_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sgrd7_srt+416;
 },
 sat_sgr7B_entry() //  [R1]
         { []
         }
     {offset
       cgrHM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrHN; else goto cgrHO;
       cgrHN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrHO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fDataFixed7_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7B_info" {
     sat_sgr7B_info:
         const sat_sgr7B_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+424;
 },
 Data.Fixed.$fDataFixed_entry() //  [R2]
         { []
         }
     {offset
       cgrHQ: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cgrHU; else goto cgrHT;
       cgrHU: // global
           HpAlloc = 184;
           R2 = R2;
           R1 = Data.Fixed.$fDataFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrHT: // global
           I64[Hp - 176] = sat_sgr7D_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sgr7C_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sgr7B_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 157;
           P64[Hp - 96] = lvl8_rgoyN_closure+3;
           P64[Hp - 88] = lvl_rgoyF_closure+1;
           P64[Hp - 80] = lvl1_rgoyG_closure+1;
           P64[Hp - 72] = lvl2_rgoyH_closure+2;
           P64[Hp - 64] = lvl3_rgoyI_closure+2;
           P64[Hp - 56] = lvl4_rgoyJ_closure+2;
           P64[Hp - 48] = lvl5_rgoyK_closure+4;
           P64[Hp - 40] = lvl6_rgoyL_closure+4;
           P64[Hp - 32] = lvl7_rgoyM_closure+2;
           P64[Hp - 24] = Hp - 173;
           P64[Hp - 16] = Data.Fixed.$w$cgmapM_closure+3;
           P64[Hp - 8] = Data.Fixed.$w$cgmapMp_closure+3;
           P64[Hp] = Data.Fixed.$w$cgmapMo_closure+3;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fDataFixed_info" {
     Data.Fixed.$fDataFixed_info:
         const Data.Fixed.$fDataFixed_entry;
         const 0;
         const 562516161724430;
         const 4294967301;
         const Sgrd7_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.129320472 UTC

[section ""cstring" . Data.Fixed.$tcHasResolution3_bytes" {
     Data.Fixed.$tcHasResolution3_bytes:
         I8[] [72,97,115,82,101,115,111,108,117,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.131107858 UTC

[section ""data" . Data.Fixed.$tcHasResolution2_closure" {
     Data.Fixed.$tcHasResolution2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcHasResolution3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.132894352 UTC

[section ""data" . Data.Fixed.$tcHasResolution_closure" {
     Data.Fixed.$tcHasResolution_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcHasResolution2_closure+1;
         const Data.Fixed.$tcHasResolution1_closure+4;
         const 7410670074803796200;
         const 11622449620609036983;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.134776341 UTC

[section ""cstring" . Data.Fixed.$tcE5_bytes" {
     Data.Fixed.$tcE5_bytes:
         I8[] [69,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.136517412 UTC

[section ""data" . Data.Fixed.$tcE4_closure" {
     Data.Fixed.$tcE4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.138447289 UTC

[section ""data" . Data.Fixed.$tcE0_closure" {
     Data.Fixed.$tcE0_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE4_closure+1;
         const GHC.Types.krep$*_closure;
         const 1111589946053822622;
         const 14645449775626969178;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.140217585 UTC

[section ""cstring" . Data.Fixed.$tcE8_bytes" {
     Data.Fixed.$tcE8_bytes:
         I8[] [69,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.142096324 UTC

[section ""data" . Data.Fixed.$tcE7_closure" {
     Data.Fixed.$tcE7_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE8_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.14399104 UTC

[section ""data" . Data.Fixed.$tcE1_closure" {
     Data.Fixed.$tcE1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE7_closure+1;
         const GHC.Types.krep$*_closure;
         const 17242267792727872229;
         const 10571291330004494282;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.145875261 UTC

[section ""cstring" . Data.Fixed.$tcE14_bytes" {
     Data.Fixed.$tcE14_bytes:
         I8[] [69,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.14833417 UTC

[section ""data" . Data.Fixed.$tcE13_closure" {
     Data.Fixed.$tcE13_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE14_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.150164914 UTC

[section ""data" . Data.Fixed.$tcE2_closure" {
     Data.Fixed.$tcE2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE13_closure+1;
         const GHC.Types.krep$*_closure;
         const 18184774527647329547;
         const 15895109557895358229;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.15194521 UTC

[section ""cstring" . Data.Fixed.$tcE16_bytes" {
     Data.Fixed.$tcE16_bytes:
         I8[] [69,51]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.153701601 UTC

[section ""data" . Data.Fixed.$tcE15_closure" {
     Data.Fixed.$tcE15_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE16_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.155524325 UTC

[section ""data" . Data.Fixed.$tcE3_closure" {
     Data.Fixed.$tcE3_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE15_closure+1;
         const GHC.Types.krep$*_closure;
         const 2281297682271263739;
         const 13982938170987291273;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.157222757 UTC

[section ""cstring" . Data.Fixed.$tcE18_bytes" {
     Data.Fixed.$tcE18_bytes:
         I8[] [69,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.159018425 UTC

[section ""data" . Data.Fixed.$tcE17_closure" {
     Data.Fixed.$tcE17_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE18_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.160830185 UTC

[section ""data" . Data.Fixed.$tcE6_closure" {
     Data.Fixed.$tcE6_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE17_closure+1;
         const GHC.Types.krep$*_closure;
         const 6430880657524859014;
         const 16351944333195325805;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.162678238 UTC

[section ""cstring" . Data.Fixed.$tcE20_bytes" {
     Data.Fixed.$tcE20_bytes:
         I8[] [69,57]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.164416511 UTC

[section ""data" . Data.Fixed.$tcE19_closure" {
     Data.Fixed.$tcE19_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE20_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.16636319 UTC

[section ""data" . Data.Fixed.$tcE9_closure" {
     Data.Fixed.$tcE9_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE19_closure+1;
         const GHC.Types.krep$*_closure;
         const 8202840314884717291;
         const 5390706447224283764;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.168342577 UTC

[section ""cstring" . Data.Fixed.$tcE11_bytes" {
     Data.Fixed.$tcE11_bytes:
         I8[] [69,49,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.170275419 UTC

[section ""data" . Data.Fixed.$tcE10_closure" {
     Data.Fixed.$tcE10_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Fixed.$tcE11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.17234574 UTC

[section ""data" . Data.Fixed.$tcE12_closure" {
     Data.Fixed.$tcE12_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Fixed.$trModule_closure+1;
         const Data.Fixed.$tcE10_closure+1;
         const GHC.Types.krep$*_closure;
         const 11177455628646877585;
         const 1804744900678580889;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.176477587 UTC

[section ""data" . Data.Fixed.div'_closure" {
     Data.Fixed.div'_closure:
         const Data.Fixed.div'_info;
         const 0;
 },
 Data.Fixed.div'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrIY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgrJ6; else goto cgrJ7;
       cgrJ6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.div'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrJ7: // global
           I64[Sp - 32] = block_cgrIW_info;
           _sgr7E::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R4;
           P64[Sp - 24] = _sgr7E::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Real.toRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.div'_info" {
     Data.Fixed.div'_info:
         const Data.Fixed.div'_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const Sgrd7_srt+464;
 },
 _cgrIW() //  [R1]
         { []
         }
     {offset
       cgrIW: // global
           I64[Sp] = block_cgrJ1_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrIW_info" {
     block_cgrIW_info:
         const _cgrIW;
         const 3;
         const 12884901918;
         const Sgrd7_srt+464;
 },
 _cgrJ1() //  [R1]
         { []
         }
     {offset
       cgrJ1: // global
           _sgr7K::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrJ5_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sgr7K::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrJ1_info" {
     block_cgrJ1_info:
         const _cgrJ1;
         const 3;
         const 12884901918;
         const Sgrd7_srt+464;
 },
 _cgrJ5() //  [R1, R2]
         { []
         }
     {offset
       cgrJ5: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrJ5_info" {
     block_cgrJ5_info:
         const _cgrJ5;
         const 130;
         const 4294967326;
         const Sgrd7_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.189156124 UTC

[section ""data" . Data.Fixed.$wdivMod'_closure" {
     Data.Fixed.$wdivMod'_closure:
         const Data.Fixed.$wdivMod'_info;
         const 0;
 },
 f_sgr7V_entry() //  [R1]
         { []
         }
     {offset
       cgrJG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrJH; else goto cgrJI;
       cgrJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.div'_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sgr7V_info" {
     f_sgr7V_info:
         const f_sgr7V_entry;
         const 4;
         const 4294967311;
         const Sgrd7_srt+480;
 },
 sat_sgr7X_entry() //  [R1]
         { []
         }
     {offset
       cgrK3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrK4; else goto cgrK5;
       cgrK4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrK5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7X_info" {
     sat_sgr7X_info:
         const sat_sgr7X_entry;
         const 2;
         const 18;
 },
 sat_sgr7Y_entry() //  [R1]
         { []
         }
     {offset
       cgrK6: // global
           _sgr7Y::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgrK7; else goto cgrK8;
       cgrK8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgrKa; else goto cgrK9;
       cgrKa: // global
           HpAlloc = 32;
           goto cgrK7;
       cgrK7: // global
           R1 = _sgr7Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr7Y::P64;
           _sgr7S::P64 = P64[_sgr7Y::P64 + 16];
           _sgr7V::P64 = P64[_sgr7Y::P64 + 24];
           _sgr7W::P64 = P64[_sgr7Y::P64 + 32];
           I64[Hp - 24] = sat_sgr7X_info;
           P64[Hp - 8] = _sgr7S::P64;
           P64[Hp] = _sgr7V::P64;
           R2 = _sgr7W::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7Y_info" {
     sat_sgr7Y_info:
         const sat_sgr7Y_entry;
         const 3;
         const 15;
 },
 sat_sgr7Z_entry() //  [R1]
         { []
         }
     {offset
       cgrKb: // global
           _sgr7Z::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrKc; else goto cgrKd;
       cgrKd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgrKf; else goto cgrKe;
       cgrKf: // global
           HpAlloc = 40;
           goto cgrKc;
       cgrKc: // global
           R1 = _sgr7Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrKe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr7Z::P64;
           _sgr7S::P64 = P64[_sgr7Z::P64 + 16];
           _sgr7U::P64 = P64[_sgr7Z::P64 + 24];
           _sgr7V::P64 = P64[_sgr7Z::P64 + 32];
           _sgr7W::P64 = P64[_sgr7Z::P64 + 40];
           I64[Hp - 32] = sat_sgr7Y_info;
           P64[Hp - 16] = _sgr7S::P64;
           P64[Hp - 8] = _sgr7V::P64;
           P64[Hp] = _sgr7W::P64;
           R2 = _sgr7W::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgr7U::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr7Z_info" {
     sat_sgr7Z_info:
         const sat_sgr7Z_entry;
         const 4;
         const 15;
 },
 sat_sgr80_entry() //  [R1]
         { []
         }
     {offset
       cgrKg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgrKh; else goto cgrKi;
       cgrKh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrKi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgrJN_info;
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 56;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr80_info" {
     sat_sgr80_info:
         const sat_sgr80_entry;
         const 5;
         const 15;
 },
 _cgrJN() //  [R1]
         { []
         }
     {offset
       cgrJN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrKl; else goto cgrKk;
       cgrKl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgrKk: // global
           I64[Hp - 40] = sat_sgr7Z_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = R1;
           R2 = R1;
           _sgr7T::P64 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = _sgr7T::P64;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 16;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrJN_info" {
     block_cgrJN_info:
         const _cgrJN;
         const 4;
         const 30;
 },
 Data.Fixed.$wdivMod'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrKm: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgrKq; else goto cgrKp;
       cgrKq: // global
           HpAlloc = 104;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$wdivMod'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrKp: // global
           I64[Hp - 96] = f_sgr7V_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = sat_sgr80_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           _cgrJC::P64 = Hp - 96;
           P64[Hp] = _cgrJC::P64;
           R2 = Hp - 48;
           R1 = _cgrJC::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$wdivMod'_info" {
     Data.Fixed.$wdivMod'_info:
         const Data.Fixed.$wdivMod'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sgrd7_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.207385717 UTC

[section ""data" . Data.Fixed.divMod'_closure" {
     Data.Fixed.divMod'_closure:
         const Data.Fixed.divMod'_info;
         const 0;
 },
 Data.Fixed.divMod'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgrLq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgrLr; else goto cgrLs;
       cgrLr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.divMod'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrLs: // global
           I64[Sp - 8] = block_cgrLn_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Fixed.$wdivMod'_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.divMod'_info" {
     Data.Fixed.divMod'_info:
         const Data.Fixed.divMod'_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sgrd7_srt+488;
 },
 _cgrLn() //  [R1, R2]
         { []
         }
     {offset
       cgrLn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrLv; else goto cgrLu;
       cgrLv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgrLu: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrLn_info" {
     block_cgrLn_info:
         const _cgrLn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.215748553 UTC

[section ""data" . Data.Fixed.mod'_closure" {
     Data.Fixed.mod'_closure:
         const Data.Fixed.mod'_info;
         const 0;
 },
 sat_sgr8c_entry() //  [R1]
         { []
         }
     {offset
       cgrM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrM2; else goto cgrM3;
       cgrM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 32];
           R4 = P64[R1 + 24];
           R3 = GHC.Real.$fIntegralInteger_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.div'_entry(R5,
                                      R4,
                                      R3,
                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr8c_info" {
     sat_sgr8c_info:
         const sat_sgr8c_entry;
         const 3;
         const 38654705679;
         const Sgrd7_srt+480;
 },
 sat_sgr8d_entry() //  [R1]
         { []
         }
     {offset
       cgrM4: // global
           _sgr8d::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgrM5; else goto cgrM6;
       cgrM6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgrM8; else goto cgrM7;
       cgrM8: // global
           HpAlloc = 40;
           goto cgrM5;
       cgrM5: // global
           R1 = _sgr8d::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrM7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr8d::P64;
           _sgr88::P64 = P64[_sgr8d::P64 + 16];
           _sgr89::P64 = P64[_sgr8d::P64 + 24];
           _sgr8a::P64 = P64[_sgr8d::P64 + 32];
           _sgr8b::P64 = P64[_sgr8d::P64 + 40];
           I64[Hp - 32] = sat_sgr8c_info;
           P64[Hp - 16] = _sgr88::P64;
           P64[Hp - 8] = _sgr89::P64;
           P64[Hp] = _sgr8a::P64;
           R2 = _sgr8b::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr8d_info" {
     sat_sgr8d_info:
         const sat_sgr8d_entry;
         const 4;
         const 38654705679;
         const Sgrd7_srt+480;
 },
 sat_sgr8e_entry() //  [R1]
         { []
         }
     {offset
       cgrM9: // global
           _sgr8e::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgrMa; else goto cgrMb;
       cgrMb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrMd; else goto cgrMc;
       cgrMd: // global
           HpAlloc = 48;
           goto cgrMa;
       cgrMa: // global
           R1 = _sgr8e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrMc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr8e::P64;
           _sgr88::P64 = P64[_sgr8e::P64 + 16];
           _sgr89::P64 = P64[_sgr8e::P64 + 24];
           _sgr8a::P64 = P64[_sgr8e::P64 + 32];
           _sgr8b::P64 = P64[_sgr8e::P64 + 40];
           I64[Hp - 40] = sat_sgr8d_info;
           P64[Hp - 24] = _sgr88::P64;
           P64[Hp - 16] = _sgr89::P64;
           P64[Hp - 8] = _sgr8a::P64;
           P64[Hp] = _sgr8b::P64;
           R2 = _sgr8b::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = _sgr8a::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr8e_info" {
     sat_sgr8e_info:
         const sat_sgr8e_entry;
         const 4;
         const 38654705679;
         const Sgrd7_srt+480;
 },
 Data.Fixed.mod'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrMe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrMf; else goto cgrMg;
       cgrMf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.mod'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrMg: // global
           I64[Sp - 32] = block_cgrLL_info;
           _sgr88::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _sgr88::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.mod'_info" {
     Data.Fixed.mod'_info:
         const Data.Fixed.mod'_entry;
         const 0;
         const 107374182414;
         const 12884901911;
         const Sgrd7_srt+480;
 },
 _cgrLL() //  [R1]
         { []
         }
     {offset
       cgrLL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrMj; else goto cgrMi;
       cgrMj: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrMi: // global
           I64[Hp - 40] = sat_sgr8e_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 40;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrLL_info" {
     block_cgrLL_info:
         const _cgrLL;
         const 3;
         const 38654705694;
         const Sgrd7_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.228531717 UTC

[section ""data" . Data.Fixed.$fFractionalFixed2_closure" {
     Data.Fixed.$fFractionalFixed2_closure:
         const Data.Fixed.$fFractionalFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fFractionalFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgrN0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrN1; else goto cgrN2;
       cgrN1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrN2: // global
           (_cgrMX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrMX::I64 == 0) goto cgrMZ; else goto cgrMY;
       cgrMZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrMY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrMX::I64;
           R2 = $dIP3_rgoyz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed2_info" {
     Data.Fixed.$fFractionalFixed2_info:
         const Data.Fixed.$fFractionalFixed2_entry;
         const 0;
         const 12884901909;
         const Sgrd7_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.234832233 UTC

[section ""data" . Data.Fixed.$w$cfromRational_closure" {
     Data.Fixed.$w$cfromRational_closure:
         const Data.Fixed.$w$cfromRational_info;
         const 0;
 },
 Data.Fixed.$w$cfromRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrNh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrNt; else goto cgrNu;
       cgrNt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$w$cfromRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrNu: // global
           I64[Sp - 24] = block_cgrNf_info;
           _sgr8f::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgr8f::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cfromRational_info" {
     Data.Fixed.$w$cfromRational_info:
         const Data.Fixed.$w$cfromRational_entry;
         const 0;
         const 34157874905102;
         const 12884901911;
         const Sgrd7_srt+472;
 },
 _cgrNf() //  [R1]
         { []
         }
     {offset
       cgrNf: // global
           I64[Sp] = block_cgrNk_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrNf_info" {
     block_cgrNf_info:
         const _cgrNf;
         const 2;
         const 7769595838494;
         const Sgrd7_srt+472;
 },
 _cgrNk() //  [R1]
         { []
         }
     {offset
       cgrNk: // global
           _sgr8g::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrNo_info;
           R3 = P64[Sp + 16];
           R2 = _sgr8g::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrNk_info" {
     block_cgrNk_info:
         const _cgrNk;
         const 2;
         const 3371549327390;
         const Sgrd7_srt+472;
 },
 _cgrNo() //  [R1]
         { []
         }
     {offset
       cgrNo: // global
           _sgr8k::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrNs_info;
           R3 = _sgr8k::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrNo_info" {
     block_cgrNo_info:
         const _cgrNo;
         const 1;
         const 2272037699614;
         const Sgrd7_srt+472;
 },
 _cgrNs() //  [R1, R2]
         { []
         }
     {offset
       cgrNs: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrNs_info" {
     block_cgrNs_info:
         const _cgrNs;
         const 0;
         const 73014444062;
         const Sgrd7_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.246768193 UTC

[section ""data" . Data.Fixed.$fFractionalFixed1_closure" {
     Data.Fixed.$fFractionalFixed1_closure:
         const Data.Fixed.$fFractionalFixed1_info;
         const 0;
 },
 Data.Fixed.$fFractionalFixed1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrO2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrO3; else goto cgrO4;
       cgrO3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrO4: // global
           I64[Sp - 16] = block_cgrNZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugrO8; else goto cgrO0;
       ugrO8: // global
           call _cgrNZ(R1) args: 0, res: 0, upd: 0;
       cgrO0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed1_info" {
     Data.Fixed.$fFractionalFixed1_info:
         const Data.Fixed.$fFractionalFixed1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sgrd7_srt+560;
 },
 _cgrNZ() //  [R1]
         { []
         }
     {offset
       cgrNZ: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Fixed.$w$cfromRational_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrNZ_info" {
     block_cgrNZ_info:
         const _cgrNZ;
         const 1;
         const 4294967326;
         const Sgrd7_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.254021041 UTC

[section ""data" . Data.Fixed.$fRealFixed_$ctoRational_closure" {
     Data.Fixed.$fRealFixed_$ctoRational_closure:
         const Data.Fixed.$fRealFixed_$ctoRational_info;
         const 0;
 },
 Data.Fixed.$fRealFixed_$ctoRational_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrOp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrOv; else goto cgrOw;
       cgrOv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFixed_$ctoRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrOw: // global
           I64[Sp - 16] = block_cgrOn_info;
           _sgr8t::P64 = R2;
           R2 = R3;
           R1 = _sgr8t::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFixed_$ctoRational_info" {
     Data.Fixed.$fRealFixed_$ctoRational_info:
         const Data.Fixed.$fRealFixed_$ctoRational_entry;
         const 0;
         const 149537876344846;
         const 8589934607;
         const Sgrd7_srt+464;
 },
 _cgrOn() //  [R1]
         { []
         }
     {offset
       cgrOn: // global
           _sgr8u::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrOs_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _sgr8u::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrOn_info" {
     block_cgrOn_info:
         const _cgrOn;
         const 1;
         const 8800387989534;
         const Sgrd7_srt+464;
 },
 _cgrOs() //  [R1, R2]
         { []
         }
     {offset
       cgrOs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgrOA; else goto cgrOz;
       cgrOA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgrOz: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrOs_info" {
     block_cgrOs_info:
         const _cgrOs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.263838817 UTC

[section ""data" . Data.Fixed.$fFractionalFixed3_closure" {
     Data.Fixed.$fFractionalFixed3_closure:
         const Data.Fixed.$fFractionalFixed3_info;
         const 0;
 },
 section ""relreadonly" . ugrPi_srtd" {
     ugrPi_srtd:
         const Sgrd7_srt+40;
         const 72;
         const 4611686018427387905;
         const 224;
 },
 Data.Fixed.$fFractionalFixed3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrOZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrP0; else goto cgrP1;
       cgrP0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrP1: // global
           I64[Sp - 32] = block_cgrOU_info;
           _sgr8A::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgr8z::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgr8z::P64;
           P64[Sp - 16] = _sgr8A::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed3_info" {
     Data.Fixed.$fFractionalFixed3_info:
         const Data.Fixed.$fFractionalFixed3_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugrPi_srtd;
 },
 _cgrOU() //  [R1]
         { []
         }
     {offset
       cgrOU: // global
           if (R1 == 1) goto cgrOY; else goto cgrOX;
       cgrOY: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgrOX: // global
           _sgr8z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrP4_info;
           R2 = P64[Sp + 16];
           R1 = _sgr8z::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrOU_info" {
     block_cgrOU_info:
         const _cgrOU;
         const 3;
         const 1653562408990;
         const Sgrd7_srt+536;
 },
 _cgrP4() //  [R1]
         { []
         }
     {offset
       cgrP4: // global
           _sgr8A::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrP8_info;
           R3 = R1;
           R2 = _sgr8A::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrP4_info" {
     block_cgrP4_info:
         const _cgrP4;
         const 2;
         const 554050781214;
         const Sgrd7_srt+536;
 },
 _cgrP8() //  [R1]
         { []
         }
     {offset
       cgrP8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrP8_info" {
     block_cgrP8_info:
         const _cgrP8;
         const 1;
         const 4294967326;
         const Sgrd7_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.27659388 UTC

[section ""data" . Data.Fixed.$fFractionalFixed_$crecip_closure" {
     Data.Fixed.$fFractionalFixed_$crecip_closure:
         const Data.Fixed.$fFractionalFixed_$crecip_info;
         const 0;
 },
 section ""relreadonly" . ugrQ3_srtd" {
     ugrQ3_srtd:
         const Sgrd7_srt+40;
         const 73;
         const 4611686018427387905;
         const 352;
 },
 Data.Fixed.$fFractionalFixed_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrPK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrPL; else goto cgrPM;
       cgrPL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrPM: // global
           I64[Sp - 24] = block_cgrPF_info;
           _sgr8G::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgr8F::P64 = R2;
           R2 = _sgr8G::P64;
           P64[Sp - 16] = _sgr8F::P64;
           P64[Sp - 8] = _sgr8G::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed_$crecip_info" {
     Data.Fixed.$fFractionalFixed_$crecip_info:
         const Data.Fixed.$fFractionalFixed_$crecip_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ugrQ3_srtd;
 },
 _cgrPF() //  [R1]
         { []
         }
     {offset
       cgrPF: // global
           if (R1 == 1) goto cgrPJ; else goto cgrPI;
       cgrPJ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgrPI: // global
           _sgr8F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrPP_info;
           R2 = P64[Sp + 16];
           R1 = _sgr8F::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrPF_info" {
     block_cgrPF_info:
         const _cgrPF;
         const 2;
         const 1653562408990;
         const Sgrd7_srt+536;
 },
 _cgrPP() //  [R1]
         { []
         }
     {offset
       cgrPP: // global
           I64[Sp] = block_cgrPT_info;
           R3 = R1;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrPP_info" {
     block_cgrPP_info:
         const _cgrPP;
         const 1;
         const 554050781214;
         const Sgrd7_srt+536;
 },
 _cgrPT() //  [R1]
         { []
         }
     {offset
       cgrPT: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrPT_info" {
     block_cgrPT_info:
         const _cgrPT;
         const 1;
         const 4294967326;
         const Sgrd7_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.28878311 UTC

[section ""data" . Data.Fixed.$fNumFixed_$c*_closure" {
     Data.Fixed.$fNumFixed_$c*_closure:
         const Data.Fixed.$fNumFixed_$c*_info;
         const 0;
 },
 section ""relreadonly" . ugrQO_srtd" {
     ugrQO_srtd:
         const Sgrd7_srt+40;
         const 74;
         const 4611686018427387905;
         const 608;
 },
 Data.Fixed.$fNumFixed_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgrQs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrQt; else goto cgrQu;
       cgrQt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrQu: // global
           I64[Sp - 24] = block_cgrQq_info;
           _sgr8K::P64 = R2;
           R2 = R3;
           R1 = _sgr8K::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed_$c*_info" {
     Data.Fixed.$fNumFixed_$c*_info:
         const Data.Fixed.$fNumFixed_$c*_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugrQO_srtd;
 },
 section ""relreadonly" . ugrQP_srtd" {
     ugrQP_srtd:
         const Sgrd7_srt+40;
         const 71;
         const 4611686018427387905;
         const 96;
 },
 _cgrQq() //  [R1]
         { []
         }
     {offset
       cgrQq: // global
           I64[Sp - 8] = block_cgrQx_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrQq_info" {
     block_cgrQq_info:
         const _cgrQq;
         const 2;
         const 18446744069414584350;
         const ugrQP_srtd;
 },
 _cgrQx() //  [R1]
         { []
         }
     {offset
       cgrQx: // global
           if (R1 == 1) goto cgrQN; else goto cgrQF;
       cgrQN: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgrQF: // global
           I64[Sp] = block_cgrQC_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrQx_info" {
     block_cgrQx_info:
         const _cgrQx;
         const 3;
         const 1653562408990;
         const Sgrd7_srt+536;
 },
 _cgrQC() //  [R1]
         { []
         }
     {offset
       cgrQC: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrQC_info" {
     block_cgrQC_info:
         const _cgrQC;
         const 387;
         const 4294967326;
         const Sgrd7_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.300421086 UTC

[section ""data" . Data.Fixed.$fNumFixed1_closure" {
     Data.Fixed.$fNumFixed1_closure:
         const Data.Fixed.$fNumFixed1_info;
         const 0;
 },
 Data.Fixed.$fNumFixed1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrRf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrRg; else goto cgrRh;
       cgrRg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrRh: // global
           I64[Sp - 16] = block_cgrRd_info;
           _sgr8Q::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgr8Q::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed1_info" {
     Data.Fixed.$fNumFixed1_info:
         const Data.Fixed.$fNumFixed1_entry;
         const 0;
         const 17665200488462;
         const 8589934607;
         const Sgrd7_srt+536;
 },
 _cgrRd() //  [R1]
         { []
         }
     {offset
       cgrRd: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrRd_info" {
     block_cgrRd_info:
         const _cgrRd;
         const 1;
         const 4294967326;
         const Sgrd7_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.306614874 UTC

[section ""data" . Data.Fixed.$fNumFixed2_closure" {
     Data.Fixed.$fNumFixed2_closure:
         const Data.Fixed.$fNumFixed2_info;
         const 0;
 },
 Data.Fixed.$fNumFixed2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgrRA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrRE; else goto cgrRF;
       cgrRE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgrRF: // global
           I64[Sp - 16] = block_cgrRy_info;
           _sgr8T::P64 = R2;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = _sgr8T::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed2_info" {
     Data.Fixed.$fNumFixed2_info:
         const Data.Fixed.$fNumFixed2_entry;
         const 0;
         const 35257386532878;
         const 8589934607;
         const Sgrd7_srt+536;
 },
 _cgrRy() //  [R1]
         { []
         }
     {offset
       cgrRy: // global
           I64[Sp] = block_cgrRD_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrRy_info" {
     block_cgrRy_info:
         const _cgrRy;
         const 1;
         const 4294967326;
         const Sgrd7_srt+536;
 },
 _cgrRD() //  [R1]
         { []
         }
     {offset
       cgrRD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrRD_info" {
     block_cgrRD_info:
         const _cgrRD;
         const 1;
         const 4294967326;
         const Sgrd7_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.315020715 UTC

[section ""data" . Data.Fixed.$fNumFixed_closure" {
     Data.Fixed.$fNumFixed_closure:
         const Data.Fixed.$fNumFixed_info;
         const 0;
 },
 sat_sgr90_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrS7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fNumFixed1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr90_info" {
     sat_sgr90_info:
         const sat_sgr90_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+632;
 },
 sat_sgr8Z_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrSf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fNumFixed2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr8Z_info" {
     sat_sgr8Z_info:
         const sat_sgr8Z_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+640;
 },
 sat_sgr8Y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgrSn: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fNumFixed_$c*_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr8Y_info" {
     sat_sgr8Y_info:
         const sat_sgr8Y_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+624;
 },
 section ""relreadonly" . ugrSw_srtd" {
     ugrSw_srtd:
         const Sgrd7_srt+16;
         const 80;
         const 3;
         const 61440;
 },
 Data.Fixed.$fNumFixed_entry() //  [R2]
         { []
         }
     {offset
       cgrSr: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgrSv; else goto cgrSu;
       cgrSv: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Fixed.$fNumFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrSu: // global
           I64[Hp - 104] = sat_sgr90_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgr8Z_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgr8Y_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = GHC.Integer.Type.plusInteger_closure+2;
           P64[Hp - 40] = GHC.Integer.Type.minusInteger_closure+2;
           P64[Hp - 32] = Hp - 70;
           P64[Hp - 24] = GHC.Integer.Type.negateInteger_closure+1;
           P64[Hp - 16] = GHC.Integer.Type.absInteger_closure+1;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fNumFixed_info" {
     Data.Fixed.$fNumFixed_info:
         const Data.Fixed.$fNumFixed_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugrSw_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.327029726 UTC

[section ""data" . Data.Fixed.$fFractionalFixed_closure" {
     Data.Fixed.$fFractionalFixed_closure:
         const Data.Fixed.$fFractionalFixed_info;
         const 0;
 },
 sat_sgr95_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrTa: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fFractionalFixed1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr95_info" {
     sat_sgr95_info:
         const sat_sgr95_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+576;
 },
 sat_sgr94_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrTi: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fFractionalFixed_$crecip_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr94_info" {
     sat_sgr94_info:
         const sat_sgr94_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+616;
 },
 sat_sgr93_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgrTq: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fFractionalFixed3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr93_info" {
     sat_sgr93_info:
         const sat_sgr93_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+608;
 },
 sat_sgr92_entry() //  [R1]
         { []
         }
     {offset
       cgrTx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrTy; else goto cgrTz;
       cgrTy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrTz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr92_info" {
     sat_sgr92_info:
         const sat_sgr92_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+648;
 },
 Data.Fixed.$fFractionalFixed_entry() //  [R2]
         { []
         }
     {offset
       cgrTB: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cgrTF; else goto cgrTE;
       cgrTF: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Fixed.$fFractionalFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrTE: // global
           I64[Hp - 104] = sat_sgr95_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sgr94_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgr93_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgr92_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fFractionalFixed_info" {
     Data.Fixed.$fFractionalFixed_info:
         const Data.Fixed.$fFractionalFixed_entry;
         const 0;
         const 6807523164174;
         const 4294967301;
         const Sgrd7_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.338214463 UTC

[section ""data" . Data.Fixed.$fReadFixed2_closure" {
     Data.Fixed.$fReadFixed2_closure:
         const Data.Fixed.$fReadFixed2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fReadFixed2_entry() //  [R1]
         { []
         }
     {offset
       cgrUh: // global
           _rgoxK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgrUk; else goto cgrUl;
       cgrUl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgrUn; else goto cgrUm;
       cgrUn: // global
           HpAlloc = 16;
           goto cgrUk;
       cgrUk: // global
           R1 = _rgoxK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrUm: // global
           (_cgrUb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rgoxK::P64);
           if (_cgrUb::I64 == 0) goto cgrUd; else goto cgrUc;
       cgrUd: // global
           call (I64[I64[_rgoxK::P64]])() args: 8, res: 0, upd: 8;
       cgrUc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrUb::I64;
           (_cgrUe::F64) = call MO_F64_Log(10.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _cgrUe::F64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed2_info" {
     Data.Fixed.$fReadFixed2_info:
         const Data.Fixed.$fReadFixed2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.342443722 UTC

[section ""data" . lvl9_rgoyO_closure" {
     lvl9_rgoyO_closure:
         const GHC.Types.I#_con_info;
         const 172;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.344218144 UTC

[section ""data" . lvl10_rgoyP_closure" {
     lvl10_rgoyP_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.345959371 UTC

[section ""data" . lvl11_rgoyQ_closure" {
     lvl11_rgoyQ_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.347888249 UTC

[section ""data" . lvl12_rgoyR_closure" {
     lvl12_rgoyR_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_rgoyp_closure;
         const loc1_rgoyq_closure;
         const loc3_rgoys_closure;
         const lvl9_rgoyO_closure+1;
         const lvl10_rgoyP_closure+1;
         const lvl9_rgoyO_closure+1;
         const lvl11_rgoyQ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.349935738 UTC

[section ""data" . lvl13_rgoyS_closure" {
     lvl13_rgoyS_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rgoyx_closure;
         const lvl12_rgoyR_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.35260324 UTC

[section ""data" . Data.Fixed.$fReadFixed3_closure" {
     Data.Fixed.$fReadFixed3_closure:
         const Data.Fixed.$fReadFixed3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Fixed.$fReadFixed3_entry() //  [R1]
         { []
         }
     {offset
       cgrUK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrUL; else goto cgrUM;
       cgrUL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrUM: // global
           (_cgrUH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgrUH::I64 == 0) goto cgrUJ; else goto cgrUI;
       cgrUJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgrUI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgrUH::I64;
           R2 = lvl13_rgoyS_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed3_info" {
     Data.Fixed.$fReadFixed3_info:
         const Data.Fixed.$fReadFixed3_entry;
         const 0;
         const 1125904201809941;
         const Sgrd7_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.366650627 UTC

[section ""data" . Data.Fixed.$fReadFixed1_closure" {
     Data.Fixed.$fReadFixed1_closure:
         const Data.Fixed.$fReadFixed1_info;
         const 0;
 },
 lvl17_sgr98_entry() //  [R1]
         { []
         }
     {offset
       cgrV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrV4; else goto cgrV5;
       cgrV4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrV5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_sgr98_info" {
     lvl17_sgr98_info:
         const lvl17_sgr98_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+568;
 },
 e_sgr99_entry() //  [R1]
         { []
         }
     {offset
       cgrVc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgrVo; else goto cgrVp;
       cgrVo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrVp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgrVa_info;
           R2 = Data.Fixed.$fReadFixed3_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . e_sgr99_info" {
     e_sgr99_info:
         const e_sgr99_entry;
         const 1;
         const 133143986192;
         const Sgrd7_srt+672;
 },
 _cgrVa() //  [R1]
         { []
         }
     {offset
       cgrVa: // global
           I64[Sp] = block_cgrVf_info;
           R2 = R1;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVa_info" {
     block_cgrVa_info:
         const _cgrVa;
         const 0;
         const 115964117022;
         const Sgrd7_srt+672;
 },
 _cgrVf() //  [D1]
         { []
         }
     {offset
       cgrVf: // global
           _cgrVk::F64 = D1;
           (_cgrVj::F64) = call MO_F64_Log(_cgrVk::F64);
           I64[Sp - 8] = block_cgrVn_info;
           R1 = Data.Fixed.$fReadFixed2_closure;
           F64[Sp] = _cgrVj::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugrWs; else goto cgrVs;
       ugrWs: // global
           call _cgrVn(R1) args: 0, res: 0, upd: 0;
       cgrVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVf_info" {
     block_cgrVf_info:
         const _cgrVf;
         const 0;
         const 115964117022;
         const Sgrd7_srt+672;
 },
 _cgrVn() //  [R1]
         { []
         }
     {offset
       cgrVn: // global
           _sgr9g::F64 = %MO_F_Neg_W64(%MO_F_Quot_W64(F64[Sp + 8],
                                                      F64[R1 + 7]));
           I64[Sp + 8] = block_cgrVD_info;
           D1 = _sgr9g::F64;
           Sp = Sp + 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVn_info" {
     block_cgrVn_info:
         const _cgrVn;
         const 65;
         const 107374182430;
         const Sgrd7_srt+672;
 },
 _cgrVD() //  [R1, R2]
         { []
         }
     {offset
       cgrVD: // global
           if (%MO_S_Ge_W64(R2, 0)) goto cgrVN; else goto cgrWr;
       cgrVN: // global
           I64[Sp] = block_cgrVL_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       cgrWr: // global
           _sgr9m::I64 = -R2;
           if (%MO_S_Le_W64(_sgr9m::I64, 52)) goto cgrW8; else goto cgrWg;
       cgrW8: // global
           I64[Sp - 8] = block_cgrVZ_info;
           R2 = R1;
           I64[Sp] = _sgr9m::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
       cgrWg: // global
           I64[Sp] = block_cgrWf_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVD_info" {
     block_cgrVD_info:
         const _cgrVD;
         const 0;
         const 12884901918;
         const Sgrd7_srt+696;
 },
 _cgrVL() //  [R1]
         { []
         }
     {offset
       cgrVL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVL_info" {
     block_cgrVL_info:
         const _cgrVL;
         const 0;
         const 30;
 },
 _cgrVZ() //  [R1]
         { []
         }
     {offset
       cgrVZ: // global
           _sgr9p::I64 = %MO_S_Shr_W64(R1, I64[Sp + 8]);
           I64[Sp + 8] = block_cgrW6_info;
           R2 = _sgr9p::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrVZ_info" {
     block_cgrVZ_info:
         const _cgrVZ;
         const 65;
         const 30;
 },
 _cgrW6() //  [R1]
         { []
         }
     {offset
       cgrW6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrW6_info" {
     block_cgrW6_info:
         const _cgrW6;
         const 0;
         const 30;
 },
 _cgrWf() //  [R1]
         { []
         }
     {offset
       cgrWf: // global
           if (R1 == 1) goto cgrWq; else goto cgrWm;
       cgrWq: // global
           R1 = Data.Fixed.$fEnumFixed2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cgrWm: // global
           R1 = Data.Fixed.$fEnumFixed1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrWf_info" {
     block_cgrWf_info:
         const _cgrWf;
         const 0;
         const 12884901918;
         const Sgrd7_srt+696;
 },
 section ""relreadonly" . ugrYm_srtd" {
     ugrYm_srtd:
         const Sgrd7_srt+120;
         const 57;
         const 76561193665298433;
 },
 sat_sgr9v_entry() //  [R1]
         { []
         }
     {offset
       cgrWD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgrWE; else goto cgrWF;
       cgrWE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrWF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgrWB_info;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9v_info" {
     sat_sgr9v_info:
         const sat_sgr9v_entry;
         const 1;
         const 18446744069414584336;
         const ugrYm_srtd;
 },
 section ""relreadonly" . ugrYn_srtd" {
     ugrYn_srtd:
         const Sgrd7_srt+120;
         const 53;
         const 4503599627370497;
 },
 _cgrWB() //  [R1]
         { []
         }
     {offset
       cgrWB: // global
           R3 = R1;
           R2 = Data.Fixed.$fHasResolutionE4_closure;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrWB_info" {
     block_cgrWB_info:
         const _cgrWB;
         const 0;
         const 18446744069414584350;
         const ugrYn_srtd;
 },
 sat_sgr9t_entry() //  [R1]
         { []
         }
     {offset
       cgrWN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrWO; else goto cgrWP;
       cgrWO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrWP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9t_info" {
     sat_sgr9t_info:
         const sat_sgr9t_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+648;
 },
 section ""relreadonly" . ugrYo_srtd" {
     ugrYo_srtd:
         const Sgrd7_srt+120;
         const 75;
         const 76842668642009089;
         const 1028;
 },
 lvl18_sgr9s_entry() //  [R1]
         { []
         }
     {offset
       cgrWQ: // global
           _sgr9s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgrWR; else goto cgrWS;
       cgrWS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgrWU; else goto cgrWT;
       cgrWU: // global
           HpAlloc = 48;
           goto cgrWR;
       cgrWR: // global
           R1 = _sgr9s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrWT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr9s::P64;
           _sgr97::P64 = P64[_sgr9s::P64 + 16];
           _sgr99::P64 = P64[_sgr9s::P64 + 24];
           I64[Hp - 40] = sat_sgr9v_info;
           P64[Hp - 24] = _sgr97::P64;
           I64[Hp - 16] = sat_sgr9t_info;
           P64[Hp] = _sgr97::P64;
           R5 = _sgr99::P64;
           R4 = Hp - 40;
           R3 = GHC.Real.$fIntegralInteger_closure;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_sgr9s_info" {
     lvl18_sgr9s_info:
         const lvl18_sgr9s_entry;
         const 2;
         const 18446744069414584338;
         const ugrYo_srtd;
 },
 section ""relreadonly" . ugrYp_srtd" {
     ugrYp_srtd:
         const Sgrd7_srt+16;
         const 75;
         const 1;
         const 1026;
 },
 x_sgr9F_entry() //  [R1]
         { []
         }
     {offset
       cgrXm: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgrXu; else goto cgrXv;
       cgrXu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrXv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgrXk_info;
           _sgr98::P64 = P64[R1 + 24];
           R3 = _sgr98::P64;
           R2 = P64[R1 + 48];
           P64[Sp - 48] = P64[R1 + 16];
           P64[Sp - 40] = _sgr98::P64;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 56;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_sgr9F_info" {
     x_sgr9F_info:
         const x_sgr9F_entry;
         const 5;
         const 18446744069414584335;
         const ugrYp_srtd;
 },
 section ""relreadonly" . ugrYq_srtd" {
     ugrYq_srtd:
         const Sgrd7_srt+16;
         const 75;
         const 1;
         const 1026;
 },
 _cgrXk() //  [R1]
         { []
         }
     {offset
       cgrXk: // global
           _sgr97::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgrXp_info;
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = _sgr97::P64;
           Sp = Sp + 8;
           call Data.Fixed.$fFractionalFixed3_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrXk_info" {
     block_cgrXk_info:
         const _cgrXk;
         const 4;
         const 18446744069414584350;
         const ugrYq_srtd;
 },
 section ""relreadonly" . ugrYr_srtd" {
     ugrYr_srtd:
         const Sgrd7_srt+16;
         const 66;
         const 1;
         const 2;
 },
 _cgrXp() //  [R1]
         { []
         }
     {offset
       cgrXp: // global
           I64[Sp + 16] = block_cgrXt_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrXp_info" {
     block_cgrXp_info:
         const _cgrXp;
         const 131;
         const 18446744069414584350;
         const ugrYr_srtd;
 },
 _cgrXt() //  [R1]
         { []
         }
     {offset
       cgrXt: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgrXt_info" {
     block_cgrXt_info:
         const _cgrXt;
         const 1;
         const 4294967326;
         const Sgrd7_srt+720;
 },
 sat_sgr9L_entry() //  [R1, R3]
         { []
         }
     {offset
       cgrXH: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr9L_info" {
     sat_sgr9L_info:
         const sat_sgr9L_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgr9M_entry() //  [R1, R2]
         { []
         }
     {offset
       cgrXO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgrXP; else goto cgrXQ;
       cgrXP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrXQ: // global
           I64[Sp - 40] = block_cgrX0_info;
           _sgr97::P64 = P64[R1 + 7];
           _sgr98::P64 = P64[R1 + 15];
           _sgr99::P64 = P64[R1 + 23];
           _sgr9s::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgr97::P64;
           P64[Sp - 24] = _sgr98::P64;
           P64[Sp - 16] = _sgr99::P64;
           P64[Sp - 8] = _sgr9s::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugrY9; else goto cgrX1;
       ugrY9: // global
           call _cgrX0(R1) args: 0, res: 0, upd: 0;
       cgrX1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr9M_info" {
     sat_sgr9M_info:
         const sat_sgr9M_entry;
         const 4;
         const 108088594375114760;
         const 4294967301;
         const Sgrd7_srt+536;
 },
 _cgrX0() //  [R1]
         { []
         }
     {offset
       cgrX0: // global
           if (R1 & 7 == 6) goto cgrXM; else goto ugrY4;
       cgrXM: // global
           I64[Sp] = block_cgrX6_info;
           R3 = P64[R1 + 2];
           R2 = P64[Sp + 24];
           call Text.Read.Lex.numberToFixed_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       ugrY4: // global
           Sp = Sp + 40;
           call _cgrXX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgrX0_info" {
     block_cgrX0_info:
         const _cgrX0;
         const 4;
         const 108088594375114782;
         const Sgrd7_srt+536;
 },
 _cgrX6() //  [R1]
         { []
         }
     {offset
       cgrX6: // global
           if (R1 & 7 == 1) goto ugrY5; else goto cgrXZ;
       ugrY5: // global
           Sp = Sp + 40;
           call _cgrXX() args: 0, res: 0, upd: 0;
       cgrXZ: // global
           I64[Sp] = block_cgrXb_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ugrY7; else goto cgrXc;
       ugrY7: // global
           call _cgrXb(R1) args: 0, res: 0, upd: 0;
       cgrXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrX6_info" {
     block_cgrX6_info:
         const _cgrX6;
         const 260;
         const 36031000337186846;
         const Sgrd7_srt+536;
 },
 _cgrXb() //  [R1]
         { []
         }
     {offset
       cgrXb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgrY2; else goto cgrY1;
       cgrY2: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgrY1: // global
           _sgr9D::P64 = P64[R1 + 7];
           _sgr9E::P64 = P64[R1 + 15];
           I64[Hp - 64] = x_sgr9F_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgr9D::P64;
           P64[Hp - 16] = _sgr9E::P64;
           I64[Hp - 8] = sat_sgr9L_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 6;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgrXb_info" {
     block_cgrXb_info:
         const _cgrXb;
         const 260;
         const 36031000337186846;
         const Sgrd7_srt+536;
 },
 _cgrXX() //  []
         { []
         }
     {offset
       cgrXX: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sgr9w_entry() //  [R1]
         { []
         }
     {offset
       cgrYe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgrYf; else goto cgrYg;
       cgrYf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgrYg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9w_info" {
     sat_sgr9w_info:
         const sat_sgr9w_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+648;
 },
 section ""relreadonly" . ugrYs_srtd" {
     ugrYs_srtd:
         const Sgrd7_srt+120;
         const 79;
         const 2382685677855703041;
         const 32740;
 },
 Data.Fixed.$fReadFixed1_entry() //  [R2]
         { []
         }
     {offset
       cgrYh: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgrYl; else goto cgrYk;
       cgrYl: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgrYk: // global
           I64[Hp - 136] = lvl17_sgr98_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = e_sgr99_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = lvl18_sgr9s_info;
           P64[Hp - 72] = R2;
           _cgrV6::P64 = Hp - 112;
           P64[Hp - 64] = _cgrV6::P64;
           I64[Hp - 56] = sat_sgr9M_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = _cgrV6::P64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sgr9w_info;
           P64[Hp] = R2;
           R3 = Hp - 55;
           R2 = Hp - 16;
           R1 = GHC.Read.readNumber1_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed1_info" {
     Data.Fixed.$fReadFixed1_info:
         const Data.Fixed.$fReadFixed1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugrYs_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.422814972 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadsPrec_closure" {
     Data.Fixed.$fReadFixed_$creadsPrec_closure:
         const Data.Fixed.$fReadFixed_$creadsPrec_info;
         const 0;
 },
 ds_sgr9O_entry() //  [R1]
         { []
         }
     {offset
       cgs12: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs13; else goto cgs14;
       cgs13: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs14: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgr9O_info" {
     ds_sgr9O_info:
         const ds_sgr9O_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+744;
 },
 sat_sgr9Q_entry() //  [R1]
         { []
         }
     {offset
       cgs1e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs1f; else goto cgs1g;
       cgs1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs1g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9Q_info" {
     sat_sgr9Q_info:
         const sat_sgr9Q_entry;
         const 2;
         const 18;
 },
 sat_sgr9R_entry() //  [R1, R2]
         { []
         }
     {offset
       cgs1h: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgs1l; else goto cgs1k;
       cgs1l: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs1k: // global
           _sgr9O::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgr9Q_info;
           P64[Hp - 8] = _sgr9O::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr9R_info" {
     sat_sgr9R_info:
         const sat_sgr9R_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Fixed.$fReadFixed_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cgs1m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgs1q; else goto cgs1p;
       cgs1q: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs1p: // global
           I64[Hp - 32] = ds_sgr9O_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sgr9R_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadsPrec_info" {
     Data.Fixed.$fReadFixed_$creadsPrec_info:
         const Data.Fixed.$fReadFixed_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sgrd7_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.432638165 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadListPrec_closure" {
     Data.Fixed.$fReadFixed_$creadListPrec_closure:
         const Data.Fixed.$fReadFixed_$creadListPrec_info;
         const 0;
 },
 sat_sgr9T_entry() //  [R1]
         { []
         }
     {offset
       cgs1X: // global
           R2 = P64[R1 + 16];
           call Data.Fixed.$fReadFixed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr9T_info" {
     sat_sgr9T_info:
         const sat_sgr9T_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+744;
 },
 Data.Fixed.$fReadFixed_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cgs20: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgs24; else goto cgs23;
       cgs24: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs23: // global
           I64[Hp - 16] = sat_sgr9T_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadListPrec_info" {
     Data.Fixed.$fReadFixed_$creadListPrec_info:
         const Data.Fixed.$fReadFixed_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const Sgrd7_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.439119928 UTC

[section ""data" . Data.Fixed.$fReadFixed_$creadList_closure" {
     Data.Fixed.$fReadFixed_$creadList_closure:
         const Data.Fixed.$fReadFixed_$creadList_info;
         const 0;
 },
 sat_sgr9V_entry() //  [R1]
         { []
         }
     {offset
       cgs2p: // global
           R2 = P64[R1 + 16];
           call Data.Fixed.$fReadFixed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgr9V_info" {
     sat_sgr9V_info:
         const sat_sgr9V_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+744;
 },
 sat_sgr9W_entry() //  [R1]
         { []
         }
     {offset
       cgs2s: // global
           _sgr9W::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgs2t; else goto cgs2u;
       cgs2u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgs2w; else goto cgs2v;
       cgs2w: // global
           HpAlloc = 24;
           goto cgs2t;
       cgs2t: // global
           R1 = _sgr9W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs2v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgr9W::P64;
           _sgr9U::P64 = P64[_sgr9W::P64 + 16];
           I64[Hp - 16] = sat_sgr9V_info;
           P64[Hp] = _sgr9U::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9W_info" {
     sat_sgr9W_info:
         const sat_sgr9W_entry;
         const 1;
         const 21474836496;
         const Sgrd7_srt+744;
 },
 Data.Fixed.$fReadFixed_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cgs2x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgs2B; else goto cgs2A;
       cgs2B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs2A: // global
           I64[Hp - 16] = sat_sgr9W_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_$creadList_info" {
     Data.Fixed.$fReadFixed_$creadList_info:
         const Data.Fixed.$fReadFixed_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const Sgrd7_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.449844924 UTC

[section ""data" . Data.Fixed.$fReadFixed_closure" {
     Data.Fixed.$fReadFixed_closure:
         const Data.Fixed.$fReadFixed_info;
         const 0;
 },
 sat_sgra1_entry() //  [R1]
         { []
         }
     {offset
       cgs33: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs34; else goto cgs35;
       cgs34: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs35: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgra1_info" {
     sat_sgra1_info:
         const sat_sgra1_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+768;
 },
 sat_sgra0_entry() //  [R1]
         { []
         }
     {offset
       cgs3a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs3b; else goto cgs3c;
       cgs3b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs3c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgra0_info" {
     sat_sgra0_info:
         const sat_sgra0_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+744;
 },
 sat_sgr9Z_entry() //  [R1]
         { []
         }
     {offset
       cgs3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs3i; else goto cgs3j;
       cgs3i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs3j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9Z_info" {
     sat_sgr9Z_info:
         const sat_sgr9Z_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+776;
 },
 sat_sgr9Y_entry() //  [R1]
         { []
         }
     {offset
       cgs3o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs3p; else goto cgs3q;
       cgs3p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs3q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fReadFixed_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgr9Y_info" {
     sat_sgr9Y_info:
         const sat_sgr9Y_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+752;
 },
 Data.Fixed.$fReadFixed_entry() //  [R2]
         { []
         }
     {offset
       cgs3s: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cgs3w; else goto cgs3v;
       cgs3w: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Fixed.$fReadFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs3v: // global
           I64[Hp - 128] = sat_sgra1_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgra0_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgr9Z_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgr9Y_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fReadFixed_info" {
     Data.Fixed.$fReadFixed_info:
         const Data.Fixed.$fReadFixed_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const Sgrd7_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.460262292 UTC

[section ""data" . Data.Fixed.$fEqFixed_closure" {
     Data.Fixed.$fEqFixed_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.462137149 UTC

[section ""data" . Data.Fixed.$fOrdFixed_closure" {
     Data.Fixed.$fOrdFixed_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Fixed.$fEqFixed_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.465564399 UTC

[section ""data" . Data.Fixed.$fRealFixed_closure" {
     Data.Fixed.$fRealFixed_closure:
         const Data.Fixed.$fRealFixed_info;
         const 0;
 },
 sat_sgra4_entry() //  [R1, R2]
         { []
         }
     {offset
       cgs4g: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fRealFixed_$ctoRational_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgra4_info" {
     sat_sgra4_info:
         const sat_sgra4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+584;
 },
 sat_sgra3_entry() //  [R1]
         { []
         }
     {offset
       cgs4n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs4o; else goto cgs4p;
       cgs4o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs4p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fNumFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgra3_info" {
     sat_sgra3_info:
         const sat_sgra3_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+648;
 },
 Data.Fixed.$fRealFixed_entry() //  [R2]
         { []
         }
     {offset
       cgs4r: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgs4v; else goto cgs4u;
       cgs4v: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Fixed.$fRealFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgs4u: // global
           I64[Hp - 64] = sat_sgra4_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sgra3_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Data.Fixed.$fOrdFixed_closure+1;
           P64[Hp] = Hp - 63;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFixed_info" {
     Data.Fixed.$fRealFixed_info:
         const Data.Fixed.$fRealFixed_entry;
         const 0;
         const 288231479958306830;
         const 4294967301;
         const Sgrd7_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.475981066 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$ctruncate_closure" {
     Data.Fixed.$fRealFracFixed_$ctruncate_closure:
         const Data.Fixed.$fRealFracFixed_$ctruncate_info;
         const 0;
 },
 sat_sgraj_entry() //  [R1]
         { []
         }
     {offset
       cgs58: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgs59; else goto cgs5a;
       cgs59: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs5a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgs53_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgrab::P64 = P64[R1 + 24];
           R2 = _sgrab::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _sgrab::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgraj_info" {
     sat_sgraj_info:
         const sat_sgraj_entry;
         const 2;
         const 35188667056146;
         const Sgrd7_srt+600;
 },
 _cgs53() //  [R1]
         { []
         }
     {offset
       cgs53: // global
           if (R1 == 1) goto cgs57; else goto cgs56;
       cgs57: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cgs56: // global
           _sgrab::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgs5d_info;
           R3 = _sgrab::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgs53_info" {
     block_cgs53_info:
         const _cgs53;
         const 2;
         const 4294967326;
         const Sgrd7_srt+600;
 },
 _cgs5d() //  [R1]
         { []
         }
     {offset
       cgs5d: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgs5d_info" {
     block_cgs5d_info:
         const _cgs5d;
         const 0;
         const 30;
 },
 section ""relreadonly" . ugs5B_srtd" {
     ugs5B_srtd:
         const Sgrd7_srt+464;
         const 43;
         const 4399120386049;
 },
 Data.Fixed.$fRealFracFixed_$ctruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgs5k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgs5q; else goto cgs5r;
       cgs5q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$ctruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs5r: // global
           I64[Sp - 24] = block_cgs4T_info;
           _sgra5::P64 = R2;
           R2 = R4;
           R1 = _sgra5::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$ctruncate_info" {
     Data.Fixed.$fRealFracFixed_$ctruncate_info:
         const Data.Fixed.$fRealFracFixed_$ctruncate_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugs5B_srtd;
 },
 _cgs4T() //  [R1]
         { []
         }
     {offset
       cgs4T: // global
           I64[Sp] = block_cgs4X_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs4T_info" {
     block_cgs4T_info:
         const _cgs4T;
         const 2;
         const 4612257768768798750;
         const Sgrd7_srt+464;
 },
 _cgs4X() //  [R1, R2]
         { []
         }
     {offset
       cgs4X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgs5v; else goto cgs5u;
       cgs5v: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgs5u: // global
           I64[Hp - 24] = sat_sgraj_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           _sgra6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgs5l_info;
           R2 = _sgra6::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp + 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs4X_info" {
     block_cgs4X_info:
         const _cgs4X;
         const 130;
         const 35188667056158;
         const Sgrd7_srt+600;
 },
 _cgs5l() //  [R1]
         { []
         }
     {offset
       cgs5l: // global
           I64[Sp] = block_cgs5p_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs5l_info" {
     block_cgs5l_info:
         const _cgs5l;
         const 1;
         const 30;
 },
 _cgs5p() //  [R1]
         { []
         }
     {offset
       cgs5p: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs5p_info" {
     block_cgs5p_info:
         const _cgs5p;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.49215969 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cround_closure" {
     Data.Fixed.$fRealFracFixed_$cround_closure:
         const Data.Fixed.$fRealFracFixed_$cround_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgs6n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgs6r; else goto cgs6s;
       cgs6r: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs6s: // global
           I64[Sp - 24] = block_cgs6l_info;
           _sgrak::P64 = R2;
           R2 = R4;
           R1 = _sgrak::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cround_info" {
     Data.Fixed.$fRealFracFixed_$cround_info:
         const Data.Fixed.$fRealFracFixed_$cround_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sgrd7_srt+808;
 },
 _cgs6l() //  [R1]
         { []
         }
     {offset
       cgs6l: // global
           I64[Sp] = block_cgs6q_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs6l_info" {
     block_cgs6l_info:
         const _cgs6l;
         const 2;
         const 55834574878;
         const Sgrd7_srt+808;
 },
 _cgs6q() //  [R1, R2]
         { []
         }
     {offset
       cgs6q: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs6q_info" {
     block_cgs6q_info:
         const _cgs6q;
         const 130;
         const 4294967326;
         const Sgrd7_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.499979723 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cceiling_closure" {
     Data.Fixed.$fRealFracFixed_$cceiling_closure:
         const Data.Fixed.$fRealFracFixed_$cceiling_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgs6P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgs6T; else goto cgs6U;
       cgs6T: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs6U: // global
           I64[Sp - 24] = block_cgs6N_info;
           _sgrar::P64 = R2;
           R2 = R4;
           R1 = _sgrar::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cceiling_info" {
     Data.Fixed.$fRealFracFixed_$cceiling_info:
         const Data.Fixed.$fRealFracFixed_$cceiling_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sgrd7_srt+824;
 },
 _cgs6N() //  [R1]
         { []
         }
     {offset
       cgs6N: // global
           I64[Sp] = block_cgs6S_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs6N_info" {
     block_cgs6N_info:
         const _cgs6N;
         const 2;
         const 30064771102;
         const Sgrd7_srt+824;
 },
 _cgs6S() //  [R1, R2]
         { []
         }
     {offset
       cgs6S: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cceiling_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs6S_info" {
     block_cgs6S_info:
         const _cgs6S;
         const 130;
         const 4294967326;
         const Sgrd7_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.50813625 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cfloor_closure" {
     Data.Fixed.$fRealFracFixed_$cfloor_closure:
         const Data.Fixed.$fRealFracFixed_$cfloor_info;
         const 0;
 },
 section ""relreadonly" . ugs7q_srtd" {
     ugs7q_srtd:
         const Sgrd7_srt+472;
         const 49;
         const 334251534843905;
 },
 Data.Fixed.$fRealFracFixed_$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgs7h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgs7l; else goto cgs7m;
       cgs7l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs7m: // global
           I64[Sp - 24] = block_cgs7f_info;
           _sgray::P64 = R2;
           R2 = R4;
           R1 = _sgray::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cfloor_info" {
     Data.Fixed.$fRealFracFixed_$cfloor_info:
         const Data.Fixed.$fRealFracFixed_$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugs7q_srtd;
 },
 section ""relreadonly" . ugs7r_srtd" {
     ugs7r_srtd:
         const Sgrd7_srt+472;
         const 46;
         const 52776558133249;
 },
 _cgs7f() //  [R1]
         { []
         }
     {offset
       cgs7f: // global
           I64[Sp] = block_cgs7k_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = R1;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 16];
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs7f_info" {
     block_cgs7f_info:
         const _cgs7f;
         const 2;
         const 18446744069414584350;
         const ugs7r_srtd;
 },
 _cgs7k() //  [R1, R2]
         { []
         }
     {offset
       cgs7k: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs7k_info" {
     block_cgs7k_info:
         const _cgs7k;
         const 130;
         const 4294967326;
         const Sgrd7_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.517957066 UTC

[section ""data" . Data.Fixed.$w$cproperFraction_closure" {
     Data.Fixed.$w$cproperFraction_closure:
         const Data.Fixed.$w$cproperFraction_info;
         const 0;
 },
 i_sgraI_entry() //  [R1]
         { []
         }
     {offset
       cgs7P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs7Q; else goto cgs7R;
       cgs7Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs7R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fRealFracFixed_$ctruncate_entry(R4,
                                                            R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . i_sgraI_info" {
     i_sgraI_info:
         const i_sgraI_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+800;
 },
 sat_sgraM_entry() //  [R1]
         { []
         }
     {offset
       cgs7Y: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgs86; else goto cgs87;
       cgs86: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgs87: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cgs7W_info;
           R2 = Data.Fixed.$fFractionalFixed2_closure;
           _sgraG::P64 = P64[R1 + 24];
           _sgraH::P64 = P64[R1 + 32];
           _sgraI::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sgraG::P64;
           P64[Sp - 32] = _sgraH::P64;
           P64[Sp - 24] = _sgraI::P64;
           Sp = Sp - 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgraM_info" {
     sat_sgraM_info:
         const sat_sgraM_entry;
         const 4;
         const 30064771087;
         const Sgrd7_srt+872;
 },
 _cgs7W() //  [R1]
         { []
         }
     {offset
       cgs7W: // global
           _sgraG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cgs81_info;
           R2 = _sgraG::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgs7W_info" {
     block_cgs7W_info:
         const _cgs7W;
         const 3;
         const 12884901918;
         const Sgrd7_srt+880;
 },
 _cgs81() //  [R1]
         { []
         }
     {offset
       cgs81: // global
           I64[Sp] = block_cgs85_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cgs81_info" {
     block_cgs81_info:
         const _cgs81;
         const 2;
         const 12884901918;
         const Sgrd7_srt+880;
 },
 _cgs85() //  [R1]
         { []
         }
     {offset
       cgs85: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgs85_info" {
     block_cgs85_info:
         const _cgs85;
         const 130;
         const 4294967326;
         const Sgrd7_srt+888;
 },
 Data.Fixed.$w$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgs8e: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgs8i; else goto cgs8h;
       cgs8i: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$w$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs8h: // global
           I64[Hp - 80] = i_sgraI_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgraM_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           _cgs7L::P64 = Hp - 80;
           P64[Hp] = _cgs7L::P64;
           R2 = Hp - 40;
           R1 = _cgs7L::P64;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$w$cproperFraction_info" {
     Data.Fixed.$w$cproperFraction_info:
         const Data.Fixed.$w$cproperFraction_entry;
         const 0;
         const 32989643800590;
         const 12884901911;
         const Sgrd7_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.531645656 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_$cproperFraction_closure" {
     Data.Fixed.$fRealFracFixed_$cproperFraction_closure:
         const Data.Fixed.$fRealFracFixed_$cproperFraction_info;
         const 0;
 },
 Data.Fixed.$fRealFracFixed_$cproperFraction_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cgs8V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgs8W; else goto cgs8X;
       cgs8W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgs8X: // global
           I64[Sp - 8] = block_cgs8S_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Fixed.$w$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_$cproperFraction_info" {
     Data.Fixed.$fRealFracFixed_$cproperFraction_info:
         const Data.Fixed.$fRealFracFixed_$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sgrd7_srt+896;
 },
 _cgs8S() //  [R1, R2]
         { []
         }
     {offset
       cgs8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgs90; else goto cgs8Z;
       cgs90: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgs8Z: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgs8S_info" {
     block_cgs8S_info:
         const _cgs8S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.539719044 UTC

[section ""data" . Data.Fixed.$fRealFracFixed_closure" {
     Data.Fixed.$fRealFracFixed_closure:
         const Data.Fixed.$fRealFracFixed_info;
         const 0;
 },
 sat_sgrb0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgs9l: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cfloor_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrb0_info" {
     sat_sgrb0_info:
         const sat_sgrb0_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+856;
 },
 sat_sgraZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgs9t: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cceiling_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgraZ_info" {
     sat_sgraZ_info:
         const sat_sgraZ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+848;
 },
 sat_sgraY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgs9B: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cround_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgraY_info" {
     sat_sgraY_info:
         const sat_sgraY_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+816;
 },
 sat_sgraX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgs9J: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$ctruncate_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgraX_info" {
     sat_sgraX_info:
         const sat_sgraX_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+800;
 },
 sat_sgraW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgs9R: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fRealFracFixed_$cproperFraction_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgraW_info" {
     sat_sgraW_info:
         const sat_sgraW_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+904;
 },
 sat_sgraV_entry() //  [R1]
         { []
         }
     {offset
       cgs9Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgs9Z; else goto cgsa0;
       cgs9Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgsa0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fFractionalFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgraV_info" {
     sat_sgraV_info:
         const sat_sgraV_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+656;
 },
 sat_sgraU_entry() //  [R1]
         { []
         }
     {offset
       cgsa5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgsa6; else goto cgsa7;
       cgsa6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgsa7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Fixed.$fRealFixed_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgraU_info" {
     sat_sgraU_info:
         const sat_sgraU_entry;
         const 1;
         const 4294967312;
         const Sgrd7_srt+792;
 },
 section ""relreadonly" . ugsae_srtd" {
     ugsae_srtd:
         const Sgrd7_srt+656;
         const 33;
         const 6494224385;
 },
 Data.Fixed.$fRealFracFixed_entry() //  [R2]
         { []
         }
     {offset
       cgsa9: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cgsad; else goto cgsac;
       cgsad: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = Data.Fixed.$fRealFracFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgsac: // global
           I64[Hp - 184] = sat_sgrb0_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sgraZ_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sgraY_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sgraX_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sgraW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sgraV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sgraU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 118;
           P64[Hp - 24] = Hp - 134;
           P64[Hp - 16] = Hp - 150;
           P64[Hp - 8] = Hp - 166;
           P64[Hp] = Hp - 182;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fRealFracFixed_info" {
     Data.Fixed.$fRealFracFixed_info:
         const Data.Fixed.$fRealFracFixed_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugsae_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.558445538 UTC

[section ""data" . chopZeros_rgnn4_closure" {
     chopZeros_rgnn4_closure:
         const chopZeros_rgnn4_info;
         const 0;
 },
 section ""relreadonly" . ugsbG_srtd" {
     ugsbG_srtd:
         const Sgrd7_srt+120;
         const 103;
         const 576460752303423489;
         const 481036337664;
 },
 chopZeros_rgnn4_entry() //  [R2]
         { []
         }
     {offset
       cgsb8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgsb9; else goto ugsbC;
       cgsb9: // global
           R2 = R2;
           R1 = chopZeros_rgnn4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ugsbC: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _cgsb0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . chopZeros_rgnn4_info" {
     chopZeros_rgnn4_info:
         const chopZeros_rgnn4_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const ugsbG_srtd;
 },
 _cgsb0() //  []
         { []
         }
     {offset
       cgsb0: // global
           I64[Sp - 8] = block_cgsb3_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ugsbH_srtd" {
     ugsbH_srtd:
         const Sgrd7_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgsb3() //  [R1]
         { []
         }
     {offset
       cgsb3: // global
           if (R1 == 1) goto cgsb7; else goto cgsb6;
       cgsb7: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgsb6: // global
           I64[Sp] = block_cgsbd_info;
           R3 = Data.Fixed.$fHasResolutionE4_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsb3_info" {
     block_cgsb3_info:
         const _cgsb3;
         const 1;
         const 18446744069414584350;
         const ugsbH_srtd;
 },
 section ""relreadonly" . ugsbI_srtd" {
     ugsbI_srtd:
         const Sgrd7_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgsbd() //  [R1]
         { []
         }
     {offset
       cgsbd: // global
           I64[Sp] = block_cgsbi_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsbd_info" {
     block_cgsbd_info:
         const _cgsbd;
         const 1;
         const 18446744069414584350;
         const ugsbI_srtd;
 },
 section ""relreadonly" . ugsbJ_srtd" {
     ugsbJ_srtd:
         const Sgrd7_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgsbi() //  [R1]
         { []
         }
     {offset
       cgsbi: // global
           _sgrb1::P64 = P64[Sp + 8];
           if (R1 == 1) goto cgsbu; else goto cgsbp;
       cgsbu: // global
           I64[Sp + 8] = block_cgsbs_info;
           R3 = Data.Fixed.$fHasResolutionE4_closure;
           R2 = _sgrb1::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       cgsbp: // global
           R2 = _sgrb1::P64;
           Sp = Sp + 16;
           call GHC.Show.$fShowInteger_$cshow_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsbi_info" {
     block_cgsbi_info:
         const _cgsbi;
         const 1;
         const 18446744069414584350;
         const ugsbJ_srtd;
 },
 section ""relreadonly" . ugsbK_srtd" {
     ugsbK_srtd:
         const Sgrd7_srt+120;
         const 102;
         const 576460752303423489;
         const 206158430720;
 },
 _cgsbs() //  [R1]
         { []
         }
     {offset
       cgsbs: // global
           P64[Sp] = R1;
           call _cgsb0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgsbs_info" {
     block_cgsbs_info:
         const _cgsbs;
         const 0;
         const 18446744069414584350;
         const ugsbK_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.572610107 UTC

[section ""data" . lvl14_rgoyT_closure" {
     lvl14_rgoyT_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.57441621 UTC

[section ""data" . lvl15_rgoyU_closure" {
     lvl15_rgoyU_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.576050943 UTC

[section ""cstring" . lvl16_rgoyV_bytes" {
     lvl16_rgoyV_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.594901463 UTC

[section ""data" . Data.Fixed.showFixed_closure" {
     Data.Fixed.showFixed_closure:
         const Data.Fixed.showFixed_info;
         const 0;
 },
 n1_sgrbH_entry() //  [R1]
         { []
         }
     {offset
       cgsdJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgsdK; else goto cgsdL;
       cgsdK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgsdL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgsdC_info;
           _sgrbt::P64 = P64[R1 + 24];
           _sgrbz::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sgrbt::P64;
           P64[Sp - 24] = _sgrbz::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugsdS; else goto cgsdD;
       ugsdS: // global
           call _cgsdC(R1) args: 0, res: 0, upd: 0;
       cgsdD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n1_sgrbH_info" {
     n1_sgrbH_info:
         const n1_sgrbH_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+936;
 },
 _cgsdC() //  [R1]
         { []
         }
     {offset
       cgsdC: // global
           if (R1 & 7 == 1) goto cgsdG; else goto cgsdH;
       cgsdG: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cgsdH: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call chopZeros_rgnn4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgsdC_info" {
     block_cgsdC_info:
         const _cgsdC;
         const 2;
         const 4294967326;
         const Sgrd7_srt+936;
 },
 sat_sgrbO_entry() //  [R1]
         { []
         }
     {offset
       cgse7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgse8; else goto cgse9;
       cgse8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgse9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_sgrbK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgrbO_info" {
     sat_sgrbO_info:
         const sat_sgrbO_entry;
         const 4294967297;
         const 19;
 },
 $wxs_sgrbK_entry() //  [R1, R2]
         { []
         }
     {offset
       cgsed: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgseh; else goto cgseg;
       cgseh: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgseg: // global
           if (R2 == 1) goto cgsec; else goto cgseb;
       cgsec: // global
           _sgrbJ::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _sgrbJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgseb: // global
           I64[Hp - 48] = sat_sgrbO_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_rgoyT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_sgrbK_info" {
     $wxs_sgrbK_info:
         const $wxs_sgrbK_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 section ""relreadonly" . ugshA_srtd" {
     ugshA_srtd:
         const Sgrd7_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 sat_sgrc8_entry() //  [R1]
         { []
         }
     {offset
       cgsej: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgsek; else goto cgsel;
       cgsek: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgsel: // global
           I64[Sp - 32] = block_cgscG_info;
           _sgrba::P64 = P64[R1 + 24];
           R2 = _sgrba::P64;
           P64[Sp - 24] = P64[R1 + 16];
           P64[Sp - 16] = _sgrba::P64;
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 32;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrc8_info" {
     sat_sgrc8_info:
         const sat_sgrc8_entry;
         const 3;
         const 18446744069414584335;
         const ugshA_srtd;
 },
 section ""relreadonly" . ugshB_srtd" {
     ugshB_srtd:
         const Sgrd7_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgscG() //  [D1]
         { []
         }
     {offset
       cgscG: // global
           _cgscL::F64 = D1;
           (_cgscK::F64) = call MO_F64_Log(_cgscL::F64);
           I64[Sp - 8] = block_cgscO_info;
           R1 = Data.Fixed.$fReadFixed2_closure;
           F64[Sp] = _cgscK::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugsgP; else goto cgscP;
       ugsgP: // global
           call _cgscO(R1) args: 0, res: 0, upd: 0;
       cgscP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscG_info" {
     block_cgscG_info:
         const _cgscG;
         const 3;
         const 18446744069414584350;
         const ugshB_srtd;
 },
 section ""relreadonly" . ugshC_srtd" {
     ugshC_srtd:
         const Sgrd7_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835136;
 },
 _cgscO() //  [R1]
         { []
         }
     {offset
       cgscO: // global
           _sgrbe::P64 = P64[Sp + 32];
           _sgrbn::F64 = %MO_F_Quot_W64(F64[Sp + 8], F64[R1 + 7]);
           _sgrbo::I64 = %MO_FS_Conv_W64_W64(_sgrbn::F64);
           if (%MO_F_Lt_W64(%MO_SF_Conv_W64_W64(_sgrbo::I64),
                            _sgrbn::F64)) goto cgsgA; else goto cgsgz;
       cgsgA: // global
           _sgrbq::I64 = _sgrbo::I64 + 1;
           goto sgrbp;
       cgsgz: // global
           _sgrbq::I64 = _sgrbo::I64;
           goto sgrbp;
       sgrbp: // global
           if (%MO_S_Ge_W64(_sgrbq::I64, 0)) goto cgsgu; else goto cgsgv;
       cgsgu: // global
           if (_sgrbq::I64 == 0) goto cgsgl; else goto cgsfY;
       cgsgl: // global
           I64[Sp + 8] = block_cgsg8_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _sgrbe::P64;
           I64[Sp + 32] = _sgrbq::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       cgsfY: // global
           I64[Sp] = block_cgsfG_info;
           R3 = _sgrbq::I64;
           R2 = Data.Fixed.$fHasResolutionE4_closure;
           I64[Sp + 8] = _sgrbq::I64;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 8, upd: 8;
       cgsgv: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscO_info" {
     block_cgscO_info:
         const _cgscO;
         const 68;
         const 18446744069414584350;
         const ugshC_srtd;
 },
 section ""relreadonly" . ugshD_srtd" {
     ugshD_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26525718110209;
 },
 _cgsg8() //  [R1]
         { []
         }
     {offset
       cgsg8: // global
           I64[Sp] = block_cgsgc_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsg8_info" {
     block_cgsg8_info:
         const _cgsg8;
         const 259;
         const 18446744069414584350;
         const ugshD_srtd;
 },
 section ""relreadonly" . ugshE_srtd" {
     ugshE_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26525718044673;
 },
 _cgsgc() //  [R1]
         { []
         }
     {offset
       cgsgc: // global
           I64[Sp] = block_cgsgg_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsgc_info" {
     block_cgsgc_info:
         const _cgsgc;
         const 259;
         const 18446744069414584350;
         const ugshE_srtd;
 },
 section ""relreadonly" . ugshF_srtd" {
     ugshF_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26388279083009;
 },
 _cgsgg() //  [R1]
         { []
         }
     {offset
       cgsgg: // global
           I64[Sp] = block_cgsgk_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsgg_info" {
     block_cgsgg_info:
         const _cgsgg;
         const 259;
         const 18446744069414584350;
         const ugshF_srtd;
 },
 _cgsgk() //  [R1]
         { []
         }
     {offset
       cgsgk: // global
           I64[Sp] = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call _sgrbs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgsgk_info" {
     block_cgsgk_info:
         const _cgsgk;
         const 387;
         const 6917529031936049182;
         const Sgrd7_srt+704;
 },
 section ""relreadonly" . ugshG_srtd" {
     ugshG_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26594437586945;
 },
 _cgsfG() //  [R1]
         { []
         }
     {offset
       cgsfG: // global
           I64[Sp] = block_cgsfK_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsfG_info" {
     block_cgsfG_info:
         const _cgsfG;
         const 68;
         const 18446744069414584350;
         const ugshG_srtd;
 },
 section ""relreadonly" . ugshH_srtd" {
     ugshH_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26525718110209;
 },
 _cgsfK() //  [R1]
         { []
         }
     {offset
       cgsfK: // global
           I64[Sp] = block_cgsfO_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsfK_info" {
     block_cgsfK_info:
         const _cgsfK;
         const 580;
         const 18446744069414584350;
         const ugshH_srtd;
 },
 section ""relreadonly" . ugshI_srtd" {
     ugshI_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26525718044673;
 },
 _cgsfO() //  [R1]
         { []
         }
     {offset
       cgsfO: // global
           I64[Sp] = block_cgsfS_info;
           R3 = Data.Fixed.$fEnumFixed2_closure;
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsfO_info" {
     block_cgsfO_info:
         const _cgsfO;
         const 580;
         const 18446744069414584350;
         const ugshI_srtd;
 },
 section ""relreadonly" . ugshJ_srtd" {
     ugshJ_srtd:
         const Sgrd7_srt+592;
         const 45;
         const 26388279083009;
 },
 _cgsfS() //  [R1]
         { []
         }
     {offset
       cgsfS: // global
           I64[Sp] = block_cgsfW_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsfS_info" {
     block_cgsfS_info:
         const _cgsfS;
         const 580;
         const 18446744069414584350;
         const ugshJ_srtd;
 },
 _cgsfW() //  [R1]
         { []
         }
     {offset
       cgsfW: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _sgrbs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgsfW_info" {
     block_cgsfW_info:
         const _cgsfW;
         const 836;
         const 6917529031936049182;
         const Sgrd7_srt+704;
 },
 _sgrbs() //  []
         { []
         }
     {offset
       sgrbs: // global
           I64[Sp - 8] = block_cgsep_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugsgY; else goto cgsfi;
       ugsgY: // global
           call _cgsep(R1) args: 0, res: 0, upd: 0;
       cgsfi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgsep() //  [R1]
         { []
         }
     {offset
       cgsep: // global
           if (R1 & 7 == 1) goto ugsgK; else goto cgsft;
       ugsgK: // global
           Sp = Sp + 8;
           call _sgrbu() args: 0, res: 0, upd: 0;
       cgsft: // global
           I64[Sp] = block_cgsfr_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsep_info" {
     block_cgsep_info:
         const _cgsep;
         const 324;
         const 6917529031936049182;
         const Sgrd7_srt+704;
 },
 _cgsfr() //  [R1]
         { []
         }
     {offset
       cgsfr: // global
           if (R1 == 1) goto ugsgL; else goto ugsgM;
       ugsgL: // global
           Sp = Sp + 40;
           call _cgsfD() args: 0, res: 0, upd: 0;
       ugsgM: // global
           Sp = Sp + 8;
           call _sgrbu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgsfr_info" {
     block_cgsfr_info:
         const _cgsfr;
         const 324;
         const 12884901918;
         const Sgrd7_srt+936;
 },
 _sgrbu() //  []
         { []
         }
     {offset
       sgrbu: // global
           I64[Sp - 8] = block_cgsdk_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[Sp + 24];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _cgsdk() //  [R1, R2]
         { []
         }
     {offset
       cgsdk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgseu; else goto cgset;
       cgseu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgset: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           I64[Sp] = block_cgsdn_info;
           R3 = 0;
           _cgsdm::P64 = Hp - 14;
           R2 = _cgsdm::P64;
           P64[Sp + 24] = _cgsdm::P64;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsdk_info" {
     block_cgsdk_info:
         const _cgsdk;
         const 324;
         const 4294967326;
         const Sgrd7_srt+936;
 },
 _cgsdn() //  [R1]
         { []
         }
     {offset
       cgsdn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgsex; else goto cgsew;
       cgsex: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgsew: // global
           _sgrb7::P64 = P64[Sp + 16];
           _sgrbB::I64 = I64[Sp + 8] - R1;
           if (%MO_S_Ge_W64(0, _sgrbB::I64)) goto cgseA; else goto cgsf4;
       cgseA: // global
           Hp = Hp - 80;
           I64[Sp + 16] = block_cgsey_info;
           R1 = _sgrb7::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ugsgQ; else goto cgseB;
       ugsgQ: // global
           call _cgsey(R1) args: 0, res: 0, upd: 0;
       cgseB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cgsf4: // global
           I64[Hp - 72] = n1_sgrbH_info;
           P64[Hp - 56] = _sgrb7::P64;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 24];
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl14_rgoyT_closure+1;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = $wxs_sgrbK_info;
           P64[Hp] = Hp - 30;
           I64[Sp + 32] = block_cgsf3_info;
           R2 = _sgrbB::I64;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call $wxs_sgrbK_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsdn_info" {
     block_cgsdn_info:
         const _cgsdn;
         const 68;
         const 4294967326;
         const Sgrd7_srt+936;
 },
 _cgsey() //  [R1]
         { []
         }
     {offset
       cgsey: // global
           if (R1 & 7 == 1) goto cgseH; else goto cgseP;
       cgseH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgseK; else goto cgseJ;
       cgseK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgseJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgseP: // global
           _sgrbt::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgseN_info;
           R2 = _sgrbt::P64;
           Sp = Sp + 16;
           call chopZeros_rgnn4_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsey_info" {
     block_cgsey_info:
         const _cgsey;
         const 2;
         const 4294967326;
         const Sgrd7_srt+936;
 },
 _cgseN() //  [R1]
         { []
         }
     {offset
       cgseN: // global
           if (R1 & 7 == 1) goto ugsgN; else goto cgseZ;
       ugsgN: // global
           Sp = Sp + 8;
           call _cgsfD() args: 0, res: 0, upd: 0;
       cgseZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgsf2; else goto cgsf1;
       cgsf2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgsf1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgseN_info" {
     block_cgseN_info:
         const _cgseN;
         const 0;
         const 30;
 },
 _cgsf3() //  [R1]
         { []
         }
     {offset
       cgsf3: // global
           if (R1 & 7 == 1) goto ugsgO; else goto cgsfe;
       ugsgO: // global
           Sp = Sp + 8;
           call _cgsfD() args: 0, res: 0, upd: 0;
       cgsfe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgsfh; else goto cgsfg;
       cgsfh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgsfg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl15_rgoyU_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgsf3_info" {
     block_cgsf3_info:
         const _cgsf3;
         const 0;
         const 30;
 },
 _cgsfD() //  []
         { []
         }
     {offset
       cgsfD: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sgrcb_entry() //  [R1]
         { []
         }
     {offset
       cgsh7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgsh8; else goto cgsh9;
       cgsh8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgsh9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgsh5_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgrcb_info" {
     sat_sgrcb_info:
         const sat_sgrcb_entry;
         const 3;
         const 4294967311;
         const Sgrd7_srt+968;
 },
 _cgsh5() //  [R1]
         { []
         }
     {offset
       cgsh5: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgsh5_info" {
     block_cgsh5_info:
         const _cgsh5;
         const 2;
         const 4294967326;
         const Sgrd7_srt+968;
 },
 section ""relreadonly" . ugshK_srtd" {
     ugshK_srtd:
         const Sgrd7_srt+120;
         const 108;
         const 1729382256910270465;
         const 17323767368512;
 },
 Data.Fixed.showFixed_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgshg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgshh; else goto cgshi;
       cgshh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.showFixed_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgshi: // global
           I64[Sp - 32] = block_cgscm_info;
           _sgrb7::P64 = R3;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           _sgrb6::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgrb6::P64;
           P64[Sp - 16] = _sgrb7::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.showFixed_info" {
     Data.Fixed.showFixed_info:
         const Data.Fixed.showFixed_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const ugshK_srtd;
 },
 section ""relreadonly" . ugshL_srtd" {
     ugshL_srtd:
         const Sgrd7_srt+120;
         const 108;
         const 1729382256910270465;
         const 17323767368512;
 },
 _cgscm() //  [R1]
         { []
         }
     {offset
       cgscm: // global
           _sgrb6::P64 = P64[Sp + 8];
           _sgrb8::P64 = P64[Sp + 24];
           if (R1 == 1) goto cgshf; else goto cgshe;
       cgshf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgshz; else goto cgshy;
       cgshz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cgshy: // global
           I64[Hp - 32] = sat_sgrcb_info;
           P64[Hp - 16] = _sgrb6::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgrb8::P64;
           R3 = Hp - 32;
           R2 = lvl16_rgoyV_bytes;
           Sp = Sp + 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cgshe: // global
           I64[Sp + 8] = block_cgscq_info;
           R2 = _sgrb8::P64;
           R1 = _sgrb6::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscm_info" {
     block_cgscm_info:
         const _cgscm;
         const 3;
         const 18446744069414584350;
         const ugshL_srtd;
 },
 section ""relreadonly" . ugshM_srtd" {
     ugshM_srtd:
         const Sgrd7_srt+120;
         const 108;
         const 1729382256910270465;
         const 12925720857408;
 },
 _cgscq() //  [R1]
         { []
         }
     {offset
       cgscq: // global
           I64[Sp - 8] = block_cgscu_info;
           R3 = Data.Fixed.$fEnumFixed1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscq_info" {
     block_cgscq_info:
         const _cgscq;
         const 2;
         const 18446744069414584350;
         const ugshM_srtd;
 },
 section ""relreadonly" . ugshN_srtd" {
     ugshN_srtd:
         const Sgrd7_srt+120;
         const 108;
         const 1729382256910270465;
         const 12925720857408;
 },
 _cgscu() //  [R1]
         { []
         }
     {offset
       cgscu: // global
           if (R1 == 1) goto cgshw; else goto cgsho;
       cgshw: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgsho: // global
           I64[Sp] = block_cgscy_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscu_info" {
     block_cgscu_info:
         const _cgscu;
         const 3;
         const 18446744069414584350;
         const ugshN_srtd;
 },
 section ""relreadonly" . ugshO_srtd" {
     ugshO_srtd:
         const Sgrd7_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgscy() //  [R1, R2]
         { []
         }
     {offset
       cgscy: // global
           I64[Sp] = block_cgscA_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R1;
           _sgrbe::P64 = R2;
           R2 = 0;
           P64[Sp + 24] = _sgrbe::P64;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscy_info" {
     block_cgscy_info:
         const _cgscy;
         const 259;
         const 18446744069414584350;
         const ugshO_srtd;
 },
 section ""relreadonly" . ugshP_srtd" {
     ugshP_srtd:
         const Sgrd7_srt+120;
         const 106;
         const 576460752303423489;
         const 4129627835200;
 },
 _cgscA() //  [R1, R2]
         { []
         }
     {offset
       cgscA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgshs; else goto cgshr;
       cgshs: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgshr: // global
           I64[Hp - 56] = sat_sgrc8_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgscA_info" {
     block_cgscA_info:
         const _cgscA;
         const 3;
         const 18446744069414584350;
         const ugshP_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.666702717 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshow_closure" {
     Data.Fixed.$fShowFixed_$cshow_closure:
         const Data.Fixed.$fShowFixed_$cshow_info;
         const 0;
 },
 Data.Fixed.$fShowFixed_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cgslk: // global
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshow_info" {
     Data.Fixed.$fShowFixed_$cshow_info:
         const Data.Fixed.$fShowFixed_$cshow_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sgrd7_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.670868145 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshowsPrec_closure" {
     Data.Fixed.$fShowFixed_$cshowsPrec_closure:
         const Data.Fixed.$fShowFixed_$cshowsPrec_info;
         const 0;
 },
 Data.Fixed.$fShowFixed_$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgsly: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgslz; else goto cgslA;
       cgslz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_$cshowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgslA: // global
           I64[Sp - 16] = block_cgslw_info;
           R4 = R4;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 16;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshowsPrec_info" {
     Data.Fixed.$fShowFixed_$cshowsPrec_info:
         const Data.Fixed.$fShowFixed_$cshowsPrec_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const Sgrd7_srt+968;
 },
 _cgslw() //  [R1]
         { []
         }
     {offset
       cgslw: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgslw_info" {
     block_cgslw_info:
         const _cgslw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.678014599 UTC

[section ""data" . Data.Fixed.$fShowFixed_$cshowList_closure" {
     Data.Fixed.$fShowFixed_$cshowList_closure:
         const Data.Fixed.$fShowFixed_$cshowList_info;
         const 0;
 },
 sat_sgrco_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgslZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgsm0; else goto cgsm1;
       cgsm0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgsm1: // global
           I64[Sp - 16] = block_cgslX_info;
           R4 = R2;
           _sgrcm::P64 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sgrcm::P64;
           Sp = Sp - 16;
           call Data.Fixed.showFixed_entry(R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrco_info" {
     sat_sgrco_info:
         const sat_sgrco_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+968;
 },
 _cgslX() //  [R1]
         { []
         }
     {offset
       cgslX: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgslX_info" {
     block_cgslX_info:
         const _cgslX;
         const 1;
         const 30;
 },
 Data.Fixed.$fShowFixed_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgsm5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgsm9; else goto cgsm8;
       cgsm9: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgsm8: // global
           I64[Hp - 8] = sat_sgrco_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_$cshowList_info" {
     Data.Fixed.$fShowFixed_$cshowList_info:
         const Data.Fixed.$fShowFixed_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const Sgrd7_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.686235387 UTC

[section ""data" . Data.Fixed.$fShowFixed_closure" {
     Data.Fixed.$fShowFixed_closure:
         const Data.Fixed.$fShowFixed_info;
         const 0;
 },
 sat_sgrcs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgsmx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Fixed.$fShowFixed_$cshowList_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrcs_info" {
     sat_sgrcs_info:
         const sat_sgrcs_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sgrd7_srt+992;
 },
 sat_sgrcr_entry() //  [R1, R2]
         { []
         }
     {offset
       cgsmF: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Fixed.$fShowFixed_$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrcr_info" {
     sat_sgrcr_info:
         const sat_sgrcr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sgrd7_srt+1000;
 },
 sat_sgrcq_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgsmN: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Fixed.$fShowFixed_$cshowsPrec_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgrcq_info" {
     sat_sgrcq_info:
         const sat_sgrcq_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sgrd7_srt+984;
 },
 Data.Fixed.$fShowFixed_entry() //  [R2]
         { []
         }
     {offset
       cgsmR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgsmV; else goto cgsmU;
       cgsmV: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Fixed.$fShowFixed_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgsmU: // global
           I64[Hp - 72] = sat_sgrcs_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sgrcr_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sgrcq_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Fixed.$fShowFixed_info" {
     Data.Fixed.$fShowFixed_info:
         const Data.Fixed.$fShowFixed_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const Sgrd7_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:23.695380952 UTC

[section ""relreadonly" . Sgrd7_srt" {
     Sgrd7_srt:
         const Data.Data.$fDataInteger_closure;
         const Data.Fixed.$fDataFixed_$cgfoldl_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromThenTo_closure;
         const Data.Fixed.$fEnumFixed1_closure;
         const sat_sgr4I_closure;
         const Data.Fixed.$fEnumFixed2_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromTo_closure;
         const Data.Fixed.$fEnumFixed_$cenumFromThen_closure;
         const Data.Fixed.$fEnumFixed3_closure;
         const GHC.Enum.$fEnumInteger_$cpred_closure;
         const GHC.Enum.$fEnumInteger_$csucc_closure;
         const Data.Fixed.$fHasResolutionE0_$cresolution_closure;
         const sat_sgr58_closure;
         const Data.Fixed.$fHasResolutionE4_closure;
         const Data.Fixed.$fHasResolutionE1_$cresolution_closure;
         const sat_sgr5b_closure;
         const Data.Fixed.$fHasResolutionE7_closure;
         const Data.Fixed.$fHasResolutionE2_$cresolution_closure;
         const sat_sgr5e_closure;
         const Data.Fixed.$fHasResolutionE8_closure;
         const Data.Fixed.$fHasResolutionE3_$cresolution_closure;
         const sat_sgr5h_closure;
         const Data.Fixed.$fHasResolutionE10_closure;
         const Data.Fixed.$fHasResolutionE6_$cresolution_closure;
         const sat_sgr5k_closure;
         const Data.Fixed.$fHasResolutionE11_closure;
         const Data.Fixed.$fHasResolutionE9_$cresolution_closure;
         const sat_sgr5p_closure;
         const Data.Fixed.$fHasResolutionE5_closure;
         const Data.Fixed.$fHasResolutionE12_$cresolution_closure;
         const GHC.List.badHead_closure;
         const w2_rgoyl_closure;
         const go61_rgoym_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Fixed.$fDataFixed4_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Fixed.$fDataFixed8_closure;
         const Data.Data.$fDataInteger_closure;
         const Data.Fixed.$w$cgmapMp_closure;
         const Data.Fixed.$w$cgmapM_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Fixed.$fDataFixed_$cgmapQi_closure;
         const Data.Fixed.$w$cgmapMo_closure;
         const Data.Fixed.conMkFixed_closure;
         const Data.Fixed.tyFixed_closure;
         const lvl5_rgoyK_closure;
         const lvl6_rgoyL_closure;
         const lvl7_rgoyM_closure;
         const lvl8_rgoyN_closure;
         const Data.Fixed.$fDataFixed_$cgfoldl_closure;
         const Data.Fixed.$fDataFixed7_closure;
         const Data.Fixed.$fDataFixed_closure;
         const lvl_rgoyF_closure;
         const lvl1_rgoyG_closure;
         const lvl4_rgoyJ_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const Data.Fixed.div'_closure;
         const Data.Fixed.$wdivMod'_closure;
         const Data.Fixed.divMod'_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const Data.Fixed.mod'_closure;
         const GHC.Err.undefined_closure;
         const $dIP3_rgoyz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const Data.Fixed.$w$cfromRational_closure;
         const Data.Fixed.$fFractionalFixed2_closure;
         const Data.Fixed.$fFractionalFixed1_closure;
         const Data.Fixed.$fRealFixed_$ctoRational_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.divZeroError_closure;
         const Data.Fixed.$fFractionalFixed3_closure;
         const Data.Fixed.$fFractionalFixed_$crecip_closure;
         const Data.Fixed.$fNumFixed_$c*_closure;
         const Data.Fixed.$fNumFixed1_closure;
         const Data.Fixed.$fNumFixed2_closure;
         const Data.Fixed.$fNumFixed_closure;
         const Data.Fixed.$fFractionalFixed_closure;
         const lvl13_rgoyS_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const Data.Fixed.$fReadFixed2_closure;
         const Data.Fixed.$fReadFixed3_closure;
         const Data.Fixed.$fEnumFixed2_closure;
         const Data.Fixed.$fEnumFixed1_closure;
         const GHC.Real.^_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const Text.Read.Lex.numberToFixed_closure;
         const GHC.Read.readNumber1_closure;
         const Data.Fixed.$fReadFixed1_closure;
         const Data.Fixed.$fReadFixed_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Fixed.$fReadFixed_$creadListPrec_closure;
         const Data.Fixed.$fReadFixed_$creadList_closure;
         const Data.Fixed.$fReadFixed_closure;
         const Data.Fixed.$fRealFixed_closure;
         const Data.Fixed.$fRealFracFixed_$ctruncate_closure;
         const GHC.Real.$w$s$cround_closure;
         const Data.Fixed.$fRealFracFixed_$cround_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$cceiling_closure;
         const Data.Fixed.$fRealFracFixed_$cceiling_closure;
         const Data.Fixed.$fRealFracFixed_$cfloor_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const Data.Fixed.$fFractionalFixed2_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const Data.Fixed.$w$cproperFraction_closure;
         const Data.Fixed.$fRealFracFixed_$cproperFraction_closure;
         const Data.Fixed.$fRealFracFixed_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Show.$fShowInteger_$cshow_closure;
         const chopZeros_rgnn4_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$wf_closure;
         const Data.Fixed.showFixed_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const Data.Fixed.$fShowFixed_$cshowsPrec_closure;
         const Data.Fixed.$fShowFixed_$cshowList_closure;
         const Data.Fixed.$fShowFixed_$cshow_closure;
         const Data.Fixed.$fShowFixed_closure;
 }]

