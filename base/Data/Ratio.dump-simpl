
==================== Tidy Core ====================
2018-03-16 16:07:30.791303257 UTC

Result size of Tidy Core
  = {terms: 223, types: 175, coercions: 0, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rcBZq :: Integer
[GblId, Unf=OtherCon []]
lvl_rcBZq = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rcBZr :: Integer
[GblId, Unf=OtherCon []]
lvl1_rcBZr = 1

Rec {
-- RHS size: {terms: 73, types: 50, coercions: 0, joins: 0/0}
$wsimplest'_rcBZs
  :: Integer
     -> Integer -> Integer -> Integer -> (# Integer, Integer #)
[GblId, Arity=4, Str=<S,1*U><S,U><L,1*U><L,U>, Unf=OtherCon []]
$wsimplest'_rcBZs
  = \ (w_scBWO :: Integer)
      (w1_scBWP :: Integer)
      (w2_scBWQ :: Integer)
      (w3_scBWR :: Integer) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
             w1_scBWP lvl_rcBZq
      of {
        __DEFAULT ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.quotRemInteger
                 w_scBWO w1_scBWP
          of
          { (# ipv_icBS7, ipv1_icBS8 #) ->
          case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                 ipv1_icBS8 lvl_rcBZq
          of {
            __DEFAULT ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                     w3_scBWR lvl_rcBZq
              of {
                __DEFAULT ->
                  case integer-simple-0.1.1.1:GHC.Integer.Type.quotRemInteger
                         w2_scBWQ w3_scBWR
                  of
                  { (# ipv2_XcBSZ, ipv3_XcBT1 #) ->
                  case integer-simple-0.1.1.1:GHC.Integer.Type.neqInteger#
                         ipv_icBS7 ipv2_XcBSZ
                  of {
                    __DEFAULT ->
                      case $wsimplest'_rcBZs w3_scBWR ipv3_XcBT1 w1_scBWP ipv1_icBS8 of
                      { (# ww1_scBXk, ww2_scBXl #) ->
                      case integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                             (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                                ipv_icBS7 ww1_scBXk)
                             ww2_scBXl
                      of dt_X9h5A
                      { __DEFAULT ->
                      (# dt_X9h5A, ww1_scBXk #)
                      }
                      };
                    1# ->
                      case integer-simple-0.1.1.1:GHC.Integer.Type.plusInteger
                             ipv_icBS7 lvl1_rcBZr
                      of dt_X9h5t
                      { __DEFAULT ->
                      (# dt_X9h5t, lvl1_rcBZr #)
                      }
                  }
                  };
                1# -> case divZeroError of wild3_00 { }
              };
            1# ->
              case ipv_icBS7 of dt_X9h5q { __DEFAULT ->
              (# dt_X9h5q, lvl1_rcBZr #)
              }
          }
          };
        1# -> case divZeroError of wild1_00 { }
      }
end Rec }

Rec {
-- RHS size: {terms: 79, types: 34, coercions: 0, joins: 1/1}
Data.Ratio.$wsimplest [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Integer
     -> Integer -> Integer -> Integer -> (# Integer, Integer #)
[GblId, Arity=4, Str=<S,U><S,U><S,U><S,U>, Unf=OtherCon []]
Data.Ratio.$wsimplest
  = \ (ww_scBX0
         :: Integer
         Unf=OtherCon [])
      (ww1_scBX1
         :: Integer
         Unf=OtherCon [])
      (ww2_scBX5
         :: Integer
         Unf=OtherCon [])
      (ww3_scBX6
         :: Integer
         Unf=OtherCon []) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
             (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                ww2_scBX5 ww1_scBX1)
             (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                ww_scBX0 ww3_scBX6)
      of {
        __DEFAULT ->
          join {
            $j_scBSP [Dmd=<L,1*U(U,U)>] :: (# Integer, Integer #)
            [LclId[JoinId(0)]]
            $j_scBSP
              = case GHC.Real.$w$s$ccompare
                       ww_scBX0 ww1_scBX1 lvl_rcBZq GHC.Real.$fEnumRatio1
                of {
                  __DEFAULT ->
                    case integer-simple-0.1.1.1:GHC.Integer.Type.ltInteger#
                           (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                              ww2_scBX5 GHC.Real.$fEnumRatio1)
                           (integer-simple-0.1.1.1:GHC.Integer.Type.timesInteger
                              lvl_rcBZq ww3_scBX6)
                    of {
                      __DEFAULT -> (# lvl_rcBZq, lvl1_rcBZr #);
                      1# ->
                        case $wsimplest'_rcBZs
                               (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger ww2_scBX5)
                               ww3_scBX6
                               (integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger ww_scBX0)
                               ww1_scBX1
                        of
                        { (# ww5_scBXk, ww6_scBXl #) ->
                        case integer-simple-0.1.1.1:GHC.Integer.Type.negateInteger
                               ww5_scBXk
                        of dt_icBOF
                        { __DEFAULT ->
                        (# dt_icBOF, ww6_scBXl #)
                        }
                        }
                    };
                  GT -> $wsimplest'_rcBZs ww_scBX0 ww1_scBX1 ww2_scBX5 ww3_scBX6
                } } in
          case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                 ww_scBX0 ww2_scBX5
          of {
            __DEFAULT -> jump $j_scBSP;
            1# ->
              case integer-simple-0.1.1.1:GHC.Integer.Type.eqInteger#
                     ww1_scBX1 ww3_scBX6
              of {
                __DEFAULT -> jump $j_scBSP;
                1# -> (# ww_scBX0, ww1_scBX1 #)
              }
          };
        1# -> Data.Ratio.$wsimplest ww2_scBX5 ww3_scBX6 ww_scBX0 ww1_scBX1
      }
end Rec }

-- RHS size: {terms: 36, types: 33, coercions: 0, joins: 0/1}
Data.Ratio.$wapproxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. RealFrac a => a -> a -> (# Integer, Integer #)
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 280 0}]
Data.Ratio.$wapproxRational
  = \ (@ a_scBXc)
      (w_scBXd :: RealFrac a_scBXc)
      (w1_scBXe :: a_scBXc)
      (w2_scBXf :: a_scBXc) ->
      let {
        $dReal_scBQC [Dmd=<S(LLC(S(SS))),U(A,A,C(U(U,U)))>] :: Real a_scBXc
        [LclId]
        $dReal_scBQC = GHC.Real.$p1RealFrac @ a_scBXc w_scBXd } in
      case toRational @ a_scBXc $dReal_scBQC w1_scBXe of
      { :% ww1_icBOU ww2_icBOV ->
      case toRational @ a_scBXc $dReal_scBQC w2_scBXf of
      { :% ww4_icBP0 ww5_icBP1 ->
      case GHC.Real.$w$s$c- ww1_icBOU ww2_icBOV ww4_icBP0 ww5_icBP1 of
      { (# ww7_icBP5, ww8_icBP6 #) ->
      case GHC.Real.$w$s$c+ ww1_icBOU ww2_icBOV ww4_icBP0 ww5_icBP1 of
      { (# ww12_icBPn, ww13_icBPo #) ->
      Data.Ratio.$wsimplest ww7_icBP5 ww8_icBP6 ww12_icBPn ww13_icBPo
      }
      }
      }
      }

-- RHS size: {terms: 13, types: 15, coercions: 0, joins: 0/0}
approxRational [InlPrag=NOUSERINLINE[0]]
  :: forall a. RealFrac a => a -> a -> Rational
[GblId,
 Arity=3,
 Str=<S(S(LLC(S(SS)))LLLLLL),1*U(1*U(A,A,C(U(U,U))),A,A,A,A,A,A)><L,U><L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_scBXc)
                 (w_scBXd [Occ=Once] :: RealFrac a_scBXc)
                 (w1_scBXe [Occ=Once] :: a_scBXc)
                 (w2_scBXf [Occ=Once] :: a_scBXc) ->
                 case Data.Ratio.$wapproxRational
                        @ a_scBXc w_scBXd w1_scBXe w2_scBXf
                 of
                 { (# ww1_scBXq [Occ=Once], ww2_scBXr [Occ=Once] #) ->
                 GHC.Real.:% @ Integer ww1_scBXq ww2_scBXr
                 }}]
approxRational
  = \ (@ a_scBXc)
      (w_scBXd :: RealFrac a_scBXc)
      (w1_scBXe :: a_scBXc)
      (w2_scBXf :: a_scBXc) ->
      case Data.Ratio.$wapproxRational
             @ a_scBXc w_scBXd w1_scBXe w2_scBXf
      of
      { (# ww1_scBXq, ww2_scBXr #) ->
      GHC.Real.:% @ Integer ww1_scBXq ww2_scBXr
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ratio.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Data.Ratio.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ratio.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ratio.$trModule3 = GHC.Types.TrNameS Data.Ratio.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Data.Ratio.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Data.Ratio.$trModule2 = "Data.Ratio"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Data.Ratio.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Data.Ratio.$trModule1 = GHC.Types.TrNameS Data.Ratio.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Data.Ratio.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Data.Ratio.$trModule
  = GHC.Types.Module Data.Ratio.$trModule3 Data.Ratio.$trModule1


