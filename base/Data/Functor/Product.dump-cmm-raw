
==================== Raw Cmm ====================
2018-03-16 16:11:55.748288275 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:55.75106037 UTC

[section ""data" . Data.Functor.Product.$fEq1Product_$cliftEq_closure" {
     Data.Functor.Product.$fEq1Product_$cliftEq_closure:
         const Data.Functor.Product.$fEq1Product_$cliftEq_info;
 },
 Data.Functor.Product.$fEq1Product_$cliftEq_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cg8iW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8j0; else goto cg8j1;
       cg8j0: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEq1Product_$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8j1: // global
           I64[Sp - 40] = block_cg8iT_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8jl; else goto cg8iU;
       ug8jl: // global
           call _cg8iT(R1) args: 0, res: 0, upd: 0;
       cg8iU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEq1Product_$cliftEq_info" {
     Data.Functor.Product.$fEq1Product_$cliftEq_info:
         const Data.Functor.Product.$fEq1Product_$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8iT() //  [R1]
         { []
         }
     {offset
       cg8iT: // global
           I64[Sp - 8] = block_cg8iZ_info;
           _sg5ou::P64 = P64[R1 + 7];
           _sg5ov::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5ov::P64;
           P64[Sp + 32] = _sg5ou::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8jk; else goto cg8j3;
       ug8jk: // global
           call _cg8iZ(R1) args: 0, res: 0, upd: 0;
       cg8j3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8iT_info" {
     block_cg8iT_info:
         const _cg8iT;
         const 4;
         const 30;
 },
 _cg8iZ() //  [R1]
         { []
         }
     {offset
       cg8iZ: // global
           I64[Sp] = block_cg8j7_info;
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           _sg5oy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 40] = _sg5oy::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8iZ_info" {
     block_cg8iZ_info:
         const _cg8iZ;
         const 5;
         const 30;
 },
 _cg8j7() //  [R1]
         { []
         }
     {offset
       cg8j7: // global
           if (R1 & 7 == 1) goto cg8je; else goto cg8ji;
       cg8je: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8ji: // global
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8j7_info" {
     block_cg8j7_info:
         const _cg8j7;
         const 133;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.760277839 UTC

[section ""data" . Data.Functor.Product.$fEq1Product_closure" {
     Data.Functor.Product.$fEq1Product_closure:
         const Data.Functor.Product.$fEq1Product_info;
 },
 Data.Functor.Product.$fEq1Product_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8jJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Product.$fEq1Product_$cliftEq_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEq1Product_info" {
     Data.Functor.Product.$fEq1Product_info:
         const Data.Functor.Product.$fEq1Product_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.7650865 UTC

[section ""data" . Data.Functor.Product.$w$cliftCompare_closure" {
     Data.Functor.Product.$w$cliftCompare_closure:
         const Data.Functor.Product.$w$cliftCompare_info;
 },
 Data.Functor.Product.$w$cliftCompare_slow() //  [R1]
         { []
         }
     {offset
       cg8jR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$w$cliftCompare_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cg8k2: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg8k3; else goto cg8k4;
       cg8k3: // global
           R1 = Data.Functor.Product.$w$cliftCompare_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8k4: // global
           I64[Sp - 24] = block_cg8jV_info;
           R2 = R2;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = R4;
           P64[Sp - 40] = R5;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cliftCompare_info" {
     Data.Functor.Product.$w$cliftCompare_info:
         const Data.Functor.Product.$w$cliftCompare_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$cliftCompare_slow;
 },
 _cg8jV() //  [R1]
         { []
         }
     {offset
       cg8jV: // global
           _cg8k1::P64 = R1 & 7;
           if (_cg8k1::P64 < 3) goto ug8ke; else goto cg8k0;
       ug8ke: // global
           if (_cg8k1::P64 < 2) goto cg8jY; else goto cg8jZ;
       cg8jY: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8jZ: // global
           R2 = P64[Sp + 24];
           _sg5oC::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           _sg5oE::P64 = P64[Sp + 16];
           P64[Sp + 16] = _sg5oC::P64;
           P64[Sp + 24] = _sg5oE::P64;
           Sp = Sp + 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cg8k0: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8jV_info" {
     block_cg8jV_info:
         const _cg8jV;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.773505701 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product_$cliftCompare_closure" {
     Data.Functor.Product.$fOrd1Product_$cliftCompare_closure:
         const Data.Functor.Product.$fOrd1Product_$cliftCompare_info;
 },
 Data.Functor.Product.$fOrd1Product_$cliftCompare_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cg8kA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8kE; else goto cg8kF;
       cg8kE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8kF: // global
           I64[Sp - 40] = block_cg8kx_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8kN; else goto cg8ky;
       ug8kN: // global
           call _cg8kx(R1) args: 0, res: 0, upd: 0;
       cg8ky: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product_$cliftCompare_info" {
     Data.Functor.Product.$fOrd1Product_$cliftCompare_info:
         const Data.Functor.Product.$fOrd1Product_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8kx() //  [R1]
         { []
         }
     {offset
       cg8kx: // global
           I64[Sp - 8] = block_cg8kD_info;
           _sg5oO::P64 = P64[R1 + 7];
           _sg5oP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5oP::P64;
           P64[Sp + 32] = _sg5oO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8kM; else goto cg8kH;
       ug8kM: // global
           call _cg8kD(R1) args: 0, res: 0, upd: 0;
       cg8kH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8kx_info" {
     block_cg8kx_info:
         const _cg8kx;
         const 4;
         const 30;
 },
 _cg8kD() //  [R1]
         { []
         }
     {offset
       cg8kD: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8kD_info" {
     block_cg8kD_info:
         const _cg8kD;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.782576136 UTC

[section ""data" . Data.Functor.Product.$w$cp1Ord1_closure" {
     Data.Functor.Product.$w$cp1Ord1_closure:
         const Data.Functor.Product.$w$cp1Ord1_info;
 },
 Data.Functor.Product.$w$cp1Ord1_slow() //  [R1]
         { []
         }
     {offset
       cg8l4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$w$cp1Ord1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8le: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg8lf; else goto cg8lg;
       cg8lf: // global
           R1 = Data.Functor.Product.$w$cp1Ord1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8lg: // global
           I64[Sp - 24] = block_cg8l8_info;
           R2 = R2;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = R4;
           P64[Sp - 40] = R5;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           Sp = Sp - 56;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cp1Ord1_info" {
     Data.Functor.Product.$w$cp1Ord1_info:
         const Data.Functor.Product.$w$cp1Ord1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$cp1Ord1_slow;
 },
 _cg8l8() //  [R1]
         { []
         }
     {offset
       cg8l8: // global
           if (R1 & 7 == 1) goto cg8lb; else goto cg8lc;
       cg8lb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8lc: // global
           R2 = P64[Sp + 24];
           _sg5oV::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           _sg5oX::P64 = P64[Sp + 16];
           P64[Sp + 16] = _sg5oV::P64;
           P64[Sp + 24] = _sg5oX::P64;
           Sp = Sp + 8;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8l8_info" {
     block_cg8l8_info:
         const _cg8l8;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.790507203 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product1_closure" {
     Data.Functor.Product.$fOrd1Product1_closure:
         const Data.Functor.Product.$fOrd1Product1_info;
 },
 Data.Functor.Product.$fOrd1Product1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cg8lI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8lM; else goto cg8lN;
       cg8lM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8lN: // global
           I64[Sp - 40] = block_cg8lF_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8lV; else goto cg8lG;
       ug8lV: // global
           call _cg8lF(R1) args: 0, res: 0, upd: 0;
       cg8lG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product1_info" {
     Data.Functor.Product.$fOrd1Product1_info:
         const Data.Functor.Product.$fOrd1Product1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8lF() //  [R1]
         { []
         }
     {offset
       cg8lF: // global
           I64[Sp - 8] = block_cg8lL_info;
           _sg5p7::P64 = P64[R1 + 7];
           _sg5p8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5p8::P64;
           P64[Sp + 32] = _sg5p7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8lU; else goto cg8lP;
       ug8lU: // global
           call _cg8lL(R1) args: 0, res: 0, upd: 0;
       cg8lP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8lF_info" {
     block_cg8lF_info:
         const _cg8lF;
         const 4;
         const 30;
 },
 _cg8lL() //  [R1]
         { []
         }
     {offset
       cg8lL: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8lL_info" {
     block_cg8lL_info:
         const _cg8lL;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.799187675 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product_closure" {
     Data.Functor.Product.$fOrd1Product_closure:
         const Data.Functor.Product.$fOrd1Product_info;
 },
 sat_sg5pf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg8mk: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fOrd1Product_$cliftCompare_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pf_info" {
     sat_sg5pf_info:
         const sat_sg5pf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5pe_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg8ms: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fOrd1Product1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pe_info" {
     sat_sg5pe_info:
         const sat_sg5pe_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Product.$fOrd1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cg8mw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg8mA; else goto cg8mz;
       cg8mA: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8mz: // global
           I64[Hp - 64] = sat_sg5pf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg5pe_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product_info" {
     Data.Functor.Product.$fOrd1Product_info:
         const Data.Functor.Product.$fOrd1Product_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.806404413 UTC

[section ""cstring" . Data.Functor.Product.$fRead1Product3_bytes" {
     Data.Functor.Product.$fRead1Product3_bytes:
         I8[] [80,97,105,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.808733811 UTC

[section ""data" . Data.Functor.Product.$fRead1Product2_closure" {
     Data.Functor.Product.$fRead1Product2_closure:
         const Data.Functor.Product.$fRead1Product2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fRead1Product2_entry() //  [R1]
         { []
         }
     {offset
       cg8mV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8mW; else goto cg8mX;
       cg8mW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8mX: // global
           (_cg8mS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg8mS::I64 == 0) goto cg8mU; else goto cg8mT;
       cg8mU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg8mT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg8mS::I64;
           R2 = Data.Functor.Product.$fRead1Product3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product2_info" {
     Data.Functor.Product.$fRead1Product2_info:
         const Data.Functor.Product.$fRead1Product2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.813067828 UTC

[section ""data" . Data.Functor.Product.$fRead1Product1_closure" {
     Data.Functor.Product.$fRead1Product1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Product.$fRead1Product2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.814912493 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_lvl3_closure" {
     Data.Functor.Product.$fRead1Product_lvl3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.821896979 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_info;
         const 0;
 },
 reader_sg5pk_entry() //  [R1]
         { []
         }
     {offset
       cg8nf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8ng; else goto cg8nh;
       cg8ng: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8nh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader_sg5pk_info" {
     reader_sg5pk_info:
         const reader_sg5pk_entry;
         const 3;
         const 15;
 },
 reader1_sg5pl_entry() //  [R1]
         { []
         }
     {offset
       cg8nm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8nn; else goto cg8no;
       cg8nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8no: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader1_sg5pl_info" {
     reader1_sg5pl_info:
         const reader1_sg5pl_entry;
         const 3;
         const 15;
 },
 sat_sg5pu_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8nO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8nS; else goto cg8nR;
       cg8nS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8nR: // global
           _sg5po::P64 = P64[R1 + 7];
           _sg5pr::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sg5pr::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sg5po::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pu_info" {
     sat_sg5pu_info:
         const sat_sg5pu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5pv_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8nT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8nX; else goto cg8nW;
       cg8nX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8nW: // global
           _sg5pl::P64 = P64[R1 + 7];
           _sg5po::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sg5pu_info;
           P64[Hp - 8] = _sg5po::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = Data.Functor.Product.$fRead1Product_lvl3_closure+1;
           R1 = _sg5pl::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pv_info" {
     sat_sg5pv_info:
         const sat_sg5pv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5pw_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8nY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8o2; else goto cg8o1;
       cg8o2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8o1: // global
           _sg5pk::P64 = P64[R1 + 7];
           _sg5pl::P64 = P64[R1 + 15];
           _sg5po::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_sg5pv_info;
           P64[Hp - 8] = _sg5pl::P64;
           P64[Hp] = _sg5po::P64;
           R3 = Hp - 15;
           R2 = Data.Functor.Product.$fRead1Product_lvl3_closure+1;
           R1 = _sg5pk::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pw_info" {
     sat_sg5pw_info:
         const sat_sg5pw_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 $wlvl_sg5pm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8o6: // global
           _sg5po::P64 = R3;
           _sg5pn::I64 = R2;
           _sg5pm::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cg8o7; else goto cg8o8;
       cg8o8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg8oa; else goto cg8o9;
       cg8oa: // global
           HpAlloc = 32;
           goto cg8o7;
       cg8o7: // global
           R3 = _sg5po::P64;
           R2 = _sg5pn::I64;
           R1 = _sg5pm::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8o9: // global
           if (%MO_S_Gt_W64(_sg5pn::I64, 10)) goto cg8o4; else goto cg8o5;
       cg8o4: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8o5: // global
           _sg5pk::P64 = P64[_sg5pm::P64 + 6];
           _sg5pl::P64 = P64[_sg5pm::P64 + 14];
           I64[Hp - 24] = sat_sg5pw_info;
           P64[Hp - 16] = _sg5pk::P64;
           P64[Hp - 8] = _sg5pl::P64;
           P64[Hp] = _sg5po::P64;
           I64[Sp - 8] = block_cg8ob_info;
           R3 = Hp - 23;
           R2 = Data.Functor.Product.$fRead1Product1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sg5pm_info" {
     $wlvl_sg5pm_info:
         const $wlvl_sg5pm_entry;
         const 2;
         const 12884901899;
         const 8589934605;
         const Sg5Oh_srt;
 },
 _cg8ob() //  [R1]
         { []
         }
     {offset
       cg8ob: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg8og; else goto cg8of;
       cg8og: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8of: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8ob_info" {
     block_cg8ob_info:
         const _cg8ob;
         const 0;
         const 30;
 },
 lvl9_sg5pz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8op: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg8oq; else goto cg8or;
       cg8oq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8or: // global
           I64[Sp - 24] = block_cg8om_info;
           _sg5pm::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sg5pm::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug8ov; else goto cg8on;
       ug8ov: // global
           call _cg8om(R1) args: 0, res: 0, upd: 0;
       cg8on: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_sg5pz_info" {
     lvl9_sg5pz_info:
         const lvl9_sg5pz_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const Sg5Oh_srt;
 },
 _cg8om() //  [R1]
         { []
         }
     {offset
       cg8om: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sg5pm_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8om_info" {
     block_cg8om_info:
         const _cg8om;
         const 2;
         const 12884901918;
         const Sg5Oh_srt;
 },
 sat_sg5pG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8oB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pG_info" {
     sat_sg5pG_info:
         const sat_sg5pG_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sg5Oh_srt+16;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cg8oE: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cg8oI; else goto cg8oH;
       cg8oI: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8oH: // global
           I64[Hp - 128] = reader_sg5pk_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           I64[Hp - 88] = reader1_sg5pl_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = $wlvl_sg5pm_info;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl9_sg5pz_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sg5pG_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const Sg5Oh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.8525035 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info;
         const 0;
 },
 sat_sg5pR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8pN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg8pO; else goto cg8pP;
       cg8pO: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8pP: // global
           I64[Sp - 8] = block_cg8pK_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pR_info" {
     sat_sg5pR_info:
         const sat_sg5pR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cg8pK() //  [R1]
         { []
         }
     {offset
       cg8pK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg8pS; else goto cg8pR;
       cg8pS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8pR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8pK_info" {
     block_cg8pK_info:
         const _cg8pK;
         const 0;
         const 30;
 },
 sat_sg5pM_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8pY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pM_info" {
     sat_sg5pM_info:
         const sat_sg5pM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sg5pL_entry() //  [R1]
         { []
         }
     {offset
       cg8q1: // global
           _sg5pL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg8q2; else goto cg8q3;
       cg8q3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg8q5; else goto cg8q4;
       cg8q5: // global
           HpAlloc = 32;
           goto cg8q2;
       cg8q2: // global
           R1 = _sg5pL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5pL::P64;
           _sg5pH::P64 = P64[_sg5pL::P64 + 16];
           _sg5pI::P64 = P64[_sg5pL::P64 + 24];
           _sg5pJ::P64 = P64[_sg5pL::P64 + 32];
           _sg5pK::P64 = P64[_sg5pL::P64 + 40];
           I64[Hp - 24] = sat_sg5pR_info;
           P64[Hp - 16] = _sg5pK::P64;
           I64[Hp - 8] = sat_sg5pM_info;
           P64[Hp] = _sg5pJ::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sg5pI::P64;
           R2 = _sg5pH::P64;
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sg5pL_info" {
     ds_sg5pL_info:
         const ds_sg5pL_entry;
         const 4;
         const 4294967311;
         const Sg5Oh_srt+24;
 },
 sat_sg5pT_entry() //  [R1]
         { []
         }
     {offset
       cg8qf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8qg; else goto cg8qh;
       cg8qg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8qh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5pT_info" {
     sat_sg5pT_info:
         const sat_sg5pT_entry;
         const 2;
         const 18;
 },
 sat_sg5pU_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8qi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg8qm; else goto cg8ql;
       cg8qm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8ql: // global
           _sg5pL::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sg5pT_info;
           P64[Hp - 8] = _sg5pL::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pU_info" {
     sat_sg5pU_info:
         const sat_sg5pU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cg8qn: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg8qr; else goto cg8qq;
       cg8qr: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8qq: // global
           I64[Hp - 56] = ds_sg5pL_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sg5pU_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sg5Oh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.873983137 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info;
         const 0;
 },
 sat_sg5pZ_entry() //  [R1]
         { []
         }
     {offset
       cg8r2: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5pZ_info" {
     sat_sg5pZ_info:
         const sat_sg5pZ_entry;
         const 4;
         const 4294967311;
         const Sg5Oh_srt+24;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cg8r5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg8r9; else goto cg8r8;
       cg8r9: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8r8: // global
           I64[Hp - 40] = sat_sg5pZ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sg5Oh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.881940088 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_closure" {
     Data.Functor.Product.$fRead1Product_closure:
         const Data.Functor.Product.$fRead1Product_info;
         const 0;
 },
 sat_sg5q5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8rq: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry(R5,
                                                                             R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5q5_info" {
     sat_sg5q5_info:
         const sat_sg5q5_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+48;
 },
 sat_sg5q4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8ry: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5q4_info" {
     sat_sg5q4_info:
         const sat_sg5q4_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+24;
 },
 sat_sg5q3_entry() //  [R1]
         { []
         }
     {offset
       cg8rF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8rG; else goto cg8rH;
       cg8rG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8rH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadList_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5q3_info" {
     sat_sg5q3_info:
         const sat_sg5q3_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+56;
 },
 sat_sg5q2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8rN: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry(R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5q2_info" {
     sat_sg5q2_info:
         const sat_sg5q2_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+32;
 },
 Data.Functor.Product.$fRead1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cg8rR: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cg8rV; else goto cg8rU;
       cg8rV: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8rU: // global
           I64[Hp - 136] = sat_sg5q5_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sg5q4_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sg5q3_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sg5q2_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_info" {
     Data.Functor.Product.$fRead1Product_info:
         const Data.Functor.Product.$fRead1Product_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const Sg5Oh_srt+24;
 },
 section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadList_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadList_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadList_info;
         const 0;
 },
 sat_sg5q8_entry() //  [R1]
         { []
         }
     {offset
       cg8s4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8s5; else goto cg8s6;
       cg8s5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8s6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5q8_info" {
     sat_sg5q8_info:
         const sat_sg5q8_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+64;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cg8s7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg8sb; else goto cg8sa;
       cg8sb: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8sa: // global
           I64[Hp - 24] = sat_sg5q8_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadList_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadList_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.899613965 UTC

[section ""data" . Data.Functor.Product.$w$cliftShowsPrec_closure" {
     Data.Functor.Product.$w$cliftShowsPrec_closure:
         const Data.Functor.Product.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cg8sH: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sg5qh_entry() //  [R1]
         { []
         }
     {offset
       cg8sP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg8sQ; else goto cg8sR;
       cg8sQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8sR: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5qh_info" {
     sat_sg5qh_info:
         const sat_sg5qh_entry;
         const 3;
         const 15;
 },
 sat_sg5qg_entry() //  [R1]
         { []
         }
     {offset
       cg8sW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg8sX; else goto cg8sY;
       cg8sX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8sY: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5qg_info" {
     sat_sg5qg_info:
         const sat_sg5qg_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg8sZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg8t3; else goto cg8t2;
       cg8t3: // global
           HpAlloc = 80;
           R1 = Data.Functor.Product.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8t2: // global
           I64[Hp - 72] = sat_sg5qh_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sg5qg_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sg5qd::I64 = R6;
           R6 = P64[Sp];
           R5 = _sg5qd::I64;
           R4 = Data.Functor.Product.$fRead1Product2_closure;
           R3 = Hp - 72;
           R2 = Hp - 32;
           Sp = Sp + 8;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cliftShowsPrec_info" {
     Data.Functor.Product.$w$cliftShowsPrec_info:
         const Data.Functor.Product.$w$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const Sg5Oh_srt+72;
         const 1031;
         const Data.Functor.Product.$w$cliftShowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.909796542 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure" {
     Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure:
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cg8tt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8tx; else goto cg8ty;
       cg8tx: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg8ty: // global
           I64[Sp - 40] = block_cg8tq_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8tG; else goto cg8tr;
       ug8tG: // global
           call _cg8tq(R1) args: 0, res: 0, upd: 0;
       cg8tr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info" {
     Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info:
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sg5Oh_srt+80;
 },
 _cg8tq() //  [R1]
         { []
         }
     {offset
       cg8tq: // global
           I64[Sp] = block_cg8tw_info;
           _sg5qp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _sg5qp::I64;
           if (R1 & 7 != 0) goto ug8tF; else goto cg8tA;
       ug8tF: // global
           call _cg8tw(R1) args: 0, res: 0, upd: 0;
       cg8tA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8tq_info" {
     block_cg8tq_info:
         const _cg8tq;
         const 5;
         const 4294967326;
         const Sg5Oh_srt+80;
 },
 _cg8tw() //  [R1]
         { []
         }
     {offset
       cg8tw: // global
           R6 = I64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8tw_info" {
     block_cg8tw_info:
         const _cg8tw;
         const 1029;
         const 4294967326;
         const Sg5Oh_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.916751177 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct4_closure" {
     Data.Functor.Product.$fFoldableProduct4_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.920452564 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_$cliftShowList_closure" {
     Data.Functor.Product.$fShow1Product_$cliftShowList_closure:
         const Data.Functor.Product.$fShow1Product_$cliftShowList_info;
         const 0;
 },
 sat_sg5qD_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8u9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8ua; else goto cg8ub;
       cg8ua: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8ub: // global
           I64[Sp - 40] = block_cg8u6_info;
           _sg5qt::P64 = P64[R1 + 7];
           _sg5qu::P64 = P64[R1 + 15];
           _sg5qv::P64 = P64[R1 + 23];
           _sg5qw::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5qt::P64;
           P64[Sp - 24] = _sg5qu::P64;
           P64[Sp - 16] = _sg5qv::P64;
           P64[Sp - 8] = _sg5qw::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8uf; else goto cg8u7;
       ug8uf: // global
           call _cg8u6(R1) args: 0, res: 0, upd: 0;
       cg8u7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5qD_info" {
     sat_sg5qD_info:
         const sat_sg5qD_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+80;
 },
 _cg8u6() //  [R1]
         { []
         }
     {offset
       cg8u6: // global
           R6 = 0;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8u6_info" {
     block_cg8u6_info:
         const _cg8u6;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+80;
 },
 Data.Functor.Product.$fShow1Product_$cliftShowList_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cg8ug: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg8uk; else goto cg8uj;
       cg8uk: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg8uj: // global
           I64[Hp - 32] = sat_sg5qD_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_$cliftShowList_info" {
     Data.Functor.Product.$fShow1Product_$cliftShowList_info:
         const Data.Functor.Product.$fShow1Product_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const Sg5Oh_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.930364039 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_closure" {
     Data.Functor.Product.$fShow1Product_closure:
         const Data.Functor.Product.$fShow1Product_info;
         const 0;
 },
 sat_sg5qH_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg8uI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg8uJ; else goto cg8uK;
       cg8uJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8uK: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Product.$fShow1Product_$cliftShowList_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5qH_info" {
     sat_sg5qH_info:
         const sat_sg5qH_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sg5Oh_srt+96;
 },
 sat_sg5qG_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cg8uQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg8uR; else goto cg8uS;
       cg8uR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8uS: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry(R6,
                                                                          R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5qG_info" {
     sat_sg5qG_info:
         const sat_sg5qG_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sg5Oh_srt+88;
 },
 Data.Functor.Product.$fShow1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cg8uU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg8uY; else goto cg8uX;
       cg8uY: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8uX: // global
           I64[Hp - 64] = sat_sg5qH_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg5qG_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_info" {
     Data.Functor.Product.$fShow1Product_info:
         const Data.Functor.Product.$fShow1Product_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sg5Oh_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.94005373 UTC

[section ""data" . Data.Functor.Product.$w$c==_closure" {
     Data.Functor.Product.$w$c==_closure:
         const Data.Functor.Product.$w$c==_info;
 },
 Data.Functor.Product.$w$c==_slow() //  [R1]
         { []
         }
     {offset
       cg8vf: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c==_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 eq_sg5qP_entry() //  [R1]
         { []
         }
     {offset
       cg8vn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8vo; else goto cg8vp;
       cg8vo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8vp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eq_sg5qP_info" {
     eq_sg5qP_info:
         const eq_sg5qP_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c==_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8vw: // global
           _sg5qM::P64 = R6;
           _sg5qL::P64 = R5;
           _sg5qK::P64 = R4;
           _sg5qJ::P64 = R3;
           _sg5qI::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cg8vx; else goto cg8vy;
       cg8vy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8vA; else goto cg8vz;
       cg8vA: // global
           HpAlloc = 24;
           goto cg8vx;
       cg8vx: // global
           R1 = Data.Functor.Product.$w$c==_closure;
           P64[Sp - 40] = _sg5qI::P64;
           P64[Sp - 32] = _sg5qJ::P64;
           P64[Sp - 24] = _sg5qK::P64;
           P64[Sp - 16] = _sg5qL::P64;
           P64[Sp - 8] = _sg5qM::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8vz: // global
           I64[Hp - 16] = eq_sg5qP_info;
           P64[Hp] = _sg5qK::P64;
           I64[Sp - 24] = block_cg8vq_info;
           R4 = P64[Sp];
           R3 = _sg5qL::P64;
           _cg8vj::P64 = Hp - 16;
           R2 = _cg8vj::P64;
           R1 = _sg5qI::P64;
           P64[Sp - 16] = _sg5qJ::P64;
           P64[Sp - 8] = _sg5qM::P64;
           P64[Sp] = _cg8vj::P64;
           Sp = Sp - 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c==_info" {
     Data.Functor.Product.$w$c==_info:
         const Data.Functor.Product.$w$c==_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c==_slow;
 },
 _cg8vq() //  [R1]
         { []
         }
     {offset
       cg8vq: // global
           if (R1 & 7 == 1) goto cg8vt; else goto cg8vu;
       cg8vt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8vu: // global
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8vq_info" {
     block_cg8vq_info:
         const _cg8vq;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.949820646 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_$c==_closure" {
     Data.Functor.Product.$fEqProduct_$c==_closure:
         const Data.Functor.Product.$fEqProduct_$c==_info;
 },
 Data.Functor.Product.$fEqProduct_$c==_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg8w5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8w9; else goto cg8wa;
       cg8w9: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8wa: // global
           I64[Sp - 40] = block_cg8w2_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8wi; else goto cg8w3;
       ug8wi: // global
           call _cg8w2(R1) args: 0, res: 0, upd: 0;
       cg8w3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_$c==_info" {
     Data.Functor.Product.$fEqProduct_$c==_info:
         const Data.Functor.Product.$fEqProduct_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8w2() //  [R1]
         { []
         }
     {offset
       cg8w2: // global
           I64[Sp - 8] = block_cg8w8_info;
           _sg5qX::P64 = P64[R1 + 7];
           _sg5qY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5qY::P64;
           P64[Sp + 32] = _sg5qX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8wh; else goto cg8wc;
       ug8wh: // global
           call _cg8w8(R1) args: 0, res: 0, upd: 0;
       cg8wc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8w2_info" {
     block_cg8w2_info:
         const _cg8w2;
         const 4;
         const 30;
 },
 _cg8w8() //  [R1]
         { []
         }
     {offset
       cg8w8: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c==_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8w8_info" {
     block_cg8w8_info:
         const _cg8w8;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.960767506 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_$c/=_closure" {
     Data.Functor.Product.$fEqProduct_$c/=_closure:
         const Data.Functor.Product.$fEqProduct_$c/=_info;
 },
 eq_sg5rd_entry() //  [R1]
         { []
         }
     {offset
       cg8wQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8wR; else goto cg8wS;
       cg8wR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8wS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eq_sg5rd_info" {
     eq_sg5rd_info:
         const eq_sg5rd_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fEqProduct_$c/=_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg8wT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8wU; else goto cg8wV;
       cg8wU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8wV: // global
           I64[Sp - 40] = block_cg8wC_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8xr; else goto cg8wD;
       ug8xr: // global
           call _cg8wC(R1) args: 0, res: 0, upd: 0;
       cg8wD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_$c/=_info" {
     Data.Functor.Product.$fEqProduct_$c/=_info:
         const Data.Functor.Product.$fEqProduct_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8wC() //  [R1]
         { []
         }
     {offset
       cg8wC: // global
           I64[Sp - 8] = block_cg8wH_info;
           _sg5r8::P64 = P64[R1 + 7];
           _sg5r9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5r9::P64;
           P64[Sp + 32] = _sg5r8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8xq; else goto cg8wI;
       ug8xq: // global
           call _cg8wH(R1) args: 0, res: 0, upd: 0;
       cg8wI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8wC_info" {
     block_cg8wC_info:
         const _cg8wC;
         const 4;
         const 30;
 },
 _cg8wH() //  [R1]
         { []
         }
     {offset
       cg8wH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8x0; else goto cg8wZ;
       cg8x0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8wZ: // global
           _sg5rb::P64 = P64[R1 + 7];
           _sg5rc::P64 = P64[R1 + 15];
           I64[Hp - 16] = eq_sg5rd_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_cg8wX_info;
           R4 = _sg5rb::P64;
           R3 = P64[Sp + 40];
           _cg8wM::P64 = Hp - 16;
           R2 = _cg8wM::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sg5rc::P64;
           P64[Sp + 40] = _cg8wM::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8wH_info" {
     block_cg8wH_info:
         const _cg8wH;
         const 5;
         const 30;
 },
 _cg8wX() //  [R1]
         { []
         }
     {offset
       cg8wX: // global
           if (R1 & 7 == 1) goto ug8xo; else goto cg8xb;
       ug8xo: // global
           Sp = Sp + 48;
           call _cg8xh() args: 0, res: 0, upd: 0;
       cg8xb: // global
           _cg8wM::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cg8x9_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = _cg8wM::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8wX_info" {
     block_cg8wX_info:
         const _cg8wX;
         const 133;
         const 30;
 },
 _cg8x9() //  [R1]
         { []
         }
     {offset
       cg8x9: // global
           if (R1 & 7 == 1) goto ug8xp; else goto cg8xl;
       ug8xp: // global
           Sp = Sp + 8;
           call _cg8xh() args: 0, res: 0, upd: 0;
       cg8xl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8x9_info" {
     block_cg8x9_info:
         const _cg8x9;
         const 0;
         const 30;
 },
 _cg8xh() //  []
         { []
         }
     {offset
       cg8xh: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.974884679 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_closure" {
     Data.Functor.Product.$fEqProduct_closure:
         const Data.Functor.Product.$fEqProduct_info;
 },
 sat_sg5rk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8y9: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fEqProduct_$c/=_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5rk_info" {
     sat_sg5rk_info:
         const sat_sg5rk_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5rj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8yh: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fEqProduct_$c==_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5rj_info" {
     sat_sg5rj_info:
         const sat_sg5rj_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Product.$fEqProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg8yl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg8yp; else goto cg8yo;
       cg8yp: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8yo: // global
           I64[Hp - 80] = sat_sg5rk_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sg5rj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_info" {
     Data.Functor.Product.$fEqProduct_info:
         const Data.Functor.Product.$fEqProduct_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.985408605 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$ccompare_closure" {
     Data.Functor.Product.$fOrdProduct_$ccompare_closure:
         const Data.Functor.Product.$fOrdProduct_$ccompare_info;
 },
 w_sg5rw_entry() //  [R1]
         { []
         }
     {offset
       cg8yV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8yW; else goto cg8yX;
       cg8yW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8yX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sg5rw_info" {
     w_sg5rw_info:
         const w_sg5rw_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$ccompare_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cg8yY: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cg8yZ; else goto cg8z0;
       cg8yZ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8z0: // global
           I64[Sp - 40] = block_cg8yH_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8zn; else goto cg8yI;
       ug8zn: // global
           call _cg8yH(R1) args: 0, res: 0, upd: 0;
       cg8yI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$ccompare_info" {
     Data.Functor.Product.$fOrdProduct_$ccompare_info:
         const Data.Functor.Product.$fOrdProduct_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8yH() //  [R1]
         { []
         }
     {offset
       cg8yH: // global
           I64[Sp - 8] = block_cg8yM_info;
           _sg5rr::P64 = P64[R1 + 7];
           _sg5rs::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5rs::P64;
           P64[Sp + 32] = _sg5rr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8zm; else goto cg8yN;
       ug8zm: // global
           call _cg8yM(R1) args: 0, res: 0, upd: 0;
       cg8yN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8yH_info" {
     block_cg8yH_info:
         const _cg8yH;
         const 4;
         const 30;
 },
 _cg8yM() //  [R1]
         { []
         }
     {offset
       cg8yM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8z5; else goto cg8z4;
       cg8z5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8z4: // global
           _sg5ru::P64 = P64[R1 + 7];
           _sg5rv::P64 = P64[R1 + 15];
           I64[Hp - 16] = w_sg5rw_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_cg8z2_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cg8yR::P64 = Hp - 16;
           P64[Sp - 24] = _cg8yR::P64;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = _sg5ru::P64;
           P64[Sp + 32] = _sg5rv::P64;
           P64[Sp + 40] = _cg8yR::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8yM_info" {
     block_cg8yM_info:
         const _cg8yM;
         const 5;
         const 30;
 },
 _cg8z2() //  [R1]
         { []
         }
     {offset
       cg8z2: // global
           _cg8zk::P64 = R1 & 7;
           if (_cg8zk::P64 < 3) goto ug8zl; else goto cg8zj;
       ug8zl: // global
           if (_cg8zk::P64 < 2) goto cg8zb; else goto cg8zf;
       cg8zb: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cg8zf: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_ppp_info;
           P64[Sp + 24] = P64[Sp + 40];
           _sg5rv::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 8];
           P64[Sp + 40] = _sg5rv::P64;
           Sp = Sp + 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cg8zj: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8z2_info" {
     block_cg8z2_info:
         const _cg8z2;
         const 133;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:55.997859316 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cp1Ord_closure" {
     Data.Functor.Product.$fOrdProduct_$cp1Ord_closure:
         const Data.Functor.Product.$fOrdProduct_$cp1Ord_info;
 },
 sat_sg5rD_entry() //  [R1]
         { []
         }
     {offset
       cg8zX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8zY; else goto cg8zZ;
       cg8zY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8zZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5rD_info" {
     sat_sg5rD_info:
         const sat_sg5rD_entry;
         const 1;
         const 16;
 },
 sat_sg5rC_entry() //  [R1]
         { []
         }
     {offset
       cg8A4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8A5; else goto cg8A6;
       cg8A5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8A6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5rC_info" {
     sat_sg5rC_info:
         const sat_sg5rC_entry;
         const 1;
         const 16;
 },
 sat_sg5rB_entry() //  [R1]
         { []
         }
     {offset
       cg8Ab: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Ac; else goto cg8Ad;
       cg8Ac: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Ad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5rB_info" {
     sat_sg5rB_info:
         const sat_sg5rB_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg8Ae: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg8Ai; else goto cg8Ah;
       cg8Ai: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Ah: // global
           I64[Hp - 64] = sat_sg5rD_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sg5rC_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5rB_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fEqProduct_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cp1Ord_info" {
     Data.Functor.Product.$fOrdProduct_$cp1Ord_info:
         const Data.Functor.Product.$fOrdProduct_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.008404715 UTC

[section ""data" . Data.Functor.Product.$w$c<_closure" {
     Data.Functor.Product.$w$c<_closure:
         const Data.Functor.Product.$w$c<_info;
 },
 Data.Functor.Product.$w$c<_slow() //  [R1]
         { []
         }
     {offset
       cg8AA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sg5rL_entry() //  [R1]
         { []
         }
     {offset
       cg8AI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8AJ; else goto cg8AK;
       cg8AJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8AK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5rL_info" {
     comp_sg5rL_info:
         const comp_sg5rL_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8AS: // global
           _sg5rI::P64 = R6;
           _sg5rH::P64 = R5;
           _sg5rG::P64 = R4;
           _sg5rF::P64 = R3;
           _sg5rE::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg8AT; else goto cg8AU;
       cg8AU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8AW; else goto cg8AV;
       cg8AW: // global
           HpAlloc = 24;
           goto cg8AT;
       cg8AT: // global
           R1 = Data.Functor.Product.$w$c<_closure;
           P64[Sp - 40] = _sg5rE::P64;
           P64[Sp - 32] = _sg5rF::P64;
           P64[Sp - 24] = _sg5rG::P64;
           P64[Sp - 16] = _sg5rH::P64;
           P64[Sp - 8] = _sg5rI::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8AV: // global
           I64[Hp - 16] = comp_sg5rL_info;
           P64[Hp] = _sg5rG::P64;
           I64[Sp - 24] = block_cg8AL_info;
           R2 = _sg5rE::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cg8AE::P64 = Hp - 16;
           P64[Sp - 48] = _cg8AE::P64;
           P64[Sp - 40] = _sg5rH::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sg5rF::P64;
           P64[Sp - 8] = _sg5rI::P64;
           P64[Sp] = _cg8AE::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c<_info" {
     Data.Functor.Product.$w$c<_info:
         const Data.Functor.Product.$w$c<_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c<_slow;
 },
 _cg8AL() //  [R1]
         { []
         }
     {offset
       cg8AL: // global
           _cg8AR::P64 = R1 & 7;
           if (_cg8AR::P64 < 3) goto ug8Bi; else goto ug8Bj;
       ug8Bi: // global
           if (_cg8AR::P64 < 2) goto ug8Bk; else goto cg8AP;
       ug8Bk: // global
           Sp = Sp + 40;
           call _cg8Bd() args: 0, res: 0, upd: 0;
       cg8AP: // global
           _sg5rK::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg8B2_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sg5rK::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8Bj: // global
           Sp = Sp + 40;
           call _cg8AQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8AL_info" {
     block_cg8AL_info:
         const _cg8AL;
         const 4;
         const 30;
 },
 _cg8B2() //  [R1]
         { []
         }
     {offset
       cg8B2: // global
           if (R1 & 7 == 1) goto ug8Bl; else goto ug8Bm;
       ug8Bl: // global
           Sp = Sp + 8;
           call _cg8Bd() args: 0, res: 0, upd: 0;
       ug8Bm: // global
           Sp = Sp + 8;
           call _cg8AQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8B2_info" {
     block_cg8B2_info:
         const _cg8B2;
         const 0;
         const 30;
 },
 _cg8Bd() //  []
         { []
         }
     {offset
       cg8Bd: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8AQ() //  []
         { []
         }
     {offset
       cg8AQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.022293156 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c<_closure" {
     Data.Functor.Product.$fOrdProduct_$c<_closure:
         const Data.Functor.Product.$fOrdProduct_$c<_info;
 },
 Data.Functor.Product.$fOrdProduct_$c<_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg8C0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8C4; else goto cg8C5;
       cg8C4: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8C5: // global
           I64[Sp - 40] = block_cg8BX_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8Cd; else goto cg8BY;
       ug8Cd: // global
           call _cg8BX(R1) args: 0, res: 0, upd: 0;
       cg8BY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c<_info" {
     Data.Functor.Product.$fOrdProduct_$c<_info:
         const Data.Functor.Product.$fOrdProduct_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8BX() //  [R1]
         { []
         }
     {offset
       cg8BX: // global
           I64[Sp - 8] = block_cg8C3_info;
           _sg5rU::P64 = P64[R1 + 7];
           _sg5rV::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5rV::P64;
           P64[Sp + 32] = _sg5rU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8Cc; else goto cg8C7;
       ug8Cc: // global
           call _cg8C3(R1) args: 0, res: 0, upd: 0;
       cg8C7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8BX_info" {
     block_cg8BX_info:
         const _cg8BX;
         const 4;
         const 30;
 },
 _cg8C3() //  [R1]
         { []
         }
     {offset
       cg8C3: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8C3_info" {
     block_cg8C3_info:
         const _cg8C3;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.031708739 UTC

[section ""data" . Data.Functor.Product.$w$c>=_closure" {
     Data.Functor.Product.$w$c>=_closure:
         const Data.Functor.Product.$w$c>=_info;
 },
 Data.Functor.Product.$w$c>=_slow() //  [R1]
         { []
         }
     {offset
       cg8Cu: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c>=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sg5s6_entry() //  [R1]
         { []
         }
     {offset
       cg8CC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8CD; else goto cg8CE;
       cg8CD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8CE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5s6_info" {
     comp_sg5s6_info:
         const comp_sg5s6_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8CM: // global
           _sg5s3::P64 = R6;
           _sg5s2::P64 = R5;
           _sg5s1::P64 = R4;
           _sg5s0::P64 = R3;
           _sg5rZ::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg8CN; else goto cg8CO;
       cg8CO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8CQ; else goto cg8CP;
       cg8CQ: // global
           HpAlloc = 24;
           goto cg8CN;
       cg8CN: // global
           R1 = Data.Functor.Product.$w$c>=_closure;
           P64[Sp - 40] = _sg5rZ::P64;
           P64[Sp - 32] = _sg5s0::P64;
           P64[Sp - 24] = _sg5s1::P64;
           P64[Sp - 16] = _sg5s2::P64;
           P64[Sp - 8] = _sg5s3::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8CP: // global
           I64[Hp - 16] = comp_sg5s6_info;
           P64[Hp] = _sg5s1::P64;
           I64[Sp - 24] = block_cg8CF_info;
           R2 = _sg5rZ::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cg8Cy::P64 = Hp - 16;
           P64[Sp - 48] = _cg8Cy::P64;
           P64[Sp - 40] = _sg5s2::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sg5s0::P64;
           P64[Sp - 8] = _sg5s3::P64;
           P64[Sp] = _cg8Cy::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c>=_info" {
     Data.Functor.Product.$w$c>=_info:
         const Data.Functor.Product.$w$c>=_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c>=_slow;
 },
 _cg8CF() //  [R1]
         { []
         }
     {offset
       cg8CF: // global
           _cg8CL::P64 = R1 & 7;
           if (_cg8CL::P64 < 3) goto ug8Dc; else goto ug8Dd;
       ug8Dc: // global
           if (_cg8CL::P64 < 2) goto ug8De; else goto cg8CJ;
       ug8De: // global
           Sp = Sp + 40;
           call _cg8D7() args: 0, res: 0, upd: 0;
       cg8CJ: // global
           _sg5s5::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg8CW_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sg5s5::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8Dd: // global
           Sp = Sp + 40;
           call _cg8CK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8CF_info" {
     block_cg8CF_info:
         const _cg8CF;
         const 4;
         const 30;
 },
 _cg8CW() //  [R1]
         { []
         }
     {offset
       cg8CW: // global
           if (R1 & 7 == 1) goto ug8Df; else goto ug8Dg;
       ug8Df: // global
           Sp = Sp + 8;
           call _cg8D7() args: 0, res: 0, upd: 0;
       ug8Dg: // global
           Sp = Sp + 8;
           call _cg8CK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8CW_info" {
     block_cg8CW_info:
         const _cg8CW;
         const 0;
         const 30;
 },
 _cg8D7() //  []
         { []
         }
     {offset
       cg8D7: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8CK() //  []
         { []
         }
     {offset
       cg8CK: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.045264088 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c>=_closure" {
     Data.Functor.Product.$fOrdProduct_$c>=_closure:
         const Data.Functor.Product.$fOrdProduct_$c>=_info;
 },
 Data.Functor.Product.$fOrdProduct_$c>=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg8DU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8DY; else goto cg8DZ;
       cg8DY: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8DZ: // global
           I64[Sp - 40] = block_cg8DR_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8E7; else goto cg8DS;
       ug8E7: // global
           call _cg8DR(R1) args: 0, res: 0, upd: 0;
       cg8DS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c>=_info" {
     Data.Functor.Product.$fOrdProduct_$c>=_info:
         const Data.Functor.Product.$fOrdProduct_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8DR() //  [R1]
         { []
         }
     {offset
       cg8DR: // global
           I64[Sp - 8] = block_cg8DX_info;
           _sg5sf::P64 = P64[R1 + 7];
           _sg5sg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5sg::P64;
           P64[Sp + 32] = _sg5sf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8E6; else goto cg8E1;
       ug8E6: // global
           call _cg8DX(R1) args: 0, res: 0, upd: 0;
       cg8E1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8DR_info" {
     block_cg8DR_info:
         const _cg8DR;
         const 4;
         const 30;
 },
 _cg8DX() //  [R1]
         { []
         }
     {offset
       cg8DX: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c>=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8DX_info" {
     block_cg8DX_info:
         const _cg8DX;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.054786887 UTC

[section ""data" . Data.Functor.Product.$w$c>_closure" {
     Data.Functor.Product.$w$c>_closure:
         const Data.Functor.Product.$w$c>_info;
 },
 Data.Functor.Product.$w$c>_slow() //  [R1]
         { []
         }
     {offset
       cg8Eo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c>_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sg5sr_entry() //  [R1]
         { []
         }
     {offset
       cg8Ew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Ex; else goto cg8Ey;
       cg8Ex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Ey: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5sr_info" {
     comp_sg5sr_info:
         const comp_sg5sr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8EG: // global
           _sg5so::P64 = R6;
           _sg5sn::P64 = R5;
           _sg5sm::P64 = R4;
           _sg5sl::P64 = R3;
           _sg5sk::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg8EH; else goto cg8EI;
       cg8EI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8EK; else goto cg8EJ;
       cg8EK: // global
           HpAlloc = 24;
           goto cg8EH;
       cg8EH: // global
           R1 = Data.Functor.Product.$w$c>_closure;
           P64[Sp - 40] = _sg5sk::P64;
           P64[Sp - 32] = _sg5sl::P64;
           P64[Sp - 24] = _sg5sm::P64;
           P64[Sp - 16] = _sg5sn::P64;
           P64[Sp - 8] = _sg5so::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8EJ: // global
           I64[Hp - 16] = comp_sg5sr_info;
           P64[Hp] = _sg5sm::P64;
           I64[Sp - 24] = block_cg8Ez_info;
           R2 = _sg5sk::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cg8Es::P64 = Hp - 16;
           P64[Sp - 48] = _cg8Es::P64;
           P64[Sp - 40] = _sg5sn::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sg5sl::P64;
           P64[Sp - 8] = _sg5so::P64;
           P64[Sp] = _cg8Es::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c>_info" {
     Data.Functor.Product.$w$c>_info:
         const Data.Functor.Product.$w$c>_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c>_slow;
 },
 _cg8Ez() //  [R1]
         { []
         }
     {offset
       cg8Ez: // global
           _cg8EF::P64 = R1 & 7;
           if (_cg8EF::P64 < 3) goto ug8F6; else goto ug8F7;
       ug8F6: // global
           if (_cg8EF::P64 < 2) goto ug8F8; else goto cg8ED;
       ug8F8: // global
           Sp = Sp + 40;
           call _cg8EX() args: 0, res: 0, upd: 0;
       cg8ED: // global
           _sg5sq::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg8EQ_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sg5sq::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8F7: // global
           Sp = Sp + 40;
           call _cg8EE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8Ez_info" {
     block_cg8Ez_info:
         const _cg8Ez;
         const 4;
         const 30;
 },
 _cg8EQ() //  [R1]
         { []
         }
     {offset
       cg8EQ: // global
           if (R1 & 7 == 3) goto ug8F9; else goto ug8Fa;
       ug8F9: // global
           Sp = Sp + 8;
           call _cg8EE() args: 0, res: 0, upd: 0;
       ug8Fa: // global
           Sp = Sp + 8;
           call _cg8EX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8EQ_info" {
     block_cg8EQ_info:
         const _cg8EQ;
         const 0;
         const 30;
 },
 _cg8EX() //  []
         { []
         }
     {offset
       cg8EX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8EE() //  []
         { []
         }
     {offset
       cg8EE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.068036609 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c>_closure" {
     Data.Functor.Product.$fOrdProduct_$c>_closure:
         const Data.Functor.Product.$fOrdProduct_$c>_info;
 },
 Data.Functor.Product.$fOrdProduct_$c>_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cg8FO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8FS; else goto cg8FT;
       cg8FS: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8FT: // global
           I64[Sp - 40] = block_cg8FL_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8G1; else goto cg8FM;
       ug8G1: // global
           call _cg8FL(R1) args: 0, res: 0, upd: 0;
       cg8FM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c>_info" {
     Data.Functor.Product.$fOrdProduct_$c>_info:
         const Data.Functor.Product.$fOrdProduct_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8FL() //  [R1]
         { []
         }
     {offset
       cg8FL: // global
           I64[Sp - 8] = block_cg8FR_info;
           _sg5sA::P64 = P64[R1 + 7];
           _sg5sB::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5sB::P64;
           P64[Sp + 32] = _sg5sA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8G0; else goto cg8FV;
       ug8G0: // global
           call _cg8FR(R1) args: 0, res: 0, upd: 0;
       cg8FV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8FL_info" {
     block_cg8FL_info:
         const _cg8FL;
         const 4;
         const 30;
 },
 _cg8FR() //  [R1]
         { []
         }
     {offset
       cg8FR: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c>_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8FR_info" {
     block_cg8FR_info:
         const _cg8FR;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.07974547 UTC

[section ""data" . Data.Functor.Product.$w$c<=_closure" {
     Data.Functor.Product.$w$c<=_closure:
         const Data.Functor.Product.$w$c<=_info;
 },
 Data.Functor.Product.$w$c<=_slow() //  [R1]
         { []
         }
     {offset
       cg8Gi: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c<=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sg5sM_entry() //  [R1]
         { []
         }
     {offset
       cg8Gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Gr; else goto cg8Gs;
       cg8Gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Gs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5sM_info" {
     comp_sg5sM_info:
         const comp_sg5sM_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8GA: // global
           _sg5sJ::P64 = R6;
           _sg5sI::P64 = R5;
           _sg5sH::P64 = R4;
           _sg5sG::P64 = R3;
           _sg5sF::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cg8GB; else goto cg8GC;
       cg8GC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8GE; else goto cg8GD;
       cg8GE: // global
           HpAlloc = 24;
           goto cg8GB;
       cg8GB: // global
           R1 = Data.Functor.Product.$w$c<=_closure;
           P64[Sp - 40] = _sg5sF::P64;
           P64[Sp - 32] = _sg5sG::P64;
           P64[Sp - 24] = _sg5sH::P64;
           P64[Sp - 16] = _sg5sI::P64;
           P64[Sp - 8] = _sg5sJ::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cg8GD: // global
           I64[Hp - 16] = comp_sg5sM_info;
           P64[Hp] = _sg5sH::P64;
           I64[Sp - 24] = block_cg8Gt_info;
           R2 = _sg5sF::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cg8Gm::P64 = Hp - 16;
           P64[Sp - 48] = _cg8Gm::P64;
           P64[Sp - 40] = _sg5sI::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sg5sG::P64;
           P64[Sp - 8] = _sg5sJ::P64;
           P64[Sp] = _cg8Gm::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c<=_info" {
     Data.Functor.Product.$w$c<=_info:
         const Data.Functor.Product.$w$c<=_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c<=_slow;
 },
 _cg8Gt() //  [R1]
         { []
         }
     {offset
       cg8Gt: // global
           _cg8Gz::P64 = R1 & 7;
           if (_cg8Gz::P64 < 3) goto ug8H0; else goto ug8H1;
       ug8H0: // global
           if (_cg8Gz::P64 < 2) goto ug8H2; else goto cg8Gx;
       ug8H2: // global
           Sp = Sp + 40;
           call _cg8GR() args: 0, res: 0, upd: 0;
       cg8Gx: // global
           _sg5sL::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg8GK_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sg5sL::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8H1: // global
           Sp = Sp + 40;
           call _cg8Gy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8Gt_info" {
     block_cg8Gt_info:
         const _cg8Gt;
         const 4;
         const 30;
 },
 _cg8GK() //  [R1]
         { []
         }
     {offset
       cg8GK: // global
           if (R1 & 7 == 3) goto ug8H3; else goto ug8H4;
       ug8H3: // global
           Sp = Sp + 8;
           call _cg8Gy() args: 0, res: 0, upd: 0;
       ug8H4: // global
           Sp = Sp + 8;
           call _cg8GR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8GK_info" {
     block_cg8GK_info:
         const _cg8GK;
         const 0;
         const 30;
 },
 _cg8GR() //  []
         { []
         }
     {offset
       cg8GR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8Gy() //  []
         { []
         }
     {offset
       cg8Gy: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.094525527 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c<=_closure" {
     Data.Functor.Product.$fOrdProduct_$c<=_closure:
         const Data.Functor.Product.$fOrdProduct_$c<=_info;
 },
 Data.Functor.Product.$fOrdProduct_$c<=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cg8HI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8HM; else goto cg8HN;
       cg8HM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8HN: // global
           I64[Sp - 40] = block_cg8HF_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8HV; else goto cg8HG;
       ug8HV: // global
           call _cg8HF(R1) args: 0, res: 0, upd: 0;
       cg8HG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c<=_info" {
     Data.Functor.Product.$fOrdProduct_$c<=_info:
         const Data.Functor.Product.$fOrdProduct_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8HF() //  [R1]
         { []
         }
     {offset
       cg8HF: // global
           I64[Sp - 8] = block_cg8HL_info;
           _sg5sV::P64 = P64[R1 + 7];
           _sg5sW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5sW::P64;
           P64[Sp + 32] = _sg5sV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug8HU; else goto cg8HP;
       ug8HU: // global
           call _cg8HL(R1) args: 0, res: 0, upd: 0;
       cg8HP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8HF_info" {
     block_cg8HF_info:
         const _cg8HF;
         const 4;
         const 30;
 },
 _cg8HL() //  [R1]
         { []
         }
     {offset
       cg8HL: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c<=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8HL_info" {
     block_cg8HL_info:
         const _cg8HL;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.105183654 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cmax_closure" {
     Data.Functor.Product.$fOrdProduct_$cmax_closure:
         const Data.Functor.Product.$fOrdProduct_$cmax_info;
 },
 comp_sg5tb_entry() //  [R1]
         { []
         }
     {offset
       cg8It: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Iu; else goto cg8Iv;
       cg8Iu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Iv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5tb_info" {
     comp_sg5tb_info:
         const comp_sg5tb_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cmax_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg8Iw: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cg8Ix; else goto cg8Iy;
       cg8Ix: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Iy: // global
           I64[Sp - 40] = block_cg8If_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8Jb; else goto cg8Ig;
       ug8Jb: // global
           call _cg8If(R1) args: 0, res: 0, upd: 0;
       cg8Ig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cmax_info" {
     Data.Functor.Product.$fOrdProduct_$cmax_info:
         const Data.Functor.Product.$fOrdProduct_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8If() //  [R1]
         { []
         }
     {offset
       cg8If: // global
           I64[Sp - 16] = block_cg8Ik_info;
           _sg5t5::P64 = R1;
           _sg5t6::P64 = P64[R1 + 7];
           _sg5t7::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _sg5t7::P64;
           P64[Sp] = _sg5t6::P64;
           P64[Sp + 32] = _sg5t5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ug8Ja; else goto cg8Il;
       ug8Ja: // global
           call _cg8Ik(R1) args: 0, res: 0, upd: 0;
       cg8Il: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8If_info" {
     block_cg8If_info:
         const _cg8If;
         const 4;
         const 30;
 },
 _cg8Ik() //  [R1]
         { []
         }
     {offset
       cg8Ik: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8ID; else goto cg8IC;
       cg8ID: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8IC: // global
           _sg5t9::P64 = P64[R1 + 7];
           _sg5ta::P64 = P64[R1 + 15];
           I64[Hp - 16] = comp_sg5tb_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cg8IA_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cg8Ip::P64 = Hp - 16;
           P64[Sp - 24] = _cg8Ip::P64;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = _sg5t9::P64;
           P64[Sp + 16] = _sg5ta::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 40] = _cg8Ip::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8Ik_info" {
     block_cg8Ik_info:
         const _cg8Ik;
         const 6;
         const 30;
 },
 _cg8IA() //  [R1]
         { []
         }
     {offset
       cg8IA: // global
           _cg8J3::P64 = R1 & 7;
           if (_cg8J3::P64 < 3) goto ug8J5; else goto ug8J6;
       ug8J5: // global
           if (_cg8J3::P64 < 2) goto ug8J7; else goto cg8IO;
       ug8J7: // global
           Sp = Sp + 24;
           call _cg8IU() args: 0, res: 0, upd: 0;
       cg8IO: // global
           _sg5ta::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cg8IM_info;
           R2 = P64[Sp + 32];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _sg5ta::P64;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8J6: // global
           Sp = Sp + 48;
           call _cg8J2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8IA_info" {
     block_cg8IA_info:
         const _cg8IA;
         const 6;
         const 30;
 },
 _cg8IM() //  [R1]
         { []
         }
     {offset
       cg8IM: // global
           if (R1 & 7 == 3) goto ug8J8; else goto ug8J9;
       ug8J8: // global
           Sp = Sp + 32;
           call _cg8J2() args: 0, res: 0, upd: 0;
       ug8J9: // global
           Sp = Sp + 8;
           call _cg8IU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8IM_info" {
     block_cg8IM_info:
         const _cg8IM;
         const 388;
         const 30;
 },
 _cg8IU() //  []
         { []
         }
     {offset
       cg8IU: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8J2() //  []
         { []
         }
     {offset
       cg8J2: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.122498657 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cmin_closure" {
     Data.Functor.Product.$fOrdProduct_$cmin_closure:
         const Data.Functor.Product.$fOrdProduct_$cmin_info;
 },
 comp_sg5tp_entry() //  [R1]
         { []
         }
     {offset
       cg8Ka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Kb; else goto cg8Kc;
       cg8Kb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Kc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sg5tp_info" {
     comp_sg5tp_info:
         const comp_sg5tp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cmin_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cg8Kd: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cg8Ke; else goto cg8Kf;
       cg8Ke: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Kf: // global
           I64[Sp - 40] = block_cg8JW_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8KS; else goto cg8JX;
       ug8KS: // global
           call _cg8JW(R1) args: 0, res: 0, upd: 0;
       cg8JX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cmin_info" {
     Data.Functor.Product.$fOrdProduct_$cmin_info:
         const Data.Functor.Product.$fOrdProduct_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8JW() //  [R1]
         { []
         }
     {offset
       cg8JW: // global
           I64[Sp - 16] = block_cg8K1_info;
           _sg5tj::P64 = R1;
           _sg5tk::P64 = P64[R1 + 7];
           _sg5tl::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _sg5tl::P64;
           P64[Sp] = _sg5tk::P64;
           P64[Sp + 32] = _sg5tj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ug8KR; else goto cg8K2;
       ug8KR: // global
           call _cg8K1(R1) args: 0, res: 0, upd: 0;
       cg8K2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8JW_info" {
     block_cg8JW_info:
         const _cg8JW;
         const 4;
         const 30;
 },
 _cg8K1() //  [R1]
         { []
         }
     {offset
       cg8K1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg8Kk; else goto cg8Kj;
       cg8Kk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8Kj: // global
           _sg5tn::P64 = P64[R1 + 7];
           _sg5to::P64 = P64[R1 + 15];
           I64[Hp - 16] = comp_sg5tp_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cg8Kh_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cg8K6::P64 = Hp - 16;
           P64[Sp - 24] = _cg8K6::P64;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = _sg5tn::P64;
           P64[Sp + 16] = _sg5to::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 40] = _cg8K6::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8K1_info" {
     block_cg8K1_info:
         const _cg8K1;
         const 6;
         const 30;
 },
 _cg8Kh() //  [R1]
         { []
         }
     {offset
       cg8Kh: // global
           _cg8KK::P64 = R1 & 7;
           if (_cg8KK::P64 < 3) goto ug8KM; else goto ug8KN;
       ug8KM: // global
           if (_cg8KK::P64 < 2) goto ug8KO; else goto cg8Kv;
       ug8KO: // global
           Sp = Sp + 48;
           call _cg8KB() args: 0, res: 0, upd: 0;
       cg8Kv: // global
           _sg5to::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cg8Kt_info;
           R2 = P64[Sp + 32];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _sg5to::P64;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ug8KN: // global
           Sp = Sp + 24;
           call _cg8KJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8Kh_info" {
     block_cg8Kh_info:
         const _cg8Kh;
         const 6;
         const 30;
 },
 _cg8Kt() //  [R1]
         { []
         }
     {offset
       cg8Kt: // global
           if (R1 & 7 == 3) goto ug8KP; else goto ug8KQ;
       ug8KP: // global
           Sp = Sp + 8;
           call _cg8KJ() args: 0, res: 0, upd: 0;
       ug8KQ: // global
           Sp = Sp + 32;
           call _cg8KB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cg8Kt_info" {
     block_cg8Kt_info:
         const _cg8Kt;
         const 388;
         const 30;
 },
 _cg8KB() //  []
         { []
         }
     {offset
       cg8KB: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cg8KJ() //  []
         { []
         }
     {offset
       cg8KJ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.141051282 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_closure" {
     Data.Functor.Product.$fOrdProduct_closure:
         const Data.Functor.Product.$fOrdProduct_info;
 },
 sat_sg5tC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8LI: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$cmin_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tC_info" {
     sat_sg5tC_info:
         const sat_sg5tC_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8LQ: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$cmax_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tB_info" {
     sat_sg5tB_info:
         const sat_sg5tB_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8LY: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c>=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tA_info" {
     sat_sg5tA_info:
         const sat_sg5tA_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8M6: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c>_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tz_info" {
     sat_sg5tz_info:
         const sat_sg5tz_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5ty_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Me: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c<=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5ty_info" {
     sat_sg5ty_info:
         const sat_sg5ty_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Mm: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c<_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tx_info" {
     sat_sg5tx_info:
         const sat_sg5tx_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Mu: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$ccompare_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tw_info" {
     sat_sg5tw_info:
         const sat_sg5tw_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sg5tv_entry() //  [R1]
         { []
         }
     {offset
       cg8MB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8MC; else goto cg8MD;
       cg8MC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8MD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fOrdProduct_$cp1Ord_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tv_info" {
     sat_sg5tv_info:
         const sat_sg5tv_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fOrdProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg8MF: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cg8MJ; else goto cg8MI;
       cg8MJ: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8MI: // global
           I64[Hp - 328] = sat_sg5tC_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sg5tB_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sg5tA_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sg5tz_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sg5ty_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sg5tx_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sg5tw_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sg5tv_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_info" {
     Data.Functor.Product.$fOrdProduct_info:
         const Data.Functor.Product.$fOrdProduct_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.160513557 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadPrec_info;
         const 0;
 },
 sat_sg5tH_entry() //  [R1]
         { []
         }
     {offset
       cg8Nu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Nv; else goto cg8Nw;
       cg8Nv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Nw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tH_info" {
     sat_sg5tH_info:
         const sat_sg5tH_entry;
         const 1;
         const 16;
 },
 sat_sg5tG_entry() //  [R1]
         { []
         }
     {offset
       cg8NB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8NC; else goto cg8ND;
       cg8NC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8ND: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tG_info" {
     sat_sg5tG_info:
         const sat_sg5tG_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fReadProduct_$creadPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cg8NE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg8NI; else goto cg8NH;
       cg8NI: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8NH: // global
           I64[Hp - 40] = sat_sg5tH_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sg5tG_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadPrec_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sg5Oh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.169969926 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadsPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadsPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadsPrec_info;
         const 0;
 },
 sat_sg5tN_entry() //  [R1]
         { []
         }
     {offset
       cg8O7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8O8; else goto cg8O9;
       cg8O8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8O9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tN_info" {
     sat_sg5tN_info:
         const sat_sg5tN_entry;
         const 1;
         const 16;
 },
 sat_sg5tM_entry() //  [R1]
         { []
         }
     {offset
       cg8Oe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Of; else goto cg8Og;
       cg8Of: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Og: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tM_info" {
     sat_sg5tM_info:
         const sat_sg5tM_entry;
         const 1;
         const 16;
 },
 ds_sg5tL_entry() //  [R1]
         { []
         }
     {offset
       cg8Oh: // global
           _sg5tL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Oi; else goto cg8Oj;
       cg8Oj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg8Ol; else goto cg8Ok;
       cg8Ol: // global
           HpAlloc = 48;
           goto cg8Oi;
       cg8Oi: // global
           R1 = _sg5tL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Ok: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5tL::P64;
           _sg5tI::P64 = P64[_sg5tL::P64 + 16];
           _sg5tJ::P64 = P64[_sg5tL::P64 + 24];
           _sg5tK::P64 = P64[_sg5tL::P64 + 32];
           I64[Hp - 40] = sat_sg5tN_info;
           P64[Hp - 24] = _sg5tK::P64;
           I64[Hp - 16] = sat_sg5tM_info;
           P64[Hp] = _sg5tK::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sg5tJ::P64;
           R2 = _sg5tI::P64;
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sg5tL_info" {
     ds_sg5tL_info:
         const ds_sg5tL_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+24;
 },
 sat_sg5tP_entry() //  [R1]
         { []
         }
     {offset
       cg8Ov: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Ow; else goto cg8Ox;
       cg8Ow: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Ox: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tP_info" {
     sat_sg5tP_info:
         const sat_sg5tP_entry;
         const 2;
         const 18;
 },
 sat_sg5tQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8Oy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg8OC; else goto cg8OB;
       cg8OC: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8OB: // global
           _sg5tL::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sg5tP_info;
           P64[Hp - 8] = _sg5tL::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tQ_info" {
     sat_sg5tQ_info:
         const sat_sg5tQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Product.$fReadProduct_$creadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cg8OD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg8OH; else goto cg8OG;
       cg8OH: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8OG: // global
           I64[Hp - 48] = ds_sg5tL_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sg5tQ_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadsPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadsPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadsPrec_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const Sg5Oh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.184349016 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadListPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadListPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadListPrec_info;
         const 0;
 },
 sat_sg5tV_entry() //  [R1]
         { []
         }
     {offset
       cg8Pj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Pk; else goto cg8Pl;
       cg8Pk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Pl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tV_info" {
     sat_sg5tV_info:
         const sat_sg5tV_entry;
         const 1;
         const 16;
 },
 sat_sg5tU_entry() //  [R1]
         { []
         }
     {offset
       cg8Pq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Pr; else goto cg8Ps;
       cg8Pr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Ps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5tU_info" {
     sat_sg5tU_info:
         const sat_sg5tU_entry;
         const 1;
         const 16;
 },
 sat_sg5tW_entry() //  [R1]
         { []
         }
     {offset
       cg8Pt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg8Px; else goto cg8Pw;
       cg8Px: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Pw: // global
           _sg5tR::P64 = P64[R1 + 16];
           _sg5tS::P64 = P64[R1 + 24];
           _sg5tT::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sg5tV_info;
           P64[Hp - 24] = _sg5tT::P64;
           I64[Hp - 16] = sat_sg5tU_info;
           P64[Hp] = _sg5tT::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sg5tS::P64;
           R2 = _sg5tR::P64;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5tW_info" {
     sat_sg5tW_info:
         const sat_sg5tW_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+24;
 },
 Data.Functor.Product.$fReadProduct_$creadListPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cg8Py: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg8PC; else goto cg8PB;
       cg8PC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8PB: // global
           I64[Hp - 32] = sat_sg5tW_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadListPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadListPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadListPrec_entry;
         const 0;
         const 35205846925326;
         const 12884901911;
         const Sg5Oh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.195504345 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadList_closure" {
     Data.Functor.Product.$fReadProduct_$creadList_closure:
         const Data.Functor.Product.$fReadProduct_$creadList_info;
         const 0;
 },
 sat_sg5u0_entry() //  [R1]
         { []
         }
     {offset
       cg8Q0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Q1; else goto cg8Q2;
       cg8Q1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Q2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Product.$fReadProduct_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5u0_info" {
     sat_sg5u0_info:
         const sat_sg5u0_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+128;
 },
 Data.Functor.Product.$fReadProduct_$creadList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cg8Q3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg8Q7; else goto cg8Q6;
       cg8Q7: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Q6: // global
           I64[Hp - 32] = sat_sg5u0_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadList_info" {
     Data.Functor.Product.$fReadProduct_$creadList_info:
         const Data.Functor.Product.$fReadProduct_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg5Oh_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.206042304 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_closure" {
     Data.Functor.Product.$fReadProduct_closure:
         const Data.Functor.Product.$fReadProduct_info;
         const 0;
 },
 sat_sg5u7_entry() //  [R1]
         { []
         }
     {offset
       cg8Qo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Qp; else goto cg8Qq;
       cg8Qp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Qq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5u7_info" {
     sat_sg5u7_info:
         const sat_sg5u7_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+128;
 },
 sat_sg5u6_entry() //  [R1]
         { []
         }
     {offset
       cg8Qv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Qw; else goto cg8Qx;
       cg8Qw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Qx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5u6_info" {
     sat_sg5u6_info:
         const sat_sg5u6_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+112;
 },
 sat_sg5u5_entry() //  [R1]
         { []
         }
     {offset
       cg8QC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8QD; else goto cg8QE;
       cg8QD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8QE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadList_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5u5_info" {
     sat_sg5u5_info:
         const sat_sg5u5_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+136;
 },
 sat_sg5u4_entry() //  [R1]
         { []
         }
     {offset
       cg8QJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8QK; else goto cg8QL;
       cg8QK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8QL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5u4_info" {
     sat_sg5u4_info:
         const sat_sg5u4_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+120;
 },
 Data.Functor.Product.$fReadProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg8QN: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cg8QR; else goto cg8QQ;
       cg8QR: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8QQ: // global
           I64[Hp - 192] = sat_sg5u7_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sg5u6_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sg5u5_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sg5u4_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_info" {
     Data.Functor.Product.$fReadProduct_info:
         const Data.Functor.Product.$fReadProduct_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const Sg5Oh_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.228446497 UTC

[section ""data" . Data.Functor.Product.$w$cshowsPrec_closure" {
     Data.Functor.Product.$w$cshowsPrec_closure:
         const Data.Functor.Product.$w$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cg8Ri: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 16, res: 0, upd: 8;
     }
 },
 sp_sg5ue_entry() //  [R1]
         { []
         }
     {offset
       cg8Rq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Rr; else goto cg8Rs;
       cg8Rr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Rs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sg5ue_info" {
     sp_sg5ue_info:
         const sp_sg5ue_entry;
         const 1;
         const 16;
 },
 sl_sg5uf_entry() //  [R1]
         { []
         }
     {offset
       cg8Rx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Ry; else goto cg8Rz;
       cg8Ry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sg5uf_info" {
     sl_sg5uf_info:
         const sl_sg5uf_entry;
         const 1;
         const 16;
 },
 sat_sg5uh_entry() //  [R1]
         { []
         }
     {offset
       cg8RE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg8RF; else goto cg8RG;
       cg8RF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8RG: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5uh_info" {
     sat_sg5uh_info:
         const sat_sg5uh_entry;
         const 3;
         const 15;
 },
 sat_sg5ug_entry() //  [R1]
         { []
         }
     {offset
       cg8RL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg8RM; else goto cg8RN;
       cg8RM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8RN: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5ug_info" {
     sat_sg5ug_info:
         const sat_sg5ug_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8RO: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cg8RS; else goto cg8RR;
       cg8RS: // global
           HpAlloc = 128;
           R1 = Data.Functor.Product.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cg8RR: // global
           I64[Hp - 120] = sp_sg5ue_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sl_sg5uf_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sg5uh_info;
           P64[Hp - 56] = R3;
           _cg8Rm::P64 = Hp - 120;
           P64[Hp - 48] = _cg8Rm::P64;
           _cg8Rt::P64 = Hp - 96;
           P64[Hp - 40] = _cg8Rt::P64;
           I64[Hp - 32] = sat_sg5ug_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cg8Rm::P64;
           P64[Hp] = _cg8Rt::P64;
           R6 = R6;
           R5 = R5;
           R4 = Data.Functor.Product.$fRead1Product2_closure;
           R3 = Hp - 72;
           R2 = Hp - 32;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cshowsPrec_info" {
     Data.Functor.Product.$w$cshowsPrec_info:
         const Data.Functor.Product.$w$cshowsPrec_entry;
         const 0;
         const 4402341478414;
         const 25769803776;
         const Sg5Oh_srt+72;
         const 518;
         const Data.Functor.Product.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.250195049 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshowsPrec_closure" {
     Data.Functor.Product.$fShowProduct_$cshowsPrec_closure:
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$fShowProduct_$cshowsPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cg8Sq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Su; else goto cg8Sv;
       cg8Su: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Sv: // global
           I64[Sp - 40] = block_cg8Sn_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8SD; else goto cg8So;
       ug8SD: // global
           call _cg8Sn(R1) args: 0, res: 0, upd: 0;
       cg8So: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshowsPrec_info" {
     Data.Functor.Product.$fShowProduct_$cshowsPrec_info:
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg5Oh_srt+152;
 },
 _cg8Sn() //  [R1]
         { []
         }
     {offset
       cg8Sn: // global
           I64[Sp] = block_cg8St_info;
           _sg5uo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _sg5uo::I64;
           if (R1 & 7 != 0) goto ug8SC; else goto cg8Sx;
       ug8SC: // global
           call _cg8St(R1) args: 0, res: 0, upd: 0;
       cg8Sx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8Sn_info" {
     block_cg8Sn_info:
         const _cg8Sn;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+152;
 },
 _cg8St() //  [R1]
         { []
         }
     {offset
       cg8St: // global
           R6 = P64[R1 + 7];
           R5 = I64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8St_info" {
     block_cg8St_info:
         const _cg8St;
         const 516;
         const 4294967326;
         const Sg5Oh_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.265404256 UTC

[section ""data" . Data.Functor.Product.$w$cshow_closure" {
     Data.Functor.Product.$w$cshow_closure:
         const Data.Functor.Product.$w$cshow_info;
         const 0;
 },
 sp_sg5ux_entry() //  [R1]
         { []
         }
     {offset
       cg8T0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8T1; else goto cg8T2;
       cg8T1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8T2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sg5ux_info" {
     sp_sg5ux_info:
         const sp_sg5ux_entry;
         const 1;
         const 16;
 },
 sl_sg5uy_entry() //  [R1]
         { []
         }
     {offset
       cg8T7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8T8; else goto cg8T9;
       cg8T8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8T9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sg5uy_info" {
     sl_sg5uy_info:
         const sl_sg5uy_entry;
         const 1;
         const 16;
 },
 sat_sg5uz_entry() //  [R1]
         { []
         }
     {offset
       cg8Ti: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cg8Tj; else goto cg8Tk;
       cg8Tj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Tk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5uz_info" {
     sat_sg5uz_info:
         const sat_sg5uz_entry;
         const 4;
         const 15;
 },
 sat_sg5uB_entry() //  [R1]
         { []
         }
     {offset
       cg8Tm: // global
           _sg5uB::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cg8Tn; else goto cg8To;
       cg8To: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg8Tq; else goto cg8Tp;
       cg8Tq: // global
           HpAlloc = 72;
           goto cg8Tn;
       cg8Tn: // global
           R1 = _sg5uB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Tp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5uB::P64;
           _sg5us::P64 = P64[_sg5uB::P64 + 16];
           _sg5ut::P64 = P64[_sg5uB::P64 + 24];
           _sg5uv::P64 = P64[_sg5uB::P64 + 32];
           _sg5uw::P64 = P64[_sg5uB::P64 + 40];
           _sg5ux::P64 = P64[_sg5uB::P64 + 48];
           _sg5uy::P64 = P64[_sg5uB::P64 + 56];
           I64[Hp - 64] = sat_sg5uz_info;
           P64[Hp - 48] = _sg5ut::P64;
           P64[Hp - 40] = _sg5uw::P64;
           P64[Hp - 32] = _sg5ux::P64;
           P64[Hp - 24] = _sg5uy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 64;
           R2 = _sg5us::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = _sg5ux::P64;
           P64[Sp - 48] = _sg5uy::P64;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sg5uv::P64;
           P64[Sp - 24] = Hp - 14;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5uB_info" {
     sat_sg5uB_info:
         const sat_sg5uB_entry;
         const 6;
         const 15;
 },
 Data.Functor.Product.$w$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8Ts: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cg8Tw; else goto cg8Tv;
       cg8Tw: // global
           HpAlloc = 136;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8Tv: // global
           I64[Hp - 128] = sp_sg5ux_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sl_sg5uy_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_sg5uB_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = Data.Functor.Product.$fRead1Product2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cshow_info" {
     Data.Functor.Product.$w$cshow_info:
         const Data.Functor.Product.$w$cshow_entry;
         const 0;
         const 17596481011726;
         const 21474836505;
         const Sg5Oh_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.278529179 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshow_closure" {
     Data.Functor.Product.$fShowProduct_$cshow_closure:
         const Data.Functor.Product.$fShowProduct_$cshow_info;
         const 0;
 },
 Data.Functor.Product.$fShowProduct_$cshow_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cg8U6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg8U7; else goto cg8U8;
       cg8U7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8U8: // global
           I64[Sp - 32] = block_cg8U3_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug8Uc; else goto cg8U4;
       ug8Uc: // global
           call _cg8U3(R1) args: 0, res: 0, upd: 0;
       cg8U4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshow_info" {
     Data.Functor.Product.$fShowProduct_$cshow_info:
         const Data.Functor.Product.$fShowProduct_$cshow_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sg5Oh_srt+168;
 },
 _cg8U3() //  [R1]
         { []
         }
     {offset
       cg8U3: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8U3_info" {
     block_cg8U3_info:
         const _cg8U3;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.286130347 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshowList_closure" {
     Data.Functor.Product.$fShowProduct_$cshowList_closure:
         const Data.Functor.Product.$fShowProduct_$cshowList_info;
         const 0;
 },
 lvl9_sg5uP_entry() //  [R1]
         { []
         }
     {offset
       cg8Uu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Uv; else goto cg8Uw;
       cg8Uv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Uw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5uP_info" {
     lvl9_sg5uP_info:
         const lvl9_sg5uP_entry;
         const 1;
         const 16;
 },
 lvl10_sg5uQ_entry() //  [R1]
         { []
         }
     {offset
       cg8UB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg8UC; else goto cg8UD;
       cg8UC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8UD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_sg5uQ_info" {
     lvl10_sg5uQ_info:
         const lvl10_sg5uQ_entry;
         const 1;
         const 16;
 },
 sat_sg5uV_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8UM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8UN; else goto cg8UO;
       cg8UN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg8UO: // global
           I64[Sp - 40] = block_cg8UJ_info;
           _sg5uK::P64 = P64[R1 + 7];
           _sg5uL::P64 = P64[R1 + 15];
           _sg5uP::P64 = P64[R1 + 23];
           _sg5uQ::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5uK::P64;
           P64[Sp - 24] = _sg5uL::P64;
           P64[Sp - 16] = _sg5uP::P64;
           P64[Sp - 8] = _sg5uQ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8US; else goto cg8UK;
       ug8US: // global
           call _cg8UJ(R1) args: 0, res: 0, upd: 0;
       cg8UK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5uV_info" {
     sat_sg5uV_info:
         const sat_sg5uV_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+80;
 },
 _cg8UJ() //  [R1]
         { []
         }
     {offset
       cg8UJ: // global
           R6 = 0;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8UJ_info" {
     block_cg8UJ_info:
         const _cg8UJ;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+80;
 },
 Data.Functor.Product.$fShowProduct_$cshowList_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cg8UT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg8UX; else goto cg8UW;
       cg8UX: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8UW: // global
           I64[Hp - 80] = lvl9_sg5uP_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl10_sg5uQ_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg5uV_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshowList_info" {
     Data.Functor.Product.$fShowProduct_$cshowList_info:
         const Data.Functor.Product.$fShowProduct_$cshowList_entry;
         const 0;
         const 35188667056142;
         const 21474836505;
         const Sg5Oh_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.299508601 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_closure" {
     Data.Functor.Product.$fShowProduct_closure:
         const Data.Functor.Product.$fShowProduct_info;
         const 0;
 },
 sat_sg5v1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Vv: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fShowProduct_$cshowList_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5v1_info" {
     sat_sg5v1_info:
         const sat_sg5v1_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sg5Oh_srt+184;
 },
 sat_sg5v0_entry() //  [R1, R2]
         { []
         }
     {offset
       cg8VD: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fShowProduct_$cshow_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5v0_info" {
     sat_sg5v0_info:
         const sat_sg5v0_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+176;
 },
 sat_sg5uZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8VL: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fShowProduct_$cshowsPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5uZ_info" {
     sat_sg5uZ_info:
         const sat_sg5uZ_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sg5Oh_srt+160;
 },
 Data.Functor.Product.$fShowProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg8VP: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cg8VT; else goto cg8VS;
       cg8VT: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8VS: // global
           I64[Hp - 120] = sat_sg5v1_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sg5v0_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sg5uZ_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_info" {
     Data.Functor.Product.$fShowProduct_info:
         const Data.Functor.Product.$fShowProduct_entry;
         const 0;
         const 124554051598;
         const 12884901911;
         const Sg5Oh_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.310122034 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_$cfmap_closure" {
     Data.Functor.Product.$fFunctorProduct_$cfmap_closure:
         const Data.Functor.Product.$fFunctorProduct_$cfmap_info;
 },
 sat_sg5va_entry() //  [R1]
         { []
         }
     {offset
       cg8Wo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Wp; else goto cg8Wq;
       cg8Wp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Wq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5va_info" {
     sat_sg5va_info:
         const sat_sg5va_entry;
         const 3;
         const 15;
 },
 sat_sg5v9_entry() //  [R1]
         { []
         }
     {offset
       cg8Wv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Ww; else goto cg8Wx;
       cg8Ww: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Wx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5v9_info" {
     sat_sg5v9_info:
         const sat_sg5v9_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fFunctorProduct_$cfmap_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cg8Wy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg8WA; else goto cg8WB;
       cg8WA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_$cfmap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8WB: // global
           I64[Sp - 32] = block_cg8Wf_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug8WF; else goto cg8Wg;
       ug8WF: // global
           call _cg8Wf(R1) args: 0, res: 0, upd: 0;
       cg8Wg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_$cfmap_info" {
     Data.Functor.Product.$fFunctorProduct_$cfmap_info:
         const Data.Functor.Product.$fFunctorProduct_$cfmap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg8Wf() //  [R1]
         { []
         }
     {offset
       cg8Wf: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg8WE; else goto cg8WD;
       cg8WE: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8WD: // global
           _sg5v7::P64 = P64[R1 + 7];
           _sg5v8::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5va_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sg5v4::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sg5v4::P64;
           P64[Hp - 64] = _sg5v8::P64;
           I64[Hp - 56] = sat_sg5v9_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sg5v4::P64;
           P64[Hp - 24] = _sg5v7::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8Wf_info" {
     block_cg8Wf_info:
         const _cg8Wf;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.321781566 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_$c<$_closure" {
     Data.Functor.Product.$fFunctorProduct_$c<$_closure:
         const Data.Functor.Product.$fFunctorProduct_$c<$_info;
 },
 f1_sg5vi_entry() //  [R1]
         { []
         }
     {offset
       cg8Xk: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sg5vi_info" {
     f1_sg5vi_info:
         const f1_sg5vi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg5vl_entry() //  [R1]
         { []
         }
     {offset
       cg8Xr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Xs; else goto cg8Xt;
       cg8Xs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Xt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vl_info" {
     sat_sg5vl_info:
         const sat_sg5vl_entry;
         const 3;
         const 15;
 },
 sat_sg5vk_entry() //  [R1]
         { []
         }
     {offset
       cg8Xy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8Xz; else goto cg8XA;
       cg8Xz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8XA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vk_info" {
     sat_sg5vk_info:
         const sat_sg5vk_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fFunctorProduct_$c<$_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cg8XB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg8XD; else goto cg8XE;
       cg8XD: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_$c<$_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8XE: // global
           I64[Sp - 32] = block_cg8Xa_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug8XI; else goto cg8Xb;
       ug8XI: // global
           call _cg8Xa(R1) args: 0, res: 0, upd: 0;
       cg8Xb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_$c<$_info" {
     Data.Functor.Product.$fFunctorProduct_$c<$_info:
         const Data.Functor.Product.$fFunctorProduct_$c<$_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg8Xa() //  [R1]
         { []
         }
     {offset
       cg8Xa: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cg8XH; else goto cg8XG;
       cg8XH: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg8XG: // global
           _sg5vg::P64 = P64[R1 + 7];
           _sg5vh::P64 = P64[R1 + 15];
           I64[Hp - 112] = f1_sg5vi_info;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_sg5vl_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _sg5vh::P64;
           _cg8Xf::P64 = Hp - 111;
           P64[Hp - 64] = _cg8Xf::P64;
           I64[Hp - 56] = sat_sg5vk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sg5vg::P64;
           P64[Hp - 24] = _cg8Xf::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8Xa_info" {
     block_cg8Xa_info:
         const _cg8Xa;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.334336873 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_closure" {
     Data.Functor.Product.$fFunctorProduct_closure:
         const Data.Functor.Product.$fFunctorProduct_info;
 },
 sat_sg5vp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Ym: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFunctorProduct_$c<$_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5vp_info" {
     sat_sg5vp_info:
         const sat_sg5vp_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5vo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg8Yu: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFunctorProduct_$cfmap_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5vo_info" {
     sat_sg5vo_info:
         const sat_sg5vo_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Product.$fFunctorProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg8Yy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg8YC; else goto cg8YB;
       cg8YC: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8YB: // global
           I64[Hp - 64] = sat_sg5vp_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg5vo_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_info" {
     Data.Functor.Product.$fFunctorProduct_info:
         const Data.Functor.Product.$fFunctorProduct_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.342633625 UTC

[section ""data" . Data.Functor.Product.$w$cfoldMap_closure" {
     Data.Functor.Product.$w$cfoldMap_closure:
         const Data.Functor.Product.$w$cfoldMap_info;
 },
 sat_sg5vx_entry() //  [R1]
         { []
         }
     {offset
       cg8YY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8YZ; else goto cg8Z0;
       cg8YZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Z0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vx_info" {
     sat_sg5vx_info:
         const sat_sg5vx_entry;
         const 4;
         const 15;
 },
 sat_sg5vw_entry() //  [R1]
         { []
         }
     {offset
       cg8Z5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg8Z6; else goto cg8Z7;
       cg8Z6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg8Z7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vw_info" {
     sat_sg5vw_info:
         const sat_sg5vw_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$cfoldMap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg8Z8: // global
           _sg5vu::P64 = R6;
           _sg5vt::P64 = R5;
           _sg5vs::P64 = R4;
           _sg5vr::P64 = R3;
           _sg5vq::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cg8Z9; else goto cg8Za;
       cg8Za: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cg8Zc; else goto cg8Zb;
       cg8Zc: // global
           HpAlloc = 96;
           goto cg8Z9;
       cg8Z9: // global
           R6 = _sg5vu::P64;
           R5 = _sg5vt::P64;
           R4 = _sg5vs::P64;
           R3 = _sg5vr::P64;
           R2 = _sg5vq::P64;
           R1 = Data.Functor.Product.$w$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg8Zb: // global
           I64[Hp - 88] = sat_sg5vx_info;
           P64[Hp - 72] = _sg5vr::P64;
           P64[Hp - 64] = _sg5vs::P64;
           P64[Hp - 56] = _sg5vt::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sg5vw_info;
           P64[Hp - 24] = _sg5vq::P64;
           P64[Hp - 16] = _sg5vs::P64;
           P64[Hp - 8] = _sg5vt::P64;
           P64[Hp] = _sg5vu::P64;
           R2 = _sg5vs::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldMap_info" {
     Data.Functor.Product.$w$cfoldMap_info:
         const Data.Functor.Product.$w$cfoldMap_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.351386921 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldMap_info;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cg8ZG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg8ZH; else goto cg8ZI;
       cg8ZH: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg8ZI: // global
           I64[Sp - 40] = block_cg8ZD_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug8ZM; else goto cg8ZE;
       ug8ZM: // global
           call _cg8ZD(R1) args: 0, res: 0, upd: 0;
       cg8ZE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldMap_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldMap_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg8ZD() //  [R1]
         { []
         }
     {offset
       cg8ZD: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldMap_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg8ZD_info" {
     block_cg8ZD_info:
         const _cg8ZD;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.358608255 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfold_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfold_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfold_info;
 },
 Data.Functor.Product.$fFoldableProduct_$cfold_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cg904: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg905; else goto cg906;
       cg905: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg906: // global
           I64[Sp - 32] = block_cg901_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug90a; else goto cg902;
       ug90a: // global
           call _cg901(R1) args: 0, res: 0, upd: 0;
       cg902: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfold_info" {
     Data.Functor.Product.$fFoldableProduct_$cfold_info:
         const Data.Functor.Product.$fFoldableProduct_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg901() //  [R1]
         { []
         }
     {offset
       cg901: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cfoldMap_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg901_info" {
     block_cg901_info:
         const _cg901;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.363990734 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct1_closure" {
     Data.Functor.Product.$fFoldableProduct1_closure:
         const Data.Functor.Product.$fFoldableProduct1_info;
 },
 Data.Functor.Product.$fFoldableProduct1_entry() //  [R2]
         { []
         }
     {offset
       cg90p: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct1_info" {
     Data.Functor.Product.$fFoldableProduct1_info:
         const Data.Functor.Product.$fFoldableProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.370572941 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$csum_closure" {
     Data.Functor.Product.$fFoldableProduct_$csum_closure:
         const Data.Functor.Product.$fFoldableProduct_$csum_info;
         const 0;
 },
 $dMonoid_sg5vR_entry() //  [R1]
         { []
         }
     {offset
       cg90E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg90F; else goto cg90G;
       cg90F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg90G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg5vR_info" {
     $dMonoid_sg5vR_info:
         const $dMonoid_sg5vR_entry;
         const 1;
         const 4294967312;
         const Sg5Oh_srt+200;
 },
 sat_sg5vX_entry() //  [R1]
         { []
         }
     {offset
       cg90V: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg90W; else goto cg90X;
       cg90W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg90X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vX_info" {
     sat_sg5vX_info:
         const sat_sg5vX_entry;
         const 3;
         const 15;
 },
 sat_sg5vW_entry() //  [R1]
         { []
         }
     {offset
       cg912: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg913; else goto cg914;
       cg913: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg914: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5vW_info" {
     sat_sg5vW_info:
         const sat_sg5vW_entry;
         const 3;
         const 15;
 },
 sat_sg5vY_entry() //  [R1, R2]
         { []
         }
     {offset
       cg915: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg916; else goto cg917;
       cg916: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg917: // global
           I64[Sp - 40] = block_cg90M_info;
           _sg5vO::P64 = P64[R1 + 7];
           _sg5vP::P64 = P64[R1 + 15];
           _sg5vQ::P64 = P64[R1 + 23];
           _sg5vR::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5vO::P64;
           P64[Sp - 24] = _sg5vP::P64;
           P64[Sp - 16] = _sg5vQ::P64;
           P64[Sp - 8] = _sg5vR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug91b; else goto cg90N;
       ug91b: // global
           call _cg90M(R1) args: 0, res: 0, upd: 0;
       cg90N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5vY_info" {
     sat_sg5vY_info:
         const sat_sg5vY_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg90M() //  [R1]
         { []
         }
     {offset
       cg90M: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg91a; else goto cg919;
       cg91a: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg919: // global
           _sg5vU::P64 = P64[R1 + 7];
           _sg5vV::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sg5vX_info;
           P64[Hp - 56] = P64[Sp + 16];
           _sg5vR::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sg5vR::P64;
           P64[Hp - 40] = _sg5vV::P64;
           I64[Hp - 32] = sat_sg5vW_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sg5vR::P64;
           P64[Hp] = _sg5vU::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg90M_info" {
     block_cg90M_info:
         const _cg90M;
         const 4;
         const 30;
 },
 Data.Functor.Product.$fFoldableProduct_$csum_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cg91c: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg91g; else goto cg91f;
       cg91g: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg91f: // global
           I64[Hp - 56] = $dMonoid_sg5vR_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg5vY_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$csum_info" {
     Data.Functor.Product.$fFoldableProduct_$csum_info:
         const Data.Functor.Product.$fFoldableProduct_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg5Oh_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.384161339 UTC

[section ""cstring" . lvl_rg5nW_bytes" {
     lvl_rg5nW_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.386841832 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct2_closure" {
     Data.Functor.Product.$fFoldableProduct2_closure:
         const Data.Functor.Product.$fFoldableProduct2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct2_entry() //  [R1]
         { []
         }
     {offset
       cg91Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg91Z; else goto cg920;
       cg91Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg920: // global
           (_cg91T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg91T::I64 == 0) goto cg91V; else goto cg91U;
       cg91V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg91U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg91T::I64;
           I64[Sp - 24] = block_cg91W_info;
           R2 = lvl_rg5nW_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct2_info" {
     Data.Functor.Product.$fFoldableProduct2_info:
         const Data.Functor.Product.$fFoldableProduct2_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+216;
 },
 _cg91W() //  [R1]
         { []
         }
     {offset
       cg91W: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg91W_info" {
     block_cg91W_info:
         const _cg91W;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.396062255 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cminimum_closure" {
     Data.Functor.Product.$fFoldableProduct_$cminimum_closure:
         const Data.Functor.Product.$fFoldableProduct_$cminimum_info;
         const 0;
 },
 $dMonoid_sg5w3_entry() //  [R1]
         { []
         }
     {offset
       cg92m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg92n; else goto cg92o;
       cg92n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg92o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg5w3_info" {
     $dMonoid_sg5w3_info:
         const $dMonoid_sg5w3_entry;
         const 1;
         const 4294967312;
         const Sg5Oh_srt+224;
 },
 sat_sg5wf_entry() //  [R1, R2]
         { []
         }
     {offset
       cg92x: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cg92y; else goto cg92z;
       cg92y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg92z: // global
           I64[Sp - 40] = block_cg92u_info;
           _sg5w0::P64 = P64[R1 + 7];
           _sg5w1::P64 = P64[R1 + 15];
           _sg5w2::P64 = P64[R1 + 23];
           _sg5w3::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5w0::P64;
           P64[Sp - 24] = _sg5w1::P64;
           P64[Sp - 16] = _sg5w2::P64;
           P64[Sp - 8] = _sg5w3::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug93r; else goto cg92v;
       ug93r: // global
           call _cg92u(R1) args: 0, res: 0, upd: 0;
       cg92v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5wf_info" {
     sat_sg5wf_info:
         const sat_sg5wf_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+232;
 },
 _cg92u() //  [R1]
         { []
         }
     {offset
       cg92u: // global
           I64[Sp] = block_cg92C_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg92u_info" {
     block_cg92u_info:
         const _cg92u;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+232;
 },
 _cg92C() //  [R1]
         { []
         }
     {offset
       cg92C: // global
           _sg5w0::P64 = P64[Sp + 8];
           _sg5w3::P64 = P64[Sp + 32];
           _sg5w6::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg92K; else goto cg92Z;
       cg92K: // global
           I64[Sp + 32] = block_cg92H_info;
           R2 = _sg5w0::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg5w3::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _sg5w6::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg92Z: // global
           I64[Sp + 16] = block_cg92X_info;
           R2 = _sg5w0::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _sg5w3::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _sg5w6::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg92C_info" {
     block_cg92C_info:
         const _cg92C;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+232;
 },
 _cg92H() //  [R1]
         { []
         }
     {offset
       cg92H: // global
           if (R1 & 7 == 1) goto cg92Q; else goto cg92U;
       cg92Q: // global
           R1 = Data.Functor.Product.$fFoldableProduct2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg92U: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg92H_info" {
     block_cg92H_info:
         const _cg92H;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+232;
 },
 _cg92X() //  [R1]
         { []
         }
     {offset
       cg92X: // global
           if (R1 & 7 == 1) goto ug93p; else goto cg93a;
       ug93p: // global
           Sp = Sp + 16;
           call _cg93g() args: 0, res: 0, upd: 0;
       cg93a: // global
           I64[Sp] = block_cg938_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _sg5wd::P64 = P64[R1 + 6];
           P64[Sp - 16] = _sg5wd::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _sg5wd::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg92X_info" {
     block_cg92X_info:
         const _cg92X;
         const 2;
         const 30;
 },
 _cg938() //  [R1]
         { []
         }
     {offset
       cg938: // global
           if (R1 & 7 == 1) goto ug93q; else goto cg93k;
       ug93q: // global
           Sp = Sp + 16;
           call _cg93g() args: 0, res: 0, upd: 0;
       cg93k: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg938_info" {
     block_cg938_info:
         const _cg938;
         const 2;
         const 30;
 },
 _cg93g() //  []
         { []
         }
     {offset
       cg93g: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fFoldableProduct_$cminimum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cg93u: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg93y; else goto cg93x;
       cg93y: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg93x: // global
           I64[Hp - 56] = $dMonoid_sg5w3_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg5wf_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cminimum_info" {
     Data.Functor.Product.$fFoldableProduct_$cminimum_info:
         const Data.Functor.Product.$fFoldableProduct_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sg5Oh_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.414712304 UTC

[section ""cstring" . lvl1_rg5nX_bytes" {
     lvl1_rg5nX_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.417381556 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct3_closure" {
     Data.Functor.Product.$fFoldableProduct3_closure:
         const Data.Functor.Product.$fFoldableProduct3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct3_entry() //  [R1]
         { []
         }
     {offset
       cg94r: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg94s; else goto cg94t;
       cg94s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg94t: // global
           (_cg94m::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg94m::I64 == 0) goto cg94o; else goto cg94n;
       cg94o: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg94n: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg94m::I64;
           I64[Sp - 24] = block_cg94p_info;
           R2 = lvl1_rg5nX_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct3_info" {
     Data.Functor.Product.$fFoldableProduct3_info:
         const Data.Functor.Product.$fFoldableProduct3_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+216;
 },
 _cg94p() //  [R1]
         { []
         }
     {offset
       cg94p: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg94p_info" {
     block_cg94p_info:
         const _cg94p;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.42648599 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cmaximum_closure" {
     Data.Functor.Product.$fFoldableProduct_$cmaximum_closure:
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_info;
         const 0;
 },
 $dMonoid_sg5wk_entry() //  [R1]
         { []
         }
     {offset
       cg94P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg94Q; else goto cg94R;
       cg94Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg94R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg5wk_info" {
     $dMonoid_sg5wk_info:
         const $dMonoid_sg5wk_entry;
         const 1;
         const 4294967312;
         const Sg5Oh_srt+248;
 },
 sat_sg5ww_entry() //  [R1, R2]
         { []
         }
     {offset
       cg950: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cg951; else goto cg952;
       cg951: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg952: // global
           I64[Sp - 40] = block_cg94X_info;
           _sg5wh::P64 = P64[R1 + 7];
           _sg5wi::P64 = P64[R1 + 15];
           _sg5wj::P64 = P64[R1 + 23];
           _sg5wk::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5wh::P64;
           P64[Sp - 24] = _sg5wi::P64;
           P64[Sp - 16] = _sg5wj::P64;
           P64[Sp - 8] = _sg5wk::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug95U; else goto cg94Y;
       ug95U: // global
           call _cg94X(R1) args: 0, res: 0, upd: 0;
       cg94Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5ww_info" {
     sat_sg5ww_info:
         const sat_sg5ww_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+256;
 },
 _cg94X() //  [R1]
         { []
         }
     {offset
       cg94X: // global
           I64[Sp] = block_cg955_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg94X_info" {
     block_cg94X_info:
         const _cg94X;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+256;
 },
 _cg955() //  [R1]
         { []
         }
     {offset
       cg955: // global
           _sg5wh::P64 = P64[Sp + 8];
           _sg5wk::P64 = P64[Sp + 32];
           _sg5wn::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg95d; else goto cg95s;
       cg95d: // global
           I64[Sp + 32] = block_cg95a_info;
           R2 = _sg5wh::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sg5wk::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _sg5wn::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cg95s: // global
           I64[Sp + 16] = block_cg95q_info;
           R2 = _sg5wh::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _sg5wk::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _sg5wn::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg955_info" {
     block_cg955_info:
         const _cg955;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+256;
 },
 _cg95a() //  [R1]
         { []
         }
     {offset
       cg95a: // global
           if (R1 & 7 == 1) goto cg95j; else goto cg95n;
       cg95j: // global
           R1 = Data.Functor.Product.$fFoldableProduct3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg95n: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg95a_info" {
     block_cg95a_info:
         const _cg95a;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+256;
 },
 _cg95q() //  [R1]
         { []
         }
     {offset
       cg95q: // global
           if (R1 & 7 == 1) goto ug95S; else goto cg95D;
       ug95S: // global
           Sp = Sp + 16;
           call _cg95J() args: 0, res: 0, upd: 0;
       cg95D: // global
           I64[Sp] = block_cg95B_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _sg5wu::P64 = P64[R1 + 6];
           P64[Sp - 16] = _sg5wu::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _sg5wu::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg95q_info" {
     block_cg95q_info:
         const _cg95q;
         const 2;
         const 30;
 },
 _cg95B() //  [R1]
         { []
         }
     {offset
       cg95B: // global
           if (R1 & 7 == 1) goto ug95T; else goto cg95N;
       ug95T: // global
           Sp = Sp + 16;
           call _cg95J() args: 0, res: 0, upd: 0;
       cg95N: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg95B_info" {
     block_cg95B_info:
         const _cg95B;
         const 2;
         const 30;
 },
 _cg95J() //  []
         { []
         }
     {offset
       cg95J: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fFoldableProduct_$cmaximum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cg95X: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg961; else goto cg960;
       cg961: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg960: // global
           I64[Hp - 56] = $dMonoid_sg5wk_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg5ww_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cmaximum_info" {
     Data.Functor.Product.$fFoldableProduct_$cmaximum_info:
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sg5Oh_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.447600244 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$celem_closure" {
     Data.Functor.Product.$fFoldableProduct_$celem_closure:
         const Data.Functor.Product.$fFoldableProduct_$celem_info;
         const 0;
 },
 f1_sg5wB_entry() //  [R1]
         { []
         }
     {offset
       cg96T: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg96U; else goto cg96V;
       cg96U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg96V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sg5wB_info" {
     f1_sg5wB_info:
         const f1_sg5wB_entry;
         const 2;
         const 18;
 },
 sat_sg5wH_entry() //  [R1, R2]
         { []
         }
     {offset
       cg974: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cg975; else goto cg976;
       cg975: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg976: // global
           I64[Sp - 32] = block_cg971_info;
           _sg5wx::P64 = P64[R1 + 7];
           _sg5wy::P64 = P64[R1 + 15];
           _sg5wB::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sg5wx::P64;
           P64[Sp - 16] = _sg5wy::P64;
           P64[Sp - 8] = _sg5wB::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug97m; else goto cg972;
       ug97m: // global
           call _cg971(R1) args: 0, res: 0, upd: 0;
       cg972: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5wH_info" {
     sat_sg5wH_info:
         const sat_sg5wH_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sg5Oh_srt+272;
 },
 _cg971() //  [R1]
         { []
         }
     {offset
       cg971: // global
           I64[Sp] = block_cg979_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg971_info" {
     block_cg971_info:
         const _cg971;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+272;
 },
 _cg979() //  [R1]
         { []
         }
     {offset
       cg979: // global
           if (R1 & 7 == 1) goto cg97g; else goto cg97k;
       cg97g: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           _sg5wF::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = _sg5wF::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cg97k: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg979_info" {
     block_cg979_info:
         const _cg979;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+272;
 },
 Data.Functor.Product.$fFoldableProduct_$celem_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cg97n: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg97r; else goto cg97q;
       cg97r: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg97q: // global
           I64[Hp - 56] = f1_sg5wB_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_sg5wH_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$celem_info" {
     Data.Functor.Product.$fFoldableProduct_$celem_info:
         const Data.Functor.Product.$fFoldableProduct_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sg5Oh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.459778602 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct8_closure" {
     Data.Functor.Product.$fFoldableProduct8_closure:
         const Data.Functor.Product.$fFoldableProduct8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct8_entry() //  [R1]
         { []
         }
     {offset
       cg981: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg982; else goto cg983;
       cg982: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg983: // global
           (_cg97Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg97Y::I64 == 0) goto cg980; else goto cg97Z;
       cg980: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg97Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg97Y::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct8_info" {
     Data.Functor.Product.$fFoldableProduct8_info:
         const Data.Functor.Product.$fFoldableProduct8_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.465556061 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl_closure" {
     Data.Functor.Product.$w$cfoldl_closure:
         const Data.Functor.Product.$w$cfoldl_info;
         const 0;
 },
 f1_sg5wO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg98k: // global
           _sg5wQ::P64 = R3;
           R3 = R2;
           R2 = _sg5wQ::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sg5wO_info" {
     f1_sg5wO_info:
         const f1_sg5wO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sg5wR_entry() //  [R1]
         { []
         }
     {offset
       cg98r: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg98s; else goto cg98t;
       cg98s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg98t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5wR_info" {
     sat_sg5wR_info:
         const sat_sg5wR_entry;
         const 4;
         const 4294967311;
         const Sg5Oh_srt+296;
 },
 Data.Functor.Product.$w$cfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg98u: // global
           _sg5wM::P64 = R6;
           _sg5wL::P64 = R5;
           _sg5wK::P64 = R4;
           _sg5wJ::P64 = R3;
           _sg5wI::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cg98v; else goto cg98w;
       cg98w: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg98y; else goto cg98x;
       cg98y: // global
           HpAlloc = 64;
           goto cg98v;
       cg98v: // global
           R6 = _sg5wM::P64;
           R5 = _sg5wL::P64;
           R4 = _sg5wK::P64;
           R3 = _sg5wJ::P64;
           R2 = _sg5wI::P64;
           R1 = Data.Functor.Product.$w$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg98x: // global
           I64[Hp - 56] = f1_sg5wO_info;
           P64[Hp - 48] = _sg5wK::P64;
           I64[Hp - 40] = sat_sg5wR_info;
           P64[Hp - 24] = _sg5wI::P64;
           P64[Hp - 16] = _sg5wL::P64;
           P64[Hp - 8] = _sg5wM::P64;
           _cg98f::P64 = Hp - 54;
           P64[Hp] = _cg98f::P64;
           R2 = _sg5wJ::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 16] = _cg98f::P64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl_info" {
     Data.Functor.Product.$w$cfoldl_info:
         const Data.Functor.Product.$w$cfoldl_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sg5Oh_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.475365287 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cg98X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg98Y; else goto cg98Z;
       cg98Y: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg98Z: // global
           I64[Sp - 40] = block_cg98U_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug993; else goto cg98V;
       ug993: // global
           call _cg98U(R1) args: 0, res: 0, upd: 0;
       cg98V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg5Oh_srt+304;
 },
 _cg98U() //  [R1]
         { []
         }
     {offset
       cg98U: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg98U_info" {
     block_cg98U_info:
         const _cg98U;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.480838416 UTC

[section ""cstring" . lvl2_rg5nY_bytes" {
     lvl2_rg5nY_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.483542117 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct7_closure" {
     Data.Functor.Product.$fFoldableProduct7_closure:
         const Data.Functor.Product.$fFoldableProduct7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct7_entry() //  [R1]
         { []
         }
     {offset
       cg99n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg99o; else goto cg99p;
       cg99o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg99p: // global
           (_cg99i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg99i::I64 == 0) goto cg99k; else goto cg99j;
       cg99k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg99j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg99i::I64;
           I64[Sp - 24] = block_cg99l_info;
           R2 = lvl2_rg5nY_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct7_info" {
     Data.Functor.Product.$fFoldableProduct7_info:
         const Data.Functor.Product.$fFoldableProduct7_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+216;
 },
 _cg99l() //  [R1]
         { []
         }
     {offset
       cg99l: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg99l_info" {
     block_cg99l_info:
         const _cg99l;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.492098758 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl1_closure" {
     Data.Functor.Product.$w$cfoldl1_closure:
         const Data.Functor.Product.$w$cfoldl1_info;
         const 0;
 },
 sat_sg5xb_entry() //  [R1]
         { []
         }
     {offset
       cg99X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg99Y; else goto cg99Z;
       cg99Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg99Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg99Q_info;
           _sg5x3::P64 = P64[R1 + 16];
           _sg5x7::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sg5x3::P64;
           P64[Sp - 24] = _sg5x7::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9a6; else goto cg99R;
       ug9a6: // global
           call _cg99Q(R1) args: 0, res: 0, upd: 0;
       cg99R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5xb_info" {
     sat_sg5xb_info:
         const sat_sg5xb_entry;
         const 3;
         const 15;
 },
 _cg99Q() //  [R1]
         { []
         }
     {offset
       cg99Q: // global
           _sg5x7::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg99U; else goto cg99V;
       cg99U: // global
           R1 = _sg5x7::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg99V: // global
           R3 = _sg5x7::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg99Q_info" {
     block_cg99Q_info:
         const _cg99Q;
         const 2;
         const 30;
 },
 f1_sg5x6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9a8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9ac; else goto cg9ab;
       cg9ac: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9ab: // global
           _sg5x3::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sg5xb_info;
           P64[Hp - 32] = _sg5x3::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sg5x6_info" {
     f1_sg5x6_info:
         const f1_sg5x6_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sg5xc_entry() //  [R1]
         { []
         }
     {offset
       cg9ah: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9ai; else goto cg9aj;
       cg9ai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9aj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5xc_info" {
     sat_sg5xc_info:
         const sat_sg5xc_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+296;
 },
 Data.Functor.Product.$w$cfoldl1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9aq: // global
           _sg5x5::P64 = R6;
           _sg5x4::P64 = R5;
           _sg5x3::P64 = R4;
           _sg5x2::P64 = R3;
           _sg5x1::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cg9ar; else goto cg9as;
       cg9as: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9au; else goto cg9at;
       cg9au: // global
           HpAlloc = 56;
           goto cg9ar;
       cg9ar: // global
           R6 = _sg5x5::P64;
           R5 = _sg5x4::P64;
           R4 = _sg5x3::P64;
           R3 = _sg5x2::P64;
           R2 = _sg5x1::P64;
           R1 = Data.Functor.Product.$w$cfoldl1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9at: // global
           I64[Hp - 48] = f1_sg5x6_info;
           P64[Hp - 40] = _sg5x3::P64;
           I64[Hp - 32] = sat_sg5xc_info;
           P64[Hp - 16] = _sg5x1::P64;
           P64[Hp - 8] = _sg5x4::P64;
           _cg99H::P64 = Hp - 46;
           P64[Hp] = _cg99H::P64;
           I64[Sp - 8] = block_cg9ak_info;
           R2 = _sg5x2::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 32] = _cg99H::P64;
           P64[Sp - 24] = _sg5x5::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl1_info" {
     Data.Functor.Product.$w$cfoldl1_info:
         const Data.Functor.Product.$w$cfoldl1_entry;
         const 0;
         const 107374182414;
         const 21474836505;
         const Sg5Oh_srt+296;
 },
 _cg9ak() //  [R1]
         { []
         }
     {offset
       cg9ak: // global
           if (R1 & 7 == 1) goto cg9an; else goto cg9ao;
       cg9an: // global
           R1 = Data.Functor.Product.$fFoldableProduct7_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg9ao: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9ak_info" {
     block_cg9ak_info:
         const _cg9ak;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.507477534 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cg9be: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9bf; else goto cg9bg;
       cg9bf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9bg: // global
           I64[Sp - 32] = block_cg9bb_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9bk; else goto cg9bc;
       ug9bk: // global
           call _cg9bb(R1) args: 0, res: 0, upd: 0;
       cg9bc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl1_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl1_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const Sg5Oh_srt+320;
 },
 _cg9bb() //  [R1]
         { []
         }
     {offset
       cg9bb: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9bb_info" {
     block_cg9bb_info:
         const _cg9bb;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.515160721 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr'_closure" {
     Data.Functor.Product.$w$cfoldr'_closure:
         const Data.Functor.Product.$w$cfoldr'_info;
         const 0;
 },
 f1_sg5xs_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9bF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9bG; else goto cg9bH;
       cg9bG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9bH: // global
           I64[Sp - 16] = block_cg9bD_info;
           _sg5xu::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sg5xu::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_sg5xs_info" {
     f1_sg5xs_info:
         const f1_sg5xs_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg9bD() //  [R1]
         { []
         }
     {offset
       cg9bD: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9bD_info" {
     block_cg9bD_info:
         const _cg9bD;
         const 1;
         const 30;
 },
 sat_sg5xx_entry() //  [R1]
         { []
         }
     {offset
       cg9bN: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9bO; else goto cg9bP;
       cg9bO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9bP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5xx_info" {
     sat_sg5xx_info:
         const sat_sg5xx_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+296;
 },
 Data.Functor.Product.$w$cfoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9bQ: // global
           _sg5xq::P64 = R6;
           _sg5xp::P64 = R5;
           _sg5xo::P64 = R4;
           _sg5xn::P64 = R3;
           _sg5xm::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9bR; else goto cg9bS;
       cg9bS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9bU; else goto cg9bT;
       cg9bU: // global
           HpAlloc = 56;
           goto cg9bR;
       cg9bR: // global
           R6 = _sg5xq::P64;
           R5 = _sg5xp::P64;
           R4 = _sg5xo::P64;
           R3 = _sg5xn::P64;
           R2 = _sg5xm::P64;
           R1 = Data.Functor.Product.$w$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg9bT: // global
           I64[Hp - 48] = f1_sg5xs_info;
           P64[Hp - 40] = _sg5xo::P64;
           I64[Hp - 32] = sat_sg5xx_info;
           P64[Hp - 16] = _sg5xm::P64;
           P64[Hp - 8] = _sg5xq::P64;
           _cg9by::P64 = Hp - 45;
           P64[Hp] = _cg9by::P64;
           R2 = _sg5xn::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 24] = _cg9by::P64;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _sg5xp::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr'_info" {
     Data.Functor.Product.$w$cfoldr'_info:
         const Data.Functor.Product.$w$cfoldr'_entry;
         const 0;
         const 279172874254;
         const 25769803802;
         const Sg5Oh_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.525956081 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cg9cm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9cn; else goto cg9co;
       cg9cn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9co: // global
           I64[Sp - 40] = block_cg9cj_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9cs; else goto cg9ck;
       ug9cs: // global
           call _cg9cj(R1) args: 0, res: 0, upd: 0;
       cg9ck: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr'_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr'_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg5Oh_srt+344;
 },
 _cg9cj() //  [R1]
         { []
         }
     {offset
       cg9cj: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9cj_info" {
     block_cg9cj_info:
         const _cg9cj;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.533768347 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr_closure" {
     Data.Functor.Product.$w$cfoldr_closure:
         const Data.Functor.Product.$w$cfoldr_info;
         const 0;
 },
 sat_sg5xM_entry() //  [R1]
         { []
         }
     {offset
       cg9cL: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9cM; else goto cg9cN;
       cg9cM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9cN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5xM_info" {
     sat_sg5xM_info:
         const sat_sg5xM_entry;
         const 4;
         const 4294967311;
         const Sg5Oh_srt+288;
 },
 Data.Functor.Product.$w$cfoldr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9cO: // global
           _sg5xK::P64 = R6;
           _sg5xJ::P64 = R5;
           _sg5xI::P64 = R4;
           _sg5xH::P64 = R3;
           _sg5xG::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cg9cP; else goto cg9cQ;
       cg9cQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9cS; else goto cg9cR;
       cg9cS: // global
           HpAlloc = 48;
           goto cg9cP;
       cg9cP: // global
           R6 = _sg5xK::P64;
           R5 = _sg5xJ::P64;
           R4 = _sg5xI::P64;
           R3 = _sg5xH::P64;
           R2 = _sg5xG::P64;
           R1 = Data.Functor.Product.$w$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg9cR: // global
           I64[Hp - 40] = sat_sg5xM_info;
           P64[Hp - 24] = _sg5xH::P64;
           P64[Hp - 16] = _sg5xI::P64;
           P64[Hp - 8] = _sg5xJ::P64;
           P64[Hp] = P64[Sp];
           R2 = _sg5xG::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 16] = _sg5xI::P64;
           P64[Sp - 8] = _sg5xK::P64;
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr_info" {
     Data.Functor.Product.$w$cfoldr_info:
         const Data.Functor.Product.$w$cfoldr_entry;
         const 0;
         const 2203318222862;
         const 25769803802;
         const Sg5Oh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.540860372 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cg9de: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9df; else goto cg9dg;
       cg9df: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9dg: // global
           I64[Sp - 40] = block_cg9db_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9dk; else goto cg9dc;
       ug9dk: // global
           call _cg9db(R1) args: 0, res: 0, upd: 0;
       cg9dc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg5Oh_srt+360;
 },
 _cg9db() //  [R1]
         { []
         }
     {offset
       cg9db: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9db_info" {
     block_cg9db_info:
         const _cg9db;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.549339349 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl'_closure" {
     Data.Functor.Product.$w$cfoldl'_closure:
         const Data.Functor.Product.$w$cfoldl'_info;
         const 0;
 },
 f1_sg5y1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9dG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9dH; else goto cg9dI;
       cg9dH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9dI: // global
           I64[Sp - 16] = block_cg9dE_info;
           _sg5y3::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sg5y3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_sg5y1_info" {
     f1_sg5y1_info:
         const f1_sg5y1_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cg9dE() //  [R1]
         { []
         }
     {offset
       cg9dE: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9dE_info" {
     block_cg9dE_info:
         const _cg9dE;
         const 1;
         const 30;
 },
 sat_sg5y6_entry() //  [R1]
         { []
         }
     {offset
       cg9dO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9dP; else goto cg9dQ;
       cg9dP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9dQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5y6_info" {
     sat_sg5y6_info:
         const sat_sg5y6_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+288;
 },
 Data.Functor.Product.$w$cfoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9dR: // global
           _sg5xZ::P64 = R6;
           _sg5xY::P64 = R5;
           _sg5xX::P64 = R4;
           _sg5xW::P64 = R3;
           _sg5xV::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9dS; else goto cg9dT;
       cg9dT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9dV; else goto cg9dU;
       cg9dV: // global
           HpAlloc = 56;
           goto cg9dS;
       cg9dS: // global
           R6 = _sg5xZ::P64;
           R5 = _sg5xY::P64;
           R4 = _sg5xX::P64;
           R3 = _sg5xW::P64;
           R2 = _sg5xV::P64;
           R1 = Data.Functor.Product.$w$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg9dU: // global
           I64[Hp - 48] = f1_sg5y1_info;
           P64[Hp - 40] = _sg5xX::P64;
           I64[Hp - 32] = sat_sg5y6_info;
           P64[Hp - 16] = _sg5xW::P64;
           P64[Hp - 8] = P64[Sp];
           _cg9dz::P64 = Hp - 45;
           P64[Hp] = _cg9dz::P64;
           R2 = _sg5xV::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = _cg9dz::P64;
           P64[Sp - 16] = _sg5xZ::P64;
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _sg5xY::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl'_info" {
     Data.Functor.Product.$w$cfoldl'_info:
         const Data.Functor.Product.$w$cfoldl'_entry;
         const 0;
         const 8800387989518;
         const 25769803802;
         const Sg5Oh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.559927208 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cg9en: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9eo; else goto cg9ep;
       cg9eo: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9ep: // global
           I64[Sp - 40] = block_cg9ek_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9et; else goto cg9el;
       ug9et: // global
           call _cg9ek(R1) args: 0, res: 0, upd: 0;
       cg9el: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl'_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl'_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sg5Oh_srt+376;
 },
 _cg9ek() //  [R1]
         { []
         }
     {offset
       cg9ek: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9ek_info" {
     block_cg9ek_info:
         const _cg9ek;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.567688577 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct5_closure" {
     Data.Functor.Product.$fFoldableProduct5_closure:
         const Data.Functor.Product.$fFoldableProduct5_info;
 },
 Data.Functor.Product.$fFoldableProduct5_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9eL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9eS; else goto cg9eT;
       cg9eS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9eT: // global
           I64[Sp - 8] = block_cg9eI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9eX; else goto cg9eJ;
       ug9eX: // global
           call _cg9eI(R1) args: 0, res: 0, upd: 0;
       cg9eJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct5_info" {
     Data.Functor.Product.$fFoldableProduct5_info:
         const Data.Functor.Product.$fFoldableProduct5_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cg9eI() //  [R1]
         { []
         }
     {offset
       cg9eI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9eW; else goto cg9eV;
       cg9eW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9eV: // global
           _sg5yj::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sg5yj::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9eI_info" {
     block_cg9eI_info:
         const _cg9eI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.574132206 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$clength_closure" {
     Data.Functor.Product.$fFoldableProduct_$clength_closure:
         const Data.Functor.Product.$fFoldableProduct_$clength_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$clength_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cg9fg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg9fh; else goto cg9fi;
       cg9fh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9fi: // global
           I64[Sp - 24] = block_cg9fd_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug9fm; else goto cg9fe;
       ug9fm: // global
           call _cg9fd(R1) args: 0, res: 0, upd: 0;
       cg9fe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$clength_info" {
     Data.Functor.Product.$fFoldableProduct_$clength_info:
         const Data.Functor.Product.$fFoldableProduct_$clength_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const Sg5Oh_srt+376;
 },
 _cg9fd() //  [R1]
         { []
         }
     {offset
       cg9fd: // global
           R6 = P64[R1 + 7];
           R5 = Data.Functor.Product.$fFoldableProduct4_closure+1;
           R4 = Data.Functor.Product.$fFoldableProduct5_closure+2;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 15];
           Sp = Sp + 16;
           call Data.Functor.Product.$w$cfoldl'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9fd_info" {
     block_cg9fd_info:
         const _cg9fd;
         const 2;
         const 4294967326;
         const Sg5Oh_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.579582989 UTC

[section ""cstring" . lvl3_rg5nZ_bytes" {
     lvl3_rg5nZ_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.58233571 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct9_closure" {
     Data.Functor.Product.$fFoldableProduct9_closure:
         const Data.Functor.Product.$fFoldableProduct9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct9_entry() //  [R1]
         { []
         }
     {offset
       cg9fG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cg9fH; else goto cg9fI;
       cg9fH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9fI: // global
           (_cg9fB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg9fB::I64 == 0) goto cg9fD; else goto cg9fC;
       cg9fD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg9fC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg9fB::I64;
           I64[Sp - 24] = block_cg9fE_info;
           R2 = lvl3_rg5nZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct9_info" {
     Data.Functor.Product.$fFoldableProduct9_info:
         const Data.Functor.Product.$fFoldableProduct9_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+216;
 },
 _cg9fE() //  [R1]
         { []
         }
     {offset
       cg9fE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9fE_info" {
     block_cg9fE_info:
         const _cg9fE;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.591690873 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr1_closure" {
     Data.Functor.Product.$w$cfoldr1_closure:
         const Data.Functor.Product.$w$cfoldr1_info;
         const 0;
 },
 sat_sg5yB_entry() //  [R1]
         { []
         }
     {offset
       cg9gg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9gh; else goto cg9gi;
       cg9gh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9gi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg9g9_info;
           _sg5yt::P64 = P64[R1 + 16];
           _sg5yx::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sg5yt::P64;
           P64[Sp - 24] = _sg5yx::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9gp; else goto cg9ga;
       ug9gp: // global
           call _cg9g9(R1) args: 0, res: 0, upd: 0;
       cg9ga: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5yB_info" {
     sat_sg5yB_info:
         const sat_sg5yB_entry;
         const 3;
         const 15;
 },
 _cg9g9() //  [R1]
         { []
         }
     {offset
       cg9g9: // global
           _sg5yx::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cg9gd; else goto cg9ge;
       cg9gd: // global
           R1 = _sg5yx::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cg9ge: // global
           R3 = P64[R1 + 6];
           R2 = _sg5yx::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9g9_info" {
     block_cg9g9_info:
         const _cg9g9;
         const 2;
         const 30;
 },
 w3_sg5yw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9gr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9gv; else goto cg9gu;
       cg9gv: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9gu: // global
           _sg5yt::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sg5yB_info;
           P64[Hp - 32] = _sg5yt::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w3_sg5yw_info" {
     w3_sg5yw_info:
         const w3_sg5yw_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sg5yC_entry() //  [R1]
         { []
         }
     {offset
       cg9gA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9gB; else goto cg9gC;
       cg9gB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9gC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5yC_info" {
     sat_sg5yC_info:
         const sat_sg5yC_entry;
         const 3;
         const 4294967311;
         const Sg5Oh_srt+288;
 },
 Data.Functor.Product.$w$cfoldr1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9gJ: // global
           _sg5yv::P64 = R6;
           _sg5yu::P64 = R5;
           _sg5yt::P64 = R4;
           _sg5ys::P64 = R3;
           _sg5yr::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cg9gK; else goto cg9gL;
       cg9gL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cg9gN; else goto cg9gM;
       cg9gN: // global
           HpAlloc = 56;
           goto cg9gK;
       cg9gK: // global
           R6 = _sg5yv::P64;
           R5 = _sg5yu::P64;
           R4 = _sg5yt::P64;
           R3 = _sg5ys::P64;
           R2 = _sg5yr::P64;
           R1 = Data.Functor.Product.$w$cfoldr1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9gM: // global
           I64[Hp - 48] = w3_sg5yw_info;
           P64[Hp - 40] = _sg5yt::P64;
           I64[Hp - 32] = sat_sg5yC_info;
           P64[Hp - 16] = _sg5ys::P64;
           P64[Hp - 8] = _sg5yv::P64;
           _cg9g0::P64 = Hp - 46;
           P64[Hp] = _cg9g0::P64;
           I64[Sp - 8] = block_cg9gD_info;
           R2 = _sg5yr::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = _cg9g0::P64;
           P64[Sp - 24] = _sg5yu::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr1_info" {
     Data.Functor.Product.$w$cfoldr1_info:
         const Data.Functor.Product.$w$cfoldr1_entry;
         const 0;
         const 211110527500302;
         const 21474836505;
         const Sg5Oh_srt+288;
 },
 _cg9gD() //  [R1]
         { []
         }
     {offset
       cg9gD: // global
           if (R1 & 7 == 1) goto cg9gG; else goto cg9gH;
       cg9gG: // global
           R1 = Data.Functor.Product.$fFoldableProduct9_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cg9gH: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9gD_info" {
     block_cg9gD_info:
         const _cg9gD;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.606497147 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cg9hx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9hy; else goto cg9hz;
       cg9hy: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9hz: // global
           I64[Sp - 32] = block_cg9hu_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9hD; else goto cg9hv;
       ug9hD: // global
           call _cg9hu(R1) args: 0, res: 0, upd: 0;
       cg9hv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr1_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr1_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const Sg5Oh_srt+400;
 },
 _cg9hu() //  [R1]
         { []
         }
     {offset
       cg9hu: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9hu_info" {
     block_cg9hu_info:
         const _cg9hu;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.612507475 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct6_closure" {
     Data.Functor.Product.$fFoldableProduct6_closure:
         const Data.Functor.Product.$fFoldableProduct6_info;
 },
 Data.Functor.Product.$fFoldableProduct6_entry() //  []
         { []
         }
     {offset
       cg9hR: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct6_info" {
     Data.Functor.Product.$fFoldableProduct6_info:
         const Data.Functor.Product.$fFoldableProduct6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.620062109 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cnull_closure" {
     Data.Functor.Product.$fFoldableProduct_$cnull_closure:
         const Data.Functor.Product.$fFoldableProduct_$cnull_info;
         const 0;
 },
 sat_sg5yU_entry() //  [R1]
         { []
         }
     {offset
       cg9ic: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9id; else goto cg9ie;
       cg9id: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ie: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = Data.Functor.Product.$fFoldableProduct6_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.True_closure+2;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5yU_info" {
     sat_sg5yU_info:
         const sat_sg5yU_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+288;
 },
 Data.Functor.Product.$fFoldableProduct_$cnull_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cg9if: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9ig; else goto cg9ih;
       cg9ig: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9ih: // global
           I64[Sp - 24] = block_cg9i3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug9il; else goto cg9i4;
       ug9il: // global
           call _cg9i3(R1) args: 0, res: 0, upd: 0;
       cg9i4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cnull_info" {
     Data.Functor.Product.$fFoldableProduct_$cnull_info:
         const Data.Functor.Product.$fFoldableProduct_$cnull_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const Sg5Oh_srt+288;
 },
 _cg9i3() //  [R1]
         { []
         }
     {offset
       cg9i3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg9ik; else goto cg9ij;
       cg9ik: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9ij: // global
           _sg5yS::P64 = P64[R1 + 7];
           _sg5yT::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sg5yU_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sg5yT::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp] = Data.Functor.Product.$fFoldableProduct6_closure+2;
           P64[Sp + 8] = _sg5yS::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9i3_info" {
     block_cg9i3_info:
         const _cg9i3;
         const 2;
         const 4294967326;
         const Sg5Oh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.634861282 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cproduct_closure" {
     Data.Functor.Product.$fFoldableProduct_$cproduct_closure:
         const Data.Functor.Product.$fFoldableProduct_$cproduct_info;
         const 0;
 },
 $dMonoid_sg5yY_entry() //  [R1]
         { []
         }
     {offset
       cg9iK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9iL; else goto cg9iM;
       cg9iL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9iM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sg5yY_info" {
     $dMonoid_sg5yY_info:
         const $dMonoid_sg5yY_entry;
         const 1;
         const 4294967312;
         const Sg5Oh_srt+432;
 },
 sat_sg5z4_entry() //  [R1]
         { []
         }
     {offset
       cg9j1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9j2; else goto cg9j3;
       cg9j2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9j3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5z4_info" {
     sat_sg5z4_info:
         const sat_sg5z4_entry;
         const 3;
         const 15;
 },
 sat_sg5z3_entry() //  [R1]
         { []
         }
     {offset
       cg9j8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9j9; else goto cg9ja;
       cg9j9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5z3_info" {
     sat_sg5z3_info:
         const sat_sg5z3_entry;
         const 3;
         const 15;
 },
 sat_sg5z5_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9jb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9jc; else goto cg9jd;
       cg9jc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9jd: // global
           I64[Sp - 40] = block_cg9iS_info;
           _sg5yV::P64 = P64[R1 + 7];
           _sg5yW::P64 = P64[R1 + 15];
           _sg5yX::P64 = P64[R1 + 23];
           _sg5yY::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5yV::P64;
           P64[Sp - 24] = _sg5yW::P64;
           P64[Sp - 16] = _sg5yX::P64;
           P64[Sp - 8] = _sg5yY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9jh; else goto cg9iT;
       ug9jh: // global
           call _cg9iS(R1) args: 0, res: 0, upd: 0;
       cg9iT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5z5_info" {
     sat_sg5z5_info:
         const sat_sg5z5_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cg9iS() //  [R1]
         { []
         }
     {offset
       cg9iS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg9jg; else goto cg9jf;
       cg9jg: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9jf: // global
           _sg5z1::P64 = P64[R1 + 7];
           _sg5z2::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sg5z4_info;
           P64[Hp - 56] = P64[Sp + 16];
           _sg5yY::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sg5yY::P64;
           P64[Hp - 40] = _sg5z2::P64;
           I64[Hp - 32] = sat_sg5z3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sg5yY::P64;
           P64[Hp] = _sg5z1::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9iS_info" {
     block_cg9iS_info:
         const _cg9iS;
         const 4;
         const 30;
 },
 Data.Functor.Product.$fFoldableProduct_$cproduct_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cg9ji: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cg9jm; else goto cg9jl;
       cg9jm: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9jl: // global
           I64[Hp - 56] = $dMonoid_sg5yY_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sg5z5_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cproduct_info" {
     Data.Functor.Product.$fFoldableProduct_$cproduct_info:
         const Data.Functor.Product.$fFoldableProduct_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg5Oh_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.650662879 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$ctoList_closure" {
     Data.Functor.Product.$fFoldableProduct_$ctoList_closure:
         const Data.Functor.Product.$fFoldableProduct_$ctoList_info;
         const 0;
 },
 sat_sg5zc_entry() //  [R1]
         { []
         }
     {offset
       cg9k8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cg9k9; else goto cg9ka;
       cg9k9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = GHC.Types.:_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zc_info" {
     sat_sg5zc_info:
         const sat_sg5zc_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+288;
 },
 Data.Functor.Product.$fFoldableProduct_$ctoList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cg9kb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9kc; else goto cg9kd;
       cg9kc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9kd: // global
           I64[Sp - 24] = block_cg9jZ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ug9kh; else goto cg9k0;
       ug9kh: // global
           call _cg9jZ(R1) args: 0, res: 0, upd: 0;
       cg9k0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$ctoList_info" {
     Data.Functor.Product.$fFoldableProduct_$ctoList_info:
         const Data.Functor.Product.$fFoldableProduct_$ctoList_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const Sg5Oh_srt+288;
 },
 _cg9jZ() //  [R1]
         { []
         }
     {offset
       cg9jZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg9kg; else goto cg9kf;
       cg9kg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9kf: // global
           _sg5za::P64 = P64[R1 + 7];
           _sg5zb::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sg5zc_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sg5zb::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = _sg5za::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9jZ_info" {
     block_cg9jZ_info:
         const _cg9jZ;
         const 2;
         const 4294967326;
         const Sg5Oh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.665322254 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_closure" {
     Data.Functor.Product.$fFoldableProduct_closure:
         const Data.Functor.Product.$fFoldableProduct_info;
         const 0;
 },
 sat_sg5zu_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9kH: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cproduct_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zu_info" {
     sat_sg5zu_info:
         const sat_sg5zu_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+440;
 },
 sat_sg5zt_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9kP: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$csum_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zt_info" {
     sat_sg5zt_info:
         const sat_sg5zt_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+208;
 },
 sat_sg5zs_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9kX: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cminimum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zs_info" {
     sat_sg5zs_info:
         const sat_sg5zs_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+240;
 },
 sat_sg5zr_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9l5: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cmaximum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zr_info" {
     sat_sg5zr_info:
         const sat_sg5zr_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+264;
 },
 sat_sg5zq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9ld: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$celem_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zq_info" {
     sat_sg5zq_info:
         const sat_sg5zq_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+280;
 },
 sat_sg5zp_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9ll: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$clength_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zp_info" {
     sat_sg5zp_info:
         const sat_sg5zp_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+392;
 },
 sat_sg5zo_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9lt: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cnull_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zo_info" {
     sat_sg5zo_info:
         const sat_sg5zo_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+424;
 },
 sat_sg5zn_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9lB: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$ctoList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zn_info" {
     sat_sg5zn_info:
         const sat_sg5zn_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+448;
 },
 sat_sg5zm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9lJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zm_info" {
     sat_sg5zm_info:
         const sat_sg5zm_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+336;
 },
 sat_sg5zl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9lR: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zl_info" {
     sat_sg5zl_info:
         const sat_sg5zl_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sg5Oh_srt+416;
 },
 sat_sg5zk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9lZ: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zk_info" {
     sat_sg5zk_info:
         const sat_sg5zk_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg5Oh_srt+384;
 },
 sat_sg5zj_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9m7: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zj_info" {
     sat_sg5zj_info:
         const sat_sg5zj_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg5Oh_srt+312;
 },
 sat_sg5zi_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9mf: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zi_info" {
     sat_sg5zi_info:
         const sat_sg5zi_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg5Oh_srt+352;
 },
 sat_sg5zh_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9mn: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zh_info" {
     sat_sg5zh_info:
         const sat_sg5zh_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sg5Oh_srt+368;
 },
 sat_sg5zg_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9mv: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zg_info" {
     sat_sg5zg_info:
         const sat_sg5zg_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5zf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9mD: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfold_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5zf_info" {
     sat_sg5zf_info:
         const sat_sg5zf_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Product.$fFoldableProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9mH: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cg9mL; else goto cg9mK;
       cg9mL: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9mK: // global
           I64[Hp - 512] = sat_sg5zu_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sg5zt_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sg5zs_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sg5zr_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sg5zq_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sg5zp_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sg5zo_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sg5zn_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sg5zm_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sg5zl_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sg5zk_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sg5zj_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sg5zi_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sg5zh_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sg5zg_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sg5zf_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_info" {
     Data.Functor.Product.$fFoldableProduct_info:
         const Data.Functor.Product.$fFoldableProduct_entry;
         const 0;
         const 17065584369155964942;
         const 8589934607;
         const Sg5Oh_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.697488637 UTC

[section ""data" . Data.Functor.Product.$w$ctraverse_closure" {
     Data.Functor.Product.$w$ctraverse_closure:
         const Data.Functor.Product.$w$ctraverse_info;
 },
 sat_sg5zC_entry() //  [R1]
         { []
         }
     {offset
       cg9o1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9o2; else goto cg9o3;
       cg9o2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9o3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zC_info" {
     sat_sg5zC_info:
         const sat_sg5zC_entry;
         const 4;
         const 15;
 },
 sat_sg5zB_entry() //  [R1]
         { []
         }
     {offset
       cg9o8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9o9; else goto cg9oa;
       cg9o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9oa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zB_info" {
     sat_sg5zB_info:
         const sat_sg5zB_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$ctraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9ob: // global
           _sg5zz::P64 = R6;
           _sg5zy::P64 = R5;
           _sg5zx::P64 = R4;
           _sg5zw::P64 = R3;
           _sg5zv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cg9oc; else goto cg9od;
       cg9od: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cg9of; else goto cg9oe;
       cg9of: // global
           HpAlloc = 96;
           goto cg9oc;
       cg9oc: // global
           R6 = _sg5zz::P64;
           R5 = _sg5zy::P64;
           R4 = _sg5zx::P64;
           R3 = _sg5zw::P64;
           R2 = _sg5zv::P64;
           R1 = Data.Functor.Product.$w$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg9oe: // global
           I64[Hp - 88] = sat_sg5zC_info;
           P64[Hp - 72] = _sg5zw::P64;
           P64[Hp - 64] = _sg5zx::P64;
           P64[Hp - 56] = _sg5zy::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sg5zB_info;
           P64[Hp - 24] = _sg5zv::P64;
           P64[Hp - 16] = _sg5zx::P64;
           P64[Hp - 8] = _sg5zy::P64;
           P64[Hp] = _sg5zz::P64;
           R2 = _sg5zx::P64;
           I64[Sp - 24] = stg_ap_ppp_info;
           P64[Sp - 16] = Data.Functor.Product.Pair_closure+2;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$ctraverse_info" {
     Data.Functor.Product.$w$ctraverse_info:
         const Data.Functor.Product.$w$ctraverse_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.707070022 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$ctraverse_closure" {
     Data.Functor.Product.$fTraversableProduct_$ctraverse_closure:
         const Data.Functor.Product.$fTraversableProduct_$ctraverse_info;
 },
 Data.Functor.Product.$fTraversableProduct_$ctraverse_entry() //  [R2,
                                                                   R3, R4, R5, R6]
         { []
         }
     {offset
       cg9oJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9oK; else goto cg9oL;
       cg9oK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9oL: // global
           I64[Sp - 40] = block_cg9oG_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9oP; else goto cg9oH;
       ug9oP: // global
           call _cg9oG(R1) args: 0, res: 0, upd: 0;
       cg9oH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$ctraverse_info" {
     Data.Functor.Product.$fTraversableProduct_$ctraverse_info:
         const Data.Functor.Product.$fTraversableProduct_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg9oG() //  [R1]
         { []
         }
     {offset
       cg9oG: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9oG_info" {
     block_cg9oG_info:
         const _cg9oG;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.714696905 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure" {
     Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure:
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info;
         const 0;
 },
 sat_sg5zO_entry() //  [R1]
         { []
         }
     {offset
       cg9p8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9p9; else goto cg9pa;
       cg9p9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9pa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zO_info" {
     sat_sg5zO_info:
         const sat_sg5zO_entry;
         const 1;
         const 16;
 },
 sat_sg5zN_entry() //  [R1]
         { []
         }
     {offset
       cg9pf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9pg; else goto cg9ph;
       cg9pg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ph: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zN_info" {
     sat_sg5zN_info:
         const sat_sg5zN_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cg9pi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9pm; else goto cg9pl;
       cg9pm: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9pl: // global
           I64[Hp - 40] = sat_sg5zO_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5zN_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFoldableProduct_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info" {
     Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info:
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.723504345 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure" {
     Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure:
         const Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info;
 },
 sat_sg5zS_entry() //  [R1]
         { []
         }
     {offset
       cg9pH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9pI; else goto cg9pJ;
       cg9pI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9pJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zS_info" {
     sat_sg5zS_info:
         const sat_sg5zS_entry;
         const 1;
         const 16;
 },
 sat_sg5zR_entry() //  [R1]
         { []
         }
     {offset
       cg9pO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9pP; else goto cg9pQ;
       cg9pP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9pQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5zR_info" {
     sat_sg5zR_info:
         const sat_sg5zR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cg9pR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9pV; else goto cg9pU;
       cg9pV: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9pU: // global
           I64[Hp - 40] = sat_sg5zS_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5zR_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFunctorProduct_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info" {
     Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info:
         const Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.731681269 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$csequenceA_closure" {
     Data.Functor.Product.$fTraversableProduct_$csequenceA_closure:
         const Data.Functor.Product.$fTraversableProduct_$csequenceA_info;
 },
 Data.Functor.Product.$fTraversableProduct_$csequenceA_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cg9qf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9qg; else goto cg9qh;
       cg9qg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$csequenceA_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9qh: // global
           I64[Sp - 32] = block_cg9qc_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9ql; else goto cg9qd;
       ug9ql: // global
           call _cg9qc(R1) args: 0, res: 0, upd: 0;
       cg9qd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$csequenceA_info" {
     Data.Functor.Product.$fTraversableProduct_$csequenceA_info:
         const Data.Functor.Product.$fTraversableProduct_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9qc() //  [R1]
         { []
         }
     {offset
       cg9qc: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9qc_info" {
     block_cg9qc_info:
         const _cg9qc;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.738967089 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cmapM_closure" {
     Data.Functor.Product.$fTraversableProduct_$cmapM_closure:
         const Data.Functor.Product.$fTraversableProduct_$cmapM_info;
 },
 Data.Functor.Product.$fTraversableProduct_$cmapM_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cg9qD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9qH; else goto cg9qI;
       cg9qH: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9qI: // global
           I64[Sp - 40] = block_cg9qA_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9qO; else goto cg9qB;
       ug9qO: // global
           call _cg9qA(R1) args: 0, res: 0, upd: 0;
       cg9qB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cmapM_info" {
     Data.Functor.Product.$fTraversableProduct_$cmapM_info:
         const Data.Functor.Product.$fTraversableProduct_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg9qA() //  [R1]
         { []
         }
     {offset
       cg9qA: // global
           I64[Sp - 8] = block_cg9qG_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9qA_info" {
     block_cg9qA_info:
         const _cg9qA;
         const 4;
         const 30;
 },
 _cg9qG() //  [R1]
         { []
         }
     {offset
       cg9qG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 40];
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9qG_info" {
     block_cg9qG_info:
         const _cg9qG;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.747955708 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$csequence_closure" {
     Data.Functor.Product.$fTraversableProduct_$csequence_closure:
         const Data.Functor.Product.$fTraversableProduct_$csequence_info;
 },
 Data.Functor.Product.$fTraversableProduct_$csequence_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cg9rb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9rf; else goto cg9rg;
       cg9rf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9rg: // global
           I64[Sp - 32] = block_cg9r8_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9rm; else goto cg9r9;
       ug9rm: // global
           call _cg9r8(R1) args: 0, res: 0, upd: 0;
       cg9r9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$csequence_info" {
     Data.Functor.Product.$fTraversableProduct_$csequence_info:
         const Data.Functor.Product.$fTraversableProduct_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9r8() //  [R1]
         { []
         }
     {offset
       cg9r8: // global
           I64[Sp - 8] = block_cg9re_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9r8_info" {
     block_cg9r8_info:
         const _cg9r8;
         const 3;
         const 30;
 },
 _cg9re() //  [R1]
         { []
         }
     {offset
       cg9re: // global
           R6 = P64[Sp + 32];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9re_info" {
     block_cg9re_info:
         const _cg9re;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.758208587 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_closure" {
     Data.Functor.Product.$fTraversableProduct_closure:
         const Data.Functor.Product.$fTraversableProduct_info;
         const 0;
 },
 sat_sg5Ao_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9rL: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fTraversableProduct_$csequence_entry(R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Ao_info" {
     sat_sg5Ao_info:
         const sat_sg5Ao_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5An_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9rT: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fTraversableProduct_$cmapM_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5An_info" {
     sat_sg5An_info:
         const sat_sg5An_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5Am_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9s1: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fTraversableProduct_$csequenceA_entry(R5,
                                                                            R4,
                                                                            R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Am_info" {
     sat_sg5Am_info:
         const sat_sg5Am_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5Al_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9s9: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fTraversableProduct_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Al_info" {
     sat_sg5Al_info:
         const sat_sg5Al_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5Ak_entry() //  [R1]
         { []
         }
     {offset
       cg9sg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9sh; else goto cg9si;
       cg9sh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9si: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Ak_info" {
     sat_sg5Ak_info:
         const sat_sg5Ak_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+464;
 },
 sat_sg5Aj_entry() //  [R1]
         { []
         }
     {offset
       cg9sn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9so; else goto cg9sp;
       cg9so: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9sp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Aj_info" {
     sat_sg5Aj_info:
         const sat_sg5Aj_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fTraversableProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9sr: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cg9sv; else goto cg9su;
       cg9sv: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9su: // global
           I64[Hp - 208] = sat_sg5Ao_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sg5An_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sg5Am_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sg5Al_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sg5Ak_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sg5Aj_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_info" {
     Data.Functor.Product.$fTraversableProduct_info:
         const Data.Functor.Product.$fTraversableProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.775479531 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cliftA2_info;
 },
 sat_sg5AB_entry() //  [R1]
         { []
         }
     {offset
       cg9tj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9tk; else goto cg9tl;
       cg9tk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9tl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AB_info" {
     sat_sg5AB_info:
         const sat_sg5AB_entry;
         const 4;
         const 15;
 },
 sat_sg5AA_entry() //  [R1]
         { []
         }
     {offset
       cg9tq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9tr; else goto cg9ts;
       cg9tr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ts: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AA_info" {
     sat_sg5AA_info:
         const sat_sg5AA_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cg9tt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9tv; else goto cg9tw;
       cg9tv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9tw: // global
           I64[Sp - 40] = block_cg9t5_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9tC; else goto cg9t6;
       ug9tC: // global
           call _cg9t5(R1) args: 0, res: 0, upd: 0;
       cg9t6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cliftA2_info" {
     Data.Functor.Product.$fApplicativeProduct_$cliftA2_info:
         const Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg9t5() //  [R1]
         { []
         }
     {offset
       cg9t5: // global
           I64[Sp - 8] = block_cg9ta_info;
           _sg5Av::P64 = P64[R1 + 7];
           _sg5Aw::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5Aw::P64;
           P64[Sp + 32] = _sg5Av::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9tB; else goto cg9tb;
       ug9tB: // global
           call _cg9ta(R1) args: 0, res: 0, upd: 0;
       cg9tb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9t5_info" {
     block_cg9t5_info:
         const _cg9t5;
         const 4;
         const 30;
 },
 _cg9ta() //  [R1]
         { []
         }
     {offset
       cg9ta: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cg9tA; else goto cg9tz;
       cg9tA: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9tz: // global
           _sg5Ay::P64 = P64[R1 + 7];
           _sg5Az::P64 = P64[R1 + 15];
           I64[Hp - 112] = sat_sg5AB_info;
           P64[Hp - 96] = P64[Sp + 24];
           _sg5Ar::P64 = P64[Sp + 32];
           P64[Hp - 88] = _sg5Ar::P64;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _sg5Az::P64;
           I64[Hp - 64] = sat_sg5AA_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _sg5Ar::P64;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _sg5Ay::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9ta_info" {
     block_cg9ta_info:
         const _cg9ta;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.790086913 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c<*>_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c<*>_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c<*>_info;
 },
 sat_sg5AN_entry() //  [R1]
         { []
         }
     {offset
       cg9ut: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9uu; else goto cg9uv;
       cg9uu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9uv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AN_info" {
     sat_sg5AN_info:
         const sat_sg5AN_entry;
         const 3;
         const 15;
 },
 sat_sg5AM_entry() //  [R1]
         { []
         }
     {offset
       cg9uA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9uB; else goto cg9uC;
       cg9uB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9uC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AM_info" {
     sat_sg5AM_info:
         const sat_sg5AM_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$c<*>_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cg9uD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9uF; else goto cg9uG;
       cg9uF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c<*>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9uG: // global
           I64[Sp - 32] = block_cg9uf_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9uM; else goto cg9ug;
       ug9uM: // global
           call _cg9uf(R1) args: 0, res: 0, upd: 0;
       cg9ug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c<*>_info" {
     Data.Functor.Product.$fApplicativeProduct_$c<*>_info:
         const Data.Functor.Product.$fApplicativeProduct_$c<*>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9uf() //  [R1]
         { []
         }
     {offset
       cg9uf: // global
           I64[Sp - 8] = block_cg9uk_info;
           _sg5AH::P64 = P64[R1 + 7];
           _sg5AI::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5AI::P64;
           P64[Sp + 24] = _sg5AH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9uL; else goto cg9ul;
       ug9uL: // global
           call _cg9uk(R1) args: 0, res: 0, upd: 0;
       cg9ul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9uf_info" {
     block_cg9uf_info:
         const _cg9uf;
         const 3;
         const 30;
 },
 _cg9uk() //  [R1]
         { []
         }
     {offset
       cg9uk: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9uK; else goto cg9uJ;
       cg9uK: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9uJ: // global
           _sg5AK::P64 = P64[R1 + 7];
           _sg5AL::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5AN_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sg5AL::P64;
           I64[Hp - 56] = sat_sg5AM_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sg5AK::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9uk_info" {
     block_cg9uk_info:
         const _cg9uk;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.803888569 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cpure_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cpure_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cpure_info;
 },
 sat_sg5AS_entry() //  [R1]
         { []
         }
     {offset
       cg9vr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9vs; else goto cg9vt;
       cg9vs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9vt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AS_info" {
     sat_sg5AS_info:
         const sat_sg5AS_entry;
         const 2;
         const 18;
 },
 sat_sg5AR_entry() //  [R1]
         { []
         }
     {offset
       cg9vy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9vz; else goto cg9vA;
       cg9vz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9vA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AR_info" {
     sat_sg5AR_info:
         const sat_sg5AR_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fApplicativeProduct_$cpure_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cg9vC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg9vG; else goto cg9vF;
       cg9vG: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cpure_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9vF: // global
           I64[Hp - 80] = sat_sg5AS_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sg5AR_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cpure_info" {
     Data.Functor.Product.$fApplicativeProduct_$cpure_info:
         const Data.Functor.Product.$fApplicativeProduct_$cpure_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.812698426 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info;
 },
 sat_sg5AW_entry() //  [R1]
         { []
         }
     {offset
       cg9w6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9w7; else goto cg9w8;
       cg9w7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9w8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AW_info" {
     sat_sg5AW_info:
         const sat_sg5AW_entry;
         const 1;
         const 16;
 },
 sat_sg5AV_entry() //  [R1]
         { []
         }
     {offset
       cg9wd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9we; else goto cg9wf;
       cg9we: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9wf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5AV_info" {
     sat_sg5AV_info:
         const sat_sg5AV_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cg9wg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9wk; else goto cg9wj;
       cg9wk: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9wj: // global
           I64[Hp - 40] = sat_sg5AW_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5AV_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFunctorProduct_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info" {
     Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info:
         const Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.820236198 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct1_closure" {
     Data.Functor.Product.$fApplicativeProduct1_closure:
         const Data.Functor.Product.$fApplicativeProduct1_info;
 },
 Data.Functor.Product.$fApplicativeProduct1_entry() //  [R3]
         { []
         }
     {offset
       cg9wB: // global
           R2 = R3;
           call GHC.Base.breakpoint_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct1_info" {
     Data.Functor.Product.$fApplicativeProduct1_info:
         const Data.Functor.Product.$fApplicativeProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.827336407 UTC

[section ""data" . Data.Functor.Product.$w$c*>_closure" {
     Data.Functor.Product.$w$c*>_closure:
         const Data.Functor.Product.$w$c*>_info;
 },
 sat_sg5B8_entry() //  [R1]
         { []
         }
     {offset
       cg9wW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9wX; else goto cg9wY;
       cg9wX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9wY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cg9wU_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5B8_info" {
     sat_sg5B8_info:
         const sat_sg5B8_entry;
         const 2;
         const 18;
 },
 _cg9wU() //  [R1]
         { []
         }
     {offset
       cg9wU: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Product.$fApplicativeProduct1_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9wU_info" {
     block_cg9wU_info:
         const _cg9wU;
         const 1;
         const 30;
 },
 sat_sg5B9_entry() //  [R1]
         { []
         }
     {offset
       cg9x2: // global
           _sg5B9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9x3; else goto cg9x4;
       cg9x4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg9x6; else goto cg9x5;
       cg9x6: // global
           HpAlloc = 32;
           goto cg9x3;
       cg9x3: // global
           R1 = _sg5B9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9x5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5B9::P64;
           _sg5AZ::P64 = P64[_sg5B9::P64 + 16];
           _sg5B1::P64 = P64[_sg5B9::P64 + 24];
           _sg5B3::P64 = P64[_sg5B9::P64 + 32];
           I64[Hp - 24] = sat_sg5B8_info;
           P64[Hp - 8] = _sg5AZ::P64;
           P64[Hp] = _sg5B1::P64;
           R2 = _sg5AZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sg5B3::P64;
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5B9_info" {
     sat_sg5B9_info:
         const sat_sg5B9_entry;
         const 3;
         const 15;
 },
 sat_sg5B5_entry() //  [R1]
         { []
         }
     {offset
       cg9xh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9xi; else goto cg9xj;
       cg9xi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9xj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cg9xf_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5B5_info" {
     sat_sg5B5_info:
         const sat_sg5B5_entry;
         const 2;
         const 18;
 },
 _cg9xf() //  [R1]
         { []
         }
     {offset
       cg9xf: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Product.$fApplicativeProduct1_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9xf_info" {
     block_cg9xf_info:
         const _cg9xf;
         const 1;
         const 30;
 },
 sat_sg5B6_entry() //  [R1]
         { []
         }
     {offset
       cg9xn: // global
           _sg5B6::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9xo; else goto cg9xp;
       cg9xp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cg9xr; else goto cg9xq;
       cg9xr: // global
           HpAlloc = 32;
           goto cg9xo;
       cg9xo: // global
           R1 = _sg5B6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9xq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5B6::P64;
           _sg5AY::P64 = P64[_sg5B6::P64 + 16];
           _sg5B0::P64 = P64[_sg5B6::P64 + 24];
           _sg5B2::P64 = P64[_sg5B6::P64 + 32];
           I64[Hp - 24] = sat_sg5B5_info;
           P64[Hp - 8] = _sg5AY::P64;
           P64[Hp] = _sg5B0::P64;
           R2 = _sg5AY::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sg5B2::P64;
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5B6_info" {
     sat_sg5B6_info:
         const sat_sg5B6_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$c*>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cg9xs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg9xw; else goto cg9xv;
       cg9xw: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$c*>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cg9xv: // global
           I64[Hp - 72] = sat_sg5B9_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = sat_sg5B6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R6;
           R2 = Hp - 72;
           R1 = Hp - 32;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c*>_info" {
     Data.Functor.Product.$w$c*>_info:
         const Data.Functor.Product.$w$c*>_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.845112637 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c*>_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c*>_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c*>_info;
 },
 Data.Functor.Product.$fApplicativeProduct_$c*>_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cg9ya: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9yl; else goto cg9ym;
       cg9yl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c*>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9ym: // global
           I64[Sp - 32] = block_cg9y7_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9yt; else goto cg9y8;
       ug9yt: // global
           call _cg9y7(R1) args: 0, res: 0, upd: 0;
       cg9y8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c*>_info" {
     Data.Functor.Product.$fApplicativeProduct_$c*>_info:
         const Data.Functor.Product.$fApplicativeProduct_$c*>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9y7() //  [R1]
         { []
         }
     {offset
       cg9y7: // global
           I64[Sp - 8] = block_cg9yd_info;
           _sg5Bf::P64 = P64[R1 + 7];
           _sg5Bg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5Bg::P64;
           P64[Sp + 24] = _sg5Bf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9ys; else goto cg9ye;
       ug9ys: // global
           call _cg9yd(R1) args: 0, res: 0, upd: 0;
       cg9ye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9y7_info" {
     block_cg9y7_info:
         const _cg9y7;
         const 3;
         const 30;
 },
 _cg9yd() //  [R1]
         { []
         }
     {offset
       cg9yd: // global
           _sg5Bf::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cg9yi_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = _sg5Bf::P64;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$c*>_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9yd_info" {
     block_cg9yd_info:
         const _cg9yd;
         const 4;
         const 30;
 },
 _cg9yi() //  [R1, R2]
         { []
         }
     {offset
       cg9yi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9yr; else goto cg9yq;
       cg9yr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cg9yq: // global
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9yi_info" {
     block_cg9yi_info:
         const _cg9yi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.857076879 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c<*_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c<*_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c<*_info;
 },
 sat_sg5By_entry() //  [R1]
         { []
         }
     {offset
       cg9z4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9z5; else goto cg9z6;
       cg9z5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9z6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Base.const_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5By_info" {
     sat_sg5By_info:
         const sat_sg5By_entry;
         const 3;
         const 15;
 },
 sat_sg5Bx_entry() //  [R1]
         { []
         }
     {offset
       cg9zb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9zc; else goto cg9zd;
       cg9zc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9zd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Base.const_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Bx_info" {
     sat_sg5Bx_info:
         const sat_sg5Bx_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$c<*_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cg9ze: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9zg; else goto cg9zh;
       cg9zg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c<*_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9zh: // global
           I64[Sp - 32] = block_cg9yQ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9zn; else goto cg9yR;
       ug9zn: // global
           call _cg9yQ(R1) args: 0, res: 0, upd: 0;
       cg9yR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c<*_info" {
     Data.Functor.Product.$fApplicativeProduct_$c<*_info:
         const Data.Functor.Product.$fApplicativeProduct_$c<*_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9yQ() //  [R1]
         { []
         }
     {offset
       cg9yQ: // global
           I64[Sp - 8] = block_cg9yV_info;
           _sg5Bs::P64 = P64[R1 + 7];
           _sg5Bt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5Bt::P64;
           P64[Sp + 24] = _sg5Bs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9zm; else goto cg9yW;
       ug9zm: // global
           call _cg9yV(R1) args: 0, res: 0, upd: 0;
       cg9yW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9yQ_info" {
     block_cg9yQ_info:
         const _cg9yQ;
         const 3;
         const 30;
 },
 _cg9yV() //  [R1]
         { []
         }
     {offset
       cg9yV: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9zl; else goto cg9zk;
       cg9zl: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9zk: // global
           _sg5Bv::P64 = P64[R1 + 7];
           _sg5Bw::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5By_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sg5Bw::P64;
           I64[Hp - 56] = sat_sg5Bx_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sg5Bv::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9yV_info" {
     block_cg9yV_info:
         const _cg9yV;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.871724574 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_closure" {
     Data.Functor.Product.$fApplicativeProduct_closure:
         const Data.Functor.Product.$fApplicativeProduct_info;
 },
 sat_sg5BG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9A3: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c<*_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5BG_info" {
     sat_sg5BG_info:
         const sat_sg5BG_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5BF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9Ab: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c*>_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5BF_info" {
     sat_sg5BF_info:
         const sat_sg5BF_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5BE_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9Aj: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5BE_info" {
     sat_sg5BE_info:
         const sat_sg5BE_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5BD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9Ar: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c<*>_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5BD_info" {
     sat_sg5BD_info:
         const sat_sg5BD_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5BC_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Az: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fApplicativeProduct_$cpure_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5BC_info" {
     sat_sg5BC_info:
         const sat_sg5BC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5BB_entry() //  [R1]
         { []
         }
     {offset
       cg9AG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9AH; else goto cg9AI;
       cg9AH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9AI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BB_info" {
     sat_sg5BB_info:
         const sat_sg5BB_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fApplicativeProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9AK: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cg9AO; else goto cg9AN;
       cg9AO: // global
           HpAlloc = 208;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9AN: // global
           I64[Hp - 200] = sat_sg5BG_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sg5BF_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sg5BE_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sg5BD_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sg5BC_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sg5BB_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 103;
           P64[Hp - 24] = Hp - 126;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 198;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_info" {
     Data.Functor.Product.$fApplicativeProduct_info:
         const Data.Functor.Product.$fApplicativeProduct_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.889466436 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$c<|>_closure" {
     Data.Functor.Product.$fAlternativeProduct_$c<|>_closure:
         const Data.Functor.Product.$fAlternativeProduct_$c<|>_info;
 },
 sat_sg5BS_entry() //  [R1]
         { []
         }
     {offset
       cg9BB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9BC; else goto cg9BD;
       cg9BC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9BD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BS_info" {
     sat_sg5BS_info:
         const sat_sg5BS_entry;
         const 3;
         const 15;
 },
 sat_sg5BR_entry() //  [R1]
         { []
         }
     {offset
       cg9BI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9BJ; else goto cg9BK;
       cg9BJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9BK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BR_info" {
     sat_sg5BR_info:
         const sat_sg5BR_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fAlternativeProduct_$c<|>_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cg9BL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9BN; else goto cg9BO;
       cg9BN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$c<|>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9BO: // global
           I64[Sp - 32] = block_cg9Bn_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9BU; else goto cg9Bo;
       ug9BU: // global
           call _cg9Bn(R1) args: 0, res: 0, upd: 0;
       cg9Bo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$c<|>_info" {
     Data.Functor.Product.$fAlternativeProduct_$c<|>_info:
         const Data.Functor.Product.$fAlternativeProduct_$c<|>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9Bn() //  [R1]
         { []
         }
     {offset
       cg9Bn: // global
           I64[Sp - 8] = block_cg9Bs_info;
           _sg5BM::P64 = P64[R1 + 7];
           _sg5BN::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5BN::P64;
           P64[Sp + 24] = _sg5BM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9BT; else goto cg9Bt;
       ug9BT: // global
           call _cg9Bs(R1) args: 0, res: 0, upd: 0;
       cg9Bt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Bn_info" {
     block_cg9Bn_info:
         const _cg9Bn;
         const 3;
         const 30;
 },
 _cg9Bs() //  [R1]
         { []
         }
     {offset
       cg9Bs: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9BS; else goto cg9BR;
       cg9BS: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9BR: // global
           _sg5BP::P64 = P64[R1 + 7];
           _sg5BQ::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5BS_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sg5BQ::P64;
           I64[Hp - 56] = sat_sg5BR_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sg5BP::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Bs_info" {
     block_cg9Bs_info:
         const _cg9Bs;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.902536951 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$cempty_closure" {
     Data.Functor.Product.$fAlternativeProduct_$cempty_closure:
         const Data.Functor.Product.$fAlternativeProduct_$cempty_info;
 },
 sat_sg5BW_entry() //  [R1]
         { []
         }
     {offset
       cg9Cz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9CA; else goto cg9CB;
       cg9CA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9CB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BW_info" {
     sat_sg5BW_info:
         const sat_sg5BW_entry;
         const 1;
         const 16;
 },
 sat_sg5BV_entry() //  [R1]
         { []
         }
     {offset
       cg9CG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9CH; else goto cg9CI;
       cg9CH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9CI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BV_info" {
     sat_sg5BV_info:
         const sat_sg5BV_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fAlternativeProduct_$cempty_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cg9CK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg9CO; else goto cg9CN;
       cg9CO: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$cempty_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9CN: // global
           I64[Hp - 64] = sat_sg5BW_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg5BV_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$cempty_info" {
     Data.Functor.Product.$fAlternativeProduct_$cempty_info:
         const Data.Functor.Product.$fAlternativeProduct_$cempty_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.911170148 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure" {
     Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure:
         const Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info;
 },
 sat_sg5C0_entry() //  [R1]
         { []
         }
     {offset
       cg9Dc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Dd; else goto cg9De;
       cg9Dd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9De: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5C0_info" {
     sat_sg5C0_info:
         const sat_sg5C0_entry;
         const 1;
         const 16;
 },
 sat_sg5BZ_entry() //  [R1]
         { []
         }
     {offset
       cg9Dj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Dk; else goto cg9Dl;
       cg9Dk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Dl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5BZ_info" {
     sat_sg5BZ_info:
         const sat_sg5BZ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cg9Dm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9Dq; else goto cg9Dp;
       cg9Dq: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Dp: // global
           I64[Hp - 40] = sat_sg5C0_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5BZ_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fApplicativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info" {
     Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info:
         const Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.920330762 UTC

[section ""data" . poly_some_v_rg5o0_closure" {
     poly_some_v_rg5o0_closure:
         const poly_some_v_rg5o0_info;
         const 0;
         const 0;
         const 0;
 },
 poly_some_v_rg5o0_entry() //  [R1]
         { []
         }
     {offset
       cg9DJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9DK; else goto cg9DL;
       cg9DK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9DL: // global
           (_cg9DG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cg9DG::I64 == 0) goto cg9DI; else goto cg9DH;
       cg9DI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cg9DH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cg9DG::I64;
           R1 = poly_some_v_rg5o0_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . poly_some_v_rg5o0_info" {
     poly_some_v_rg5o0_info:
         const poly_some_v_rg5o0_entry;
         const 0;
         const 4294967317;
         const Sg5Oh_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.92504469 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$csome_closure" {
     Data.Functor.Product.$fAlternativeProduct_$csome_closure:
         const Data.Functor.Product.$fAlternativeProduct_$csome_info;
         const 0;
 },
 Data.Functor.Product.$fAlternativeProduct_$csome_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cg9E1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9E2; else goto cg9E3;
       cg9E2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9E3: // global
           I64[Sp - 8] = block_cg9DY_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9E7; else goto cg9DZ;
       ug9E7: // global
           call _cg9DY() args: 0, res: 0, upd: 0;
       cg9DZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$csome_info" {
     Data.Functor.Product.$fAlternativeProduct_$csome_info:
         const Data.Functor.Product.$fAlternativeProduct_$csome_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sg5Oh_srt+480;
 },
 _cg9DY() //  []
         { []
         }
     {offset
       cg9DY: // global
           R1 = poly_some_v_rg5o0_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9DY_info" {
     block_cg9DY_info:
         const _cg9DY;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.933205091 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_closure" {
     Data.Functor.Product.$fAlternativeProduct_closure:
         const Data.Functor.Product.$fAlternativeProduct_info;
         const 0;
 },
 sat_sg5Cd_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Er: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fAlternativeProduct_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Cd_info" {
     sat_sg5Cd_info:
         const sat_sg5Cd_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+488;
 },
 sat_sg5Cc_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Ez: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fAlternativeProduct_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Cc_info" {
     sat_sg5Cc_info:
         const sat_sg5Cc_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sg5Oh_srt+488;
 },
 sat_sg5Cb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9EH: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fAlternativeProduct_$c<|>_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Cb_info" {
     sat_sg5Cb_info:
         const sat_sg5Cb_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5Ca_entry() //  [R1]
         { []
         }
     {offset
       cg9EO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9EP; else goto cg9EQ;
       cg9EP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9EQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fAlternativeProduct_$cempty_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Ca_info" {
     sat_sg5Ca_info:
         const sat_sg5Ca_entry;
         const 2;
         const 18;
 },
 sat_sg5C9_entry() //  [R1]
         { []
         }
     {offset
       cg9EV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9EW; else goto cg9EX;
       cg9EW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9EX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5C9_info" {
     sat_sg5C9_info:
         const sat_sg5C9_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fAlternativeProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9EZ: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cg9F3; else goto cg9F2;
       cg9F3: // global
           HpAlloc = 184;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9F2: // global
           I64[Hp - 176] = sat_sg5Cd_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sg5Cc_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sg5Cb_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sg5Ca_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sg5C9_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 175;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_info" {
     Data.Functor.Product.$fAlternativeProduct_info:
         const Data.Functor.Product.$fAlternativeProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.950738649 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$c>>=_closure" {
     Data.Functor.Product.$fMonadProduct_$c>>=_closure:
         const Data.Functor.Product.$fMonadProduct_$c>>=_info;
 },
 sat_sg5Cv_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9FP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9FQ; else goto cg9FR;
       cg9FQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9FR: // global
           I64[Sp - 8] = block_cg9FN_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Cv_info" {
     sat_sg5Cv_info:
         const sat_sg5Cv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9FN() //  [R1]
         { []
         }
     {offset
       cg9FN: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9FN_info" {
     block_cg9FN_info:
         const _cg9FN;
         const 0;
         const 30;
 },
 sat_sg5Cw_entry() //  [R1]
         { []
         }
     {offset
       cg9FV: // global
           _sg5Cw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9FW; else goto cg9FX;
       cg9FX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9FZ; else goto cg9FY;
       cg9FZ: // global
           HpAlloc = 16;
           goto cg9FW;
       cg9FW: // global
           R1 = _sg5Cw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9FY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5Cw::P64;
           _sg5Cf::P64 = P64[_sg5Cw::P64 + 16];
           _sg5Ch::P64 = P64[_sg5Cw::P64 + 24];
           _sg5Ck::P64 = P64[_sg5Cw::P64 + 32];
           I64[Hp - 8] = sat_sg5Cv_info;
           P64[Hp] = _sg5Ch::P64;
           R2 = _sg5Cf::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5Ck::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Cw_info" {
     sat_sg5Cw_info:
         const sat_sg5Cw_entry;
         const 3;
         const 15;
 },
 sat_sg5Cp_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Gb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9Gc; else goto cg9Gd;
       cg9Gc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9Gd: // global
           I64[Sp - 8] = block_cg9G9_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Cp_info" {
     sat_sg5Cp_info:
         const sat_sg5Cp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9G9() //  [R1]
         { []
         }
     {offset
       cg9G9: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9G9_info" {
     block_cg9G9_info:
         const _cg9G9;
         const 0;
         const 30;
 },
 sat_sg5Cq_entry() //  [R1]
         { []
         }
     {offset
       cg9Gh: // global
           _sg5Cq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9Gi; else goto cg9Gj;
       cg9Gj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9Gl; else goto cg9Gk;
       cg9Gl: // global
           HpAlloc = 16;
           goto cg9Gi;
       cg9Gi: // global
           R1 = _sg5Cq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Gk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5Cq::P64;
           _sg5Ce::P64 = P64[_sg5Cq::P64 + 16];
           _sg5Ch::P64 = P64[_sg5Cq::P64 + 24];
           _sg5Cj::P64 = P64[_sg5Cq::P64 + 32];
           I64[Hp - 8] = sat_sg5Cp_info;
           P64[Hp] = _sg5Ch::P64;
           R2 = _sg5Ce::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5Cj::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Cq_info" {
     sat_sg5Cq_info:
         const sat_sg5Cq_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadProduct_$c>>=_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cg9Gm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9Go; else goto cg9Gp;
       cg9Go: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$c>>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Gp: // global
           I64[Sp - 32] = block_cg9Fz_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9Gt; else goto cg9FA;
       ug9Gt: // global
           call _cg9Fz(R1) args: 0, res: 0, upd: 0;
       cg9FA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$c>>=_info" {
     Data.Functor.Product.$fMonadProduct_$c>>=_info:
         const Data.Functor.Product.$fMonadProduct_$c>>=_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9Fz() //  [R1]
         { []
         }
     {offset
       cg9Fz: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9Gs; else goto cg9Gr;
       cg9Gs: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9Gr: // global
           _sg5Cj::P64 = P64[R1 + 7];
           _sg5Ck::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5Cw_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sg5Ch::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sg5Ch::P64;
           P64[Hp - 64] = _sg5Ck::P64;
           I64[Hp - 56] = sat_sg5Cq_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sg5Ch::P64;
           P64[Hp - 24] = _sg5Cj::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Fz_info" {
     block_cg9Fz_info:
         const _cg9Fz;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.968496834 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$cp1Monad_closure" {
     Data.Functor.Product.$fMonadProduct_$cp1Monad_closure:
         const Data.Functor.Product.$fMonadProduct_$cp1Monad_info;
 },
 sat_sg5CA_entry() //  [R1]
         { []
         }
     {offset
       cg9He: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Hf; else goto cg9Hg;
       cg9Hf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Hg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5CA_info" {
     sat_sg5CA_info:
         const sat_sg5CA_entry;
         const 1;
         const 16;
 },
 sat_sg5Cz_entry() //  [R1]
         { []
         }
     {offset
       cg9Hl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Hm; else goto cg9Hn;
       cg9Hm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Hn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Cz_info" {
     sat_sg5Cz_info:
         const sat_sg5Cz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadProduct_$cp1Monad_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9Ho: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9Hs; else goto cg9Hr;
       cg9Hs: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$cp1Monad_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Hr: // global
           I64[Hp - 40] = sat_sg5CA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5Cz_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fApplicativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$cp1Monad_info" {
     Data.Functor.Product.$fMonadProduct_$cp1Monad_info:
         const Data.Functor.Product.$fMonadProduct_$cp1Monad_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.978852 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$creturn_closure" {
     Data.Functor.Product.$fMonadProduct_$creturn_closure:
         const Data.Functor.Product.$fMonadProduct_$creturn_info;
 },
 sat_sg5CH_entry() //  [R1]
         { []
         }
     {offset
       cg9HP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9HQ; else goto cg9HR;
       cg9HQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9HR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cg9HN_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5CH_info" {
     sat_sg5CH_info:
         const sat_sg5CH_entry;
         const 2;
         const 18;
 },
 _cg9HN() //  [R1]
         { []
         }
     {offset
       cg9HN: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9HN_info" {
     block_cg9HN_info:
         const _cg9HN;
         const 1;
         const 30;
 },
 sat_sg5CF_entry() //  [R1]
         { []
         }
     {offset
       cg9I1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9I2; else goto cg9I3;
       cg9I2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9I3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cg9HZ_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5CF_info" {
     sat_sg5CF_info:
         const sat_sg5CF_entry;
         const 2;
         const 18;
 },
 _cg9HZ() //  [R1]
         { []
         }
     {offset
       cg9HZ: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9HZ_info" {
     block_cg9HZ_info:
         const _cg9HZ;
         const 1;
         const 30;
 },
 Data.Functor.Product.$fMonadProduct_$creturn_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cg9I8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg9Ic; else goto cg9Ib;
       cg9Ic: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$creturn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Ib: // global
           I64[Hp - 80] = sat_sg5CH_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sg5CF_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$creturn_info" {
     Data.Functor.Product.$fMonadProduct_$creturn_info:
         const Data.Functor.Product.$fMonadProduct_$creturn_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:56.993161864 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$c>>_closure" {
     Data.Functor.Product.$fMonadProduct_$c>>_closure:
         const Data.Functor.Product.$fMonadProduct_$c>>_info;
 },
 sat_sg5CZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9IV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9IW; else goto cg9IX;
       cg9IW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9IX: // global
           I64[Sp - 8] = block_cg9IS_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9J1; else goto cg9IT;
       ug9J1: // global
           call _cg9IS(R1) args: 0, res: 0, upd: 0;
       cg9IT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5CZ_info" {
     sat_sg5CZ_info:
         const sat_sg5CZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9IS() //  [R1]
         { []
         }
     {offset
       cg9IS: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9IS_info" {
     block_cg9IS_info:
         const _cg9IS;
         const 0;
         const 30;
 },
 sat_sg5D0_entry() //  [R1]
         { []
         }
     {offset
       cg9J2: // global
           _sg5D0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9J3; else goto cg9J4;
       cg9J4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9J6; else goto cg9J5;
       cg9J6: // global
           HpAlloc = 16;
           goto cg9J3;
       cg9J3: // global
           R1 = _sg5D0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9J5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5D0::P64;
           _sg5CJ::P64 = P64[_sg5D0::P64 + 16];
           _sg5CL::P64 = P64[_sg5D0::P64 + 24];
           _sg5CO::P64 = P64[_sg5D0::P64 + 32];
           I64[Hp - 8] = sat_sg5CZ_info;
           P64[Hp] = _sg5CL::P64;
           R2 = _sg5CJ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5CO::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5D0_info" {
     sat_sg5D0_info:
         const sat_sg5D0_entry;
         const 3;
         const 15;
 },
 sat_sg5CT_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Jj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9Jk; else goto cg9Jl;
       cg9Jk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9Jl: // global
           I64[Sp - 8] = block_cg9Jg_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9Jp; else goto cg9Jh;
       ug9Jp: // global
           call _cg9Jg(R1) args: 0, res: 0, upd: 0;
       cg9Jh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5CT_info" {
     sat_sg5CT_info:
         const sat_sg5CT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9Jg() //  [R1]
         { []
         }
     {offset
       cg9Jg: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Jg_info" {
     block_cg9Jg_info:
         const _cg9Jg;
         const 0;
         const 30;
 },
 sat_sg5CU_entry() //  [R1]
         { []
         }
     {offset
       cg9Jq: // global
           _sg5CU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9Jr; else goto cg9Js;
       cg9Js: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9Ju; else goto cg9Jt;
       cg9Ju: // global
           HpAlloc = 16;
           goto cg9Jr;
       cg9Jr: // global
           R1 = _sg5CU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5CU::P64;
           _sg5CI::P64 = P64[_sg5CU::P64 + 16];
           _sg5CL::P64 = P64[_sg5CU::P64 + 24];
           _sg5CN::P64 = P64[_sg5CU::P64 + 32];
           I64[Hp - 8] = sat_sg5CT_info;
           P64[Hp] = _sg5CL::P64;
           R2 = _sg5CI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5CN::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5CU_info" {
     sat_sg5CU_info:
         const sat_sg5CU_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadProduct_$c>>_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cg9Jv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cg9Jx; else goto cg9Jy;
       cg9Jx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$c>>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Jy: // global
           I64[Sp - 32] = block_cg9IE_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9JC; else goto cg9IF;
       ug9JC: // global
           call _cg9IE(R1) args: 0, res: 0, upd: 0;
       cg9IF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$c>>_info" {
     Data.Functor.Product.$fMonadProduct_$c>>_info:
         const Data.Functor.Product.$fMonadProduct_$c>>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9IE() //  [R1]
         { []
         }
     {offset
       cg9IE: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9JB; else goto cg9JA;
       cg9JB: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9JA: // global
           _sg5CN::P64 = P64[R1 + 7];
           _sg5CO::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5D0_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sg5CL::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sg5CL::P64;
           P64[Hp - 64] = _sg5CO::P64;
           I64[Hp - 56] = sat_sg5CU_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sg5CL::P64;
           P64[Hp - 24] = _sg5CN::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9IE_info" {
     block_cg9IE_info:
         const _cg9IE;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.01082334 UTC

[section ""data" . lvl4_rg5o1_closure" {
     lvl4_rg5o1_closure:
         const lvl4_rg5o1_info;
         const 0;
 },
 lvl4_rg5o1_entry() //  [R2]
         { []
         }
     {offset
       cg9Kl: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rg5o1_info" {
     lvl4_rg5o1_info:
         const lvl4_rg5o1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sg5Oh_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.016215219 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_closure" {
     Data.Functor.Product.$fMonadProduct_closure:
         const Data.Functor.Product.$fMonadProduct_info;
         const 0;
 },
 sat_sg5D7_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9KB: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadProduct_$creturn_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5D7_info" {
     sat_sg5D7_info:
         const sat_sg5D7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5D6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9KJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadProduct_$c>>_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5D6_info" {
     sat_sg5D6_info:
         const sat_sg5D6_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5D5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9KR: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadProduct_$c>>=_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5D5_info" {
     sat_sg5D5_info:
         const sat_sg5D5_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5D4_entry() //  [R1]
         { []
         }
     {offset
       cg9KY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9KZ; else goto cg9L0;
       cg9KZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9L0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadProduct_$cp1Monad_entry(R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5D4_info" {
     sat_sg5D4_info:
         const sat_sg5D4_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fMonadProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9L2: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cg9L6; else goto cg9L5;
       cg9L6: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9L5: // global
           I64[Hp - 144] = sat_sg5D7_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sg5D6_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sg5D5_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sg5D4_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 94;
           P64[Hp - 16] = Hp - 118;
           P64[Hp - 8] = Hp - 143;
           P64[Hp] = lvl4_rg5o1_closure+1;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_info" {
     Data.Functor.Product.$fMonadProduct_info:
         const Data.Functor.Product.$fMonadProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.029299439 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cmplus_info;
 },
 sat_sg5Dj_entry() //  [R1]
         { []
         }
     {offset
       cg9LL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9LM; else goto cg9LN;
       cg9LM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9LN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dj_info" {
     sat_sg5Dj_info:
         const sat_sg5Dj_entry;
         const 3;
         const 15;
 },
 sat_sg5Di_entry() //  [R1]
         { []
         }
     {offset
       cg9LS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9LT; else goto cg9LU;
       cg9LT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9LU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Di_info" {
     sat_sg5Di_info:
         const sat_sg5Di_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cg9LV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9LX; else goto cg9LY;
       cg9LX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9LY: // global
           I64[Sp - 32] = block_cg9Lx_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9M4; else goto cg9Ly;
       ug9M4: // global
           call _cg9Lx(R1) args: 0, res: 0, upd: 0;
       cg9Ly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cmplus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cmplus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9Lx() //  [R1]
         { []
         }
     {offset
       cg9Lx: // global
           I64[Sp - 8] = block_cg9LC_info;
           _sg5Dd::P64 = P64[R1 + 7];
           _sg5De::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5De::P64;
           P64[Sp + 24] = _sg5Dd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9M3; else goto cg9LD;
       ug9M3: // global
           call _cg9LC(R1) args: 0, res: 0, upd: 0;
       cg9LD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Lx_info" {
     block_cg9Lx_info:
         const _cg9Lx;
         const 3;
         const 30;
 },
 _cg9LC() //  [R1]
         { []
         }
     {offset
       cg9LC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9M2; else goto cg9M1;
       cg9M2: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9M1: // global
           _sg5Dg::P64 = P64[R1 + 7];
           _sg5Dh::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5Dj_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sg5Dh::P64;
           I64[Hp - 56] = sat_sg5Di_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sg5Dg::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9LC_info" {
     block_cg9LC_info:
         const _cg9LC;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.042629424 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cmzero_info;
 },
 sat_sg5Dn_entry() //  [R1]
         { []
         }
     {offset
       cg9MJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9MK; else goto cg9ML;
       cg9MK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dn_info" {
     sat_sg5Dn_info:
         const sat_sg5Dn_entry;
         const 1;
         const 16;
 },
 sat_sg5Dm_entry() //  [R1]
         { []
         }
     {offset
       cg9MQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9MR; else goto cg9MS;
       cg9MR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9MS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dm_info" {
     sat_sg5Dm_info:
         const sat_sg5Dm_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cg9MU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cg9MY; else goto cg9MX;
       cg9MY: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9MX: // global
           I64[Hp - 64] = sat_sg5Dn_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sg5Dm_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cmzero_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cmzero_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.051199946 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info;
         const 0;
 },
 sat_sg5Dr_entry() //  [R1]
         { []
         }
     {offset
       cg9Nm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Nn; else goto cg9No;
       cg9Nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9No: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dr_info" {
     sat_sg5Dr_info:
         const sat_sg5Dr_entry;
         const 1;
         const 16;
 },
 sat_sg5Dq_entry() //  [R1]
         { []
         }
     {offset
       cg9Nt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Nu; else goto cg9Nv;
       cg9Nu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Nv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dq_info" {
     sat_sg5Dq_info:
         const sat_sg5Dq_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cg9Nw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9NA; else goto cg9Nz;
       cg9NA: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Nz: // global
           I64[Hp - 40] = sat_sg5Dr_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5Dq_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sg5Oh_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.059796308 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info;
         const 0;
 },
 sat_sg5Dv_entry() //  [R1]
         { []
         }
     {offset
       cg9NV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9NW; else goto cg9NX;
       cg9NW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9NX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dv_info" {
     sat_sg5Dv_info:
         const sat_sg5Dv_entry;
         const 1;
         const 16;
 },
 sat_sg5Du_entry() //  [R1]
         { []
         }
     {offset
       cg9O2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9O3; else goto cg9O4;
       cg9O3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9O4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Du_info" {
     sat_sg5Du_info:
         const sat_sg5Du_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cg9O5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9O9; else goto cg9O8;
       cg9O9: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9O8: // global
           I64[Hp - 40] = sat_sg5Dv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5Du_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fAlternativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const Sg5Oh_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.07070914 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_closure" {
     Data.Functor.Product.$fMonadPlusProduct_closure:
         const Data.Functor.Product.$fMonadPlusProduct_info;
         const 0;
 },
 sat_sg5DB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9Ov: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5DB_info" {
     sat_sg5DB_info:
         const sat_sg5DB_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5DA_entry() //  [R1]
         { []
         }
     {offset
       cg9OC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9OD; else goto cg9OE;
       cg9OD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9OE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry(R3,
                                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DA_info" {
     sat_sg5DA_info:
         const sat_sg5DA_entry;
         const 2;
         const 18;
 },
 sat_sg5Dz_entry() //  [R1]
         { []
         }
     {offset
       cg9OJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9OK; else goto cg9OL;
       cg9OK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9OL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry(R3,
                                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dz_info" {
     sat_sg5Dz_info:
         const sat_sg5Dz_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+528;
 },
 sat_sg5Dy_entry() //  [R1]
         { []
         }
     {offset
       cg9OQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9OR; else goto cg9OS;
       cg9OR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9OS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry(R3,
                                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Dy_info" {
     sat_sg5Dy_info:
         const sat_sg5Dy_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+536;
 },
 Data.Functor.Product.$fMonadPlusProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9OU: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cg9OY; else goto cg9OX;
       cg9OY: // global
           HpAlloc = 160;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9OX: // global
           I64[Hp - 152] = sat_sg5DB_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sg5DA_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sg5Dz_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sg5Dy_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Base.C:MonadPlus_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = Hp - 150;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_info" {
     Data.Functor.Product.$fMonadPlusProduct_info:
         const Data.Functor.Product.$fMonadPlusProduct_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sg5Oh_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.083725061 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_$cmfix_closure" {
     Data.Functor.Product.$fMonadFixProduct_$cmfix_closure:
         const Data.Functor.Product.$fMonadFixProduct_$cmfix_info;
 },
 sat_sg5DP_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9PC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9PD; else goto cg9PE;
       cg9PD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9PE: // global
           I64[Sp - 8] = block_cg9PA_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5DP_info" {
     sat_sg5DP_info:
         const sat_sg5DP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9PA() //  [R1]
         { []
         }
     {offset
       cg9PA: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9PA_info" {
     block_cg9PA_info:
         const _cg9PA;
         const 0;
         const 30;
 },
 sat_sg5DQ_entry() //  [R1]
         { []
         }
     {offset
       cg9PI: // global
           _sg5DQ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg9PJ; else goto cg9PK;
       cg9PK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9PM; else goto cg9PL;
       cg9PM: // global
           HpAlloc = 16;
           goto cg9PJ;
       cg9PJ: // global
           R1 = _sg5DQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9PL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5DQ::P64;
           _sg5DD::P64 = P64[_sg5DQ::P64 + 16];
           _sg5DE::P64 = P64[_sg5DQ::P64 + 24];
           I64[Hp - 8] = sat_sg5DP_info;
           P64[Hp] = _sg5DE::P64;
           R2 = _sg5DD::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DQ_info" {
     sat_sg5DQ_info:
         const sat_sg5DQ_entry;
         const 2;
         const 18;
 },
 sat_sg5DJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9PY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9PZ; else goto cg9Q0;
       cg9PZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9Q0: // global
           I64[Sp - 8] = block_cg9PW_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5DJ_info" {
     sat_sg5DJ_info:
         const sat_sg5DJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cg9PW() //  [R1]
         { []
         }
     {offset
       cg9PW: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9PW_info" {
     block_cg9PW_info:
         const _cg9PW;
         const 0;
         const 30;
 },
 sat_sg5DK_entry() //  [R1]
         { []
         }
     {offset
       cg9Q4: // global
           _sg5DK::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cg9Q5; else goto cg9Q6;
       cg9Q6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cg9Q8; else goto cg9Q7;
       cg9Q8: // global
           HpAlloc = 16;
           goto cg9Q5;
       cg9Q5: // global
           R1 = _sg5DK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Q7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5DK::P64;
           _sg5DC::P64 = P64[_sg5DK::P64 + 16];
           _sg5DE::P64 = P64[_sg5DK::P64 + 24];
           I64[Hp - 8] = sat_sg5DJ_info;
           P64[Hp] = _sg5DE::P64;
           R2 = _sg5DC::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DK_info" {
     sat_sg5DK_info:
         const sat_sg5DK_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fMonadFixProduct_$cmfix_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cg9Qa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg9Qe; else goto cg9Qd;
       cg9Qe: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_$cmfix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Qd: // global
           I64[Hp - 80] = sat_sg5DQ_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sg5DK_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_$cmfix_info" {
     Data.Functor.Product.$fMonadFixProduct_$cmfix_info:
         const Data.Functor.Product.$fMonadFixProduct_$cmfix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.099831354 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure" {
     Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure:
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info;
         const 0;
 },
 sat_sg5DU_entry() //  [R1]
         { []
         }
     {offset
       cg9QS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9QT; else goto cg9QU;
       cg9QT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9QU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DU_info" {
     sat_sg5DU_info:
         const sat_sg5DU_entry;
         const 1;
         const 16;
 },
 sat_sg5DT_entry() //  [R1]
         { []
         }
     {offset
       cg9QZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9R0; else goto cg9R1;
       cg9R0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9R1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DT_info" {
     sat_sg5DT_info:
         const sat_sg5DT_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cg9R2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9R6; else goto cg9R5;
       cg9R6: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9R5: // global
           I64[Hp - 40] = sat_sg5DU_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5DT_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info" {
     Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info:
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const Sg5Oh_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.108413959 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_closure" {
     Data.Functor.Product.$fMonadFixProduct_closure:
         const Data.Functor.Product.$fMonadFixProduct_info;
         const 0;
 },
 sat_sg5DY_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Rs: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadFixProduct_$cmfix_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5DY_info" {
     sat_sg5DY_info:
         const sat_sg5DY_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5DX_entry() //  [R1]
         { []
         }
     {offset
       cg9Rz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9RA; else goto cg9RB;
       cg9RA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9RB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5DX_info" {
     sat_sg5DX_info:
         const sat_sg5DX_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+552;
 },
 Data.Functor.Product.$fMonadFixProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9RD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cg9RH; else goto cg9RG;
       cg9RH: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9RG: // global
           I64[Hp - 72] = sat_sg5DY_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sg5DX_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_info" {
     Data.Functor.Product.$fMonadFixProduct_info:
         const Data.Functor.Product.$fMonadFixProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.118602258 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info;
 },
 sat_sg5Eb_entry() //  [R1]
         { []
         }
     {offset
       cg9Se: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9Sf; else goto cg9Sg;
       cg9Sf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Sg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Eb_info" {
     sat_sg5Eb_info:
         const sat_sg5Eb_entry;
         const 4;
         const 15;
 },
 sat_sg5Ea_entry() //  [R1]
         { []
         }
     {offset
       cg9Sl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9Sm; else goto cg9Sn;
       cg9Sm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Sn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Ea_info" {
     sat_sg5Ea_info:
         const sat_sg5Ea_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cg9So: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9Sq; else goto cg9Sr;
       cg9Sq: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Sr: // global
           I64[Sp - 40] = block_cg9S0_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9Sx; else goto cg9S1;
       ug9Sx: // global
           call _cg9S0(R1) args: 0, res: 0, upd: 0;
       cg9S1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cg9S0() //  [R1]
         { []
         }
     {offset
       cg9S0: // global
           I64[Sp - 8] = block_cg9S5_info;
           _sg5E5::P64 = P64[R1 + 7];
           _sg5E6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sg5E6::P64;
           P64[Sp + 32] = _sg5E5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9Sw; else goto cg9S6;
       ug9Sw: // global
           call _cg9S5(R1) args: 0, res: 0, upd: 0;
       cg9S6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9S0_info" {
     block_cg9S0_info:
         const _cg9S0;
         const 4;
         const 30;
 },
 _cg9S5() //  [R1]
         { []
         }
     {offset
       cg9S5: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cg9Sv; else goto cg9Su;
       cg9Sv: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9Su: // global
           _sg5E8::P64 = P64[R1 + 7];
           _sg5E9::P64 = P64[R1 + 15];
           I64[Hp - 112] = sat_sg5Eb_info;
           P64[Hp - 96] = P64[Sp + 24];
           _sg5E1::P64 = P64[Sp + 32];
           P64[Hp - 88] = _sg5E1::P64;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _sg5E9::P64;
           I64[Hp - 64] = sat_sg5Ea_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _sg5E1::P64;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _sg5E8::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9S5_info" {
     block_cg9S5_info:
         const _cg9S5;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.131736493 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info;
         const 0;
 },
 sat_sg5Ef_entry() //  [R1]
         { []
         }
     {offset
       cg9Te: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Tf; else goto cg9Tg;
       cg9Tf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Tg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Ef_info" {
     sat_sg5Ef_info:
         const sat_sg5Ef_entry;
         const 1;
         const 16;
 },
 sat_sg5Ee_entry() //  [R1]
         { []
         }
     {offset
       cg9Tl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Tm; else goto cg9Tn;
       cg9Tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Ee_info" {
     sat_sg5Ee_info:
         const sat_sg5Ee_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cg9To: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cg9Ts; else goto cg9Tr;
       cg9Ts: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Tr: // global
           I64[Hp - 40] = sat_sg5Ef_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sg5Ee_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const Sg5Oh_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.141371593 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmzip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmzip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmzip_info;
 },
 sat_sg5Er_entry() //  [R1]
         { []
         }
     {offset
       cg9TX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9TY; else goto cg9TZ;
       cg9TY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9TZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Er_info" {
     sat_sg5Er_info:
         const sat_sg5Er_entry;
         const 3;
         const 15;
 },
 sat_sg5Eq_entry() //  [R1]
         { []
         }
     {offset
       cg9U4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cg9U5; else goto cg9U6;
       cg9U5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9U6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Eq_info" {
     sat_sg5Eq_info:
         const sat_sg5Eq_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmzip_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cg9U7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9U9; else goto cg9Ua;
       cg9U9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmzip_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Ua: // global
           I64[Sp - 32] = block_cg9TJ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ug9Ug; else goto cg9TK;
       ug9Ug: // global
           call _cg9TJ(R1) args: 0, res: 0, upd: 0;
       cg9TK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmzip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmzip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmzip_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cg9TJ() //  [R1]
         { []
         }
     {offset
       cg9TJ: // global
           I64[Sp - 8] = block_cg9TO_info;
           _sg5El::P64 = P64[R1 + 7];
           _sg5Em::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sg5Em::P64;
           P64[Sp + 24] = _sg5El::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ug9Uf; else goto cg9TP;
       ug9Uf: // global
           call _cg9TO(R1) args: 0, res: 0, upd: 0;
       cg9TP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9TJ_info" {
     block_cg9TJ_info:
         const _cg9TJ;
         const 3;
         const 30;
 },
 _cg9TO() //  [R1]
         { []
         }
     {offset
       cg9TO: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cg9Ue; else goto cg9Ud;
       cg9Ue: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cg9Ud: // global
           _sg5Eo::P64 = P64[R1 + 7];
           _sg5Ep::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sg5Er_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sg5Ep::P64;
           I64[Hp - 56] = sat_sg5Eq_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sg5Eo::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9TO_info" {
     block_cg9TO_info:
         const _cg9TO;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.164303426 UTC

[section ""data" . Data.Functor.Product.$w$cmunzip_closure" {
     Data.Functor.Product.$w$cmunzip_closure:
         const Data.Functor.Product.$w$cmunzip_info;
 },
 $dMonad_sg5Ev_entry() //  [R1]
         { []
         }
     {offset
       cg9UV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9UW; else goto cg9UX;
       cg9UW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9UX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonad_sg5Ev_info" {
     $dMonad_sg5Ev_info:
         const $dMonad_sg5Ev_entry;
         const 1;
         const 16;
 },
 $dMonad1_sg5Ew_entry() //  [R1]
         { []
         }
     {offset
       cg9V2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9V3; else goto cg9V4;
       cg9V3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9V4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonad1_sg5Ew_info" {
     $dMonad1_sg5Ew_info:
         const $dMonad1_sg5Ew_entry;
         const 1;
         const 16;
 },
 lvl9_sg5F2_entry() //  [R1]
         { []
         }
     {offset
       cg9Vm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Vn; else goto cg9Vo;
       cg9Vn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Vo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5F2_info" {
     lvl9_sg5F2_info:
         const lvl9_sg5F2_entry;
         const 1;
         const 16;
 },
 sat_sg5F8_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Vv: // global
           _sg5F3::P64 = R2;
           _sg5F8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Vw; else goto cg9Vx;
       cg9Vx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9Vz; else goto cg9Vy;
       cg9Vz: // global
           HpAlloc = 24;
           goto cg9Vw;
       cg9Vw: // global
           R2 = _sg5F3::P64;
           R1 = _sg5F8::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9Vy: // global
           _sg5F2::P64 = P64[_sg5F8::P64 + 7];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sg5F3::P64;
           R2 = _sg5F2::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5F8_info" {
     sat_sg5F8_info:
         const sat_sg5F8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg5F9_entry() //  [R1]
         { []
         }
     {offset
       cg9VA: // global
           _sg5F9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9VB; else goto cg9VC;
       cg9VC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg9VE; else goto cg9VD;
       cg9VE: // global
           HpAlloc = 40;
           goto cg9VB;
       cg9VB: // global
           R1 = _sg5F9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9VD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5F9::P64;
           _sg5Ew::P64 = P64[_sg5F9::P64 + 16];
           _sg5ET::P64 = P64[_sg5F9::P64 + 24];
           I64[Hp - 32] = lvl9_sg5F2_info;
           P64[Hp - 16] = _sg5Ew::P64;
           I64[Hp - 8] = sat_sg5F8_info;
           P64[Hp] = Hp - 32;
           R2 = _sg5Ew::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5ET::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5F9_info" {
     sat_sg5F9_info:
         const sat_sg5F9_entry;
         const 2;
         const 18;
 },
 lvl9_sg5EU_entry() //  [R1]
         { []
         }
     {offset
       cg9VN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9VO; else goto cg9VP;
       cg9VO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9VP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5EU_info" {
     lvl9_sg5EU_info:
         const lvl9_sg5EU_entry;
         const 1;
         const 16;
 },
 sat_sg5F0_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9VW: // global
           _sg5EV::P64 = R2;
           _sg5F0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg9VX; else goto cg9VY;
       cg9VY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9W0; else goto cg9VZ;
       cg9W0: // global
           HpAlloc = 24;
           goto cg9VX;
       cg9VX: // global
           R2 = _sg5EV::P64;
           R1 = _sg5F0::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9VZ: // global
           _sg5EU::P64 = P64[_sg5F0::P64 + 7];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sg5EV::P64;
           R2 = _sg5EU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5F0_info" {
     sat_sg5F0_info:
         const sat_sg5F0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg5F1_entry() //  [R1]
         { []
         }
     {offset
       cg9W1: // global
           _sg5F1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9W2; else goto cg9W3;
       cg9W3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg9W5; else goto cg9W4;
       cg9W5: // global
           HpAlloc = 40;
           goto cg9W2;
       cg9W2: // global
           R1 = _sg5F1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9W4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5F1::P64;
           _sg5Ev::P64 = P64[_sg5F1::P64 + 16];
           _sg5ES::P64 = P64[_sg5F1::P64 + 24];
           I64[Hp - 32] = lvl9_sg5EU_info;
           P64[Hp - 16] = _sg5Ev::P64;
           I64[Hp - 8] = sat_sg5F0_info;
           P64[Hp] = Hp - 32;
           R2 = _sg5Ev::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5ES::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5F1_info" {
     sat_sg5F1_info:
         const sat_sg5F1_entry;
         const 2;
         const 18;
 },
 sat_sg5Fa_entry() //  [R1]
         { []
         }
     {offset
       cg9W6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9W8; else goto cg9W9;
       cg9W8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9W9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg9V9_info;
           _sg5Ev::P64 = P64[R1 + 24];
           _sg5Ew::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sg5Ev::P64;
           P64[Sp - 24] = _sg5Ew::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9Wd; else goto cg9Va;
       ug9Wd: // global
           call _cg9V9(R1) args: 0, res: 0, upd: 0;
       cg9Va: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Fa_info" {
     sat_sg5Fa_info:
         const sat_sg5Fa_entry;
         const 3;
         const 15;
 },
 _cg9V9() //  [R1]
         { []
         }
     {offset
       cg9V9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg9Wc; else goto cg9Wb;
       cg9Wc: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg9Wb: // global
           _sg5ES::P64 = P64[R1 + 7];
           _sg5ET::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sg5F9_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sg5ET::P64;
           I64[Hp - 48] = sat_sg5F1_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg5ES::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9V9_info" {
     block_cg9V9_info:
         const _cg9V9;
         const 2;
         const 30;
 },
 lvl9_sg5EI_entry() //  [R1]
         { []
         }
     {offset
       cg9Wv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9Ww; else goto cg9Wx;
       cg9Ww: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Wx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5EI_info" {
     lvl9_sg5EI_info:
         const lvl9_sg5EI_entry;
         const 1;
         const 16;
 },
 sat_sg5EO_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9WE: // global
           _sg5EJ::P64 = R2;
           _sg5EO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg9WF; else goto cg9WG;
       cg9WG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9WI; else goto cg9WH;
       cg9WI: // global
           HpAlloc = 24;
           goto cg9WF;
       cg9WF: // global
           R2 = _sg5EJ::P64;
           R1 = _sg5EO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9WH: // global
           _sg5EI::P64 = P64[_sg5EO::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sg5EJ::P64;
           R2 = _sg5EI::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5EO_info" {
     sat_sg5EO_info:
         const sat_sg5EO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg5EP_entry() //  [R1]
         { []
         }
     {offset
       cg9WJ: // global
           _sg5EP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9WK; else goto cg9WL;
       cg9WL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg9WN; else goto cg9WM;
       cg9WN: // global
           HpAlloc = 40;
           goto cg9WK;
       cg9WK: // global
           R1 = _sg5EP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9WM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5EP::P64;
           _sg5Ew::P64 = P64[_sg5EP::P64 + 16];
           _sg5Ez::P64 = P64[_sg5EP::P64 + 24];
           I64[Hp - 32] = lvl9_sg5EI_info;
           P64[Hp - 16] = _sg5Ew::P64;
           I64[Hp - 8] = sat_sg5EO_info;
           P64[Hp] = Hp - 32;
           R2 = _sg5Ew::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5Ez::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5EP_info" {
     sat_sg5EP_info:
         const sat_sg5EP_entry;
         const 2;
         const 18;
 },
 lvl9_sg5EA_entry() //  [R1]
         { []
         }
     {offset
       cg9WW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9WX; else goto cg9WY;
       cg9WX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9WY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5EA_info" {
     lvl9_sg5EA_info:
         const lvl9_sg5EA_entry;
         const 1;
         const 16;
 },
 sat_sg5EG_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9X5: // global
           _sg5EB::P64 = R2;
           _sg5EG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cg9X6; else goto cg9X7;
       cg9X7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9X9; else goto cg9X8;
       cg9X9: // global
           HpAlloc = 24;
           goto cg9X6;
       cg9X6: // global
           R2 = _sg5EB::P64;
           R1 = _sg5EG::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cg9X8: // global
           _sg5EA::P64 = P64[_sg5EG::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sg5EB::P64;
           R2 = _sg5EA::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5EG_info" {
     sat_sg5EG_info:
         const sat_sg5EG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sg5EH_entry() //  [R1]
         { []
         }
     {offset
       cg9Xa: // global
           _sg5EH::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cg9Xb; else goto cg9Xc;
       cg9Xc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cg9Xe; else goto cg9Xd;
       cg9Xe: // global
           HpAlloc = 40;
           goto cg9Xb;
       cg9Xb: // global
           R1 = _sg5EH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Xd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5EH::P64;
           _sg5Ev::P64 = P64[_sg5EH::P64 + 16];
           _sg5Ey::P64 = P64[_sg5EH::P64 + 24];
           I64[Hp - 32] = lvl9_sg5EA_info;
           P64[Hp - 16] = _sg5Ev::P64;
           I64[Hp - 8] = sat_sg5EG_info;
           P64[Hp] = Hp - 32;
           R2 = _sg5Ev::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5Ey::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5EH_info" {
     sat_sg5EH_info:
         const sat_sg5EH_entry;
         const 2;
         const 18;
 },
 sat_sg5EQ_entry() //  [R1]
         { []
         }
     {offset
       cg9Xf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cg9Xh; else goto cg9Xi;
       cg9Xh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9Xi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cg9Wi_info;
           _sg5Ev::P64 = P64[R1 + 24];
           _sg5Ew::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sg5Ev::P64;
           P64[Sp - 24] = _sg5Ew::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ug9Xm; else goto cg9Wj;
       ug9Xm: // global
           call _cg9Wi(R1) args: 0, res: 0, upd: 0;
       cg9Wj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5EQ_info" {
     sat_sg5EQ_info:
         const sat_sg5EQ_entry;
         const 3;
         const 15;
 },
 _cg9Wi() //  [R1]
         { []
         }
     {offset
       cg9Wi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cg9Xl; else goto cg9Xk;
       cg9Xl: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cg9Xk: // global
           _sg5Ey::P64 = P64[R1 + 7];
           _sg5Ez::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sg5EP_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sg5Ez::P64;
           I64[Hp - 48] = sat_sg5EH_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg5Ey::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cg9Wi_info" {
     block_cg9Wi_info:
         const _cg9Wi;
         const 2;
         const 30;
 },
 Data.Functor.Product.$w$cmunzip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cg9Xn: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cg9Xr; else goto cg9Xq;
       cg9Xr: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cmunzip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Xq: // global
           I64[Hp - 120] = $dMonad_sg5Ev_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dMonad1_sg5Ew_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sg5Fa_info;
           P64[Hp - 56] = R4;
           _cg9UR::P64 = Hp - 120;
           P64[Hp - 48] = _cg9UR::P64;
           _cg9UY::P64 = Hp - 96;
           P64[Hp - 40] = _cg9UY::P64;
           I64[Hp - 32] = sat_sg5EQ_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cg9UR::P64;
           P64[Hp] = _cg9UY::P64;
           R2 = Hp - 72;
           R1 = Hp - 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cmunzip_info" {
     Data.Functor.Product.$w$cmunzip_info:
         const Data.Functor.Product.$w$cmunzip_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.202093928 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmunzip_info;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cg9Za: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cg9Zb; else goto cg9Zc;
       cg9Zb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cg9Zc: // global
           I64[Sp - 8] = block_cg9Z7_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Functor.Product.$w$cmunzip_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmunzip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmunzip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cg9Z7() //  [R1, R2]
         { []
         }
     {offset
       cg9Z7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cg9Zf; else goto cg9Ze;
       cg9Zf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cg9Ze: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cg9Z7_info" {
     block_cg9Z7_info:
         const _cg9Z7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.209543484 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_closure" {
     Data.Functor.Product.$fMonadZipProduct_closure:
         const Data.Functor.Product.$fMonadZipProduct_info;
         const 0;
 },
 sat_sg5Fm_entry() //  [R1, R2]
         { []
         }
     {offset
       cg9Zy: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Fm_info" {
     sat_sg5Fm_info:
         const sat_sg5Fm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5Fl_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cg9ZG: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry(R6,
                                                                        R5,
                                                                        R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Fl_info" {
     sat_sg5Fl_info:
         const sat_sg5Fl_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5Fk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cg9ZO: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadZipProduct_$cmzip_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Fk_info" {
     sat_sg5Fk_info:
         const sat_sg5Fk_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sg5Fj_entry() //  [R1]
         { []
         }
     {offset
       cg9ZV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cg9ZW; else goto cg9ZX;
       cg9ZW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cg9ZX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Fj_info" {
     sat_sg5Fj_info:
         const sat_sg5Fj_entry;
         const 2;
         const 4294967314;
         const Sg5Oh_srt+568;
 },
 Data.Functor.Product.$fMonadZipProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cg9ZZ: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cga03; else goto cga02;
       cga03: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cga02: // global
           I64[Hp - 136] = sat_sg5Fm_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sg5Fl_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sg5Fk_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sg5Fj_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Control.Monad.Zip.C:MonadZip_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 86;
           P64[Hp - 8] = Hp - 109;
           P64[Hp] = Hp - 135;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_info" {
     Data.Functor.Product.$fMonadZipProduct_info:
         const Data.Functor.Product.$fMonadZipProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sg5Oh_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.221334317 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product_$cto1_closure" {
     Data.Functor.Product.$fGeneric1Product_$cto1_closure:
         const Data.Functor.Product.$fGeneric1Product_$cto1_info;
 },
 Data.Functor.Product.$fGeneric1Product_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cga0w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cga0A; else goto cga0B;
       cga0A: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGeneric1Product_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga0B: // global
           I64[Sp - 8] = block_cga0u_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGeneric1Product_$cto1_info" {
     Data.Functor.Product.$fGeneric1Product_$cto1_info:
         const Data.Functor.Product.$fGeneric1Product_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cga0u() //  [R1]
         { []
         }
     {offset
       cga0u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga0E; else goto cga0D;
       cga0E: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga0D: // global
           _sg5Fp::P64 = P64[R1 + 7];
           _sg5Fq::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sg5Fp::P64;
           P64[Hp] = _sg5Fq::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga0u_info" {
     block_cga0u_info:
         const _cga0u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.227860316 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product1_closure" {
     Data.Functor.Product.$fGeneric1Product1_closure:
         const Data.Functor.Product.$fGeneric1Product1_info;
 },
 Data.Functor.Product.$fGeneric1Product1_entry() //  [R2]
         { []
         }
     {offset
       cga0V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cga0Z; else goto cga10;
       cga0Z: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGeneric1Product1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga10: // global
           I64[Sp - 8] = block_cga0S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga14; else goto cga0T;
       uga14: // global
           call _cga0S(R1) args: 0, res: 0, upd: 0;
       cga0T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGeneric1Product1_info" {
     Data.Functor.Product.$fGeneric1Product1_info:
         const Data.Functor.Product.$fGeneric1Product1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cga0S() //  [R1]
         { []
         }
     {offset
       cga0S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga13; else goto cga12;
       cga13: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga12: // global
           _sg5Ft::P64 = P64[R1 + 7];
           _sg5Fu::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sg5Ft::P64;
           P64[Hp] = _sg5Fu::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga0S_info" {
     block_cga0S_info:
         const _cga0S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.233107719 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product_closure" {
     Data.Functor.Product.$fGeneric1Product_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Product.$fGeneric1Product1_closure+1;
         const Data.Functor.Product.$fGeneric1Product_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.236102035 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct_$cto_closure" {
     Data.Functor.Product.$fGenericProduct_$cto_closure:
         const Data.Functor.Product.$fGenericProduct_$cto_info;
 },
 Data.Functor.Product.$fGenericProduct_$cto_entry() //  [R2]
         { []
         }
     {offset
       cga1m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cga1q; else goto cga1r;
       cga1q: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGenericProduct_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga1r: // global
           I64[Sp - 8] = block_cga1k_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGenericProduct_$cto_info" {
     Data.Functor.Product.$fGenericProduct_$cto_info:
         const Data.Functor.Product.$fGenericProduct_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cga1k() //  [R1]
         { []
         }
     {offset
       cga1k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga1u; else goto cga1t;
       cga1u: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga1t: // global
           _sg5Fx::P64 = P64[R1 + 7];
           _sg5Fy::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sg5Fx::P64;
           P64[Hp] = _sg5Fy::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga1k_info" {
     block_cga1k_info:
         const _cga1k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.243056388 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct1_closure" {
     Data.Functor.Product.$fGenericProduct1_closure:
         const Data.Functor.Product.$fGenericProduct1_info;
 },
 Data.Functor.Product.$fGenericProduct1_entry() //  [R2]
         { []
         }
     {offset
       cga1L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cga1P; else goto cga1Q;
       cga1P: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGenericProduct1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga1Q: // global
           I64[Sp - 8] = block_cga1I_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga1U; else goto cga1J;
       uga1U: // global
           call _cga1I(R1) args: 0, res: 0, upd: 0;
       cga1J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGenericProduct1_info" {
     Data.Functor.Product.$fGenericProduct1_info:
         const Data.Functor.Product.$fGenericProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cga1I() //  [R1]
         { []
         }
     {offset
       cga1I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga1T; else goto cga1S;
       cga1T: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga1S: // global
           _sg5FB::P64 = P64[R1 + 7];
           _sg5FC::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sg5FB::P64;
           P64[Hp] = _sg5FC::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga1I_info" {
     block_cga1I_info:
         const _cga1I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.248219541 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct_closure" {
     Data.Functor.Product.$fGenericProduct_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Product.$fGenericProduct1_closure+1;
         const Data.Functor.Product.$fGenericProduct_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.253545967 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgfoldl_closure" {
     Data.Functor.Product.$fDataProduct_$cgfoldl_closure:
         const Data.Functor.Product.$fDataProduct_$cgfoldl_info;
 },
 Data.Functor.Product.$fDataProduct_$cgfoldl_slow() //  [R1]
         { []
         }
     {offset
       cga27: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgfoldl_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sg5FP_entry() //  [R1]
         { []
         }
     {offset
       cga2o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cga2p; else goto cga2q;
       cga2p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga2q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Product.Pair_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5FP_info" {
     sat_sg5FP_info:
         const sat_sg5FP_entry;
         const 1;
         const 16;
 },
 sat_sg5FQ_entry() //  [R1]
         { []
         }
     {offset
       cga2r: // global
           _sg5FQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cga2s; else goto cga2t;
       cga2t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga2v; else goto cga2u;
       cga2v: // global
           HpAlloc = 24;
           goto cga2s;
       cga2s: // global
           R1 = _sg5FQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga2u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5FQ::P64;
           _sg5FH::P64 = P64[_sg5FQ::P64 + 16];
           _sg5FJ::P64 = P64[_sg5FQ::P64 + 24];
           _sg5FK::P64 = P64[_sg5FQ::P64 + 32];
           _sg5FN::P64 = P64[_sg5FQ::P64 + 40];
           I64[Hp - 16] = sat_sg5FP_info;
           P64[Hp] = _sg5FK::P64;
           R4 = _sg5FN::P64;
           R3 = Hp - 16;
           R2 = _sg5FH::P64;
           R1 = _sg5FJ::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5FQ_info" {
     sat_sg5FQ_info:
         const sat_sg5FQ_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fDataProduct_$cgfoldl_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cga2w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cga2x; else goto cga2y;
       cga2x: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgfoldl_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cga2y: // global
           I64[Sp - 8] = block_cga2b_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga2C; else goto cga2c;
       uga2C: // global
           call _cga2b(R1) args: 0, res: 0, upd: 0;
       cga2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgfoldl_info" {
     Data.Functor.Product.$fDataProduct_$cgfoldl_info:
         const Data.Functor.Product.$fDataProduct_$cgfoldl_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgfoldl_slow;
 },
 _cga2b() //  [R1]
         { []
         }
     {offset
       cga2b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cga2B; else goto cga2A;
       cga2B: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga2A: // global
           _sg5FN::P64 = P64[R1 + 7];
           _sg5FO::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sg5FQ_info;
           P64[Hp - 24] = P64[Sp + 32];
           _sg5FJ::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sg5FJ::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sg5FN::P64;
           R4 = _sg5FO::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 8];
           R1 = _sg5FJ::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga2b_info" {
     block_cga2b_info:
         const _cga2b;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.263532798 UTC

[section ""cstring" . Data.Functor.Product.$fDataProduct6_bytes" {
     Data.Functor.Product.$fDataProduct6_bytes:
         I8[] [80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.266526783 UTC

[section ""data" . Data.Functor.Product.$fDataProduct5_closure" {
     Data.Functor.Product.$fDataProduct5_closure:
         const Data.Functor.Product.$fDataProduct5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fDataProduct5_entry() //  [R1]
         { []
         }
     {offset
       cga35: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cga36; else goto cga37;
       cga36: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga37: // global
           (_cga32::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cga32::I64 == 0) goto cga34; else goto cga33;
       cga34: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cga33: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cga32::I64;
           R2 = Data.Functor.Product.$fDataProduct6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct5_info" {
     Data.Functor.Product.$fDataProduct5_info:
         const Data.Functor.Product.$fDataProduct5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.273413971 UTC

[section ""data" . go61_rg5o2_closure" {
     go61_rg5o2_closure:
         const go61_rg5o2_info;
         const 0;
 },
 go61_rg5o2_entry() //  [R2, R3]
         { []
         }
     {offset
       cga3q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cga3r; else goto uga44;
       cga3r: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rg5o2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uga44: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cga3g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rg5o2_info" {
     go61_rg5o2_info:
         const go61_rg5o2_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sg5Oh_srt+584;
 },
 _cga3g() //  []
         { []
         }
     {offset
       cga3g: // global
           _sg5FR::P64 = P64[Sp];
           I64[Sp] = block_cga3j_info;
           R1 = _sg5FR::P64;
           if (R1 & 7 != 0) goto uga48; else goto cga3k;
       uga48: // global
           call _cga3j(R1) args: 0, res: 0, upd: 0;
       cga3k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cga3j() //  [R1]
         { []
         }
     {offset
       cga3j: // global
           if (R1 & 7 == 1) goto uga45; else goto cga3o;
       uga45: // global
           Sp = Sp + 16;
           call _cga3G() args: 0, res: 0, upd: 0;
       cga3o: // global
           I64[Sp - 8] = block_cga3y_info;
           _sg5FU::P64 = P64[R1 + 6];
           _sg5FV::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sg5FV::P64;
           P64[Sp + 8] = _sg5FU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga49; else goto cga3A;
       uga49: // global
           call _cga3y(R1) args: 0, res: 0, upd: 0;
       cga3A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga3j_info" {
     block_cga3j_info:
         const _cga3j;
         const 1;
         const 21474836510;
         const Sg5Oh_srt+584;
 },
 _cga3y() //  [R1]
         { []
         }
     {offset
       cga3y: // global
           if (R1 & 7 == 1) goto uga46; else goto cga3L;
       uga46: // global
           Sp = Sp + 24;
           call _cga3G() args: 0, res: 0, upd: 0;
       cga3L: // global
           I64[Sp - 8] = block_cga3J_info;
           _sg5FX::P64 = P64[R1 + 6];
           _sg5FY::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sg5FY::P64;
           P64[Sp + 16] = _sg5FX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga4c; else goto cga3M;
       uga4c: // global
           call _cga3J(R1) args: 0, res: 0, upd: 0;
       cga3M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga3y_info" {
     block_cga3y_info:
         const _cga3y;
         const 2;
         const 21474836510;
         const Sg5Oh_srt+584;
 },
 _cga3G() //  []
         { []
         }
     {offset
       cga3G: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cga3J() //  [R1]
         { []
         }
     {offset
       cga3J: // global
           I64[Sp] = block_cga3Q_info;
           R3 = Data.Functor.Product.$fRead1Product2_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga3J_info" {
     block_cga3J_info:
         const _cga3J;
         const 3;
         const 21474836510;
         const Sg5Oh_srt+584;
 },
 _cga3Q() //  [R1]
         { []
         }
     {offset
       cga3Q: // global
           if (R1 & 7 == 1) goto cga3X; else goto cga41;
       cga3X: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cga3g() args: 0, res: 0, upd: 0;
       cga41: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga3Q_info" {
     block_cga3Q_info:
         const _cga3Q;
         const 3;
         const 21474836510;
         const Sg5Oh_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.286160259 UTC

[section ""data" . $cPair1_rg5o3_closure" {
     $cPair1_rg5o3_closure:
         const Data.Data.AlgConstr_con_info;
         const $cPair2_rg5o4_closure;
         const 0;
 },
 section ""data" . Data.Functor.Product.$fDataProduct4_closure" {
     Data.Functor.Product.$fDataProduct4_closure:
         const :_con_info;
         const Data.Functor.Product.$cPair_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Product.$fDataProduct3_closure" {
     Data.Functor.Product.$fDataProduct3_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Functor.Product.$fDataProduct4_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Product.$tProduct_closure" {
     Data.Functor.Product.$tProduct_closure:
         const Data.Data.DataType_con_info;
         const Data.Functor.Product.$fDataProduct5_closure;
         const Data.Functor.Product.$fDataProduct3_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Product.$cPair_closure" {
     Data.Functor.Product.$cPair_closure:
         const Data.Data.Constr_con_info;
         const $cPair1_rg5o3_closure+1;
         const Data.Functor.Product.$fRead1Product2_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Product.$tProduct_closure+1;
         const 0;
 },
 section ""data" . $cPair2_rg5o4_closure" {
     $cPair2_rg5o4_closure:
         const $cPair2_rg5o4_info;
         const 0;
         const 0;
         const 0;
 },
 $cPair2_rg5o4_entry() //  [R1]
         { []
         }
     {offset
       cga4T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cga4U; else goto cga4V;
       cga4U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga4V: // global
           (_cga4Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cga4Q::I64 == 0) goto cga4S; else goto cga4R;
       cga4S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cga4R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cga4Q::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Functor.Product.$fDataProduct4_closure+2;
           Sp = Sp - 16;
           call go61_rg5o2_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cPair2_rg5o4_info" {
     $cPair2_rg5o4_info:
         const $cPair2_rg5o4_entry;
         const 0;
         const 55834574869;
         const Sg5Oh_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.29319906 UTC

[section ""cstring" . Data.Functor.Product.$trModule4_bytes" {
     Data.Functor.Product.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.295066924 UTC

[section ""data" . Data.Functor.Product.$trModule3_closure" {
     Data.Functor.Product.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.296938042 UTC

[section ""cstring" . Data.Functor.Product.$trModule2_bytes" {
     Data.Functor.Product.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.299672404 UTC

[section ""data" . Data.Functor.Product.$trModule1_closure" {
     Data.Functor.Product.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.301376424 UTC

[section ""data" . Data.Functor.Product.$trModule_closure" {
     Data.Functor.Product.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Product.$trModule3_closure+1;
         const Data.Functor.Product.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.303121152 UTC

[section ""data" . $krep_rg5o5_closure" {
     $krep_rg5o5_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.30479215 UTC

[section ""data" . $krep1_rg5o6_closure" {
     $krep1_rg5o6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rg5o5_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.306591081 UTC

[section ""data" . $krep2_rg5o7_closure" {
     $krep2_rg5o7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rg5o6_closure+4;
         const $krep1_rg5o6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.308420639 UTC

[section ""data" . Data.Functor.Product.$fDataProduct8_closure" {
     Data.Functor.Product.$fDataProduct8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rg5o6_closure+4;
         const $krep2_rg5o7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.310224365 UTC

[section ""data" . $krep3_rg5o8_closure" {
     $krep3_rg5o8_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.312001246 UTC

[section ""data" . $krep4_rg5o9_closure" {
     $krep4_rg5o9_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.313706677 UTC

[section ""data" . $krep5_rg5oa_closure" {
     $krep5_rg5oa_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.315511961 UTC

[section ""data" . $krep6_rg5ob_closure" {
     $krep6_rg5ob_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_rg5o9_closure+2;
         const $krep5_rg5oa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.317924593 UTC

[section ""data" . $krep7_rg5oc_closure" {
     $krep7_rg5oc_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep3_rg5o8_closure+2;
         const $krep5_rg5oa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.319728495 UTC

[section ""data" . Data.Functor.Product.$fDataProduct9_closure" {
     Data.Functor.Product.$fDataProduct9_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$fDataProduct6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.321744488 UTC

[section ""data" . Data.Functor.Product.$tcProduct_closure" {
     Data.Functor.Product.$tcProduct_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Product.$trModule_closure+1;
         const Data.Functor.Product.$fDataProduct9_closure+1;
         const Data.Functor.Product.$fDataProduct8_closure+4;
         const 9904636435990105341;
         const 16069493191308336164;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.324240746 UTC

[section ""data" . $krep8_rg5od_closure" {
     $krep8_rg5od_closure:
         const :_con_info;
         const $krep5_rg5oa_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.326022928 UTC

[section ""data" . $krep9_rg5oe_closure" {
     $krep9_rg5oe_closure:
         const :_con_info;
         const $krep3_rg5o8_closure+2;
         const $krep8_rg5od_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.327696542 UTC

[section ""data" . $krep10_rg5of_closure" {
     $krep10_rg5of_closure:
         const :_con_info;
         const $krep4_rg5o9_closure+2;
         const $krep9_rg5oe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.329563281 UTC

[section ""data" . $krep11_rg5og_closure" {
     $krep11_rg5og_closure:
         const :_con_info;
         const $krep_rg5o5_closure+2;
         const $krep10_rg5of_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.331321243 UTC

[section ""data" . $krep12_rg5oh_closure" {
     $krep12_rg5oh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Product.$tcProduct_closure+1;
         const $krep11_rg5og_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.333046663 UTC

[section ""data" . $krep13_rg5oi_closure" {
     $krep13_rg5oi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rg5oc_closure+3;
         const $krep12_rg5oh_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.334756534 UTC

[section ""data" . Data.Functor.Product.$tc'Pair1_closure" {
     Data.Functor.Product.$tc'Pair1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rg5ob_closure+3;
         const $krep13_rg5oi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.336504907 UTC

[section ""cstring" . Data.Functor.Product.$tc'Pair3_bytes" {
     Data.Functor.Product.$tc'Pair3_bytes:
         I8[] [39,80,97,105,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.338901827 UTC

[section ""data" . Data.Functor.Product.$tc'Pair2_closure" {
     Data.Functor.Product.$tc'Pair2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$tc'Pair3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.340793107 UTC

[section ""data" . Data.Functor.Product.$tc'Pair_closure" {
     Data.Functor.Product.$tc'Pair_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Product.$trModule_closure+1;
         const Data.Functor.Product.$tc'Pair2_closure+1;
         const Data.Functor.Product.$tc'Pair1_closure+4;
         const 11374113252541295849;
         const 18011678063065699923;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.345120316 UTC

[section ""data" . Data.Functor.Product.$w$cp1Data_closure" {
     Data.Functor.Product.$w$cp1Data_closure:
         const Data.Functor.Product.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Product.$w$cp1Data_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cga5L: // global
           _sg5G9::P64 = R5;
           _sg5G8::P64 = R4;
           _sg5G7::P64 = R3;
           _sg5G6::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cga5P; else goto cga5Q;
       cga5Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cga5S; else goto cga5R;
       cga5S: // global
           HpAlloc = 40;
           goto cga5P;
       cga5P: // global
           R5 = _sg5G9::P64;
           R4 = _sg5G8::P64;
           R3 = _sg5G7::P64;
           R2 = _sg5G6::P64;
           R1 = Data.Functor.Product.$w$cp1Data_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cga5R: // global
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sg5G9::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = block_cga5E_info;
           R6 = 1;
           R5 = Data.Functor.Product.$fDataProduct9_closure+1;
           R4 = Data.Functor.Product.$trModule_closure+1;
           R3 = 16069493191308336164;
           R2 = 9904636435990105341;
           P64[Sp - 48] = Data.Functor.Product.$fDataProduct8_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sg5G6::P64;
           P64[Sp - 16] = _sg5G7::P64;
           P64[Sp - 8] = _sg5G8::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cp1Data_info" {
     Data.Functor.Product.$w$cp1Data_info:
         const Data.Functor.Product.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const Sg5Oh_srt+624;
 },
 _cga5E() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cga5E: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cga5F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cga5E_info" {
     block_cga5E_info:
         const _cga5E;
         const 3;
         const 4294967326;
         const Sg5Oh_srt+624;
 },
 _cga5F() //  []
         { []
         }
     {offset
       cga5F: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cga5V; else goto cga5U;
       cga5V: // global
           HpAlloc = 48;
           I64[Sp] = block_cga5F_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cga5U: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cga5J_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga5F_info" {
     block_cga5F_info:
         const _cga5F;
         const 1096;
         const 4294967326;
         const Sg5Oh_srt+624;
 },
 _cga5J() //  [R1]
         { []
         }
     {offset
       cga5J: // global
           I64[Sp] = block_cga5O_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga5J_info" {
     block_cga5J_info:
         const _cga5J;
         const 131;
         const 4294967326;
         const Sg5Oh_srt+624;
 },
 _cga5O() //  [R1]
         { []
         }
     {offset
       cga5O: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga5O_info" {
     block_cga5O_info:
         const _cga5O;
         const 387;
         const 4294967326;
         const Sg5Oh_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.356942265 UTC

[section ""data" . Data.Functor.Product.$fDataProduct7_closure" {
     Data.Functor.Product.$fDataProduct7_closure:
         const Data.Functor.Product.$fDataProduct7_info;
         const 0;
 },
 Data.Functor.Product.$fDataProduct7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cga6v: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Product.$w$cp1Data_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct7_info" {
     Data.Functor.Product.$fDataProduct7_info:
         const Data.Functor.Product.$fDataProduct7_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const Sg5Oh_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.3609592 UTC

[section ""data" . Data.Functor.Product.$fDataProduct1_closure" {
     Data.Functor.Product.$fDataProduct1_closure:
         const (,)_con_info;
         const Data.Functor.Product.Pair_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.371506349 UTC

[section ""data" . Data.Functor.Product.$w$cgmapMp_closure" {
     Data.Functor.Product.$w$cgmapMp_closure:
         const Data.Functor.Product.$w$cgmapMp_info;
 },
 lvl9_sg5Gw_entry() //  [R1]
         { []
         }
     {offset
       cga6L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cga6M; else goto cga6N;
       cga6M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga6N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5Gw_info" {
     lvl9_sg5Gw_info:
         const lvl9_sg5Gw_entry;
         const 1;
         const 16;
 },
 sat_sg5H1_entry() //  [R1, R2]
         { []
         }
     {offset
       cga70: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cga71; else goto cga72;
       cga71: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga72: // global
           I64[Sp - 24] = block_cga6X_info;
           _sg5Gw::P64 = P64[R1 + 7];
           _sg5Gx::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sg5Gw::P64;
           P64[Sp - 8] = _sg5Gx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uga7k; else goto cga6Y;
       uga7k: // global
           call _cga6X(R1) args: 0, res: 0, upd: 0;
       cga6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5H1_info" {
     sat_sg5H1_info:
         const sat_sg5H1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cga6X() //  [R1]
         { []
         }
     {offset
       cga6X: // global
           I64[Sp - 8] = block_cga75_info;
           _sg5GY::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg5GY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uga7j; else goto cga77;
       uga7j: // global
           call _cga75(R1) args: 0, res: 0, upd: 0;
       cga77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cga6X_info" {
     block_cga6X_info:
         const _cga6X;
         const 2;
         const 30;
 },
 _cga75() //  [R1]
         { []
         }
     {offset
       cga75: // global
           if (R1 & 7 == 1) goto cga7d; else goto cga7h;
       cga7d: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cga7h: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga75_info" {
     block_cga75_info:
         const _cga75;
         const 3;
         const 30;
 },
 sat_sg5GR_entry() //  [R1]
         { []
         }
     {offset
       cga7Q: // global
           _sg5GR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cga7R; else goto cga7S;
       cga7S: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cga7U; else goto cga7T;
       cga7U: // global
           HpAlloc = 56;
           goto cga7R;
       cga7R: // global
           R1 = _sg5GR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga7T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5GR::P64;
           _sg5Gx::P64 = P64[_sg5GR::P64 + 16];
           _sg5GE::P64 = P64[_sg5GR::P64 + 24];
           _sg5GI::P64 = P64[_sg5GR::P64 + 32];
           _sg5GJ::P64 = P64[_sg5GR::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg5GI::P64;
           P64[Hp - 24] = _sg5GE::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sg5GJ::P64;
           R2 = _sg5Gx::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5GR_info" {
     sat_sg5GR_info:
         const sat_sg5GR_entry;
         const 4;
         const 15;
 },
 sat_sg5GN_entry() //  [R1, R2]
         { []
         }
     {offset
       cga86: // global
           _sg5GK::P64 = R2;
           _sg5GN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cga87; else goto cga88;
       cga88: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cga8a; else goto cga89;
       cga8a: // global
           HpAlloc = 56;
           goto cga87;
       cga87: // global
           R2 = _sg5GK::P64;
           R1 = _sg5GN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga89: // global
           _sg5Gx::P64 = P64[_sg5GN::P64 + 7];
           _sg5GI::P64 = P64[_sg5GN::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg5GI::P64;
           P64[Hp - 24] = _sg5GK::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg5Gx::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5GN_info" {
     sat_sg5GN_info:
         const sat_sg5GN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5GO_entry() //  [R1]
         { []
         }
     {offset
       cga8b: // global
           _sg5GO::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cga8c; else goto cga8d;
       cga8d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga8f; else goto cga8e;
       cga8f: // global
           HpAlloc = 24;
           goto cga8c;
       cga8c: // global
           R1 = _sg5GO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga8e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5GO::P64;
           _sg5Gx::P64 = P64[_sg5GO::P64 + 16];
           _sg5GF::P64 = P64[_sg5GO::P64 + 24];
           _sg5GI::P64 = P64[_sg5GO::P64 + 32];
           I64[Hp - 16] = sat_sg5GN_info;
           P64[Hp - 8] = _sg5Gx::P64;
           P64[Hp] = _sg5GI::P64;
           R2 = _sg5Gx::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5GF::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5GO_info" {
     sat_sg5GO_info:
         const sat_sg5GO_entry;
         const 3;
         const 15;
 },
 sat_sg5GS_entry() //  [R1, R2]
         { []
         }
     {offset
       cga8g: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cga8h; else goto cga8i;
       cga8h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cga8i: // global
           I64[Sp - 40] = block_cga7F_info;
           _sg5Gt::P64 = P64[R1 + 7];
           _sg5Gx::P64 = P64[R1 + 15];
           _sg5GE::P64 = P64[R1 + 23];
           _sg5GF::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5Gt::P64;
           P64[Sp - 24] = _sg5Gx::P64;
           P64[Sp - 16] = _sg5GE::P64;
           P64[Sp - 8] = _sg5GF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uga8m; else goto cga7G;
       uga8m: // global
           call _cga7F(R1) args: 0, res: 0, upd: 0;
       cga7G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5GS_info" {
     sat_sg5GS_info:
         const sat_sg5GS_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cga7F() //  [R1]
         { []
         }
     {offset
       cga7F: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cga8l; else goto cga8k;
       cga8l: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga8k: // global
           _sg5GI::P64 = P64[R1 + 7];
           _sg5GJ::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sg5GR_info;
           _sg5Gx::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sg5Gx::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sg5GI::P64;
           P64[Hp - 40] = _sg5GJ::P64;
           I64[Hp - 32] = sat_sg5GO_info;
           P64[Hp - 16] = _sg5Gx::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sg5GI::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga7F_info" {
     block_cga7F_info:
         const _cga7F;
         const 4;
         const 30;
 },
 k1_sg5GB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cga8n: // global
           _sg5GE::P64 = R4;
           _sg5GD::P64 = R3;
           _sg5GC::P64 = R2;
           _sg5GB::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cga8o; else goto cga8p;
       cga8p: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cga8r; else goto cga8q;
       cga8r: // global
           HpAlloc = 80;
           goto cga8o;
       cga8o: // global
           R4 = _sg5GE::P64;
           R3 = _sg5GD::P64;
           R2 = _sg5GC::P64;
           R1 = _sg5GB::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cga8q: // global
           _sg5Gt::P64 = P64[_sg5GB::P64 + 5];
           _sg5Gu::P64 = P64[_sg5GB::P64 + 13];
           _sg5Gx::P64 = P64[_sg5GB::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sg5Gu::P64;
           P64[Hp - 48] = _sg5GC::P64;
           P64[Hp - 40] = _sg5GE::P64;
           I64[Hp - 32] = sat_sg5GS_info;
           P64[Hp - 24] = _sg5Gt::P64;
           P64[Hp - 16] = _sg5Gx::P64;
           P64[Hp - 8] = _sg5GE::P64;
           P64[Hp] = Hp - 72;
           R2 = _sg5Gx::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg5GD::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg5GB_info" {
     k1_sg5GB_info:
         const k1_sg5GB_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sg5GT_entry() //  [R1]
         { []
         }
     {offset
       cga8A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cga8B; else goto cga8C;
       cga8B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga8C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.$fDataProduct1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5GT_info" {
     sat_sg5GT_info:
         const sat_sg5GT_entry;
         const 1;
         const 16;
 },
 sat_sg5GU_entry() //  [R1]
         { []
         }
     {offset
       cga8D: // global
           _sg5GU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cga8E; else goto cga8F;
       cga8F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga8H; else goto cga8G;
       cga8H: // global
           HpAlloc = 24;
           goto cga8E;
       cga8E: // global
           R1 = _sg5GU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga8G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5GU::P64;
           _sg5Gr::P64 = P64[_sg5GU::P64 + 16];
           _sg5Gx::P64 = P64[_sg5GU::P64 + 24];
           _sg5Gz::P64 = P64[_sg5GU::P64 + 32];
           _sg5GB::P64 = P64[_sg5GU::P64 + 40];
           I64[Hp - 16] = sat_sg5GT_info;
           P64[Hp] = _sg5Gx::P64;
           R4 = _sg5Gz::P64;
           R3 = Hp - 16;
           R2 = _sg5Gr::P64;
           R1 = _sg5GB::P64;
           Sp = Sp - 16;
           call k1_sg5GB_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5GU_info" {
     sat_sg5GU_info:
         const sat_sg5GU_entry;
         const 4;
         const 15;
 },
 sat_sg5GV_entry() //  [R1]
         { []
         }
     {offset
       cga8I: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cga8J; else goto cga8K;
       cga8J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cga8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cga7p_info;
           _sg5Gr::P64 = P64[R1 + 16];
           _sg5Gs::P64 = P64[R1 + 24];
           _sg5Gt::P64 = P64[R1 + 32];
           _sg5Gu::P64 = P64[R1 + 40];
           _sg5Gx::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sg5Gr::P64;
           P64[Sp - 48] = _sg5Gs::P64;
           P64[Sp - 40] = _sg5Gt::P64;
           P64[Sp - 32] = _sg5Gu::P64;
           P64[Sp - 24] = _sg5Gx::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto uga8O; else goto cga7q;
       uga8O: // global
           call _cga7p(R1) args: 0, res: 0, upd: 0;
       cga7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5GV_info" {
     sat_sg5GV_info:
         const sat_sg5GV_entry;
         const 6;
         const 15;
 },
 _cga7p() //  [R1]
         { []
         }
     {offset
       cga7p: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cga8N; else goto cga8M;
       cga8N: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cga8M: // global
           _sg5Gz::P64 = P64[R1 + 7];
           _sg5GA::P64 = P64[R1 + 15];
           I64[Hp - 72] = k1_sg5GB_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sg5Gx::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sg5Gx::P64;
           I64[Hp - 40] = sat_sg5GU_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sg5Gx::P64;
           P64[Hp - 8] = _sg5Gz::P64;
           _cga7u::P64 = Hp - 69;
           P64[Hp] = _cga7u::P64;
           R4 = _sg5GA::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cga7u::P64;
           Sp = Sp + 48;
           call k1_sg5GB_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cga7p_info" {
     block_cga7p_info:
         const _cga7p;
         const 5;
         const 30;
 },
 Data.Functor.Product.$w$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cga8P: // global
           _sg5Gv::P64 = R6;
           _sg5Gu::P64 = R5;
           _sg5Gt::P64 = R4;
           _sg5Gs::P64 = R3;
           _sg5Gr::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cga8Q; else goto cga8R;
       cga8R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cga8T; else goto cga8S;
       cga8T: // global
           HpAlloc = 24;
           goto cga8Q;
       cga8Q: // global
           R6 = _sg5Gv::P64;
           R5 = _sg5Gu::P64;
           R4 = _sg5Gt::P64;
           R3 = _sg5Gs::P64;
           R2 = _sg5Gr::P64;
           R1 = Data.Functor.Product.$w$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cga8S: // global
           I64[Hp - 16] = lvl9_sg5Gw_info;
           P64[Hp] = _sg5Gt::P64;
           I64[Sp - 56] = block_cga6O_info;
           R2 = _sg5Gt::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sg5Gr::P64;
           P64[Sp - 32] = _sg5Gs::P64;
           P64[Sp - 24] = _sg5Gt::P64;
           P64[Sp - 16] = _sg5Gu::P64;
           P64[Sp - 8] = _sg5Gv::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapMp_info" {
     Data.Functor.Product.$w$cgmapMp_info:
         const Data.Functor.Product.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cga6O() //  [R1]
         { []
         }
     {offset
       cga6O: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cga8W; else goto cga8V;
       cga8W: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cga8V: // global
           I64[Hp - 80] = sat_sg5H1_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sg5GV_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cga6O_info" {
     block_cga6O_info:
         const _cga6O;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.406841725 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapMp_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapMp_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapMp_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cgaaq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapMp_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapMp_entry() //  [R6]
         { []
         }
     {offset
       cgaau: // global
           _sg5H6::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sg5H6::P64;
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapMp_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapMp_info" {
     Data.Functor.Product.$fDataProduct_$cgmapMp_info:
         const Data.Functor.Product.$fDataProduct_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.414432551 UTC

[section ""data" . Data.Functor.Product.$w$cgmapM_closure" {
     Data.Functor.Product.$w$cgmapM_closure:
         const Data.Functor.Product.$w$cgmapM_info;
 },
 sat_sg5Hp_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaaY: // global
           _sg5Hn::P64 = R2;
           _sg5Hp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgaaZ; else goto cgab0;
       cgab0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgab2; else goto cgab1;
       cgab2: // global
           HpAlloc = 32;
           goto cgaaZ;
       cgaaZ: // global
           R2 = _sg5Hn::P64;
           R1 = _sg5Hp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgab1: // global
           _sg5Hd::P64 = P64[_sg5Hp::P64 + 7];
           _sg5Hm::P64 = P64[_sg5Hp::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sg5Hm::P64;
           P64[Hp] = _sg5Hn::P64;
           R2 = _sg5Hd::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Hp_info" {
     sat_sg5Hp_info:
         const sat_sg5Hp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5Hq_entry() //  [R1, R2]
         { []
         }
     {offset
       cgab3: // global
           _sg5Hm::P64 = R2;
           _sg5Hq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgab4; else goto cgab5;
       cgab5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgab7; else goto cgab6;
       cgab7: // global
           HpAlloc = 24;
           goto cgab4;
       cgab4: // global
           R2 = _sg5Hm::P64;
           R1 = _sg5Hq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgab6: // global
           _sg5Hd::P64 = P64[_sg5Hq::P64 + 7];
           _sg5Hl::P64 = P64[_sg5Hq::P64 + 15];
           I64[Hp - 16] = sat_sg5Hp_info;
           P64[Hp - 8] = _sg5Hd::P64;
           P64[Hp] = _sg5Hm::P64;
           R2 = _sg5Hd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg5Hl::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Hq_info" {
     sat_sg5Hq_info:
         const sat_sg5Hq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k1_sg5Hh_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgab8: // global
           _sg5Hk::P64 = R4;
           _sg5Hj::P64 = R3;
           _sg5Hi::P64 = R2;
           _sg5Hh::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgab9; else goto cgaba;
       cgaba: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgabc; else goto cgabb;
       cgabc: // global
           HpAlloc = 64;
           goto cgab9;
       cgab9: // global
           R4 = _sg5Hk::P64;
           R3 = _sg5Hj::P64;
           R2 = _sg5Hi::P64;
           R1 = _sg5Hh::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgabb: // global
           _sg5Hd::P64 = P64[_sg5Hh::P64 + 5];
           _sg5He::P64 = P64[_sg5Hh::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg5He::P64;
           P64[Hp - 32] = _sg5Hi::P64;
           P64[Hp - 24] = _sg5Hk::P64;
           I64[Hp - 16] = sat_sg5Hq_info;
           P64[Hp - 8] = _sg5Hd::P64;
           P64[Hp] = Hp - 56;
           R2 = _sg5Hd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg5Hj::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg5Hh_info" {
     k1_sg5Hh_info:
         const k1_sg5Hh_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5Hr_entry() //  [R1]
         { []
         }
     {offset
       cgabl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgabm; else goto cgabn;
       cgabm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgabn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.Pair_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Hr_info" {
     sat_sg5Hr_info:
         const sat_sg5Hr_entry;
         const 1;
         const 16;
 },
 sat_sg5Hs_entry() //  [R1]
         { []
         }
     {offset
       cgabo: // global
           _sg5Hs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgabp; else goto cgabq;
       cgabq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgabs; else goto cgabr;
       cgabs: // global
           HpAlloc = 24;
           goto cgabp;
       cgabp: // global
           R1 = _sg5Hs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgabr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5Hs::P64;
           _sg5Hb::P64 = P64[_sg5Hs::P64 + 16];
           _sg5Hd::P64 = P64[_sg5Hs::P64 + 24];
           _sg5Hf::P64 = P64[_sg5Hs::P64 + 32];
           _sg5Hh::P64 = P64[_sg5Hs::P64 + 40];
           I64[Hp - 16] = sat_sg5Hr_info;
           P64[Hp] = _sg5Hd::P64;
           R4 = _sg5Hf::P64;
           R3 = Hp - 16;
           R2 = _sg5Hb::P64;
           R1 = _sg5Hh::P64;
           Sp = Sp - 16;
           call k1_sg5Hh_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Hs_info" {
     sat_sg5Hs_info:
         const sat_sg5Hs_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgabt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgabx; else goto cgabw;
       cgabx: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgabw: // global
           I64[Hp - 64] = k1_sg5Hh_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = sat_sg5Hs_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R6;
           _cgaaH::P64 = Hp - 61;
           P64[Hp] = _cgaaH::P64;
           R4 = P64[Sp];
           _sg5Hc::P64 = R3;
           R3 = Hp - 40;
           R2 = _sg5Hc::P64;
           R1 = _cgaaH::P64;
           Sp = Sp + 8;
           call k1_sg5Hh_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapM_info" {
     Data.Functor.Product.$w$cgmapM_info:
         const Data.Functor.Product.$w$cgmapM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.429527922 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapM_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapM_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapM_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cgac1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapM_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cgac8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgac9; else goto cgaca;
       cgac9: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapM_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cgaca: // global
           I64[Sp - 8] = block_cgac5_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugace; else goto cgac6;
       ugace: // global
           call _cgac5(R1) args: 0, res: 0, upd: 0;
       cgac6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapM_info" {
     Data.Functor.Product.$fDataProduct_$cgmapM_info:
         const Data.Functor.Product.$fDataProduct_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapM_slow;
 },
 _cgac5() //  [R1]
         { []
         }
     {offset
       cgac5: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapM_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgac5_info" {
     block_cgac5_info:
         const _cgac5;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.438446438 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapQi_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapQi_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapQi_info;
         const 0;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQi_slow() //  [R1]
         { []
         }
     {offset
       cgacs: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQi_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapQi_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgacz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgacD; else goto cgacE;
       cgacD: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapQi_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cgacE: // global
           I64[Sp - 8] = block_cgacw_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugacS; else goto cgacx;
       ugacS: // global
           call _cgacw(R1) args: 0, res: 0, upd: 0;
       cgacx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapQi_info" {
     Data.Functor.Product.$fDataProduct_$cgmapQi_info:
         const Data.Functor.Product.$fDataProduct_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const Sg5Oh_srt+648;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapQi_slow;
 },
 _cgacw() //  [R1]
         { []
         }
     {offset
       cgacw: // global
           I64[Sp - 8] = block_cgacC_info;
           _sg5HP::P64 = P64[R1 + 7];
           _sg5HQ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sg5HQ::P64;
           P64[Sp + 16] = _sg5HP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugacR; else goto cgacG;
       ugacR: // global
           call _cgacC(R1) args: 0, res: 0, upd: 0;
       cgacG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgacw_info" {
     block_cgacw_info:
         const _cgacw;
         const 4;
         const 4294967326;
         const Sg5Oh_srt+648;
 },
 _cgacC() //  [R1]
         { []
         }
     {offset
       cgacC: // global
           _sg5HM::P64 = P64[Sp + 32];
           _sg5HT::I64 = I64[R1 + 7];
           if (_sg5HT::I64 != 0) goto ugacQ; else goto cgacO;
       ugacQ: // global
           if (_sg5HT::I64 != 1) goto cgacN; else goto cgacP;
       cgacN: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgacP: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           R1 = _sg5HM::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgacO: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 40];
           R1 = _sg5HM::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgacC_info" {
     block_cgacC_info:
         const _cgacC;
         const 5;
         const 4294967326;
         const Sg5Oh_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.448687187 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapQr_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapQr_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapQr_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQr_slow() //  [R1]
         { []
         }
     {offset
       cgad9: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQr_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sg5I9_entry() //  [R1]
         { []
         }
     {offset
       cgadn: // global
           _sg5I9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgado; else goto cgadp;
       cgadp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgadr; else goto cgadq;
       cgadr: // global
           HpAlloc = 40;
           goto cgado;
       cgado: // global
           R1 = _sg5I9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgadq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5I9::P64;
           _sg5HZ::P64 = P64[_sg5I9::P64 + 16];
           _sg5I0::P64 = P64[_sg5I9::P64 + 24];
           _sg5I1::P64 = P64[_sg5I9::P64 + 32];
           _sg5I2::P64 = P64[_sg5I9::P64 + 40];
           _sg5I6::P64 = P64[_sg5I9::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg5I2::P64;
           P64[Hp - 8] = _sg5HZ::P64;
           P64[Hp] = _sg5I6::P64;
           R3 = _sg5I1::P64;
           R2 = Hp - 32;
           R1 = _sg5I0::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5I9_info" {
     sat_sg5I9_info:
         const sat_sg5I9_entry;
         const 5;
         const 15;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQr_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgads: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgadu; else goto cgadv;
       cgadu: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapQr_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cgadv: // global
           I64[Sp - 8] = block_cgadd_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugadz; else goto cgade;
       ugadz: // global
           call _cgadd(R1) args: 0, res: 0, upd: 0;
       cgade: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapQr_info" {
     Data.Functor.Product.$fDataProduct_$cgmapQr_info:
         const Data.Functor.Product.$fDataProduct_$cgmapQr_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Product.$fDataProduct_$cgmapQr_slow;
 },
 _cgadd() //  [R1]
         { []
         }
     {offset
       cgadd: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgady; else goto cgadx;
       cgady: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgadx: // global
           _sg5I5::P64 = P64[R1 + 7];
           _sg5I6::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sg5I9_info;
           P64[Hp - 72] = P64[Sp + 8];
           _sg5I0::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sg5I0::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sg5I2::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sg5I2::P64;
           P64[Hp - 40] = _sg5I6::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg5I2::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sg5I5::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sg5I0::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgadd_info" {
     block_cgadd_info:
         const _cgadd;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.460186116 UTC

[section ""data" . Data.Functor.Product.$fDataProduct2_closure" {
     Data.Functor.Product.$fDataProduct2_closure:
         const Data.Functor.Product.$fDataProduct2_info;
 },
 Data.Functor.Product.$fDataProduct2_slow() //  [R1]
         { []
         }
     {offset
       cgadT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct2_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sg5Io_entry() //  [R1]
         { []
         }
     {offset
       cgae8: // global
           _sg5Io::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgae9; else goto cgaea;
       cgaea: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgaec; else goto cgaeb;
       cgaec: // global
           HpAlloc = 40;
           goto cgae9;
       cgae9: // global
           R1 = _sg5Io::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaeb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5Io::P64;
           _sg5Ie::P64 = P64[_sg5Io::P64 + 16];
           _sg5Ig::P64 = P64[_sg5Io::P64 + 24];
           _sg5Ih::P64 = P64[_sg5Io::P64 + 32];
           _sg5Ii::P64 = P64[_sg5Io::P64 + 40];
           _sg5Il::P64 = P64[_sg5Io::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sg5Ii::P64;
           P64[Hp - 8] = _sg5Ie::P64;
           P64[Hp] = _sg5Il::P64;
           R3 = Hp - 32;
           R2 = _sg5Ih::P64;
           R1 = _sg5Ig::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Io_info" {
     sat_sg5Io_info:
         const sat_sg5Io_entry;
         const 5;
         const 15;
 },
 Data.Functor.Product.$fDataProduct2_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgaed: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgaee; else goto cgaef;
       cgaee: // global
           R1 = Data.Functor.Product.$fDataProduct2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cgaef: // global
           I64[Sp - 8] = block_cgadX_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaej; else goto cgadY;
       ugaej: // global
           call _cgadX(R1) args: 0, res: 0, upd: 0;
       cgadY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct2_info" {
     Data.Functor.Product.$fDataProduct2_info:
         const Data.Functor.Product.$fDataProduct2_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Product.$fDataProduct2_slow;
 },
 _cgadX() //  [R1]
         { []
         }
     {offset
       cgadX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgaei; else goto cgaeh;
       cgaei: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgaeh: // global
           _sg5Il::P64 = P64[R1 + 7];
           _sg5Im::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sg5Ii::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sg5Ii::P64;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sg5Im::P64;
           I64[Hp - 48] = sat_sg5Io_info;
           P64[Hp - 32] = P64[Sp + 40];
           _sg5Ig::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sg5Ig::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sg5Ii::P64;
           P64[Hp] = _sg5Il::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sg5Ig::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgadX_info" {
     block_cgadX_info:
         const _cgadX;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.478841272 UTC

[section ""data" . Data.Functor.Product.$w$cgmapMo_closure" {
     Data.Functor.Product.$w$cgmapMo_closure:
         const Data.Functor.Product.$w$cgmapMo_info;
 },
 lvl9_sg5Iv_entry() //  [R1]
         { []
         }
     {offset
       cgaeK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaeL; else goto cgaeM;
       cgaeL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaeM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sg5Iv_info" {
     lvl9_sg5Iv_info:
         const lvl9_sg5Iv_entry;
         const 1;
         const 16;
 },
 sat_sg5J3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaeZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgaf0; else goto cgaf1;
       cgaf0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaf1: // global
           I64[Sp - 24] = block_cgaeW_info;
           _sg5Iv::P64 = P64[R1 + 7];
           _sg5Iw::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sg5Iv::P64;
           P64[Sp - 8] = _sg5Iw::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugafj; else goto cgaeX;
       ugafj: // global
           call _cgaeW(R1) args: 0, res: 0, upd: 0;
       cgaeX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5J3_info" {
     sat_sg5J3_info:
         const sat_sg5J3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgaeW() //  [R1]
         { []
         }
     {offset
       cgaeW: // global
           I64[Sp - 8] = block_cgaf4_info;
           _sg5J0::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg5J0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugafi; else goto cgaf6;
       ugafi: // global
           call _cgaf4(R1) args: 0, res: 0, upd: 0;
       cgaf6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaeW_info" {
     block_cgaeW_info:
         const _cgaeW;
         const 2;
         const 30;
 },
 _cgaf4() //  [R1]
         { []
         }
     {offset
       cgaf4: // global
           if (R1 & 7 == 1) goto cgafc; else goto cgafg;
       cgafc: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgafg: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaf4_info" {
     block_cgaf4_info:
         const _cgaf4;
         const 3;
         const 30;
 },
 sat_sg5IR_entry() //  [R1]
         { []
         }
     {offset
       cgafU: // global
           _sg5IR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgafV; else goto cgafW;
       cgafW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgafY; else goto cgafX;
       cgafY: // global
           HpAlloc = 56;
           goto cgafV;
       cgafV: // global
           R1 = _sg5IR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgafX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5IR::P64;
           _sg5Iw::P64 = P64[_sg5IR::P64 + 16];
           _sg5ID::P64 = P64[_sg5IR::P64 + 24];
           _sg5IH::P64 = P64[_sg5IR::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg5IH::P64;
           P64[Hp - 24] = _sg5ID::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sg5Iw::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5IR_info" {
     sat_sg5IR_info:
         const sat_sg5IR_entry;
         const 3;
         const 15;
 },
 sat_sg5IN_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaga: // global
           _sg5IK::P64 = R2;
           _sg5IN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgagb; else goto cgagc;
       cgagc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgage; else goto cgagd;
       cgage: // global
           HpAlloc = 56;
           goto cgagb;
       cgagb: // global
           R2 = _sg5IK::P64;
           R1 = _sg5IN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgagd: // global
           _sg5Iw::P64 = P64[_sg5IN::P64 + 7];
           _sg5IH::P64 = P64[_sg5IN::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg5IH::P64;
           P64[Hp - 24] = _sg5IK::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg5Iw::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5IN_info" {
     sat_sg5IN_info:
         const sat_sg5IN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sg5IO_entry() //  [R1]
         { []
         }
     {offset
       cgagf: // global
           _sg5IO::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgagg; else goto cgagh;
       cgagh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgagj; else goto cgagi;
       cgagj: // global
           HpAlloc = 24;
           goto cgagg;
       cgagg: // global
           R1 = _sg5IO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgagi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5IO::P64;
           _sg5Iw::P64 = P64[_sg5IO::P64 + 16];
           _sg5IE::P64 = P64[_sg5IO::P64 + 24];
           _sg5IH::P64 = P64[_sg5IO::P64 + 32];
           I64[Hp - 16] = sat_sg5IN_info;
           P64[Hp - 8] = _sg5Iw::P64;
           P64[Hp] = _sg5IH::P64;
           R2 = _sg5Iw::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sg5IE::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5IO_info" {
     sat_sg5IO_info:
         const sat_sg5IO_entry;
         const 3;
         const 15;
 },
 sat_sg5IU_entry() //  [R1, R2]
         { []
         }
     {offset
       cgagk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgagl; else goto cgagm;
       cgagl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgagm: // global
           I64[Sp - 40] = block_cgafE_info;
           _sg5Is::P64 = P64[R1 + 7];
           _sg5Iw::P64 = P64[R1 + 15];
           _sg5ID::P64 = P64[R1 + 23];
           _sg5IE::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sg5Is::P64;
           P64[Sp - 24] = _sg5Iw::P64;
           P64[Sp - 16] = _sg5ID::P64;
           P64[Sp - 8] = _sg5IE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugagD; else goto cgafF;
       ugagD: // global
           call _cgafE(R1) args: 0, res: 0, upd: 0;
       cgafF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5IU_info" {
     sat_sg5IU_info:
         const sat_sg5IU_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgafE() //  [R1]
         { []
         }
     {offset
       cgafE: // global
           I64[Sp - 8] = block_cgafJ_info;
           _sg5IH::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sg5IH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugagC; else goto cgafK;
       ugagC: // global
           call _cgafJ(R1) args: 0, res: 0, upd: 0;
       cgafK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgafE_info" {
     block_cgafE_info:
         const _cgafE;
         const 4;
         const 30;
 },
 _cgafJ() //  [R1]
         { []
         }
     {offset
       cgafJ: // global
           _sg5Iw::P64 = P64[Sp + 24];
           _sg5ID::P64 = P64[Sp + 32];
           _sg5IH::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgagp; else goto cgagt;
       cgagp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgags; else goto cgagr;
       cgags: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgagr: // global
           I64[Hp - 72] = sat_sg5IR_info;
           P64[Hp - 56] = _sg5Iw::P64;
           P64[Hp - 48] = _sg5ID::P64;
           P64[Hp - 40] = _sg5IH::P64;
           I64[Hp - 32] = sat_sg5IO_info;
           P64[Hp - 16] = _sg5Iw::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sg5IH::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgagt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgagy; else goto cgagx;
       cgagy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgagx: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sg5IH::P64;
           P64[Hp - 24] = _sg5ID::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sg5Iw::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgafJ_info" {
     block_cgafJ_info:
         const _cgafJ;
         const 5;
         const 30;
 },
 k1_sg5IA_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgagE: // global
           _sg5ID::P64 = R4;
           _sg5IC::P64 = R3;
           _sg5IB::P64 = R2;
           _sg5IA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgagF; else goto cgagG;
       cgagG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgagI; else goto cgagH;
       cgagI: // global
           HpAlloc = 80;
           goto cgagF;
       cgagF: // global
           R4 = _sg5ID::P64;
           R3 = _sg5IC::P64;
           R2 = _sg5IB::P64;
           R1 = _sg5IA::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgagH: // global
           _sg5Is::P64 = P64[_sg5IA::P64 + 5];
           _sg5It::P64 = P64[_sg5IA::P64 + 13];
           _sg5Iw::P64 = P64[_sg5IA::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sg5It::P64;
           P64[Hp - 48] = _sg5IB::P64;
           P64[Hp - 40] = _sg5ID::P64;
           I64[Hp - 32] = sat_sg5IU_info;
           P64[Hp - 24] = _sg5Is::P64;
           P64[Hp - 16] = _sg5Iw::P64;
           P64[Hp - 8] = _sg5ID::P64;
           P64[Hp] = Hp - 72;
           R2 = _sg5Iw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sg5IC::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sg5IA_info" {
     k1_sg5IA_info:
         const k1_sg5IA_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sg5IV_entry() //  [R1]
         { []
         }
     {offset
       cgagR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgagS; else goto cgagT;
       cgagS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgagT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.$fDataProduct1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5IV_info" {
     sat_sg5IV_info:
         const sat_sg5IV_entry;
         const 1;
         const 16;
 },
 sat_sg5IW_entry() //  [R1]
         { []
         }
     {offset
       cgagU: // global
           _sg5IW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgagV; else goto cgagW;
       cgagW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgagY; else goto cgagX;
       cgagY: // global
           HpAlloc = 24;
           goto cgagV;
       cgagV: // global
           R1 = _sg5IW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgagX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5IW::P64;
           _sg5Iq::P64 = P64[_sg5IW::P64 + 16];
           _sg5Iw::P64 = P64[_sg5IW::P64 + 24];
           _sg5Iy::P64 = P64[_sg5IW::P64 + 32];
           _sg5IA::P64 = P64[_sg5IW::P64 + 40];
           I64[Hp - 16] = sat_sg5IV_info;
           P64[Hp] = _sg5Iw::P64;
           R4 = _sg5Iy::P64;
           R3 = Hp - 16;
           R2 = _sg5Iq::P64;
           R1 = _sg5IA::P64;
           Sp = Sp - 16;
           call k1_sg5IA_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5IW_info" {
     sat_sg5IW_info:
         const sat_sg5IW_entry;
         const 4;
         const 15;
 },
 sat_sg5IX_entry() //  [R1]
         { []
         }
     {offset
       cgagZ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgah0; else goto cgah1;
       cgah0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgah1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cgafo_info;
           _sg5Iq::P64 = P64[R1 + 16];
           _sg5Ir::P64 = P64[R1 + 24];
           _sg5Is::P64 = P64[R1 + 32];
           _sg5It::P64 = P64[R1 + 40];
           _sg5Iw::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sg5Iq::P64;
           P64[Sp - 48] = _sg5Ir::P64;
           P64[Sp - 40] = _sg5Is::P64;
           P64[Sp - 32] = _sg5It::P64;
           P64[Sp - 24] = _sg5Iw::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ugah5; else goto cgafp;
       ugah5: // global
           call _cgafo(R1) args: 0, res: 0, upd: 0;
       cgafp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5IX_info" {
     sat_sg5IX_info:
         const sat_sg5IX_entry;
         const 6;
         const 15;
 },
 _cgafo() //  [R1]
         { []
         }
     {offset
       cgafo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgah4; else goto cgah3;
       cgah4: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgah3: // global
           _sg5Iy::P64 = P64[R1 + 7];
           _sg5Iz::P64 = P64[R1 + 15];
           I64[Hp - 72] = k1_sg5IA_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sg5Iw::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sg5Iw::P64;
           I64[Hp - 40] = sat_sg5IW_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sg5Iw::P64;
           P64[Hp - 8] = _sg5Iy::P64;
           _cgaft::P64 = Hp - 69;
           P64[Hp] = _cgaft::P64;
           R4 = _sg5Iz::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cgaft::P64;
           Sp = Sp + 48;
           call k1_sg5IA_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgafo_info" {
     block_cgafo_info:
         const _cgafo;
         const 5;
         const 30;
 },
 Data.Functor.Product.$w$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgah6: // global
           _sg5Iu::P64 = R6;
           _sg5It::P64 = R5;
           _sg5Is::P64 = R4;
           _sg5Ir::P64 = R3;
           _sg5Iq::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgah7; else goto cgah8;
       cgah8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaha; else goto cgah9;
       cgaha: // global
           HpAlloc = 24;
           goto cgah7;
       cgah7: // global
           R6 = _sg5Iu::P64;
           R5 = _sg5It::P64;
           R4 = _sg5Is::P64;
           R3 = _sg5Ir::P64;
           R2 = _sg5Iq::P64;
           R1 = Data.Functor.Product.$w$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgah9: // global
           I64[Hp - 16] = lvl9_sg5Iv_info;
           P64[Hp] = _sg5Is::P64;
           I64[Sp - 56] = block_cgaeN_info;
           R2 = _sg5Is::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sg5Iq::P64;
           P64[Sp - 32] = _sg5Ir::P64;
           P64[Sp - 24] = _sg5Is::P64;
           P64[Sp - 16] = _sg5It::P64;
           P64[Sp - 8] = _sg5Iu::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapMo_info" {
     Data.Functor.Product.$w$cgmapMo_info:
         const Data.Functor.Product.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaeN() //  [R1]
         { []
         }
     {offset
       cgaeN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgahd; else goto cgahc;
       cgahd: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgahc: // global
           I64[Hp - 80] = sat_sg5J3_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sg5IX_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaeN_info" {
     block_cgaeN_info:
         const _cgaeN;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.514681279 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapMo_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapMo_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapMo_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cgaiO: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapMo_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapMo_entry() //  [R6]
         { []
         }
     {offset
       cgaiS: // global
           _sg5J8::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sg5J8::P64;
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapMo_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapMo_info" {
     Data.Functor.Product.$fDataProduct_$cgmapMo_info:
         const Data.Functor.Product.$fDataProduct_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.520872773 UTC

[section ""data" . lvl5_rg5oj_closure" {
     lvl5_rg5oj_closure:
         const lvl5_rg5oj_info;
         const 0;
 },
 lvl5_rg5oj_entry() //  [R2]
         { []
         }
     {offset
       cgaj8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgaj9; else goto cgaja;
       cgaj9: // global
           R2 = R2;
           R1 = lvl5_rg5oj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaja: // global
           I64[Sp - 8] = block_cgaj5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaje; else goto cgaj6;
       ugaje: // global
           call _cgaj5() args: 0, res: 0, upd: 0;
       cgaj6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rg5oj_info" {
     lvl5_rg5oj_info:
         const lvl5_rg5oj_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sg5Oh_srt+664;
 },
 _cgaj5() //  []
         { []
         }
     {offset
       cgaj5: // global
           R1 = Data.Functor.Product.$cPair_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaj5_info" {
     block_cgaj5_info:
         const _cgaj5;
         const 0;
         const 4294967326;
         const Sg5Oh_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.526103968 UTC

[section ""data" . lvl6_rg5ok_closure" {
     lvl6_rg5ok_closure:
         const lvl6_rg5ok_info;
         const 0;
 },
 lvl6_rg5ok_entry() //  []
         { []
         }
     {offset
       cgajt: // global
           R1 = Data.Functor.Product.$tProduct_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rg5ok_info" {
     lvl6_rg5ok_info:
         const lvl6_rg5ok_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sg5Oh_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.529545644 UTC

[section ""data" . lvl7_rg5ol_closure" {
     lvl7_rg5ol_closure:
         const lvl7_rg5ol_info;
 },
 lvl7_rg5ol_entry() //  []
         { []
         }
     {offset
       cgajF: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rg5ol_info" {
     lvl7_rg5ol_info:
         const lvl7_rg5ol_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.532987115 UTC

[section ""data" . lvl8_rg5om_closure" {
     lvl8_rg5om_closure:
         const lvl8_rg5om_info;
 },
 lvl8_rg5om_entry() //  []
         { []
         }
     {offset
       cgajR: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rg5om_info" {
     lvl8_rg5om_info:
         const lvl8_rg5om_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.547131819 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_closure" {
     Data.Functor.Product.$fDataProduct_closure:
         const Data.Functor.Product.$fDataProduct_info;
         const 0;
 },
 sat_sg5K2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgak8: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$w$cgmapMo_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5K2_info" {
     sat_sg5K2_info:
         const sat_sg5K2_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5JY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgakg: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$w$cgmapMp_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JY_info" {
     sat_sg5JY_info:
         const sat_sg5JY_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5JU_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgako: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgakp; else goto cgakq;
       cgakp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgakq: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JU_info" {
     sat_sg5JU_info:
         const sat_sg5JU_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sg5JT_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgakw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgakx; else goto cgaky;
       cgakx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaky: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgmapQi_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JT_info" {
     sat_sg5JT_info:
         const sat_sg5JT_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const Sg5Oh_srt+656;
 },
 sat_sg5JS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgakH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgakO; else goto cgakP;
       cgakO: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgakP: // global
           I64[Sp - 32] = block_cgakE_info;
           _sg5Jq::P64 = P64[R1 + 6];
           _sg5Jr::P64 = P64[R1 + 14];
           R1 = R3;
           P64[Sp - 24] = _sg5Jq::P64;
           P64[Sp - 16] = _sg5Jr::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugakT; else goto cgakF;
       ugakT: // global
           call _cgakE(R1) args: 0, res: 0, upd: 0;
       cgakF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JS_info" {
     sat_sg5JS_info:
         const sat_sg5JS_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cgakE() //  [R1]
         { []
         }
     {offset
       cgakE: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgakS; else goto cgakR;
       cgakS: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgakR: // global
           _sg5JN::P64 = P64[R1 + 7];
           _sg5JO::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sg5JK::P64 = P64[Sp + 24];
           P64[Hp - 104] = _sg5JK::P64;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = _sg5JO::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg5JK::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg5JN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgakE_info" {
     block_cgakE_info:
         const _cgakE;
         const 3;
         const 30;
 },
 sat_sg5JJ_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgakZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgal0; else goto cgal1;
       cgal0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgal1: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQr_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JJ_info" {
     sat_sg5JJ_info:
         const sat_sg5JJ_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sg5JI_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgal7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgal8; else goto cgal9;
       cgal8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgal9: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Product.$fDataProduct2_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JI_info" {
     sat_sg5JI_info:
         const sat_sg5JI_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sg5JH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgali: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgalo; else goto cgalp;
       cgalo: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgalp: // global
           I64[Sp - 32] = block_cgalf_info;
           _sg5Jq::P64 = P64[R1 + 6];
           _sg5Jr::P64 = P64[R1 + 14];
           R1 = R3;
           P64[Sp - 24] = _sg5Jq::P64;
           P64[Sp - 16] = _sg5Jr::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugalt; else goto cgalg;
       ugalt: // global
           call _cgalf(R1) args: 0, res: 0, upd: 0;
       cgalg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5JH_info" {
     sat_sg5JH_info:
         const sat_sg5JH_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cgalf() //  [R1]
         { []
         }
     {offset
       cgalf: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgals; else goto cgalr;
       cgals: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgalr: // global
           _sg5JD::P64 = P64[R1 + 7];
           _sg5JE::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_3_upd_info;
           _sg5JA::P64 = P64[Sp + 24];
           P64[Hp - 80] = _sg5JA::P64;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sg5JE::P64;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sg5JA::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sg5JD::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgalf_info" {
     block_cgalf_info:
         const _cgalf;
         const 3;
         const 30;
 },
 sat_sg5Jx_entry() //  [R1]
         { []
         }
     {offset
       cgalH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgalI; else goto cgalJ;
       cgalI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgalJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Product.Pair_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Jx_info" {
     sat_sg5Jx_info:
         const sat_sg5Jx_entry;
         const 1;
         const 16;
 },
 sat_sg5Jy_entry() //  [R1]
         { []
         }
     {offset
       cgalK: // global
           _sg5Jy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgalL; else goto cgalM;
       cgalM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgalO; else goto cgalN;
       cgalO: // global
           HpAlloc = 24;
           goto cgalL;
       cgalL: // global
           R1 = _sg5Jy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgalN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sg5Jy::P64;
           _sg5Jq::P64 = P64[_sg5Jy::P64 + 16];
           _sg5Ju::P64 = P64[_sg5Jy::P64 + 24];
           _sg5Jv::P64 = P64[_sg5Jy::P64 + 32];
           I64[Hp - 16] = sat_sg5Jx_info;
           P64[Hp] = _sg5Jv::P64;
           R3 = Hp - 16;
           R2 = _sg5Jq::P64;
           R1 = _sg5Ju::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Jy_info" {
     sat_sg5Jy_info:
         const sat_sg5Jy_entry;
         const 3;
         const 15;
 },
 sat_sg5Jz_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgalP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgalT; else goto cgalS;
       cgalT: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgalS: // global
           _sg5Jq::P64 = P64[R1 + 5];
           _sg5Jr::P64 = P64[R1 + 13];
           I64[Hp - 32] = sat_sg5Jy_info;
           P64[Hp - 16] = _sg5Jq::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 32;
           _sg5Ju::P64 = R2;
           R2 = _sg5Jr::P64;
           R1 = _sg5Ju::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Jz_info" {
     sat_sg5Jz_info:
         const sat_sg5Jz_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sg5Jt_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgalZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgam0; else goto cgam1;
       cgam0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgam1: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgfoldl_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sg5Jt_info" {
     sat_sg5Jt_info:
         const sat_sg5Jt_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sg5Js_entry() //  [R1]
         { []
         }
     {offset
       cgam6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgam7; else goto cgam8;
       cgam7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgam8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$w$cp1Data_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sg5Js_info" {
     sat_sg5Js_info:
         const sat_sg5Js_entry;
         const 4;
         const 4294967311;
         const Sg5Oh_srt+640;
 },
 Data.Functor.Product.$fDataProduct_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgama: // global
           Hp = Hp + 576;
           if (Hp > HpLim) (likely: False) goto cgame; else goto cgamd;
       cgame: // global
           HpAlloc = 576;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fDataProduct_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgamd: // global
           I64[Hp - 568] = sat_sg5K2_info;
           P64[Hp - 560] = R6;
           _sg5Jr::P64 = P64[Sp];
           P64[Hp - 552] = _sg5Jr::P64;
           I64[Hp - 544] = sat_sg5JY_info;
           P64[Hp - 536] = R6;
           P64[Hp - 528] = _sg5Jr::P64;
           I64[Hp - 520] = sat_sg5JU_info;
           P64[Hp - 512] = R2;
           P64[Hp - 504] = R3;
           P64[Hp - 496] = R4;
           P64[Hp - 488] = R5;
           P64[Hp - 480] = R6;
           P64[Hp - 472] = _sg5Jr::P64;
           I64[Hp - 464] = sat_sg5JT_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           P64[Hp - 440] = R4;
           P64[Hp - 432] = R5;
           P64[Hp - 424] = R6;
           P64[Hp - 416] = _sg5Jr::P64;
           I64[Hp - 408] = sat_sg5JS_info;
           P64[Hp - 400] = R6;
           P64[Hp - 392] = _sg5Jr::P64;
           I64[Hp - 384] = sat_sg5JJ_info;
           P64[Hp - 376] = R2;
           P64[Hp - 368] = R3;
           P64[Hp - 360] = R4;
           P64[Hp - 352] = R5;
           P64[Hp - 344] = R6;
           P64[Hp - 336] = _sg5Jr::P64;
           I64[Hp - 328] = sat_sg5JI_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           P64[Hp - 280] = _sg5Jr::P64;
           I64[Hp - 272] = sat_sg5JH_info;
           P64[Hp - 264] = R6;
           P64[Hp - 256] = _sg5Jr::P64;
           I64[Hp - 248] = sat_sg5Jz_info;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sg5Jr::P64;
           I64[Hp - 224] = sat_sg5Jt_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _sg5Jr::P64;
           I64[Hp - 168] = sat_sg5Js_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 168;
           P64[Hp - 104] = Hp - 221;
           P64[Hp - 96] = Hp - 245;
           P64[Hp - 88] = lvl5_rg5oj_closure+1;
           P64[Hp - 80] = lvl6_rg5ok_closure+1;
           P64[Hp - 72] = lvl7_rg5ol_closure+2;
           P64[Hp - 64] = lvl8_rg5om_closure+2;
           P64[Hp - 56] = Hp - 270;
           P64[Hp - 48] = Hp - 324;
           P64[Hp - 40] = Hp - 380;
           P64[Hp - 32] = Hp - 406;
           P64[Hp - 24] = Hp - 461;
           P64[Hp - 16] = Hp - 517;
           P64[Hp - 8] = Hp - 541;
           P64[Hp] = Hp - 565;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_info" {
     Data.Functor.Product.$fDataProduct_info:
         const Data.Functor.Product.$fDataProduct_entry;
         const 0;
         const 914828034062;
         const 25769803802;
         const Sg5Oh_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.58198833 UTC

[section ""data" . Data.Functor.Product.Pair_closure" {
     Data.Functor.Product.Pair_closure:
         const Data.Functor.Product.Pair_info;
 },
 Data.Functor.Product.Pair_entry() //  [R2, R3]
         { []
         }
     {offset
       cganL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cganP; else goto cganO;
       cganP: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.Pair_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cganO: // global
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.Pair_info" {
     Data.Functor.Product.Pair_info:
         const Data.Functor.Product.Pair_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.585814793 UTC

[section ""cstring" . ig8iO_str" {
     ig8iO_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,80,114,111,100,117,99,116,46,80,97,105,114]
 },
 Data.Functor.Product.Pair_con_entry() //  [R1]
         { []
         }
     {offset
       cganV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.Pair_con_info" {
     Data.Functor.Product.Pair_con_info:
         const Data.Functor.Product.Pair_con_entry;
         const 2;
         const 4;
         const ig8iO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:57.589764246 UTC

[section ""relreadonly" . Sg5Oh_srt" {
     Sg5Oh_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Product.$fRead1Product1_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadList_closure;
         const Data.Functor.Product.$fRead1Product_closure;
         const Data.Functor.Product.$fRead1Product2_closure;
         const Data.Functor.Product.$w$cliftShowsPrec_closure;
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure;
         const Data.Functor.Product.$fShow1Product_$cliftShowList_closure;
         const Data.Functor.Product.$fShow1Product_closure;
         const Data.Functor.Product.$fReadProduct_$creadPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadsPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadListPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadList_closure;
         const Data.Functor.Product.$fReadProduct_closure;
         const Data.Functor.Product.$w$cshowsPrec_closure;
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_closure;
         const Data.Functor.Product.$w$cshow_closure;
         const Data.Functor.Product.$fShowProduct_$cshow_closure;
         const Data.Functor.Product.$fShowProduct_$cshowList_closure;
         const Data.Functor.Product.$fShowProduct_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Product.$fFoldableProduct_$csum_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Product.$fFoldableProduct2_closure;
         const Data.Functor.Product.$fFoldableProduct_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Product.$fFoldableProduct3_closure;
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Product.$fFoldableProduct_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Product.$fFoldableProduct8_closure;
         const Data.Functor.Product.$w$cfoldl_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_closure;
         const Data.Functor.Product.$w$cfoldl1_closure;
         const Data.Functor.Product.$fFoldableProduct7_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure;
         const Data.Functor.Product.$w$cfoldr'_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure;
         const Data.Functor.Product.$w$cfoldr_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_closure;
         const Data.Functor.Product.$w$cfoldl'_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure;
         const Data.Functor.Product.$fFoldableProduct_$clength_closure;
         const Data.Functor.Product.$w$cfoldr1_closure;
         const Data.Functor.Product.$fFoldableProduct9_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure;
         const Data.Functor.Product.$fFoldableProduct_$cnull_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Product.$fFoldableProduct_$cproduct_closure;
         const Data.Functor.Product.$fFoldableProduct_$ctoList_closure;
         const Data.Functor.Product.$fFoldableProduct_closure;
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure;
         const Data.Functor.Product.$fTraversableProduct_closure;
         const poly_some_v_rg5o0_closure;
         const Data.Functor.Product.$fAlternativeProduct_$csome_closure;
         const Data.Functor.Product.$fAlternativeProduct_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Product.$fMonadProduct_closure;
         const lvl4_rg5o1_closure;
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure;
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure;
         const Data.Functor.Product.$fMonadPlusProduct_closure;
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure;
         const Data.Functor.Product.$fMonadFixProduct_closure;
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure;
         const Data.Functor.Product.$fMonadZipProduct_closure;
         const GHC.List.badHead_closure;
         const go61_rg5o2_closure;
         const Data.Functor.Product.$fRead1Product2_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Functor.Product.$fDataProduct4_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Product.$w$cp1Data_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Product.$fDataProduct_$cgmapQi_closure;
         const Data.Functor.Product.$cPair_closure;
         const lvl5_rg5oj_closure;
         const Data.Functor.Product.$tProduct_closure;
         const Data.Functor.Product.$fDataProduct_closure;
         const lvl6_rg5ok_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.951691098 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:03.954578721 UTC

[section ""data" . Data.Functor.Product.$fEq1Product_$cliftEq_closure" {
     Data.Functor.Product.$fEq1Product_$cliftEq_closure:
         const Data.Functor.Product.$fEq1Product_$cliftEq_info;
 },
 Data.Functor.Product.$fEq1Product_$cliftEq_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cgaJO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgaJS; else goto cgaJT;
       cgaJS: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEq1Product_$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaJT: // global
           I64[Sp - 40] = block_cgaJL_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaKd; else goto cgaJM;
       ugaKd: // global
           call _cgaJL(R1) args: 0, res: 0, upd: 0;
       cgaJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEq1Product_$cliftEq_info" {
     Data.Functor.Product.$fEq1Product_$cliftEq_info:
         const Data.Functor.Product.$fEq1Product_$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaJL() //  [R1]
         { []
         }
     {offset
       cgaJL: // global
           I64[Sp - 8] = block_cgaJR_info;
           _sgao8::P64 = P64[R1 + 7];
           _sgao9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgao9::P64;
           P64[Sp + 32] = _sgao8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaKc; else goto cgaJV;
       ugaKc: // global
           call _cgaJR(R1) args: 0, res: 0, upd: 0;
       cgaJV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaJL_info" {
     block_cgaJL_info:
         const _cgaJL;
         const 4;
         const 30;
 },
 _cgaJR() //  [R1]
         { []
         }
     {offset
       cgaJR: // global
           I64[Sp] = block_cgaJZ_info;
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           _sgaoc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 40] = _sgaoc::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaJR_info" {
     block_cgaJR_info:
         const _cgaJR;
         const 5;
         const 30;
 },
 _cgaJZ() //  [R1]
         { []
         }
     {offset
       cgaJZ: // global
           if (R1 & 7 == 1) goto cgaK6; else goto cgaKa;
       cgaK6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgaKa: // global
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaJZ_info" {
     block_cgaJZ_info:
         const _cgaJZ;
         const 133;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.963231702 UTC

[section ""data" . Data.Functor.Product.$fEq1Product_closure" {
     Data.Functor.Product.$fEq1Product_closure:
         const Data.Functor.Product.$fEq1Product_info;
 },
 Data.Functor.Product.$fEq1Product_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgaKF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Product.$fEq1Product_$cliftEq_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEq1Product_info" {
     Data.Functor.Product.$fEq1Product_info:
         const Data.Functor.Product.$fEq1Product_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.967827008 UTC

[section ""data" . Data.Functor.Product.$w$cliftCompare_closure" {
     Data.Functor.Product.$w$cliftCompare_closure:
         const Data.Functor.Product.$w$cliftCompare_info;
 },
 Data.Functor.Product.$w$cliftCompare_slow() //  [R1]
         { []
         }
     {offset
       cgaKN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$w$cliftCompare_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cgaKY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgaKZ; else goto cgaL0;
       cgaKZ: // global
           R1 = Data.Functor.Product.$w$cliftCompare_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgaL0: // global
           I64[Sp - 24] = block_cgaKR_info;
           R2 = R2;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = R4;
           P64[Sp - 40] = R5;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cliftCompare_info" {
     Data.Functor.Product.$w$cliftCompare_info:
         const Data.Functor.Product.$w$cliftCompare_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$cliftCompare_slow;
 },
 _cgaKR() //  [R1]
         { []
         }
     {offset
       cgaKR: // global
           _cgaKX::P64 = R1 & 7;
           if (_cgaKX::P64 < 3) goto ugaLa; else goto cgaKW;
       ugaLa: // global
           if (_cgaKX::P64 < 2) goto cgaKU; else goto cgaKV;
       cgaKU: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgaKV: // global
           R2 = P64[Sp + 24];
           _sgaog::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           _sgaoi::P64 = P64[Sp + 16];
           P64[Sp + 16] = _sgaog::P64;
           P64[Sp + 24] = _sgaoi::P64;
           Sp = Sp + 8;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cgaKW: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaKR_info" {
     block_cgaKR_info:
         const _cgaKR;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.975714894 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product_$cliftCompare_closure" {
     Data.Functor.Product.$fOrd1Product_$cliftCompare_closure:
         const Data.Functor.Product.$fOrd1Product_$cliftCompare_info;
 },
 Data.Functor.Product.$fOrd1Product_$cliftCompare_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cgaLB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgaLF; else goto cgaLG;
       cgaLF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaLG: // global
           I64[Sp - 40] = block_cgaLy_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaLO; else goto cgaLz;
       ugaLO: // global
           call _cgaLy(R1) args: 0, res: 0, upd: 0;
       cgaLz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product_$cliftCompare_info" {
     Data.Functor.Product.$fOrd1Product_$cliftCompare_info:
         const Data.Functor.Product.$fOrd1Product_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaLy() //  [R1]
         { []
         }
     {offset
       cgaLy: // global
           I64[Sp - 8] = block_cgaLE_info;
           _sgaos::P64 = P64[R1 + 7];
           _sgaot::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaot::P64;
           P64[Sp + 32] = _sgaos::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaLN; else goto cgaLI;
       ugaLN: // global
           call _cgaLE(R1) args: 0, res: 0, upd: 0;
       cgaLI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaLy_info" {
     block_cgaLy_info:
         const _cgaLy;
         const 4;
         const 30;
 },
 _cgaLE() //  [R1]
         { []
         }
     {offset
       cgaLE: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaLE_info" {
     block_cgaLE_info:
         const _cgaLE;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.983913988 UTC

[section ""data" . Data.Functor.Product.$w$cp1Ord1_closure" {
     Data.Functor.Product.$w$cp1Ord1_closure:
         const Data.Functor.Product.$w$cp1Ord1_info;
 },
 Data.Functor.Product.$w$cp1Ord1_slow() //  [R1]
         { []
         }
     {offset
       cgaM7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$w$cp1Ord1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgaMh: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgaMi; else goto cgaMj;
       cgaMi: // global
           R1 = Data.Functor.Product.$w$cp1Ord1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgaMj: // global
           I64[Sp - 24] = block_cgaMb_info;
           R2 = R2;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = R4;
           P64[Sp - 40] = R5;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R3;
           Sp = Sp - 56;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cp1Ord1_info" {
     Data.Functor.Product.$w$cp1Ord1_info:
         const Data.Functor.Product.$w$cp1Ord1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$cp1Ord1_slow;
 },
 _cgaMb() //  [R1]
         { []
         }
     {offset
       cgaMb: // global
           if (R1 & 7 == 1) goto cgaMe; else goto cgaMf;
       cgaMe: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgaMf: // global
           R2 = P64[Sp + 24];
           _sgaoz::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_ppp_info;
           _sgaoB::P64 = P64[Sp + 16];
           P64[Sp + 16] = _sgaoz::P64;
           P64[Sp + 24] = _sgaoB::P64;
           Sp = Sp + 8;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaMb_info" {
     block_cgaMb_info:
         const _cgaMb;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:03.99360819 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product1_closure" {
     Data.Functor.Product.$fOrd1Product1_closure:
         const Data.Functor.Product.$fOrd1Product1_info;
 },
 Data.Functor.Product.$fOrd1Product1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgaMP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgaMT; else goto cgaMU;
       cgaMT: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaMU: // global
           I64[Sp - 40] = block_cgaMM_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaN2; else goto cgaMN;
       ugaN2: // global
           call _cgaMM(R1) args: 0, res: 0, upd: 0;
       cgaMN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product1_info" {
     Data.Functor.Product.$fOrd1Product1_info:
         const Data.Functor.Product.$fOrd1Product1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaMM() //  [R1]
         { []
         }
     {offset
       cgaMM: // global
           I64[Sp - 8] = block_cgaMS_info;
           _sgaoL::P64 = P64[R1 + 7];
           _sgaoM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaoM::P64;
           P64[Sp + 32] = _sgaoL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaN1; else goto cgaMW;
       ugaN1: // global
           call _cgaMS(R1) args: 0, res: 0, upd: 0;
       cgaMW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaMM_info" {
     block_cgaMM_info:
         const _cgaMM;
         const 4;
         const 30;
 },
 _cgaMS() //  [R1]
         { []
         }
     {offset
       cgaMS: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaMS_info" {
     block_cgaMS_info:
         const _cgaMS;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.001361777 UTC

[section ""data" . Data.Functor.Product.$fOrd1Product_closure" {
     Data.Functor.Product.$fOrd1Product_closure:
         const Data.Functor.Product.$fOrd1Product_info;
 },
 sat_sgaoT_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgaNt: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fOrd1Product_$cliftCompare_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaoT_info" {
     sat_sgaoT_info:
         const sat_sgaoT_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaoS_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgaNB: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fOrd1Product1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaoS_info" {
     sat_sgaoS_info:
         const sat_sgaoS_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Product.$fOrd1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cgaNF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgaNJ; else goto cgaNI;
       cgaNJ: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrd1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaNI: // global
           I64[Hp - 64] = sat_sgaoT_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgaoS_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrd1Product_info" {
     Data.Functor.Product.$fOrd1Product_info:
         const Data.Functor.Product.$fOrd1Product_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.007393422 UTC

[section ""cstring" . Data.Functor.Product.$fRead1Product3_bytes" {
     Data.Functor.Product.$fRead1Product3_bytes:
         I8[] [80,97,105,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.009769223 UTC

[section ""data" . Data.Functor.Product.$fRead1Product2_closure" {
     Data.Functor.Product.$fRead1Product2_closure:
         const Data.Functor.Product.$fRead1Product2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fRead1Product2_entry() //  [R1]
         { []
         }
     {offset
       cgaO7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaO8; else goto cgaO9;
       cgaO8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaO9: // global
           (_cgaO4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgaO4::I64 == 0) goto cgaO6; else goto cgaO5;
       cgaO6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgaO5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgaO4::I64;
           R2 = Data.Functor.Product.$fRead1Product3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product2_info" {
     Data.Functor.Product.$fRead1Product2_info:
         const Data.Functor.Product.$fRead1Product2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.013570573 UTC

[section ""data" . Data.Functor.Product.$fRead1Product1_closure" {
     Data.Functor.Product.$fRead1Product1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Product.$fRead1Product2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.0152509 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_lvl3_closure" {
     Data.Functor.Product.$fRead1Product_lvl3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.022162685 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_info;
         const 0;
 },
 reader_sgaoY_entry() //  [R1]
         { []
         }
     {offset
       cgaOs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgaOt; else goto cgaOu;
       cgaOt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader_sgaoY_info" {
     reader_sgaoY_info:
         const reader_sgaoY_entry;
         const 3;
         const 15;
 },
 reader1_sgaoZ_entry() //  [R1]
         { []
         }
     {offset
       cgaOz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgaOA; else goto cgaOB;
       cgaOA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaOB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader1_sgaoZ_info" {
     reader1_sgaoZ_info:
         const reader1_sgaoZ_entry;
         const 3;
         const 15;
 },
 sat_sgap8_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaP1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaP5; else goto cgaP4;
       cgaP5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaP4: // global
           _sgap2::P64 = P64[R1 + 7];
           _sgap5::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sgap5::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sgap2::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgap8_info" {
     sat_sgap8_info:
         const sat_sgap8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgap9_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaP6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaPa; else goto cgaP9;
       cgaPa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaP9: // global
           _sgaoZ::P64 = P64[R1 + 7];
           _sgap2::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sgap8_info;
           P64[Hp - 8] = _sgap2::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = Data.Functor.Product.$fRead1Product_lvl3_closure+1;
           R1 = _sgaoZ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgap9_info" {
     sat_sgap9_info:
         const sat_sgap9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgapa_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaPb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaPf; else goto cgaPe;
       cgaPf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaPe: // global
           _sgaoY::P64 = P64[R1 + 7];
           _sgaoZ::P64 = P64[R1 + 15];
           _sgap2::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_sgap9_info;
           P64[Hp - 8] = _sgaoZ::P64;
           P64[Hp] = _sgap2::P64;
           R3 = Hp - 15;
           R2 = Data.Functor.Product.$fRead1Product_lvl3_closure+1;
           R1 = _sgaoY::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapa_info" {
     sat_sgapa_info:
         const sat_sgapa_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 $wlvl_sgap0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaPj: // global
           _sgap2::P64 = R3;
           _sgap1::I64 = R2;
           _sgap0::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cgaPk; else goto cgaPl;
       cgaPl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgaPn; else goto cgaPm;
       cgaPn: // global
           HpAlloc = 32;
           goto cgaPk;
       cgaPk: // global
           R3 = _sgap2::P64;
           R2 = _sgap1::I64;
           R1 = _sgap0::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaPm: // global
           if (%MO_S_Gt_W64(_sgap1::I64, 10)) goto cgaPh; else goto cgaPi;
       cgaPh: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgaPi: // global
           _sgaoY::P64 = P64[_sgap0::P64 + 6];
           _sgaoZ::P64 = P64[_sgap0::P64 + 14];
           I64[Hp - 24] = sat_sgapa_info;
           P64[Hp - 16] = _sgaoY::P64;
           P64[Hp - 8] = _sgaoZ::P64;
           P64[Hp] = _sgap2::P64;
           I64[Sp - 8] = block_cgaPo_info;
           R3 = Hp - 23;
           R2 = Data.Functor.Product.$fRead1Product1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sgap0_info" {
     $wlvl_sgap0_info:
         const $wlvl_sgap0_entry;
         const 2;
         const 12884901899;
         const 8589934605;
         const SgaPW_srt;
 },
 _cgaPo() //  [R1]
         { []
         }
     {offset
       cgaPo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgaPt; else goto cgaPs;
       cgaPt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgaPs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaPo_info" {
     block_cgaPo_info:
         const _cgaPo;
         const 0;
         const 30;
 },
 lvl9_sgapd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaPC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgaPD; else goto cgaPE;
       cgaPD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaPE: // global
           I64[Sp - 24] = block_cgaPz_info;
           _sgap0::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sgap0::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugaPI; else goto cgaPA;
       ugaPI: // global
           call _cgaPz(R1) args: 0, res: 0, upd: 0;
       cgaPA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_sgapd_info" {
     lvl9_sgapd_info:
         const lvl9_sgapd_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SgaPW_srt;
 },
 _cgaPz() //  [R1]
         { []
         }
     {offset
       cgaPz: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sgap0_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaPz_info" {
     block_cgaPz_info:
         const _cgaPz;
         const 2;
         const 12884901918;
         const SgaPW_srt;
 },
 sat_sgapk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaPO: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapk_info" {
     sat_sgapk_info:
         const sat_sgapk_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SgaPW_srt+16;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cgaPR: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cgaPV; else goto cgaPU;
       cgaPV: // global
           HpAlloc = 136;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaPU: // global
           I64[Hp - 128] = reader_sgaoY_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           I64[Hp - 88] = reader1_sgaoZ_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = $wlvl_sgap0_info;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl9_sgapd_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sgapk_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const SgaPW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.046801002 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info;
         const 0;
 },
 sat_sgapv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaRi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgaRj; else goto cgaRk;
       cgaRj: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaRk: // global
           I64[Sp - 8] = block_cgaRf_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapv_info" {
     sat_sgapv_info:
         const sat_sgapv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cgaRf() //  [R1]
         { []
         }
     {offset
       cgaRf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgaRn; else goto cgaRm;
       cgaRn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgaRm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaRf_info" {
     block_cgaRf_info:
         const _cgaRf;
         const 0;
         const 30;
 },
 sat_sgapq_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaRt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapq_info" {
     sat_sgapq_info:
         const sat_sgapq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sgapp_entry() //  [R1]
         { []
         }
     {offset
       cgaRw: // global
           _sgapp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgaRx; else goto cgaRy;
       cgaRy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgaRA; else goto cgaRz;
       cgaRA: // global
           HpAlloc = 32;
           goto cgaRx;
       cgaRx: // global
           R1 = _sgapp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaRz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgapp::P64;
           _sgapl::P64 = P64[_sgapp::P64 + 16];
           _sgapm::P64 = P64[_sgapp::P64 + 24];
           _sgapn::P64 = P64[_sgapp::P64 + 32];
           _sgapo::P64 = P64[_sgapp::P64 + 40];
           I64[Hp - 24] = sat_sgapv_info;
           P64[Hp - 16] = _sgapo::P64;
           I64[Hp - 8] = sat_sgapq_info;
           P64[Hp] = _sgapn::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sgapm::P64;
           R2 = _sgapl::P64;
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgapp_info" {
     ds_sgapp_info:
         const ds_sgapp_entry;
         const 4;
         const 4294967311;
         const SgaPW_srt+24;
 },
 sat_sgapx_entry() //  [R1]
         { []
         }
     {offset
       cgaRK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaRL; else goto cgaRM;
       cgaRL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaRM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgapx_info" {
     sat_sgapx_info:
         const sat_sgapx_entry;
         const 2;
         const 18;
 },
 sat_sgapy_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaRN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgaRR; else goto cgaRQ;
       cgaRR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaRQ: // global
           _sgapp::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgapx_info;
           P64[Hp - 8] = _sgapp::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapy_info" {
     sat_sgapy_info:
         const sat_sgapy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cgaRS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgaRW; else goto cgaRV;
       cgaRW: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaRV: // global
           I64[Hp - 56] = ds_sgapp_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sgapy_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadsPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgaPW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.061193354 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info;
         const 0;
 },
 sat_sgapD_entry() //  [R1]
         { []
         }
     {offset
       cgaSI: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapD_info" {
     sat_sgapD_info:
         const sat_sgapD_entry;
         const 4;
         const 4294967311;
         const SgaPW_srt+24;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cgaSL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgaSP; else goto cgaSO;
       cgaSP: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaSO: // global
           I64[Hp - 40] = sat_sgapD_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadListPrec_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const SgaPW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.069211665 UTC

[section ""data" . Data.Functor.Product.$fRead1Product_closure" {
     Data.Functor.Product.$fRead1Product_closure:
         const Data.Functor.Product.$fRead1Product_info;
         const 0;
 },
 sat_sgapJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaT7: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadListPrec_entry(R5,
                                                                             R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapJ_info" {
     sat_sgapJ_info:
         const sat_sgapJ_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+48;
 },
 sat_sgapI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaTf: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapI_info" {
     sat_sgapI_info:
         const sat_sgapI_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+24;
 },
 sat_sgapH_entry() //  [R1]
         { []
         }
     {offset
       cgaTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaTn; else goto cgaTo;
       cgaTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaTo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadList_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgapH_info" {
     sat_sgapH_info:
         const sat_sgapH_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+56;
 },
 sat_sgapG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgaTu: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fRead1Product_$cliftReadsPrec_entry(R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapG_info" {
     sat_sgapG_info:
         const sat_sgapG_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+32;
 },
 Data.Functor.Product.$fRead1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cgaTy: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgaTC; else goto cgaTB;
       cgaTC: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaTB: // global
           I64[Hp - 136] = sat_sgapJ_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgapI_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sgapH_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sgapG_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_info" {
     Data.Functor.Product.$fRead1Product_info:
         const Data.Functor.Product.$fRead1Product_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const SgaPW_srt+24;
 },
 section ""data" . Data.Functor.Product.$fRead1Product_$cliftReadList_closure" {
     Data.Functor.Product.$fRead1Product_$cliftReadList_closure:
         const Data.Functor.Product.$fRead1Product_$cliftReadList_info;
         const 0;
 },
 sat_sgapM_entry() //  [R1]
         { []
         }
     {offset
       cgaTL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaTM; else goto cgaTN;
       cgaTM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaTN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgapM_info" {
     sat_sgapM_info:
         const sat_sgapM_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+64;
 },
 Data.Functor.Product.$fRead1Product_$cliftReadList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cgaTO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgaTS; else goto cgaTR;
       cgaTS: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fRead1Product_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaTR: // global
           I64[Hp - 24] = sat_sgapM_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fRead1Product_$cliftReadList_info" {
     Data.Functor.Product.$fRead1Product_$cliftReadList_info:
         const Data.Functor.Product.$fRead1Product_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.08612023 UTC

[section ""data" . Data.Functor.Product.$w$cliftShowsPrec_closure" {
     Data.Functor.Product.$w$cliftShowsPrec_closure:
         const Data.Functor.Product.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cgaUx: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sgapV_entry() //  [R1]
         { []
         }
     {offset
       cgaUF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgaUG; else goto cgaUH;
       cgaUG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaUH: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapV_info" {
     sat_sgapV_info:
         const sat_sgapV_entry;
         const 3;
         const 15;
 },
 sat_sgapU_entry() //  [R1]
         { []
         }
     {offset
       cgaUM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgaUN; else goto cgaUO;
       cgaUN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaUO: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgapU_info" {
     sat_sgapU_info:
         const sat_sgapU_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgaUP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgaUT; else goto cgaUS;
       cgaUT: // global
           HpAlloc = 80;
           R1 = Data.Functor.Product.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgaUS: // global
           I64[Hp - 72] = sat_sgapV_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = sat_sgapU_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           _sgapR::I64 = R6;
           R6 = P64[Sp];
           R5 = _sgapR::I64;
           R4 = Data.Functor.Product.$fRead1Product2_closure;
           R3 = Hp - 72;
           R2 = Hp - 32;
           Sp = Sp + 8;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cliftShowsPrec_info" {
     Data.Functor.Product.$w$cliftShowsPrec_info:
         const Data.Functor.Product.$w$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const SgaPW_srt+72;
         const 1031;
         const Data.Functor.Product.$w$cliftShowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.095608109 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure" {
     Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure:
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cgaVn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgaVr; else goto cgaVs;
       cgaVr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgaVs: // global
           I64[Sp - 40] = block_cgaVk_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaVA; else goto cgaVl;
       ugaVA: // global
           call _cgaVk(R1) args: 0, res: 0, upd: 0;
       cgaVl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info" {
     Data.Functor.Product.$fShow1Product_$cliftShowsPrec_info:
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SgaPW_srt+80;
 },
 _cgaVk() //  [R1]
         { []
         }
     {offset
       cgaVk: // global
           I64[Sp] = block_cgaVq_info;
           _sgaq3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _sgaq3::I64;
           if (R1 & 7 != 0) goto ugaVz; else goto cgaVu;
       ugaVz: // global
           call _cgaVq(R1) args: 0, res: 0, upd: 0;
       cgaVu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaVk_info" {
     block_cgaVk_info:
         const _cgaVk;
         const 5;
         const 4294967326;
         const SgaPW_srt+80;
 },
 _cgaVq() //  [R1]
         { []
         }
     {offset
       cgaVq: // global
           R6 = I64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaVq_info" {
     block_cgaVq_info:
         const _cgaVq;
         const 1029;
         const 4294967326;
         const SgaPW_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.102210555 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct4_closure" {
     Data.Functor.Product.$fFoldableProduct4_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.105730835 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_$cliftShowList_closure" {
     Data.Functor.Product.$fShow1Product_$cliftShowList_closure:
         const Data.Functor.Product.$fShow1Product_$cliftShowList_info;
         const 0;
 },
 sat_sgaqh_entry() //  [R1, R2]
         { []
         }
     {offset
       cgaW5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgaW6; else goto cgaW7;
       cgaW6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgaW7: // global
           I64[Sp - 40] = block_cgaW2_info;
           _sgaq7::P64 = P64[R1 + 7];
           _sgaq8::P64 = P64[R1 + 15];
           _sgaq9::P64 = P64[R1 + 23];
           _sgaqa::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgaq7::P64;
           P64[Sp - 24] = _sgaq8::P64;
           P64[Sp - 16] = _sgaq9::P64;
           P64[Sp - 8] = _sgaqa::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaWb; else goto cgaW3;
       ugaWb: // global
           call _cgaW2(R1) args: 0, res: 0, upd: 0;
       cgaW3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaqh_info" {
     sat_sgaqh_info:
         const sat_sgaqh_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+80;
 },
 _cgaW2() //  [R1]
         { []
         }
     {offset
       cgaW2: // global
           R6 = 0;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaW2_info" {
     block_cgaW2_info:
         const _cgaW2;
         const 4;
         const 4294967326;
         const SgaPW_srt+80;
 },
 Data.Functor.Product.$fShow1Product_$cliftShowList_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cgaWc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgaWg; else goto cgaWf;
       cgaWg: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgaWf: // global
           I64[Hp - 32] = sat_sgaqh_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_$cliftShowList_info" {
     Data.Functor.Product.$fShow1Product_$cliftShowList_info:
         const Data.Functor.Product.$fShow1Product_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const SgaPW_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.115397264 UTC

[section ""data" . Data.Functor.Product.$fShow1Product_closure" {
     Data.Functor.Product.$fShow1Product_closure:
         const Data.Functor.Product.$fShow1Product_info;
         const 0;
 },
 sat_sgaql_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgaWG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgaWH; else goto cgaWI;
       cgaWH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaWI: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Product.$fShow1Product_$cliftShowList_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaql_info" {
     sat_sgaql_info:
         const sat_sgaql_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const SgaPW_srt+96;
 },
 sat_sgaqk_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgaWO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgaWP; else goto cgaWQ;
       cgaWP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaWQ: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Product.$fShow1Product_$cliftShowsPrec_entry(R6,
                                                                          R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaqk_info" {
     sat_sgaqk_info:
         const sat_sgaqk_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const SgaPW_srt+88;
 },
 Data.Functor.Product.$fShow1Product_entry() //  [R2, R3]
         { []
         }
     {offset
       cgaWS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgaWW; else goto cgaWV;
       cgaWW: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShow1Product_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaWV: // global
           I64[Hp - 64] = sat_sgaql_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgaqk_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShow1Product_info" {
     Data.Functor.Product.$fShow1Product_info:
         const Data.Functor.Product.$fShow1Product_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgaPW_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.124555125 UTC

[section ""data" . Data.Functor.Product.$w$c==_closure" {
     Data.Functor.Product.$w$c==_closure:
         const Data.Functor.Product.$w$c==_info;
 },
 Data.Functor.Product.$w$c==_slow() //  [R1]
         { []
         }
     {offset
       cgaXg: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c==_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 eq_sgaqt_entry() //  [R1]
         { []
         }
     {offset
       cgaXo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaXp; else goto cgaXq;
       cgaXp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaXq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eq_sgaqt_info" {
     eq_sgaqt_info:
         const eq_sgaqt_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c==_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgaXx: // global
           _sgaqq::P64 = R6;
           _sgaqp::P64 = R5;
           _sgaqo::P64 = R4;
           _sgaqn::P64 = R3;
           _sgaqm::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgaXy; else goto cgaXz;
       cgaXz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaXB; else goto cgaXA;
       cgaXB: // global
           HpAlloc = 24;
           goto cgaXy;
       cgaXy: // global
           R1 = Data.Functor.Product.$w$c==_closure;
           P64[Sp - 40] = _sgaqm::P64;
           P64[Sp - 32] = _sgaqn::P64;
           P64[Sp - 24] = _sgaqo::P64;
           P64[Sp - 16] = _sgaqp::P64;
           P64[Sp - 8] = _sgaqq::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgaXA: // global
           I64[Hp - 16] = eq_sgaqt_info;
           P64[Hp] = _sgaqo::P64;
           I64[Sp - 24] = block_cgaXr_info;
           R4 = P64[Sp];
           R3 = _sgaqp::P64;
           _cgaXk::P64 = Hp - 16;
           R2 = _cgaXk::P64;
           R1 = _sgaqm::P64;
           P64[Sp - 16] = _sgaqn::P64;
           P64[Sp - 8] = _sgaqq::P64;
           P64[Sp] = _cgaXk::P64;
           Sp = Sp - 24;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c==_info" {
     Data.Functor.Product.$w$c==_info:
         const Data.Functor.Product.$w$c==_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c==_slow;
 },
 _cgaXr() //  [R1]
         { []
         }
     {offset
       cgaXr: // global
           if (R1 & 7 == 1) goto cgaXu; else goto cgaXv;
       cgaXu: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgaXv: // global
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaXr_info" {
     block_cgaXr_info:
         const _cgaXr;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.134276844 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_$c==_closure" {
     Data.Functor.Product.$fEqProduct_$c==_closure:
         const Data.Functor.Product.$fEqProduct_$c==_info;
 },
 Data.Functor.Product.$fEqProduct_$c==_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgaYa: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgaYe; else goto cgaYf;
       cgaYe: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaYf: // global
           I64[Sp - 40] = block_cgaY7_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaYn; else goto cgaY8;
       ugaYn: // global
           call _cgaY7(R1) args: 0, res: 0, upd: 0;
       cgaY8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_$c==_info" {
     Data.Functor.Product.$fEqProduct_$c==_info:
         const Data.Functor.Product.$fEqProduct_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaY7() //  [R1]
         { []
         }
     {offset
       cgaY7: // global
           I64[Sp - 8] = block_cgaYd_info;
           _sgaqB::P64 = P64[R1 + 7];
           _sgaqC::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaqC::P64;
           P64[Sp + 32] = _sgaqB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaYm; else goto cgaYh;
       ugaYm: // global
           call _cgaYd(R1) args: 0, res: 0, upd: 0;
       cgaYh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaY7_info" {
     block_cgaY7_info:
         const _cgaY7;
         const 4;
         const 30;
 },
 _cgaYd() //  [R1]
         { []
         }
     {offset
       cgaYd: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c==_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaYd_info" {
     block_cgaYd_info:
         const _cgaYd;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.143514284 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_$c/=_closure" {
     Data.Functor.Product.$fEqProduct_$c/=_closure:
         const Data.Functor.Product.$fEqProduct_$c/=_info;
 },
 eq_sgaqR_entry() //  [R1]
         { []
         }
     {offset
       cgaYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgaYY; else goto cgaYZ;
       cgaYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgaYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . eq_sgaqR_info" {
     eq_sgaqR_info:
         const eq_sgaqR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fEqProduct_$c/=_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgaZ0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgaZ1; else goto cgaZ2;
       cgaZ1: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgaZ2: // global
           I64[Sp - 40] = block_cgaYJ_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugaZy; else goto cgaYK;
       ugaZy: // global
           call _cgaYJ(R1) args: 0, res: 0, upd: 0;
       cgaYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_$c/=_info" {
     Data.Functor.Product.$fEqProduct_$c/=_info:
         const Data.Functor.Product.$fEqProduct_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgaYJ() //  [R1]
         { []
         }
     {offset
       cgaYJ: // global
           I64[Sp - 8] = block_cgaYO_info;
           _sgaqM::P64 = P64[R1 + 7];
           _sgaqN::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaqN::P64;
           P64[Sp + 32] = _sgaqM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugaZx; else goto cgaYP;
       ugaZx: // global
           call _cgaYO(R1) args: 0, res: 0, upd: 0;
       cgaYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaYJ_info" {
     block_cgaYJ_info:
         const _cgaYJ;
         const 4;
         const 30;
 },
 _cgaYO() //  [R1]
         { []
         }
     {offset
       cgaYO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgaZ7; else goto cgaZ6;
       cgaZ7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgaZ6: // global
           _sgaqP::P64 = P64[R1 + 7];
           _sgaqQ::P64 = P64[R1 + 15];
           I64[Hp - 16] = eq_sgaqR_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_cgaZ4_info;
           R4 = _sgaqP::P64;
           R3 = P64[Sp + 40];
           _cgaYT::P64 = Hp - 16;
           R2 = _cgaYT::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sgaqQ::P64;
           P64[Sp + 40] = _cgaYT::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaYO_info" {
     block_cgaYO_info:
         const _cgaYO;
         const 5;
         const 30;
 },
 _cgaZ4() //  [R1]
         { []
         }
     {offset
       cgaZ4: // global
           if (R1 & 7 == 1) goto ugaZv; else goto cgaZi;
       ugaZv: // global
           Sp = Sp + 48;
           call _cgaZo() args: 0, res: 0, upd: 0;
       cgaZi: // global
           _cgaYT::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cgaZg_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 8];
           R2 = _cgaYT::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaZ4_info" {
     block_cgaZ4_info:
         const _cgaZ4;
         const 133;
         const 30;
 },
 _cgaZg() //  [R1]
         { []
         }
     {offset
       cgaZg: // global
           if (R1 & 7 == 1) goto ugaZw; else goto cgaZs;
       ugaZw: // global
           Sp = Sp + 8;
           call _cgaZo() args: 0, res: 0, upd: 0;
       cgaZs: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgaZg_info" {
     block_cgaZg_info:
         const _cgaZg;
         const 0;
         const 30;
 },
 _cgaZo() //  []
         { []
         }
     {offset
       cgaZo: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.158293946 UTC

[section ""data" . Data.Functor.Product.$fEqProduct_closure" {
     Data.Functor.Product.$fEqProduct_closure:
         const Data.Functor.Product.$fEqProduct_info;
 },
 sat_sgaqY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgb0o: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fEqProduct_$c/=_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaqY_info" {
     sat_sgaqY_info:
         const sat_sgaqY_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgaqX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgb0w: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fEqProduct_$c==_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaqX_info" {
     sat_sgaqX_info:
         const sat_sgaqX_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Product.$fEqProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgb0A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgb0E; else goto cgb0D;
       cgb0E: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fEqProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb0D: // global
           I64[Hp - 80] = sat_sgaqY_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgaqX_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fEqProduct_info" {
     Data.Functor.Product.$fEqProduct_info:
         const Data.Functor.Product.$fEqProduct_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.168134689 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$ccompare_closure" {
     Data.Functor.Product.$fOrdProduct_$ccompare_closure:
         const Data.Functor.Product.$fOrdProduct_$ccompare_info;
 },
 w_sgara_entry() //  [R1]
         { []
         }
     {offset
       cgb1d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb1e; else goto cgb1f;
       cgb1e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb1f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sgara_info" {
     w_sgara_info:
         const w_sgara_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$ccompare_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgb1g: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cgb1h; else goto cgb1i;
       cgb1h: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb1i: // global
           I64[Sp - 40] = block_cgb0Z_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugb1F; else goto cgb10;
       ugb1F: // global
           call _cgb0Z(R1) args: 0, res: 0, upd: 0;
       cgb10: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$ccompare_info" {
     Data.Functor.Product.$fOrdProduct_$ccompare_info:
         const Data.Functor.Product.$fOrdProduct_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgb0Z() //  [R1]
         { []
         }
     {offset
       cgb0Z: // global
           I64[Sp - 8] = block_cgb14_info;
           _sgar5::P64 = P64[R1 + 7];
           _sgar6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgar6::P64;
           P64[Sp + 32] = _sgar5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugb1E; else goto cgb15;
       ugb1E: // global
           call _cgb14(R1) args: 0, res: 0, upd: 0;
       cgb15: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb0Z_info" {
     block_cgb0Z_info:
         const _cgb0Z;
         const 4;
         const 30;
 },
 _cgb14() //  [R1]
         { []
         }
     {offset
       cgb14: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgb1n; else goto cgb1m;
       cgb1n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgb1m: // global
           _sgar8::P64 = P64[R1 + 7];
           _sgar9::P64 = P64[R1 + 15];
           I64[Hp - 16] = w_sgara_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_cgb1k_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cgb19::P64 = Hp - 16;
           P64[Sp - 24] = _cgb19::P64;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = _sgar8::P64;
           P64[Sp + 32] = _sgar9::P64;
           P64[Sp + 40] = _cgb19::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb14_info" {
     block_cgb14_info:
         const _cgb14;
         const 5;
         const 30;
 },
 _cgb1k() //  [R1]
         { []
         }
     {offset
       cgb1k: // global
           _cgb1C::P64 = R1 & 7;
           if (_cgb1C::P64 < 3) goto ugb1D; else goto cgb1B;
       ugb1D: // global
           if (_cgb1C::P64 < 2) goto cgb1t; else goto cgb1x;
       cgb1t: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgb1x: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_ppp_info;
           P64[Sp + 24] = P64[Sp + 40];
           _sgar9::P64 = P64[Sp + 32];
           P64[Sp + 32] = P64[Sp + 8];
           P64[Sp + 40] = _sgar9::P64;
           Sp = Sp + 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
       cgb1B: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb1k_info" {
     block_cgb1k_info:
         const _cgb1k;
         const 133;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.180713369 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cp1Ord_closure" {
     Data.Functor.Product.$fOrdProduct_$cp1Ord_closure:
         const Data.Functor.Product.$fOrdProduct_$cp1Ord_info;
 },
 sat_sgarh_entry() //  [R1]
         { []
         }
     {offset
       cgb2o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb2p; else goto cgb2q;
       cgb2p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb2q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgarh_info" {
     sat_sgarh_info:
         const sat_sgarh_entry;
         const 1;
         const 16;
 },
 sat_sgarg_entry() //  [R1]
         { []
         }
     {offset
       cgb2v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb2w; else goto cgb2x;
       cgb2w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb2x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgarg_info" {
     sat_sgarg_info:
         const sat_sgarg_entry;
         const 1;
         const 16;
 },
 sat_sgarf_entry() //  [R1]
         { []
         }
     {offset
       cgb2C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb2D; else goto cgb2E;
       cgb2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgarf_info" {
     sat_sgarf_info:
         const sat_sgarf_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgb2F: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgb2J; else goto cgb2I;
       cgb2J: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb2I: // global
           I64[Hp - 64] = sat_sgarh_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgarg_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgarf_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fEqProduct_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cp1Ord_info" {
     Data.Functor.Product.$fOrdProduct_$cp1Ord_info:
         const Data.Functor.Product.$fOrdProduct_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.191916687 UTC

[section ""data" . Data.Functor.Product.$w$c<_closure" {
     Data.Functor.Product.$w$c<_closure:
         const Data.Functor.Product.$w$c<_info;
 },
 Data.Functor.Product.$w$c<_slow() //  [R1]
         { []
         }
     {offset
       cgb37: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sgarp_entry() //  [R1]
         { []
         }
     {offset
       cgb3f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb3g; else goto cgb3h;
       cgb3g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgarp_info" {
     comp_sgarp_info:
         const comp_sgarp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgb3p: // global
           _sgarm::P64 = R6;
           _sgarl::P64 = R5;
           _sgark::P64 = R4;
           _sgarj::P64 = R3;
           _sgari::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgb3q; else goto cgb3r;
       cgb3r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgb3t; else goto cgb3s;
       cgb3t: // global
           HpAlloc = 24;
           goto cgb3q;
       cgb3q: // global
           R1 = Data.Functor.Product.$w$c<_closure;
           P64[Sp - 40] = _sgari::P64;
           P64[Sp - 32] = _sgarj::P64;
           P64[Sp - 24] = _sgark::P64;
           P64[Sp - 16] = _sgarl::P64;
           P64[Sp - 8] = _sgarm::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgb3s: // global
           I64[Hp - 16] = comp_sgarp_info;
           P64[Hp] = _sgark::P64;
           I64[Sp - 24] = block_cgb3i_info;
           R2 = _sgari::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cgb3b::P64 = Hp - 16;
           P64[Sp - 48] = _cgb3b::P64;
           P64[Sp - 40] = _sgarl::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sgarj::P64;
           P64[Sp - 8] = _sgarm::P64;
           P64[Sp] = _cgb3b::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c<_info" {
     Data.Functor.Product.$w$c<_info:
         const Data.Functor.Product.$w$c<_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c<_slow;
 },
 _cgb3i() //  [R1]
         { []
         }
     {offset
       cgb3i: // global
           _cgb3o::P64 = R1 & 7;
           if (_cgb3o::P64 < 3) goto ugb3P; else goto ugb3Q;
       ugb3P: // global
           if (_cgb3o::P64 < 2) goto ugb3R; else goto cgb3m;
       ugb3R: // global
           Sp = Sp + 40;
           call _cgb3K() args: 0, res: 0, upd: 0;
       cgb3m: // global
           _sgaro::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgb3z_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sgaro::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugb3Q: // global
           Sp = Sp + 40;
           call _cgb3n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb3i_info" {
     block_cgb3i_info:
         const _cgb3i;
         const 4;
         const 30;
 },
 _cgb3z() //  [R1]
         { []
         }
     {offset
       cgb3z: // global
           if (R1 & 7 == 1) goto ugb3S; else goto ugb3T;
       ugb3S: // global
           Sp = Sp + 8;
           call _cgb3K() args: 0, res: 0, upd: 0;
       ugb3T: // global
           Sp = Sp + 8;
           call _cgb3n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb3z_info" {
     block_cgb3z_info:
         const _cgb3z;
         const 0;
         const 30;
 },
 _cgb3K() //  []
         { []
         }
     {offset
       cgb3K: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgb3n() //  []
         { []
         }
     {offset
       cgb3n: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.205469488 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c<_closure" {
     Data.Functor.Product.$fOrdProduct_$c<_closure:
         const Data.Functor.Product.$fOrdProduct_$c<_info;
 },
 Data.Functor.Product.$fOrdProduct_$c<_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgb4F: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgb4J; else goto cgb4K;
       cgb4J: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb4K: // global
           I64[Sp - 40] = block_cgb4C_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugb4S; else goto cgb4D;
       ugb4S: // global
           call _cgb4C(R1) args: 0, res: 0, upd: 0;
       cgb4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c<_info" {
     Data.Functor.Product.$fOrdProduct_$c<_info:
         const Data.Functor.Product.$fOrdProduct_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgb4C() //  [R1]
         { []
         }
     {offset
       cgb4C: // global
           I64[Sp - 8] = block_cgb4I_info;
           _sgary::P64 = P64[R1 + 7];
           _sgarz::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgarz::P64;
           P64[Sp + 32] = _sgary::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugb4R; else goto cgb4M;
       ugb4R: // global
           call _cgb4I(R1) args: 0, res: 0, upd: 0;
       cgb4M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb4C_info" {
     block_cgb4C_info:
         const _cgb4C;
         const 4;
         const 30;
 },
 _cgb4I() //  [R1]
         { []
         }
     {offset
       cgb4I: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb4I_info" {
     block_cgb4I_info:
         const _cgb4I;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.214860645 UTC

[section ""data" . Data.Functor.Product.$w$c>=_closure" {
     Data.Functor.Product.$w$c>=_closure:
         const Data.Functor.Product.$w$c>=_info;
 },
 Data.Functor.Product.$w$c>=_slow() //  [R1]
         { []
         }
     {offset
       cgb5b: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c>=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sgarK_entry() //  [R1]
         { []
         }
     {offset
       cgb5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb5k; else goto cgb5l;
       cgb5k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb5l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgarK_info" {
     comp_sgarK_info:
         const comp_sgarK_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgb5t: // global
           _sgarH::P64 = R6;
           _sgarG::P64 = R5;
           _sgarF::P64 = R4;
           _sgarE::P64 = R3;
           _sgarD::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgb5u; else goto cgb5v;
       cgb5v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgb5x; else goto cgb5w;
       cgb5x: // global
           HpAlloc = 24;
           goto cgb5u;
       cgb5u: // global
           R1 = Data.Functor.Product.$w$c>=_closure;
           P64[Sp - 40] = _sgarD::P64;
           P64[Sp - 32] = _sgarE::P64;
           P64[Sp - 24] = _sgarF::P64;
           P64[Sp - 16] = _sgarG::P64;
           P64[Sp - 8] = _sgarH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgb5w: // global
           I64[Hp - 16] = comp_sgarK_info;
           P64[Hp] = _sgarF::P64;
           I64[Sp - 24] = block_cgb5m_info;
           R2 = _sgarD::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cgb5f::P64 = Hp - 16;
           P64[Sp - 48] = _cgb5f::P64;
           P64[Sp - 40] = _sgarG::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sgarE::P64;
           P64[Sp - 8] = _sgarH::P64;
           P64[Sp] = _cgb5f::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c>=_info" {
     Data.Functor.Product.$w$c>=_info:
         const Data.Functor.Product.$w$c>=_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c>=_slow;
 },
 _cgb5m() //  [R1]
         { []
         }
     {offset
       cgb5m: // global
           _cgb5s::P64 = R1 & 7;
           if (_cgb5s::P64 < 3) goto ugb5T; else goto ugb5U;
       ugb5T: // global
           if (_cgb5s::P64 < 2) goto ugb5V; else goto cgb5q;
       ugb5V: // global
           Sp = Sp + 40;
           call _cgb5O() args: 0, res: 0, upd: 0;
       cgb5q: // global
           _sgarJ::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgb5D_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sgarJ::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugb5U: // global
           Sp = Sp + 40;
           call _cgb5r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb5m_info" {
     block_cgb5m_info:
         const _cgb5m;
         const 4;
         const 30;
 },
 _cgb5D() //  [R1]
         { []
         }
     {offset
       cgb5D: // global
           if (R1 & 7 == 1) goto ugb5W; else goto ugb5X;
       ugb5W: // global
           Sp = Sp + 8;
           call _cgb5O() args: 0, res: 0, upd: 0;
       ugb5X: // global
           Sp = Sp + 8;
           call _cgb5r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb5D_info" {
     block_cgb5D_info:
         const _cgb5D;
         const 0;
         const 30;
 },
 _cgb5O() //  []
         { []
         }
     {offset
       cgb5O: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgb5r() //  []
         { []
         }
     {offset
       cgb5r: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.227812264 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c>=_closure" {
     Data.Functor.Product.$fOrdProduct_$c>=_closure:
         const Data.Functor.Product.$fOrdProduct_$c>=_info;
 },
 Data.Functor.Product.$fOrdProduct_$c>=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgb6J: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgb6N; else goto cgb6O;
       cgb6N: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb6O: // global
           I64[Sp - 40] = block_cgb6G_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugb6W; else goto cgb6H;
       ugb6W: // global
           call _cgb6G(R1) args: 0, res: 0, upd: 0;
       cgb6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c>=_info" {
     Data.Functor.Product.$fOrdProduct_$c>=_info:
         const Data.Functor.Product.$fOrdProduct_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgb6G() //  [R1]
         { []
         }
     {offset
       cgb6G: // global
           I64[Sp - 8] = block_cgb6M_info;
           _sgarT::P64 = P64[R1 + 7];
           _sgarU::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgarU::P64;
           P64[Sp + 32] = _sgarT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugb6V; else goto cgb6Q;
       ugb6V: // global
           call _cgb6M(R1) args: 0, res: 0, upd: 0;
       cgb6Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb6G_info" {
     block_cgb6G_info:
         const _cgb6G;
         const 4;
         const 30;
 },
 _cgb6M() //  [R1]
         { []
         }
     {offset
       cgb6M: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c>=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb6M_info" {
     block_cgb6M_info:
         const _cgb6M;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.241461917 UTC

[section ""data" . Data.Functor.Product.$w$c>_closure" {
     Data.Functor.Product.$w$c>_closure:
         const Data.Functor.Product.$w$c>_info;
 },
 Data.Functor.Product.$w$c>_slow() //  [R1]
         { []
         }
     {offset
       cgb7f: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c>_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sgas5_entry() //  [R1]
         { []
         }
     {offset
       cgb7n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb7o; else goto cgb7p;
       cgb7o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb7p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgas5_info" {
     comp_sgas5_info:
         const comp_sgas5_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgb7x: // global
           _sgas2::P64 = R6;
           _sgas1::P64 = R5;
           _sgas0::P64 = R4;
           _sgarZ::P64 = R3;
           _sgarY::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgb7y; else goto cgb7z;
       cgb7z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgb7B; else goto cgb7A;
       cgb7B: // global
           HpAlloc = 24;
           goto cgb7y;
       cgb7y: // global
           R1 = Data.Functor.Product.$w$c>_closure;
           P64[Sp - 40] = _sgarY::P64;
           P64[Sp - 32] = _sgarZ::P64;
           P64[Sp - 24] = _sgas0::P64;
           P64[Sp - 16] = _sgas1::P64;
           P64[Sp - 8] = _sgas2::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgb7A: // global
           I64[Hp - 16] = comp_sgas5_info;
           P64[Hp] = _sgas0::P64;
           I64[Sp - 24] = block_cgb7q_info;
           R2 = _sgarY::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cgb7j::P64 = Hp - 16;
           P64[Sp - 48] = _cgb7j::P64;
           P64[Sp - 40] = _sgas1::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sgarZ::P64;
           P64[Sp - 8] = _sgas2::P64;
           P64[Sp] = _cgb7j::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c>_info" {
     Data.Functor.Product.$w$c>_info:
         const Data.Functor.Product.$w$c>_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c>_slow;
 },
 _cgb7q() //  [R1]
         { []
         }
     {offset
       cgb7q: // global
           _cgb7w::P64 = R1 & 7;
           if (_cgb7w::P64 < 3) goto ugb7X; else goto ugb7Y;
       ugb7X: // global
           if (_cgb7w::P64 < 2) goto ugb7Z; else goto cgb7u;
       ugb7Z: // global
           Sp = Sp + 40;
           call _cgb7O() args: 0, res: 0, upd: 0;
       cgb7u: // global
           _sgas4::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgb7H_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sgas4::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugb7Y: // global
           Sp = Sp + 40;
           call _cgb7v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb7q_info" {
     block_cgb7q_info:
         const _cgb7q;
         const 4;
         const 30;
 },
 _cgb7H() //  [R1]
         { []
         }
     {offset
       cgb7H: // global
           if (R1 & 7 == 3) goto ugb80; else goto ugb81;
       ugb80: // global
           Sp = Sp + 8;
           call _cgb7v() args: 0, res: 0, upd: 0;
       ugb81: // global
           Sp = Sp + 8;
           call _cgb7O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb7H_info" {
     block_cgb7H_info:
         const _cgb7H;
         const 0;
         const 30;
 },
 _cgb7O() //  []
         { []
         }
     {offset
       cgb7O: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgb7v() //  []
         { []
         }
     {offset
       cgb7v: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.255159004 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c>_closure" {
     Data.Functor.Product.$fOrdProduct_$c>_closure:
         const Data.Functor.Product.$fOrdProduct_$c>_info;
 },
 Data.Functor.Product.$fOrdProduct_$c>_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgb8N: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgb8R; else goto cgb8S;
       cgb8R: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgb8S: // global
           I64[Sp - 40] = block_cgb8K_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugb90; else goto cgb8L;
       ugb90: // global
           call _cgb8K(R1) args: 0, res: 0, upd: 0;
       cgb8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c>_info" {
     Data.Functor.Product.$fOrdProduct_$c>_info:
         const Data.Functor.Product.$fOrdProduct_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgb8K() //  [R1]
         { []
         }
     {offset
       cgb8K: // global
           I64[Sp - 8] = block_cgb8Q_info;
           _sgase::P64 = P64[R1 + 7];
           _sgasf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgasf::P64;
           P64[Sp + 32] = _sgase::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugb8Z; else goto cgb8U;
       ugb8Z: // global
           call _cgb8Q(R1) args: 0, res: 0, upd: 0;
       cgb8U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb8K_info" {
     block_cgb8K_info:
         const _cgb8K;
         const 4;
         const 30;
 },
 _cgb8Q() //  [R1]
         { []
         }
     {offset
       cgb8Q: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c>_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgb8Q_info" {
     block_cgb8Q_info:
         const _cgb8Q;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.265094149 UTC

[section ""data" . Data.Functor.Product.$w$c<=_closure" {
     Data.Functor.Product.$w$c<=_closure:
         const Data.Functor.Product.$w$c<=_info;
 },
 Data.Functor.Product.$w$c<=_slow() //  [R1]
         { []
         }
     {offset
       cgb9j: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$c<=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 24, res: 0, upd: 8;
     }
 },
 comp_sgasq_entry() //  [R1]
         { []
         }
     {offset
       cgb9r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgb9s; else goto cgb9t;
       cgb9s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgb9t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgasq_info" {
     comp_sgasq_info:
         const comp_sgasq_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgb9B: // global
           _sgasn::P64 = R6;
           _sgasm::P64 = R5;
           _sgasl::P64 = R4;
           _sgask::P64 = R3;
           _sgasj::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgb9C; else goto cgb9D;
       cgb9D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgb9F; else goto cgb9E;
       cgb9F: // global
           HpAlloc = 24;
           goto cgb9C;
       cgb9C: // global
           R1 = Data.Functor.Product.$w$c<=_closure;
           P64[Sp - 40] = _sgasj::P64;
           P64[Sp - 32] = _sgask::P64;
           P64[Sp - 24] = _sgasl::P64;
           P64[Sp - 16] = _sgasm::P64;
           P64[Sp - 8] = _sgasn::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cgb9E: // global
           I64[Hp - 16] = comp_sgasq_info;
           P64[Hp] = _sgasl::P64;
           I64[Sp - 24] = block_cgb9u_info;
           R2 = _sgasj::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           _cgb9n::P64 = Hp - 16;
           P64[Sp - 48] = _cgb9n::P64;
           P64[Sp - 40] = _sgasm::P64;
           P64[Sp - 32] = P64[Sp];
           P64[Sp - 16] = _sgask::P64;
           P64[Sp - 8] = _sgasn::P64;
           P64[Sp] = _cgb9n::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c<=_info" {
     Data.Functor.Product.$w$c<=_info:
         const Data.Functor.Product.$w$c<=_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Product.$w$c<=_slow;
 },
 _cgb9u() //  [R1]
         { []
         }
     {offset
       cgb9u: // global
           _cgb9A::P64 = R1 & 7;
           if (_cgb9A::P64 < 3) goto ugba1; else goto ugba2;
       ugba1: // global
           if (_cgb9A::P64 < 2) goto ugba3; else goto cgb9y;
       ugba3: // global
           Sp = Sp + 40;
           call _cgb9S() args: 0, res: 0, upd: 0;
       cgb9y: // global
           _sgasp::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgb9L_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = _sgasp::P64;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugba2: // global
           Sp = Sp + 40;
           call _cgb9z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb9u_info" {
     block_cgb9u_info:
         const _cgb9u;
         const 4;
         const 30;
 },
 _cgb9L() //  [R1]
         { []
         }
     {offset
       cgb9L: // global
           if (R1 & 7 == 3) goto ugba4; else goto ugba5;
       ugba4: // global
           Sp = Sp + 8;
           call _cgb9z() args: 0, res: 0, upd: 0;
       ugba5: // global
           Sp = Sp + 8;
           call _cgb9S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgb9L_info" {
     block_cgb9L_info:
         const _cgb9L;
         const 0;
         const 30;
 },
 _cgb9S() //  []
         { []
         }
     {offset
       cgb9S: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgb9z() //  []
         { []
         }
     {offset
       cgb9z: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.279137587 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$c<=_closure" {
     Data.Functor.Product.$fOrdProduct_$c<=_closure:
         const Data.Functor.Product.$fOrdProduct_$c<=_info;
 },
 Data.Functor.Product.$fOrdProduct_$c<=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgbaR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbaV; else goto cgbaW;
       cgbaV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbaW: // global
           I64[Sp - 40] = block_cgbaO_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbb4; else goto cgbaP;
       ugbb4: // global
           call _cgbaO(R1) args: 0, res: 0, upd: 0;
       cgbaP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$c<=_info" {
     Data.Functor.Product.$fOrdProduct_$c<=_info:
         const Data.Functor.Product.$fOrdProduct_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbaO() //  [R1]
         { []
         }
     {offset
       cgbaO: // global
           I64[Sp - 8] = block_cgbaU_info;
           _sgasz::P64 = P64[R1 + 7];
           _sgasA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgasA::P64;
           P64[Sp + 32] = _sgasz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugbb3; else goto cgbaY;
       ugbb3: // global
           call _cgbaU(R1) args: 0, res: 0, upd: 0;
       cgbaY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbaO_info" {
     block_cgbaO_info:
         const _cgbaO;
         const 4;
         const 30;
 },
 _cgbaU() //  [R1]
         { []
         }
     {offset
       cgbaU: // global
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$c<=_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbaU_info" {
     block_cgbaU_info:
         const _cgbaU;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.289360644 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cmax_closure" {
     Data.Functor.Product.$fOrdProduct_$cmax_closure:
         const Data.Functor.Product.$fOrdProduct_$cmax_info;
 },
 comp_sgasP_entry() //  [R1]
         { []
         }
     {offset
       cgbbE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbbF; else goto cgbbG;
       cgbbF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbbG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgasP_info" {
     comp_sgasP_info:
         const comp_sgasP_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cmax_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cgbbH: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgbbI; else goto cgbbJ;
       cgbbI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbbJ: // global
           I64[Sp - 40] = block_cgbbq_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbcm; else goto cgbbr;
       ugbcm: // global
           call _cgbbq(R1) args: 0, res: 0, upd: 0;
       cgbbr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cmax_info" {
     Data.Functor.Product.$fOrdProduct_$cmax_info:
         const Data.Functor.Product.$fOrdProduct_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbbq() //  [R1]
         { []
         }
     {offset
       cgbbq: // global
           I64[Sp - 16] = block_cgbbv_info;
           _sgasJ::P64 = R1;
           _sgasK::P64 = P64[R1 + 7];
           _sgasL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _sgasL::P64;
           P64[Sp] = _sgasK::P64;
           P64[Sp + 32] = _sgasJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugbcl; else goto cgbbw;
       ugbcl: // global
           call _cgbbv(R1) args: 0, res: 0, upd: 0;
       cgbbw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbbq_info" {
     block_cgbbq_info:
         const _cgbbq;
         const 4;
         const 30;
 },
 _cgbbv() //  [R1]
         { []
         }
     {offset
       cgbbv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgbbO; else goto cgbbN;
       cgbbO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbbN: // global
           _sgasN::P64 = P64[R1 + 7];
           _sgasO::P64 = P64[R1 + 15];
           I64[Hp - 16] = comp_sgasP_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cgbbL_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cgbbA::P64 = Hp - 16;
           P64[Sp - 24] = _cgbbA::P64;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = _sgasN::P64;
           P64[Sp + 16] = _sgasO::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 40] = _cgbbA::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbbv_info" {
     block_cgbbv_info:
         const _cgbbv;
         const 6;
         const 30;
 },
 _cgbbL() //  [R1]
         { []
         }
     {offset
       cgbbL: // global
           _cgbce::P64 = R1 & 7;
           if (_cgbce::P64 < 3) goto ugbcg; else goto ugbch;
       ugbcg: // global
           if (_cgbce::P64 < 2) goto ugbci; else goto cgbbZ;
       ugbci: // global
           Sp = Sp + 24;
           call _cgbc5() args: 0, res: 0, upd: 0;
       cgbbZ: // global
           _sgasO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgbbX_info;
           R2 = P64[Sp + 32];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _sgasO::P64;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugbch: // global
           Sp = Sp + 48;
           call _cgbcd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgbbL_info" {
     block_cgbbL_info:
         const _cgbbL;
         const 6;
         const 30;
 },
 _cgbbX() //  [R1]
         { []
         }
     {offset
       cgbbX: // global
           if (R1 & 7 == 3) goto ugbcj; else goto ugbck;
       ugbcj: // global
           Sp = Sp + 32;
           call _cgbcd() args: 0, res: 0, upd: 0;
       ugbck: // global
           Sp = Sp + 8;
           call _cgbc5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgbbX_info" {
     block_cgbbX_info:
         const _cgbbX;
         const 388;
         const 30;
 },
 _cgbc5() //  []
         { []
         }
     {offset
       cgbc5: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgbcd() //  []
         { []
         }
     {offset
       cgbcd: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.305670355 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_$cmin_closure" {
     Data.Functor.Product.$fOrdProduct_$cmin_closure:
         const Data.Functor.Product.$fOrdProduct_$cmin_info;
 },
 comp_sgat3_entry() //  [R1]
         { []
         }
     {offset
       cgbdt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbdu; else goto cgbdv;
       cgbdu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbdv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . comp_sgat3_info" {
     comp_sgat3_info:
         const comp_sgat3_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fOrdProduct_$cmin_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cgbdw: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cgbdx; else goto cgbdy;
       cgbdx: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbdy: // global
           I64[Sp - 40] = block_cgbdf_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbeb; else goto cgbdg;
       ugbeb: // global
           call _cgbdf(R1) args: 0, res: 0, upd: 0;
       cgbdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_$cmin_info" {
     Data.Functor.Product.$fOrdProduct_$cmin_info:
         const Data.Functor.Product.$fOrdProduct_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbdf() //  [R1]
         { []
         }
     {offset
       cgbdf: // global
           I64[Sp - 16] = block_cgbdk_info;
           _sgasX::P64 = R1;
           _sgasY::P64 = P64[R1 + 7];
           _sgasZ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _sgasZ::P64;
           P64[Sp] = _sgasY::P64;
           P64[Sp + 32] = _sgasX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugbea; else goto cgbdl;
       ugbea: // global
           call _cgbdk(R1) args: 0, res: 0, upd: 0;
       cgbdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbdf_info" {
     block_cgbdf_info:
         const _cgbdf;
         const 4;
         const 30;
 },
 _cgbdk() //  [R1]
         { []
         }
     {offset
       cgbdk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgbdD; else goto cgbdC;
       cgbdD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbdC: // global
           _sgat1::P64 = P64[R1 + 7];
           _sgat2::P64 = P64[R1 + 15];
           I64[Hp - 16] = comp_sgat3_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_cgbdA_info;
           R2 = P64[Sp + 24];
           I64[Sp - 32] = stg_ap_ppp_info;
           _cgbdp::P64 = Hp - 16;
           P64[Sp - 24] = _cgbdp::P64;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = _sgat1::P64;
           P64[Sp + 16] = _sgat2::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 40] = _cgbdp::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbdk_info" {
     block_cgbdk_info:
         const _cgbdk;
         const 6;
         const 30;
 },
 _cgbdA() //  [R1]
         { []
         }
     {offset
       cgbdA: // global
           _cgbe3::P64 = R1 & 7;
           if (_cgbe3::P64 < 3) goto ugbe5; else goto ugbe6;
       ugbe5: // global
           if (_cgbe3::P64 < 2) goto ugbe7; else goto cgbdO;
       ugbe7: // global
           Sp = Sp + 48;
           call _cgbdU() args: 0, res: 0, upd: 0;
       cgbdO: // global
           _sgat2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cgbdM_info;
           R2 = P64[Sp + 32];
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _sgat2::P64;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
       ugbe6: // global
           Sp = Sp + 24;
           call _cgbe2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgbdA_info" {
     block_cgbdA_info:
         const _cgbdA;
         const 6;
         const 30;
 },
 _cgbdM() //  [R1]
         { []
         }
     {offset
       cgbdM: // global
           if (R1 & 7 == 3) goto ugbe8; else goto ugbe9;
       ugbe8: // global
           Sp = Sp + 8;
           call _cgbe2() args: 0, res: 0, upd: 0;
       ugbe9: // global
           Sp = Sp + 32;
           call _cgbdU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgbdM_info" {
     block_cgbdM_info:
         const _cgbdM;
         const 388;
         const 30;
 },
 _cgbdU() //  []
         { []
         }
     {offset
       cgbdU: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgbe2() //  []
         { []
         }
     {offset
       cgbe2: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.322944433 UTC

[section ""data" . Data.Functor.Product.$fOrdProduct_closure" {
     Data.Functor.Product.$fOrdProduct_closure:
         const Data.Functor.Product.$fOrdProduct_info;
 },
 sat_sgatg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbf9: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$cmin_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatg_info" {
     sat_sgatg_info:
         const sat_sgatg_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgatf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfh: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$cmax_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatf_info" {
     sat_sgatf_info:
         const sat_sgatf_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgate_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfp: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c>=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgate_info" {
     sat_sgate_info:
         const sat_sgate_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgatd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfx: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c>_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatd_info" {
     sat_sgatd_info:
         const sat_sgatd_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgatc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfF: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c<=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatc_info" {
     sat_sgatc_info:
         const sat_sgatc_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgatb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfN: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$c<_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatb_info" {
     sat_sgatb_info:
         const sat_sgatb_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgata_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbfV: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fOrdProduct_$ccompare_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgata_info" {
     sat_sgata_info:
         const sat_sgata_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgat9_entry() //  [R1]
         { []
         }
     {offset
       cgbg2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbg3; else goto cgbg4;
       cgbg3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbg4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fOrdProduct_$cp1Ord_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgat9_info" {
     sat_sgat9_info:
         const sat_sgat9_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fOrdProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgbg6: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cgbga; else goto cgbg9;
       cgbga: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fOrdProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbg9: // global
           I64[Hp - 328] = sat_sgatg_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sgatf_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sgate_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sgatd_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sgatc_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sgatb_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sgata_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sgat9_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fOrdProduct_info" {
     Data.Functor.Product.$fOrdProduct_info:
         const Data.Functor.Product.$fOrdProduct_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.340984491 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadPrec_info;
         const 0;
 },
 sat_sgatl_entry() //  [R1]
         { []
         }
     {offset
       cgbh5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbh6; else goto cgbh7;
       cgbh6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbh7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatl_info" {
     sat_sgatl_info:
         const sat_sgatl_entry;
         const 1;
         const 16;
 },
 sat_sgatk_entry() //  [R1]
         { []
         }
     {offset
       cgbhc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbhd; else goto cgbhe;
       cgbhd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbhe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatk_info" {
     sat_sgatk_info:
         const sat_sgatk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fReadProduct_$creadPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgbhf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbhj; else goto cgbhi;
       cgbhj: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbhi: // global
           I64[Hp - 40] = sat_sgatl_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sgatk_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadPrec_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const SgaPW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.350701546 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadsPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadsPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadsPrec_info;
         const 0;
 },
 sat_sgatr_entry() //  [R1]
         { []
         }
     {offset
       cgbhM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbhN; else goto cgbhO;
       cgbhN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbhO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatr_info" {
     sat_sgatr_info:
         const sat_sgatr_entry;
         const 1;
         const 16;
 },
 sat_sgatq_entry() //  [R1]
         { []
         }
     {offset
       cgbhT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbhU; else goto cgbhV;
       cgbhU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbhV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatq_info" {
     sat_sgatq_info:
         const sat_sgatq_entry;
         const 1;
         const 16;
 },
 ds_sgatp_entry() //  [R1]
         { []
         }
     {offset
       cgbhW: // global
           _sgatp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgbhX; else goto cgbhY;
       cgbhY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbi0; else goto cgbhZ;
       cgbi0: // global
           HpAlloc = 48;
           goto cgbhX;
       cgbhX: // global
           R1 = _sgatp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbhZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgatp::P64;
           _sgatm::P64 = P64[_sgatp::P64 + 16];
           _sgatn::P64 = P64[_sgatp::P64 + 24];
           _sgato::P64 = P64[_sgatp::P64 + 32];
           I64[Hp - 40] = sat_sgatr_info;
           P64[Hp - 24] = _sgato::P64;
           I64[Hp - 16] = sat_sgatq_info;
           P64[Hp] = _sgato::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgatn::P64;
           R2 = _sgatm::P64;
           Sp = Sp - 16;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgatp_info" {
     ds_sgatp_info:
         const ds_sgatp_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+24;
 },
 sat_sgatt_entry() //  [R1]
         { []
         }
     {offset
       cgbia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbib; else goto cgbic;
       cgbib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbic: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatt_info" {
     sat_sgatt_info:
         const sat_sgatt_entry;
         const 2;
         const 18;
 },
 sat_sgatu_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbid: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgbih; else goto cgbig;
       cgbih: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbig: // global
           _sgatp::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgatt_info;
           P64[Hp - 8] = _sgatp::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatu_info" {
     sat_sgatu_info:
         const sat_sgatu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Product.$fReadProduct_$creadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cgbii: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbim; else goto cgbil;
       cgbim: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbil: // global
           I64[Hp - 48] = ds_sgatp_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sgatu_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadsPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadsPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadsPrec_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const SgaPW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.364717412 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadListPrec_closure" {
     Data.Functor.Product.$fReadProduct_$creadListPrec_closure:
         const Data.Functor.Product.$fReadProduct_$creadListPrec_info;
         const 0;
 },
 sat_sgatz_entry() //  [R1]
         { []
         }
     {offset
       cgbj9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbja; else goto cgbjb;
       cgbja: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbjb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatz_info" {
     sat_sgatz_info:
         const sat_sgatz_entry;
         const 1;
         const 16;
 },
 sat_sgaty_entry() //  [R1]
         { []
         }
     {offset
       cgbjg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbjh; else goto cgbji;
       cgbjh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbji: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaty_info" {
     sat_sgaty_info:
         const sat_sgaty_entry;
         const 1;
         const 16;
 },
 sat_sgatA_entry() //  [R1]
         { []
         }
     {offset
       cgbjj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbjn; else goto cgbjm;
       cgbjn: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbjm: // global
           _sgatv::P64 = P64[R1 + 16];
           _sgatw::P64 = P64[R1 + 24];
           _sgatx::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sgatz_info;
           P64[Hp - 24] = _sgatx::P64;
           I64[Hp - 16] = sat_sgaty_info;
           P64[Hp] = _sgatx::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgatw::P64;
           R2 = _sgatv::P64;
           call Data.Functor.Product.$fRead1Product_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatA_info" {
     sat_sgatA_info:
         const sat_sgatA_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+24;
 },
 Data.Functor.Product.$fReadProduct_$creadListPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cgbjo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgbjs; else goto cgbjr;
       cgbjs: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbjr: // global
           I64[Hp - 32] = sat_sgatA_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadListPrec_info" {
     Data.Functor.Product.$fReadProduct_$creadListPrec_info:
         const Data.Functor.Product.$fReadProduct_$creadListPrec_entry;
         const 0;
         const 35205846925326;
         const 12884901911;
         const SgaPW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.375457672 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_$creadList_closure" {
     Data.Functor.Product.$fReadProduct_$creadList_closure:
         const Data.Functor.Product.$fReadProduct_$creadList_info;
         const 0;
 },
 sat_sgatE_entry() //  [R1]
         { []
         }
     {offset
       cgbjV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbjW; else goto cgbjX;
       cgbjW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbjX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Product.$fReadProduct_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatE_info" {
     sat_sgatE_info:
         const sat_sgatE_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+128;
 },
 Data.Functor.Product.$fReadProduct_$creadList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgbjY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgbk2; else goto cgbk1;
       cgbk2: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbk1: // global
           I64[Hp - 32] = sat_sgatE_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_$creadList_info" {
     Data.Functor.Product.$fReadProduct_$creadList_info:
         const Data.Functor.Product.$fReadProduct_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgaPW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.383393889 UTC

[section ""data" . Data.Functor.Product.$fReadProduct_closure" {
     Data.Functor.Product.$fReadProduct_closure:
         const Data.Functor.Product.$fReadProduct_info;
         const 0;
 },
 sat_sgatL_entry() //  [R1]
         { []
         }
     {offset
       cgbkq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbkr; else goto cgbks;
       cgbkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatL_info" {
     sat_sgatL_info:
         const sat_sgatL_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+128;
 },
 sat_sgatK_entry() //  [R1]
         { []
         }
     {offset
       cgbkx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbky; else goto cgbkz;
       cgbky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbkz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatK_info" {
     sat_sgatK_info:
         const sat_sgatK_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+112;
 },
 sat_sgatJ_entry() //  [R1]
         { []
         }
     {offset
       cgbkE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbkF; else goto cgbkG;
       cgbkF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbkG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadList_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatJ_info" {
     sat_sgatJ_info:
         const sat_sgatJ_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+136;
 },
 sat_sgatI_entry() //  [R1]
         { []
         }
     {offset
       cgbkL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbkM; else goto cgbkN;
       cgbkM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbkN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fReadProduct_$creadsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgatI_info" {
     sat_sgatI_info:
         const sat_sgatI_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+120;
 },
 Data.Functor.Product.$fReadProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgbkP: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cgbkT; else goto cgbkS;
       cgbkT: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fReadProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbkS: // global
           I64[Hp - 192] = sat_sgatL_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sgatK_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sgatJ_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgatI_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fReadProduct_info" {
     Data.Functor.Product.$fReadProduct_info:
         const Data.Functor.Product.$fReadProduct_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const SgaPW_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.396592484 UTC

[section ""data" . Data.Functor.Product.$w$cshowsPrec_closure" {
     Data.Functor.Product.$w$cshowsPrec_closure:
         const Data.Functor.Product.$w$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cgblt: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$w$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 16, res: 0, upd: 8;
     }
 },
 sp_sgatS_entry() //  [R1]
         { []
         }
     {offset
       cgblB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgblC; else goto cgblD;
       cgblC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgblD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sgatS_info" {
     sp_sgatS_info:
         const sp_sgatS_entry;
         const 1;
         const 16;
 },
 sl_sgatT_entry() //  [R1]
         { []
         }
     {offset
       cgblI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgblJ; else goto cgblK;
       cgblJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgblK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sgatT_info" {
     sl_sgatT_info:
         const sl_sgatT_entry;
         const 1;
         const 16;
 },
 sat_sgatV_entry() //  [R1]
         { []
         }
     {offset
       cgblP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgblQ; else goto cgblR;
       cgblQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgblR: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatV_info" {
     sat_sgatV_info:
         const sat_sgatV_entry;
         const 3;
         const 15;
 },
 sat_sgatU_entry() //  [R1]
         { []
         }
     {offset
       cgblW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgblX; else goto cgblY;
       cgblX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgblY: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgatU_info" {
     sat_sgatU_info:
         const sat_sgatU_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgblZ: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgbm3; else goto cgbm2;
       cgbm3: // global
           HpAlloc = 128;
           R1 = Data.Functor.Product.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cgbm2: // global
           I64[Hp - 120] = sp_sgatS_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sl_sgatT_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgatV_info;
           P64[Hp - 56] = R3;
           _cgblx::P64 = Hp - 120;
           P64[Hp - 48] = _cgblx::P64;
           _cgblE::P64 = Hp - 96;
           P64[Hp - 40] = _cgblE::P64;
           I64[Hp - 32] = sat_sgatU_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cgblx::P64;
           P64[Hp] = _cgblE::P64;
           R6 = R6;
           R5 = R5;
           R4 = Data.Functor.Product.$fRead1Product2_closure;
           R3 = Hp - 72;
           R2 = Hp - 32;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cshowsPrec_info" {
     Data.Functor.Product.$w$cshowsPrec_info:
         const Data.Functor.Product.$w$cshowsPrec_entry;
         const 0;
         const 4402341478414;
         const 25769803776;
         const SgaPW_srt+72;
         const 518;
         const Data.Functor.Product.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.410071858 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshowsPrec_closure" {
     Data.Functor.Product.$fShowProduct_$cshowsPrec_closure:
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Product.$fShowProduct_$cshowsPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cgbmJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbmN; else goto cgbmO;
       cgbmN: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbmO: // global
           I64[Sp - 40] = block_cgbmG_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbmW; else goto cgbmH;
       ugbmW: // global
           call _cgbmG(R1) args: 0, res: 0, upd: 0;
       cgbmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshowsPrec_info" {
     Data.Functor.Product.$fShowProduct_$cshowsPrec_info:
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SgaPW_srt+152;
 },
 _cgbmG() //  [R1]
         { []
         }
     {offset
       cgbmG: // global
           I64[Sp] = block_cgbmM_info;
           _sgau2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _sgau2::I64;
           if (R1 & 7 != 0) goto ugbmV; else goto cgbmQ;
       ugbmV: // global
           call _cgbmM(R1) args: 0, res: 0, upd: 0;
       cgbmQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbmG_info" {
     block_cgbmG_info:
         const _cgbmG;
         const 4;
         const 4294967326;
         const SgaPW_srt+152;
 },
 _cgbmM() //  [R1]
         { []
         }
     {offset
       cgbmM: // global
           R6 = P64[R1 + 7];
           R5 = I64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cshowsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbmM_info" {
     block_cgbmM_info:
         const _cgbmM;
         const 516;
         const 4294967326;
         const SgaPW_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.420396413 UTC

[section ""data" . Data.Functor.Product.$w$cshow_closure" {
     Data.Functor.Product.$w$cshow_closure:
         const Data.Functor.Product.$w$cshow_info;
         const 0;
 },
 sp_sgaub_entry() //  [R1]
         { []
         }
     {offset
       cgbnl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbnm; else goto cgbnn;
       cgbnm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbnn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sgaub_info" {
     sp_sgaub_info:
         const sp_sgaub_entry;
         const 1;
         const 16;
 },
 sl_sgauc_entry() //  [R1]
         { []
         }
     {offset
       cgbns: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbnt; else goto cgbnu;
       cgbnt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbnu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sgauc_info" {
     sl_sgauc_info:
         const sl_sgauc_entry;
         const 1;
         const 16;
 },
 sat_sgaud_entry() //  [R1]
         { []
         }
     {offset
       cgbnD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgbnE; else goto cgbnF;
       cgbnE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbnF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaud_info" {
     sat_sgaud_info:
         const sat_sgaud_entry;
         const 4;
         const 15;
 },
 sat_sgauf_entry() //  [R1]
         { []
         }
     {offset
       cgbnH: // global
           _sgauf::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cgbnI; else goto cgbnJ;
       cgbnJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgbnL; else goto cgbnK;
       cgbnL: // global
           HpAlloc = 72;
           goto cgbnI;
       cgbnI: // global
           R1 = _sgauf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbnK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgauf::P64;
           _sgau6::P64 = P64[_sgauf::P64 + 16];
           _sgau7::P64 = P64[_sgauf::P64 + 24];
           _sgau9::P64 = P64[_sgauf::P64 + 32];
           _sgaua::P64 = P64[_sgauf::P64 + 40];
           _sgaub::P64 = P64[_sgauf::P64 + 48];
           _sgauc::P64 = P64[_sgauf::P64 + 56];
           I64[Hp - 64] = sat_sgaud_info;
           P64[Hp - 48] = _sgau7::P64;
           P64[Hp - 40] = _sgaua::P64;
           P64[Hp - 32] = _sgaub::P64;
           P64[Hp - 24] = _sgauc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 64;
           R2 = _sgau6::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = _sgaub::P64;
           P64[Sp - 48] = _sgauc::P64;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sgau9::P64;
           P64[Sp - 24] = Hp - 14;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgauf_info" {
     sat_sgauf_info:
         const sat_sgauf_entry;
         const 6;
         const 15;
 },
 Data.Functor.Product.$w$cshow_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbnN: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cgbnR; else goto cgbnQ;
       cgbnR: // global
           HpAlloc = 136;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cshow_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbnQ: // global
           I64[Hp - 128] = sp_sgaub_info;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sl_sgauc_info;
           P64[Hp - 88] = R4;
           I64[Hp - 80] = sat_sgauf_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 80;
           R3 = Hp - 14;
           R2 = Data.Functor.Product.$fRead1Product2_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cshow_info" {
     Data.Functor.Product.$w$cshow_info:
         const Data.Functor.Product.$w$cshow_entry;
         const 0;
         const 17596481011726;
         const 21474836505;
         const SgaPW_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.433278996 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshow_closure" {
     Data.Functor.Product.$fShowProduct_$cshow_closure:
         const Data.Functor.Product.$fShowProduct_$cshow_info;
         const 0;
 },
 Data.Functor.Product.$fShowProduct_$cshow_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cgboJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgboK; else goto cgboL;
       cgboK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgboL: // global
           I64[Sp - 32] = block_cgboG_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugboP; else goto cgboH;
       ugboP: // global
           call _cgboG(R1) args: 0, res: 0, upd: 0;
       cgboH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshow_info" {
     Data.Functor.Product.$fShowProduct_$cshow_info:
         const Data.Functor.Product.$fShowProduct_$cshow_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgaPW_srt+168;
 },
 _cgboG() //  [R1]
         { []
         }
     {offset
       cgboG: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cshow_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgboG_info" {
     block_cgboG_info:
         const _cgboG;
         const 3;
         const 4294967326;
         const SgaPW_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.440820553 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_$cshowList_closure" {
     Data.Functor.Product.$fShowProduct_$cshowList_closure:
         const Data.Functor.Product.$fShowProduct_$cshowList_info;
         const 0;
 },
 lvl9_sgaut_entry() //  [R1]
         { []
         }
     {offset
       cgbp8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbp9; else goto cgbpa;
       cgbp9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbpa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaut_info" {
     lvl9_sgaut_info:
         const lvl9_sgaut_entry;
         const 1;
         const 16;
 },
 lvl10_sgauu_entry() //  [R1]
         { []
         }
     {offset
       cgbpf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbpg; else goto cgbph;
       cgbpg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbph: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_sgauu_info" {
     lvl10_sgauu_info:
         const lvl10_sgauu_entry;
         const 1;
         const 16;
 },
 sat_sgauz_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbpq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbpr; else goto cgbps;
       cgbpr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbps: // global
           I64[Sp - 40] = block_cgbpn_info;
           _sgauo::P64 = P64[R1 + 7];
           _sgaup::P64 = P64[R1 + 15];
           _sgaut::P64 = P64[R1 + 23];
           _sgauu::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgauo::P64;
           P64[Sp - 24] = _sgaup::P64;
           P64[Sp - 16] = _sgaut::P64;
           P64[Sp - 8] = _sgauu::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbpw; else goto cgbpo;
       ugbpw: // global
           call _cgbpn(R1) args: 0, res: 0, upd: 0;
       cgbpo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgauz_info" {
     sat_sgauz_info:
         const sat_sgauz_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+80;
 },
 _cgbpn() //  [R1]
         { []
         }
     {offset
       cgbpn: // global
           R6 = 0;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbpn_info" {
     block_cgbpn_info:
         const _cgbpn;
         const 4;
         const 4294967326;
         const SgaPW_srt+80;
 },
 Data.Functor.Product.$fShowProduct_$cshowList_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cgbpx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgbpB; else goto cgbpA;
       cgbpB: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbpA: // global
           I64[Hp - 80] = lvl9_sgaut_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl10_sgauu_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgauz_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_$cshowList_info" {
     Data.Functor.Product.$fShowProduct_$cshowList_info:
         const Data.Functor.Product.$fShowProduct_$cshowList_entry;
         const 0;
         const 35188667056142;
         const 21474836505;
         const SgaPW_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.453000043 UTC

[section ""data" . Data.Functor.Product.$fShowProduct_closure" {
     Data.Functor.Product.$fShowProduct_closure:
         const Data.Functor.Product.$fShowProduct_info;
         const 0;
 },
 sat_sgauF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbqf: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fShowProduct_$cshowList_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgauF_info" {
     sat_sgauF_info:
         const sat_sgauF_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SgaPW_srt+184;
 },
 sat_sgauE_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbqn: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fShowProduct_$cshow_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgauE_info" {
     sat_sgauE_info:
         const sat_sgauE_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+176;
 },
 sat_sgauD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbqv: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fShowProduct_$cshowsPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgauD_info" {
     sat_sgauD_info:
         const sat_sgauD_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SgaPW_srt+160;
 },
 Data.Functor.Product.$fShowProduct_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgbqz: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgbqD; else goto cgbqC;
       cgbqD: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fShowProduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbqC: // global
           I64[Hp - 120] = sat_sgauF_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sgauE_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sgauD_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fShowProduct_info" {
     Data.Functor.Product.$fShowProduct_info:
         const Data.Functor.Product.$fShowProduct_entry;
         const 0;
         const 124554051598;
         const 12884901911;
         const SgaPW_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.464076898 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_$cfmap_closure" {
     Data.Functor.Product.$fFunctorProduct_$cfmap_closure:
         const Data.Functor.Product.$fFunctorProduct_$cfmap_info;
 },
 sat_sgauO_entry() //  [R1]
         { []
         }
     {offset
       cgbrc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbrd; else goto cgbre;
       cgbrd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbre: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgauO_info" {
     sat_sgauO_info:
         const sat_sgauO_entry;
         const 3;
         const 15;
 },
 sat_sgauN_entry() //  [R1]
         { []
         }
     {offset
       cgbrj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbrk; else goto cgbrl;
       cgbrk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbrl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgauN_info" {
     sat_sgauN_info:
         const sat_sgauN_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fFunctorProduct_$cfmap_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cgbrm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbro; else goto cgbrp;
       cgbro: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_$cfmap_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbrp: // global
           I64[Sp - 32] = block_cgbr3_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbrt; else goto cgbr4;
       ugbrt: // global
           call _cgbr3(R1) args: 0, res: 0, upd: 0;
       cgbr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_$cfmap_info" {
     Data.Functor.Product.$fFunctorProduct_$cfmap_info:
         const Data.Functor.Product.$fFunctorProduct_$cfmap_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgbr3() //  [R1]
         { []
         }
     {offset
       cgbr3: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgbrs; else goto cgbrr;
       cgbrs: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbrr: // global
           _sgauL::P64 = P64[R1 + 7];
           _sgauM::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgauO_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sgauI::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sgauI::P64;
           P64[Hp - 64] = _sgauM::P64;
           I64[Hp - 56] = sat_sgauN_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sgauI::P64;
           P64[Hp - 24] = _sgauL::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbr3_info" {
     block_cgbr3_info:
         const _cgbr3;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.475195675 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_$c<$_closure" {
     Data.Functor.Product.$fFunctorProduct_$c<$_closure:
         const Data.Functor.Product.$fFunctorProduct_$c<$_info;
 },
 f1_sgauW_entry() //  [R1]
         { []
         }
     {offset
       cgbsg: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sgauW_info" {
     f1_sgauW_info:
         const f1_sgauW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgauZ_entry() //  [R1]
         { []
         }
     {offset
       cgbsn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbso; else goto cgbsp;
       cgbso: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbsp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgauZ_info" {
     sat_sgauZ_info:
         const sat_sgauZ_entry;
         const 3;
         const 15;
 },
 sat_sgauY_entry() //  [R1]
         { []
         }
     {offset
       cgbsu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbsv; else goto cgbsw;
       cgbsv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbsw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgauY_info" {
     sat_sgauY_info:
         const sat_sgauY_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fFunctorProduct_$c<$_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cgbsx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbsz; else goto cgbsA;
       cgbsz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_$c<$_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbsA: // global
           I64[Sp - 32] = block_cgbs6_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbsE; else goto cgbs7;
       ugbsE: // global
           call _cgbs6(R1) args: 0, res: 0, upd: 0;
       cgbs7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_$c<$_info" {
     Data.Functor.Product.$fFunctorProduct_$c<$_info:
         const Data.Functor.Product.$fFunctorProduct_$c<$_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgbs6() //  [R1]
         { []
         }
     {offset
       cgbs6: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgbsD; else goto cgbsC;
       cgbsD: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbsC: // global
           _sgauU::P64 = P64[R1 + 7];
           _sgauV::P64 = P64[R1 + 15];
           I64[Hp - 112] = f1_sgauW_info;
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = sat_sgauZ_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _sgauV::P64;
           _cgbsb::P64 = Hp - 111;
           P64[Hp - 64] = _cgbsb::P64;
           I64[Hp - 56] = sat_sgauY_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sgauU::P64;
           P64[Hp - 24] = _cgbsb::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbs6_info" {
     block_cgbs6_info:
         const _cgbs6;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.487088713 UTC

[section ""data" . Data.Functor.Product.$fFunctorProduct_closure" {
     Data.Functor.Product.$fFunctorProduct_closure:
         const Data.Functor.Product.$fFunctorProduct_info;
 },
 sat_sgav3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbtr: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFunctorProduct_$c<$_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgav3_info" {
     sat_sgav3_info:
         const sat_sgav3_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgav2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbtz: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFunctorProduct_$cfmap_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgav2_info" {
     sat_sgav2_info:
         const sat_sgav2_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Product.$fFunctorProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgbtD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgbtH; else goto cgbtG;
       cgbtH: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFunctorProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbtG: // global
           I64[Hp - 64] = sat_sgav3_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgav2_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFunctorProduct_info" {
     Data.Functor.Product.$fFunctorProduct_info:
         const Data.Functor.Product.$fFunctorProduct_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.495074546 UTC

[section ""data" . Data.Functor.Product.$w$cfoldMap_closure" {
     Data.Functor.Product.$w$cfoldMap_closure:
         const Data.Functor.Product.$w$cfoldMap_info;
 },
 sat_sgavb_entry() //  [R1]
         { []
         }
     {offset
       cgbu6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbu7; else goto cgbu8;
       cgbu7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbu8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgavb_info" {
     sat_sgavb_info:
         const sat_sgavb_entry;
         const 4;
         const 15;
 },
 sat_sgava_entry() //  [R1]
         { []
         }
     {offset
       cgbud: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbue; else goto cgbuf;
       cgbue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbuf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgava_info" {
     sat_sgava_info:
         const sat_sgava_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$cfoldMap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbug: // global
           _sgav8::P64 = R6;
           _sgav7::P64 = R5;
           _sgav6::P64 = R4;
           _sgav5::P64 = R3;
           _sgav4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cgbuh; else goto cgbui;
       cgbui: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgbuk; else goto cgbuj;
       cgbuk: // global
           HpAlloc = 96;
           goto cgbuh;
       cgbuh: // global
           R6 = _sgav8::P64;
           R5 = _sgav7::P64;
           R4 = _sgav6::P64;
           R3 = _sgav5::P64;
           R2 = _sgav4::P64;
           R1 = Data.Functor.Product.$w$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbuj: // global
           I64[Hp - 88] = sat_sgavb_info;
           P64[Hp - 72] = _sgav5::P64;
           P64[Hp - 64] = _sgav6::P64;
           P64[Hp - 56] = _sgav7::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sgava_info;
           P64[Hp - 24] = _sgav4::P64;
           P64[Hp - 16] = _sgav6::P64;
           P64[Hp - 8] = _sgav7::P64;
           P64[Hp] = _sgav8::P64;
           R2 = _sgav6::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldMap_info" {
     Data.Functor.Product.$w$cfoldMap_info:
         const Data.Functor.Product.$w$cfoldMap_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.504189128 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldMap_info;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cgbuV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbuW; else goto cgbuX;
       cgbuW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbuX: // global
           I64[Sp - 40] = block_cgbuS_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbv1; else goto cgbuT;
       ugbv1: // global
           call _cgbuS(R1) args: 0, res: 0, upd: 0;
       cgbuT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldMap_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldMap_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbuS() //  [R1]
         { []
         }
     {offset
       cgbuS: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldMap_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbuS_info" {
     block_cgbuS_info:
         const _cgbuS;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.510378155 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfold_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfold_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfold_info;
 },
 Data.Functor.Product.$fFoldableProduct_$cfold_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cgbvk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbvl; else goto cgbvm;
       cgbvl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbvm: // global
           I64[Sp - 32] = block_cgbvh_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbvq; else goto cgbvi;
       ugbvq: // global
           call _cgbvh(R1) args: 0, res: 0, upd: 0;
       cgbvi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfold_info" {
     Data.Functor.Product.$fFoldableProduct_$cfold_info:
         const Data.Functor.Product.$fFoldableProduct_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgbvh() //  [R1]
         { []
         }
     {offset
       cgbvh: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$cfoldMap_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbvh_info" {
     block_cgbvh_info:
         const _cgbvh;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.516051075 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct1_closure" {
     Data.Functor.Product.$fFoldableProduct1_closure:
         const Data.Functor.Product.$fFoldableProduct1_info;
 },
 Data.Functor.Product.$fFoldableProduct1_entry() //  [R2]
         { []
         }
     {offset
       cgbvH: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct1_info" {
     Data.Functor.Product.$fFoldableProduct1_info:
         const Data.Functor.Product.$fFoldableProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.522355727 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$csum_closure" {
     Data.Functor.Product.$fFoldableProduct_$csum_closure:
         const Data.Functor.Product.$fFoldableProduct_$csum_info;
         const 0;
 },
 $dMonoid_sgavv_entry() //  [R1]
         { []
         }
     {offset
       cgbvW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbvX; else goto cgbvY;
       cgbvX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbvY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgavv_info" {
     $dMonoid_sgavv_info:
         const $dMonoid_sgavv_entry;
         const 1;
         const 4294967312;
         const SgaPW_srt+200;
 },
 sat_sgavB_entry() //  [R1]
         { []
         }
     {offset
       cgbwd: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbwe; else goto cgbwf;
       cgbwe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbwf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgavB_info" {
     sat_sgavB_info:
         const sat_sgavB_entry;
         const 3;
         const 15;
 },
 sat_sgavA_entry() //  [R1]
         { []
         }
     {offset
       cgbwk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbwl; else goto cgbwm;
       cgbwl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbwm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgavA_info" {
     sat_sgavA_info:
         const sat_sgavA_entry;
         const 3;
         const 15;
 },
 sat_sgavC_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbwn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbwo; else goto cgbwp;
       cgbwo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbwp: // global
           I64[Sp - 40] = block_cgbw4_info;
           _sgavs::P64 = P64[R1 + 7];
           _sgavt::P64 = P64[R1 + 15];
           _sgavu::P64 = P64[R1 + 23];
           _sgavv::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgavs::P64;
           P64[Sp - 24] = _sgavt::P64;
           P64[Sp - 16] = _sgavu::P64;
           P64[Sp - 8] = _sgavv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbwt; else goto cgbw5;
       ugbwt: // global
           call _cgbw4(R1) args: 0, res: 0, upd: 0;
       cgbw5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgavC_info" {
     sat_sgavC_info:
         const sat_sgavC_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgbw4() //  [R1]
         { []
         }
     {offset
       cgbw4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgbws; else goto cgbwr;
       cgbws: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbwr: // global
           _sgavy::P64 = P64[R1 + 7];
           _sgavz::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sgavB_info;
           P64[Hp - 56] = P64[Sp + 16];
           _sgavv::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgavv::P64;
           P64[Hp - 40] = _sgavz::P64;
           I64[Hp - 32] = sat_sgavA_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sgavv::P64;
           P64[Hp] = _sgavy::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbw4_info" {
     block_cgbw4_info:
         const _cgbw4;
         const 4;
         const 30;
 },
 Data.Functor.Product.$fFoldableProduct_$csum_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cgbwu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbwy; else goto cgbwx;
       cgbwy: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbwx: // global
           I64[Hp - 56] = $dMonoid_sgavv_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgavC_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$csum_info" {
     Data.Functor.Product.$fFoldableProduct_$csum_info:
         const Data.Functor.Product.$fFoldableProduct_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgaPW_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.535614867 UTC

[section ""cstring" . lvl_rg5nW_bytes" {
     lvl_rg5nW_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.538313432 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct2_closure" {
     Data.Functor.Product.$fFoldableProduct2_closure:
         const Data.Functor.Product.$fFoldableProduct2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct2_entry() //  [R1]
         { []
         }
     {offset
       cgbxt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgbxu; else goto cgbxv;
       cgbxu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbxv: // global
           (_cgbxo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgbxo::I64 == 0) goto cgbxq; else goto cgbxp;
       cgbxq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgbxp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgbxo::I64;
           I64[Sp - 24] = block_cgbxr_info;
           R2 = lvl_rg5nW_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct2_info" {
     Data.Functor.Product.$fFoldableProduct2_info:
         const Data.Functor.Product.$fFoldableProduct2_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+216;
 },
 _cgbxr() //  [R1]
         { []
         }
     {offset
       cgbxr: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbxr_info" {
     block_cgbxr_info:
         const _cgbxr;
         const 0;
         const 4294967326;
         const SgaPW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.547138308 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cminimum_closure" {
     Data.Functor.Product.$fFoldableProduct_$cminimum_closure:
         const Data.Functor.Product.$fFoldableProduct_$cminimum_info;
         const 0;
 },
 $dMonoid_sgavH_entry() //  [R1]
         { []
         }
     {offset
       cgbxT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbxU; else goto cgbxV;
       cgbxU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbxV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgavH_info" {
     $dMonoid_sgavH_info:
         const $dMonoid_sgavH_entry;
         const 1;
         const 4294967312;
         const SgaPW_srt+224;
 },
 sat_sgavT_entry() //  [R1, R2]
         { []
         }
     {offset
       cgby4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgby5; else goto cgby6;
       cgby5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgby6: // global
           I64[Sp - 40] = block_cgby1_info;
           _sgavE::P64 = P64[R1 + 7];
           _sgavF::P64 = P64[R1 + 15];
           _sgavG::P64 = P64[R1 + 23];
           _sgavH::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgavE::P64;
           P64[Sp - 24] = _sgavF::P64;
           P64[Sp - 16] = _sgavG::P64;
           P64[Sp - 8] = _sgavH::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbyY; else goto cgby2;
       ugbyY: // global
           call _cgby1(R1) args: 0, res: 0, upd: 0;
       cgby2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgavT_info" {
     sat_sgavT_info:
         const sat_sgavT_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+232;
 },
 _cgby1() //  [R1]
         { []
         }
     {offset
       cgby1: // global
           I64[Sp] = block_cgby9_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgby1_info" {
     block_cgby1_info:
         const _cgby1;
         const 4;
         const 4294967326;
         const SgaPW_srt+232;
 },
 _cgby9() //  [R1]
         { []
         }
     {offset
       cgby9: // global
           _sgavE::P64 = P64[Sp + 8];
           _sgavH::P64 = P64[Sp + 32];
           _sgavK::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cgbyh; else goto cgbyw;
       cgbyh: // global
           I64[Sp + 32] = block_cgbye_info;
           R2 = _sgavE::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sgavH::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _sgavK::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cgbyw: // global
           I64[Sp + 16] = block_cgbyu_info;
           R2 = _sgavE::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _sgavH::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _sgavK::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgby9_info" {
     block_cgby9_info:
         const _cgby9;
         const 4;
         const 4294967326;
         const SgaPW_srt+232;
 },
 _cgbye() //  [R1]
         { []
         }
     {offset
       cgbye: // global
           if (R1 & 7 == 1) goto cgbyn; else goto cgbyr;
       cgbyn: // global
           R1 = Data.Functor.Product.$fFoldableProduct2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgbyr: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbye_info" {
     block_cgbye_info:
         const _cgbye;
         const 0;
         const 4294967326;
         const SgaPW_srt+232;
 },
 _cgbyu() //  [R1]
         { []
         }
     {offset
       cgbyu: // global
           if (R1 & 7 == 1) goto ugbyW; else goto cgbyH;
       ugbyW: // global
           Sp = Sp + 16;
           call _cgbyN() args: 0, res: 0, upd: 0;
       cgbyH: // global
           I64[Sp] = block_cgbyF_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _sgavR::P64 = P64[R1 + 6];
           P64[Sp - 16] = _sgavR::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _sgavR::P64;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbyu_info" {
     block_cgbyu_info:
         const _cgbyu;
         const 2;
         const 30;
 },
 _cgbyF() //  [R1]
         { []
         }
     {offset
       cgbyF: // global
           if (R1 & 7 == 1) goto ugbyX; else goto cgbyR;
       ugbyX: // global
           Sp = Sp + 16;
           call _cgbyN() args: 0, res: 0, upd: 0;
       cgbyR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbyF_info" {
     block_cgbyF_info:
         const _cgbyF;
         const 2;
         const 30;
 },
 _cgbyN() //  []
         { []
         }
     {offset
       cgbyN: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fFoldableProduct_$cminimum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgbz1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbz5; else goto cgbz4;
       cgbz5: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbz4: // global
           I64[Hp - 56] = $dMonoid_sgavH_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgavT_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cminimum_info" {
     Data.Functor.Product.$fFoldableProduct_$cminimum_info:
         const Data.Functor.Product.$fFoldableProduct_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SgaPW_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.563955939 UTC

[section ""cstring" . lvl1_rg5nX_bytes" {
     lvl1_rg5nX_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.56655765 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct3_closure" {
     Data.Functor.Product.$fFoldableProduct3_closure:
         const Data.Functor.Product.$fFoldableProduct3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct3_entry() //  [R1]
         { []
         }
     {offset
       cgbAg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgbAh; else goto cgbAi;
       cgbAh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbAi: // global
           (_cgbAb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgbAb::I64 == 0) goto cgbAd; else goto cgbAc;
       cgbAd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgbAc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgbAb::I64;
           I64[Sp - 24] = block_cgbAe_info;
           R2 = lvl1_rg5nX_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct3_info" {
     Data.Functor.Product.$fFoldableProduct3_info:
         const Data.Functor.Product.$fFoldableProduct3_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+216;
 },
 _cgbAe() //  [R1]
         { []
         }
     {offset
       cgbAe: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbAe_info" {
     block_cgbAe_info:
         const _cgbAe;
         const 0;
         const 4294967326;
         const SgaPW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.575180835 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cmaximum_closure" {
     Data.Functor.Product.$fFoldableProduct_$cmaximum_closure:
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_info;
         const 0;
 },
 $dMonoid_sgavY_entry() //  [R1]
         { []
         }
     {offset
       cgbAG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbAH; else goto cgbAI;
       cgbAH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbAI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgavY_info" {
     $dMonoid_sgavY_info:
         const $dMonoid_sgavY_entry;
         const 1;
         const 4294967312;
         const SgaPW_srt+248;
 },
 sat_sgawa_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbAR: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cgbAS; else goto cgbAT;
       cgbAS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbAT: // global
           I64[Sp - 40] = block_cgbAO_info;
           _sgavV::P64 = P64[R1 + 7];
           _sgavW::P64 = P64[R1 + 15];
           _sgavX::P64 = P64[R1 + 23];
           _sgavY::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgavV::P64;
           P64[Sp - 24] = _sgavW::P64;
           P64[Sp - 16] = _sgavX::P64;
           P64[Sp - 8] = _sgavY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbBL; else goto cgbAP;
       ugbBL: // global
           call _cgbAO(R1) args: 0, res: 0, upd: 0;
       cgbAP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgawa_info" {
     sat_sgawa_info:
         const sat_sgawa_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+256;
 },
 _cgbAO() //  [R1]
         { []
         }
     {offset
       cgbAO: // global
           I64[Sp] = block_cgbAW_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = GHC.Base.Just_closure+1;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbAO_info" {
     block_cgbAO_info:
         const _cgbAO;
         const 4;
         const 4294967326;
         const SgaPW_srt+256;
 },
 _cgbAW() //  [R1]
         { []
         }
     {offset
       cgbAW: // global
           _sgavV::P64 = P64[Sp + 8];
           _sgavY::P64 = P64[Sp + 32];
           _sgaw1::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cgbB4; else goto cgbBj;
       cgbB4: // global
           I64[Sp + 32] = block_cgbB1_info;
           R2 = _sgavV::P64;
           I64[Sp] = stg_ap_ppp_info;
           P64[Sp + 8] = _sgavY::P64;
           P64[Sp + 16] = GHC.Base.Just_closure+1;
           P64[Sp + 24] = _sgaw1::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
       cgbBj: // global
           I64[Sp + 16] = block_cgbBh_info;
           R2 = _sgavV::P64;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = _sgavY::P64;
           P64[Sp] = GHC.Base.Just_closure+1;
           P64[Sp + 8] = _sgaw1::P64;
           P64[Sp + 32] = P64[R1 + 6];
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbAW_info" {
     block_cgbAW_info:
         const _cgbAW;
         const 4;
         const 4294967326;
         const SgaPW_srt+256;
 },
 _cgbB1() //  [R1]
         { []
         }
     {offset
       cgbB1: // global
           if (R1 & 7 == 1) goto cgbBa; else goto cgbBe;
       cgbBa: // global
           R1 = Data.Functor.Product.$fFoldableProduct3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgbBe: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbB1_info" {
     block_cgbB1_info:
         const _cgbB1;
         const 0;
         const 4294967326;
         const SgaPW_srt+256;
 },
 _cgbBh() //  [R1]
         { []
         }
     {offset
       cgbBh: // global
           if (R1 & 7 == 1) goto ugbBJ; else goto cgbBu;
       ugbBJ: // global
           Sp = Sp + 16;
           call _cgbBA() args: 0, res: 0, upd: 0;
       cgbBu: // global
           I64[Sp] = block_cgbBs_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           _sgaw8::P64 = P64[R1 + 6];
           P64[Sp - 16] = _sgaw8::P64;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _sgaw8::P64;
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbBh_info" {
     block_cgbBh_info:
         const _cgbBh;
         const 2;
         const 30;
 },
 _cgbBs() //  [R1]
         { []
         }
     {offset
       cgbBs: // global
           if (R1 & 7 == 1) goto ugbBK; else goto cgbBE;
       ugbBK: // global
           Sp = Sp + 16;
           call _cgbBA() args: 0, res: 0, upd: 0;
       cgbBE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbBs_info" {
     block_cgbBs_info:
         const _cgbBs;
         const 2;
         const 30;
 },
 _cgbBA() //  []
         { []
         }
     {offset
       cgbBA: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fFoldableProduct_$cmaximum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgbBO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbBS; else goto cgbBR;
       cgbBS: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbBR: // global
           I64[Hp - 56] = $dMonoid_sgavY_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgawa_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cmaximum_info" {
     Data.Functor.Product.$fFoldableProduct_$cmaximum_info:
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const SgaPW_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.594501585 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$celem_closure" {
     Data.Functor.Product.$fFoldableProduct_$celem_closure:
         const Data.Functor.Product.$fFoldableProduct_$celem_info;
         const 0;
 },
 f1_sgawf_entry() //  [R1]
         { []
         }
     {offset
       cgbD2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbD3; else goto cgbD4;
       cgbD3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbD4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sgawf_info" {
     f1_sgawf_info:
         const f1_sgawf_entry;
         const 2;
         const 18;
 },
 sat_sgawl_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbDd: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgbDe; else goto cgbDf;
       cgbDe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbDf: // global
           I64[Sp - 32] = block_cgbDa_info;
           _sgawb::P64 = P64[R1 + 7];
           _sgawc::P64 = P64[R1 + 15];
           _sgawf::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _sgawb::P64;
           P64[Sp - 16] = _sgawc::P64;
           P64[Sp - 8] = _sgawf::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbDv; else goto cgbDb;
       ugbDv: // global
           call _cgbDa(R1) args: 0, res: 0, upd: 0;
       cgbDb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgawl_info" {
     sat_sgawl_info:
         const sat_sgawl_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SgaPW_srt+272;
 },
 _cgbDa() //  [R1]
         { []
         }
     {offset
       cgbDa: // global
           I64[Sp] = block_cgbDi_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbDa_info" {
     block_cgbDa_info:
         const _cgbDa;
         const 3;
         const 4294967326;
         const SgaPW_srt+272;
 },
 _cgbDi() //  [R1]
         { []
         }
     {offset
       cgbDi: // global
           if (R1 & 7 == 1) goto cgbDp; else goto cgbDt;
       cgbDp: // global
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_ppp_info;
           _sgawj::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = _sgawj::P64;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
       cgbDt: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbDi_info" {
     block_cgbDi_info:
         const _cgbDi;
         const 3;
         const 4294967326;
         const SgaPW_srt+272;
 },
 Data.Functor.Product.$fFoldableProduct_$celem_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cgbDw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbDA; else goto cgbDz;
       cgbDA: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbDz: // global
           I64[Hp - 56] = f1_sgawf_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = sat_sgawl_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$celem_info" {
     Data.Functor.Product.$fFoldableProduct_$celem_info:
         const Data.Functor.Product.$fFoldableProduct_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SgaPW_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.605899412 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct8_closure" {
     Data.Functor.Product.$fFoldableProduct8_closure:
         const Data.Functor.Product.$fFoldableProduct8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct8_entry() //  [R1]
         { []
         }
     {offset
       cgbEl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbEm; else goto cgbEn;
       cgbEm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbEn: // global
           (_cgbEi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgbEi::I64 == 0) goto cgbEk; else goto cgbEj;
       cgbEk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgbEj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgbEi::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct8_info" {
     Data.Functor.Product.$fFoldableProduct8_info:
         const Data.Functor.Product.$fFoldableProduct8_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.611457112 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl_closure" {
     Data.Functor.Product.$w$cfoldl_closure:
         const Data.Functor.Product.$w$cfoldl_info;
         const 0;
 },
 f1_sgaws_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbEF: // global
           _sgawu::P64 = R3;
           R3 = R2;
           R2 = _sgawu::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sgaws_info" {
     f1_sgaws_info:
         const f1_sgaws_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgawv_entry() //  [R1]
         { []
         }
     {offset
       cgbEM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbEN; else goto cgbEO;
       cgbEN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbEO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgawv_info" {
     sat_sgawv_info:
         const sat_sgawv_entry;
         const 4;
         const 4294967311;
         const SgaPW_srt+296;
 },
 Data.Functor.Product.$w$cfoldl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbEP: // global
           _sgawq::P64 = R6;
           _sgawp::P64 = R5;
           _sgawo::P64 = R4;
           _sgawn::P64 = R3;
           _sgawm::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgbEQ; else goto cgbER;
       cgbER: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbET; else goto cgbES;
       cgbET: // global
           HpAlloc = 64;
           goto cgbEQ;
       cgbEQ: // global
           R6 = _sgawq::P64;
           R5 = _sgawp::P64;
           R4 = _sgawo::P64;
           R3 = _sgawn::P64;
           R2 = _sgawm::P64;
           R1 = Data.Functor.Product.$w$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbES: // global
           I64[Hp - 56] = f1_sgaws_info;
           P64[Hp - 48] = _sgawo::P64;
           I64[Hp - 40] = sat_sgawv_info;
           P64[Hp - 24] = _sgawm::P64;
           P64[Hp - 16] = _sgawp::P64;
           P64[Hp - 8] = _sgawq::P64;
           _cgbEA::P64 = Hp - 54;
           P64[Hp] = _cgbEA::P64;
           R2 = _sgawn::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 16] = _cgbEA::P64;
           P64[Sp - 8] = P64[Sp];
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl_info" {
     Data.Functor.Product.$w$cfoldl_info:
         const Data.Functor.Product.$w$cfoldl_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SgaPW_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.620201894 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cgbFp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbFq; else goto cgbFr;
       cgbFq: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbFr: // global
           I64[Sp - 40] = block_cgbFm_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbFv; else goto cgbFn;
       ugbFv: // global
           call _cgbFm(R1) args: 0, res: 0, upd: 0;
       cgbFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SgaPW_srt+304;
 },
 _cgbFm() //  [R1]
         { []
         }
     {offset
       cgbFm: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbFm_info" {
     block_cgbFm_info:
         const _cgbFm;
         const 4;
         const 4294967326;
         const SgaPW_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.625571632 UTC

[section ""cstring" . lvl2_rg5nY_bytes" {
     lvl2_rg5nY_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.628076999 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct7_closure" {
     Data.Functor.Product.$fFoldableProduct7_closure:
         const Data.Functor.Product.$fFoldableProduct7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct7_entry() //  [R1]
         { []
         }
     {offset
       cgbFQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgbFR; else goto cgbFS;
       cgbFR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbFS: // global
           (_cgbFL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgbFL::I64 == 0) goto cgbFN; else goto cgbFM;
       cgbFN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgbFM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgbFL::I64;
           I64[Sp - 24] = block_cgbFO_info;
           R2 = lvl2_rg5nY_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct7_info" {
     Data.Functor.Product.$fFoldableProduct7_info:
         const Data.Functor.Product.$fFoldableProduct7_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+216;
 },
 _cgbFO() //  [R1]
         { []
         }
     {offset
       cgbFO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbFO_info" {
     block_cgbFO_info:
         const _cgbFO;
         const 0;
         const 4294967326;
         const SgaPW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.636500946 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl1_closure" {
     Data.Functor.Product.$w$cfoldl1_closure:
         const Data.Functor.Product.$w$cfoldl1_info;
         const 0;
 },
 sat_sgawP_entry() //  [R1]
         { []
         }
     {offset
       cgbGs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbGt; else goto cgbGu;
       cgbGt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbGu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgbGl_info;
           _sgawH::P64 = P64[R1 + 16];
           _sgawL::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgawH::P64;
           P64[Sp - 24] = _sgawL::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbGB; else goto cgbGm;
       ugbGB: // global
           call _cgbGl(R1) args: 0, res: 0, upd: 0;
       cgbGm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgawP_info" {
     sat_sgawP_info:
         const sat_sgawP_entry;
         const 3;
         const 15;
 },
 _cgbGl() //  [R1]
         { []
         }
     {offset
       cgbGl: // global
           _sgawL::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cgbGp; else goto cgbGq;
       cgbGp: // global
           R1 = _sgawL::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cgbGq: // global
           R3 = _sgawL::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbGl_info" {
     block_cgbGl_info:
         const _cgbGl;
         const 2;
         const 30;
 },
 f1_sgawK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbGD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbGH; else goto cgbGG;
       cgbGH: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbGG: // global
           _sgawH::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgawP_info;
           P64[Hp - 32] = _sgawH::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f1_sgawK_info" {
     f1_sgawK_info:
         const f1_sgawK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgawQ_entry() //  [R1]
         { []
         }
     {offset
       cgbGM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbGN; else goto cgbGO;
       cgbGN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbGO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgawQ_info" {
     sat_sgawQ_info:
         const sat_sgawQ_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+296;
 },
 Data.Functor.Product.$w$cfoldl1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbGV: // global
           _sgawJ::P64 = R6;
           _sgawI::P64 = R5;
           _sgawH::P64 = R4;
           _sgawG::P64 = R3;
           _sgawF::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgbGW; else goto cgbGX;
       cgbGX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbGZ; else goto cgbGY;
       cgbGZ: // global
           HpAlloc = 56;
           goto cgbGW;
       cgbGW: // global
           R6 = _sgawJ::P64;
           R5 = _sgawI::P64;
           R4 = _sgawH::P64;
           R3 = _sgawG::P64;
           R2 = _sgawF::P64;
           R1 = Data.Functor.Product.$w$cfoldl1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbGY: // global
           I64[Hp - 48] = f1_sgawK_info;
           P64[Hp - 40] = _sgawH::P64;
           I64[Hp - 32] = sat_sgawQ_info;
           P64[Hp - 16] = _sgawF::P64;
           P64[Hp - 8] = _sgawI::P64;
           _cgbGc::P64 = Hp - 46;
           P64[Hp] = _cgbGc::P64;
           I64[Sp - 8] = block_cgbGP_info;
           R2 = _sgawG::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 32] = _cgbGc::P64;
           P64[Sp - 24] = _sgawJ::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl1_info" {
     Data.Functor.Product.$w$cfoldl1_info:
         const Data.Functor.Product.$w$cfoldl1_entry;
         const 0;
         const 107374182414;
         const 21474836505;
         const SgaPW_srt+296;
 },
 _cgbGP() //  [R1]
         { []
         }
     {offset
       cgbGP: // global
           if (R1 & 7 == 1) goto cgbGS; else goto cgbGT;
       cgbGS: // global
           R1 = Data.Functor.Product.$fFoldableProduct7_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgbGT: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbGP_info" {
     block_cgbGP_info:
         const _cgbGP;
         const 0;
         const 4294967326;
         const SgaPW_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.650530573 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cgbHX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbHY; else goto cgbHZ;
       cgbHY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbHZ: // global
           I64[Sp - 32] = block_cgbHU_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbI3; else goto cgbHV;
       ugbI3: // global
           call _cgbHU(R1) args: 0, res: 0, upd: 0;
       cgbHV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl1_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl1_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SgaPW_srt+320;
 },
 _cgbHU() //  [R1]
         { []
         }
     {offset
       cgbHU: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbHU_info" {
     block_cgbHU_info:
         const _cgbHU;
         const 3;
         const 4294967326;
         const SgaPW_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.657711412 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr'_closure" {
     Data.Functor.Product.$w$cfoldr'_closure:
         const Data.Functor.Product.$w$cfoldr'_info;
         const 0;
 },
 f1_sgax6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbIp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbIq; else goto cgbIr;
       cgbIq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbIr: // global
           I64[Sp - 16] = block_cgbIn_info;
           _sgax8::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgax8::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_sgax6_info" {
     f1_sgax6_info:
         const f1_sgax6_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cgbIn() //  [R1]
         { []
         }
     {offset
       cgbIn: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbIn_info" {
     block_cgbIn_info:
         const _cgbIn;
         const 1;
         const 30;
 },
 sat_sgaxb_entry() //  [R1]
         { []
         }
     {offset
       cgbIx: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbIy; else goto cgbIz;
       cgbIy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaxb_info" {
     sat_sgaxb_info:
         const sat_sgaxb_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+296;
 },
 Data.Functor.Product.$w$cfoldr'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbIA: // global
           _sgax4::P64 = R6;
           _sgax3::P64 = R5;
           _sgax2::P64 = R4;
           _sgax1::P64 = R3;
           _sgax0::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgbIB; else goto cgbIC;
       cgbIC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbIE; else goto cgbID;
       cgbIE: // global
           HpAlloc = 56;
           goto cgbIB;
       cgbIB: // global
           R6 = _sgax4::P64;
           R5 = _sgax3::P64;
           R4 = _sgax2::P64;
           R3 = _sgax1::P64;
           R2 = _sgax0::P64;
           R1 = Data.Functor.Product.$w$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbID: // global
           I64[Hp - 48] = f1_sgax6_info;
           P64[Hp - 40] = _sgax2::P64;
           I64[Hp - 32] = sat_sgaxb_info;
           P64[Hp - 16] = _sgax0::P64;
           P64[Hp - 8] = _sgax4::P64;
           _cgbIi::P64 = Hp - 45;
           P64[Hp] = _cgbIi::P64;
           R2 = _sgax1::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct8_closure;
           P64[Sp - 24] = _cgbIi::P64;
           P64[Sp - 16] = P64[Sp];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _sgax3::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr'_info" {
     Data.Functor.Product.$w$cfoldr'_info:
         const Data.Functor.Product.$w$cfoldr'_entry;
         const 0;
         const 279172874254;
         const 25769803802;
         const SgaPW_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.668403977 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cgbJg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbJh; else goto cgbJi;
       cgbJh: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbJi: // global
           I64[Sp - 40] = block_cgbJd_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbJm; else goto cgbJe;
       ugbJm: // global
           call _cgbJd(R1) args: 0, res: 0, upd: 0;
       cgbJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr'_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr'_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SgaPW_srt+344;
 },
 _cgbJd() //  [R1]
         { []
         }
     {offset
       cgbJd: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbJd_info" {
     block_cgbJd_info:
         const _cgbJd;
         const 4;
         const 4294967326;
         const SgaPW_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.675024199 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr_closure" {
     Data.Functor.Product.$w$cfoldr_closure:
         const Data.Functor.Product.$w$cfoldr_info;
         const 0;
 },
 sat_sgaxq_entry() //  [R1]
         { []
         }
     {offset
       cgbJG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbJH; else goto cgbJI;
       cgbJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaxq_info" {
     sat_sgaxq_info:
         const sat_sgaxq_entry;
         const 4;
         const 4294967311;
         const SgaPW_srt+288;
 },
 Data.Functor.Product.$w$cfoldr_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbJJ: // global
           _sgaxo::P64 = R6;
           _sgaxn::P64 = R5;
           _sgaxm::P64 = R4;
           _sgaxl::P64 = R3;
           _sgaxk::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgbJK; else goto cgbJL;
       cgbJL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbJN; else goto cgbJM;
       cgbJN: // global
           HpAlloc = 48;
           goto cgbJK;
       cgbJK: // global
           R6 = _sgaxo::P64;
           R5 = _sgaxn::P64;
           R4 = _sgaxm::P64;
           R3 = _sgaxl::P64;
           R2 = _sgaxk::P64;
           R1 = Data.Functor.Product.$w$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbJM: // global
           I64[Hp - 40] = sat_sgaxq_info;
           P64[Hp - 24] = _sgaxl::P64;
           P64[Hp - 16] = _sgaxm::P64;
           P64[Hp - 8] = _sgaxn::P64;
           P64[Hp] = P64[Sp];
           R2 = _sgaxk::P64;
           I64[Sp - 32] = stg_ap_pppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 16] = _sgaxm::P64;
           P64[Sp - 8] = _sgaxo::P64;
           P64[Sp] = Hp - 40;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr_info" {
     Data.Functor.Product.$w$cfoldr_info:
         const Data.Functor.Product.$w$cfoldr_entry;
         const 0;
         const 2203318222862;
         const 25769803802;
         const SgaPW_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.682471034 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cgbKf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbKg; else goto cgbKh;
       cgbKg: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbKh: // global
           I64[Sp - 40] = block_cgbKc_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbKl; else goto cgbKd;
       ugbKl: // global
           call _cgbKc(R1) args: 0, res: 0, upd: 0;
       cgbKd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SgaPW_srt+360;
 },
 _cgbKc() //  [R1]
         { []
         }
     {offset
       cgbKc: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbKc_info" {
     block_cgbKc_info:
         const _cgbKc;
         const 4;
         const 4294967326;
         const SgaPW_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.689769416 UTC

[section ""data" . Data.Functor.Product.$w$cfoldl'_closure" {
     Data.Functor.Product.$w$cfoldl'_closure:
         const Data.Functor.Product.$w$cfoldl'_info;
         const 0;
 },
 f1_sgaxF_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbKI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbKJ; else goto cgbKK;
       cgbKJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbKK: // global
           I64[Sp - 16] = block_cgbKG_info;
           _sgaxH::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgaxH::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . f1_sgaxF_info" {
     f1_sgaxF_info:
         const f1_sgaxF_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cgbKG() //  [R1]
         { []
         }
     {offset
       cgbKG: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbKG_info" {
     block_cgbKG_info:
         const _cgbKG;
         const 1;
         const 30;
 },
 sat_sgaxK_entry() //  [R1]
         { []
         }
     {offset
       cgbKQ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbKR; else goto cgbKS;
       cgbKR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbKS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaxK_info" {
     sat_sgaxK_info:
         const sat_sgaxK_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+288;
 },
 Data.Functor.Product.$w$cfoldl'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbKT: // global
           _sgaxD::P64 = R6;
           _sgaxC::P64 = R5;
           _sgaxB::P64 = R4;
           _sgaxA::P64 = R3;
           _sgaxz::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgbKU; else goto cgbKV;
       cgbKV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbKX; else goto cgbKW;
       cgbKX: // global
           HpAlloc = 56;
           goto cgbKU;
       cgbKU: // global
           R6 = _sgaxD::P64;
           R5 = _sgaxC::P64;
           R4 = _sgaxB::P64;
           R3 = _sgaxA::P64;
           R2 = _sgaxz::P64;
           R1 = Data.Functor.Product.$w$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbKW: // global
           I64[Hp - 48] = f1_sgaxF_info;
           P64[Hp - 40] = _sgaxB::P64;
           I64[Hp - 32] = sat_sgaxK_info;
           P64[Hp - 16] = _sgaxA::P64;
           P64[Hp - 8] = P64[Sp];
           _cgbKB::P64 = Hp - 45;
           P64[Hp] = _cgbKB::P64;
           R2 = _sgaxz::P64;
           I64[Sp - 40] = stg_ap_ppppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = _cgbKB::P64;
           P64[Sp - 16] = _sgaxD::P64;
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = _sgaxC::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldl'_info" {
     Data.Functor.Product.$w$cfoldl'_info:
         const Data.Functor.Product.$w$cfoldl'_entry;
         const 0;
         const 8800387989518;
         const 25769803802;
         const SgaPW_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.699619563 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cgbLz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbLA; else goto cgbLB;
       cgbLA: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbLB: // global
           I64[Sp - 40] = block_cgbLw_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbLF; else goto cgbLx;
       ugbLF: // global
           call _cgbLw(R1) args: 0, res: 0, upd: 0;
       cgbLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldl'_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldl'_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SgaPW_srt+376;
 },
 _cgbLw() //  [R1]
         { []
         }
     {offset
       cgbLw: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldl'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbLw_info" {
     block_cgbLw_info:
         const _cgbLw;
         const 4;
         const 4294967326;
         const SgaPW_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.706563806 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct5_closure" {
     Data.Functor.Product.$fFoldableProduct5_closure:
         const Data.Functor.Product.$fFoldableProduct5_info;
 },
 Data.Functor.Product.$fFoldableProduct5_entry() //  [R2, R3]
         { []
         }
     {offset
       cgbLY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgbM5; else goto cgbM6;
       cgbM5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbM6: // global
           I64[Sp - 8] = block_cgbLV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugbMa; else goto cgbLW;
       ugbMa: // global
           call _cgbLV(R1) args: 0, res: 0, upd: 0;
       cgbLW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct5_info" {
     Data.Functor.Product.$fFoldableProduct5_info:
         const Data.Functor.Product.$fFoldableProduct5_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cgbLV() //  [R1]
         { []
         }
     {offset
       cgbLV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgbM9; else goto cgbM8;
       cgbM9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbM8: // global
           _sgaxX::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgaxX::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbLV_info" {
     block_cgbLV_info:
         const _cgbLV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.712588513 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$clength_closure" {
     Data.Functor.Product.$fFoldableProduct_$clength_closure:
         const Data.Functor.Product.$fFoldableProduct_$clength_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$clength_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cgbMv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgbMw; else goto cgbMx;
       cgbMw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbMx: // global
           I64[Sp - 24] = block_cgbMs_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugbMB; else goto cgbMt;
       ugbMB: // global
           call _cgbMs(R1) args: 0, res: 0, upd: 0;
       cgbMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$clength_info" {
     Data.Functor.Product.$fFoldableProduct_$clength_info:
         const Data.Functor.Product.$fFoldableProduct_$clength_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SgaPW_srt+376;
 },
 _cgbMs() //  [R1]
         { []
         }
     {offset
       cgbMs: // global
           R6 = P64[R1 + 7];
           R5 = Data.Functor.Product.$fFoldableProduct4_closure+1;
           R4 = Data.Functor.Product.$fFoldableProduct5_closure+2;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 16] = P64[R1 + 15];
           Sp = Sp + 16;
           call Data.Functor.Product.$w$cfoldl'_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbMs_info" {
     block_cgbMs_info:
         const _cgbMs;
         const 2;
         const 4294967326;
         const SgaPW_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.717922328 UTC

[section ""cstring" . lvl3_rg5nZ_bytes" {
     lvl3_rg5nZ_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.72045587 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct9_closure" {
     Data.Functor.Product.$fFoldableProduct9_closure:
         const Data.Functor.Product.$fFoldableProduct9_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct9_entry() //  [R1]
         { []
         }
     {offset
       cgbMW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgbMX; else goto cgbMY;
       cgbMX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbMY: // global
           (_cgbMR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgbMR::I64 == 0) goto cgbMT; else goto cgbMS;
       cgbMT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgbMS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgbMR::I64;
           I64[Sp - 24] = block_cgbMU_info;
           R2 = lvl3_rg5nZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct9_info" {
     Data.Functor.Product.$fFoldableProduct9_info:
         const Data.Functor.Product.$fFoldableProduct9_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+216;
 },
 _cgbMU() //  [R1]
         { []
         }
     {offset
       cgbMU: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbMU_info" {
     block_cgbMU_info:
         const _cgbMU;
         const 0;
         const 4294967326;
         const SgaPW_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.728540864 UTC

[section ""data" . Data.Functor.Product.$w$cfoldr1_closure" {
     Data.Functor.Product.$w$cfoldr1_closure:
         const Data.Functor.Product.$w$cfoldr1_info;
         const 0;
 },
 sat_sgayf_entry() //  [R1]
         { []
         }
     {offset
       cgbNy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbNz; else goto cgbNA;
       cgbNz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbNA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgbNr_info;
           _sgay7::P64 = P64[R1 + 16];
           _sgayb::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgay7::P64;
           P64[Sp - 24] = _sgayb::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbNH; else goto cgbNs;
       ugbNH: // global
           call _cgbNr(R1) args: 0, res: 0, upd: 0;
       cgbNs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayf_info" {
     sat_sgayf_info:
         const sat_sgayf_entry;
         const 3;
         const 15;
 },
 _cgbNr() //  [R1]
         { []
         }
     {offset
       cgbNr: // global
           _sgayb::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cgbNv; else goto cgbNw;
       cgbNv: // global
           R1 = _sgayb::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cgbNw: // global
           R3 = P64[R1 + 6];
           R2 = _sgayb::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgbNr_info" {
     block_cgbNr_info:
         const _cgbNr;
         const 2;
         const 30;
 },
 w3_sgaya_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbNJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbNN; else goto cgbNM;
       cgbNN: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbNM: // global
           _sgay7::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgayf_info;
           P64[Hp - 32] = _sgay7::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w3_sgaya_info" {
     w3_sgaya_info:
         const w3_sgaya_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgayg_entry() //  [R1]
         { []
         }
     {offset
       cgbNS: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbNT; else goto cgbNU;
       cgbNT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbNU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayg_info" {
     sat_sgayg_info:
         const sat_sgayg_entry;
         const 3;
         const 4294967311;
         const SgaPW_srt+288;
 },
 Data.Functor.Product.$w$cfoldr1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbO1: // global
           _sgay9::P64 = R6;
           _sgay8::P64 = R5;
           _sgay7::P64 = R4;
           _sgay6::P64 = R3;
           _sgay5::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgbO2; else goto cgbO3;
       cgbO3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgbO5; else goto cgbO4;
       cgbO5: // global
           HpAlloc = 56;
           goto cgbO2;
       cgbO2: // global
           R6 = _sgay9::P64;
           R5 = _sgay8::P64;
           R4 = _sgay7::P64;
           R3 = _sgay6::P64;
           R2 = _sgay5::P64;
           R1 = Data.Functor.Product.$w$cfoldr1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbO4: // global
           I64[Hp - 48] = w3_sgaya_info;
           P64[Hp - 40] = _sgay7::P64;
           I64[Hp - 32] = sat_sgayg_info;
           P64[Hp - 16] = _sgay6::P64;
           P64[Hp - 8] = _sgay9::P64;
           _cgbNi::P64 = Hp - 46;
           P64[Hp] = _cgbNi::P64;
           I64[Sp - 8] = block_cgbNV_info;
           R2 = _sgay5::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = _cgbNi::P64;
           P64[Sp - 24] = _sgay8::P64;
           P64[Sp - 16] = Hp - 32;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cfoldr1_info" {
     Data.Functor.Product.$w$cfoldr1_info:
         const Data.Functor.Product.$w$cfoldr1_entry;
         const 0;
         const 211110527500302;
         const 21474836505;
         const SgaPW_srt+288;
 },
 _cgbNV() //  [R1]
         { []
         }
     {offset
       cgbNV: // global
           if (R1 & 7 == 1) goto cgbNY; else goto cgbNZ;
       cgbNY: // global
           R1 = Data.Functor.Product.$fFoldableProduct9_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgbNZ: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbNV_info" {
     block_cgbNV_info:
         const _cgbNV;
         const 0;
         const 4294967326;
         const SgaPW_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.743097118 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_info;
         const 0;
 },
 Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cgbP3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbP4; else goto cgbP5;
       cgbP4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbP5: // global
           I64[Sp - 32] = block_cgbP0_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbP9; else goto cgbP1;
       ugbP9: // global
           call _cgbP0(R1) args: 0, res: 0, upd: 0;
       cgbP1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cfoldr1_info" {
     Data.Functor.Product.$fFoldableProduct_$cfoldr1_info:
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SgaPW_srt+400;
 },
 _cgbP0() //  [R1]
         { []
         }
     {offset
       cgbP0: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cfoldr1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbP0_info" {
     block_cgbP0_info:
         const _cgbP0;
         const 3;
         const 4294967326;
         const SgaPW_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.748409976 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct6_closure" {
     Data.Functor.Product.$fFoldableProduct6_closure:
         const Data.Functor.Product.$fFoldableProduct6_info;
 },
 Data.Functor.Product.$fFoldableProduct6_entry() //  []
         { []
         }
     {offset
       cgbPo: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct6_info" {
     Data.Functor.Product.$fFoldableProduct6_info:
         const Data.Functor.Product.$fFoldableProduct6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.753007227 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cnull_closure" {
     Data.Functor.Product.$fFoldableProduct_$cnull_closure:
         const Data.Functor.Product.$fFoldableProduct_$cnull_info;
         const 0;
 },
 sat_sgayy_entry() //  [R1]
         { []
         }
     {offset
       cgbPK: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbPL; else goto cgbPM;
       cgbPL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbPM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = Data.Functor.Product.$fFoldableProduct6_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.True_closure+2;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayy_info" {
     sat_sgayy_info:
         const sat_sgayy_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+288;
 },
 Data.Functor.Product.$fFoldableProduct_$cnull_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgbPN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbPO; else goto cgbPP;
       cgbPO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbPP: // global
           I64[Sp - 24] = block_cgbPB_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugbPT; else goto cgbPC;
       ugbPT: // global
           call _cgbPB(R1) args: 0, res: 0, upd: 0;
       cgbPC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cnull_info" {
     Data.Functor.Product.$fFoldableProduct_$cnull_info:
         const Data.Functor.Product.$fFoldableProduct_$cnull_entry;
         const 0;
         const 562954248388622;
         const 12884901911;
         const SgaPW_srt+288;
 },
 _cgbPB() //  [R1]
         { []
         }
     {offset
       cgbPB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgbPS; else goto cgbPR;
       cgbPS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbPR: // global
           _sgayw::P64 = P64[R1 + 7];
           _sgayx::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgayy_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgayx::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp] = Data.Functor.Product.$fFoldableProduct6_closure+2;
           P64[Sp + 8] = _sgayw::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbPB_info" {
     block_cgbPB_info:
         const _cgbPB;
         const 2;
         const 4294967326;
         const SgaPW_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.76363935 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$cproduct_closure" {
     Data.Functor.Product.$fFoldableProduct_$cproduct_closure:
         const Data.Functor.Product.$fFoldableProduct_$cproduct_info;
         const 0;
 },
 $dMonoid_sgayC_entry() //  [R1]
         { []
         }
     {offset
       cgbQt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbQu; else goto cgbQv;
       cgbQu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgayC_info" {
     $dMonoid_sgayC_info:
         const $dMonoid_sgayC_entry;
         const 1;
         const 4294967312;
         const SgaPW_srt+432;
 },
 sat_sgayI_entry() //  [R1]
         { []
         }
     {offset
       cgbQK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbQL; else goto cgbQM;
       cgbQL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbQM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayI_info" {
     sat_sgayI_info:
         const sat_sgayI_entry;
         const 3;
         const 15;
 },
 sat_sgayH_entry() //  [R1]
         { []
         }
     {offset
       cgbQR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbQS; else goto cgbQT;
       cgbQS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbQT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = Data.Functor.Product.$fFoldableProduct1_closure+1;
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayH_info" {
     sat_sgayH_info:
         const sat_sgayH_entry;
         const 3;
         const 15;
 },
 sat_sgayJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbQU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbQV; else goto cgbQW;
       cgbQV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgbQW: // global
           I64[Sp - 40] = block_cgbQB_info;
           _sgayz::P64 = P64[R1 + 7];
           _sgayA::P64 = P64[R1 + 15];
           _sgayB::P64 = P64[R1 + 23];
           _sgayC::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgayz::P64;
           P64[Sp - 24] = _sgayA::P64;
           P64[Sp - 16] = _sgayB::P64;
           P64[Sp - 8] = _sgayC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbR0; else goto cgbQC;
       ugbR0: // global
           call _cgbQB(R1) args: 0, res: 0, upd: 0;
       cgbQC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayJ_info" {
     sat_sgayJ_info:
         const sat_sgayJ_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgbQB() //  [R1]
         { []
         }
     {offset
       cgbQB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgbQZ; else goto cgbQY;
       cgbQZ: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbQY: // global
           _sgayF::P64 = P64[R1 + 7];
           _sgayG::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sgayI_info;
           P64[Hp - 56] = P64[Sp + 16];
           _sgayC::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgayC::P64;
           P64[Hp - 40] = _sgayG::P64;
           I64[Hp - 32] = sat_sgayH_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sgayC::P64;
           P64[Hp] = _sgayF::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbQB_info" {
     block_cgbQB_info:
         const _cgbQB;
         const 4;
         const 30;
 },
 Data.Functor.Product.$fFoldableProduct_$cproduct_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgbR1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgbR5; else goto cgbR4;
       cgbR5: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbR4: // global
           I64[Hp - 56] = $dMonoid_sgayC_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgayJ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$cproduct_info" {
     Data.Functor.Product.$fFoldableProduct_$cproduct_info:
         const Data.Functor.Product.$fFoldableProduct_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgaPW_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.777806215 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_$ctoList_closure" {
     Data.Functor.Product.$fFoldableProduct_$ctoList_closure:
         const Data.Functor.Product.$fFoldableProduct_$ctoList_info;
         const 0;
 },
 sat_sgayQ_entry() //  [R1]
         { []
         }
     {offset
       cgbS4: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgbS5; else goto cgbS6;
       cgbS5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbS6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 40] = GHC.Types.:_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 56;
           call Data.Foldable.foldMap_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgayQ_info" {
     sat_sgayQ_info:
         const sat_sgayQ_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+288;
 },
 Data.Functor.Product.$fFoldableProduct_$ctoList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cgbS7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbS8; else goto cgbS9;
       cgbS8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbS9: // global
           I64[Sp - 24] = block_cgbRV_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugbSd; else goto cgbRW;
       ugbSd: // global
           call _cgbRV(R1) args: 0, res: 0, upd: 0;
       cgbRW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_$ctoList_info" {
     Data.Functor.Product.$fFoldableProduct_$ctoList_info:
         const Data.Functor.Product.$fFoldableProduct_$ctoList_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const SgaPW_srt+288;
 },
 _cgbRV() //  [R1]
         { []
         }
     {offset
       cgbRV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgbSc; else goto cgbSb;
       cgbSc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgbSb: // global
           _sgayO::P64 = P64[R1 + 7];
           _sgayP::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sgayQ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sgayP::P64;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp] = GHC.Types.:_closure+2;
           P64[Sp + 8] = _sgayO::P64;
           P64[Sp + 16] = Hp - 24;
           Sp = Sp - 16;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbRV_info" {
     block_cgbRV_info:
         const _cgbRV;
         const 2;
         const 4294967326;
         const SgaPW_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.791757031 UTC

[section ""data" . Data.Functor.Product.$fFoldableProduct_closure" {
     Data.Functor.Product.$fFoldableProduct_closure:
         const Data.Functor.Product.$fFoldableProduct_info;
         const 0;
 },
 sat_sgaz8_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbSQ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cproduct_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz8_info" {
     sat_sgaz8_info:
         const sat_sgaz8_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+440;
 },
 sat_sgaz7_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbSY: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$csum_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz7_info" {
     sat_sgaz7_info:
         const sat_sgaz7_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+208;
 },
 sat_sgaz6_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbT6: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cminimum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz6_info" {
     sat_sgaz6_info:
         const sat_sgaz6_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+240;
 },
 sat_sgaz5_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbTe: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cmaximum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz5_info" {
     sat_sgaz5_info:
         const sat_sgaz5_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+264;
 },
 sat_sgaz4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbTm: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$celem_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz4_info" {
     sat_sgaz4_info:
         const sat_sgaz4_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+280;
 },
 sat_sgaz3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbTu: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$clength_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz3_info" {
     sat_sgaz3_info:
         const sat_sgaz3_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+392;
 },
 sat_sgaz2_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbTC: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$cnull_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz2_info" {
     sat_sgaz2_info:
         const sat_sgaz2_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+424;
 },
 sat_sgaz1_entry() //  [R1, R2]
         { []
         }
     {offset
       cgbTK: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fFoldableProduct_$ctoList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz1_info" {
     sat_sgaz1_info:
         const sat_sgaz1_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+448;
 },
 sat_sgaz0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbTS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaz0_info" {
     sat_sgaz0_info:
         const sat_sgaz0_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+336;
 },
 sat_sgayZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbU0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayZ_info" {
     sat_sgayZ_info:
         const sat_sgayZ_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SgaPW_srt+416;
 },
 sat_sgayY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbU8: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayY_info" {
     sat_sgayY_info:
         const sat_sgayY_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SgaPW_srt+384;
 },
 sat_sgayX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbUg: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldl_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayX_info" {
     sat_sgayX_info:
         const sat_sgayX_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SgaPW_srt+312;
 },
 sat_sgayW_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbUo: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayW_info" {
     sat_sgayW_info:
         const sat_sgayW_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SgaPW_srt+352;
 },
 sat_sgayV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbUw: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldr_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayV_info" {
     sat_sgayV_info:
         const sat_sgayV_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const SgaPW_srt+368;
 },
 sat_sgayU_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgbUE: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fFoldableProduct_$cfoldMap_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayU_info" {
     sat_sgayU_info:
         const sat_sgayU_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgayT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgbUM: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fFoldableProduct_$cfold_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgayT_info" {
     sat_sgayT_info:
         const sat_sgayT_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Product.$fFoldableProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgbUQ: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cgbUU; else goto cgbUT;
       cgbUU: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fFoldableProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbUT: // global
           I64[Hp - 512] = sat_sgaz8_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sgaz7_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sgaz6_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sgaz5_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sgaz4_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sgaz3_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sgaz2_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sgaz1_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sgaz0_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sgayZ_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sgayY_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sgayX_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sgayW_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sgayV_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgayU_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgayT_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fFoldableProduct_info" {
     Data.Functor.Product.$fFoldableProduct_info:
         const Data.Functor.Product.$fFoldableProduct_entry;
         const 0;
         const 17065584369155964942;
         const 8589934607;
         const SgaPW_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.820990469 UTC

[section ""data" . Data.Functor.Product.$w$ctraverse_closure" {
     Data.Functor.Product.$w$ctraverse_closure:
         const Data.Functor.Product.$w$ctraverse_info;
 },
 sat_sgazg_entry() //  [R1]
         { []
         }
     {offset
       cgbWr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbWs; else goto cgbWt;
       cgbWs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbWt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazg_info" {
     sat_sgazg_info:
         const sat_sgazg_entry;
         const 4;
         const 15;
 },
 sat_sgazf_entry() //  [R1]
         { []
         }
     {offset
       cgbWy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbWz; else goto cgbWA;
       cgbWz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbWA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazf_info" {
     sat_sgazf_info:
         const sat_sgazf_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$ctraverse_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgbWB: // global
           _sgazd::P64 = R6;
           _sgazc::P64 = R5;
           _sgazb::P64 = R4;
           _sgaza::P64 = R3;
           _sgaz9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgbWC; else goto cgbWD;
       cgbWD: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgbWF; else goto cgbWE;
       cgbWF: // global
           HpAlloc = 96;
           goto cgbWC;
       cgbWC: // global
           R6 = _sgazd::P64;
           R5 = _sgazc::P64;
           R4 = _sgazb::P64;
           R3 = _sgaza::P64;
           R2 = _sgaz9::P64;
           R1 = Data.Functor.Product.$w$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgbWE: // global
           I64[Hp - 88] = sat_sgazg_info;
           P64[Hp - 72] = _sgaza::P64;
           P64[Hp - 64] = _sgazb::P64;
           P64[Hp - 56] = _sgazc::P64;
           P64[Hp - 48] = P64[Sp];
           I64[Hp - 40] = sat_sgazf_info;
           P64[Hp - 24] = _sgaz9::P64;
           P64[Hp - 16] = _sgazb::P64;
           P64[Hp - 8] = _sgazc::P64;
           P64[Hp] = _sgazd::P64;
           R2 = _sgazb::P64;
           I64[Sp - 24] = stg_ap_ppp_info;
           P64[Sp - 16] = Data.Functor.Product.Pair_closure+2;
           P64[Sp - 8] = Hp - 40;
           P64[Sp] = Hp - 88;
           Sp = Sp - 24;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$ctraverse_info" {
     Data.Functor.Product.$w$ctraverse_info:
         const Data.Functor.Product.$w$ctraverse_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.830127178 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$ctraverse_closure" {
     Data.Functor.Product.$fTraversableProduct_$ctraverse_closure:
         const Data.Functor.Product.$fTraversableProduct_$ctraverse_info;
 },
 Data.Functor.Product.$fTraversableProduct_$ctraverse_entry() //  [R2,
                                                                   R3, R4, R5, R6]
         { []
         }
     {offset
       cgbXh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgbXi; else goto cgbXj;
       cgbXi: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbXj: // global
           I64[Sp - 40] = block_cgbXe_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbXn; else goto cgbXf;
       ugbXn: // global
           call _cgbXe(R1) args: 0, res: 0, upd: 0;
       cgbXf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$ctraverse_info" {
     Data.Functor.Product.$fTraversableProduct_$ctraverse_info:
         const Data.Functor.Product.$fTraversableProduct_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbXe() //  [R1]
         { []
         }
     {offset
       cgbXe: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbXe_info" {
     block_cgbXe_info:
         const _cgbXe;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.836280321 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure" {
     Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure:
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info;
         const 0;
 },
 sat_sgazs_entry() //  [R1]
         { []
         }
     {offset
       cgbXH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbXI; else goto cgbXJ;
       cgbXI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbXJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazs_info" {
     sat_sgazs_info:
         const sat_sgazs_entry;
         const 1;
         const 16;
 },
 sat_sgazr_entry() //  [R1]
         { []
         }
     {offset
       cgbXO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbXP; else goto cgbXQ;
       cgbXP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbXQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazr_info" {
     sat_sgazr_info:
         const sat_sgazr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgbXR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbXV; else goto cgbXU;
       cgbXV: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbXU: // global
           I64[Hp - 40] = sat_sgazs_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgazr_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFoldableProduct_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info" {
     Data.Functor.Product.$fTraversableProduct_$cp2Traversable_info:
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.844038739 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure" {
     Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure:
         const Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info;
 },
 sat_sgazw_entry() //  [R1]
         { []
         }
     {offset
       cgbYk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbYl; else goto cgbYm;
       cgbYl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbYm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazw_info" {
     sat_sgazw_info:
         const sat_sgazw_entry;
         const 1;
         const 16;
 },
 sat_sgazv_entry() //  [R1]
         { []
         }
     {offset
       cgbYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgbYs; else goto cgbYt;
       cgbYs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgbYt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazv_info" {
     sat_sgazv_info:
         const sat_sgazv_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgbYu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgbYy; else goto cgbYx;
       cgbYy: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbYx: // global
           I64[Hp - 40] = sat_sgazw_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgazv_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFunctorProduct_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info" {
     Data.Functor.Product.$fTraversableProduct_$cp1Traversable_info:
         const Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.851532743 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$csequenceA_closure" {
     Data.Functor.Product.$fTraversableProduct_$csequenceA_closure:
         const Data.Functor.Product.$fTraversableProduct_$csequenceA_info;
 },
 Data.Functor.Product.$fTraversableProduct_$csequenceA_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cgbYW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgbYX; else goto cgbYY;
       cgbYX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$csequenceA_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbYY: // global
           I64[Sp - 32] = block_cgbYT_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugbZ2; else goto cgbYU;
       ugbZ2: // global
           call _cgbYT(R1) args: 0, res: 0, upd: 0;
       cgbYU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$csequenceA_info" {
     Data.Functor.Product.$fTraversableProduct_$csequenceA_info:
         const Data.Functor.Product.$fTraversableProduct_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgbYT() //  [R1]
         { []
         }
     {offset
       cgbYT: // global
           R6 = P64[R1 + 7];
           R5 = GHC.Base.id_closure+1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbYT_info" {
     block_cgbYT_info:
         const _cgbYT;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.8580477 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$cmapM_closure" {
     Data.Functor.Product.$fTraversableProduct_$cmapM_closure:
         const Data.Functor.Product.$fTraversableProduct_$cmapM_info;
 },
 Data.Functor.Product.$fTraversableProduct_$cmapM_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cgbZm: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgbZq; else goto cgbZr;
       cgbZq: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgbZr: // global
           I64[Sp - 40] = block_cgbZj_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugbZx; else goto cgbZk;
       ugbZx: // global
           call _cgbZj(R1) args: 0, res: 0, upd: 0;
       cgbZk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$cmapM_info" {
     Data.Functor.Product.$fTraversableProduct_$cmapM_info:
         const Data.Functor.Product.$fTraversableProduct_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgbZj() //  [R1]
         { []
         }
     {offset
       cgbZj: // global
           I64[Sp - 8] = block_cgbZp_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbZj_info" {
     block_cgbZj_info:
         const _cgbZj;
         const 4;
         const 30;
 },
 _cgbZp() //  [R1]
         { []
         }
     {offset
       cgbZp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 40];
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbZp_info" {
     block_cgbZp_info:
         const _cgbZp;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.8663524 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_$csequence_closure" {
     Data.Functor.Product.$fTraversableProduct_$csequence_closure:
         const Data.Functor.Product.$fTraversableProduct_$csequence_info;
 },
 Data.Functor.Product.$fTraversableProduct_$csequence_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cgbZW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc00; else goto cgc01;
       cgc00: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc01: // global
           I64[Sp - 32] = block_cgbZT_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugc07; else goto cgbZU;
       ugc07: // global
           call _cgbZT(R1) args: 0, res: 0, upd: 0;
       cgbZU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_$csequence_info" {
     Data.Functor.Product.$fTraversableProduct_$csequence_info:
         const Data.Functor.Product.$fTraversableProduct_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgbZT() //  [R1]
         { []
         }
     {offset
       cgbZT: // global
           I64[Sp - 8] = block_cgbZZ_info;
           R2 = P64[Sp + 24];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbZT_info" {
     block_cgbZT_info:
         const _cgbZT;
         const 3;
         const 30;
 },
 _cgbZZ() //  [R1]
         { []
         }
     {offset
       cgbZZ: // global
           R6 = P64[Sp + 32];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$ctraverse_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgbZZ_info" {
     block_cgbZZ_info:
         const _cgbZZ;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.875838291 UTC

[section ""data" . Data.Functor.Product.$fTraversableProduct_closure" {
     Data.Functor.Product.$fTraversableProduct_closure:
         const Data.Functor.Product.$fTraversableProduct_info;
         const 0;
 },
 sat_sgaA2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgc0z: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fTraversableProduct_$csequence_entry(R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaA2_info" {
     sat_sgaA2_info:
         const sat_sgaA2_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaA1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgc0H: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fTraversableProduct_$cmapM_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaA1_info" {
     sat_sgaA1_info:
         const sat_sgaA1_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaA0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgc0P: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fTraversableProduct_$csequenceA_entry(R5,
                                                                            R4,
                                                                            R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaA0_info" {
     sat_sgaA0_info:
         const sat_sgaA0_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgazZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgc0X: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fTraversableProduct_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgazZ_info" {
     sat_sgazZ_info:
         const sat_sgazZ_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgazY_entry() //  [R1]
         { []
         }
     {offset
       cgc14: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgc15; else goto cgc16;
       cgc15: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc16: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fTraversableProduct_$cp2Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazY_info" {
     sat_sgazY_info:
         const sat_sgazY_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+464;
 },
 sat_sgazX_entry() //  [R1]
         { []
         }
     {offset
       cgc1b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgc1c; else goto cgc1d;
       cgc1c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc1d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fTraversableProduct_$cp1Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgazX_info" {
     sat_sgazX_info:
         const sat_sgazX_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fTraversableProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgc1f: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cgc1j; else goto cgc1i;
       cgc1j: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fTraversableProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc1i: // global
           I64[Hp - 208] = sat_sgaA2_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sgaA1_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sgaA0_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sgazZ_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgazY_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgazX_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fTraversableProduct_info" {
     Data.Functor.Product.$fTraversableProduct_info:
         const Data.Functor.Product.$fTraversableProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.891651912 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cliftA2_info;
 },
 sat_sgaAf_entry() //  [R1]
         { []
         }
     {offset
       cgc2g: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgc2h; else goto cgc2i;
       cgc2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc2i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAf_info" {
     sat_sgaAf_info:
         const sat_sgaAf_entry;
         const 4;
         const 15;
 },
 sat_sgaAe_entry() //  [R1]
         { []
         }
     {offset
       cgc2n: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgc2o; else goto cgc2p;
       cgc2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc2p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAe_info" {
     sat_sgaAe_info:
         const sat_sgaAe_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cgc2q: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgc2s; else goto cgc2t;
       cgc2s: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cliftA2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc2t: // global
           I64[Sp - 40] = block_cgc22_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugc2z; else goto cgc23;
       ugc2z: // global
           call _cgc22(R1) args: 0, res: 0, upd: 0;
       cgc23: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cliftA2_info" {
     Data.Functor.Product.$fApplicativeProduct_$cliftA2_info:
         const Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgc22() //  [R1]
         { []
         }
     {offset
       cgc22: // global
           I64[Sp - 8] = block_cgc27_info;
           _sgaA9::P64 = P64[R1 + 7];
           _sgaAa::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaAa::P64;
           P64[Sp + 32] = _sgaA9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugc2y; else goto cgc28;
       ugc2y: // global
           call _cgc27(R1) args: 0, res: 0, upd: 0;
       cgc28: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc22_info" {
     block_cgc22_info:
         const _cgc22;
         const 4;
         const 30;
 },
 _cgc27() //  [R1]
         { []
         }
     {offset
       cgc27: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgc2x; else goto cgc2w;
       cgc2x: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgc2w: // global
           _sgaAc::P64 = P64[R1 + 7];
           _sgaAd::P64 = P64[R1 + 15];
           I64[Hp - 112] = sat_sgaAf_info;
           P64[Hp - 96] = P64[Sp + 24];
           _sgaA5::P64 = P64[Sp + 32];
           P64[Hp - 88] = _sgaA5::P64;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _sgaAd::P64;
           I64[Hp - 64] = sat_sgaAe_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _sgaA5::P64;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _sgaAc::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc27_info" {
     block_cgc27_info:
         const _cgc27;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.905223068 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c<*>_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c<*>_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c<*>_info;
 },
 sat_sgaAr_entry() //  [R1]
         { []
         }
     {offset
       cgc3z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc3A; else goto cgc3B;
       cgc3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc3B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAr_info" {
     sat_sgaAr_info:
         const sat_sgaAr_entry;
         const 3;
         const 15;
 },
 sat_sgaAq_entry() //  [R1]
         { []
         }
     {offset
       cgc3G: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc3H; else goto cgc3I;
       cgc3H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc3I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAq_info" {
     sat_sgaAq_info:
         const sat_sgaAq_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$c<*>_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cgc3J: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc3L; else goto cgc3M;
       cgc3L: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c<*>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc3M: // global
           I64[Sp - 32] = block_cgc3l_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugc3S; else goto cgc3m;
       ugc3S: // global
           call _cgc3l(R1) args: 0, res: 0, upd: 0;
       cgc3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c<*>_info" {
     Data.Functor.Product.$fApplicativeProduct_$c<*>_info:
         const Data.Functor.Product.$fApplicativeProduct_$c<*>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgc3l() //  [R1]
         { []
         }
     {offset
       cgc3l: // global
           I64[Sp - 8] = block_cgc3q_info;
           _sgaAl::P64 = P64[R1 + 7];
           _sgaAm::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaAm::P64;
           P64[Sp + 24] = _sgaAl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugc3R; else goto cgc3r;
       ugc3R: // global
           call _cgc3q(R1) args: 0, res: 0, upd: 0;
       cgc3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc3l_info" {
     block_cgc3l_info:
         const _cgc3l;
         const 3;
         const 30;
 },
 _cgc3q() //  [R1]
         { []
         }
     {offset
       cgc3q: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgc3Q; else goto cgc3P;
       cgc3Q: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgc3P: // global
           _sgaAo::P64 = P64[R1 + 7];
           _sgaAp::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaAr_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sgaAp::P64;
           I64[Hp - 56] = sat_sgaAq_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgaAo::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc3q_info" {
     block_cgc3q_info:
         const _cgc3q;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.917162186 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cpure_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cpure_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cpure_info;
 },
 sat_sgaAw_entry() //  [R1]
         { []
         }
     {offset
       cgc4G: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgc4H; else goto cgc4I;
       cgc4H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc4I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAw_info" {
     sat_sgaAw_info:
         const sat_sgaAw_entry;
         const 2;
         const 18;
 },
 sat_sgaAv_entry() //  [R1]
         { []
         }
     {offset
       cgc4N: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgc4O; else goto cgc4P;
       cgc4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAv_info" {
     sat_sgaAv_info:
         const sat_sgaAv_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fApplicativeProduct_$cpure_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgc4R: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgc4V; else goto cgc4U;
       cgc4V: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cpure_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc4U: // global
           I64[Hp - 80] = sat_sgaAw_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgaAv_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cpure_info" {
     Data.Functor.Product.$fApplicativeProduct_$cpure_info:
         const Data.Functor.Product.$fApplicativeProduct_$cpure_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.925704922 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure" {
     Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure:
         const Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info;
 },
 sat_sgaAA_entry() //  [R1]
         { []
         }
     {offset
       cgc5s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgc5t; else goto cgc5u;
       cgc5t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc5u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAA_info" {
     sat_sgaAA_info:
         const sat_sgaAA_entry;
         const 1;
         const 16;
 },
 sat_sgaAz_entry() //  [R1]
         { []
         }
     {offset
       cgc5z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgc5A; else goto cgc5B;
       cgc5A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc5B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAz_info" {
     sat_sgaAz_info:
         const sat_sgaAz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgc5C: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgc5G; else goto cgc5F;
       cgc5G: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc5F: // global
           I64[Hp - 40] = sat_sgaAA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaAz_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fFunctorProduct_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info" {
     Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_info:
         const Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.932542892 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct1_closure" {
     Data.Functor.Product.$fApplicativeProduct1_closure:
         const Data.Functor.Product.$fApplicativeProduct1_info;
 },
 Data.Functor.Product.$fApplicativeProduct1_entry() //  [R3]
         { []
         }
     {offset
       cgc61: // global
           R2 = R3;
           call GHC.Base.breakpoint_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct1_info" {
     Data.Functor.Product.$fApplicativeProduct1_info:
         const Data.Functor.Product.$fApplicativeProduct1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.938581492 UTC

[section ""data" . Data.Functor.Product.$w$c*>_closure" {
     Data.Functor.Product.$w$c*>_closure:
         const Data.Functor.Product.$w$c*>_info;
 },
 sat_sgaAM_entry() //  [R1]
         { []
         }
     {offset
       cgc6m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc6n; else goto cgc6o;
       cgc6n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc6o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgc6k_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAM_info" {
     sat_sgaAM_info:
         const sat_sgaAM_entry;
         const 2;
         const 18;
 },
 _cgc6k() //  [R1]
         { []
         }
     {offset
       cgc6k: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Product.$fApplicativeProduct1_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgc6k_info" {
     block_cgc6k_info:
         const _cgc6k;
         const 1;
         const 30;
 },
 sat_sgaAN_entry() //  [R1]
         { []
         }
     {offset
       cgc6s: // global
           _sgaAN::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgc6t; else goto cgc6u;
       cgc6u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgc6w; else goto cgc6v;
       cgc6w: // global
           HpAlloc = 32;
           goto cgc6t;
       cgc6t: // global
           R1 = _sgaAN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc6v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaAN::P64;
           _sgaAD::P64 = P64[_sgaAN::P64 + 16];
           _sgaAF::P64 = P64[_sgaAN::P64 + 24];
           _sgaAH::P64 = P64[_sgaAN::P64 + 32];
           I64[Hp - 24] = sat_sgaAM_info;
           P64[Hp - 8] = _sgaAD::P64;
           P64[Hp] = _sgaAF::P64;
           R2 = _sgaAD::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgaAH::P64;
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAN_info" {
     sat_sgaAN_info:
         const sat_sgaAN_entry;
         const 3;
         const 15;
 },
 sat_sgaAJ_entry() //  [R1]
         { []
         }
     {offset
       cgc6H: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc6I; else goto cgc6J;
       cgc6I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc6J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgc6F_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAJ_info" {
     sat_sgaAJ_info:
         const sat_sgaAJ_entry;
         const 2;
         const 18;
 },
 _cgc6F() //  [R1]
         { []
         }
     {offset
       cgc6F: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Product.$fApplicativeProduct1_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgc6F_info" {
     block_cgc6F_info:
         const _cgc6F;
         const 1;
         const 30;
 },
 sat_sgaAK_entry() //  [R1]
         { []
         }
     {offset
       cgc6N: // global
           _sgaAK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgc6O; else goto cgc6P;
       cgc6P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgc6R; else goto cgc6Q;
       cgc6R: // global
           HpAlloc = 32;
           goto cgc6O;
       cgc6O: // global
           R1 = _sgaAK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc6Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaAK::P64;
           _sgaAC::P64 = P64[_sgaAK::P64 + 16];
           _sgaAE::P64 = P64[_sgaAK::P64 + 24];
           _sgaAG::P64 = P64[_sgaAK::P64 + 32];
           I64[Hp - 24] = sat_sgaAJ_info;
           P64[Hp - 8] = _sgaAC::P64;
           P64[Hp] = _sgaAE::P64;
           R2 = _sgaAC::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgaAG::P64;
           Sp = Sp - 40;
           call GHC.Base.<*>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaAK_info" {
     sat_sgaAK_info:
         const sat_sgaAK_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$w$c*>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgc6S: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgc6W; else goto cgc6V;
       cgc6W: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$c*>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgc6V: // global
           I64[Hp - 72] = sat_sgaAN_info;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = sat_sgaAK_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = R6;
           R2 = Hp - 72;
           R1 = Hp - 32;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$c*>_info" {
     Data.Functor.Product.$w$c*>_info:
         const Data.Functor.Product.$w$c*>_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.954270757 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c*>_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c*>_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c*>_info;
 },
 Data.Functor.Product.$fApplicativeProduct_$c*>_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cgc7Q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc81; else goto cgc82;
       cgc81: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c*>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc82: // global
           I64[Sp - 32] = block_cgc7N_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugc89; else goto cgc7O;
       ugc89: // global
           call _cgc7N(R1) args: 0, res: 0, upd: 0;
       cgc7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c*>_info" {
     Data.Functor.Product.$fApplicativeProduct_$c*>_info:
         const Data.Functor.Product.$fApplicativeProduct_$c*>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgc7N() //  [R1]
         { []
         }
     {offset
       cgc7N: // global
           I64[Sp - 8] = block_cgc7T_info;
           _sgaAT::P64 = P64[R1 + 7];
           _sgaAU::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaAU::P64;
           P64[Sp + 24] = _sgaAT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugc88; else goto cgc7U;
       ugc88: // global
           call _cgc7T(R1) args: 0, res: 0, upd: 0;
       cgc7U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc7N_info" {
     block_cgc7N_info:
         const _cgc7N;
         const 3;
         const 30;
 },
 _cgc7T() //  [R1]
         { []
         }
     {offset
       cgc7T: // global
           _sgaAT::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cgc7Y_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = _sgaAT::P64;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call Data.Functor.Product.$w$c*>_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc7T_info" {
     block_cgc7T_info:
         const _cgc7T;
         const 4;
         const 30;
 },
 _cgc7Y() //  [R1, R2]
         { []
         }
     {offset
       cgc7Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgc87; else goto cgc86;
       cgc87: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgc86: // global
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc7Y_info" {
     block_cgc7Y_info:
         const _cgc7Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.965065746 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_$c<*_closure" {
     Data.Functor.Product.$fApplicativeProduct_$c<*_closure:
         const Data.Functor.Product.$fApplicativeProduct_$c<*_info;
 },
 sat_sgaBc_entry() //  [R1]
         { []
         }
     {offset
       cgc8O: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgc8P; else goto cgc8Q;
       cgc8P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc8Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Base.const_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBc_info" {
     sat_sgaBc_info:
         const sat_sgaBc_entry;
         const 3;
         const 15;
 },
 sat_sgaBb_entry() //  [R1]
         { []
         }
     {offset
       cgc8V: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgc8W; else goto cgc8X;
       cgc8W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgc8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Base.const_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBb_info" {
     sat_sgaBb_info:
         const sat_sgaBb_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fApplicativeProduct_$c<*_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cgc8Y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgc90; else goto cgc91;
       cgc90: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_$c<*_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgc91: // global
           I64[Sp - 32] = block_cgc8A_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugc97; else goto cgc8B;
       ugc97: // global
           call _cgc8A(R1) args: 0, res: 0, upd: 0;
       cgc8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_$c<*_info" {
     Data.Functor.Product.$fApplicativeProduct_$c<*_info:
         const Data.Functor.Product.$fApplicativeProduct_$c<*_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgc8A() //  [R1]
         { []
         }
     {offset
       cgc8A: // global
           I64[Sp - 8] = block_cgc8F_info;
           _sgaB6::P64 = P64[R1 + 7];
           _sgaB7::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaB7::P64;
           P64[Sp + 24] = _sgaB6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugc96; else goto cgc8G;
       ugc96: // global
           call _cgc8F(R1) args: 0, res: 0, upd: 0;
       cgc8G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc8A_info" {
     block_cgc8A_info:
         const _cgc8A;
         const 3;
         const 30;
 },
 _cgc8F() //  [R1]
         { []
         }
     {offset
       cgc8F: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgc95; else goto cgc94;
       cgc95: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgc94: // global
           _sgaB9::P64 = P64[R1 + 7];
           _sgaBa::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaBc_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sgaBa::P64;
           I64[Hp - 56] = sat_sgaBb_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgaB9::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgc8F_info" {
     block_cgc8F_info:
         const _cgc8F;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.978253548 UTC

[section ""data" . Data.Functor.Product.$fApplicativeProduct_closure" {
     Data.Functor.Product.$fApplicativeProduct_closure:
         const Data.Functor.Product.$fApplicativeProduct_info;
 },
 sat_sgaBk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgca0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c<*_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBk_info" {
     sat_sgaBk_info:
         const sat_sgaBk_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaBj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgca8: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c*>_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBj_info" {
     sat_sgaBj_info:
         const sat_sgaBj_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaBi_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcag: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fApplicativeProduct_$cliftA2_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBi_info" {
     sat_sgaBi_info:
         const sat_sgaBi_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaBh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgcao: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fApplicativeProduct_$c<*>_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBh_info" {
     sat_sgaBh_info:
         const sat_sgaBh_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaBg_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcaw: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fApplicativeProduct_$cpure_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBg_info" {
     sat_sgaBg_info:
         const sat_sgaBg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaBf_entry() //  [R1]
         { []
         }
     {offset
       cgcaD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcaE; else goto cgcaF;
       cgcaE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcaF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fApplicativeProduct_$cp1Applicative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBf_info" {
     sat_sgaBf_info:
         const sat_sgaBf_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fApplicativeProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcaH: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cgcaL; else goto cgcaK;
       cgcaL: // global
           HpAlloc = 208;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fApplicativeProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcaK: // global
           I64[Hp - 200] = sat_sgaBk_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgaBj_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgaBi_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sgaBh_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sgaBg_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgaBf_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 103;
           P64[Hp - 24] = Hp - 126;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 198;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fApplicativeProduct_info" {
     Data.Functor.Product.$fApplicativeProduct_info:
         const Data.Functor.Product.$fApplicativeProduct_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:04.993760248 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$c<|>_closure" {
     Data.Functor.Product.$fAlternativeProduct_$c<|>_closure:
         const Data.Functor.Product.$fAlternativeProduct_$c<|>_info;
 },
 sat_sgaBw_entry() //  [R1]
         { []
         }
     {offset
       cgcbG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcbH; else goto cgcbI;
       cgcbH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcbI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBw_info" {
     sat_sgaBw_info:
         const sat_sgaBw_entry;
         const 3;
         const 15;
 },
 sat_sgaBv_entry() //  [R1]
         { []
         }
     {offset
       cgcbN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcbO; else goto cgcbP;
       cgcbO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcbP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBv_info" {
     sat_sgaBv_info:
         const sat_sgaBv_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fAlternativeProduct_$c<|>_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cgcbQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcbS; else goto cgcbT;
       cgcbS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$c<|>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcbT: // global
           I64[Sp - 32] = block_cgcbs_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugcbZ; else goto cgcbt;
       ugcbZ: // global
           call _cgcbs(R1) args: 0, res: 0, upd: 0;
       cgcbt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$c<|>_info" {
     Data.Functor.Product.$fAlternativeProduct_$c<|>_info:
         const Data.Functor.Product.$fAlternativeProduct_$c<|>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgcbs() //  [R1]
         { []
         }
     {offset
       cgcbs: // global
           I64[Sp - 8] = block_cgcbx_info;
           _sgaBq::P64 = P64[R1 + 7];
           _sgaBr::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaBr::P64;
           P64[Sp + 24] = _sgaBq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcbY; else goto cgcby;
       ugcbY: // global
           call _cgcbx(R1) args: 0, res: 0, upd: 0;
       cgcby: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcbs_info" {
     block_cgcbs_info:
         const _cgcbs;
         const 3;
         const 30;
 },
 _cgcbx() //  [R1]
         { []
         }
     {offset
       cgcbx: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgcbX; else goto cgcbW;
       cgcbX: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcbW: // global
           _sgaBt::P64 = P64[R1 + 7];
           _sgaBu::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaBw_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sgaBu::P64;
           I64[Hp - 56] = sat_sgaBv_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgaBt::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcbx_info" {
     block_cgcbx_info:
         const _cgcbx;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.005438468 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$cempty_closure" {
     Data.Functor.Product.$fAlternativeProduct_$cempty_closure:
         const Data.Functor.Product.$fAlternativeProduct_$cempty_info;
 },
 sat_sgaBA_entry() //  [R1]
         { []
         }
     {offset
       cgccN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgccO; else goto cgccP;
       cgccO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgccP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBA_info" {
     sat_sgaBA_info:
         const sat_sgaBA_entry;
         const 1;
         const 16;
 },
 sat_sgaBz_entry() //  [R1]
         { []
         }
     {offset
       cgccU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgccV; else goto cgccW;
       cgccV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgccW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBz_info" {
     sat_sgaBz_info:
         const sat_sgaBz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fAlternativeProduct_$cempty_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       cgccY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgcd2; else goto cgcd1;
       cgcd2: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$cempty_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcd1: // global
           I64[Hp - 64] = sat_sgaBA_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgaBz_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$cempty_info" {
     Data.Functor.Product.$fAlternativeProduct_$cempty_info:
         const Data.Functor.Product.$fAlternativeProduct_$cempty_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.013035575 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure" {
     Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure:
         const Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info;
 },
 sat_sgaBE_entry() //  [R1]
         { []
         }
     {offset
       cgcdv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcdw; else goto cgcdx;
       cgcdw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcdx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBE_info" {
     sat_sgaBE_info:
         const sat_sgaBE_entry;
         const 1;
         const 16;
 },
 sat_sgaBD_entry() //  [R1]
         { []
         }
     {offset
       cgcdC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcdD; else goto cgcdE;
       cgcdD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcdE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBD_info" {
     sat_sgaBD_info:
         const sat_sgaBD_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgcdF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcdJ; else goto cgcdI;
       cgcdJ: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcdI: // global
           I64[Hp - 40] = sat_sgaBE_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaBD_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fApplicativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info" {
     Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_info:
         const Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.020078765 UTC

[section ""data" . poly_some_v_rg5o0_closure" {
     poly_some_v_rg5o0_closure:
         const poly_some_v_rg5o0_info;
         const 0;
         const 0;
         const 0;
 },
 poly_some_v_rg5o0_entry() //  [R1]
         { []
         }
     {offset
       cgce6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgce7; else goto cgce8;
       cgce7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgce8: // global
           (_cgce3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgce3::I64 == 0) goto cgce5; else goto cgce4;
       cgce5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgce4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgce3::I64;
           R1 = poly_some_v_rg5o0_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . poly_some_v_rg5o0_info" {
     poly_some_v_rg5o0_info:
         const poly_some_v_rg5o0_entry;
         const 0;
         const 4294967317;
         const SgaPW_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.024820599 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_$csome_closure" {
     Data.Functor.Product.$fAlternativeProduct_$csome_closure:
         const Data.Functor.Product.$fAlternativeProduct_$csome_info;
         const 0;
 },
 Data.Functor.Product.$fAlternativeProduct_$csome_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgcep: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgceq; else goto cgcer;
       cgceq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcer: // global
           I64[Sp - 8] = block_cgcem_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcev; else goto cgcen;
       ugcev: // global
           call _cgcem() args: 0, res: 0, upd: 0;
       cgcen: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_$csome_info" {
     Data.Functor.Product.$fAlternativeProduct_$csome_info:
         const Data.Functor.Product.$fAlternativeProduct_$csome_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SgaPW_srt+480;
 },
 _cgcem() //  []
         { []
         }
     {offset
       cgcem: // global
           R1 = poly_some_v_rg5o0_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcem_info" {
     block_cgcem_info:
         const _cgcem;
         const 0;
         const 4294967326;
         const SgaPW_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.032403452 UTC

[section ""data" . Data.Functor.Product.$fAlternativeProduct_closure" {
     Data.Functor.Product.$fAlternativeProduct_closure:
         const Data.Functor.Product.$fAlternativeProduct_info;
         const 0;
 },
 sat_sgaBR_entry() //  [R1, R2]
         { []
         }
     {offset
       cgceQ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fAlternativeProduct_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBR_info" {
     sat_sgaBR_info:
         const sat_sgaBR_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+488;
 },
 sat_sgaBQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgceY: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fAlternativeProduct_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBQ_info" {
     sat_sgaBQ_info:
         const sat_sgaBQ_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SgaPW_srt+488;
 },
 sat_sgaBP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgcf6: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fAlternativeProduct_$c<|>_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaBP_info" {
     sat_sgaBP_info:
         const sat_sgaBP_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaBO_entry() //  [R1]
         { []
         }
     {offset
       cgcfd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcfe; else goto cgcff;
       cgcfe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fAlternativeProduct_$cempty_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBO_info" {
     sat_sgaBO_info:
         const sat_sgaBO_entry;
         const 2;
         const 18;
 },
 sat_sgaBN_entry() //  [R1]
         { []
         }
     {offset
       cgcfk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcfl; else goto cgcfm;
       cgcfl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcfm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fAlternativeProduct_$cp1Alternative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaBN_info" {
     sat_sgaBN_info:
         const sat_sgaBN_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fAlternativeProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcfo: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cgcfs; else goto cgcfr;
       cgcfs: // global
           HpAlloc = 184;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fAlternativeProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcfr: // global
           I64[Hp - 176] = sat_sgaBR_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgaBQ_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sgaBP_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sgaBO_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sgaBN_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 104;
           P64[Hp - 16] = Hp - 126;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 175;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fAlternativeProduct_info" {
     Data.Functor.Product.$fAlternativeProduct_info:
         const Data.Functor.Product.$fAlternativeProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.046986234 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$c>>=_closure" {
     Data.Functor.Product.$fMonadProduct_$c>>=_closure:
         const Data.Functor.Product.$fMonadProduct_$c>>=_info;
 },
 sat_sgaC9_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcgm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcgn; else goto cgcgo;
       cgcgn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcgo: // global
           I64[Sp - 8] = block_cgcgk_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaC9_info" {
     sat_sgaC9_info:
         const sat_sgaC9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgcgk() //  [R1]
         { []
         }
     {offset
       cgcgk: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcgk_info" {
     block_cgcgk_info:
         const _cgcgk;
         const 0;
         const 30;
 },
 sat_sgaCa_entry() //  [R1]
         { []
         }
     {offset
       cgcgs: // global
           _sgaCa::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcgt; else goto cgcgu;
       cgcgu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgcgw; else goto cgcgv;
       cgcgw: // global
           HpAlloc = 16;
           goto cgcgt;
       cgcgt: // global
           R1 = _sgaCa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcgv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaCa::P64;
           _sgaBT::P64 = P64[_sgaCa::P64 + 16];
           _sgaBV::P64 = P64[_sgaCa::P64 + 24];
           _sgaBY::P64 = P64[_sgaCa::P64 + 32];
           I64[Hp - 8] = sat_sgaC9_info;
           P64[Hp] = _sgaBV::P64;
           R2 = _sgaBT::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaBY::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCa_info" {
     sat_sgaCa_info:
         const sat_sgaCa_entry;
         const 3;
         const 15;
 },
 sat_sgaC3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcgI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcgJ; else goto cgcgK;
       cgcgJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcgK: // global
           I64[Sp - 8] = block_cgcgG_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaC3_info" {
     sat_sgaC3_info:
         const sat_sgaC3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgcgG() //  [R1]
         { []
         }
     {offset
       cgcgG: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcgG_info" {
     block_cgcgG_info:
         const _cgcgG;
         const 0;
         const 30;
 },
 sat_sgaC4_entry() //  [R1]
         { []
         }
     {offset
       cgcgO: // global
           _sgaC4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcgP; else goto cgcgQ;
       cgcgQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgcgS; else goto cgcgR;
       cgcgS: // global
           HpAlloc = 16;
           goto cgcgP;
       cgcgP: // global
           R1 = _sgaC4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcgR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaC4::P64;
           _sgaBS::P64 = P64[_sgaC4::P64 + 16];
           _sgaBV::P64 = P64[_sgaC4::P64 + 24];
           _sgaBX::P64 = P64[_sgaC4::P64 + 32];
           I64[Hp - 8] = sat_sgaC3_info;
           P64[Hp] = _sgaBV::P64;
           R2 = _sgaBS::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaBX::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaC4_info" {
     sat_sgaC4_info:
         const sat_sgaC4_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadProduct_$c>>=_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cgcgT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcgV; else goto cgcgW;
       cgcgV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$c>>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcgW: // global
           I64[Sp - 32] = block_cgcg6_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugch0; else goto cgcg7;
       ugch0: // global
           call _cgcg6(R1) args: 0, res: 0, upd: 0;
       cgcg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$c>>=_info" {
     Data.Functor.Product.$fMonadProduct_$c>>=_info:
         const Data.Functor.Product.$fMonadProduct_$c>>=_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgcg6() //  [R1]
         { []
         }
     {offset
       cgcg6: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgcgZ; else goto cgcgY;
       cgcgZ: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcgY: // global
           _sgaBX::P64 = P64[R1 + 7];
           _sgaBY::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaCa_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sgaBV::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sgaBV::P64;
           P64[Hp - 64] = _sgaBY::P64;
           I64[Hp - 56] = sat_sgaC4_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sgaBV::P64;
           P64[Hp - 24] = _sgaBX::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcg6_info" {
     block_cgcg6_info:
         const _cgcg6;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.063998222 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$cp1Monad_closure" {
     Data.Functor.Product.$fMonadProduct_$cp1Monad_closure:
         const Data.Functor.Product.$fMonadProduct_$cp1Monad_info;
 },
 sat_sgaCe_entry() //  [R1]
         { []
         }
     {offset
       cgchX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgchY; else goto cgchZ;
       cgchY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgchZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCe_info" {
     sat_sgaCe_info:
         const sat_sgaCe_entry;
         const 1;
         const 16;
 },
 sat_sgaCd_entry() //  [R1]
         { []
         }
     {offset
       cgci4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgci5; else goto cgci6;
       cgci5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgci6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCd_info" {
     sat_sgaCd_info:
         const sat_sgaCd_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadProduct_$cp1Monad_entry() //  [R2, R3]
         { []
         }
     {offset
       cgci7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcib; else goto cgcia;
       cgcib: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$cp1Monad_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcia: // global
           I64[Hp - 40] = sat_sgaCe_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaCd_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fApplicativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$cp1Monad_info" {
     Data.Functor.Product.$fMonadProduct_$cp1Monad_info:
         const Data.Functor.Product.$fMonadProduct_$cp1Monad_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.072265369 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$creturn_closure" {
     Data.Functor.Product.$fMonadProduct_$creturn_closure:
         const Data.Functor.Product.$fMonadProduct_$creturn_info;
 },
 sat_sgaCl_entry() //  [R1]
         { []
         }
     {offset
       cgciC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgciD; else goto cgciE;
       cgciD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgciE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgciA_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCl_info" {
     sat_sgaCl_info:
         const sat_sgaCl_entry;
         const 2;
         const 18;
 },
 _cgciA() //  [R1]
         { []
         }
     {offset
       cgciA: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgciA_info" {
     block_cgciA_info:
         const _cgciA;
         const 1;
         const 30;
 },
 sat_sgaCj_entry() //  [R1]
         { []
         }
     {offset
       cgciO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgciP; else goto cgciQ;
       cgciP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgciQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cgciM_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCj_info" {
     sat_sgaCj_info:
         const sat_sgaCj_entry;
         const 2;
         const 18;
 },
 _cgciM() //  [R1]
         { []
         }
     {offset
       cgciM: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgciM_info" {
     block_cgciM_info:
         const _cgciM;
         const 1;
         const 30;
 },
 Data.Functor.Product.$fMonadProduct_$creturn_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cgciV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgciZ; else goto cgciY;
       cgciZ: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$creturn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgciY: // global
           I64[Hp - 80] = sat_sgaCl_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgaCj_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$creturn_info" {
     Data.Functor.Product.$fMonadProduct_$creturn_info:
         const Data.Functor.Product.$fMonadProduct_$creturn_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.085512786 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_$c>>_closure" {
     Data.Functor.Product.$fMonadProduct_$c>>_closure:
         const Data.Functor.Product.$fMonadProduct_$c>>_info;
 },
 sat_sgaCD_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcjR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcjS; else goto cgcjT;
       cgcjS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcjT: // global
           I64[Sp - 8] = block_cgcjO_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcjX; else goto cgcjP;
       ugcjX: // global
           call _cgcjO(R1) args: 0, res: 0, upd: 0;
       cgcjP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaCD_info" {
     sat_sgaCD_info:
         const sat_sgaCD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgcjO() //  [R1]
         { []
         }
     {offset
       cgcjO: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcjO_info" {
     block_cgcjO_info:
         const _cgcjO;
         const 0;
         const 30;
 },
 sat_sgaCE_entry() //  [R1]
         { []
         }
     {offset
       cgcjY: // global
           _sgaCE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcjZ; else goto cgck0;
       cgck0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgck2; else goto cgck1;
       cgck2: // global
           HpAlloc = 16;
           goto cgcjZ;
       cgcjZ: // global
           R1 = _sgaCE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgck1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaCE::P64;
           _sgaCn::P64 = P64[_sgaCE::P64 + 16];
           _sgaCp::P64 = P64[_sgaCE::P64 + 24];
           _sgaCs::P64 = P64[_sgaCE::P64 + 32];
           I64[Hp - 8] = sat_sgaCD_info;
           P64[Hp] = _sgaCp::P64;
           R2 = _sgaCn::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaCs::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCE_info" {
     sat_sgaCE_info:
         const sat_sgaCE_entry;
         const 3;
         const 15;
 },
 sat_sgaCx_entry() //  [R1, R2]
         { []
         }
     {offset
       cgckf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgckg; else goto cgckh;
       cgckg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgckh: // global
           I64[Sp - 8] = block_cgckc_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugckl; else goto cgckd;
       ugckl: // global
           call _cgckc(R1) args: 0, res: 0, upd: 0;
       cgckd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaCx_info" {
     sat_sgaCx_info:
         const sat_sgaCx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgckc() //  [R1]
         { []
         }
     {offset
       cgckc: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgckc_info" {
     block_cgckc_info:
         const _cgckc;
         const 0;
         const 30;
 },
 sat_sgaCy_entry() //  [R1]
         { []
         }
     {offset
       cgckm: // global
           _sgaCy::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgckn; else goto cgcko;
       cgcko: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgckq; else goto cgckp;
       cgckq: // global
           HpAlloc = 16;
           goto cgckn;
       cgckn: // global
           R1 = _sgaCy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgckp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaCy::P64;
           _sgaCm::P64 = P64[_sgaCy::P64 + 16];
           _sgaCp::P64 = P64[_sgaCy::P64 + 24];
           _sgaCr::P64 = P64[_sgaCy::P64 + 32];
           I64[Hp - 8] = sat_sgaCx_info;
           P64[Hp] = _sgaCp::P64;
           R2 = _sgaCm::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaCr::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCy_info" {
     sat_sgaCy_info:
         const sat_sgaCy_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadProduct_$c>>_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cgckr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgckt; else goto cgcku;
       cgckt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_$c>>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcku: // global
           I64[Sp - 32] = block_cgcjA_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugcky; else goto cgcjB;
       ugcky: // global
           call _cgcjA(R1) args: 0, res: 0, upd: 0;
       cgcjB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_$c>>_info" {
     Data.Functor.Product.$fMonadProduct_$c>>_info:
         const Data.Functor.Product.$fMonadProduct_$c>>_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgcjA() //  [R1]
         { []
         }
     {offset
       cgcjA: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgckx; else goto cgckw;
       cgckx: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgckw: // global
           _sgaCr::P64 = P64[R1 + 7];
           _sgaCs::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaCE_info;
           P64[Hp - 80] = P64[Sp + 16];
           _sgaCp::P64 = P64[Sp + 24];
           P64[Hp - 72] = _sgaCp::P64;
           P64[Hp - 64] = _sgaCs::P64;
           I64[Hp - 56] = sat_sgaCy_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sgaCp::P64;
           P64[Hp - 24] = _sgaCr::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcjA_info" {
     block_cgcjA_info:
         const _cgcjA;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.101510098 UTC

[section ""data" . lvl4_rg5o1_closure" {
     lvl4_rg5o1_closure:
         const lvl4_rg5o1_info;
         const 0;
 },
 lvl4_rg5o1_entry() //  [R2]
         { []
         }
     {offset
       cgclt: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rg5o1_info" {
     lvl4_rg5o1_info:
         const lvl4_rg5o1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgaPW_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.106525744 UTC

[section ""data" . Data.Functor.Product.$fMonadProduct_closure" {
     Data.Functor.Product.$fMonadProduct_closure:
         const Data.Functor.Product.$fMonadProduct_info;
         const 0;
 },
 sat_sgaCL_entry() //  [R1, R2]
         { []
         }
     {offset
       cgclJ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadProduct_$creturn_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaCL_info" {
     sat_sgaCL_info:
         const sat_sgaCL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaCK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgclR: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadProduct_$c>>_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaCK_info" {
     sat_sgaCK_info:
         const sat_sgaCK_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaCJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgclZ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadProduct_$c>>=_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaCJ_info" {
     sat_sgaCJ_info:
         const sat_sgaCJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaCI_entry() //  [R1]
         { []
         }
     {offset
       cgcm6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcm7; else goto cgcm8;
       cgcm7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcm8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadProduct_$cp1Monad_entry(R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCI_info" {
     sat_sgaCI_info:
         const sat_sgaCI_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fMonadProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcma: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cgcme; else goto cgcmd;
       cgcme: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcmd: // global
           I64[Hp - 144] = sat_sgaCL_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sgaCK_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sgaCJ_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sgaCI_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 94;
           P64[Hp - 16] = Hp - 118;
           P64[Hp - 8] = Hp - 143;
           P64[Hp] = lvl4_rg5o1_closure+1;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadProduct_info" {
     Data.Functor.Product.$fMonadProduct_info:
         const Data.Functor.Product.$fMonadProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.118431034 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cmplus_info;
 },
 sat_sgaCX_entry() //  [R1]
         { []
         }
     {offset
       cgcn0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcn1; else goto cgcn2;
       cgcn1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcn2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCX_info" {
     sat_sgaCX_info:
         const sat_sgaCX_entry;
         const 3;
         const 15;
 },
 sat_sgaCW_entry() //  [R1]
         { []
         }
     {offset
       cgcn7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcn8; else goto cgcn9;
       cgcn8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcn9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaCW_info" {
     sat_sgaCW_info:
         const sat_sgaCW_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cgcna: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcnc; else goto cgcnd;
       cgcnc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cmplus_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcnd: // global
           I64[Sp - 32] = block_cgcmM_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugcnj; else goto cgcmN;
       ugcnj: // global
           call _cgcmM(R1) args: 0, res: 0, upd: 0;
       cgcmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cmplus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cmplus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgcmM() //  [R1]
         { []
         }
     {offset
       cgcmM: // global
           I64[Sp - 8] = block_cgcmR_info;
           _sgaCR::P64 = P64[R1 + 7];
           _sgaCS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaCS::P64;
           P64[Sp + 24] = _sgaCR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcni; else goto cgcmS;
       ugcni: // global
           call _cgcmR(R1) args: 0, res: 0, upd: 0;
       cgcmS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcmM_info" {
     block_cgcmM_info:
         const _cgcmM;
         const 3;
         const 30;
 },
 _cgcmR() //  [R1]
         { []
         }
     {offset
       cgcmR: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgcnh; else goto cgcng;
       cgcnh: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcng: // global
           _sgaCU::P64 = P64[R1 + 7];
           _sgaCV::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaCX_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sgaCV::P64;
           I64[Hp - 56] = sat_sgaCW_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgaCU::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcmR_info" {
     block_cgcmR_info:
         const _cgcmR;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.130265269 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cmzero_info;
 },
 sat_sgaD1_entry() //  [R1]
         { []
         }
     {offset
       cgco7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgco8; else goto cgco9;
       cgco8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgco9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD1_info" {
     sat_sgaD1_info:
         const sat_sgaD1_entry;
         const 1;
         const 16;
 },
 sat_sgaD0_entry() //  [R1]
         { []
         }
     {offset
       cgcoe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcof; else goto cgcog;
       cgcof: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcog: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD0_info" {
     sat_sgaD0_info:
         const sat_sgaD0_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       cgcoi: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgcom; else goto cgcol;
       cgcom: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cmzero_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcol: // global
           I64[Hp - 64] = sat_sgaD1_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgaD0_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cmzero_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cmzero_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.138186826 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info;
         const 0;
 },
 sat_sgaD5_entry() //  [R1]
         { []
         }
     {offset
       cgcoP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcoQ; else goto cgcoR;
       cgcoQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcoR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD5_info" {
     sat_sgaD5_info:
         const sat_sgaD5_entry;
         const 1;
         const 16;
 },
 sat_sgaD4_entry() //  [R1]
         { []
         }
     {offset
       cgcoW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcoX; else goto cgcoY;
       cgcoX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcoY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD4_info" {
     sat_sgaD4_info:
         const sat_sgaD4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cgcoZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcp3; else goto cgcp2;
       cgcp3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcp2: // global
           I64[Hp - 40] = sat_sgaD5_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaD4_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SgaPW_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.147196697 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure" {
     Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure:
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info;
         const 0;
 },
 sat_sgaD9_entry() //  [R1]
         { []
         }
     {offset
       cgcps: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcpt; else goto cgcpu;
       cgcpt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcpu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD9_info" {
     sat_sgaD9_info:
         const sat_sgaD9_entry;
         const 1;
         const 16;
 },
 sat_sgaD8_entry() //  [R1]
         { []
         }
     {offset
       cgcpz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcpA; else goto cgcpB;
       cgcpA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcpB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaD8_info" {
     sat_sgaD8_info:
         const sat_sgaD8_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cgcpC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcpG; else goto cgcpF;
       cgcpG: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcpF: // global
           I64[Hp - 40] = sat_sgaD9_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaD8_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fAlternativeProduct_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info" {
     Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_info:
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const SgaPW_srt+496;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.155982649 UTC

[section ""data" . Data.Functor.Product.$fMonadPlusProduct_closure" {
     Data.Functor.Product.$fMonadPlusProduct_closure:
         const Data.Functor.Product.$fMonadPlusProduct_info;
         const 0;
 },
 sat_sgaDf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgcq6: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadPlusProduct_$cmplus_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaDf_info" {
     sat_sgaDf_info:
         const sat_sgaDf_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaDe_entry() //  [R1]
         { []
         }
     {offset
       cgcqd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcqe; else goto cgcqf;
       cgcqe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcqf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cmzero_entry(R3,
                                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDe_info" {
     sat_sgaDe_info:
         const sat_sgaDe_entry;
         const 2;
         const 18;
 },
 sat_sgaDd_entry() //  [R1]
         { []
         }
     {offset
       cgcqk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcql; else goto cgcqm;
       cgcql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcqm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_entry(R3,
                                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDd_info" {
     sat_sgaDd_info:
         const sat_sgaDd_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+528;
 },
 sat_sgaDc_entry() //  [R1]
         { []
         }
     {offset
       cgcqr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcqs; else goto cgcqt;
       cgcqs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcqt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_entry(R3,
                                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDc_info" {
     sat_sgaDc_info:
         const sat_sgaDc_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+536;
 },
 Data.Functor.Product.$fMonadPlusProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcqv: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cgcqz; else goto cgcqy;
       cgcqz: // global
           HpAlloc = 160;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadPlusProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcqy: // global
           I64[Hp - 152] = sat_sgaDf_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sgaDe_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sgaDd_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sgaDc_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Base.C:MonadPlus_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = Hp - 150;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadPlusProduct_info" {
     Data.Functor.Product.$fMonadPlusProduct_info:
         const Data.Functor.Product.$fMonadPlusProduct_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgaPW_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.168800738 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_$cmfix_closure" {
     Data.Functor.Product.$fMonadFixProduct_$cmfix_closure:
         const Data.Functor.Product.$fMonadFixProduct_$cmfix_info;
 },
 sat_sgaDt_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcrl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcrm; else goto cgcrn;
       cgcrm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcrn: // global
           I64[Sp - 8] = block_cgcrj_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaDt_info" {
     sat_sgaDt_info:
         const sat_sgaDt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgcrj() //  [R1]
         { []
         }
     {offset
       cgcrj: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcrj_info" {
     block_cgcrj_info:
         const _cgcrj;
         const 0;
         const 30;
 },
 sat_sgaDu_entry() //  [R1]
         { []
         }
     {offset
       cgcrr: // global
           _sgaDu::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgcrs; else goto cgcrt;
       cgcrt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgcrv; else goto cgcru;
       cgcrv: // global
           HpAlloc = 16;
           goto cgcrs;
       cgcrs: // global
           R1 = _sgaDu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaDu::P64;
           _sgaDh::P64 = P64[_sgaDu::P64 + 16];
           _sgaDi::P64 = P64[_sgaDu::P64 + 24];
           I64[Hp - 8] = sat_sgaDt_info;
           P64[Hp] = _sgaDi::P64;
           R2 = _sgaDh::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDu_info" {
     sat_sgaDu_info:
         const sat_sgaDu_entry;
         const 2;
         const 18;
 },
 sat_sgaDn_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcrH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcrI; else goto cgcrJ;
       cgcrI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcrJ: // global
           I64[Sp - 8] = block_cgcrF_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaDn_info" {
     sat_sgaDn_info:
         const sat_sgaDn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cgcrF() //  [R1]
         { []
         }
     {offset
       cgcrF: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcrF_info" {
     block_cgcrF_info:
         const _cgcrF;
         const 0;
         const 30;
 },
 sat_sgaDo_entry() //  [R1]
         { []
         }
     {offset
       cgcrN: // global
           _sgaDo::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgcrO; else goto cgcrP;
       cgcrP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgcrR; else goto cgcrQ;
       cgcrR: // global
           HpAlloc = 16;
           goto cgcrO;
       cgcrO: // global
           R1 = _sgaDo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcrQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaDo::P64;
           _sgaDg::P64 = P64[_sgaDo::P64 + 16];
           _sgaDi::P64 = P64[_sgaDo::P64 + 24];
           I64[Hp - 8] = sat_sgaDn_info;
           P64[Hp] = _sgaDi::P64;
           R2 = _sgaDg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDo_info" {
     sat_sgaDo_info:
         const sat_sgaDo_entry;
         const 2;
         const 18;
 },
 Data.Functor.Product.$fMonadFixProduct_$cmfix_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgcrT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgcrX; else goto cgcrW;
       cgcrX: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_$cmfix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcrW: // global
           I64[Hp - 80] = sat_sgaDu_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgaDo_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_$cmfix_info" {
     Data.Functor.Product.$fMonadFixProduct_$cmfix_info:
         const Data.Functor.Product.$fMonadFixProduct_$cmfix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.184014522 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure" {
     Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure:
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info;
         const 0;
 },
 sat_sgaDy_entry() //  [R1]
         { []
         }
     {offset
       cgcsM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcsN; else goto cgcsO;
       cgcsN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcsO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDy_info" {
     sat_sgaDy_info:
         const sat_sgaDy_entry;
         const 1;
         const 16;
 },
 sat_sgaDx_entry() //  [R1]
         { []
         }
     {offset
       cgcsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcsU; else goto cgcsV;
       cgcsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcsV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDx_info" {
     sat_sgaDx_info:
         const sat_sgaDx_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cgcsW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgct0; else goto cgcsZ;
       cgct0: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcsZ: // global
           I64[Hp - 40] = sat_sgaDy_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaDx_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info" {
     Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_info:
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const SgaPW_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.191880942 UTC

[section ""data" . Data.Functor.Product.$fMonadFixProduct_closure" {
     Data.Functor.Product.$fMonadFixProduct_closure:
         const Data.Functor.Product.$fMonadFixProduct_info;
         const 0;
 },
 sat_sgaDC_entry() //  [R1, R2]
         { []
         }
     {offset
       cgctq: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadFixProduct_$cmfix_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaDC_info" {
     sat_sgaDC_info:
         const sat_sgaDC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaDB_entry() //  [R1]
         { []
         }
     {offset
       cgctx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcty; else goto cgctz;
       cgcty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgctz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDB_info" {
     sat_sgaDB_info:
         const sat_sgaDB_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+552;
 },
 Data.Functor.Product.$fMonadFixProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgctB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgctF; else goto cgctE;
       cgctF: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadFixProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgctE: // global
           I64[Hp - 72] = sat_sgaDC_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sgaDB_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadFixProduct_info" {
     Data.Functor.Product.$fMonadFixProduct_info:
         const Data.Functor.Product.$fMonadFixProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.201111504 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info;
 },
 sat_sgaDP_entry() //  [R1]
         { []
         }
     {offset
       cgcug: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcuh; else goto cgcui;
       cgcuh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcui: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDP_info" {
     sat_sgaDP_info:
         const sat_sgaDP_entry;
         const 4;
         const 15;
 },
 sat_sgaDO_entry() //  [R1]
         { []
         }
     {offset
       cgcun: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcuo; else goto cgcup;
       cgcuo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcup: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDO_info" {
     sat_sgaDO_info:
         const sat_sgaDO_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cgcuq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcus; else goto cgcut;
       cgcus: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmzipWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcut: // global
           I64[Sp - 40] = block_cgcu2_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugcuz; else goto cgcu3;
       ugcuz: // global
           call _cgcu2(R1) args: 0, res: 0, upd: 0;
       cgcu3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmzipWith_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgcu2() //  [R1]
         { []
         }
     {offset
       cgcu2: // global
           I64[Sp - 8] = block_cgcu7_info;
           _sgaDJ::P64 = P64[R1 + 7];
           _sgaDK::P64 = P64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sgaDK::P64;
           P64[Sp + 32] = _sgaDJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcuy; else goto cgcu8;
       ugcuy: // global
           call _cgcu7(R1) args: 0, res: 0, upd: 0;
       cgcu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcu2_info" {
     block_cgcu2_info:
         const _cgcu2;
         const 4;
         const 30;
 },
 _cgcu7() //  [R1]
         { []
         }
     {offset
       cgcu7: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cgcux; else goto cgcuw;
       cgcux: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcuw: // global
           _sgaDM::P64 = P64[R1 + 7];
           _sgaDN::P64 = P64[R1 + 15];
           I64[Hp - 112] = sat_sgaDP_info;
           P64[Hp - 96] = P64[Sp + 24];
           _sgaDF::P64 = P64[Sp + 32];
           P64[Hp - 88] = _sgaDF::P64;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _sgaDN::P64;
           I64[Hp - 64] = sat_sgaDO_info;
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _sgaDF::P64;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _sgaDM::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 112;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcu7_info" {
     block_cgcu7_info:
         const _cgcu7;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.212956993 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info;
         const 0;
 },
 sat_sgaDT_entry() //  [R1]
         { []
         }
     {offset
       cgcvp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcvq; else goto cgcvr;
       cgcvq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcvr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDT_info" {
     sat_sgaDT_info:
         const sat_sgaDT_entry;
         const 1;
         const 16;
 },
 sat_sgaDS_entry() //  [R1]
         { []
         }
     {offset
       cgcvw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcvx; else goto cgcvy;
       cgcvx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcvy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaDS_info" {
     sat_sgaDS_info:
         const sat_sgaDS_entry;
         const 1;
         const 16;
 },
 Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cgcvz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcvD; else goto cgcvC;
       cgcvD: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcvC: // global
           I64[Hp - 40] = sat_sgaDT_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgaDS_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Product.$fMonadProduct_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const SgaPW_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.222386404 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmzip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmzip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmzip_info;
 },
 sat_sgaE5_entry() //  [R1]
         { []
         }
     {offset
       cgcwc: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcwd; else goto cgcwe;
       cgcwd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcwe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaE5_info" {
     sat_sgaE5_info:
         const sat_sgaE5_entry;
         const 3;
         const 15;
 },
 sat_sgaE4_entry() //  [R1]
         { []
         }
     {offset
       cgcwj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcwk; else goto cgcwl;
       cgcwk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcwl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Tuple.(,)_closure+2;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call Control.Monad.Zip.mzipWith_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaE4_info" {
     sat_sgaE4_info:
         const sat_sgaE4_entry;
         const 3;
         const 15;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmzip_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cgcwm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcwo; else goto cgcwp;
       cgcwo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmzip_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcwp: // global
           I64[Sp - 32] = block_cgcvY_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugcwv; else goto cgcvZ;
       ugcwv: // global
           call _cgcvY(R1) args: 0, res: 0, upd: 0;
       cgcvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmzip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmzip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmzip_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgcvY() //  [R1]
         { []
         }
     {offset
       cgcvY: // global
           I64[Sp - 8] = block_cgcw3_info;
           _sgaDZ::P64 = P64[R1 + 7];
           _sgaE0::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sgaE0::P64;
           P64[Sp + 24] = _sgaDZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcwu; else goto cgcw4;
       ugcwu: // global
           call _cgcw3(R1) args: 0, res: 0, upd: 0;
       cgcw4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcvY_info" {
     block_cgcvY_info:
         const _cgcvY;
         const 3;
         const 30;
 },
 _cgcw3() //  [R1]
         { []
         }
     {offset
       cgcw3: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgcwt; else goto cgcws;
       cgcwt: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcws: // global
           _sgaE2::P64 = P64[R1 + 7];
           _sgaE3::P64 = P64[R1 + 15];
           I64[Hp - 96] = sat_sgaE5_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _sgaE3::P64;
           I64[Hp - 56] = sat_sgaE4_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sgaE2::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcw3_info" {
     block_cgcw3_info:
         const _cgcw3;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.241955719 UTC

[section ""data" . Data.Functor.Product.$w$cmunzip_closure" {
     Data.Functor.Product.$w$cmunzip_closure:
         const Data.Functor.Product.$w$cmunzip_info;
 },
 $dMonad_sgaE9_entry() //  [R1]
         { []
         }
     {offset
       cgcxn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcxo; else goto cgcxp;
       cgcxo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcxp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonad_sgaE9_info" {
     $dMonad_sgaE9_info:
         const $dMonad_sgaE9_entry;
         const 1;
         const 16;
 },
 $dMonad1_sgaEa_entry() //  [R1]
         { []
         }
     {offset
       cgcxu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcxv; else goto cgcxw;
       cgcxv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcxw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Zip.$p1MonadZip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonad1_sgaEa_info" {
     $dMonad1_sgaEa_info:
         const $dMonad1_sgaEa_entry;
         const 1;
         const 16;
 },
 lvl9_sgaEG_entry() //  [R1]
         { []
         }
     {offset
       cgcxO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcxP; else goto cgcxQ;
       cgcxP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcxQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaEG_info" {
     lvl9_sgaEG_info:
         const lvl9_sgaEG_entry;
         const 1;
         const 16;
 },
 sat_sgaEM_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcxX: // global
           _sgaEH::P64 = R2;
           _sgaEM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcxY; else goto cgcxZ;
       cgcxZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcy1; else goto cgcy0;
       cgcy1: // global
           HpAlloc = 24;
           goto cgcxY;
       cgcxY: // global
           R2 = _sgaEH::P64;
           R1 = _sgaEM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcy0: // global
           _sgaEG::P64 = P64[_sgaEM::P64 + 7];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sgaEH::P64;
           R2 = _sgaEG::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEM_info" {
     sat_sgaEM_info:
         const sat_sgaEM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgaEN_entry() //  [R1]
         { []
         }
     {offset
       cgcy2: // global
           _sgaEN::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcy3; else goto cgcy4;
       cgcy4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgcy6; else goto cgcy5;
       cgcy6: // global
           HpAlloc = 40;
           goto cgcy3;
       cgcy3: // global
           R1 = _sgaEN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcy5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaEN::P64;
           _sgaEa::P64 = P64[_sgaEN::P64 + 16];
           _sgaEx::P64 = P64[_sgaEN::P64 + 24];
           I64[Hp - 32] = lvl9_sgaEG_info;
           P64[Hp - 16] = _sgaEa::P64;
           I64[Hp - 8] = sat_sgaEM_info;
           P64[Hp] = Hp - 32;
           R2 = _sgaEa::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaEx::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEN_info" {
     sat_sgaEN_info:
         const sat_sgaEN_entry;
         const 2;
         const 18;
 },
 lvl9_sgaEy_entry() //  [R1]
         { []
         }
     {offset
       cgcyf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcyg; else goto cgcyh;
       cgcyg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcyh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaEy_info" {
     lvl9_sgaEy_info:
         const lvl9_sgaEy_entry;
         const 1;
         const 16;
 },
 sat_sgaEE_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcyo: // global
           _sgaEz::P64 = R2;
           _sgaEE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcyp; else goto cgcyq;
       cgcyq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcys; else goto cgcyr;
       cgcys: // global
           HpAlloc = 24;
           goto cgcyp;
       cgcyp: // global
           R2 = _sgaEz::P64;
           R1 = _sgaEE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcyr: // global
           _sgaEy::P64 = P64[_sgaEE::P64 + 7];
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _sgaEz::P64;
           R2 = _sgaEy::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEE_info" {
     sat_sgaEE_info:
         const sat_sgaEE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgaEF_entry() //  [R1]
         { []
         }
     {offset
       cgcyt: // global
           _sgaEF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcyu; else goto cgcyv;
       cgcyv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgcyx; else goto cgcyw;
       cgcyx: // global
           HpAlloc = 40;
           goto cgcyu;
       cgcyu: // global
           R1 = _sgaEF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcyw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaEF::P64;
           _sgaE9::P64 = P64[_sgaEF::P64 + 16];
           _sgaEw::P64 = P64[_sgaEF::P64 + 24];
           I64[Hp - 32] = lvl9_sgaEy_info;
           P64[Hp - 16] = _sgaE9::P64;
           I64[Hp - 8] = sat_sgaEE_info;
           P64[Hp] = Hp - 32;
           R2 = _sgaE9::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaEw::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEF_info" {
     sat_sgaEF_info:
         const sat_sgaEF_entry;
         const 2;
         const 18;
 },
 sat_sgaEO_entry() //  [R1]
         { []
         }
     {offset
       cgcyy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcyA; else goto cgcyB;
       cgcyA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgcxB_info;
           _sgaE9::P64 = P64[R1 + 24];
           _sgaEa::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sgaE9::P64;
           P64[Sp - 24] = _sgaEa::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugcyF; else goto cgcxC;
       ugcyF: // global
           call _cgcxB(R1) args: 0, res: 0, upd: 0;
       cgcxC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEO_info" {
     sat_sgaEO_info:
         const sat_sgaEO_entry;
         const 3;
         const 15;
 },
 _cgcxB() //  [R1]
         { []
         }
     {offset
       cgcxB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgcyE; else goto cgcyD;
       cgcyE: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgcyD: // global
           _sgaEw::P64 = P64[R1 + 7];
           _sgaEx::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgaEN_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sgaEx::P64;
           I64[Hp - 48] = sat_sgaEF_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sgaEw::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgcxB_info" {
     block_cgcxB_info:
         const _cgcxB;
         const 2;
         const 30;
 },
 lvl9_sgaEm_entry() //  [R1]
         { []
         }
     {offset
       cgcyX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcyY; else goto cgcyZ;
       cgcyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcyZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaEm_info" {
     lvl9_sgaEm_info:
         const lvl9_sgaEm_entry;
         const 1;
         const 16;
 },
 sat_sgaEs_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcz6: // global
           _sgaEn::P64 = R2;
           _sgaEs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcz7; else goto cgcz8;
       cgcz8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcza; else goto cgcz9;
       cgcza: // global
           HpAlloc = 24;
           goto cgcz7;
       cgcz7: // global
           R2 = _sgaEn::P64;
           R1 = _sgaEs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcz9: // global
           _sgaEm::P64 = P64[_sgaEs::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgaEn::P64;
           R2 = _sgaEm::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEs_info" {
     sat_sgaEs_info:
         const sat_sgaEs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgaEt_entry() //  [R1]
         { []
         }
     {offset
       cgczb: // global
           _sgaEt::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgczc; else goto cgczd;
       cgczd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgczf; else goto cgcze;
       cgczf: // global
           HpAlloc = 40;
           goto cgczc;
       cgczc: // global
           R1 = _sgaEt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcze: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaEt::P64;
           _sgaEa::P64 = P64[_sgaEt::P64 + 16];
           _sgaEd::P64 = P64[_sgaEt::P64 + 24];
           I64[Hp - 32] = lvl9_sgaEm_info;
           P64[Hp - 16] = _sgaEa::P64;
           I64[Hp - 8] = sat_sgaEs_info;
           P64[Hp] = Hp - 32;
           R2 = _sgaEa::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaEd::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEt_info" {
     sat_sgaEt_info:
         const sat_sgaEt_entry;
         const 2;
         const 18;
 },
 lvl9_sgaEe_entry() //  [R1]
         { []
         }
     {offset
       cgczo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgczp; else goto cgczq;
       cgczp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgczq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaEe_info" {
     lvl9_sgaEe_info:
         const lvl9_sgaEe_entry;
         const 1;
         const 16;
 },
 sat_sgaEk_entry() //  [R1, R2]
         { []
         }
     {offset
       cgczx: // global
           _sgaEf::P64 = R2;
           _sgaEk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgczy; else goto cgczz;
       cgczz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgczB; else goto cgczA;
       cgczB: // global
           HpAlloc = 24;
           goto cgczy;
       cgczy: // global
           R2 = _sgaEf::P64;
           R1 = _sgaEk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgczA: // global
           _sgaEe::P64 = P64[_sgaEk::P64 + 7];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sgaEf::P64;
           R2 = _sgaEe::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEk_info" {
     sat_sgaEk_info:
         const sat_sgaEk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgaEl_entry() //  [R1]
         { []
         }
     {offset
       cgczC: // global
           _sgaEl::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgczD; else goto cgczE;
       cgczE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgczG; else goto cgczF;
       cgczG: // global
           HpAlloc = 40;
           goto cgczD;
       cgczD: // global
           R1 = _sgaEl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgczF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaEl::P64;
           _sgaE9::P64 = P64[_sgaEl::P64 + 16];
           _sgaEc::P64 = P64[_sgaEl::P64 + 24];
           I64[Hp - 32] = lvl9_sgaEe_info;
           P64[Hp - 16] = _sgaE9::P64;
           I64[Hp - 8] = sat_sgaEk_info;
           P64[Hp] = Hp - 32;
           R2 = _sgaE9::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaEc::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEl_info" {
     sat_sgaEl_info:
         const sat_sgaEl_entry;
         const 2;
         const 18;
 },
 sat_sgaEu_entry() //  [R1]
         { []
         }
     {offset
       cgczH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgczJ; else goto cgczK;
       cgczJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgczK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgcyK_info;
           _sgaE9::P64 = P64[R1 + 24];
           _sgaEa::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sgaE9::P64;
           P64[Sp - 24] = _sgaEa::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugczO; else goto cgcyL;
       ugczO: // global
           call _cgcyK(R1) args: 0, res: 0, upd: 0;
       cgcyL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEu_info" {
     sat_sgaEu_info:
         const sat_sgaEu_entry;
         const 3;
         const 15;
 },
 _cgcyK() //  [R1]
         { []
         }
     {offset
       cgcyK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgczN; else goto cgczM;
       cgczN: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgczM: // global
           _sgaEc::P64 = P64[R1 + 7];
           _sgaEd::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgaEt_info;
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = _sgaEd::P64;
           I64[Hp - 48] = sat_sgaEl_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sgaEc::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgcyK_info" {
     block_cgcyK_info:
         const _cgcyK;
         const 2;
         const 30;
 },
 Data.Functor.Product.$w$cmunzip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgczP: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgczT; else goto cgczS;
       cgczT: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cmunzip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgczS: // global
           I64[Hp - 120] = $dMonad_sgaE9_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dMonad1_sgaEa_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = sat_sgaEO_info;
           P64[Hp - 56] = R4;
           _cgcxj::P64 = Hp - 120;
           P64[Hp - 48] = _cgcxj::P64;
           _cgcxq::P64 = Hp - 96;
           P64[Hp - 40] = _cgcxq::P64;
           I64[Hp - 32] = sat_sgaEu_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cgcxj::P64;
           P64[Hp] = _cgcxq::P64;
           R2 = Hp - 72;
           R1 = Hp - 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cmunzip_info" {
     Data.Functor.Product.$w$cmunzip_info:
         const Data.Functor.Product.$w$cmunzip_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.29520018 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure" {
     Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure:
         const Data.Functor.Product.$fMonadZipProduct_$cmunzip_info;
 },
 Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cgcCk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcCl; else goto cgcCm;
       cgcCl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_$cmunzip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcCm: // global
           I64[Sp - 8] = block_cgcCh_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Functor.Product.$w$cmunzip_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_$cmunzip_info" {
     Data.Functor.Product.$fMonadZipProduct_$cmunzip_info:
         const Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cgcCh() //  [R1, R2]
         { []
         }
     {offset
       cgcCh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcCp; else goto cgcCo;
       cgcCp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cgcCo: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcCh_info" {
     block_cgcCh_info:
         const _cgcCh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.302170304 UTC

[section ""data" . Data.Functor.Product.$fMonadZipProduct_closure" {
     Data.Functor.Product.$fMonadZipProduct_closure:
         const Data.Functor.Product.$fMonadZipProduct_info;
         const 0;
 },
 sat_sgaF0_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcCK: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Product.$fMonadZipProduct_$cmunzip_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaF0_info" {
     sat_sgaF0_info:
         const sat_sgaF0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaEZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcCS: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$fMonadZipProduct_$cmzipWith_entry(R6,
                                                                        R5,
                                                                        R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEZ_info" {
     sat_sgaEZ_info:
         const sat_sgaEZ_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaEY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgcD0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Product.$fMonadZipProduct_$cmzip_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaEY_info" {
     sat_sgaEY_info:
         const sat_sgaEY_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgaEX_entry() //  [R1]
         { []
         }
     {offset
       cgcD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcD8; else goto cgcD9;
       cgcD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaEX_info" {
     sat_sgaEX_info:
         const sat_sgaEX_entry;
         const 2;
         const 4294967314;
         const SgaPW_srt+568;
 },
 Data.Functor.Product.$fMonadZipProduct_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcDb: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgcDf; else goto cgcDe;
       cgcDf: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fMonadZipProduct_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcDe: // global
           I64[Hp - 136] = sat_sgaF0_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgaEZ_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sgaEY_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = sat_sgaEX_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Control.Monad.Zip.C:MonadZip_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 86;
           P64[Hp - 8] = Hp - 109;
           P64[Hp] = Hp - 135;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fMonadZipProduct_info" {
     Data.Functor.Product.$fMonadZipProduct_info:
         const Data.Functor.Product.$fMonadZipProduct_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SgaPW_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.312870967 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product_$cto1_closure" {
     Data.Functor.Product.$fGeneric1Product_$cto1_closure:
         const Data.Functor.Product.$fGeneric1Product_$cto1_info;
 },
 Data.Functor.Product.$fGeneric1Product_$cto1_entry() //  [R2]
         { []
         }
     {offset
       cgcDO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcDS; else goto cgcDT;
       cgcDS: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGeneric1Product_$cto1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcDT: // global
           I64[Sp - 8] = block_cgcDM_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGeneric1Product_$cto1_info" {
     Data.Functor.Product.$fGeneric1Product_$cto1_info:
         const Data.Functor.Product.$fGeneric1Product_$cto1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgcDM() //  [R1]
         { []
         }
     {offset
       cgcDM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcDW; else goto cgcDV;
       cgcDW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcDV: // global
           _sgaF3::P64 = P64[R1 + 7];
           _sgaF4::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sgaF3::P64;
           P64[Hp] = _sgaF4::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcDM_info" {
     block_cgcDM_info:
         const _cgcDM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.318425305 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product1_closure" {
     Data.Functor.Product.$fGeneric1Product1_closure:
         const Data.Functor.Product.$fGeneric1Product1_info;
 },
 Data.Functor.Product.$fGeneric1Product1_entry() //  [R2]
         { []
         }
     {offset
       cgcEf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcEj; else goto cgcEk;
       cgcEj: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGeneric1Product1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcEk: // global
           I64[Sp - 8] = block_cgcEc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcEo; else goto cgcEd;
       ugcEo: // global
           call _cgcEc(R1) args: 0, res: 0, upd: 0;
       cgcEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGeneric1Product1_info" {
     Data.Functor.Product.$fGeneric1Product1_info:
         const Data.Functor.Product.$fGeneric1Product1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgcEc() //  [R1]
         { []
         }
     {offset
       cgcEc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcEn; else goto cgcEm;
       cgcEn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcEm: // global
           _sgaF7::P64 = P64[R1 + 7];
           _sgaF8::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgaF7::P64;
           P64[Hp] = _sgaF8::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcEc_info" {
     block_cgcEc_info:
         const _cgcEc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.324175954 UTC

[section ""data" . Data.Functor.Product.$fGeneric1Product_closure" {
     Data.Functor.Product.$fGeneric1Product_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Product.$fGeneric1Product1_closure+1;
         const Data.Functor.Product.$fGeneric1Product_$cto1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.326563459 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct_$cto_closure" {
     Data.Functor.Product.$fGenericProduct_$cto_closure:
         const Data.Functor.Product.$fGenericProduct_$cto_info;
 },
 Data.Functor.Product.$fGenericProduct_$cto_entry() //  [R2]
         { []
         }
     {offset
       cgcEI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcEM; else goto cgcEN;
       cgcEM: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGenericProduct_$cto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcEN: // global
           I64[Sp - 8] = block_cgcEG_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGenericProduct_$cto_info" {
     Data.Functor.Product.$fGenericProduct_$cto_info:
         const Data.Functor.Product.$fGenericProduct_$cto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgcEG() //  [R1]
         { []
         }
     {offset
       cgcEG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcEQ; else goto cgcEP;
       cgcEQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcEP: // global
           _sgaFb::P64 = P64[R1 + 7];
           _sgaFc::P64 = P64[R1 + 15];
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = _sgaFb::P64;
           P64[Hp] = _sgaFc::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcEG_info" {
     block_cgcEG_info:
         const _cgcEG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.33214148 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct1_closure" {
     Data.Functor.Product.$fGenericProduct1_closure:
         const Data.Functor.Product.$fGenericProduct1_info;
 },
 Data.Functor.Product.$fGenericProduct1_entry() //  [R2]
         { []
         }
     {offset
       cgcF9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcFd; else goto cgcFe;
       cgcFd: // global
           R2 = R2;
           R1 = Data.Functor.Product.$fGenericProduct1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcFe: // global
           I64[Sp - 8] = block_cgcF6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcFi; else goto cgcF7;
       ugcFi: // global
           call _cgcF6(R1) args: 0, res: 0, upd: 0;
       cgcF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fGenericProduct1_info" {
     Data.Functor.Product.$fGenericProduct1_info:
         const Data.Functor.Product.$fGenericProduct1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cgcF6() //  [R1]
         { []
         }
     {offset
       cgcF6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcFh; else goto cgcFg;
       cgcFh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcFg: // global
           _sgaFf::P64 = P64[R1 + 7];
           _sgaFg::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = _sgaFf::P64;
           P64[Hp] = _sgaFg::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcF6_info" {
     block_cgcF6_info:
         const _cgcF6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.337148132 UTC

[section ""data" . Data.Functor.Product.$fGenericProduct_closure" {
     Data.Functor.Product.$fGenericProduct_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Product.$fGenericProduct1_closure+1;
         const Data.Functor.Product.$fGenericProduct_$cto_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.341235282 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgfoldl_closure" {
     Data.Functor.Product.$fDataProduct_$cgfoldl_closure:
         const Data.Functor.Product.$fDataProduct_$cgfoldl_info;
 },
 Data.Functor.Product.$fDataProduct_$cgfoldl_slow() //  [R1]
         { []
         }
     {offset
       cgcFx: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgfoldl_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sgaFt_entry() //  [R1]
         { []
         }
     {offset
       cgcFO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcFP; else goto cgcFQ;
       cgcFP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcFQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Product.Pair_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaFt_info" {
     sat_sgaFt_info:
         const sat_sgaFt_entry;
         const 1;
         const 16;
 },
 sat_sgaFu_entry() //  [R1]
         { []
         }
     {offset
       cgcFR: // global
           _sgaFu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcFS; else goto cgcFT;
       cgcFT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcFV; else goto cgcFU;
       cgcFV: // global
           HpAlloc = 24;
           goto cgcFS;
       cgcFS: // global
           R1 = _sgaFu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcFU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaFu::P64;
           _sgaFl::P64 = P64[_sgaFu::P64 + 16];
           _sgaFn::P64 = P64[_sgaFu::P64 + 24];
           _sgaFo::P64 = P64[_sgaFu::P64 + 32];
           _sgaFr::P64 = P64[_sgaFu::P64 + 40];
           I64[Hp - 16] = sat_sgaFt_info;
           P64[Hp] = _sgaFo::P64;
           R4 = _sgaFr::P64;
           R3 = Hp - 16;
           R2 = _sgaFl::P64;
           R1 = _sgaFn::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaFu_info" {
     sat_sgaFu_info:
         const sat_sgaFu_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$fDataProduct_$cgfoldl_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgcFW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcFX; else goto cgcFY;
       cgcFX: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgfoldl_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cgcFY: // global
           I64[Sp - 8] = block_cgcFB_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcG2; else goto cgcFC;
       ugcG2: // global
           call _cgcFB(R1) args: 0, res: 0, upd: 0;
       cgcFC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgfoldl_info" {
     Data.Functor.Product.$fDataProduct_$cgfoldl_info:
         const Data.Functor.Product.$fDataProduct_$cgfoldl_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgfoldl_slow;
 },
 _cgcFB() //  [R1]
         { []
         }
     {offset
       cgcFB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcG1; else goto cgcG0;
       cgcG1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcG0: // global
           _sgaFr::P64 = P64[R1 + 7];
           _sgaFs::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_sgaFu_info;
           P64[Hp - 24] = P64[Sp + 32];
           _sgaFn::P64 = P64[Sp + 16];
           P64[Hp - 16] = _sgaFn::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sgaFr::P64;
           R4 = _sgaFs::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 8];
           R1 = _sgaFn::P64;
           Sp = Sp + 40;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcFB_info" {
     block_cgcFB_info:
         const _cgcFB;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.351117671 UTC

[section ""cstring" . Data.Functor.Product.$fDataProduct6_bytes" {
     Data.Functor.Product.$fDataProduct6_bytes:
         I8[] [80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.35357036 UTC

[section ""data" . Data.Functor.Product.$fDataProduct5_closure" {
     Data.Functor.Product.$fDataProduct5_closure:
         const Data.Functor.Product.$fDataProduct5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Product.$fDataProduct5_entry() //  [R1]
         { []
         }
     {offset
       cgcGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcGB; else goto cgcGC;
       cgcGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcGC: // global
           (_cgcGx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgcGx::I64 == 0) goto cgcGz; else goto cgcGy;
       cgcGz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgcGy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgcGx::I64;
           R2 = Data.Functor.Product.$fDataProduct6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct5_info" {
     Data.Functor.Product.$fDataProduct5_info:
         const Data.Functor.Product.$fDataProduct5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.360231716 UTC

[section ""data" . go61_rg5o2_closure" {
     go61_rg5o2_closure:
         const go61_rg5o2_info;
         const 0;
 },
 go61_rg5o2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgcGW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcGX; else goto ugcHA;
       cgcGX: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rg5o2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ugcHA: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgcGM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rg5o2_info" {
     go61_rg5o2_info:
         const go61_rg5o2_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SgaPW_srt+584;
 },
 _cgcGM() //  []
         { []
         }
     {offset
       cgcGM: // global
           _sgaFv::P64 = P64[Sp];
           I64[Sp] = block_cgcGP_info;
           R1 = _sgaFv::P64;
           if (R1 & 7 != 0) goto ugcHE; else goto cgcGQ;
       ugcHE: // global
           call _cgcGP(R1) args: 0, res: 0, upd: 0;
       cgcGQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgcGP() //  [R1]
         { []
         }
     {offset
       cgcGP: // global
           if (R1 & 7 == 1) goto ugcHB; else goto cgcGU;
       ugcHB: // global
           Sp = Sp + 16;
           call _cgcHc() args: 0, res: 0, upd: 0;
       cgcGU: // global
           I64[Sp - 8] = block_cgcH4_info;
           _sgaFy::P64 = P64[R1 + 6];
           _sgaFz::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgaFz::P64;
           P64[Sp + 8] = _sgaFy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcHF; else goto cgcH6;
       ugcHF: // global
           call _cgcH4(R1) args: 0, res: 0, upd: 0;
       cgcH6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcGP_info" {
     block_cgcGP_info:
         const _cgcGP;
         const 1;
         const 21474836510;
         const SgaPW_srt+584;
 },
 _cgcH4() //  [R1]
         { []
         }
     {offset
       cgcH4: // global
           if (R1 & 7 == 1) goto ugcHC; else goto cgcHh;
       ugcHC: // global
           Sp = Sp + 24;
           call _cgcHc() args: 0, res: 0, upd: 0;
       cgcHh: // global
           I64[Sp - 8] = block_cgcHf_info;
           _sgaFB::P64 = P64[R1 + 6];
           _sgaFC::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgaFC::P64;
           P64[Sp + 16] = _sgaFB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcHI; else goto cgcHi;
       ugcHI: // global
           call _cgcHf(R1) args: 0, res: 0, upd: 0;
       cgcHi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcH4_info" {
     block_cgcH4_info:
         const _cgcH4;
         const 2;
         const 21474836510;
         const SgaPW_srt+584;
 },
 _cgcHc() //  []
         { []
         }
     {offset
       cgcHc: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cgcHf() //  [R1]
         { []
         }
     {offset
       cgcHf: // global
           I64[Sp] = block_cgcHm_info;
           R3 = Data.Functor.Product.$fRead1Product2_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcHf_info" {
     block_cgcHf_info:
         const _cgcHf;
         const 3;
         const 21474836510;
         const SgaPW_srt+584;
 },
 _cgcHm() //  [R1]
         { []
         }
     {offset
       cgcHm: // global
           if (R1 & 7 == 1) goto cgcHt; else goto cgcHx;
       cgcHt: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgcGM() args: 0, res: 0, upd: 0;
       cgcHx: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcHm_info" {
     block_cgcHm_info:
         const _cgcHm;
         const 3;
         const 21474836510;
         const SgaPW_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.372352422 UTC

[section ""data" . $cPair1_rg5o3_closure" {
     $cPair1_rg5o3_closure:
         const Data.Data.AlgConstr_con_info;
         const $cPair2_rg5o4_closure;
         const 0;
 },
 section ""data" . Data.Functor.Product.$fDataProduct4_closure" {
     Data.Functor.Product.$fDataProduct4_closure:
         const :_con_info;
         const Data.Functor.Product.$cPair_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Product.$fDataProduct3_closure" {
     Data.Functor.Product.$fDataProduct3_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Functor.Product.$fDataProduct4_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Product.$tProduct_closure" {
     Data.Functor.Product.$tProduct_closure:
         const Data.Data.DataType_con_info;
         const Data.Functor.Product.$fDataProduct5_closure;
         const Data.Functor.Product.$fDataProduct3_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Product.$cPair_closure" {
     Data.Functor.Product.$cPair_closure:
         const Data.Data.Constr_con_info;
         const $cPair1_rg5o3_closure+1;
         const Data.Functor.Product.$fRead1Product2_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Product.$tProduct_closure+1;
         const 0;
 },
 section ""data" . $cPair2_rg5o4_closure" {
     $cPair2_rg5o4_closure:
         const $cPair2_rg5o4_info;
         const 0;
         const 0;
         const 0;
 },
 $cPair2_rg5o4_entry() //  [R1]
         { []
         }
     {offset
       cgcIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcIu; else goto cgcIv;
       cgcIu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcIv: // global
           (_cgcIq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgcIq::I64 == 0) goto cgcIs; else goto cgcIr;
       cgcIs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgcIr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgcIq::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Functor.Product.$fDataProduct4_closure+2;
           Sp = Sp - 16;
           call go61_rg5o2_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cPair2_rg5o4_info" {
     $cPair2_rg5o4_info:
         const $cPair2_rg5o4_entry;
         const 0;
         const 55834574869;
         const SgaPW_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.379319538 UTC

[section ""cstring" . Data.Functor.Product.$trModule4_bytes" {
     Data.Functor.Product.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.381046856 UTC

[section ""data" . Data.Functor.Product.$trModule3_closure" {
     Data.Functor.Product.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.382793627 UTC

[section ""cstring" . Data.Functor.Product.$trModule2_bytes" {
     Data.Functor.Product.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,80,114,111,100,117,99,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.384447697 UTC

[section ""data" . Data.Functor.Product.$trModule1_closure" {
     Data.Functor.Product.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.386425299 UTC

[section ""data" . Data.Functor.Product.$trModule_closure" {
     Data.Functor.Product.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Product.$trModule3_closure+1;
         const Data.Functor.Product.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.388077082 UTC

[section ""data" . $krep_rg5o5_closure" {
     $krep_rg5o5_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.390354936 UTC

[section ""data" . $krep1_rg5o6_closure" {
     $krep1_rg5o6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rg5o5_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.392084522 UTC

[section ""data" . $krep2_rg5o7_closure" {
     $krep2_rg5o7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rg5o6_closure+4;
         const $krep1_rg5o6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.393801161 UTC

[section ""data" . Data.Functor.Product.$fDataProduct8_closure" {
     Data.Functor.Product.$fDataProduct8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rg5o6_closure+4;
         const $krep2_rg5o7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.395494391 UTC

[section ""data" . $krep3_rg5o8_closure" {
     $krep3_rg5o8_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.39714645 UTC

[section ""data" . $krep4_rg5o9_closure" {
     $krep4_rg5o9_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.399097406 UTC

[section ""data" . $krep5_rg5oa_closure" {
     $krep5_rg5oa_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.400622872 UTC

[section ""data" . $krep6_rg5ob_closure" {
     $krep6_rg5ob_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep4_rg5o9_closure+2;
         const $krep5_rg5oa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.402280021 UTC

[section ""data" . $krep7_rg5oc_closure" {
     $krep7_rg5oc_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep3_rg5o8_closure+2;
         const $krep5_rg5oa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.403939894 UTC

[section ""data" . Data.Functor.Product.$fDataProduct9_closure" {
     Data.Functor.Product.$fDataProduct9_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$fDataProduct6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.405711646 UTC

[section ""data" . Data.Functor.Product.$tcProduct_closure" {
     Data.Functor.Product.$tcProduct_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Product.$trModule_closure+1;
         const Data.Functor.Product.$fDataProduct9_closure+1;
         const Data.Functor.Product.$fDataProduct8_closure+4;
         const 9904636435990105341;
         const 16069493191308336164;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.407465495 UTC

[section ""data" . $krep8_rg5od_closure" {
     $krep8_rg5od_closure:
         const :_con_info;
         const $krep5_rg5oa_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.409170331 UTC

[section ""data" . $krep9_rg5oe_closure" {
     $krep9_rg5oe_closure:
         const :_con_info;
         const $krep3_rg5o8_closure+2;
         const $krep8_rg5od_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.410886742 UTC

[section ""data" . $krep10_rg5of_closure" {
     $krep10_rg5of_closure:
         const :_con_info;
         const $krep4_rg5o9_closure+2;
         const $krep9_rg5oe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.412530455 UTC

[section ""data" . $krep11_rg5og_closure" {
     $krep11_rg5og_closure:
         const :_con_info;
         const $krep_rg5o5_closure+2;
         const $krep10_rg5of_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.414658555 UTC

[section ""data" . $krep12_rg5oh_closure" {
     $krep12_rg5oh_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Product.$tcProduct_closure+1;
         const $krep11_rg5og_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.416486607 UTC

[section ""data" . $krep13_rg5oi_closure" {
     $krep13_rg5oi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rg5oc_closure+3;
         const $krep12_rg5oh_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.418115535 UTC

[section ""data" . Data.Functor.Product.$tc'Pair1_closure" {
     Data.Functor.Product.$tc'Pair1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rg5ob_closure+3;
         const $krep13_rg5oi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.419826552 UTC

[section ""cstring" . Data.Functor.Product.$tc'Pair3_bytes" {
     Data.Functor.Product.$tc'Pair3_bytes:
         I8[] [39,80,97,105,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.42186829 UTC

[section ""data" . Data.Functor.Product.$tc'Pair2_closure" {
     Data.Functor.Product.$tc'Pair2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Product.$tc'Pair3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.423498354 UTC

[section ""data" . Data.Functor.Product.$tc'Pair_closure" {
     Data.Functor.Product.$tc'Pair_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Product.$trModule_closure+1;
         const Data.Functor.Product.$tc'Pair2_closure+1;
         const Data.Functor.Product.$tc'Pair1_closure+4;
         const 11374113252541295849;
         const 18011678063065699923;
         const 4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.427350566 UTC

[section ""data" . Data.Functor.Product.$w$cp1Data_closure" {
     Data.Functor.Product.$w$cp1Data_closure:
         const Data.Functor.Product.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Product.$w$cp1Data_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgcJm: // global
           _sgaFN::P64 = R5;
           _sgaFM::P64 = R4;
           _sgaFL::P64 = R3;
           _sgaFK::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cgcJq; else goto cgcJr;
       cgcJr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgcJt; else goto cgcJs;
       cgcJt: // global
           HpAlloc = 40;
           goto cgcJq;
       cgcJq: // global
           R5 = _sgaFN::P64;
           R4 = _sgaFM::P64;
           R3 = _sgaFL::P64;
           R2 = _sgaFK::P64;
           R1 = Data.Functor.Product.$w$cp1Data_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcJs: // global
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sgaFN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = block_cgcJf_info;
           R6 = 1;
           R5 = Data.Functor.Product.$fDataProduct9_closure+1;
           R4 = Data.Functor.Product.$trModule_closure+1;
           R3 = 16069493191308336164;
           R2 = 9904636435990105341;
           P64[Sp - 48] = Data.Functor.Product.$fDataProduct8_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sgaFK::P64;
           P64[Sp - 16] = _sgaFL::P64;
           P64[Sp - 8] = _sgaFM::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cp1Data_info" {
     Data.Functor.Product.$w$cp1Data_info:
         const Data.Functor.Product.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SgaPW_srt+624;
 },
 _cgcJf() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgcJf: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgcJg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgcJf_info" {
     block_cgcJf_info:
         const _cgcJf;
         const 3;
         const 4294967326;
         const SgaPW_srt+624;
 },
 _cgcJg() //  []
         { []
         }
     {offset
       cgcJg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgcJw; else goto cgcJv;
       cgcJw: // global
           HpAlloc = 48;
           I64[Sp] = block_cgcJg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgcJv: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cgcJk_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcJg_info" {
     block_cgcJg_info:
         const _cgcJg;
         const 1096;
         const 4294967326;
         const SgaPW_srt+624;
 },
 _cgcJk() //  [R1]
         { []
         }
     {offset
       cgcJk: // global
           I64[Sp] = block_cgcJp_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcJk_info" {
     block_cgcJk_info:
         const _cgcJk;
         const 131;
         const 4294967326;
         const SgaPW_srt+624;
 },
 _cgcJp() //  [R1]
         { []
         }
     {offset
       cgcJp: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcJp_info" {
     block_cgcJp_info:
         const _cgcJp;
         const 387;
         const 4294967326;
         const SgaPW_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.438361764 UTC

[section ""data" . Data.Functor.Product.$fDataProduct7_closure" {
     Data.Functor.Product.$fDataProduct7_closure:
         const Data.Functor.Product.$fDataProduct7_info;
         const 0;
 },
 Data.Functor.Product.$fDataProduct7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgcKg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Product.$w$cp1Data_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct7_info" {
     Data.Functor.Product.$fDataProduct7_info:
         const Data.Functor.Product.$fDataProduct7_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SgaPW_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.441513395 UTC

[section ""data" . Data.Functor.Product.$fDataProduct1_closure" {
     Data.Functor.Product.$fDataProduct1_closure:
         const (,)_con_info;
         const Data.Functor.Product.Pair_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.451885649 UTC

[section ""data" . Data.Functor.Product.$w$cgmapMp_closure" {
     Data.Functor.Product.$w$cgmapMp_closure:
         const Data.Functor.Product.$w$cgmapMp_info;
 },
 lvl9_sgaGa_entry() //  [R1]
         { []
         }
     {offset
       cgcKw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcKx; else goto cgcKy;
       cgcKx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcKy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaGa_info" {
     lvl9_sgaGa_info:
         const lvl9_sgaGa_entry;
         const 1;
         const 16;
 },
 sat_sgaGF_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcKL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcKM; else goto cgcKN;
       cgcKM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcKN: // global
           I64[Sp - 24] = block_cgcKI_info;
           _sgaGa::P64 = P64[R1 + 7];
           _sgaGb::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgaGa::P64;
           P64[Sp - 8] = _sgaGb::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugcL5; else goto cgcKJ;
       ugcL5: // global
           call _cgcKI(R1) args: 0, res: 0, upd: 0;
       cgcKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaGF_info" {
     sat_sgaGF_info:
         const sat_sgaGF_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgcKI() //  [R1]
         { []
         }
     {offset
       cgcKI: // global
           I64[Sp - 8] = block_cgcKQ_info;
           _sgaGC::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgaGC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcL4; else goto cgcKS;
       ugcL4: // global
           call _cgcKQ(R1) args: 0, res: 0, upd: 0;
       cgcKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcKI_info" {
     block_cgcKI_info:
         const _cgcKI;
         const 2;
         const 30;
 },
 _cgcKQ() //  [R1]
         { []
         }
     {offset
       cgcKQ: // global
           if (R1 & 7 == 1) goto cgcKY; else goto cgcL2;
       cgcKY: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgcL2: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcKQ_info" {
     block_cgcKQ_info:
         const _cgcKQ;
         const 3;
         const 30;
 },
 sat_sgaGv_entry() //  [R1]
         { []
         }
     {offset
       cgcLB: // global
           _sgaGv::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgcLC; else goto cgcLD;
       cgcLD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgcLF; else goto cgcLE;
       cgcLF: // global
           HpAlloc = 56;
           goto cgcLC;
       cgcLC: // global
           R1 = _sgaGv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcLE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaGv::P64;
           _sgaGb::P64 = P64[_sgaGv::P64 + 16];
           _sgaGi::P64 = P64[_sgaGv::P64 + 24];
           _sgaGm::P64 = P64[_sgaGv::P64 + 32];
           _sgaGn::P64 = P64[_sgaGv::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgaGm::P64;
           P64[Hp - 24] = _sgaGi::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgaGn::P64;
           R2 = _sgaGb::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaGv_info" {
     sat_sgaGv_info:
         const sat_sgaGv_entry;
         const 4;
         const 15;
 },
 sat_sgaGr_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcLR: // global
           _sgaGo::P64 = R2;
           _sgaGr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcLS; else goto cgcLT;
       cgcLT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgcLV; else goto cgcLU;
       cgcLV: // global
           HpAlloc = 56;
           goto cgcLS;
       cgcLS: // global
           R2 = _sgaGo::P64;
           R1 = _sgaGr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcLU: // global
           _sgaGb::P64 = P64[_sgaGr::P64 + 7];
           _sgaGm::P64 = P64[_sgaGr::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgaGm::P64;
           P64[Hp - 24] = _sgaGo::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgaGb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaGr_info" {
     sat_sgaGr_info:
         const sat_sgaGr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaGs_entry() //  [R1]
         { []
         }
     {offset
       cgcLW: // global
           _sgaGs::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcLX; else goto cgcLY;
       cgcLY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcM0; else goto cgcLZ;
       cgcM0: // global
           HpAlloc = 24;
           goto cgcLX;
       cgcLX: // global
           R1 = _sgaGs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcLZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaGs::P64;
           _sgaGb::P64 = P64[_sgaGs::P64 + 16];
           _sgaGj::P64 = P64[_sgaGs::P64 + 24];
           _sgaGm::P64 = P64[_sgaGs::P64 + 32];
           I64[Hp - 16] = sat_sgaGr_info;
           P64[Hp - 8] = _sgaGb::P64;
           P64[Hp] = _sgaGm::P64;
           R2 = _sgaGb::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaGj::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaGs_info" {
     sat_sgaGs_info:
         const sat_sgaGs_entry;
         const 3;
         const 15;
 },
 sat_sgaGw_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcM1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgcM2; else goto cgcM3;
       cgcM2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcM3: // global
           I64[Sp - 40] = block_cgcLq_info;
           _sgaG7::P64 = P64[R1 + 7];
           _sgaGb::P64 = P64[R1 + 15];
           _sgaGi::P64 = P64[R1 + 23];
           _sgaGj::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgaG7::P64;
           P64[Sp - 24] = _sgaGb::P64;
           P64[Sp - 16] = _sgaGi::P64;
           P64[Sp - 8] = _sgaGj::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugcM7; else goto cgcLr;
       ugcM7: // global
           call _cgcLq(R1) args: 0, res: 0, upd: 0;
       cgcLr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaGw_info" {
     sat_sgaGw_info:
         const sat_sgaGw_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgcLq() //  [R1]
         { []
         }
     {offset
       cgcLq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgcM6; else goto cgcM5;
       cgcM6: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcM5: // global
           _sgaGm::P64 = P64[R1 + 7];
           _sgaGn::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgaGv_info;
           _sgaGb::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgaGb::P64;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _sgaGm::P64;
           P64[Hp - 40] = _sgaGn::P64;
           I64[Hp - 32] = sat_sgaGs_info;
           P64[Hp - 16] = _sgaGb::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgaGm::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcLq_info" {
     block_cgcLq_info:
         const _cgcLq;
         const 4;
         const 30;
 },
 k1_sgaGf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcM8: // global
           _sgaGi::P64 = R4;
           _sgaGh::P64 = R3;
           _sgaGg::P64 = R2;
           _sgaGf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgcM9; else goto cgcMa;
       cgcMa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgcMc; else goto cgcMb;
       cgcMc: // global
           HpAlloc = 80;
           goto cgcM9;
       cgcM9: // global
           R4 = _sgaGi::P64;
           R3 = _sgaGh::P64;
           R2 = _sgaGg::P64;
           R1 = _sgaGf::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcMb: // global
           _sgaG7::P64 = P64[_sgaGf::P64 + 5];
           _sgaG8::P64 = P64[_sgaGf::P64 + 13];
           _sgaGb::P64 = P64[_sgaGf::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgaG8::P64;
           P64[Hp - 48] = _sgaGg::P64;
           P64[Hp - 40] = _sgaGi::P64;
           I64[Hp - 32] = sat_sgaGw_info;
           P64[Hp - 24] = _sgaG7::P64;
           P64[Hp - 16] = _sgaGb::P64;
           P64[Hp - 8] = _sgaGi::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgaGb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgaGh::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sgaGf_info" {
     k1_sgaGf_info:
         const k1_sgaGf_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgaGx_entry() //  [R1]
         { []
         }
     {offset
       cgcMl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcMm; else goto cgcMn;
       cgcMm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcMn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.$fDataProduct1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaGx_info" {
     sat_sgaGx_info:
         const sat_sgaGx_entry;
         const 1;
         const 16;
 },
 sat_sgaGy_entry() //  [R1]
         { []
         }
     {offset
       cgcMo: // global
           _sgaGy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcMp; else goto cgcMq;
       cgcMq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcMs; else goto cgcMr;
       cgcMs: // global
           HpAlloc = 24;
           goto cgcMp;
       cgcMp: // global
           R1 = _sgaGy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcMr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaGy::P64;
           _sgaG5::P64 = P64[_sgaGy::P64 + 16];
           _sgaGb::P64 = P64[_sgaGy::P64 + 24];
           _sgaGd::P64 = P64[_sgaGy::P64 + 32];
           _sgaGf::P64 = P64[_sgaGy::P64 + 40];
           I64[Hp - 16] = sat_sgaGx_info;
           P64[Hp] = _sgaGb::P64;
           R4 = _sgaGd::P64;
           R3 = Hp - 16;
           R2 = _sgaG5::P64;
           R1 = _sgaGf::P64;
           Sp = Sp - 16;
           call k1_sgaGf_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaGy_info" {
     sat_sgaGy_info:
         const sat_sgaGy_entry;
         const 4;
         const 15;
 },
 sat_sgaGz_entry() //  [R1]
         { []
         }
     {offset
       cgcMt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgcMu; else goto cgcMv;
       cgcMu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcMv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cgcLa_info;
           _sgaG5::P64 = P64[R1 + 16];
           _sgaG6::P64 = P64[R1 + 24];
           _sgaG7::P64 = P64[R1 + 32];
           _sgaG8::P64 = P64[R1 + 40];
           _sgaGb::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sgaG5::P64;
           P64[Sp - 48] = _sgaG6::P64;
           P64[Sp - 40] = _sgaG7::P64;
           P64[Sp - 32] = _sgaG8::P64;
           P64[Sp - 24] = _sgaGb::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ugcMz; else goto cgcLb;
       ugcMz: // global
           call _cgcLa(R1) args: 0, res: 0, upd: 0;
       cgcLb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaGz_info" {
     sat_sgaGz_info:
         const sat_sgaGz_entry;
         const 6;
         const 15;
 },
 _cgcLa() //  [R1]
         { []
         }
     {offset
       cgcLa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgcMy; else goto cgcMx;
       cgcMy: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgcMx: // global
           _sgaGd::P64 = P64[R1 + 7];
           _sgaGe::P64 = P64[R1 + 15];
           I64[Hp - 72] = k1_sgaGf_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sgaGb::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sgaGb::P64;
           I64[Hp - 40] = sat_sgaGy_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sgaGb::P64;
           P64[Hp - 8] = _sgaGd::P64;
           _cgcLf::P64 = Hp - 69;
           P64[Hp] = _cgcLf::P64;
           R4 = _sgaGe::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cgcLf::P64;
           Sp = Sp + 48;
           call k1_sgaGf_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgcLa_info" {
     block_cgcLa_info:
         const _cgcLa;
         const 5;
         const 30;
 },
 Data.Functor.Product.$w$cgmapMp_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgcMA: // global
           _sgaG9::P64 = R6;
           _sgaG8::P64 = R5;
           _sgaG7::P64 = R4;
           _sgaG6::P64 = R3;
           _sgaG5::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgcMB; else goto cgcMC;
       cgcMC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcME; else goto cgcMD;
       cgcME: // global
           HpAlloc = 24;
           goto cgcMB;
       cgcMB: // global
           R6 = _sgaG9::P64;
           R5 = _sgaG8::P64;
           R4 = _sgaG7::P64;
           R3 = _sgaG6::P64;
           R2 = _sgaG5::P64;
           R1 = Data.Functor.Product.$w$cgmapMp_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcMD: // global
           I64[Hp - 16] = lvl9_sgaGa_info;
           P64[Hp] = _sgaG7::P64;
           I64[Sp - 56] = block_cgcKz_info;
           R2 = _sgaG7::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sgaG5::P64;
           P64[Sp - 32] = _sgaG6::P64;
           P64[Sp - 24] = _sgaG7::P64;
           P64[Sp - 16] = _sgaG8::P64;
           P64[Sp - 8] = _sgaG9::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapMp_info" {
     Data.Functor.Product.$w$cgmapMp_info:
         const Data.Functor.Product.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgcKz() //  [R1]
         { []
         }
     {offset
       cgcKz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgcMH; else goto cgcMG;
       cgcMH: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcMG: // global
           I64[Hp - 80] = sat_sgaGF_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sgaGz_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcKz_info" {
     block_cgcKz_info:
         const _cgcKz;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.484595845 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapMp_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapMp_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapMp_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cgcOM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapMp_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapMp_entry() //  [R6]
         { []
         }
     {offset
       cgcOQ: // global
           _sgaGK::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sgaGK::P64;
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapMp_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapMp_info" {
     Data.Functor.Product.$fDataProduct_$cgmapMp_info:
         const Data.Functor.Product.$fDataProduct_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.492215543 UTC

[section ""data" . Data.Functor.Product.$w$cgmapM_closure" {
     Data.Functor.Product.$w$cgmapM_closure:
         const Data.Functor.Product.$w$cgmapM_info;
 },
 sat_sgaH3_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcPk: // global
           _sgaH1::P64 = R2;
           _sgaH3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcPl; else goto cgcPm;
       cgcPm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgcPo; else goto cgcPn;
       cgcPo: // global
           HpAlloc = 32;
           goto cgcPl;
       cgcPl: // global
           R2 = _sgaH1::P64;
           R1 = _sgaH3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcPn: // global
           _sgaGR::P64 = P64[_sgaH3::P64 + 7];
           _sgaH0::P64 = P64[_sgaH3::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgaH0::P64;
           P64[Hp] = _sgaH1::P64;
           R2 = _sgaGR::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaH3_info" {
     sat_sgaH3_info:
         const sat_sgaH3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaH4_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcPp: // global
           _sgaH0::P64 = R2;
           _sgaH4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgcPq; else goto cgcPr;
       cgcPr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcPt; else goto cgcPs;
       cgcPt: // global
           HpAlloc = 24;
           goto cgcPq;
       cgcPq: // global
           R2 = _sgaH0::P64;
           R1 = _sgaH4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcPs: // global
           _sgaGR::P64 = P64[_sgaH4::P64 + 7];
           _sgaGZ::P64 = P64[_sgaH4::P64 + 15];
           I64[Hp - 16] = sat_sgaH3_info;
           P64[Hp - 8] = _sgaGR::P64;
           P64[Hp] = _sgaH0::P64;
           R2 = _sgaGR::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgaGZ::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaH4_info" {
     sat_sgaH4_info:
         const sat_sgaH4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 k1_sgaGV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcPu: // global
           _sgaGY::P64 = R4;
           _sgaGX::P64 = R3;
           _sgaGW::P64 = R2;
           _sgaGV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgcPv; else goto cgcPw;
       cgcPw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgcPy; else goto cgcPx;
       cgcPy: // global
           HpAlloc = 64;
           goto cgcPv;
       cgcPv: // global
           R4 = _sgaGY::P64;
           R3 = _sgaGX::P64;
           R2 = _sgaGW::P64;
           R1 = _sgaGV::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcPx: // global
           _sgaGR::P64 = P64[_sgaGV::P64 + 5];
           _sgaGS::P64 = P64[_sgaGV::P64 + 13];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgaGS::P64;
           P64[Hp - 32] = _sgaGW::P64;
           P64[Hp - 24] = _sgaGY::P64;
           I64[Hp - 16] = sat_sgaH4_info;
           P64[Hp - 8] = _sgaGR::P64;
           P64[Hp] = Hp - 56;
           R2 = _sgaGR::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgaGX::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sgaGV_info" {
     k1_sgaGV_info:
         const k1_sgaGV_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaH5_entry() //  [R1]
         { []
         }
     {offset
       cgcPH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcPI; else goto cgcPJ;
       cgcPI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcPJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.Pair_closure+2;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaH5_info" {
     sat_sgaH5_info:
         const sat_sgaH5_entry;
         const 1;
         const 16;
 },
 sat_sgaH6_entry() //  [R1]
         { []
         }
     {offset
       cgcPK: // global
           _sgaH6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcPL; else goto cgcPM;
       cgcPM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcPO; else goto cgcPN;
       cgcPO: // global
           HpAlloc = 24;
           goto cgcPL;
       cgcPL: // global
           R1 = _sgaH6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcPN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaH6::P64;
           _sgaGP::P64 = P64[_sgaH6::P64 + 16];
           _sgaGR::P64 = P64[_sgaH6::P64 + 24];
           _sgaGT::P64 = P64[_sgaH6::P64 + 32];
           _sgaGV::P64 = P64[_sgaH6::P64 + 40];
           I64[Hp - 16] = sat_sgaH5_info;
           P64[Hp] = _sgaGR::P64;
           R4 = _sgaGT::P64;
           R3 = Hp - 16;
           R2 = _sgaGP::P64;
           R1 = _sgaGV::P64;
           Sp = Sp - 16;
           call k1_sgaGV_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaH6_info" {
     sat_sgaH6_info:
         const sat_sgaH6_entry;
         const 4;
         const 15;
 },
 Data.Functor.Product.$w$cgmapM_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgcPP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgcPT; else goto cgcPS;
       cgcPT: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$w$cgmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgcPS: // global
           I64[Hp - 64] = k1_sgaGV_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = sat_sgaH6_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R6;
           _cgcP3::P64 = Hp - 61;
           P64[Hp] = _cgcP3::P64;
           R4 = P64[Sp];
           _sgaGQ::P64 = R3;
           R3 = Hp - 40;
           R2 = _sgaGQ::P64;
           R1 = _cgcP3::P64;
           Sp = Sp + 8;
           call k1_sgaGV_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapM_info" {
     Data.Functor.Product.$w$cgmapM_info:
         const Data.Functor.Product.$w$cgmapM_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.507055282 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapM_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapM_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapM_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cgcQB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapM_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cgcQI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcQJ; else goto cgcQK;
       cgcQJ: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapM_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cgcQK: // global
           I64[Sp - 8] = block_cgcQF_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcQO; else goto cgcQG;
       ugcQO: // global
           call _cgcQF(R1) args: 0, res: 0, upd: 0;
       cgcQG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapM_info" {
     Data.Functor.Product.$fDataProduct_$cgmapM_info:
         const Data.Functor.Product.$fDataProduct_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapM_slow;
 },
 _cgcQF() //  [R1]
         { []
         }
     {offset
       cgcQF: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapM_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcQF_info" {
     block_cgcQF_info:
         const _cgcQF;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.515009972 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapQi_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapQi_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapQi_info;
         const 0;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQi_slow() //  [R1]
         { []
         }
     {offset
       cgcR3: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQi_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapQi_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgcRa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcRe; else goto cgcRf;
       cgcRe: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapQi_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cgcRf: // global
           I64[Sp - 8] = block_cgcR7_info;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcRt; else goto cgcR8;
       ugcRt: // global
           call _cgcR7(R1) args: 0, res: 0, upd: 0;
       cgcR8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapQi_info" {
     Data.Functor.Product.$fDataProduct_$cgmapQi_info:
         const Data.Functor.Product.$fDataProduct_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 38654705664;
         const SgaPW_srt+648;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapQi_slow;
 },
 _cgcR7() //  [R1]
         { []
         }
     {offset
       cgcR7: // global
           I64[Sp - 8] = block_cgcRd_info;
           _sgaHt::P64 = P64[R1 + 7];
           _sgaHu::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgaHu::P64;
           P64[Sp + 16] = _sgaHt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcRs; else goto cgcRh;
       ugcRs: // global
           call _cgcRd(R1) args: 0, res: 0, upd: 0;
       cgcRh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcR7_info" {
     block_cgcR7_info:
         const _cgcR7;
         const 4;
         const 4294967326;
         const SgaPW_srt+648;
 },
 _cgcRd() //  [R1]
         { []
         }
     {offset
       cgcRd: // global
           _sgaHq::P64 = P64[Sp + 32];
           _sgaHx::I64 = I64[R1 + 7];
           if (_sgaHx::I64 != 0) goto ugcRr; else goto cgcRp;
       ugcRr: // global
           if (_sgaHx::I64 != 1) goto cgcRo; else goto cgcRq;
       cgcRo: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgcRq: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           R1 = _sgaHq::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcRp: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 40];
           R1 = _sgaHq::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcRd_info" {
     block_cgcRd_info:
         const _cgcRd;
         const 5;
         const 4294967326;
         const SgaPW_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.525187578 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapQr_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapQr_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapQr_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQr_slow() //  [R1]
         { []
         }
     {offset
       cgcRM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQr_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sgaHN_entry() //  [R1]
         { []
         }
     {offset
       cgcS0: // global
           _sgaHN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcS1; else goto cgcS2;
       cgcS2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgcS4; else goto cgcS3;
       cgcS4: // global
           HpAlloc = 40;
           goto cgcS1;
       cgcS1: // global
           R1 = _sgaHN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcS3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaHN::P64;
           _sgaHD::P64 = P64[_sgaHN::P64 + 16];
           _sgaHE::P64 = P64[_sgaHN::P64 + 24];
           _sgaHF::P64 = P64[_sgaHN::P64 + 32];
           _sgaHG::P64 = P64[_sgaHN::P64 + 40];
           _sgaHK::P64 = P64[_sgaHN::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgaHG::P64;
           P64[Hp - 8] = _sgaHD::P64;
           P64[Hp] = _sgaHK::P64;
           R3 = _sgaHF::P64;
           R2 = Hp - 32;
           R1 = _sgaHE::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaHN_info" {
     sat_sgaHN_info:
         const sat_sgaHN_entry;
         const 5;
         const 15;
 },
 Data.Functor.Product.$fDataProduct_$cgmapQr_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgcS5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcS7; else goto cgcS8;
       cgcS7: // global
           R1 = Data.Functor.Product.$fDataProduct_$cgmapQr_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cgcS8: // global
           I64[Sp - 8] = block_cgcRQ_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcSc; else goto cgcRR;
       ugcSc: // global
           call _cgcRQ(R1) args: 0, res: 0, upd: 0;
       cgcRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapQr_info" {
     Data.Functor.Product.$fDataProduct_$cgmapQr_info:
         const Data.Functor.Product.$fDataProduct_$cgmapQr_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Product.$fDataProduct_$cgmapQr_slow;
 },
 _cgcRQ() //  [R1]
         { []
         }
     {offset
       cgcRQ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgcSb; else goto cgcSa;
       cgcSb: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcSa: // global
           _sgaHJ::P64 = P64[R1 + 7];
           _sgaHK::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_sgaHN_info;
           P64[Hp - 72] = P64[Sp + 8];
           _sgaHE::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sgaHE::P64;
           P64[Hp - 56] = P64[Sp + 24];
           _sgaHG::P64 = P64[Sp + 32];
           P64[Hp - 48] = _sgaHG::P64;
           P64[Hp - 40] = _sgaHK::P64;
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgaHG::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgaHJ::P64;
           R3 = Hp - 88;
           R2 = Hp - 32;
           R1 = _sgaHE::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcRQ_info" {
     block_cgcRQ_info:
         const _cgcRQ;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.535759949 UTC

[section ""data" . Data.Functor.Product.$fDataProduct2_closure" {
     Data.Functor.Product.$fDataProduct2_closure:
         const Data.Functor.Product.$fDataProduct2_info;
 },
 Data.Functor.Product.$fDataProduct2_slow() //  [R1]
         { []
         }
     {offset
       cgcSB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct2_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_sgaI2_entry() //  [R1]
         { []
         }
     {offset
       cgcSQ: // global
           _sgaI2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcSR; else goto cgcSS;
       cgcSS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgcSU; else goto cgcST;
       cgcSU: // global
           HpAlloc = 40;
           goto cgcSR;
       cgcSR: // global
           R1 = _sgaI2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcST: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaI2::P64;
           _sgaHS::P64 = P64[_sgaI2::P64 + 16];
           _sgaHU::P64 = P64[_sgaI2::P64 + 24];
           _sgaHV::P64 = P64[_sgaI2::P64 + 32];
           _sgaHW::P64 = P64[_sgaI2::P64 + 40];
           _sgaHZ::P64 = P64[_sgaI2::P64 + 48];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sgaHW::P64;
           P64[Hp - 8] = _sgaHS::P64;
           P64[Hp] = _sgaHZ::P64;
           R3 = Hp - 32;
           R2 = _sgaHV::P64;
           R1 = _sgaHU::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaI2_info" {
     sat_sgaI2_info:
         const sat_sgaI2_entry;
         const 5;
         const 15;
 },
 Data.Functor.Product.$fDataProduct2_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgcSV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcSW; else goto cgcSX;
       cgcSW: // global
           R1 = Data.Functor.Product.$fDataProduct2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cgcSX: // global
           I64[Sp - 8] = block_cgcSF_info;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = R6;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcT1; else goto cgcSG;
       ugcT1: // global
           call _cgcSF(R1) args: 0, res: 0, upd: 0;
       cgcSG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct2_info" {
     Data.Functor.Product.$fDataProduct2_info:
         const Data.Functor.Product.$fDataProduct2_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const Data.Functor.Product.$fDataProduct2_slow;
 },
 _cgcSF() //  [R1]
         { []
         }
     {offset
       cgcSF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgcT0; else goto cgcSZ;
       cgcT0: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcSZ: // global
           _sgaHZ::P64 = P64[R1 + 7];
           _sgaI0::P64 = P64[R1 + 15];
           I64[Hp - 88] = stg_ap_3_upd_info;
           _sgaHW::P64 = P64[Sp + 32];
           P64[Hp - 72] = _sgaHW::P64;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sgaI0::P64;
           I64[Hp - 48] = sat_sgaI2_info;
           P64[Hp - 32] = P64[Sp + 40];
           _sgaHU::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sgaHU::P64;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sgaHW::P64;
           P64[Hp] = _sgaHZ::P64;
           R3 = Hp - 88;
           R2 = Hp - 48;
           R1 = _sgaHU::P64;
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcSF_info" {
     block_cgcSF_info:
         const _cgcSF;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.553308623 UTC

[section ""data" . Data.Functor.Product.$w$cgmapMo_closure" {
     Data.Functor.Product.$w$cgmapMo_closure:
         const Data.Functor.Product.$w$cgmapMo_info;
 },
 lvl9_sgaI9_entry() //  [R1]
         { []
         }
     {offset
       cgcTx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgcTy; else goto cgcTz;
       cgcTy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcTz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgaI9_info" {
     lvl9_sgaI9_info:
         const lvl9_sgaI9_entry;
         const 1;
         const 16;
 },
 sat_sgaIH_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcTM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcTN; else goto cgcTO;
       cgcTN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcTO: // global
           I64[Sp - 24] = block_cgcTJ_info;
           _sgaI9::P64 = P64[R1 + 7];
           _sgaIa::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgaI9::P64;
           P64[Sp - 8] = _sgaIa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugcU6; else goto cgcTK;
       ugcU6: // global
           call _cgcTJ(R1) args: 0, res: 0, upd: 0;
       cgcTK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaIH_info" {
     sat_sgaIH_info:
         const sat_sgaIH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgcTJ() //  [R1]
         { []
         }
     {offset
       cgcTJ: // global
           I64[Sp - 8] = block_cgcTR_info;
           _sgaIE::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgaIE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcU5; else goto cgcTT;
       ugcU5: // global
           call _cgcTR(R1) args: 0, res: 0, upd: 0;
       cgcTT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcTJ_info" {
     block_cgcTJ_info:
         const _cgcTJ;
         const 2;
         const 30;
 },
 _cgcTR() //  [R1]
         { []
         }
     {offset
       cgcTR: // global
           if (R1 & 7 == 1) goto cgcTZ; else goto cgcU3;
       cgcTZ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgcU3: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcTR_info" {
     block_cgcTR_info:
         const _cgcTR;
         const 3;
         const 30;
 },
 sat_sgaIv_entry() //  [R1]
         { []
         }
     {offset
       cgcUH: // global
           _sgaIv::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgcUI; else goto cgcUJ;
       cgcUJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgcUL; else goto cgcUK;
       cgcUL: // global
           HpAlloc = 56;
           goto cgcUI;
       cgcUI: // global
           R1 = _sgaIv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcUK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaIv::P64;
           _sgaIa::P64 = P64[_sgaIv::P64 + 16];
           _sgaIh::P64 = P64[_sgaIv::P64 + 24];
           _sgaIl::P64 = P64[_sgaIv::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgaIl::P64;
           P64[Hp - 24] = _sgaIh::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgaIa::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaIv_info" {
     sat_sgaIv_info:
         const sat_sgaIv_entry;
         const 3;
         const 15;
 },
 sat_sgaIr_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcUX: // global
           _sgaIo::P64 = R2;
           _sgaIr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcUY; else goto cgcUZ;
       cgcUZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgcV1; else goto cgcV0;
       cgcV1: // global
           HpAlloc = 56;
           goto cgcUY;
       cgcUY: // global
           R2 = _sgaIo::P64;
           R1 = _sgaIr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcV0: // global
           _sgaIa::P64 = P64[_sgaIr::P64 + 7];
           _sgaIl::P64 = P64[_sgaIr::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgaIl::P64;
           P64[Hp - 24] = _sgaIo::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgaIa::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaIr_info" {
     sat_sgaIr_info:
         const sat_sgaIr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgaIs_entry() //  [R1]
         { []
         }
     {offset
       cgcV2: // global
           _sgaIs::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgcV3; else goto cgcV4;
       cgcV4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcV6; else goto cgcV5;
       cgcV6: // global
           HpAlloc = 24;
           goto cgcV3;
       cgcV3: // global
           R1 = _sgaIs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcV5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaIs::P64;
           _sgaIa::P64 = P64[_sgaIs::P64 + 16];
           _sgaIi::P64 = P64[_sgaIs::P64 + 24];
           _sgaIl::P64 = P64[_sgaIs::P64 + 32];
           I64[Hp - 16] = sat_sgaIr_info;
           P64[Hp - 8] = _sgaIa::P64;
           P64[Hp] = _sgaIl::P64;
           R2 = _sgaIa::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgaIi::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaIs_info" {
     sat_sgaIs_info:
         const sat_sgaIs_entry;
         const 3;
         const 15;
 },
 sat_sgaIy_entry() //  [R1, R2]
         { []
         }
     {offset
       cgcV7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgcV8; else goto cgcV9;
       cgcV8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcV9: // global
           I64[Sp - 40] = block_cgcUr_info;
           _sgaI6::P64 = P64[R1 + 7];
           _sgaIa::P64 = P64[R1 + 15];
           _sgaIh::P64 = P64[R1 + 23];
           _sgaIi::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgaI6::P64;
           P64[Sp - 24] = _sgaIa::P64;
           P64[Sp - 16] = _sgaIh::P64;
           P64[Sp - 8] = _sgaIi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugcVq; else goto cgcUs;
       ugcVq: // global
           call _cgcUr(R1) args: 0, res: 0, upd: 0;
       cgcUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaIy_info" {
     sat_sgaIy_info:
         const sat_sgaIy_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgcUr() //  [R1]
         { []
         }
     {offset
       cgcUr: // global
           I64[Sp - 8] = block_cgcUw_info;
           _sgaIl::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgaIl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcVp; else goto cgcUx;
       ugcVp: // global
           call _cgcUw(R1) args: 0, res: 0, upd: 0;
       cgcUx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcUr_info" {
     block_cgcUr_info:
         const _cgcUr;
         const 4;
         const 30;
 },
 _cgcUw() //  [R1]
         { []
         }
     {offset
       cgcUw: // global
           _sgaIa::P64 = P64[Sp + 24];
           _sgaIh::P64 = P64[Sp + 32];
           _sgaIl::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgcVc; else goto cgcVg;
       cgcVc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgcVf; else goto cgcVe;
       cgcVf: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcVe: // global
           I64[Hp - 72] = sat_sgaIv_info;
           P64[Hp - 56] = _sgaIa::P64;
           P64[Hp - 48] = _sgaIh::P64;
           P64[Hp - 40] = _sgaIl::P64;
           I64[Hp - 32] = sat_sgaIs_info;
           P64[Hp - 16] = _sgaIa::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgaIl::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgcVg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgcVl; else goto cgcVk;
       cgcVl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcVk: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgaIl::P64;
           P64[Hp - 24] = _sgaIh::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgaIa::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcUw_info" {
     block_cgcUw_info:
         const _cgcUw;
         const 5;
         const 30;
 },
 k1_sgaIe_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcVr: // global
           _sgaIh::P64 = R4;
           _sgaIg::P64 = R3;
           _sgaIf::P64 = R2;
           _sgaIe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgcVs; else goto cgcVt;
       cgcVt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgcVv; else goto cgcVu;
       cgcVv: // global
           HpAlloc = 80;
           goto cgcVs;
       cgcVs: // global
           R4 = _sgaIh::P64;
           R3 = _sgaIg::P64;
           R2 = _sgaIf::P64;
           R1 = _sgaIe::P64;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcVu: // global
           _sgaI6::P64 = P64[_sgaIe::P64 + 5];
           _sgaI7::P64 = P64[_sgaIe::P64 + 13];
           _sgaIa::P64 = P64[_sgaIe::P64 + 21];
           I64[Hp - 72] = stg_ap_3_upd_info;
           P64[Hp - 56] = _sgaI7::P64;
           P64[Hp - 48] = _sgaIf::P64;
           P64[Hp - 40] = _sgaIh::P64;
           I64[Hp - 32] = sat_sgaIy_info;
           P64[Hp - 24] = _sgaI6::P64;
           P64[Hp - 16] = _sgaIa::P64;
           P64[Hp - 8] = _sgaIh::P64;
           P64[Hp] = Hp - 72;
           R2 = _sgaIa::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgaIg::P64;
           P64[Sp - 8] = Hp - 31;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_sgaIe_info" {
     k1_sgaIe_info:
         const k1_sgaIe_entry;
         const 3;
         const 8;
         const 12884901911;
 },
 sat_sgaIz_entry() //  [R1]
         { []
         }
     {offset
       cgcVE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcVF; else goto cgcVG;
       cgcVF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcVG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Product.$fDataProduct1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaIz_info" {
     sat_sgaIz_info:
         const sat_sgaIz_entry;
         const 1;
         const 16;
 },
 sat_sgaIA_entry() //  [R1]
         { []
         }
     {offset
       cgcVH: // global
           _sgaIA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgcVI; else goto cgcVJ;
       cgcVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcVL; else goto cgcVK;
       cgcVL: // global
           HpAlloc = 24;
           goto cgcVI;
       cgcVI: // global
           R1 = _sgaIA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcVK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaIA::P64;
           _sgaI4::P64 = P64[_sgaIA::P64 + 16];
           _sgaIa::P64 = P64[_sgaIA::P64 + 24];
           _sgaIc::P64 = P64[_sgaIA::P64 + 32];
           _sgaIe::P64 = P64[_sgaIA::P64 + 40];
           I64[Hp - 16] = sat_sgaIz_info;
           P64[Hp] = _sgaIa::P64;
           R4 = _sgaIc::P64;
           R3 = Hp - 16;
           R2 = _sgaI4::P64;
           R1 = _sgaIe::P64;
           Sp = Sp - 16;
           call k1_sgaIe_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaIA_info" {
     sat_sgaIA_info:
         const sat_sgaIA_entry;
         const 4;
         const 15;
 },
 sat_sgaIB_entry() //  [R1]
         { []
         }
     {offset
       cgcVM: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cgcVN; else goto cgcVO;
       cgcVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgcVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cgcUb_info;
           _sgaI4::P64 = P64[R1 + 16];
           _sgaI5::P64 = P64[R1 + 24];
           _sgaI6::P64 = P64[R1 + 32];
           _sgaI7::P64 = P64[R1 + 40];
           _sgaIa::P64 = P64[R1 + 56];
           R1 = P64[R1 + 48];
           P64[Sp - 56] = _sgaI4::P64;
           P64[Sp - 48] = _sgaI5::P64;
           P64[Sp - 40] = _sgaI6::P64;
           P64[Sp - 32] = _sgaI7::P64;
           P64[Sp - 24] = _sgaIa::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ugcVS; else goto cgcUc;
       ugcVS: // global
           call _cgcUb(R1) args: 0, res: 0, upd: 0;
       cgcUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaIB_info" {
     sat_sgaIB_info:
         const sat_sgaIB_entry;
         const 6;
         const 15;
 },
 _cgcUb() //  [R1]
         { []
         }
     {offset
       cgcUb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgcVR; else goto cgcVQ;
       cgcVR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgcVQ: // global
           _sgaIc::P64 = P64[R1 + 7];
           _sgaId::P64 = P64[R1 + 15];
           I64[Hp - 72] = k1_sgaIe_info;
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           _sgaIa::P64 = P64[Sp + 40];
           P64[Hp - 48] = _sgaIa::P64;
           I64[Hp - 40] = sat_sgaIA_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _sgaIa::P64;
           P64[Hp - 8] = _sgaIc::P64;
           _cgcUg::P64 = Hp - 69;
           P64[Hp] = _cgcUg::P64;
           R4 = _sgaId::P64;
           R3 = Hp - 40;
           R2 = P64[Sp + 16];
           R1 = _cgcUg::P64;
           Sp = Sp + 48;
           call k1_sgaIe_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgcUb_info" {
     block_cgcUb_info:
         const _cgcUb;
         const 5;
         const 30;
 },
 Data.Functor.Product.$w$cgmapMo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgcVT: // global
           _sgaI8::P64 = R6;
           _sgaI7::P64 = R5;
           _sgaI6::P64 = R4;
           _sgaI5::P64 = R3;
           _sgaI4::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgcVU; else goto cgcVV;
       cgcVV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgcVX; else goto cgcVW;
       cgcVX: // global
           HpAlloc = 24;
           goto cgcVU;
       cgcVU: // global
           R6 = _sgaI8::P64;
           R5 = _sgaI7::P64;
           R4 = _sgaI6::P64;
           R3 = _sgaI5::P64;
           R2 = _sgaI4::P64;
           R1 = Data.Functor.Product.$w$cgmapMo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcVW: // global
           I64[Hp - 16] = lvl9_sgaI9_info;
           P64[Hp] = _sgaI6::P64;
           I64[Sp - 56] = block_cgcTA_info;
           R2 = _sgaI6::P64;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = _sgaI4::P64;
           P64[Sp - 32] = _sgaI5::P64;
           P64[Sp - 24] = _sgaI6::P64;
           P64[Sp - 16] = _sgaI7::P64;
           P64[Sp - 8] = _sgaI8::P64;
           Sp = Sp - 56;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$w$cgmapMo_info" {
     Data.Functor.Product.$w$cgmapMo_info:
         const Data.Functor.Product.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgcTA() //  [R1]
         { []
         }
     {offset
       cgcTA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgcW0; else goto cgcVZ;
       cgcW0: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgcVZ: // global
           I64[Hp - 80] = sat_sgaIH_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_sgaIB_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 56;
           P64[Sp + 48] = Hp - 79;
           Sp = Sp + 32;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcTA_info" {
     block_cgcTA_info:
         const _cgcTA;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.587967985 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_$cgmapMo_closure" {
     Data.Functor.Product.$fDataProduct_$cgmapMo_closure:
         const Data.Functor.Product.$fDataProduct_$cgmapMo_info;
 },
 Data.Functor.Product.$fDataProduct_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cgcYk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Product.$fDataProduct_$cgmapMo_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Product.$fDataProduct_$cgmapMo_entry() //  [R6]
         { []
         }
     {offset
       cgcYo: // global
           _sgaIM::P64 = R6;
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = _sgaIM::P64;
           Sp = Sp + 32;
           call Data.Functor.Product.$w$cgmapMo_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_$cgmapMo_info" {
     Data.Functor.Product.$fDataProduct_$cgmapMo_info:
         const Data.Functor.Product.$fDataProduct_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Product.$fDataProduct_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.593944804 UTC

[section ""data" . lvl5_rg5oj_closure" {
     lvl5_rg5oj_closure:
         const lvl5_rg5oj_info;
         const 0;
 },
 lvl5_rg5oj_entry() //  [R2]
         { []
         }
     {offset
       cgcYE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgcYF; else goto cgcYG;
       cgcYF: // global
           R2 = R2;
           R1 = lvl5_rg5oj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgcYG: // global
           I64[Sp - 8] = block_cgcYB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugcYK; else goto cgcYC;
       ugcYK: // global
           call _cgcYB() args: 0, res: 0, upd: 0;
       cgcYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rg5oj_info" {
     lvl5_rg5oj_info:
         const lvl5_rg5oj_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SgaPW_srt+664;
 },
 _cgcYB() //  []
         { []
         }
     {offset
       cgcYB: // global
           R1 = Data.Functor.Product.$cPair_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgcYB_info" {
     block_cgcYB_info:
         const _cgcYB;
         const 0;
         const 4294967326;
         const SgaPW_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.598939626 UTC

[section ""data" . lvl6_rg5ok_closure" {
     lvl6_rg5ok_closure:
         const lvl6_rg5ok_info;
         const 0;
 },
 lvl6_rg5ok_entry() //  []
         { []
         }
     {offset
       cgcZ0: // global
           R1 = Data.Functor.Product.$tProduct_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rg5ok_info" {
     lvl6_rg5ok_info:
         const lvl6_rg5ok_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SgaPW_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.602384288 UTC

[section ""data" . lvl7_rg5ol_closure" {
     lvl7_rg5ol_closure:
         const lvl7_rg5ol_info;
 },
 lvl7_rg5ol_entry() //  []
         { []
         }
     {offset
       cgcZc: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rg5ol_info" {
     lvl7_rg5ol_info:
         const lvl7_rg5ol_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.60560739 UTC

[section ""data" . lvl8_rg5om_closure" {
     lvl8_rg5om_closure:
         const lvl8_rg5om_info;
 },
 lvl8_rg5om_entry() //  []
         { []
         }
     {offset
       cgcZp: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rg5om_info" {
     lvl8_rg5om_info:
         const lvl8_rg5om_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.617862804 UTC

[section ""data" . Data.Functor.Product.$fDataProduct_closure" {
     Data.Functor.Product.$fDataProduct_closure:
         const Data.Functor.Product.$fDataProduct_info;
         const 0;
 },
 sat_sgaJG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcZH: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$w$cgmapMo_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJG_info" {
     sat_sgaJG_info:
         const sat_sgaJG_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaJC_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcZP: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Product.$w$cgmapMp_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJC_info" {
     sat_sgaJC_info:
         const sat_sgaJC_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaJy_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgcZX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgcZY; else goto cgcZZ;
       cgcZY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgcZZ: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJy_info" {
     sat_sgaJy_info:
         const sat_sgaJy_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sgaJx_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgd05: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgd06; else goto cgd07;
       cgd06: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd07: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgmapQi_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJx_info" {
     sat_sgaJx_info:
         const sat_sgaJx_entry;
         const 6;
         const 4294967304;
         const 12884901911;
         const SgaPW_srt+656;
 },
 sat_sgaJw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgd0g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgd0n; else goto cgd0o;
       cgd0n: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd0o: // global
           I64[Sp - 32] = block_cgd0d_info;
           _sgaJ4::P64 = P64[R1 + 6];
           _sgaJ5::P64 = P64[R1 + 14];
           R1 = R3;
           P64[Sp - 24] = _sgaJ4::P64;
           P64[Sp - 16] = _sgaJ5::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugd0s; else goto cgd0e;
       ugd0s: // global
           call _cgd0d(R1) args: 0, res: 0, upd: 0;
       cgd0e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJw_info" {
     sat_sgaJw_info:
         const sat_sgaJw_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cgd0d() //  [R1]
         { []
         }
     {offset
       cgd0d: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgd0r; else goto cgd0q;
       cgd0r: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgd0q: // global
           _sgaJr::P64 = P64[R1 + 7];
           _sgaJs::P64 = P64[R1 + 15];
           I64[Hp - 120] = stg_ap_3_upd_info;
           _sgaJo::P64 = P64[Sp + 24];
           P64[Hp - 104] = _sgaJo::P64;
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = _sgaJs::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = Hp - 120;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgaJo::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sgaJr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 78;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgd0d_info" {
     block_cgd0d_info:
         const _cgd0d;
         const 3;
         const 30;
 },
 sat_sgaJn_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgd0y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgd0z; else goto cgd0A;
       cgd0z: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd0A: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Product.$fDataProduct_$cgmapQr_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJn_info" {
     sat_sgaJn_info:
         const sat_sgaJn_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sgaJm_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgd0G: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgd0H; else goto cgd0I;
       cgd0H: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd0I: // global
           R6 = P64[R1 + 36];
           _B1::P64 = R5;
           R5 = P64[R1 + 28];
           _B2::P64 = R4;
           R4 = P64[R1 + 20];
           _B3::P64 = R3;
           R3 = P64[R1 + 12];
           _B4::P64 = R2;
           R2 = P64[R1 + 4];
           P64[Sp - 40] = P64[R1 + 44];
           P64[Sp - 32] = _B4::P64;
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call Data.Functor.Product.$fDataProduct2_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJm_info" {
     sat_sgaJm_info:
         const sat_sgaJm_entry;
         const 6;
         const 8;
         const 17179869208;
 },
 sat_sgaJl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgd0R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgd0X; else goto cgd0Y;
       cgd0X: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd0Y: // global
           I64[Sp - 32] = block_cgd0O_info;
           _sgaJ4::P64 = P64[R1 + 6];
           _sgaJ5::P64 = P64[R1 + 14];
           R1 = R3;
           P64[Sp - 24] = _sgaJ4::P64;
           P64[Sp - 16] = _sgaJ5::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugd12; else goto cgd0P;
       ugd12: // global
           call _cgd0O(R1) args: 0, res: 0, upd: 0;
       cgd0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJl_info" {
     sat_sgaJl_info:
         const sat_sgaJl_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cgd0O() //  [R1]
         { []
         }
     {offset
       cgd0O: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgd11; else goto cgd10;
       cgd11: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgd10: // global
           _sgaJh::P64 = P64[R1 + 7];
           _sgaJi::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_3_upd_info;
           _sgaJe::P64 = P64[Sp + 24];
           P64[Hp - 80] = _sgaJe::P64;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = _sgaJi::P64;
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _sgaJe::P64;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sgaJh::P64;
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgd0O_info" {
     block_cgd0O_info:
         const _cgd0O;
         const 3;
         const 30;
 },
 sat_sgaJb_entry() //  [R1]
         { []
         }
     {offset
       cgd1g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgd1h; else goto cgd1i;
       cgd1h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgd1i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Product.Pair_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaJb_info" {
     sat_sgaJb_info:
         const sat_sgaJb_entry;
         const 1;
         const 16;
 },
 sat_sgaJc_entry() //  [R1]
         { []
         }
     {offset
       cgd1j: // global
           _sgaJc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgd1k; else goto cgd1l;
       cgd1l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgd1n; else goto cgd1m;
       cgd1n: // global
           HpAlloc = 24;
           goto cgd1k;
       cgd1k: // global
           R1 = _sgaJc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgd1m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgaJc::P64;
           _sgaJ4::P64 = P64[_sgaJc::P64 + 16];
           _sgaJ8::P64 = P64[_sgaJc::P64 + 24];
           _sgaJ9::P64 = P64[_sgaJc::P64 + 32];
           I64[Hp - 16] = sat_sgaJb_info;
           P64[Hp] = _sgaJ9::P64;
           R3 = Hp - 16;
           R2 = _sgaJ4::P64;
           R1 = _sgaJ8::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaJc_info" {
     sat_sgaJc_info:
         const sat_sgaJc_entry;
         const 3;
         const 15;
 },
 sat_sgaJd_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgd1o: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgd1s; else goto cgd1r;
       cgd1s: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd1r: // global
           _sgaJ4::P64 = P64[R1 + 5];
           _sgaJ5::P64 = P64[R1 + 13];
           I64[Hp - 32] = sat_sgaJc_info;
           P64[Hp - 16] = _sgaJ4::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 32;
           _sgaJ8::P64 = R2;
           R2 = _sgaJ5::P64;
           R1 = _sgaJ8::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJd_info" {
     sat_sgaJd_info:
         const sat_sgaJd_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgaJ7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgd1y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgd1z; else goto cgd1A;
       cgd1z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd1A: // global
           R6 = P64[R1 + 37];
           R5 = P64[R1 + 29];
           _B1::P64 = R4;
           R4 = P64[R1 + 21];
           _B2::P64 = R3;
           R3 = P64[R1 + 13];
           _B3::P64 = R2;
           R2 = P64[R1 + 5];
           P64[Sp - 32] = P64[R1 + 45];
           P64[Sp - 24] = _B3::P64;
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call Data.Functor.Product.$fDataProduct_$cgfoldl_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgaJ7_info" {
     sat_sgaJ7_info:
         const sat_sgaJ7_entry;
         const 6;
         const 8;
         const 12884901911;
 },
 sat_sgaJ6_entry() //  [R1]
         { []
         }
     {offset
       cgd1F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgd1G; else goto cgd1H;
       cgd1G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgd1H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Product.$w$cp1Data_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgaJ6_info" {
     sat_sgaJ6_info:
         const sat_sgaJ6_entry;
         const 4;
         const 4294967311;
         const SgaPW_srt+640;
 },
 Data.Functor.Product.$fDataProduct_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgd1J: // global
           Hp = Hp + 576;
           if (Hp > HpLim) (likely: False) goto cgd1N; else goto cgd1M;
       cgd1N: // global
           HpAlloc = 576;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.$fDataProduct_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgd1M: // global
           I64[Hp - 568] = sat_sgaJG_info;
           P64[Hp - 560] = R6;
           _sgaJ5::P64 = P64[Sp];
           P64[Hp - 552] = _sgaJ5::P64;
           I64[Hp - 544] = sat_sgaJC_info;
           P64[Hp - 536] = R6;
           P64[Hp - 528] = _sgaJ5::P64;
           I64[Hp - 520] = sat_sgaJy_info;
           P64[Hp - 512] = R2;
           P64[Hp - 504] = R3;
           P64[Hp - 496] = R4;
           P64[Hp - 488] = R5;
           P64[Hp - 480] = R6;
           P64[Hp - 472] = _sgaJ5::P64;
           I64[Hp - 464] = sat_sgaJx_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           P64[Hp - 440] = R4;
           P64[Hp - 432] = R5;
           P64[Hp - 424] = R6;
           P64[Hp - 416] = _sgaJ5::P64;
           I64[Hp - 408] = sat_sgaJw_info;
           P64[Hp - 400] = R6;
           P64[Hp - 392] = _sgaJ5::P64;
           I64[Hp - 384] = sat_sgaJn_info;
           P64[Hp - 376] = R2;
           P64[Hp - 368] = R3;
           P64[Hp - 360] = R4;
           P64[Hp - 352] = R5;
           P64[Hp - 344] = R6;
           P64[Hp - 336] = _sgaJ5::P64;
           I64[Hp - 328] = sat_sgaJm_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           P64[Hp - 280] = _sgaJ5::P64;
           I64[Hp - 272] = sat_sgaJl_info;
           P64[Hp - 264] = R6;
           P64[Hp - 256] = _sgaJ5::P64;
           I64[Hp - 248] = sat_sgaJd_info;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _sgaJ5::P64;
           I64[Hp - 224] = sat_sgaJ7_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _sgaJ5::P64;
           I64[Hp - 168] = sat_sgaJ6_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 168;
           P64[Hp - 104] = Hp - 221;
           P64[Hp - 96] = Hp - 245;
           P64[Hp - 88] = lvl5_rg5oj_closure+1;
           P64[Hp - 80] = lvl6_rg5ok_closure+1;
           P64[Hp - 72] = lvl7_rg5ol_closure+2;
           P64[Hp - 64] = lvl8_rg5om_closure+2;
           P64[Hp - 56] = Hp - 270;
           P64[Hp - 48] = Hp - 324;
           P64[Hp - 40] = Hp - 380;
           P64[Hp - 32] = Hp - 406;
           P64[Hp - 24] = Hp - 461;
           P64[Hp - 16] = Hp - 517;
           P64[Hp - 8] = Hp - 541;
           P64[Hp] = Hp - 565;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.$fDataProduct_info" {
     Data.Functor.Product.$fDataProduct_info:
         const Data.Functor.Product.$fDataProduct_entry;
         const 0;
         const 914828034062;
         const 25769803802;
         const SgaPW_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.651473093 UTC

[section ""data" . Data.Functor.Product.Pair_closure" {
     Data.Functor.Product.Pair_closure:
         const Data.Functor.Product.Pair_info;
 },
 Data.Functor.Product.Pair_entry() //  [R2, R3]
         { []
         }
     {offset
       cgd3Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgd3U; else goto cgd3T;
       cgd3U: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Product.Pair_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgd3T: // global
           I64[Hp - 16] = Data.Functor.Product.Pair_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.Pair_info" {
     Data.Functor.Product.Pair_info:
         const Data.Functor.Product.Pair_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.655083321 UTC

[section ""cstring" . igd42_str" {
     igd42_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,80,114,111,100,117,99,116,46,80,97,105,114]
 },
 Data.Functor.Product.Pair_con_entry() //  [R1]
         { []
         }
     {offset
       cgd41: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Product.Pair_con_info" {
     Data.Functor.Product.Pair_con_info:
         const Data.Functor.Product.Pair_con_entry;
         const 2;
         const 4;
         const igd42_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:05.65895824 UTC

[section ""relreadonly" . SgaPW_srt" {
     SgaPW_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Product.$fRead1Product1_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadPrec_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadListPrec_closure;
         const Data.Functor.Product.$fRead1Product_$cliftReadList_closure;
         const Data.Functor.Product.$fRead1Product_closure;
         const Data.Functor.Product.$fRead1Product2_closure;
         const Data.Functor.Product.$w$cliftShowsPrec_closure;
         const Data.Functor.Product.$fShow1Product_$cliftShowsPrec_closure;
         const Data.Functor.Product.$fShow1Product_$cliftShowList_closure;
         const Data.Functor.Product.$fShow1Product_closure;
         const Data.Functor.Product.$fReadProduct_$creadPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadsPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadListPrec_closure;
         const Data.Functor.Product.$fReadProduct_$creadList_closure;
         const Data.Functor.Product.$fReadProduct_closure;
         const Data.Functor.Product.$w$cshowsPrec_closure;
         const Data.Functor.Product.$fShowProduct_$cshowsPrec_closure;
         const Data.Functor.Product.$w$cshow_closure;
         const Data.Functor.Product.$fShowProduct_$cshow_closure;
         const Data.Functor.Product.$fShowProduct_$cshowList_closure;
         const Data.Functor.Product.$fShowProduct_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Product.$fFoldableProduct_$csum_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Product.$fFoldableProduct2_closure;
         const Data.Functor.Product.$fFoldableProduct_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Product.$fFoldableProduct3_closure;
         const Data.Functor.Product.$fFoldableProduct_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Product.$fFoldableProduct_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Product.$fFoldableProduct8_closure;
         const Data.Functor.Product.$w$cfoldl_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl_closure;
         const Data.Functor.Product.$w$cfoldl1_closure;
         const Data.Functor.Product.$fFoldableProduct7_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl1_closure;
         const Data.Functor.Product.$w$cfoldr'_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr'_closure;
         const Data.Functor.Product.$w$cfoldr_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr_closure;
         const Data.Functor.Product.$w$cfoldl'_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldl'_closure;
         const Data.Functor.Product.$fFoldableProduct_$clength_closure;
         const Data.Functor.Product.$w$cfoldr1_closure;
         const Data.Functor.Product.$fFoldableProduct9_closure;
         const Data.Functor.Product.$fFoldableProduct_$cfoldr1_closure;
         const Data.Functor.Product.$fFoldableProduct_$cnull_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Product.$fFoldableProduct_$cproduct_closure;
         const Data.Functor.Product.$fFoldableProduct_$ctoList_closure;
         const Data.Functor.Product.$fFoldableProduct_closure;
         const Data.Functor.Product.$fTraversableProduct_$cp2Traversable_closure;
         const Data.Functor.Product.$fTraversableProduct_closure;
         const poly_some_v_rg5o0_closure;
         const Data.Functor.Product.$fAlternativeProduct_$csome_closure;
         const Data.Functor.Product.$fAlternativeProduct_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Product.$fMonadProduct_closure;
         const lvl4_rg5o1_closure;
         const Data.Functor.Product.$fMonadPlusProduct_$cp2MonadPlus_closure;
         const Data.Functor.Product.$fMonadPlusProduct_$cp1MonadPlus_closure;
         const Data.Functor.Product.$fMonadPlusProduct_closure;
         const Data.Functor.Product.$fMonadFixProduct_$cp1MonadFix_closure;
         const Data.Functor.Product.$fMonadFixProduct_closure;
         const Data.Functor.Product.$fMonadZipProduct_$cp1MonadZip_closure;
         const Data.Functor.Product.$fMonadZipProduct_closure;
         const GHC.List.badHead_closure;
         const go61_rg5o2_closure;
         const Data.Functor.Product.$fRead1Product2_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Functor.Product.$fDataProduct4_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Product.$w$cp1Data_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Product.$fDataProduct_$cgmapQi_closure;
         const Data.Functor.Product.$cPair_closure;
         const lvl5_rg5oj_closure;
         const Data.Functor.Product.$tProduct_closure;
         const Data.Functor.Product.$fDataProduct_closure;
         const lvl6_rg5ok_closure;
 }]

