
==================== Raw Cmm ====================
2018-03-16 16:12:06.920498237 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:06.922394943 UTC

[section ""data" . $fEq1Compose1_rgdPP_closure" {
     $fEq1Compose1_rgdPP_closure:
         const $fEq1Compose1_rgdPP_info;
 },
 $fEq1Compose1_rgdPP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgfGa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfGe; else goto cgfGd;
       cgfGe: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $fEq1Compose1_rgdPP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfGd: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           _sgdQm::P64 = R2;
           R2 = Hp - 24;
           R1 = _sgdQm::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fEq1Compose1_rgdPP_info" {
     $fEq1Compose1_rgdPP_info:
         const $fEq1Compose1_rgdPP_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.926296248 UTC

[section ""data" . Data.Functor.Compose.$fEq1Compose_closure" {
     Data.Functor.Compose.$fEq1Compose_closure:
         const Data.Functor.Compose.$fEq1Compose_info;
 },
 Data.Functor.Compose.$fEq1Compose_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgfGn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $fEq1Compose1_rgdPP_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEq1Compose_info" {
     Data.Functor.Compose.$fEq1Compose_info:
         const Data.Functor.Compose.$fEq1Compose_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.931918476 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure" {
     Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure:
         const Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info;
 },
 sat_sgdQx_entry() //  [R1]
         { []
         }
     {offset
       cgfGC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgfGD; else goto cgfGE;
       cgfGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfGE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdQx_info" {
     sat_sgdQx_info:
         const sat_sgdQx_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cgfGF: // global
           _sgdQw::P64 = R6;
           _sgdQv::P64 = R5;
           _sgdQu::P64 = R4;
           _sgdQt::P64 = R3;
           _sgdQs::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfGG; else goto cgfGH;
       cgfGH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfGJ; else goto cgfGI;
       cgfGJ: // global
           HpAlloc = 32;
           goto cgfGG;
       cgfGG: // global
           R6 = _sgdQw::P64;
           R5 = _sgdQv::P64;
           R4 = _sgdQu::P64;
           R3 = _sgdQt::P64;
           R2 = _sgdQs::P64;
           R1 = Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfGI: // global
           I64[Hp - 24] = sat_sgdQx_info;
           P64[Hp - 8] = _sgdQt::P64;
           P64[Hp] = _sgdQu::P64;
           R2 = _sgdQs::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdQv::P64;
           P64[Sp - 8] = _sgdQw::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info" {
     Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info:
         const Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.940499954 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose1_closure" {
     Data.Functor.Compose.$fOrd1Compose1_closure:
         const Data.Functor.Compose.$fOrd1Compose1_info;
 },
 sat_sgdQD_entry() //  [R1]
         { []
         }
     {offset
       cgfH3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgfH4; else goto cgfH5;
       cgfH4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfH5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdQD_info" {
     sat_sgdQD_info:
         const sat_sgdQD_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrd1Compose1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgfH6: // global
           _sgdQC::P64 = R6;
           _sgdQB::P64 = R5;
           _sgdQA::P64 = R4;
           _sgdQz::P64 = R3;
           _sgdQy::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfH7; else goto cgfH8;
       cgfH8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfHa; else goto cgfH9;
       cgfHa: // global
           HpAlloc = 32;
           goto cgfH7;
       cgfH7: // global
           R6 = _sgdQC::P64;
           R5 = _sgdQB::P64;
           R4 = _sgdQA::P64;
           R3 = _sgdQz::P64;
           R2 = _sgdQy::P64;
           R1 = Data.Functor.Compose.$fOrd1Compose1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfH9: // global
           I64[Hp - 24] = sat_sgdQD_info;
           P64[Hp - 8] = _sgdQz::P64;
           P64[Hp] = _sgdQA::P64;
           R2 = _sgdQy::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdQB::P64;
           P64[Sp - 8] = _sgdQC::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose1_info" {
     Data.Functor.Compose.$fOrd1Compose1_info:
         const Data.Functor.Compose.$fOrd1Compose1_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.950260562 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose_closure" {
     Data.Functor.Compose.$fOrd1Compose_closure:
         const Data.Functor.Compose.$fOrd1Compose_info;
 },
 sat_sgdQH_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgfHv: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdQH_info" {
     sat_sgdQH_info:
         const sat_sgdQH_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgdQG_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgfHD: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fOrd1Compose1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdQG_info" {
     sat_sgdQG_info:
         const sat_sgdQG_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Compose.$fOrd1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgfHH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgfHL; else goto cgfHK;
       cgfHL: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrd1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfHK: // global
           I64[Hp - 64] = sat_sgdQH_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgdQG_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose_info" {
     Data.Functor.Compose.$fOrd1Compose_info:
         const Data.Functor.Compose.$fOrd1Compose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.956584334 UTC

[section ""cstring" . Data.Functor.Compose.$fDataCompose7_bytes" {
     Data.Functor.Compose.$fDataCompose7_bytes:
         I8[] [67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.95904342 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose6_closure" {
     Data.Functor.Compose.$fDataCompose6_closure:
         const Data.Functor.Compose.$fDataCompose6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fDataCompose6_entry() //  [R1]
         { []
         }
     {offset
       cgfI6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfI7; else goto cgfI8;
       cgfI7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfI8: // global
           (_cgfI3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgfI3::I64 == 0) goto cgfI5; else goto cgfI4;
       cgfI5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgfI4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgfI3::I64;
           R2 = Data.Functor.Compose.$fDataCompose7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose6_info" {
     Data.Functor.Compose.$fDataCompose6_info:
         const Data.Functor.Compose.$fDataCompose6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.962646444 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose2_closure" {
     Data.Functor.Compose.$fRead1Compose2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.964355788 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose1_closure" {
     Data.Functor.Compose.$fRead1Compose1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.971462246 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info;
         const 0;
 },
 sat_sgdQO_entry() //  [R1]
         { []
         }
     {offset
       cgfIu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgfIv; else goto cgfIw;
       cgfIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdQO_info" {
     sat_sgdQO_info:
         const sat_sgdQO_entry;
         const 3;
         const 15;
 },
 sat_sgdQN_entry() //  [R1]
         { []
         }
     {offset
       cgfIB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgfIC; else goto cgfID;
       cgfIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfID: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdQN_info" {
     sat_sgdQN_info:
         const sat_sgdQN_entry;
         const 3;
         const 15;
 },
 reader_sgdQM_entry() //  [R1]
         { []
         }
     {offset
       cgfIE: // global
           _sgdQM::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgfIF; else goto cgfIG;
       cgfIG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgfII; else goto cgfIH;
       cgfII: // global
           HpAlloc = 80;
           goto cgfIF;
       cgfIF: // global
           R1 = _sgdQM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfIH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdQM::P64;
           _sgdQI::P64 = P64[_sgdQM::P64 + 16];
           _sgdQJ::P64 = P64[_sgdQM::P64 + 24];
           _sgdQK::P64 = P64[_sgdQM::P64 + 32];
           _sgdQL::P64 = P64[_sgdQM::P64 + 40];
           I64[Hp - 72] = sat_sgdQO_info;
           P64[Hp - 56] = _sgdQJ::P64;
           P64[Hp - 48] = _sgdQK::P64;
           P64[Hp - 40] = _sgdQL::P64;
           I64[Hp - 32] = sat_sgdQN_info;
           P64[Hp - 16] = _sgdQJ::P64;
           P64[Hp - 8] = _sgdQK::P64;
           P64[Hp] = _sgdQL::P64;
           R2 = _sgdQI::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader_sgdQM_info" {
     reader_sgdQM_info:
         const reader_sgdQM_entry;
         const 4;
         const 15;
 },
 sat_sgdQV_entry() //  [R1, R2]
         { []
         }
     {offset
       cgfJ2: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdQV_info" {
     sat_sgdQV_info:
         const sat_sgdQV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgdQW_entry() //  [R1, R2]
         { []
         }
     {offset
       cgfJ5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgfJ9; else goto cgfJ8;
       cgfJ9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgfJ8: // global
           _sgdQM::P64 = P64[R1 + 7];
           _sgdQR::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sgdQV_info;
           P64[Hp] = _sgdQR::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Compose.$fRead1Compose1_closure+1;
           R1 = _sgdQM::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdQW_info" {
     sat_sgdQW_info:
         const sat_sgdQW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 $wlvl_sgdQP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfJd: // global
           _sgdQR::P64 = R3;
           _sgdQQ::I64 = R2;
           _sgdQP::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cgfJe; else goto cgfJf;
       cgfJf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfJh; else goto cgfJg;
       cgfJh: // global
           HpAlloc = 24;
           goto cgfJe;
       cgfJe: // global
           R3 = _sgdQR::P64;
           R2 = _sgdQQ::I64;
           R1 = _sgdQP::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfJg: // global
           if (%MO_S_Gt_W64(_sgdQQ::I64, 10)) goto cgfJb; else goto cgfJc;
       cgfJb: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfJc: // global
           _sgdQM::P64 = P64[_sgdQP::P64 + 6];
           I64[Hp - 16] = sat_sgdQW_info;
           P64[Hp - 8] = _sgdQM::P64;
           P64[Hp] = _sgdQR::P64;
           I64[Sp - 8] = block_cgfJi_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Compose.$fRead1Compose2_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sgdQP_info" {
     $wlvl_sgdQP_info:
         const $wlvl_sgdQP_entry;
         const 1;
         const 12884901897;
         const 8589934605;
         const Sge5q_srt;
 },
 _cgfJi() //  [R1]
         { []
         }
     {offset
       cgfJi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgfJn; else goto cgfJm;
       cgfJn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgfJm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfJi_info" {
     block_cgfJi_info:
         const _cgfJi;
         const 0;
         const 30;
 },
 lvl8_sgdQZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfJw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgfJx; else goto cgfJy;
       cgfJx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfJy: // global
           I64[Sp - 24] = block_cgfJt_info;
           _sgdQP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sgdQP::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugfJC; else goto cgfJu;
       ugfJC: // global
           call _cgfJt(R1) args: 0, res: 0, upd: 0;
       cgfJu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_sgdQZ_info" {
     lvl8_sgdQZ_info:
         const lvl8_sgdQZ_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const Sge5q_srt;
 },
 _cgfJt() //  [R1]
         { []
         }
     {offset
       cgfJt: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sgdQP_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfJt_info" {
     block_cgfJt_info:
         const _cgfJt;
         const 2;
         const 12884901918;
         const Sge5q_srt;
 },
 sat_sgdR6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfJI: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdR6_info" {
     sat_sgdR6_info:
         const sat_sgdR6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sge5q_srt+16;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cgfJL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cgfJP; else goto cgfJO;
       cgfJP: // global
           HpAlloc = 96;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfJO: // global
           I64[Hp - 88] = reader_sgdQM_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = $wlvl_sgdQP_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl8_sgdQZ_info;
           P64[Hp - 16] = Hp - 38;
           I64[Hp - 8] = sat_sgdR6_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const Sge5q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:06.995764977 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info;
         const 0;
 },
 sat_sgdRh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfKW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgfKX; else goto cgfKY;
       cgfKX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfKY: // global
           I64[Sp - 8] = block_cgfKT_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRh_info" {
     sat_sgdRh_info:
         const sat_sgdRh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cgfKT() //  [R1]
         { []
         }
     {offset
       cgfKT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgfL1; else goto cgfL0;
       cgfL1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgfL0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfKT_info" {
     block_cgfKT_info:
         const _cgfKT;
         const 0;
         const 30;
 },
 sat_sgdRc_entry() //  [R1, R2]
         { []
         }
     {offset
       cgfL7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRc_info" {
     sat_sgdRc_info:
         const sat_sgdRc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sgdRb_entry() //  [R1]
         { []
         }
     {offset
       cgfLa: // global
           _sgdRb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgfLb; else goto cgfLc;
       cgfLc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfLe; else goto cgfLd;
       cgfLe: // global
           HpAlloc = 32;
           goto cgfLb;
       cgfLb: // global
           R1 = _sgdRb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfLd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdRb::P64;
           _sgdR7::P64 = P64[_sgdRb::P64 + 16];
           _sgdR8::P64 = P64[_sgdRb::P64 + 24];
           _sgdR9::P64 = P64[_sgdRb::P64 + 32];
           _sgdRa::P64 = P64[_sgdRb::P64 + 40];
           I64[Hp - 24] = sat_sgdRh_info;
           P64[Hp - 16] = _sgdRa::P64;
           I64[Hp - 8] = sat_sgdRc_info;
           P64[Hp] = _sgdR9::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sgdR8::P64;
           R2 = _sgdR7::P64;
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgdRb_info" {
     ds_sgdRb_info:
         const ds_sgdRb_entry;
         const 4;
         const 4294967311;
         const Sge5q_srt+24;
 },
 sat_sgdRj_entry() //  [R1]
         { []
         }
     {offset
       cgfLo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfLp; else goto cgfLq;
       cgfLp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfLq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdRj_info" {
     sat_sgdRj_info:
         const sat_sgdRj_entry;
         const 2;
         const 18;
 },
 sat_sgdRk_entry() //  [R1, R2]
         { []
         }
     {offset
       cgfLr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfLv; else goto cgfLu;
       cgfLv: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgfLu: // global
           _sgdRb::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgdRj_info;
           P64[Hp - 8] = _sgdRb::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRk_info" {
     sat_sgdRk_info:
         const sat_sgdRk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cgfLw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgfLA; else goto cgfLz;
       cgfLA: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfLz: // global
           I64[Hp - 56] = ds_sgdRb_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sgdRk_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sge5q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.009802627 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info;
         const 0;
 },
 sat_sgdRp_entry() //  [R1]
         { []
         }
     {offset
       cgfMb: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRp_info" {
     sat_sgdRp_info:
         const sat_sgdRp_entry;
         const 4;
         const 4294967311;
         const Sge5q_srt+24;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cgfMe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgfMi; else goto cgfMh;
       cgfMi: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfMh: // global
           I64[Hp - 40] = sat_sgdRp_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sge5q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.017458356 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_closure" {
     Data.Functor.Compose.$fRead1Compose_closure:
         const Data.Functor.Compose.$fRead1Compose_info;
         const 0;
 },
 sat_sgdRv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfMz: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry(R5,
                                                                             R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRv_info" {
     sat_sgdRv_info:
         const sat_sgdRv_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+48;
 },
 sat_sgdRu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfMH: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRu_info" {
     sat_sgdRu_info:
         const sat_sgdRu_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+24;
 },
 sat_sgdRt_entry() //  [R1]
         { []
         }
     {offset
       cgfMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfMP; else goto cgfMQ;
       cgfMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdRt_info" {
     sat_sgdRt_info:
         const sat_sgdRt_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+56;
 },
 sat_sgdRs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfMW: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry(R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRs_info" {
     sat_sgdRs_info:
         const sat_sgdRs_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+32;
 },
 Data.Functor.Compose.$fRead1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgfN0: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cgfN4; else goto cgfN3;
       cgfN4: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfN3: // global
           I64[Hp - 136] = sat_sgdRv_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgdRu_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sgdRt_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sgdRs_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_info" {
     Data.Functor.Compose.$fRead1Compose_info:
         const Data.Functor.Compose.$fRead1Compose_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const Sge5q_srt+24;
 },
 section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_info;
         const 0;
 },
 sat_sgdRy_entry() //  [R1]
         { []
         }
     {offset
       cgfNd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfNe; else goto cgfNf;
       cgfNe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfNf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdRy_info" {
     sat_sgdRy_info:
         const sat_sgdRy_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+64;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cgfNg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfNk; else goto cgfNj;
       cgfNk: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfNj: // global
           I64[Hp - 24] = sat_sgdRy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadList_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadList_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sge5q_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.033890335 UTC

[section ""data" . Data.Functor.Compose.$w$cliftShowsPrec_closure" {
     Data.Functor.Compose.$w$cliftShowsPrec_closure:
         const Data.Functor.Compose.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Compose.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cgfNQ: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sgdRG_entry() //  [R1]
         { []
         }
     {offset
       cgfO2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgfO3; else goto cgfO4;
       cgfO3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfO4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdRG_info" {
     sat_sgdRG_info:
         const sat_sgdRG_entry;
         const 3;
         const 15;
 },
 sat_sgdRF_entry() //  [R1]
         { []
         }
     {offset
       cgfO9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgfOa; else goto cgfOb;
       cgfOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdRF_info" {
     sat_sgdRF_info:
         const sat_sgdRF_entry;
         const 3;
         const 15;
 },
 sat_sgdRH_entry() //  [R1]
         { []
         }
     {offset
       cgfOc: // global
           _sgdRH::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgfOd; else goto cgfOe;
       cgfOe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgfOg; else goto cgfOf;
       cgfOg: // global
           HpAlloc = 80;
           goto cgfOd;
       cgfOd: // global
           R1 = _sgdRH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfOf: // global
           _sgdRz::P64 = P64[_sgdRH::P64 + 16];
           _sgdRA::P64 = P64[_sgdRH::P64 + 24];
           _sgdRB::P64 = P64[_sgdRH::P64 + 32];
           _sgdRC::P64 = P64[_sgdRH::P64 + 40];
           I64[Hp - 72] = sat_sgdRG_info;
           P64[Hp - 56] = _sgdRA::P64;
           P64[Hp - 48] = _sgdRB::P64;
           P64[Hp - 40] = _sgdRC::P64;
           I64[Hp - 32] = sat_sgdRF_info;
           P64[Hp - 16] = _sgdRA::P64;
           P64[Hp - 8] = _sgdRB::P64;
           P64[Hp] = _sgdRC::P64;
           R2 = _sgdRz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 72;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRH_info" {
     sat_sgdRH_info:
         const sat_sgdRH_entry;
         const 4;
         const 15;
 },
 Data.Functor.Compose.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgfOh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgfOl; else goto cgfOk;
       cgfOl: // global
           HpAlloc = 48;
           R1 = Data.Functor.Compose.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cgfOk: // global
           I64[Hp - 40] = sat_sgdRH_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R5 = P64[Sp];
           R4 = R6;
           R3 = Data.Functor.Compose.$fDataCompose6_closure;
           R2 = Hp - 40;
           Sp = Sp + 8;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cliftShowsPrec_info" {
     Data.Functor.Compose.$w$cliftShowsPrec_info:
         const Data.Functor.Compose.$w$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803776;
         const Sge5q_srt+72;
         const 1030;
         const Data.Functor.Compose.$w$cliftShowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.044661621 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cgfOR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgfOS; else goto cgfOT;
       cgfOS: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgfOT: // global
           I64[Sp - 40] = block_cgfOO_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugfOX; else goto cgfOP;
       ugfOX: // global
           call _cgfOO(R1) args: 0, res: 0, upd: 0;
       cgfOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sge5q_srt+80;
 },
 _cgfOO() //  [R1]
         { []
         }
     {offset
       cgfOO: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfOO_info" {
     block_cgfOO_info:
         const _cgfOO;
         const 5;
         const 4294967326;
         const Sge5q_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.049944748 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose3_closure" {
     Data.Functor.Compose.$fDataCompose3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.052857873 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_info;
         const 0;
 },
 sat_sgdRX_entry() //  [R1, R2]
         { []
         }
     {offset
       cgfPh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgfPi; else goto cgfPj;
       cgfPi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgfPj: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sgdRW::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sgdRW::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdRX_info" {
     sat_sgdRX_info:
         const sat_sgdRX_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sge5q_srt+80;
 },
 Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cgfPk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgfPo; else goto cgfPn;
       cgfPo: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgfPn: // global
           I64[Hp - 32] = sat_sgdRX_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_$cliftShowList_info" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowList_info:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const Sge5q_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.060685487 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_closure" {
     Data.Functor.Compose.$fShow1Compose_closure:
         const Data.Functor.Compose.$fShow1Compose_info;
         const 0;
 },
 sat_sgdS1_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgfPG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgfPH; else goto cgfPI;
       cgfPH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfPI: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdS1_info" {
     sat_sgdS1_info:
         const sat_sgdS1_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sge5q_srt+96;
 },
 sat_sgdS0_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgfPO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgfPP; else goto cgfPQ;
       cgfPP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfPQ: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry(R6,
                                                                          R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdS0_info" {
     sat_sgdS0_info:
         const sat_sgdS0_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sge5q_srt+88;
 },
 Data.Functor.Compose.$fShow1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgfPS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgfPW; else goto cgfPV;
       cgfPW: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfPV: // global
           I64[Hp - 64] = sat_sgdS1_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgdS0_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_info" {
     Data.Functor.Compose.$fShow1Compose_info:
         const Data.Functor.Compose.$fShow1Compose_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sge5q_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.069115506 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_$c==_closure" {
     Data.Functor.Compose.$fEqCompose_$c==_closure:
         const Data.Functor.Compose.$fEqCompose_$c==_info;
 },
 sat_sgdS7_entry() //  [R1]
         { []
         }
     {offset
       cgfQo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfQp; else goto cgfQq;
       cgfQp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfQq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdS7_info" {
     sat_sgdS7_info:
         const sat_sgdS7_entry;
         const 1;
         const 16;
 },
 sat_sgdS8_entry() //  [R1]
         { []
         }
     {offset
       cgfQr: // global
           _sgdS8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgfQs; else goto cgfQt;
       cgfQt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfQv; else goto cgfQu;
       cgfQv: // global
           HpAlloc = 24;
           goto cgfQs;
       cgfQs: // global
           R1 = _sgdS8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdS8::P64;
           _sgdS3::P64 = P64[_sgdS8::P64 + 16];
           _sgdS4::P64 = P64[_sgdS8::P64 + 24];
           I64[Hp - 16] = sat_sgdS7_info;
           P64[Hp] = _sgdS4::P64;
           R2 = Hp - 16;
           R1 = _sgdS3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdS8_info" {
     sat_sgdS8_info:
         const sat_sgdS8_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fEqCompose_$c==_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgfQw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfQA; else goto cgfQz;
       cgfQA: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fEqCompose_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfQz: // global
           I64[Hp - 24] = sat_sgdS8_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           _sgdS2::P64 = R2;
           R2 = Hp - 24;
           R1 = _sgdS2::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_$c==_info" {
     Data.Functor.Compose.$fEqCompose_$c==_info:
         const Data.Functor.Compose.$fEqCompose_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.078082811 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_$c/=_closure" {
     Data.Functor.Compose.$fEqCompose_$c/=_closure:
         const Data.Functor.Compose.$fEqCompose_$c/=_info;
 },
 sat_sgdSe_entry() //  [R1]
         { []
         }
     {offset
       cgfQZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfR0; else goto cgfR1;
       cgfR0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfR1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSe_info" {
     sat_sgdSe_info:
         const sat_sgdSe_entry;
         const 1;
         const 16;
 },
 sat_sgdSf_entry() //  [R1]
         { []
         }
     {offset
       cgfR2: // global
           _sgdSf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgfR3; else goto cgfR4;
       cgfR4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfR6; else goto cgfR5;
       cgfR6: // global
           HpAlloc = 24;
           goto cgfR3;
       cgfR3: // global
           R1 = _sgdSf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfR5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdSf::P64;
           _sgdSa::P64 = P64[_sgdSf::P64 + 16];
           _sgdSb::P64 = P64[_sgdSf::P64 + 24];
           I64[Hp - 16] = sat_sgdSe_info;
           P64[Hp] = _sgdSb::P64;
           R2 = Hp - 16;
           R1 = _sgdSa::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSf_info" {
     sat_sgdSf_info:
         const sat_sgdSf_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fEqCompose_$c/=_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgfRd: // global
           _sgdSd::P64 = R6;
           _sgdSc::P64 = R5;
           _sgdSb::P64 = R4;
           _sgdSa::P64 = R3;
           _sgdS9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cgfRe; else goto cgfRf;
       cgfRf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfRh; else goto cgfRg;
       cgfRh: // global
           HpAlloc = 32;
           goto cgfRe;
       cgfRe: // global
           R6 = _sgdSd::P64;
           R5 = _sgdSc::P64;
           R4 = _sgdSb::P64;
           R3 = _sgdSa::P64;
           R2 = _sgdS9::P64;
           R1 = Data.Functor.Compose.$fEqCompose_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfRg: // global
           I64[Hp - 24] = sat_sgdSf_info;
           P64[Hp - 8] = _sgdSa::P64;
           P64[Hp] = _sgdSb::P64;
           I64[Sp - 8] = block_cgfR7_info;
           R4 = _sgdSd::P64;
           R3 = _sgdSc::P64;
           R2 = Hp - 24;
           R1 = _sgdS9::P64;
           Sp = Sp - 8;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_$c/=_info" {
     Data.Functor.Compose.$fEqCompose_$c/=_info:
         const Data.Functor.Compose.$fEqCompose_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfR7() //  [R1]
         { []
         }
     {offset
       cgfR7: // global
           if (R1 & 7 == 1) goto cgfRa; else goto cgfRb;
       cgfRa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfRb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfR7_info" {
     block_cgfR7_info:
         const _cgfR7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.088189249 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_closure" {
     Data.Functor.Compose.$fEqCompose_closure:
         const Data.Functor.Compose.$fEqCompose_info;
 },
 sat_sgdSl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfRR: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fEqCompose_$c/=_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdSl_info" {
     sat_sgdSl_info:
         const sat_sgdSl_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdSk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfRZ: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fEqCompose_$c==_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdSk_info" {
     sat_sgdSk_info:
         const sat_sgdSk_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Compose.$fEqCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgfS3: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgfS7; else goto cgfS6;
       cgfS7: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fEqCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfS6: // global
           I64[Hp - 80] = sat_sgdSl_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgdSk_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_info" {
     Data.Functor.Compose.$fEqCompose_info:
         const Data.Functor.Compose.$fEqCompose_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.096230481 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$ccompare_closure" {
     Data.Functor.Compose.$fOrdCompose_$ccompare_closure:
         const Data.Functor.Compose.$fOrdCompose_$ccompare_info;
 },
 sat_sgdSr_entry() //  [R1]
         { []
         }
     {offset
       cgfSx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfSy; else goto cgfSz;
       cgfSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSr_info" {
     sat_sgdSr_info:
         const sat_sgdSr_entry;
         const 1;
         const 16;
 },
 sat_sgdSs_entry() //  [R1]
         { []
         }
     {offset
       cgfSA: // global
           _sgdSs::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfSB; else goto cgfSC;
       cgfSC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfSE; else goto cgfSD;
       cgfSE: // global
           HpAlloc = 24;
           goto cgfSB;
       cgfSB: // global
           R1 = _sgdSs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfSD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdSs::P64;
           _sgdSn::P64 = P64[_sgdSs::P64 + 16];
           _sgdSo::P64 = P64[_sgdSs::P64 + 24];
           I64[Hp - 16] = sat_sgdSr_info;
           P64[Hp] = _sgdSo::P64;
           R2 = _sgdSn::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSs_info" {
     sat_sgdSs_info:
         const sat_sgdSs_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$ccompare_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cgfSF: // global
           _sgdSq::P64 = R6;
           _sgdSp::P64 = R5;
           _sgdSo::P64 = R4;
           _sgdSn::P64 = R3;
           _sgdSm::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfSG; else goto cgfSH;
       cgfSH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfSJ; else goto cgfSI;
       cgfSJ: // global
           HpAlloc = 32;
           goto cgfSG;
       cgfSG: // global
           R6 = _sgdSq::P64;
           R5 = _sgdSp::P64;
           R4 = _sgdSo::P64;
           R3 = _sgdSn::P64;
           R2 = _sgdSm::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfSI: // global
           I64[Hp - 24] = sat_sgdSs_info;
           P64[Hp - 8] = _sgdSn::P64;
           P64[Hp] = _sgdSo::P64;
           R2 = _sgdSm::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdSp::P64;
           P64[Sp - 8] = _sgdSq::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$ccompare_info" {
     Data.Functor.Compose.$fOrdCompose_$ccompare_info:
         const Data.Functor.Compose.$fOrdCompose_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.105771555 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure" {
     Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure:
         const Data.Functor.Compose.$fOrdCompose_$cp1Ord_info;
 },
 sat_sgdSy_entry() //  [R1]
         { []
         }
     {offset
       cgfT7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfT8; else goto cgfT9;
       cgfT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSy_info" {
     sat_sgdSy_info:
         const sat_sgdSy_entry;
         const 1;
         const 16;
 },
 sat_sgdSx_entry() //  [R1]
         { []
         }
     {offset
       cgfTe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfTf; else goto cgfTg;
       cgfTf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfTg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSx_info" {
     sat_sgdSx_info:
         const sat_sgdSx_entry;
         const 1;
         const 16;
 },
 sat_sgdSw_entry() //  [R1]
         { []
         }
     {offset
       cgfTl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfTm; else goto cgfTn;
       cgfTm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfTn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSw_info" {
     sat_sgdSw_info:
         const sat_sgdSw_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgfTo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgfTs; else goto cgfTr;
       cgfTs: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfTr: // global
           I64[Hp - 64] = sat_sgdSy_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgdSx_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgdSw_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fEqCompose_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cp1Ord_info" {
     Data.Functor.Compose.$fOrdCompose_$cp1Ord_info:
         const Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.115594983 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c<_closure" {
     Data.Functor.Compose.$fOrdCompose_$c<_closure:
         const Data.Functor.Compose.$fOrdCompose_$c<_info;
 },
 sat_sgdSE_entry() //  [R1]
         { []
         }
     {offset
       cgfTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfTW; else goto cgfTX;
       cgfTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfTX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSE_info" {
     sat_sgdSE_info:
         const sat_sgdSE_entry;
         const 1;
         const 16;
 },
 sat_sgdSF_entry() //  [R1]
         { []
         }
     {offset
       cgfTY: // global
           _sgdSF::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfTZ; else goto cgfU0;
       cgfU0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfU2; else goto cgfU1;
       cgfU2: // global
           HpAlloc = 24;
           goto cgfTZ;
       cgfTZ: // global
           R1 = _sgdSF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfU1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdSF::P64;
           _sgdSA::P64 = P64[_sgdSF::P64 + 16];
           _sgdSB::P64 = P64[_sgdSF::P64 + 24];
           I64[Hp - 16] = sat_sgdSE_info;
           P64[Hp] = _sgdSB::P64;
           R2 = _sgdSA::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSF_info" {
     sat_sgdSF_info:
         const sat_sgdSF_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c<_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgfU9: // global
           _sgdSD::P64 = R6;
           _sgdSC::P64 = R5;
           _sgdSB::P64 = R4;
           _sgdSA::P64 = R3;
           _sgdSz::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgfUa; else goto cgfUb;
       cgfUb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfUd; else goto cgfUc;
       cgfUd: // global
           HpAlloc = 32;
           goto cgfUa;
       cgfUa: // global
           R6 = _sgdSD::P64;
           R5 = _sgdSC::P64;
           R4 = _sgdSB::P64;
           R3 = _sgdSA::P64;
           R2 = _sgdSz::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfUc: // global
           I64[Hp - 24] = sat_sgdSF_info;
           P64[Hp - 8] = _sgdSA::P64;
           P64[Hp] = _sgdSB::P64;
           I64[Sp - 8] = block_cgfU3_info;
           R2 = _sgdSz::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdSC::P64;
           P64[Sp - 16] = _sgdSD::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c<_info" {
     Data.Functor.Compose.$fOrdCompose_$c<_info:
         const Data.Functor.Compose.$fOrdCompose_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfU3() //  [R1]
         { []
         }
     {offset
       cgfU3: // global
           if (R1 & 7 == 1) goto cgfU7; else goto cgfU6;
       cgfU7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfU6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfU3_info" {
     block_cgfU3_info:
         const _cgfU3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.126380971 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c>=_closure" {
     Data.Functor.Compose.$fOrdCompose_$c>=_closure:
         const Data.Functor.Compose.$fOrdCompose_$c>=_info;
 },
 sat_sgdSM_entry() //  [R1]
         { []
         }
     {offset
       cgfUS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfUT; else goto cgfUU;
       cgfUT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfUU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSM_info" {
     sat_sgdSM_info:
         const sat_sgdSM_entry;
         const 1;
         const 16;
 },
 sat_sgdSN_entry() //  [R1]
         { []
         }
     {offset
       cgfUV: // global
           _sgdSN::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfUW; else goto cgfUX;
       cgfUX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfUZ; else goto cgfUY;
       cgfUZ: // global
           HpAlloc = 24;
           goto cgfUW;
       cgfUW: // global
           R1 = _sgdSN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfUY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdSN::P64;
           _sgdSI::P64 = P64[_sgdSN::P64 + 16];
           _sgdSJ::P64 = P64[_sgdSN::P64 + 24];
           I64[Hp - 16] = sat_sgdSM_info;
           P64[Hp] = _sgdSJ::P64;
           R2 = _sgdSI::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSN_info" {
     sat_sgdSN_info:
         const sat_sgdSN_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c>=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgfV6: // global
           _sgdSL::P64 = R6;
           _sgdSK::P64 = R5;
           _sgdSJ::P64 = R4;
           _sgdSI::P64 = R3;
           _sgdSH::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgfV7; else goto cgfV8;
       cgfV8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfVa; else goto cgfV9;
       cgfVa: // global
           HpAlloc = 32;
           goto cgfV7;
       cgfV7: // global
           R6 = _sgdSL::P64;
           R5 = _sgdSK::P64;
           R4 = _sgdSJ::P64;
           R3 = _sgdSI::P64;
           R2 = _sgdSH::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfV9: // global
           I64[Hp - 24] = sat_sgdSN_info;
           P64[Hp - 8] = _sgdSI::P64;
           P64[Hp] = _sgdSJ::P64;
           I64[Sp - 8] = block_cgfV0_info;
           R2 = _sgdSH::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdSK::P64;
           P64[Sp - 16] = _sgdSL::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c>=_info" {
     Data.Functor.Compose.$fOrdCompose_$c>=_info:
         const Data.Functor.Compose.$fOrdCompose_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfV0() //  [R1]
         { []
         }
     {offset
       cgfV0: // global
           if (R1 & 7 == 1) goto cgfV4; else goto cgfV3;
       cgfV4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfV3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfV0_info" {
     block_cgfV0_info:
         const _cgfV0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.13704248 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c>_closure" {
     Data.Functor.Compose.$fOrdCompose_$c>_closure:
         const Data.Functor.Compose.$fOrdCompose_$c>_info;
 },
 sat_sgdSU_entry() //  [R1]
         { []
         }
     {offset
       cgfVP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfVQ; else goto cgfVR;
       cgfVQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfVR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSU_info" {
     sat_sgdSU_info:
         const sat_sgdSU_entry;
         const 1;
         const 16;
 },
 sat_sgdSV_entry() //  [R1]
         { []
         }
     {offset
       cgfVS: // global
           _sgdSV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfVT; else goto cgfVU;
       cgfVU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfVW; else goto cgfVV;
       cgfVW: // global
           HpAlloc = 24;
           goto cgfVT;
       cgfVT: // global
           R1 = _sgdSV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfVV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdSV::P64;
           _sgdSQ::P64 = P64[_sgdSV::P64 + 16];
           _sgdSR::P64 = P64[_sgdSV::P64 + 24];
           I64[Hp - 16] = sat_sgdSU_info;
           P64[Hp] = _sgdSR::P64;
           R2 = _sgdSQ::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdSV_info" {
     sat_sgdSV_info:
         const sat_sgdSV_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c>_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cgfW3: // global
           _sgdST::P64 = R6;
           _sgdSS::P64 = R5;
           _sgdSR::P64 = R4;
           _sgdSQ::P64 = R3;
           _sgdSP::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgfW4; else goto cgfW5;
       cgfW5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfW7; else goto cgfW6;
       cgfW7: // global
           HpAlloc = 32;
           goto cgfW4;
       cgfW4: // global
           R6 = _sgdST::P64;
           R5 = _sgdSS::P64;
           R4 = _sgdSR::P64;
           R3 = _sgdSQ::P64;
           R2 = _sgdSP::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfW6: // global
           I64[Hp - 24] = sat_sgdSV_info;
           P64[Hp - 8] = _sgdSQ::P64;
           P64[Hp] = _sgdSR::P64;
           I64[Sp - 8] = block_cgfVX_info;
           R2 = _sgdSP::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdSS::P64;
           P64[Sp - 16] = _sgdST::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c>_info" {
     Data.Functor.Compose.$fOrdCompose_$c>_info:
         const Data.Functor.Compose.$fOrdCompose_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfVX() //  [R1]
         { []
         }
     {offset
       cgfVX: // global
           if (R1 & 7 == 3) goto cgfW1; else goto cgfW0;
       cgfW1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfW0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfVX_info" {
     block_cgfVX_info:
         const _cgfVX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.148105708 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c<=_closure" {
     Data.Functor.Compose.$fOrdCompose_$c<=_closure:
         const Data.Functor.Compose.$fOrdCompose_$c<=_info;
 },
 sat_sgdT2_entry() //  [R1]
         { []
         }
     {offset
       cgfWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfWN; else goto cgfWO;
       cgfWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfWO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdT2_info" {
     sat_sgdT2_info:
         const sat_sgdT2_entry;
         const 1;
         const 16;
 },
 sat_sgdT3_entry() //  [R1]
         { []
         }
     {offset
       cgfWP: // global
           _sgdT3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfWQ; else goto cgfWR;
       cgfWR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfWT; else goto cgfWS;
       cgfWT: // global
           HpAlloc = 24;
           goto cgfWQ;
       cgfWQ: // global
           R1 = _sgdT3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfWS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdT3::P64;
           _sgdSY::P64 = P64[_sgdT3::P64 + 16];
           _sgdSZ::P64 = P64[_sgdT3::P64 + 24];
           I64[Hp - 16] = sat_sgdT2_info;
           P64[Hp] = _sgdSZ::P64;
           R2 = _sgdSY::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdT3_info" {
     sat_sgdT3_info:
         const sat_sgdT3_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c<=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cgfX0: // global
           _sgdT1::P64 = R6;
           _sgdT0::P64 = R5;
           _sgdSZ::P64 = R4;
           _sgdSY::P64 = R3;
           _sgdSX::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgfX1; else goto cgfX2;
       cgfX2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfX4; else goto cgfX3;
       cgfX4: // global
           HpAlloc = 32;
           goto cgfX1;
       cgfX1: // global
           R6 = _sgdT1::P64;
           R5 = _sgdT0::P64;
           R4 = _sgdSZ::P64;
           R3 = _sgdSY::P64;
           R2 = _sgdSX::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfX3: // global
           I64[Hp - 24] = sat_sgdT3_info;
           P64[Hp - 8] = _sgdSY::P64;
           P64[Hp] = _sgdSZ::P64;
           I64[Sp - 8] = block_cgfWU_info;
           R2 = _sgdSX::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdT0::P64;
           P64[Sp - 16] = _sgdT1::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c<=_info" {
     Data.Functor.Compose.$fOrdCompose_$c<=_info:
         const Data.Functor.Compose.$fOrdCompose_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfWU() //  [R1]
         { []
         }
     {offset
       cgfWU: // global
           if (R1 & 7 == 3) goto cgfWY; else goto cgfWX;
       cgfWY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgfWX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfWU_info" {
     block_cgfWU_info:
         const _cgfWU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.159004534 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cmax_closure" {
     Data.Functor.Compose.$fOrdCompose_$cmax_closure:
         const Data.Functor.Compose.$fOrdCompose_$cmax_info;
 },
 sat_sgdTa_entry() //  [R1]
         { []
         }
     {offset
       cgfXJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfXK; else goto cgfXL;
       cgfXK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfXL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTa_info" {
     sat_sgdTa_info:
         const sat_sgdTa_entry;
         const 1;
         const 16;
 },
 sat_sgdTb_entry() //  [R1]
         { []
         }
     {offset
       cgfXM: // global
           _sgdTb::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfXN; else goto cgfXO;
       cgfXO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfXQ; else goto cgfXP;
       cgfXQ: // global
           HpAlloc = 24;
           goto cgfXN;
       cgfXN: // global
           R1 = _sgdTb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfXP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdTb::P64;
           _sgdT6::P64 = P64[_sgdTb::P64 + 16];
           _sgdT7::P64 = P64[_sgdTb::P64 + 24];
           I64[Hp - 16] = sat_sgdTa_info;
           P64[Hp] = _sgdT7::P64;
           R2 = _sgdT6::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTb_info" {
     sat_sgdTb_info:
         const sat_sgdTb_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$cmax_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cgfXX: // global
           _sgdT9::P64 = R6;
           _sgdT8::P64 = R5;
           _sgdT7::P64 = R4;
           _sgdT6::P64 = R3;
           _sgdT5::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgfXY; else goto cgfXZ;
       cgfXZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfY1; else goto cgfY0;
       cgfY1: // global
           HpAlloc = 32;
           goto cgfXY;
       cgfXY: // global
           R6 = _sgdT9::P64;
           R5 = _sgdT8::P64;
           R4 = _sgdT7::P64;
           R3 = _sgdT6::P64;
           R2 = _sgdT5::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfY0: // global
           I64[Hp - 24] = sat_sgdTb_info;
           P64[Hp - 8] = _sgdT6::P64;
           P64[Hp] = _sgdT7::P64;
           I64[Sp - 24] = block_cgfXR_info;
           R2 = _sgdT5::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = Hp - 24;
           P64[Sp - 40] = _sgdT8::P64;
           P64[Sp - 32] = _sgdT9::P64;
           P64[Sp - 16] = _sgdT8::P64;
           P64[Sp - 8] = _sgdT9::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cmax_info" {
     Data.Functor.Compose.$fOrdCompose_$cmax_info:
         const Data.Functor.Compose.$fOrdCompose_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfXR() //  [R1]
         { []
         }
     {offset
       cgfXR: // global
           if (R1 & 7 == 3) goto cgfXV; else goto cgfXU;
       cgfXV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgfXU: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfXR_info" {
     block_cgfXR_info:
         const _cgfXR;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.169829761 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cmin_closure" {
     Data.Functor.Compose.$fOrdCompose_$cmin_closure:
         const Data.Functor.Compose.$fOrdCompose_$cmin_info;
 },
 sat_sgdTi_entry() //  [R1]
         { []
         }
     {offset
       cgfYE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgfYF; else goto cgfYG;
       cgfYF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfYG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTi_info" {
     sat_sgdTi_info:
         const sat_sgdTi_entry;
         const 1;
         const 16;
 },
 sat_sgdTj_entry() //  [R1]
         { []
         }
     {offset
       cgfYH: // global
           _sgdTj::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgfYI; else goto cgfYJ;
       cgfYJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgfYL; else goto cgfYK;
       cgfYL: // global
           HpAlloc = 24;
           goto cgfYI;
       cgfYI: // global
           R1 = _sgdTj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgfYK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdTj::P64;
           _sgdTe::P64 = P64[_sgdTj::P64 + 16];
           _sgdTf::P64 = P64[_sgdTj::P64 + 24];
           I64[Hp - 16] = sat_sgdTi_info;
           P64[Hp] = _sgdTf::P64;
           R2 = _sgdTe::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTj_info" {
     sat_sgdTj_info:
         const sat_sgdTj_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$cmin_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cgfYS: // global
           _sgdTh::P64 = R6;
           _sgdTg::P64 = R5;
           _sgdTf::P64 = R4;
           _sgdTe::P64 = R3;
           _sgdTd::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cgfYT; else goto cgfYU;
       cgfYU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgfYW; else goto cgfYV;
       cgfYW: // global
           HpAlloc = 32;
           goto cgfYT;
       cgfYT: // global
           R6 = _sgdTh::P64;
           R5 = _sgdTg::P64;
           R4 = _sgdTf::P64;
           R3 = _sgdTe::P64;
           R2 = _sgdTd::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgfYV: // global
           I64[Hp - 24] = sat_sgdTj_info;
           P64[Hp - 8] = _sgdTe::P64;
           P64[Hp] = _sgdTf::P64;
           I64[Sp - 24] = block_cgfYM_info;
           R2 = _sgdTd::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = Hp - 24;
           P64[Sp - 40] = _sgdTg::P64;
           P64[Sp - 32] = _sgdTh::P64;
           P64[Sp - 16] = _sgdTg::P64;
           P64[Sp - 8] = _sgdTh::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cmin_info" {
     Data.Functor.Compose.$fOrdCompose_$cmin_info:
         const Data.Functor.Compose.$fOrdCompose_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgfYM() //  [R1]
         { []
         }
     {offset
       cgfYM: // global
           if (R1 & 7 == 3) goto cgfYQ; else goto cgfYP;
       cgfYQ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgfYP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgfYM_info" {
     block_cgfYM_info:
         const _cgfYM;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.182821157 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_closure" {
     Data.Functor.Compose.$fOrdCompose_closure:
         const Data.Functor.Compose.$fOrdCompose_info;
 },
 sat_sgdTv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfZw: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$cmin_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTv_info" {
     sat_sgdTv_info:
         const sat_sgdTv_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfZE: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$cmax_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTu_info" {
     sat_sgdTu_info:
         const sat_sgdTu_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfZM: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c>=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTt_info" {
     sat_sgdTt_info:
         const sat_sgdTt_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgfZU: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c>_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTs_info" {
     sat_sgdTs_info:
         const sat_sgdTs_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg02: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c<=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTr_info" {
     sat_sgdTr_info:
         const sat_sgdTr_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg0a: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c<_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTq_info" {
     sat_sgdTq_info:
         const sat_sgdTq_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg0i: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$ccompare_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTp_info" {
     sat_sgdTp_info:
         const sat_sgdTp_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgdTo_entry() //  [R1]
         { []
         }
     {offset
       cgg0p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg0q; else goto cgg0r;
       cgg0q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg0r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTo_info" {
     sat_sgdTo_info:
         const sat_sgdTo_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fOrdCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgg0t: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cgg0x; else goto cgg0w;
       cgg0x: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrdCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg0w: // global
           I64[Hp - 328] = sat_sgdTv_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sgdTu_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sgdTt_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sgdTs_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sgdTr_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sgdTq_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sgdTp_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sgdTo_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_info" {
     Data.Functor.Compose.$fOrdCompose_info:
         const Data.Functor.Compose.$fOrdCompose_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.200626122 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadPrec_info;
         const 0;
 },
 sat_sgdTA_entry() //  [R1]
         { []
         }
     {offset
       cgg1i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg1j; else goto cgg1k;
       cgg1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTA_info" {
     sat_sgdTA_info:
         const sat_sgdTA_entry;
         const 1;
         const 16;
 },
 sat_sgdTz_entry() //  [R1]
         { []
         }
     {offset
       cgg1p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg1q; else goto cgg1r;
       cgg1q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTz_info" {
     sat_sgdTz_info:
         const sat_sgdTz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fReadCompose_$creadPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgg1s: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgg1w; else goto cgg1v;
       cgg1w: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg1v: // global
           I64[Hp - 40] = sat_sgdTA_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sgdTz_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadPrec_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sge5q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.209563191 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadsPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadsPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_info;
         const 0;
 },
 sat_sgdTG_entry() //  [R1]
         { []
         }
     {offset
       cgg1V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg1W; else goto cgg1X;
       cgg1W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg1X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTG_info" {
     sat_sgdTG_info:
         const sat_sgdTG_entry;
         const 1;
         const 16;
 },
 sat_sgdTF_entry() //  [R1]
         { []
         }
     {offset
       cgg22: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg23; else goto cgg24;
       cgg23: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg24: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTF_info" {
     sat_sgdTF_info:
         const sat_sgdTF_entry;
         const 1;
         const 16;
 },
 ds_sgdTE_entry() //  [R1]
         { []
         }
     {offset
       cgg25: // global
           _sgdTE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgg26; else goto cgg27;
       cgg27: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgg29; else goto cgg28;
       cgg29: // global
           HpAlloc = 48;
           goto cgg26;
       cgg26: // global
           R1 = _sgdTE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg28: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdTE::P64;
           _sgdTB::P64 = P64[_sgdTE::P64 + 16];
           _sgdTC::P64 = P64[_sgdTE::P64 + 24];
           _sgdTD::P64 = P64[_sgdTE::P64 + 32];
           I64[Hp - 40] = sat_sgdTG_info;
           P64[Hp - 24] = _sgdTD::P64;
           I64[Hp - 16] = sat_sgdTF_info;
           P64[Hp] = _sgdTD::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgdTC::P64;
           R2 = _sgdTB::P64;
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgdTE_info" {
     ds_sgdTE_info:
         const ds_sgdTE_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+24;
 },
 sat_sgdTI_entry() //  [R1]
         { []
         }
     {offset
       cgg2j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg2k; else goto cgg2l;
       cgg2k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg2l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTI_info" {
     sat_sgdTI_info:
         const sat_sgdTI_entry;
         const 2;
         const 18;
 },
 sat_sgdTJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cgg2m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgg2q; else goto cgg2p;
       cgg2q: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgg2p: // global
           _sgdTE::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgdTI_info;
           P64[Hp - 8] = _sgdTE::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTJ_info" {
     sat_sgdTJ_info:
         const sat_sgdTJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fReadCompose_$creadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cgg2r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgg2v; else goto cgg2u;
       cgg2v: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg2u: // global
           I64[Hp - 48] = ds_sgdTE_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sgdTJ_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadsPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadsPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const Sge5q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.223938758 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadListPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadListPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_info;
         const 0;
 },
 sat_sgdTO_entry() //  [R1]
         { []
         }
     {offset
       cgg37: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg38; else goto cgg39;
       cgg38: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg39: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTO_info" {
     sat_sgdTO_info:
         const sat_sgdTO_entry;
         const 1;
         const 16;
 },
 sat_sgdTN_entry() //  [R1]
         { []
         }
     {offset
       cgg3e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg3f; else goto cgg3g;
       cgg3f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg3g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTN_info" {
     sat_sgdTN_info:
         const sat_sgdTN_entry;
         const 1;
         const 16;
 },
 sat_sgdTP_entry() //  [R1]
         { []
         }
     {offset
       cgg3h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgg3l; else goto cgg3k;
       cgg3l: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg3k: // global
           _sgdTK::P64 = P64[R1 + 16];
           _sgdTL::P64 = P64[R1 + 24];
           _sgdTM::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sgdTO_info;
           P64[Hp - 24] = _sgdTM::P64;
           I64[Hp - 16] = sat_sgdTN_info;
           P64[Hp] = _sgdTM::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgdTL::P64;
           R2 = _sgdTK::P64;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdTP_info" {
     sat_sgdTP_info:
         const sat_sgdTP_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+24;
 },
 Data.Functor.Compose.$fReadCompose_$creadListPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cgg3m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgg3q; else goto cgg3p;
       cgg3q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg3p: // global
           I64[Hp - 32] = sat_sgdTP_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadListPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadListPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_entry;
         const 0;
         const 35205846925326;
         const 12884901911;
         const Sge5q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.233546329 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadList_closure" {
     Data.Functor.Compose.$fReadCompose_$creadList_closure:
         const Data.Functor.Compose.$fReadCompose_$creadList_info;
         const 0;
 },
 sat_sgdTT_entry() //  [R1]
         { []
         }
     {offset
       cgg3O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgg3P; else goto cgg3Q;
       cgg3P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Compose.$fReadCompose_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTT_info" {
     sat_sgdTT_info:
         const sat_sgdTT_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+128;
 },
 Data.Functor.Compose.$fReadCompose_$creadList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cgg3R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgg3V; else goto cgg3U;
       cgg3V: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg3U: // global
           I64[Hp - 32] = sat_sgdTT_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadList_info" {
     Data.Functor.Compose.$fReadCompose_$creadList_info:
         const Data.Functor.Compose.$fReadCompose_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sge5q_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.241219156 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_closure" {
     Data.Functor.Compose.$fReadCompose_closure:
         const Data.Functor.Compose.$fReadCompose_info;
         const 0;
 },
 sat_sgdU0_entry() //  [R1]
         { []
         }
     {offset
       cgg4c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg4d; else goto cgg4e;
       cgg4d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg4e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdU0_info" {
     sat_sgdU0_info:
         const sat_sgdU0_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+128;
 },
 sat_sgdTZ_entry() //  [R1]
         { []
         }
     {offset
       cgg4j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg4k; else goto cgg4l;
       cgg4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg4l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTZ_info" {
     sat_sgdTZ_info:
         const sat_sgdTZ_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+112;
 },
 sat_sgdTY_entry() //  [R1]
         { []
         }
     {offset
       cgg4q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg4r; else goto cgg4s;
       cgg4r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg4s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadList_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTY_info" {
     sat_sgdTY_info:
         const sat_sgdTY_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+136;
 },
 sat_sgdTX_entry() //  [R1]
         { []
         }
     {offset
       cgg4x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg4y; else goto cgg4z;
       cgg4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdTX_info" {
     sat_sgdTX_info:
         const sat_sgdTX_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+120;
 },
 Data.Functor.Compose.$fReadCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgg4B: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cgg4F; else goto cgg4E;
       cgg4F: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg4E: // global
           I64[Hp - 192] = sat_sgdU0_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sgdTZ_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sgdTY_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgdTX_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_info" {
     Data.Functor.Compose.$fReadCompose_info:
         const Data.Functor.Compose.$fReadCompose_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const Sge5q_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.253532689 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure" {
     Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure:
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_info;
         const 0;
 },
 sat_sgdU9_entry() //  [R1]
         { []
         }
     {offset
       cgg5i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg5j; else goto cgg5k;
       cgg5j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg5k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdU9_info" {
     sat_sgdU9_info:
         const sat_sgdU9_entry;
         const 1;
         const 16;
 },
 sat_sgdU8_entry() //  [R1]
         { []
         }
     {offset
       cgg5p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg5q; else goto cgg5r;
       cgg5q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg5r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdU8_info" {
     sat_sgdU8_info:
         const sat_sgdU8_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cgg5s: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgg5t; else goto cgg5u;
       cgg5t: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg5u: // global
           I64[Sp - 40] = block_cgg59_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugg5y; else goto cgg5a;
       ugg5y: // global
           call _cgg59(R1) args: 0, res: 0, upd: 0;
       cgg5a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshowsPrec_info" {
     Data.Functor.Compose.$fShowCompose_$cshowsPrec_info:
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry;
         const 0;
         const 2203318222862;
         const 21474836505;
         const Sge5q_srt+80;
 },
 _cgg59() //  [R1]
         { []
         }
     {offset
       cgg59: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgg5x; else goto cgg5w;
       cgg5x: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgg5w: // global
           _sgdU7::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sgdU9_info;
           _sgdU3::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgdU3::P64;
           I64[Hp - 16] = sat_sgdU8_info;
           P64[Hp] = _sgdU3::P64;
           R6 = _sgdU7::I64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgg59_info" {
     block_cgg59_info:
         const _cgg59;
         const 4;
         const 4294967326;
         const Sge5q_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.265592199 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshow_closure" {
     Data.Functor.Compose.$fShowCompose_$cshow_closure:
         const Data.Functor.Compose.$fShowCompose_$cshow_info;
         const 0;
 },
 sp_sgdUe_entry() //  [R1]
         { []
         }
     {offset
       cgg5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg5Z; else goto cgg60;
       cgg5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sgdUe_info" {
     sp_sgdUe_info:
         const sp_sgdUe_entry;
         const 1;
         const 16;
 },
 sl_sgdUf_entry() //  [R1]
         { []
         }
     {offset
       cgg65: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg66; else goto cgg67;
       cgg66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sgdUf_info" {
     sl_sgdUf_info:
         const sl_sgdUf_entry;
         const 1;
         const 16;
 },
 sat_sgdUh_entry() //  [R1]
         { []
         }
     {offset
       cgg6g: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgg6h; else goto cgg6i;
       cgg6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg6i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUh_info" {
     sat_sgdUh_info:
         const sat_sgdUh_entry;
         const 3;
         const 15;
 },
 sat_sgdUg_entry() //  [R1]
         { []
         }
     {offset
       cgg6n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgg6o; else goto cgg6p;
       cgg6o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg6p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUg_info" {
     sat_sgdUg_info:
         const sat_sgdUg_entry;
         const 3;
         const 15;
 },
 sat_sgdUi_entry() //  [R1]
         { []
         }
     {offset
       cgg6q: // global
           _sgdUi::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cgg6r; else goto cgg6s;
       cgg6s: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgg6u; else goto cgg6t;
       cgg6u: // global
           HpAlloc = 80;
           goto cgg6r;
       cgg6r: // global
           R1 = _sgdUi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg6t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdUi::P64;
           _sgdUa::P64 = P64[_sgdUi::P64 + 16];
           _sgdUb::P64 = P64[_sgdUi::P64 + 24];
           _sgdUd::P64 = P64[_sgdUi::P64 + 32];
           _sgdUe::P64 = P64[_sgdUi::P64 + 40];
           _sgdUf::P64 = P64[_sgdUi::P64 + 48];
           I64[Hp - 72] = sat_sgdUh_info;
           P64[Hp - 56] = _sgdUb::P64;
           P64[Hp - 48] = _sgdUe::P64;
           P64[Hp - 40] = _sgdUf::P64;
           I64[Hp - 32] = sat_sgdUg_info;
           P64[Hp - 16] = _sgdUb::P64;
           P64[Hp - 8] = _sgdUe::P64;
           P64[Hp] = _sgdUf::P64;
           R2 = _sgdUa::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 32;
           P64[Sp - 48] = Hp - 72;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sgdUd::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUi_info" {
     sat_sgdUi_info:
         const sat_sgdUi_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$fShowCompose_$cshow_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cgg6w: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgg6A; else goto cgg6z;
       cgg6A: // global
           HpAlloc = 128;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg6z: // global
           I64[Hp - 120] = sp_sgdUe_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sl_sgdUf_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgdUi_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 72;
           R3 = Hp - 14;
           R2 = Data.Functor.Compose.$fDataCompose6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshow_info" {
     Data.Functor.Compose.$fShowCompose_$cshow_info:
         const Data.Functor.Compose.$fShowCompose_$cshow_entry;
         const 0;
         const 8800387989518;
         const 17179869208;
         const Sge5q_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.279805609 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshowList_closure" {
     Data.Functor.Compose.$fShowCompose_$cshowList_closure:
         const Data.Functor.Compose.$fShowCompose_$cshowList_info;
         const 0;
 },
 lvl8_sgdUp_entry() //  [R1]
         { []
         }
     {offset
       cgg7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg7h; else goto cgg7i;
       cgg7h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg7i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdUp_info" {
     lvl8_sgdUp_info:
         const lvl8_sgdUp_entry;
         const 1;
         const 16;
 },
 lvl9_sgdUq_entry() //  [R1]
         { []
         }
     {offset
       cgg7n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgg7o; else goto cgg7p;
       cgg7o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg7p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgdUq_info" {
     lvl9_sgdUq_info:
         const lvl9_sgdUq_entry;
         const 1;
         const 16;
 },
 sat_sgdUs_entry() //  [R1, R2]
         { []
         }
     {offset
       cgg7v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cgg7w; else goto cgg7x;
       cgg7w: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgg7x: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sgdUr::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sgdUr::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUs_info" {
     sat_sgdUs_info:
         const sat_sgdUs_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sge5q_srt+80;
 },
 Data.Functor.Compose.$fShowCompose_$cshowList_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cgg7y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgg7C; else goto cgg7B;
       cgg7C: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg7B: // global
           I64[Hp - 80] = lvl8_sgdUp_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl9_sgdUq_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgdUs_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshowList_info" {
     Data.Functor.Compose.$fShowCompose_$cshowList_info:
         const Data.Functor.Compose.$fShowCompose_$cshowList_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const Sge5q_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.290497901 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_closure" {
     Data.Functor.Compose.$fShowCompose_closure:
         const Data.Functor.Compose.$fShowCompose_info;
         const 0;
 },
 sat_sgdUy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg84: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fShowCompose_$cshowList_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUy_info" {
     sat_sgdUy_info:
         const sat_sgdUy_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sge5q_srt+168;
 },
 sat_sgdUx_entry() //  [R1, R2]
         { []
         }
     {offset
       cgg8c: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fShowCompose_$cshow_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUx_info" {
     sat_sgdUx_info:
         const sat_sgdUx_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sge5q_srt+160;
 },
 sat_sgdUw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg8k: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUw_info" {
     sat_sgdUw_info:
         const sat_sgdUw_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sge5q_srt+152;
 },
 Data.Functor.Compose.$fShowCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgg8o: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cgg8s; else goto cgg8r;
       cgg8s: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg8r: // global
           I64[Hp - 120] = sat_sgdUy_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sgdUx_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sgdUw_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_info" {
     Data.Functor.Compose.$fShowCompose_info:
         const Data.Functor.Compose.$fShowCompose_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sge5q_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.29970217 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose2_closure" {
     Data.Functor.Compose.$fFunctorCompose2_closure:
         const Data.Functor.Compose.$fFunctorCompose2_info;
 },
 sat_sgdUD_entry() //  [R1]
         { []
         }
     {offset
       cgg8S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgg8T; else goto cgg8U;
       cgg8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUD_info" {
     sat_sgdUD_info:
         const sat_sgdUD_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFunctorCompose2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgg8V: // global
           _sgdUC::P64 = R5;
           _sgdUB::P64 = R4;
           _sgdUA::P64 = R3;
           _sgdUz::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgg8W; else goto cgg8X;
       cgg8X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgg8Z; else goto cgg8Y;
       cgg8Z: // global
           HpAlloc = 32;
           goto cgg8W;
       cgg8W: // global
           R5 = _sgdUC::P64;
           R4 = _sgdUB::P64;
           R3 = _sgdUA::P64;
           R2 = _sgdUz::P64;
           R1 = Data.Functor.Compose.$fFunctorCompose2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg8Y: // global
           I64[Hp - 24] = sat_sgdUD_info;
           P64[Hp - 8] = _sgdUA::P64;
           P64[Hp] = _sgdUB::P64;
           R2 = _sgdUz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgdUC::P64;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose2_info" {
     Data.Functor.Compose.$fFunctorCompose2_info:
         const Data.Functor.Compose.$fFunctorCompose2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.307122837 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose1_closure" {
     Data.Functor.Compose.$fFunctorCompose1_closure:
         const Data.Functor.Compose.$fFunctorCompose1_info;
 },
 sat_sgdUJ_entry() //  [R1]
         { []
         }
     {offset
       cgg9o: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUJ_info" {
     sat_sgdUJ_info:
         const sat_sgdUJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgdUK_entry() //  [R1]
         { []
         }
     {offset
       cgg9r: // global
           _sgdUK::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgg9s; else goto cgg9t;
       cgg9t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgg9v; else goto cgg9u;
       cgg9v: // global
           HpAlloc = 16;
           goto cgg9s;
       cgg9s: // global
           R1 = _sgdUK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgg9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdUK::P64;
           _sgdUF::P64 = P64[_sgdUK::P64 + 16];
           _sgdUG::P64 = P64[_sgdUK::P64 + 24];
           I64[Hp - 8] = sat_sgdUJ_info;
           P64[Hp] = _sgdUG::P64;
           R2 = _sgdUF::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUK_info" {
     sat_sgdUK_info:
         const sat_sgdUK_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFunctorCompose1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgg9w: // global
           _sgdUH::P64 = R5;
           _sgdUG::P64 = R4;
           _sgdUF::P64 = R3;
           _sgdUE::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgg9x; else goto cgg9y;
       cgg9y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgg9A; else goto cgg9z;
       cgg9A: // global
           HpAlloc = 32;
           goto cgg9x;
       cgg9x: // global
           R5 = _sgdUH::P64;
           R4 = _sgdUG::P64;
           R3 = _sgdUF::P64;
           R2 = _sgdUE::P64;
           R1 = Data.Functor.Compose.$fFunctorCompose1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgg9z: // global
           I64[Hp - 24] = sat_sgdUK_info;
           P64[Hp - 8] = _sgdUF::P64;
           P64[Hp] = _sgdUG::P64;
           R2 = _sgdUE::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgdUH::P64;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose1_info" {
     Data.Functor.Compose.$fFunctorCompose1_info:
         const Data.Functor.Compose.$fFunctorCompose1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.31533348 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose_closure" {
     Data.Functor.Compose.$fFunctorCompose_closure:
         const Data.Functor.Compose.$fFunctorCompose_info;
 },
 sat_sgdUO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgg9Y: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFunctorCompose1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUO_info" {
     sat_sgdUO_info:
         const sat_sgdUO_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdUN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgga6: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFunctorCompose2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdUN_info" {
     sat_sgdUN_info:
         const sat_sgdUN_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Compose.$fFunctorCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cggaa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cggae; else goto cggad;
       cggae: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFunctorCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggad: // global
           I64[Hp - 64] = sat_sgdUO_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgdUN_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose_info" {
     Data.Functor.Compose.$fFunctorCompose_info:
         const Data.Functor.Compose.$fFunctorCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.322611205 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info;
 },
 sat_sgdUU_entry() //  [R1]
         { []
         }
     {offset
       cggaA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggaB; else goto cggaC;
       cggaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggaC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUU_info" {
     sat_sgdUU_info:
         const sat_sgdUU_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cggaD: // global
           _sgdUT::P64 = R6;
           _sgdUS::P64 = R5;
           _sgdUR::P64 = R4;
           _sgdUQ::P64 = R3;
           _sgdUP::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggaE; else goto cggaF;
       cggaF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggaH; else goto cggaG;
       cggaH: // global
           HpAlloc = 40;
           goto cggaE;
       cggaE: // global
           R6 = _sgdUT::P64;
           R5 = _sgdUS::P64;
           R4 = _sgdUR::P64;
           R3 = _sgdUQ::P64;
           R2 = _sgdUP::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggaG: // global
           I64[Hp - 32] = sat_sgdUU_info;
           P64[Hp - 16] = _sgdUQ::P64;
           P64[Hp - 8] = _sgdUR::P64;
           P64[Hp] = _sgdUS::P64;
           R2 = _sgdUP::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sgdUR::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sgdUT::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.328849264 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfold_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfold_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfold_info;
 },
 sat_sgdUZ_entry() //  [R1]
         { []
         }
     {offset
       cggb2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggb3; else goto cggb4;
       cggb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggb4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdUZ_info" {
     sat_sgdUZ_info:
         const sat_sgdUZ_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfold_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cggb5: // global
           _sgdUY::P64 = R5;
           _sgdUX::P64 = R4;
           _sgdUW::P64 = R3;
           _sgdUV::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggb6; else goto cggb7;
       cggb7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggb9; else goto cggb8;
       cggb9: // global
           HpAlloc = 32;
           goto cggb6;
       cggb6: // global
           R5 = _sgdUY::P64;
           R4 = _sgdUX::P64;
           R3 = _sgdUW::P64;
           R2 = _sgdUV::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggb8: // global
           I64[Hp - 24] = sat_sgdUZ_info;
           P64[Hp - 8] = _sgdUW::P64;
           P64[Hp] = _sgdUX::P64;
           R2 = _sgdUV::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sgdUX::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgdUY::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfold_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfold_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.334581036 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose1_closure" {
     Data.Functor.Compose.$fFoldableCompose1_closure:
         const Data.Functor.Compose.$fFoldableCompose1_info;
 },
 Data.Functor.Compose.$fFoldableCompose1_entry() //  [R2]
         { []
         }
     {offset
       cggbp: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose1_info" {
     Data.Functor.Compose.$fFoldableCompose1_info:
         const Data.Functor.Compose.$fFoldableCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.339309596 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$csum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$csum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$csum_info;
         const 0;
 },
 $dMonoid_sgdV4_entry() //  [R1]
         { []
         }
     {offset
       cggbE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggbF; else goto cggbG;
       cggbF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggbG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgdV4_info" {
     $dMonoid_sgdV4_info:
         const $dMonoid_sgdV4_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+184;
 },
 lvl8_sgdV5_entry() //  [R1]
         { []
         }
     {offset
       cggbL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggbM; else goto cggbN;
       cggbM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggbN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdV5_info" {
     lvl8_sgdV5_info:
         const lvl8_sgdV5_entry;
         const 2;
         const 18;
 },
 sat_sgdV7_entry() //  [R1, R2]
         { []
         }
     {offset
       cggbT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggbU; else goto cggbV;
       cggbU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggbV: // global
           _sgdV6::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _sgdV6::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdV7_info" {
     sat_sgdV7_info:
         const sat_sgdV7_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Compose.$fFoldableCompose_$csum_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cggbW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggc0; else goto cggbZ;
       cggc0: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggbZ: // global
           I64[Hp - 80] = $dMonoid_sgdV4_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgdV5_info;
           P64[Hp - 40] = R3;
           _cggbA::P64 = Hp - 80;
           P64[Hp - 32] = _cggbA::P64;
           I64[Hp - 24] = sat_sgdV7_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cggbA::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$csum_info" {
     Data.Functor.Compose.$fFoldableCompose_$csum_info:
         const Data.Functor.Compose.$fFoldableCompose_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sge5q_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.348290991 UTC

[section ""cstring" . lvl_rgdPQ_bytes" {
     lvl_rgdPQ_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.350739718 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose2_closure" {
     Data.Functor.Compose.$fFoldableCompose2_closure:
         const Data.Functor.Compose.$fFoldableCompose2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose2_entry() //  [R1]
         { []
         }
     {offset
       cggcv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cggcw; else goto cggcx;
       cggcw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggcx: // global
           (_cggcq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cggcq::I64 == 0) goto cggcs; else goto cggcr;
       cggcs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cggcr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cggcq::I64;
           I64[Sp - 24] = block_cggct_info;
           R2 = lvl_rgdPQ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose2_info" {
     Data.Functor.Compose.$fFoldableCompose2_info:
         const Data.Functor.Compose.$fFoldableCompose2_entry;
         const 0;
         const 4294967317;
         const Sge5q_srt+200;
 },
 _cggct() //  [R1]
         { []
         }
     {offset
       cggct: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggct_info" {
     block_cggct_info:
         const _cggct;
         const 0;
         const 4294967326;
         const Sge5q_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.358058288 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cminimum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cminimum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_info;
         const 0;
 },
 $dMonoid_sgdVc_entry() //  [R1]
         { []
         }
     {offset
       cggcT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggcU; else goto cggcV;
       cggcU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggcV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgdVc_info" {
     $dMonoid_sgdVc_info:
         const $dMonoid_sgdVc_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+208;
 },
 lvl8_sgdVd_entry() //  [R1]
         { []
         }
     {offset
       cggd0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggd1; else goto cggd2;
       cggd1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggd2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdVd_info" {
     lvl8_sgdVd_info:
         const lvl8_sgdVd_entry;
         const 2;
         const 18;
 },
 sat_sgdVh_entry() //  [R1, R2]
         { []
         }
     {offset
       cggde: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggdf; else goto cggdg;
       cggdf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggdg: // global
           I64[Sp - 8] = block_cggd8_info;
           _sgdVe::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _sgdVe::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdVh_info" {
     sat_sgdVh_info:
         const sat_sgdVh_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sge5q_srt+216;
 },
 _cggd8() //  [R1]
         { []
         }
     {offset
       cggd8: // global
           if (R1 & 7 == 1) goto cggdb; else goto cggdc;
       cggdb: // global
           R1 = Data.Functor.Compose.$fFoldableCompose2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggdc: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggd8_info" {
     block_cggd8_info:
         const _cggd8;
         const 0;
         const 4294967326;
         const Sge5q_srt+216;
 },
 Data.Functor.Compose.$fFoldableCompose_$cminimum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cggdn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggdr; else goto cggdq;
       cggdr: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggdq: // global
           I64[Hp - 80] = $dMonoid_sgdVc_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgdVd_info;
           P64[Hp - 40] = R3;
           _cggcP::P64 = Hp - 80;
           P64[Hp - 32] = _cggcP::P64;
           I64[Hp - 24] = sat_sgdVh_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cggcP::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cminimum_info" {
     Data.Functor.Compose.$fFoldableCompose_$cminimum_info:
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sge5q_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.367896121 UTC

[section ""cstring" . lvl1_rgdPR_bytes" {
     lvl1_rgdPR_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.370407115 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose3_closure" {
     Data.Functor.Compose.$fFoldableCompose3_closure:
         const Data.Functor.Compose.$fFoldableCompose3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose3_entry() //  [R1]
         { []
         }
     {offset
       cgge1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgge2; else goto cgge3;
       cgge2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgge3: // global
           (_cggdW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cggdW::I64 == 0) goto cggdY; else goto cggdX;
       cggdY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cggdX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cggdW::I64;
           I64[Sp - 24] = block_cggdZ_info;
           R2 = lvl1_rgdPR_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose3_info" {
     Data.Functor.Compose.$fFoldableCompose3_info:
         const Data.Functor.Compose.$fFoldableCompose3_entry;
         const 0;
         const 4294967317;
         const Sge5q_srt+200;
 },
 _cggdZ() //  [R1]
         { []
         }
     {offset
       cggdZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggdZ_info" {
     block_cggdZ_info:
         const _cggdZ;
         const 0;
         const 4294967326;
         const Sge5q_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.377185803 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_info;
         const 0;
 },
 $dMonoid_sgdVm_entry() //  [R1]
         { []
         }
     {offset
       cggep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggeq; else goto cgger;
       cggeq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgger: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgdVm_info" {
     $dMonoid_sgdVm_info:
         const $dMonoid_sgdVm_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+232;
 },
 lvl8_sgdVn_entry() //  [R1]
         { []
         }
     {offset
       cggew: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggex; else goto cggey;
       cggex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggey: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdVn_info" {
     lvl8_sgdVn_info:
         const lvl8_sgdVn_entry;
         const 2;
         const 18;
 },
 sat_sgdVr_entry() //  [R1, R2]
         { []
         }
     {offset
       cggeK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggeL; else goto cggeM;
       cggeL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggeM: // global
           I64[Sp - 8] = block_cggeE_info;
           _sgdVo::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _sgdVo::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdVr_info" {
     sat_sgdVr_info:
         const sat_sgdVr_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sge5q_srt+240;
 },
 _cggeE() //  [R1]
         { []
         }
     {offset
       cggeE: // global
           if (R1 & 7 == 1) goto cggeH; else goto cggeI;
       cggeH: // global
           R1 = Data.Functor.Compose.$fFoldableCompose3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggeI: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggeE_info" {
     block_cggeE_info:
         const _cggeE;
         const 0;
         const 4294967326;
         const Sge5q_srt+240;
 },
 Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cggeT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggeX; else goto cggeW;
       cggeX: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggeW: // global
           I64[Hp - 80] = $dMonoid_sgdVm_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgdVn_info;
           P64[Hp - 40] = R3;
           _cggel::P64 = Hp - 80;
           P64[Hp - 32] = _cggel::P64;
           I64[Hp - 24] = sat_sgdVr_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cggel::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cmaximum_info" {
     Data.Functor.Compose.$fFoldableCompose_$cmaximum_info:
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sge5q_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.389627063 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$celem_closure" {
     Data.Functor.Compose.$fFoldableCompose_$celem_closure:
         const Data.Functor.Compose.$fFoldableCompose_$celem_info;
         const 0;
 },
 sat_sgdVx_entry() //  [R1]
         { []
         }
     {offset
       cggfA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggfB; else goto cggfC;
       cggfB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggfC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdVx_info" {
     sat_sgdVx_info:
         const sat_sgdVx_entry;
         const 2;
         const 18;
 },
 lvl8_sgdVw_entry() //  [R1]
         { []
         }
     {offset
       cggfD: // global
           _sgdVw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggfE; else goto cggfF;
       cggfF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggfH; else goto cggfG;
       cggfH: // global
           HpAlloc = 32;
           goto cggfE;
       cggfE: // global
           R1 = _sgdVw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggfG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdVw::P64;
           _sgdVt::P64 = P64[_sgdVw::P64 + 16];
           _sgdVu::P64 = P64[_sgdVw::P64 + 24];
           _sgdVv::P64 = P64[_sgdVw::P64 + 32];
           I64[Hp - 24] = sat_sgdVx_info;
           P64[Hp - 8] = _sgdVu::P64;
           P64[Hp] = _sgdVv::P64;
           R2 = _sgdVt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdVw_info" {
     lvl8_sgdVw_info:
         const lvl8_sgdVw_entry;
         const 3;
         const 4294967311;
         const Sge5q_srt+256;
 },
 sat_sgdVz_entry() //  [R1, R2]
         { []
         }
     {offset
       cggfN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggfO; else goto cggfP;
       cggfO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggfP: // global
           _sgdVy::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _sgdVy::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdVz_info" {
     sat_sgdVz_info:
         const sat_sgdVz_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+256;
 },
 Data.Functor.Compose.$fFoldableCompose_$celem_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cggfQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cggfU; else goto cggfT;
       cggfU: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggfT: // global
           I64[Hp - 56] = lvl8_sgdVw_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sgdVz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$celem_info" {
     Data.Functor.Compose.$fFoldableCompose_$celem_info:
         const Data.Functor.Compose.$fFoldableCompose_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sge5q_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.399117863 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose7_closure" {
     Data.Functor.Compose.$fFoldableCompose7_closure:
         const Data.Functor.Compose.$fFoldableCompose7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose7_entry() //  [R1]
         { []
         }
     {offset
       cgggm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgggn; else goto cgggo;
       cgggn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgggo: // global
           (_cgggj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgggj::I64 == 0) goto cgggl; else goto cgggk;
       cgggl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgggk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgggj::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose7_info" {
     Data.Functor.Compose.$fFoldableCompose7_info:
         const Data.Functor.Compose.$fFoldableCompose7_entry;
         const 0;
         const 4294967317;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.404032954 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_info;
         const 0;
 },
 sat_sgdVH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgggJ: // global
           _sgdVG::P64 = R3;
           R3 = R2;
           R2 = _sgdVG::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdVH_info" {
     sat_sgdVH_info:
         const sat_sgdVH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgdVI_entry() //  [R1]
         { []
         }
     {offset
       cgggM: // global
           _sgdVI::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgggN; else goto cgggO;
       cgggO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgggQ; else goto cgggP;
       cgggQ: // global
           HpAlloc = 16;
           goto cgggN;
       cgggN: // global
           R1 = _sgdVI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgggP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdVI::P64;
           _sgdVB::P64 = P64[_sgdVI::P64 + 16];
           _sgdVC::P64 = P64[_sgdVI::P64 + 24];
           I64[Hp - 8] = sat_sgdVH_info;
           P64[Hp] = _sgdVC::P64;
           R2 = _sgdVB::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdVI_info" {
     sat_sgdVI_info:
         const sat_sgdVI_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cgggR: // global
           _sgdVE::P64 = R6;
           _sgdVD::P64 = R5;
           _sgdVC::P64 = R4;
           _sgdVB::P64 = R3;
           _sgdVA::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgggS; else goto cgggT;
       cgggT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgggV; else goto cgggU;
       cgggV: // global
           HpAlloc = 32;
           goto cgggS;
       cgggS: // global
           R6 = _sgdVE::P64;
           R5 = _sgdVD::P64;
           R4 = _sgdVC::P64;
           R3 = _sgdVB::P64;
           R2 = _sgdVA::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgggU: // global
           I64[Hp - 24] = sat_sgdVI_info;
           P64[Hp - 8] = _sgdVB::P64;
           P64[Hp] = _sgdVC::P64;
           R2 = _sgdVA::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdVE::P64;
           P64[Sp - 8] = _sgdVD::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sge5q_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.411305792 UTC

[section ""cstring" . lvl2_rgdPS_bytes" {
     lvl2_rgdPS_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.414218394 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose6_closure" {
     Data.Functor.Compose.$fFoldableCompose6_closure:
         const Data.Functor.Compose.$fFoldableCompose6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose6_entry() //  [R1]
         { []
         }
     {offset
       cgghj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgghk; else goto cgghl;
       cgghk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgghl: // global
           (_cgghe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgghe::I64 == 0) goto cgghg; else goto cgghf;
       cgghg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgghf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgghe::I64;
           I64[Sp - 24] = block_cgghh_info;
           R2 = lvl2_rgdPS_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose6_info" {
     Data.Functor.Compose.$fFoldableCompose6_info:
         const Data.Functor.Compose.$fFoldableCompose6_entry;
         const 0;
         const 4294967317;
         const Sge5q_srt+200;
 },
 _cgghh() //  [R1]
         { []
         }
     {offset
       cgghh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgghh_info" {
     block_cgghh_info:
         const _cgghh;
         const 0;
         const 4294967326;
         const Sge5q_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.422771559 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info;
         const 0;
 },
 sat_sgdVS_entry() //  [R1]
         { []
         }
     {offset
       cgghX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgghY; else goto cgghZ;
       cgghY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgghZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cgghQ_info;
           _sgdVM::P64 = P64[R1 + 16];
           _sgdVO::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgdVM::P64;
           P64[Sp - 24] = _sgdVO::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uggi6; else goto cgghR;
       uggi6: // global
           call _cgghQ(R1) args: 0, res: 0, upd: 0;
       cgghR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdVS_info" {
     sat_sgdVS_info:
         const sat_sgdVS_entry;
         const 3;
         const 15;
 },
 _cgghQ() //  [R1]
         { []
         }
     {offset
       cgghQ: // global
           _sgdVO::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cgghU; else goto cgghV;
       cgghU: // global
           R1 = _sgdVO::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cgghV: // global
           R3 = _sgdVO::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgghQ_info" {
     block_cgghQ_info:
         const _cgghQ;
         const 2;
         const 30;
 },
 sat_sgdVT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggi8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggic; else goto cggib;
       cggic: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggib: // global
           _sgdVM::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgdVS_info;
           P64[Hp - 32] = _sgdVM::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdVT_info" {
     sat_sgdVT_info:
         const sat_sgdVT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgdVU_entry() //  [R1]
         { []
         }
     {offset
       cggid: // global
           _sgdVU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggie; else goto cggif;
       cggif: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cggih; else goto cggig;
       cggih: // global
           HpAlloc = 16;
           goto cggie;
       cggie: // global
           R1 = _sgdVU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdVU::P64;
           _sgdVL::P64 = P64[_sgdVU::P64 + 16];
           _sgdVM::P64 = P64[_sgdVU::P64 + 24];
           I64[Hp - 8] = sat_sgdVT_info;
           P64[Hp] = _sgdVM::P64;
           R2 = _sgdVL::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdVU_info" {
     sat_sgdVU_info:
         const sat_sgdVU_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cggio: // global
           _sgdVN::P64 = R5;
           _sgdVM::P64 = R4;
           _sgdVL::P64 = R3;
           _sgdVK::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggip; else goto cggiq;
       cggiq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggis; else goto cggir;
       cggis: // global
           HpAlloc = 32;
           goto cggip;
       cggip: // global
           R5 = _sgdVN::P64;
           R4 = _sgdVM::P64;
           R3 = _sgdVL::P64;
           R2 = _sgdVK::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggir: // global
           I64[Hp - 24] = sat_sgdVU_info;
           P64[Hp - 8] = _sgdVL::P64;
           P64[Hp] = _sgdVM::P64;
           I64[Sp - 8] = block_cggii_info;
           R2 = _sgdVK::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdVN::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sge5q_srt+280;
 },
 _cggii() //  [R1]
         { []
         }
     {offset
       cggii: // global
           if (R1 & 7 == 1) goto cggil; else goto cggim;
       cggil: // global
           R1 = Data.Functor.Compose.$fFoldableCompose6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggim: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggii_info" {
     block_cggii_info:
         const _cggii;
         const 0;
         const 4294967326;
         const Sge5q_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.436858593 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info;
         const 0;
 },
 sat_sgdW6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggjj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggjk; else goto cggjl;
       cggjk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggjl: // global
           I64[Sp - 16] = block_cggjh_info;
           _sgdW3::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgdW3::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdW6_info" {
     sat_sgdW6_info:
         const sat_sgdW6_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cggjh() //  [R1]
         { []
         }
     {offset
       cggjh: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggjh_info" {
     block_cggjh_info:
         const _cggjh;
         const 1;
         const 30;
 },
 sat_sgdW7_entry() //  [R1]
         { []
         }
     {offset
       cggjn: // global
           _sgdW7::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggjo; else goto cggjp;
       cggjp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cggjr; else goto cggjq;
       cggjr: // global
           HpAlloc = 16;
           goto cggjo;
       cggjo: // global
           R1 = _sgdW7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggjq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdW7::P64;
           _sgdVY::P64 = P64[_sgdW7::P64 + 16];
           _sgdVZ::P64 = P64[_sgdW7::P64 + 24];
           I64[Hp - 8] = sat_sgdW6_info;
           P64[Hp] = _sgdVZ::P64;
           R2 = _sgdVY::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdW7_info" {
     sat_sgdW7_info:
         const sat_sgdW7_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cggjs: // global
           _sgdW1::P64 = R6;
           _sgdW0::P64 = R5;
           _sgdVZ::P64 = R4;
           _sgdVY::P64 = R3;
           _sgdVX::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggjt; else goto cggju;
       cggju: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggjw; else goto cggjv;
       cggjw: // global
           HpAlloc = 32;
           goto cggjt;
       cggjt: // global
           R6 = _sgdW1::P64;
           R5 = _sgdW0::P64;
           R4 = _sgdVZ::P64;
           R3 = _sgdVY::P64;
           R2 = _sgdVX::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggjv: // global
           I64[Hp - 24] = sat_sgdW7_info;
           P64[Hp - 8] = _sgdVY::P64;
           P64[Hp] = _sgdVZ::P64;
           R2 = _sgdVX::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdW1::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _sgdW0::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const Sge5q_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.447076903 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_info;
         const 0;
 },
 sat_sgdWd_entry() //  [R1]
         { []
         }
     {offset
       cggjX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggjY; else goto cggjZ;
       cggjY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggjZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWd_info" {
     sat_sgdWd_info:
         const sat_sgdWd_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cggk0: // global
           _sgdWc::P64 = R6;
           _sgdWb::P64 = R5;
           _sgdWa::P64 = R4;
           _sgdW9::P64 = R3;
           _sgdW8::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cggk1; else goto cggk2;
       cggk2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggk4; else goto cggk3;
       cggk4: // global
           HpAlloc = 32;
           goto cggk1;
       cggk1: // global
           R6 = _sgdWc::P64;
           R5 = _sgdWb::P64;
           R4 = _sgdWa::P64;
           R3 = _sgdW9::P64;
           R2 = _sgdW8::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggk3: // global
           I64[Hp - 24] = sat_sgdWd_info;
           P64[Hp - 8] = _sgdW9::P64;
           P64[Hp] = _sgdWa::P64;
           R2 = _sgdW8::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdWc::P64;
           P64[Sp - 8] = _sgdWb::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.454381709 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info;
         const 0;
 },
 sat_sgdWn_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggkv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggkw; else goto cggkx;
       cggkw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggkx: // global
           I64[Sp - 16] = block_cggkt_info;
           _sgdWk::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgdWk::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdWn_info" {
     sat_sgdWn_info:
         const sat_sgdWn_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cggkt() //  [R1]
         { []
         }
     {offset
       cggkt: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggkt_info" {
     block_cggkt_info:
         const _cggkt;
         const 1;
         const 30;
 },
 sat_sgdWo_entry() //  [R1]
         { []
         }
     {offset
       cggkz: // global
           _sgdWo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggkA; else goto cggkB;
       cggkB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cggkD; else goto cggkC;
       cggkD: // global
           HpAlloc = 16;
           goto cggkA;
       cggkA: // global
           R1 = _sgdWo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggkC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdWo::P64;
           _sgdWf::P64 = P64[_sgdWo::P64 + 16];
           _sgdWg::P64 = P64[_sgdWo::P64 + 24];
           I64[Hp - 8] = sat_sgdWn_info;
           P64[Hp] = _sgdWg::P64;
           R2 = _sgdWf::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWo_info" {
     sat_sgdWo_info:
         const sat_sgdWo_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cggkE: // global
           _sgdWi::P64 = R6;
           _sgdWh::P64 = R5;
           _sgdWg::P64 = R4;
           _sgdWf::P64 = R3;
           _sgdWe::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggkF; else goto cggkG;
       cggkG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggkI; else goto cggkH;
       cggkI: // global
           HpAlloc = 32;
           goto cggkF;
       cggkF: // global
           R6 = _sgdWi::P64;
           R5 = _sgdWh::P64;
           R4 = _sgdWg::P64;
           R3 = _sgdWf::P64;
           R2 = _sgdWe::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggkH: // global
           I64[Hp - 24] = sat_sgdWo_info;
           P64[Hp - 8] = _sgdWf::P64;
           P64[Hp] = _sgdWg::P64;
           R2 = _sgdWe::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdWi::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _sgdWh::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry;
         const 0;
         const 554050781198;
         const 21474836505;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.464444664 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose4_closure" {
     Data.Functor.Compose.$fFoldableCompose4_closure:
         const Data.Functor.Compose.$fFoldableCompose4_info;
 },
 Data.Functor.Compose.$fFoldableCompose4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cggl8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgglf; else goto cgglg;
       cgglf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgglg: // global
           I64[Sp - 16] = block_cggl5_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ugglk; else goto cggl6;
       ugglk: // global
           call _cggl5(R1) args: 0, res: 0, upd: 0;
       cggl6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose4_info" {
     Data.Functor.Compose.$fFoldableCompose4_info:
         const Data.Functor.Compose.$fFoldableCompose4_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cggl5() //  [R1]
         { []
         }
     {offset
       cggl5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgglj; else goto cggli;
       cgglj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggli: // global
           _sgdWu::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgdWu::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggl5_info" {
     block_cggl5_info:
         const _cggl5;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.470810384 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$clength_closure" {
     Data.Functor.Compose.$fFoldableCompose_$clength_closure:
         const Data.Functor.Compose.$fFoldableCompose_$clength_info;
         const 0;
 },
 sat_sgdWz_entry() //  [R1]
         { []
         }
     {offset
       cgglD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgglE; else goto cgglF;
       cgglE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgglF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose4_closure+3;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWz_info" {
     sat_sgdWz_info:
         const sat_sgdWz_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$clength_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cgglG: // global
           _sgdWy::P64 = R4;
           _sgdWx::P64 = R3;
           _sgdWw::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgglH; else goto cgglI;
       cgglI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgglK; else goto cgglJ;
       cgglK: // global
           HpAlloc = 24;
           goto cgglH;
       cgglH: // global
           R4 = _sgdWy::P64;
           R3 = _sgdWx::P64;
           R2 = _sgdWw::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgglJ: // global
           I64[Hp - 16] = sat_sgdWz_info;
           P64[Hp] = _sgdWx::P64;
           R2 = _sgdWw::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgdWy::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = Data.Functor.Compose.$fDataCompose3_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$clength_info" {
     Data.Functor.Compose.$fFoldableCompose_$clength_info:
         const Data.Functor.Compose.$fFoldableCompose_$clength_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.475901831 UTC

[section ""cstring" . lvl3_rgdPT_bytes" {
     lvl3_rgdPT_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.478345174 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose8_closure" {
     Data.Functor.Compose.$fFoldableCompose8_closure:
         const Data.Functor.Compose.$fFoldableCompose8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose8_entry() //  [R1]
         { []
         }
     {offset
       cggm4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cggm5; else goto cggm6;
       cggm5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggm6: // global
           (_cgglZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgglZ::I64 == 0) goto cggm1; else goto cggm0;
       cggm1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cggm0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgglZ::I64;
           I64[Sp - 24] = block_cggm2_info;
           R2 = lvl3_rgdPT_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose8_info" {
     Data.Functor.Compose.$fFoldableCompose8_info:
         const Data.Functor.Compose.$fFoldableCompose8_entry;
         const 0;
         const 4294967317;
         const Sge5q_srt+200;
 },
 _cggm2() //  [R1]
         { []
         }
     {offset
       cggm2: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggm2_info" {
     block_cggm2_info:
         const _cggm2;
         const 0;
         const 4294967326;
         const Sge5q_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.486071308 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info;
         const 0;
 },
 sat_sgdWJ_entry() //  [R1]
         { []
         }
     {offset
       cggmI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggmJ; else goto cggmK;
       cggmJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggmK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cggmB_info;
           _sgdWD::P64 = P64[R1 + 16];
           _sgdWF::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgdWD::P64;
           P64[Sp - 24] = _sgdWF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uggmR; else goto cggmC;
       uggmR: // global
           call _cggmB(R1) args: 0, res: 0, upd: 0;
       cggmC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWJ_info" {
     sat_sgdWJ_info:
         const sat_sgdWJ_entry;
         const 3;
         const 15;
 },
 _cggmB() //  [R1]
         { []
         }
     {offset
       cggmB: // global
           _sgdWF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cggmF; else goto cggmG;
       cggmF: // global
           R1 = _sgdWF::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cggmG: // global
           R3 = P64[R1 + 6];
           R2 = _sgdWF::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggmB_info" {
     block_cggmB_info:
         const _cggmB;
         const 2;
         const 30;
 },
 sat_sgdWK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggmT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggmX; else goto cggmW;
       cggmX: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggmW: // global
           _sgdWD::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgdWJ_info;
           P64[Hp - 32] = _sgdWD::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdWK_info" {
     sat_sgdWK_info:
         const sat_sgdWK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgdWL_entry() //  [R1]
         { []
         }
     {offset
       cggmY: // global
           _sgdWL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggmZ; else goto cggn0;
       cggn0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cggn2; else goto cggn1;
       cggn2: // global
           HpAlloc = 16;
           goto cggmZ;
       cggmZ: // global
           R1 = _sgdWL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggn1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdWL::P64;
           _sgdWC::P64 = P64[_sgdWL::P64 + 16];
           _sgdWD::P64 = P64[_sgdWL::P64 + 24];
           I64[Hp - 8] = sat_sgdWK_info;
           P64[Hp] = _sgdWD::P64;
           R2 = _sgdWC::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWL_info" {
     sat_sgdWL_info:
         const sat_sgdWL_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cggn9: // global
           _sgdWE::P64 = R5;
           _sgdWD::P64 = R4;
           _sgdWC::P64 = R3;
           _sgdWB::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggna; else goto cggnb;
       cggnb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggnd; else goto cggnc;
       cggnd: // global
           HpAlloc = 32;
           goto cggna;
       cggna: // global
           R5 = _sgdWE::P64;
           R4 = _sgdWD::P64;
           R3 = _sgdWC::P64;
           R2 = _sgdWB::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggnc: // global
           I64[Hp - 24] = sat_sgdWL_info;
           P64[Hp - 8] = _sgdWC::P64;
           P64[Hp] = _sgdWD::P64;
           I64[Sp - 8] = block_cggn3_info;
           R2 = _sgdWB::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgdWE::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry;
         const 0;
         const 6601364733966;
         const 17179869208;
         const Sge5q_srt+272;
 },
 _cggn3() //  [R1]
         { []
         }
     {offset
       cggn3: // global
           if (R1 & 7 == 1) goto cggn6; else goto cggn7;
       cggn6: // global
           R1 = Data.Functor.Compose.$fFoldableCompose8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggn7: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggn3_info" {
     block_cggn3_info:
         const _cggn3;
         const 0;
         const 4294967326;
         const Sge5q_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.498511716 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose5_closure" {
     Data.Functor.Compose.$fFoldableCompose5_closure:
         const Data.Functor.Compose.$fFoldableCompose5_info;
 },
 Data.Functor.Compose.$fFoldableCompose5_entry() //  []
         { []
         }
     {offset
       cggnT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose5_info" {
     Data.Functor.Compose.$fFoldableCompose5_info:
         const Data.Functor.Compose.$fFoldableCompose5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.503275632 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cnull_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cnull_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cnull_info;
         const 0;
 },
 sat_sgdWT_entry() //  [R1]
         { []
         }
     {offset
       cggo9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggoa; else goto cggob;
       cggoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggob: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose5_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdWT_info" {
     sat_sgdWT_info:
         const sat_sgdWT_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cnull_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cggoc: // global
           _sgdWS::P64 = R4;
           _sgdWR::P64 = R3;
           _sgdWQ::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cggod; else goto cggoe;
       cggoe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggog; else goto cggof;
       cggog: // global
           HpAlloc = 24;
           goto cggod;
       cggod: // global
           R4 = _sgdWS::P64;
           R3 = _sgdWR::P64;
           R2 = _sgdWQ::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggof: // global
           I64[Hp - 16] = sat_sgdWT_info;
           P64[Hp] = _sgdWR::P64;
           R2 = _sgdWQ::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgdWS::P64;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cnull_info" {
     Data.Functor.Compose.$fFoldableCompose_$cnull_info:
         const Data.Functor.Compose.$fFoldableCompose_$cnull_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.510383076 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cproduct_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cproduct_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_info;
         const 0;
 },
 $dMonoid_sgdWX_entry() //  [R1]
         { []
         }
     {offset
       cggoz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggoA; else goto cggoB;
       cggoA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggoB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgdWX_info" {
     $dMonoid_sgdWX_info:
         const $dMonoid_sgdWX_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+368;
 },
 lvl8_sgdWY_entry() //  [R1]
         { []
         }
     {offset
       cggoG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggoH; else goto cggoI;
       cggoH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggoI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgdWY_info" {
     lvl8_sgdWY_info:
         const lvl8_sgdWY_entry;
         const 2;
         const 18;
 },
 sat_sgdX0_entry() //  [R1, R2]
         { []
         }
     {offset
       cggoO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggoP; else goto cggoQ;
       cggoP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggoQ: // global
           _sgdWZ::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _sgdWZ::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdX0_info" {
     sat_sgdX0_info:
         const sat_sgdX0_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Compose.$fFoldableCompose_$cproduct_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cggoR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggoV; else goto cggoU;
       cggoV: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggoU: // global
           I64[Hp - 80] = $dMonoid_sgdWX_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgdWY_info;
           P64[Hp - 40] = R3;
           _cggov::P64 = Hp - 80;
           P64[Hp - 32] = _cggov::P64;
           I64[Hp - 24] = sat_sgdX0_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cggov::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cproduct_info" {
     Data.Functor.Compose.$fFoldableCompose_$cproduct_info:
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sge5q_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.520218265 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$ctoList_closure" {
     Data.Functor.Compose.$fFoldableCompose_$ctoList_closure:
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_info;
         const 0;
 },
 sat_sgdX4_entry() //  [R1]
         { []
         }
     {offset
       cggpp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggpq; else goto cggpr;
       cggpq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggpr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdX4_info" {
     sat_sgdX4_info:
         const sat_sgdX4_entry;
         const 1;
         const 4294967312;
         const Sge5q_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$ctoList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cggps: // global
           _sgdX3::P64 = R4;
           _sgdX2::P64 = R3;
           _sgdX1::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cggpt; else goto cggpu;
       cggpu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggpw; else goto cggpv;
       cggpw: // global
           HpAlloc = 24;
           goto cggpt;
       cggpt: // global
           R4 = _sgdX3::P64;
           R3 = _sgdX2::P64;
           R2 = _sgdX1::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggpv: // global
           I64[Hp - 16] = sat_sgdX4_info;
           P64[Hp] = _sgdX2::P64;
           R2 = _sgdX1::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgdX3::P64;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$ctoList_info" {
     Data.Functor.Compose.$fFoldableCompose_$ctoList_info:
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_entry;
         const 0;
         const 70373039144974;
         const 12884901911;
         const Sge5q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.531518931 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_closure" {
     Data.Functor.Compose.$fFoldableCompose_closure:
         const Data.Functor.Compose.$fFoldableCompose_info;
         const 0;
 },
 sat_sgdXm_entry() //  [R1, R2]
         { []
         }
     {offset
       cggpQ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cproduct_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXm_info" {
     sat_sgdXm_info:
         const sat_sgdXm_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+376;
 },
 sat_sgdXl_entry() //  [R1, R2]
         { []
         }
     {offset
       cggpY: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$csum_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXl_info" {
     sat_sgdXl_info:
         const sat_sgdXl_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+192;
 },
 sat_sgdXk_entry() //  [R1, R2]
         { []
         }
     {offset
       cggq6: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cminimum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXk_info" {
     sat_sgdXk_info:
         const sat_sgdXk_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+224;
 },
 sat_sgdXj_entry() //  [R1, R2]
         { []
         }
     {offset
       cggqe: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXj_info" {
     sat_sgdXj_info:
         const sat_sgdXj_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+248;
 },
 sat_sgdXi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggqm: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$celem_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXi_info" {
     sat_sgdXi_info:
         const sat_sgdXi_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+264;
 },
 sat_sgdXh_entry() //  [R1, R2]
         { []
         }
     {offset
       cggqu: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$clength_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXh_info" {
     sat_sgdXh_info:
         const sat_sgdXh_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+336;
 },
 sat_sgdXg_entry() //  [R1, R2]
         { []
         }
     {offset
       cggqC: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cnull_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXg_info" {
     sat_sgdXg_info:
         const sat_sgdXg_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+360;
 },
 sat_sgdXf_entry() //  [R1, R2]
         { []
         }
     {offset
       cggqK: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$ctoList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXf_info" {
     sat_sgdXf_info:
         const sat_sgdXf_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sge5q_srt+384;
 },
 sat_sgdXe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggqS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXe_info" {
     sat_sgdXe_info:
         const sat_sgdXe_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+296;
 },
 sat_sgdXd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggr0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXd_info" {
     sat_sgdXd_info:
         const sat_sgdXd_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sge5q_srt+344;
 },
 sat_sgdXc_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggr8: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXc_info" {
     sat_sgdXc_info:
         const sat_sgdXc_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sge5q_srt+328;
 },
 sat_sgdXb_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggrg: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXb_info" {
     sat_sgdXb_info:
         const sat_sgdXb_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sge5q_srt+288;
 },
 sat_sgdXa_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggro: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXa_info" {
     sat_sgdXa_info:
         const sat_sgdXa_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sge5q_srt+312;
 },
 sat_sgdX9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggrw: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdX9_info" {
     sat_sgdX9_info:
         const sat_sgdX9_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sge5q_srt+320;
 },
 sat_sgdX8_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggrE: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdX8_info" {
     sat_sgdX8_info:
         const sat_sgdX8_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgdX7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggrM: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfold_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdX7_info" {
     sat_sgdX7_info:
         const sat_sgdX7_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Compose.$fFoldableCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cggrQ: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cggrU; else goto cggrT;
       cggrU: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggrT: // global
           I64[Hp - 512] = sat_sgdXm_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sgdXl_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sgdXk_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sgdXj_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sgdXi_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sgdXh_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sgdXg_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sgdXf_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sgdXe_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sgdXd_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sgdXc_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sgdXb_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sgdXa_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sgdX9_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgdX8_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgdX7_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_info" {
     Data.Functor.Compose.$fFoldableCompose_info:
         const Data.Functor.Compose.$fFoldableCompose_entry;
         const 0;
         const 265627238878150670;
         const 8589934607;
         const Sge5q_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.559992955 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose1_closure" {
     Data.Functor.Compose.$fTraversableCompose1_closure:
         const Data.Functor.Compose.$fTraversableCompose1_info;
 },
 Data.Functor.Compose.$fTraversableCompose1_entry() //  [R2]
         { []
         }
     {offset
       cggt6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose1_info" {
     Data.Functor.Compose.$fTraversableCompose1_info:
         const Data.Functor.Compose.$fTraversableCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.565403521 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure" {
     Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure:
         const Data.Functor.Compose.$fTraversableCompose_$ctraverse_info;
 },
 sat_sgdXu_entry() //  [R1]
         { []
         }
     {offset
       cggtp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggtq; else goto cggtr;
       cggtq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggtr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXu_info" {
     sat_sgdXu_info:
         const sat_sgdXu_entry;
         const 3;
         const 15;
 },
 sat_sgdXv_entry() //  [R1]
         { []
         }
     {offset
       cggts: // global
           _sgdXv::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cggtt; else goto cggtu;
       cggtu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggtw; else goto cggtv;
       cggtw: // global
           HpAlloc = 40;
           goto cggtt;
       cggtt: // global
           R1 = _sgdXv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggtv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdXv::P64;
           _sgdXo::P64 = P64[_sgdXv::P64 + 16];
           _sgdXp::P64 = P64[_sgdXv::P64 + 24];
           _sgdXq::P64 = P64[_sgdXv::P64 + 32];
           _sgdXr::P64 = P64[_sgdXv::P64 + 40];
           _sgdXs::P64 = P64[_sgdXv::P64 + 48];
           I64[Hp - 32] = sat_sgdXu_info;
           P64[Hp - 16] = _sgdXp::P64;
           P64[Hp - 8] = _sgdXq::P64;
           P64[Hp] = _sgdXr::P64;
           R2 = _sgdXo::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = _sgdXq::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgdXs::P64;
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXv_info" {
     sat_sgdXv_info:
         const sat_sgdXv_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry() //  [R2,
                                                                   R3, R4, R5, R6]
         { []
         }
     {offset
       cggtz: // global
           _sgdXs::P64 = R6;
           _sgdXr::P64 = R5;
           _sgdXq::P64 = R4;
           _sgdXp::P64 = R3;
           _sgdXo::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cggtA; else goto cggtB;
       cggtB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggtD; else goto cggtC;
       cggtD: // global
           HpAlloc = 56;
           goto cggtA;
       cggtA: // global
           R6 = _sgdXs::P64;
           R5 = _sgdXr::P64;
           R4 = _sgdXq::P64;
           R3 = _sgdXp::P64;
           R2 = _sgdXo::P64;
           R1 = Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggtC: // global
           I64[Hp - 48] = sat_sgdXv_info;
           P64[Hp - 32] = _sgdXo::P64;
           P64[Hp - 24] = _sgdXp::P64;
           P64[Hp - 16] = _sgdXq::P64;
           P64[Hp - 8] = _sgdXr::P64;
           P64[Hp] = _sgdXs::P64;
           I64[Sp - 16] = block_cggtx_info;
           R2 = _sgdXq::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$ctraverse_info" {
     Data.Functor.Compose.$fTraversableCompose_$ctraverse_info:
         const Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cggtx() //  [R1]
         { []
         }
     {offset
       cggtx: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Compose.$fTraversableCompose1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggtx_info" {
     block_cggtx_info:
         const _cggtx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.575786463 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info;
         const 0;
 },
 sat_sgdXz_entry() //  [R1]
         { []
         }
     {offset
       cggu9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggua; else goto cggub;
       cggua: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggub: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXz_info" {
     sat_sgdXz_info:
         const sat_sgdXz_entry;
         const 1;
         const 16;
 },
 sat_sgdXy_entry() //  [R1]
         { []
         }
     {offset
       cggug: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgguh; else goto cggui;
       cgguh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggui: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXy_info" {
     sat_sgdXy_info:
         const sat_sgdXy_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgguj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cggun; else goto cggum;
       cggun: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggum: // global
           I64[Hp - 40] = sat_sgdXz_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgdXy_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFoldableCompose_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info" {
     Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info:
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sge5q_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.58425579 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info;
 },
 sat_sgdXD_entry() //  [R1]
         { []
         }
     {offset
       cgguI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgguJ; else goto cgguK;
       cgguJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgguK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXD_info" {
     sat_sgdXD_info:
         const sat_sgdXD_entry;
         const 1;
         const 16;
 },
 sat_sgdXC_entry() //  [R1]
         { []
         }
     {offset
       cgguP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgguQ; else goto cgguR;
       cgguQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgguR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXC_info" {
     sat_sgdXC_info:
         const sat_sgdXC_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgguS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgguW; else goto cgguV;
       cgguW: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgguV: // global
           I64[Hp - 40] = sat_sgdXD_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgdXC_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFunctorCompose_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info" {
     Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info:
         const Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.59139973 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$csequenceA_closure" {
     Data.Functor.Compose.$fTraversableCompose_$csequenceA_closure:
         const Data.Functor.Compose.$fTraversableCompose_$csequenceA_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cggvd: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$csequenceA_info" {
     Data.Functor.Compose.$fTraversableCompose_$csequenceA_info:
         const Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.595498348 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cmapM_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cmapM_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cmapM_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$cmapM_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cggvq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggvr; else goto cggvs;
       cggvr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggvs: // global
           I64[Sp - 40] = block_cggvo_info;
           _sgdXH::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sgdXH::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cmapM_info" {
     Data.Functor.Compose.$fTraversableCompose_$cmapM_info:
         const Data.Functor.Compose.$fTraversableCompose_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cggvo() //  [R1]
         { []
         }
     {offset
       cggvo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggvo_info" {
     block_cggvo_info:
         const _cggvo;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.601674188 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$csequence_closure" {
     Data.Functor.Compose.$fTraversableCompose_$csequence_closure:
         const Data.Functor.Compose.$fTraversableCompose_$csequence_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$csequence_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cggvK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggvL; else goto cggvM;
       cggvL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggvM: // global
           I64[Sp - 32] = block_cggvI_info;
           _sgdXN::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgdXN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$csequence_info" {
     Data.Functor.Compose.$fTraversableCompose_$csequence_info:
         const Data.Functor.Compose.$fTraversableCompose_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cggvI() //  [R1]
         { []
         }
     {offset
       cggvI: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggvI_info" {
     block_cggvI_info:
         const _cggvI;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.609335319 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_closure" {
     Data.Functor.Compose.$fTraversableCompose_closure:
         const Data.Functor.Compose.$fTraversableCompose_info;
         const 0;
 },
 sat_sgdXZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggw7: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fTraversableCompose_$csequence_entry(R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXZ_info" {
     sat_sgdXZ_info:
         const sat_sgdXZ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdXY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggwf: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fTraversableCompose_$cmapM_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXY_info" {
     sat_sgdXY_info:
         const sat_sgdXY_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgdXX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggwn: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry(R5,
                                                                            R4,
                                                                            R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXX_info" {
     sat_sgdXX_info:
         const sat_sgdXX_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdXW_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggwv: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdXW_info" {
     sat_sgdXW_info:
         const sat_sgdXW_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgdXV_entry() //  [R1]
         { []
         }
     {offset
       cggwC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggwD; else goto cggwE;
       cggwD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggwE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXV_info" {
     sat_sgdXV_info:
         const sat_sgdXV_entry;
         const 2;
         const 4294967314;
         const Sge5q_srt+400;
 },
 sat_sgdXU_entry() //  [R1]
         { []
         }
     {offset
       cggwJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggwK; else goto cggwL;
       cggwK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggwL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdXU_info" {
     sat_sgdXU_info:
         const sat_sgdXU_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fTraversableCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cggwN: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cggwR; else goto cggwQ;
       cggwR: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggwQ: // global
           I64[Hp - 208] = sat_sgdXZ_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sgdXY_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sgdXX_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sgdXW_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgdXV_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgdXU_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_info" {
     Data.Functor.Compose.$fTraversableCompose_info:
         const Data.Functor.Compose.$fTraversableCompose_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sge5q_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.624138884 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose4_closure" {
     Data.Functor.Compose.$fApplicativeCompose4_closure:
         const Data.Functor.Compose.$fApplicativeCompose4_info;
 },
 sat_sgdY5_entry() //  [R1]
         { []
         }
     {offset
       cggxv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggxw; else goto cggxx;
       cggxw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggxx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdY5_info" {
     sat_sgdY5_info:
         const sat_sgdY5_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose4_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cggxy: // global
           _sgdY4::P64 = R6;
           _sgdY3::P64 = R5;
           _sgdY2::P64 = R4;
           _sgdY1::P64 = R3;
           _sgdY0::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggxz; else goto cggxA;
       cggxA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggxC; else goto cggxB;
       cggxC: // global
           HpAlloc = 32;
           goto cggxz;
       cggxz: // global
           R6 = _sgdY4::P64;
           R5 = _sgdY3::P64;
           R4 = _sgdY2::P64;
           R3 = _sgdY1::P64;
           R2 = _sgdY0::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggxB: // global
           I64[Hp - 24] = sat_sgdY5_info;
           P64[Hp - 8] = _sgdY1::P64;
           P64[Hp] = _sgdY2::P64;
           R2 = _sgdY0::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgdY3::P64;
           P64[Sp - 8] = _sgdY4::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose4_info" {
     Data.Functor.Compose.$fApplicativeCompose4_info:
         const Data.Functor.Compose.$fApplicativeCompose4_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.630636165 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose5_closure" {
     Data.Functor.Compose.$fApplicativeCompose5_closure:
         const Data.Functor.Compose.$fApplicativeCompose5_info;
 },
 sat_sgdYa_entry() //  [R1]
         { []
         }
     {offset
       cggxW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggxX; else goto cggxY;
       cggxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggxY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYa_info" {
     sat_sgdYa_info:
         const sat_sgdYa_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose5_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cggxZ: // global
           _sgdY9::P64 = R5;
           _sgdY8::P64 = R4;
           _sgdY7::P64 = R3;
           _sgdY6::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggy0; else goto cggy1;
       cggy1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggy3; else goto cggy2;
       cggy3: // global
           HpAlloc = 24;
           goto cggy0;
       cggy0: // global
           R5 = _sgdY9::P64;
           R4 = _sgdY8::P64;
           R3 = _sgdY7::P64;
           R2 = _sgdY6::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose5_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggy2: // global
           I64[Hp - 16] = sat_sgdYa_info;
           P64[Hp] = _sgdY7::P64;
           R2 = _sgdY6::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgdY8::P64;
           P64[Sp - 8] = _sgdY9::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose5_info" {
     Data.Functor.Compose.$fApplicativeCompose5_info:
         const Data.Functor.Compose.$fApplicativeCompose5_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.636693433 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose6_closure" {
     Data.Functor.Compose.$fApplicativeCompose6_closure:
         const Data.Functor.Compose.$fApplicativeCompose6_info;
 },
 sat_sgdYe_entry() //  [R1]
         { []
         }
     {offset
       cggym: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggyn; else goto cggyo;
       cggyn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggyo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYe_info" {
     sat_sgdYe_info:
         const sat_sgdYe_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cggyp: // global
           _sgdYd::P64 = R4;
           _sgdYc::P64 = R3;
           _sgdYb::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cggyq; else goto cggyr;
       cggyr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggyt; else goto cggys;
       cggyt: // global
           HpAlloc = 32;
           goto cggyq;
       cggyq: // global
           R4 = _sgdYd::P64;
           R3 = _sgdYc::P64;
           R2 = _sgdYb::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggys: // global
           I64[Hp - 24] = sat_sgdYe_info;
           P64[Hp - 8] = _sgdYc::P64;
           P64[Hp] = _sgdYd::P64;
           R2 = _sgdYb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose6_info" {
     Data.Functor.Compose.$fApplicativeCompose6_info:
         const Data.Functor.Compose.$fApplicativeCompose6_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.643207379 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure" {
     Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure:
         const Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info;
 },
 sat_sgdYi_entry() //  [R1]
         { []
         }
     {offset
       cggyN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggyO; else goto cggyP;
       cggyO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggyP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYi_info" {
     sat_sgdYi_info:
         const sat_sgdYi_entry;
         const 1;
         const 16;
 },
 sat_sgdYh_entry() //  [R1]
         { []
         }
     {offset
       cggyU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggyV; else goto cggyW;
       cggyV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggyW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYh_info" {
     sat_sgdYh_info:
         const sat_sgdYh_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cggyX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cggz1; else goto cggz0;
       cggz1: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggz0: // global
           I64[Hp - 40] = sat_sgdYi_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgdYh_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFunctorCompose_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info" {
     Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info:
         const Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.649900856 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose3_closure" {
     Data.Functor.Compose.$fApplicativeCompose3_closure:
         const Data.Functor.Compose.$fApplicativeCompose3_info;
 },
 Data.Functor.Compose.$fApplicativeCompose3_entry() //  [R3]
         { []
         }
     {offset
       cggzi: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose3_info" {
     Data.Functor.Compose.$fApplicativeCompose3_info:
         const Data.Functor.Compose.$fApplicativeCompose3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.65580006 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose2_closure" {
     Data.Functor.Compose.$fApplicativeCompose2_closure:
         const Data.Functor.Compose.$fApplicativeCompose2_info;
 },
 sat_sgdYs_entry() //  [R1]
         { []
         }
     {offset
       cggzD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggzE; else goto cggzF;
       cggzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cggzB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYs_info" {
     sat_sgdYs_info:
         const sat_sgdYs_entry;
         const 1;
         const 16;
 },
 _cggzB() //  [R1]
         { []
         }
     {offset
       cggzB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Functor.Compose.$fApplicativeCompose3_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggzB_info" {
     block_cggzB_info:
         const _cggzB;
         const 0;
         const 30;
 },
 sat_sgdYt_entry() //  [R1]
         { []
         }
     {offset
       cggzL: // global
           _sgdYt::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggzM; else goto cggzN;
       cggzN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggzP; else goto cggzO;
       cggzP: // global
           HpAlloc = 24;
           goto cggzM;
       cggzM: // global
           R1 = _sgdYt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggzO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdYt::P64;
           _sgdYl::P64 = P64[_sgdYt::P64 + 16];
           _sgdYm::P64 = P64[_sgdYt::P64 + 24];
           _sgdYn::P64 = P64[_sgdYt::P64 + 32];
           I64[Hp - 16] = sat_sgdYs_info;
           P64[Hp] = _sgdYm::P64;
           I64[Sp - 40] = block_cggzJ_info;
           R2 = _sgdYl::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgdYn::P64;
           Sp = Sp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYt_info" {
     sat_sgdYt_info:
         const sat_sgdYt_entry;
         const 3;
         const 15;
 },
 _cggzJ() //  [R1]
         { []
         }
     {offset
       cggzJ: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggzJ_info" {
     block_cggzJ_info:
         const _cggzJ;
         const 2;
         const 30;
 },
 sat_sgdYp_entry() //  [R1]
         { []
         }
     {offset
       cggzX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggzY; else goto cggzZ;
       cggzY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggzZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYp_info" {
     sat_sgdYp_info:
         const sat_sgdYp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose2_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cggA0: // global
           _sgdYo::P64 = R5;
           _sgdYn::P64 = R4;
           _sgdYm::P64 = R3;
           _sgdYl::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggA1; else goto cggA2;
       cggA2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cggA4; else goto cggA3;
       cggA4: // global
           HpAlloc = 64;
           goto cggA1;
       cggA1: // global
           R5 = _sgdYo::P64;
           R4 = _sgdYn::P64;
           R3 = _sgdYm::P64;
           R2 = _sgdYl::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggA3: // global
           I64[Hp - 56] = sat_sgdYt_info;
           P64[Hp - 40] = _sgdYl::P64;
           P64[Hp - 32] = _sgdYm::P64;
           P64[Hp - 24] = _sgdYn::P64;
           I64[Hp - 16] = sat_sgdYp_info;
           P64[Hp] = _sgdYm::P64;
           R2 = _sgdYl::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = _sgdYo::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose2_info" {
     Data.Functor.Compose.$fApplicativeCompose2_info:
         const Data.Functor.Compose.$fApplicativeCompose2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.668423324 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose1_closure" {
     Data.Functor.Compose.$fApplicativeCompose1_closure:
         const Data.Functor.Compose.$fApplicativeCompose1_info;
 },
 sat_sgdYy_entry() //  [R1]
         { []
         }
     {offset
       cggAD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggAE; else goto cggAF;
       cggAE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggAF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.const_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYy_info" {
     sat_sgdYy_info:
         const sat_sgdYy_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose1_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cggAG: // global
           _sgdYx::P64 = R5;
           _sgdYw::P64 = R4;
           _sgdYv::P64 = R3;
           _sgdYu::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cggAH; else goto cggAI;
       cggAI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggAK; else goto cggAJ;
       cggAK: // global
           HpAlloc = 24;
           goto cggAH;
       cggAH: // global
           R5 = _sgdYx::P64;
           R4 = _sgdYw::P64;
           R3 = _sgdYv::P64;
           R2 = _sgdYu::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggAJ: // global
           I64[Hp - 16] = sat_sgdYy_info;
           P64[Hp] = _sgdYv::P64;
           R2 = _sgdYu::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgdYw::P64;
           P64[Sp - 8] = _sgdYx::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose1_info" {
     Data.Functor.Compose.$fApplicativeCompose1_info:
         const Data.Functor.Compose.$fApplicativeCompose1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.676106249 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose_closure" {
     Data.Functor.Compose.$fApplicativeCompose_closure:
         const Data.Functor.Compose.$fApplicativeCompose_info;
 },
 sat_sgdYG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggB4: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose1_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdYG_info" {
     sat_sgdYG_info:
         const sat_sgdYG_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdYF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggBc: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose2_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdYF_info" {
     sat_sgdYF_info:
         const sat_sgdYF_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdYE_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggBk: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fApplicativeCompose4_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdYE_info" {
     sat_sgdYE_info:
         const sat_sgdYE_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgdYD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggBs: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose5_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdYD_info" {
     sat_sgdYD_info:
         const sat_sgdYD_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgdYC_entry() //  [R1, R2]
         { []
         }
     {offset
       cggBA: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fApplicativeCompose6_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdYC_info" {
     sat_sgdYC_info:
         const sat_sgdYC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgdYB_entry() //  [R1]
         { []
         }
     {offset
       cggBH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggBI; else goto cggBJ;
       cggBI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggBJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYB_info" {
     sat_sgdYB_info:
         const sat_sgdYB_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cggBL: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cggBP; else goto cggBO;
       cggBP: // global
           HpAlloc = 208;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fApplicativeCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggBO: // global
           I64[Hp - 200] = sat_sgdYG_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgdYF_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgdYE_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sgdYD_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sgdYC_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgdYB_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 103;
           P64[Hp - 24] = Hp - 126;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 198;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose_info" {
     Data.Functor.Compose.$fApplicativeCompose_info:
         const Data.Functor.Compose.$fApplicativeCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.689723683 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info;
 },
 sat_sgdYJ_entry() //  [R1]
         { []
         }
     {offset
       cggCs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggCt; else goto cggCu;
       cggCt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggCu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYJ_info" {
     sat_sgdYJ_info:
         const sat_sgdYJ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cggCv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggCz; else goto cggCy;
       cggCz: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggCy: // global
           I64[Hp - 16] = sat_sgdYJ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fApplicativeCompose_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info" {
     Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info:
         const Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.698571575 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$csome_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$csome_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$csome_info;
 },
 sat_sgdYQ_entry() //  [R1]
         { []
         }
     {offset
       cggD6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggD7; else goto cggD8;
       cggD7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggD8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYQ_info" {
     sat_sgdYQ_info:
         const sat_sgdYQ_entry;
         const 1;
         const 16;
 },
 sat_sgdYR_entry() //  [R1]
         { []
         }
     {offset
       cggD9: // global
           _sgdYR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cggDa; else goto cggDb;
       cggDb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggDd; else goto cggDc;
       cggDd: // global
           HpAlloc = 24;
           goto cggDa;
       cggDa: // global
           R1 = _sgdYR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggDc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdYR::P64;
           _sgdYL::P64 = P64[_sgdYR::P64 + 16];
           _sgdYO::P64 = P64[_sgdYR::P64 + 24];
           I64[Hp - 16] = sat_sgdYQ_info;
           P64[Hp] = _sgdYL::P64;
           R2 = _sgdYO::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYR_info" {
     sat_sgdYR_info:
         const sat_sgdYR_entry;
         const 2;
         const 18;
 },
 sat_sgdYS_entry() //  [R1]
         { []
         }
     {offset
       cggDe: // global
           _sgdYS::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggDf; else goto cggDg;
       cggDg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggDi; else goto cggDh;
       cggDi: // global
           HpAlloc = 32;
           goto cggDf;
       cggDf: // global
           R1 = _sgdYS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdYS::P64;
           _sgdYK::P64 = P64[_sgdYS::P64 + 16];
           _sgdYL::P64 = P64[_sgdYS::P64 + 24];
           _sgdYN::P64 = P64[_sgdYS::P64 + 32];
           _sgdYO::P64 = P64[_sgdYS::P64 + 40];
           I64[Hp - 24] = sat_sgdYR_info;
           P64[Hp - 8] = _sgdYL::P64;
           P64[Hp] = _sgdYO::P64;
           R2 = _sgdYK::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgdYN::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYS_info" {
     sat_sgdYS_info:
         const sat_sgdYS_entry;
         const 4;
         const 15;
 },
 sat_sgdYP_entry() //  [R1]
         { []
         }
     {offset
       cggDn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggDo; else goto cggDp;
       cggDo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggDp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYP_info" {
     sat_sgdYP_info:
         const sat_sgdYP_entry;
         const 1;
         const 16;
 },
 some_v_sgdYN_entry() //  [R1]
         { []
         }
     {offset
       cggDq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cggDr; else goto cggDs;
       cggDr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggDs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cggCQ_info;
           _sgdYK::P64 = P64[R1 + 16];
           R2 = _sgdYK::P64;
           P64[Sp - 48] = _sgdYK::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = R1;
           Sp = Sp - 56;
           call GHC.Base.$p1Alternative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sgdYN_info" {
     some_v_sgdYN_info:
         const some_v_sgdYN_entry;
         const 3;
         const 15;
 },
 _cggCQ() //  [R1]
         { []
         }
     {offset
       cggCQ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cggDv; else goto cggDu;
       cggDv: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cggDu: // global
           I64[Hp - 64] = sat_sgdYS_info;
           P64[Hp - 48] = P64[Sp + 8];
           _sgdYL::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgdYL::P64;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_sgdYP_info;
           P64[Hp] = _sgdYL::P64;
           R2 = R1;
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = Hp - 16;
           P64[Sp + 32] = Hp - 64;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cggCQ_info" {
     block_cggCQ_info:
         const _cggCQ;
         const 4;
         const 30;
 },
 Data.Functor.Compose.$fAlternativeCompose_$csome_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cggDw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggDA; else goto cggDz;
       cggDA: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggDz: // global
           I64[Hp - 32] = some_v_sgdYN_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$csome_info" {
     Data.Functor.Compose.$fAlternativeCompose_$csome_info:
         const Data.Functor.Compose.$fAlternativeCompose_$csome_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.716164915 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$cmany_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$cmany_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$cmany_info;
 },
 $dApplicative1_sgdYX_entry() //  [R1]
         { []
         }
     {offset
       cggEm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggEn; else goto cggEo;
       cggEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggEo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative1_sgdYX_info" {
     $dApplicative1_sgdYX_info:
         const $dApplicative1_sgdYX_entry;
         const 1;
         const 16;
 },
 sat_sgdZ0_entry() //  [R1]
         { []
         }
     {offset
       cggEx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggEy; else goto cggEz;
       cggEy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggEz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdZ0_info" {
     sat_sgdZ0_info:
         const sat_sgdZ0_entry;
         const 1;
         const 16;
 },
 sat_sgdZ1_entry() //  [R1]
         { []
         }
     {offset
       cggEA: // global
           _sgdZ1::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cggEB; else goto cggEC;
       cggEC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggEE; else goto cggED;
       cggEE: // global
           HpAlloc = 24;
           goto cggEB;
       cggEB: // global
           R1 = _sgdZ1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggED: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdZ1::P64;
           _sgdYU::P64 = P64[_sgdZ1::P64 + 16];
           _sgdYX::P64 = P64[_sgdZ1::P64 + 24];
           I64[Hp - 16] = sat_sgdZ0_info;
           P64[Hp] = _sgdYU::P64;
           R2 = _sgdYX::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdZ1_info" {
     sat_sgdZ1_info:
         const sat_sgdZ1_entry;
         const 2;
         const 18;
 },
 sat_sgdYY_entry() //  [R1]
         { []
         }
     {offset
       cggEN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggEO; else goto cggEP;
       cggEO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggEP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYY_info" {
     sat_sgdYY_info:
         const sat_sgdYY_entry;
         const 1;
         const 16;
 },
 sat_sgdYZ_entry() //  [R1]
         { []
         }
     {offset
       cggEQ: // global
           _sgdYZ::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cggER; else goto cggES;
       cggES: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggEU; else goto cggET;
       cggEU: // global
           HpAlloc = 24;
           goto cggER;
       cggER: // global
           R1 = _sgdYZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggET: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdYZ::P64;
           _sgdYU::P64 = P64[_sgdYZ::P64 + 16];
           _sgdYV::P64 = P64[_sgdYZ::P64 + 24];
           _sgdYW::P64 = P64[_sgdYZ::P64 + 32];
           _sgdYX::P64 = P64[_sgdYZ::P64 + 40];
           I64[Hp - 16] = sat_sgdYY_info;
           P64[Hp] = _sgdYU::P64;
           R2 = _sgdYX::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgdYV::P64;
           P64[Sp - 24] = _sgdYW::P64;
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdYZ_info" {
     sat_sgdYZ_info:
         const sat_sgdYZ_entry;
         const 4;
         const 15;
 },
 many_v_sgdYW_entry() //  [R1]
         { []
         }
     {offset
       cggEV: // global
           _sgdYW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggEW; else goto cggEX;
       cggEX: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cggEZ; else goto cggEY;
       cggEZ: // global
           HpAlloc = 104;
           goto cggEW;
       cggEW: // global
           R1 = _sgdYW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggEY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgdYW::P64;
           _sgdYT::P64 = P64[_sgdYW::P64 + 16];
           _sgdYU::P64 = P64[_sgdYW::P64 + 24];
           _sgdYV::P64 = P64[_sgdYW::P64 + 32];
           I64[Hp - 96] = $dApplicative1_sgdYX_info;
           P64[Hp - 80] = _sgdYT::P64;
           I64[Hp - 72] = sat_sgdZ1_info;
           P64[Hp - 56] = _sgdYU::P64;
           _cggEi::P64 = Hp - 96;
           P64[Hp - 48] = _cggEi::P64;
           I64[Hp - 40] = sat_sgdYZ_info;
           P64[Hp - 24] = _sgdYU::P64;
           P64[Hp - 16] = _sgdYV::P64;
           P64[Hp - 8] = _sgdYW::P64;
           P64[Hp] = _cggEi::P64;
           R2 = _sgdYT::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sgdYW_info" {
     many_v_sgdYW_info:
         const many_v_sgdYW_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fAlternativeCompose_$cmany_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cggF0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggF4; else goto cggF3;
       cggF4: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$cmany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggF3: // global
           I64[Hp - 32] = many_v_sgdYW_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$cmany_info" {
     Data.Functor.Compose.$fAlternativeCompose_$cmany_info:
         const Data.Functor.Compose.$fAlternativeCompose_$cmany_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.732485774 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_closure" {
     Data.Functor.Compose.$fAlternativeCompose_closure:
         const Data.Functor.Compose.$fAlternativeCompose_info;
 },
 sat_sgdZ8_entry() //  [R1, R2]
         { []
         }
     {offset
       cggFK: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fAlternativeCompose_$cmany_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdZ8_info" {
     sat_sgdZ8_info:
         const sat_sgdZ8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgdZ7_entry() //  [R1, R2]
         { []
         }
     {offset
       cggFS: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fAlternativeCompose_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdZ7_info" {
     sat_sgdZ7_info:
         const sat_sgdZ7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgdZ6_entry() //  [R1]
         { []
         }
     {offset
       cggFZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggG0; else goto cggG1;
       cggG0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggG1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdZ6_info" {
     sat_sgdZ6_info:
         const sat_sgdZ6_entry;
         const 1;
         const 16;
 },
 sat_sgdZ5_entry() //  [R1]
         { []
         }
     {offset
       cggG6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggG7; else goto cggG8;
       cggG7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggG8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdZ5_info" {
     sat_sgdZ5_info:
         const sat_sgdZ5_entry;
         const 1;
         const 16;
 },
 sat_sgdZ4_entry() //  [R1]
         { []
         }
     {offset
       cggGd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggGe; else goto cggGf;
       cggGe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggGf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgdZ4_info" {
     sat_sgdZ4_info:
         const sat_sgdZ4_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fAlternativeCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cggGh: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cggGl; else goto cggGk;
       cggGl: // global
           HpAlloc = 176;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggGk: // global
           I64[Hp - 168] = sat_sgdZ8_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_sgdZ7_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sgdZ6_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sgdZ5_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgdZ4_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 96;
           P64[Hp - 16] = Hp - 120;
           P64[Hp - 8] = Hp - 143;
           P64[Hp] = Hp - 167;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_info" {
     Data.Functor.Compose.$fAlternativeCompose_info:
         const Data.Functor.Compose.$fAlternativeCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.744700398 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose1_closure" {
     Data.Functor.Compose.$fGeneric1Compose1_closure:
         const Data.Functor.Compose.$fGeneric1Compose1_info;
 },
 Data.Functor.Compose.$fGeneric1Compose1_entry() //  [R2, R3]
         { []
         }
     {offset
       cggGS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cggGT; else goto cggGU;
       cggGT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggGU: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Generics.$fGeneric1:.:2_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose1_info" {
     Data.Functor.Compose.$fGeneric1Compose1_info:
         const Data.Functor.Compose.$fGeneric1Compose1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.748148298 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose3_closure" {
     Data.Functor.Compose.$fGeneric1Compose3_closure:
         const Data.Functor.Compose.$fGeneric1Compose3_info;
 },
 Data.Functor.Compose.$fGeneric1Compose3_entry() //  [R2]
         { []
         }
     {offset
       cggH4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose3_info" {
     Data.Functor.Compose.$fGeneric1Compose3_info:
         const Data.Functor.Compose.$fGeneric1Compose3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.751484691 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose2_closure" {
     Data.Functor.Compose.$fGeneric1Compose2_closure:
         const Data.Functor.Compose.$fGeneric1Compose2_info;
 },
 Data.Functor.Compose.$fGeneric1Compose2_entry() //  [R2, R3]
         { []
         }
     {offset
       cggHf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cggHg; else goto cggHh;
       cggHg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggHh: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Functor.Compose.$fGeneric1Compose3_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose2_info" {
     Data.Functor.Compose.$fGeneric1Compose2_info:
         const Data.Functor.Compose.$fGeneric1Compose2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.755704763 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose_closure" {
     Data.Functor.Compose.$fGeneric1Compose_closure:
         const Data.Functor.Compose.$fGeneric1Compose_info;
 },
 sat_sgdZg_entry() //  [R1, R2]
         { []
         }
     {offset
       cggHw: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fGeneric1Compose1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdZg_info" {
     sat_sgdZg_info:
         const sat_sgdZg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgdZf_entry() //  [R1, R2]
         { []
         }
     {offset
       cggHE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fGeneric1Compose2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgdZf_info" {
     sat_sgdZf_info:
         const sat_sgdZf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fGeneric1Compose_entry() //  [R2]
         { []
         }
     {offset
       cggHI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggHM; else goto cggHL;
       cggHM: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggHL: // global
           I64[Hp - 48] = sat_sgdZg_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sgdZf_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Generics.C:Generic1_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose_info" {
     Data.Functor.Compose.$fGeneric1Compose_info:
         const Data.Functor.Compose.$fGeneric1Compose_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.762345922 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose1_closure" {
     Data.Functor.Compose.$fGenericCompose1_closure:
         const Data.Functor.Compose.$fGenericCompose1_info;
 },
 Data.Functor.Compose.$fGenericCompose1_entry() //  [R2]
         { []
         }
     {offset
       cggI4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGenericCompose1_info" {
     Data.Functor.Compose.$fGenericCompose1_info:
         const Data.Functor.Compose.$fGenericCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.765597219 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose2_closure" {
     Data.Functor.Compose.$fGenericCompose2_closure:
         const Data.Functor.Compose.$fGenericCompose2_info;
 },
 Data.Functor.Compose.$fGenericCompose2_entry() //  [R2]
         { []
         }
     {offset
       cggIf: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGenericCompose2_info" {
     Data.Functor.Compose.$fGenericCompose2_info:
         const Data.Functor.Compose.$fGenericCompose2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.769626499 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose_closure" {
     Data.Functor.Compose.$fGenericCompose_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Compose.$fGenericCompose2_closure+1;
         const Data.Functor.Compose.$fGenericCompose1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.771644797 UTC

[section ""data" . Data.Functor.Compose.getCompose1_closure" {
     Data.Functor.Compose.getCompose1_closure:
         const Data.Functor.Compose.getCompose1_info;
 },
 Data.Functor.Compose.getCompose1_entry() //  [R2]
         { []
         }
     {offset
       cggIr: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.getCompose1_info" {
     Data.Functor.Compose.getCompose1_info:
         const Data.Functor.Compose.getCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.775042402 UTC

[section ""data" . Data.Functor.Compose.getCompose_closure" {
     Data.Functor.Compose.getCompose_closure:
         const Data.Functor.Compose.getCompose_info;
 },
 Data.Functor.Compose.getCompose_entry() //  [R2]
         { []
         }
     {offset
       cggIC: // global
           R2 = R2;
           call Data.Functor.Compose.getCompose1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.getCompose_info" {
     Data.Functor.Compose.getCompose_info:
         const Data.Functor.Compose.getCompose_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.778521146 UTC

[section ""cstring" . $cCompose1_rgdPU_bytes" {
     $cCompose1_rgdPU_bytes:
         I8[] [103,101,116,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.780696653 UTC

[section ""data" . $cCompose2_rgdPV_closure" {
     $cCompose2_rgdPV_closure:
         const $cCompose2_rgdPV_info;
         const 0;
         const 0;
         const 0;
 },
 $cCompose2_rgdPV_entry() //  [R1]
         { []
         }
     {offset
       cggIQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggIR; else goto cggIS;
       cggIR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggIS: // global
           (_cggIN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cggIN::I64 == 0) goto cggIP; else goto cggIO;
       cggIP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cggIO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cggIN::I64;
           R2 = $cCompose1_rgdPU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cCompose2_rgdPV_info" {
     $cCompose2_rgdPV_info:
         const $cCompose2_rgdPV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.784251145 UTC

[section ""data" . $cCompose3_rgdPW_closure" {
     $cCompose3_rgdPW_closure:
         const :_con_info;
         const $cCompose2_rgdPV_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.788174499 UTC

[section ""data" . go61_rgdPX_closure" {
     go61_rgdPX_closure:
         const go61_rgdPX_info;
         const 0;
 },
 go61_rgdPX_entry() //  [R2, R3]
         { []
         }
     {offset
       cggJc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggJd; else goto uggJQ;
       cggJd: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgdPX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uggJQ: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cggJ2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgdPX_info" {
     go61_rgdPX_info:
         const go61_rgdPX_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sge5q_srt+416;
 },
 _cggJ2() //  []
         { []
         }
     {offset
       cggJ2: // global
           _sgdZk::P64 = P64[Sp];
           I64[Sp] = block_cggJ5_info;
           R1 = _sgdZk::P64;
           if (R1 & 7 != 0) goto uggJU; else goto cggJ6;
       uggJU: // global
           call _cggJ5(R1) args: 0, res: 0, upd: 0;
       cggJ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cggJ5() //  [R1]
         { []
         }
     {offset
       cggJ5: // global
           if (R1 & 7 == 1) goto uggJR; else goto cggJa;
       uggJR: // global
           Sp = Sp + 16;
           call _cggJs() args: 0, res: 0, upd: 0;
       cggJa: // global
           I64[Sp - 8] = block_cggJk_info;
           _sgdZn::P64 = P64[R1 + 6];
           _sgdZo::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgdZo::P64;
           P64[Sp + 8] = _sgdZn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uggJV; else goto cggJm;
       uggJV: // global
           call _cggJk(R1) args: 0, res: 0, upd: 0;
       cggJm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggJ5_info" {
     block_cggJ5_info:
         const _cggJ5;
         const 1;
         const 21474836510;
         const Sge5q_srt+416;
 },
 _cggJk() //  [R1]
         { []
         }
     {offset
       cggJk: // global
           if (R1 & 7 == 1) goto uggJS; else goto cggJx;
       uggJS: // global
           Sp = Sp + 24;
           call _cggJs() args: 0, res: 0, upd: 0;
       cggJx: // global
           I64[Sp - 8] = block_cggJv_info;
           _sgdZq::P64 = P64[R1 + 6];
           _sgdZr::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgdZr::P64;
           P64[Sp + 16] = _sgdZq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uggJY; else goto cggJy;
       uggJY: // global
           call _cggJv(R1) args: 0, res: 0, upd: 0;
       cggJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggJk_info" {
     block_cggJk_info:
         const _cggJk;
         const 2;
         const 21474836510;
         const Sge5q_srt+416;
 },
 _cggJs() //  []
         { []
         }
     {offset
       cggJs: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cggJv() //  [R1]
         { []
         }
     {offset
       cggJv: // global
           I64[Sp] = block_cggJC_info;
           R3 = Data.Functor.Compose.$fDataCompose6_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggJv_info" {
     block_cggJv_info:
         const _cggJv;
         const 3;
         const 21474836510;
         const Sge5q_srt+416;
 },
 _cggJC() //  [R1]
         { []
         }
     {offset
       cggJC: // global
           if (R1 & 7 == 1) goto cggJJ; else goto cggJN;
       cggJJ: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cggJ2() args: 0, res: 0, upd: 0;
       cggJN: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggJC_info" {
     block_cggJC_info:
         const _cggJC;
         const 3;
         const 21474836510;
         const Sge5q_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.800547241 UTC

[section ""data" . $cCompose4_rgdPY_closure" {
     $cCompose4_rgdPY_closure:
         const Data.Data.AlgConstr_con_info;
         const $cCompose5_rgdPZ_closure;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$fDataCompose5_closure" {
     Data.Functor.Compose.$fDataCompose5_closure:
         const :_con_info;
         const Data.Functor.Compose.$cCompose_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$fDataCompose4_closure" {
     Data.Functor.Compose.$fDataCompose4_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Functor.Compose.$fDataCompose5_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$tCompose_closure" {
     Data.Functor.Compose.$tCompose_closure:
         const Data.Data.DataType_con_info;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Functor.Compose.$fDataCompose4_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$cCompose_closure" {
     Data.Functor.Compose.$cCompose_closure:
         const Data.Data.Constr_con_info;
         const $cCompose4_rgdPY_closure+1;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const $cCompose3_rgdPW_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Compose.$tCompose_closure+1;
         const 0;
 },
 section ""data" . $cCompose5_rgdPZ_closure" {
     $cCompose5_rgdPZ_closure:
         const $cCompose5_rgdPZ_info;
         const 0;
         const 0;
         const 0;
 },
 $cCompose5_rgdPZ_entry() //  [R1]
         { []
         }
     {offset
       cggKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggKG; else goto cggKH;
       cggKG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggKH: // global
           (_cggKC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cggKC::I64 == 0) goto cggKE; else goto cggKD;
       cggKE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cggKD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cggKC::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Functor.Compose.$fDataCompose5_closure+2;
           Sp = Sp - 16;
           call go61_rgdPX_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cCompose5_rgdPZ_info" {
     $cCompose5_rgdPZ_info:
         const $cCompose5_rgdPZ_entry;
         const 0;
         const 55834574869;
         const Sge5q_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.808008942 UTC

[section ""cstring" . Data.Functor.Compose.$trModule4_bytes" {
     Data.Functor.Compose.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.80968012 UTC

[section ""data" . Data.Functor.Compose.$trModule3_closure" {
     Data.Functor.Compose.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.811266683 UTC

[section ""cstring" . Data.Functor.Compose.$trModule2_bytes" {
     Data.Functor.Compose.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.812903879 UTC

[section ""data" . Data.Functor.Compose.$trModule1_closure" {
     Data.Functor.Compose.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.814841126 UTC

[section ""data" . Data.Functor.Compose.$trModule_closure" {
     Data.Functor.Compose.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Compose.$trModule3_closure+1;
         const Data.Functor.Compose.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.81650438 UTC

[section ""data" . $krep_rgdQ0_closure" {
     $krep_rgdQ0_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.818191234 UTC

[section ""data" . $krep1_rgdQ1_closure" {
     $krep1_rgdQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgdQ0_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.819790055 UTC

[section ""data" . $krep2_rgdQ2_closure" {
     $krep2_rgdQ2_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.821511547 UTC

[section ""data" . $krep3_rgdQ3_closure" {
     $krep3_rgdQ3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rgdQ2_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.823195377 UTC

[section ""data" . $krep4_rgdQ4_closure" {
     $krep4_rgdQ4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgdQ0_closure+2;
         const $krep2_rgdQ2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.824885083 UTC

[section ""data" . $krep5_rgdQ5_closure" {
     $krep5_rgdQ5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rgdQ4_closure+4;
         const $krep1_rgdQ1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.82696524 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose9_closure" {
     Data.Functor.Compose.$fDataCompose9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rgdQ3_closure+4;
         const $krep5_rgdQ5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.829267218 UTC

[section ""data" . $krep6_rgdQ6_closure" {
     $krep6_rgdQ6_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.830854437 UTC

[section ""data" . $krep7_rgdQ7_closure" {
     $krep7_rgdQ7_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.832524108 UTC

[section ""data" . $krep8_rgdQ8_closure" {
     $krep8_rgdQ8_closure:
         const GHC.Types.KindRepVar_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.834465946 UTC

[section ""data" . $krep9_rgdQ9_closure" {
     $krep9_rgdQ9_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep6_rgdQ6_closure+2;
         const $krep8_rgdQ8_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.83613547 UTC

[section ""data" . $krep10_rgdQa_closure" {
     $krep10_rgdQa_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep7_rgdQ7_closure+2;
         const $krep9_rgdQ9_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.837843867 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose10_closure" {
     Data.Functor.Compose.$fDataCompose10_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$fDataCompose7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.839549399 UTC

[section ""data" . Data.Functor.Compose.$tcCompose_closure" {
     Data.Functor.Compose.$tcCompose_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Compose.$trModule_closure+1;
         const Data.Functor.Compose.$fDataCompose10_closure+1;
         const Data.Functor.Compose.$fDataCompose9_closure+4;
         const 6729400645769595507;
         const 7487202375031942550;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.841355108 UTC

[section ""data" . $krep11_rgdQb_closure" {
     $krep11_rgdQb_closure:
         const :_con_info;
         const $krep8_rgdQ8_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.843010843 UTC

[section ""data" . $krep12_rgdQc_closure" {
     $krep12_rgdQc_closure:
         const :_con_info;
         const $krep6_rgdQ6_closure+2;
         const $krep11_rgdQb_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.844684529 UTC

[section ""data" . $krep13_rgdQd_closure" {
     $krep13_rgdQd_closure:
         const :_con_info;
         const $krep7_rgdQ7_closure+2;
         const $krep12_rgdQc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.846391635 UTC

[section ""data" . $krep14_rgdQe_closure" {
     $krep14_rgdQe_closure:
         const :_con_info;
         const $krep_rgdQ0_closure+2;
         const $krep13_rgdQd_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.848187886 UTC

[section ""data" . $krep15_rgdQf_closure" {
     $krep15_rgdQf_closure:
         const :_con_info;
         const $krep2_rgdQ2_closure+2;
         const $krep14_rgdQe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.850027715 UTC

[section ""data" . $krep16_rgdQg_closure" {
     $krep16_rgdQg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Compose.$tcCompose_closure+1;
         const $krep15_rgdQf_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.851754587 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose1_closure" {
     Data.Functor.Compose.$tc'Compose1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rgdQa_closure+3;
         const $krep16_rgdQg_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.854593048 UTC

[section ""cstring" . Data.Functor.Compose.$tc'Compose3_bytes" {
     Data.Functor.Compose.$tc'Compose3_bytes:
         I8[] [39,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.85626809 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose2_closure" {
     Data.Functor.Compose.$tc'Compose2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$tc'Compose3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.857982606 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose_closure" {
     Data.Functor.Compose.$tc'Compose_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Compose.$trModule_closure+1;
         const Data.Functor.Compose.$tc'Compose2_closure+1;
         const Data.Functor.Compose.$tc'Compose1_closure+4;
         const 7236514282653524344;
         const 13791541438620948974;
         const 5;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.861906265 UTC

[section ""data" . Data.Functor.Compose.$w$cp1Data_closure" {
     Data.Functor.Compose.$w$cp1Data_closure:
         const Data.Functor.Compose.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Compose.$w$cp1Data_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cggLC: // global
           _sgdZD::P64 = R6;
           _sgdZC::P64 = R5;
           _sgdZB::P64 = R4;
           _sgdZA::P64 = R3;
           _sgdZz::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cggLG; else goto cggLH;
       cggLH: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cggLJ; else goto cggLI;
       cggLJ: // global
           HpAlloc = 80;
           goto cggLG;
       cggLG: // global
           R6 = _sgdZD::P64;
           R5 = _sgdZC::P64;
           R4 = _sgdZB::P64;
           R3 = _sgdZA::P64;
           R2 = _sgdZz::P64;
           R1 = Data.Functor.Compose.$w$cp1Data_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggLI: // global
           I64[Hp - 72] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 64] = _sgdZD::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sgdZC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           I64[Sp - 32] = block_cggLv_info;
           R6 = 2;
           R5 = Data.Functor.Compose.$fDataCompose10_closure+1;
           R4 = Data.Functor.Compose.$trModule_closure+1;
           R3 = 7487202375031942550;
           R2 = 6729400645769595507;
           P64[Sp - 48] = Data.Functor.Compose.$fDataCompose9_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sgdZz::P64;
           P64[Sp - 16] = _sgdZA::P64;
           P64[Sp - 8] = _sgdZB::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cp1Data_info" {
     Data.Functor.Compose.$w$cp1Data_info:
         const Data.Functor.Compose.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const Sge5q_srt+456;
 },
 _cggLv() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cggLv: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cggLw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cggLv_info" {
     block_cggLv_info:
         const _cggLv;
         const 3;
         const 4294967326;
         const Sge5q_srt+456;
 },
 _cggLw() //  []
         { []
         }
     {offset
       cggLw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cggLM; else goto cggLL;
       cggLM: // global
           HpAlloc = 48;
           I64[Sp] = block_cggLw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cggLL: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cggLA_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggLw_info" {
     block_cggLw_info:
         const _cggLw;
         const 1096;
         const 4294967326;
         const Sge5q_srt+456;
 },
 _cggLA() //  [R1]
         { []
         }
     {offset
       cggLA: // global
           I64[Sp] = block_cggLF_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggLA_info" {
     block_cggLA_info:
         const _cggLA;
         const 131;
         const 4294967326;
         const Sge5q_srt+456;
 },
 _cggLF() //  [R1]
         { []
         }
     {offset
       cggLF: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggLF_info" {
     block_cggLF_info:
         const _cggLF;
         const 387;
         const 4294967326;
         const Sge5q_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.872351528 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose8_closure" {
     Data.Functor.Compose.$fDataCompose8_closure:
         const Data.Functor.Compose.$fDataCompose8_info;
         const 0;
 },
 Data.Functor.Compose.$fDataCompose8_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cggMo: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Compose.$w$cp1Data_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose8_info" {
     Data.Functor.Compose.$fDataCompose8_info:
         const Data.Functor.Compose.$fDataCompose8_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const Sge5q_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.876241603 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose2_closure" {
     Data.Functor.Compose.$fDataCompose2_closure:
         const Data.Functor.Compose.$fDataCompose2_info;
 },
 Data.Functor.Compose.$fDataCompose2_entry() //  [R2]
         { []
         }
     {offset
       cggMz: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose2_info" {
     Data.Functor.Compose.$fDataCompose2_info:
         const Data.Functor.Compose.$fDataCompose2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.879347888 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose1_closure" {
     Data.Functor.Compose.$fDataCompose1_closure:
         const (,)_con_info;
         const Data.Functor.Compose.$fDataCompose2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.88746183 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapMp_closure" {
     Data.Functor.Compose.$w$cgmapMp_closure:
         const Data.Functor.Compose.$w$cgmapMp_info;
 },
 lvl8_sge02_entry() //  [R1]
         { []
         }
     {offset
       cggMP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggMQ; else goto cggMR;
       cggMQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggMR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sge02_info" {
     lvl8_sge02_info:
         const lvl8_sge02_entry;
         const 1;
         const 16;
 },
 sat_sge0p_entry() //  [R1, R2]
         { []
         }
     {offset
       cggN4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggN5; else goto cggN6;
       cggN5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggN6: // global
           I64[Sp - 24] = block_cggN1_info;
           _sge02::P64 = P64[R1 + 7];
           _sge03::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sge02::P64;
           P64[Sp - 8] = _sge03::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uggNo; else goto cggN2;
       uggNo: // global
           call _cggN1(R1) args: 0, res: 0, upd: 0;
       cggN2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge0p_info" {
     sat_sge0p_info:
         const sat_sge0p_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cggN1() //  [R1]
         { []
         }
     {offset
       cggN1: // global
           I64[Sp - 8] = block_cggN9_info;
           _sge0m::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sge0m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uggNn; else goto cggNb;
       uggNn: // global
           call _cggN9(R1) args: 0, res: 0, upd: 0;
       cggNb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggN1_info" {
     block_cggN1_info:
         const _cggN1;
         const 2;
         const 30;
 },
 _cggN9() //  [R1]
         { []
         }
     {offset
       cggN9: // global
           if (R1 & 7 == 1) goto cggNh; else goto cggNl;
       cggNh: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggNl: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggN9_info" {
     block_cggN9_info:
         const _cggN9;
         const 3;
         const 30;
 },
 sat_sge0h_entry() //  [R1]
         { []
         }
     {offset
       cggNK: // global
           _sge0h::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cggNL; else goto cggNM;
       cggNM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggNO; else goto cggNN;
       cggNO: // global
           HpAlloc = 56;
           goto cggNL;
       cggNL: // global
           R1 = _sge0h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggNN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge0h::P64;
           _sge01::P64 = P64[_sge0h::P64 + 16];
           _sge03::P64 = P64[_sge0h::P64 + 24];
           _sge08::P64 = P64[_sge0h::P64 + 32];
           _sge09::P64 = P64[_sge0h::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sge08::P64;
           P64[Hp - 24] = _sge01::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sge09::P64;
           R2 = _sge03::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge0h_info" {
     sat_sge0h_info:
         const sat_sge0h_entry;
         const 4;
         const 15;
 },
 sat_sge0d_entry() //  [R1, R2]
         { []
         }
     {offset
       cggO0: // global
           _sge0a::P64 = R2;
           _sge0d::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cggO1; else goto cggO2;
       cggO2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggO4; else goto cggO3;
       cggO4: // global
           HpAlloc = 56;
           goto cggO1;
       cggO1: // global
           R2 = _sge0a::P64;
           R1 = _sge0d::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggO3: // global
           _sge03::P64 = P64[_sge0d::P64 + 7];
           _sge08::P64 = P64[_sge0d::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sge08::P64;
           P64[Hp - 24] = _sge0a::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sge03::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge0d_info" {
     sat_sge0d_info:
         const sat_sge0d_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sge0e_entry() //  [R1]
         { []
         }
     {offset
       cggO5: // global
           _sge0e::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggO6; else goto cggO7;
       cggO7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggO9; else goto cggO8;
       cggO9: // global
           HpAlloc = 24;
           goto cggO6;
       cggO6: // global
           R1 = _sge0e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggO8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge0e::P64;
           _sge03::P64 = P64[_sge0e::P64 + 16];
           _sge04::P64 = P64[_sge0e::P64 + 24];
           _sge08::P64 = P64[_sge0e::P64 + 32];
           I64[Hp - 16] = sat_sge0d_info;
           P64[Hp - 8] = _sge03::P64;
           P64[Hp] = _sge08::P64;
           R2 = _sge03::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sge04::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge0e_info" {
     sat_sge0e_info:
         const sat_sge0e_entry;
         const 3;
         const 15;
 },
 sat_sge0i_entry() //  [R1, R2]
         { []
         }
     {offset
       cggOa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cggOb; else goto cggOc;
       cggOb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggOc: // global
           I64[Sp - 40] = block_cggNz_info;
           _sgdZZ::P64 = P64[R1 + 7];
           _sge01::P64 = P64[R1 + 15];
           _sge03::P64 = P64[R1 + 23];
           _sge04::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgdZZ::P64;
           P64[Sp - 24] = _sge01::P64;
           P64[Sp - 16] = _sge03::P64;
           P64[Sp - 8] = _sge04::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uggOg; else goto cggNA;
       uggOg: // global
           call _cggNz(R1) args: 0, res: 0, upd: 0;
       cggNA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge0i_info" {
     sat_sge0i_info:
         const sat_sge0i_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cggNz() //  [R1]
         { []
         }
     {offset
       cggNz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggOf; else goto cggOe;
       cggOf: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggOe: // global
           _sge08::P64 = P64[R1 + 7];
           _sge09::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sge0h_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sge03::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sge03::P64;
           P64[Hp - 48] = _sge08::P64;
           P64[Hp - 40] = _sge09::P64;
           I64[Hp - 32] = sat_sge0e_info;
           P64[Hp - 16] = _sge03::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sge08::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggNz_info" {
     block_cggNz_info:
         const _cggNz;
         const 4;
         const 30;
 },
 sat_sge05_entry() //  [R1]
         { []
         }
     {offset
       cggOl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggOm; else goto cggOn;
       cggOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggOn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge05_info" {
     sat_sge05_info:
         const sat_sge05_entry;
         const 1;
         const 16;
 },
 sat_sge0j_entry() //  [R1]
         { []
         }
     {offset
       cggOo: // global
           _sge0j::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggOp; else goto cggOq;
       cggOq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cggOs; else goto cggOr;
       cggOs: // global
           HpAlloc = 104;
           goto cggOp;
       cggOp: // global
           R1 = _sge0j::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggOr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge0j::P64;
           _sgdZY::P64 = P64[_sge0j::P64 + 16];
           _sgdZZ::P64 = P64[_sge0j::P64 + 24];
           _sge00::P64 = P64[_sge0j::P64 + 32];
           _sge01::P64 = P64[_sge0j::P64 + 40];
           _sge03::P64 = P64[_sge0j::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sge00::P64;
           P64[Hp - 72] = _sgdZY::P64;
           P64[Hp - 64] = _sge01::P64;
           I64[Hp - 56] = sat_sge0i_info;
           P64[Hp - 48] = _sgdZZ::P64;
           P64[Hp - 40] = _sge01::P64;
           P64[Hp - 32] = _sge03::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sge05_info;
           P64[Hp] = _sge03::P64;
           R2 = _sge03::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge0j_info" {
     sat_sge0j_info:
         const sat_sge0j_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$w$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cggOt: // global
           _sge01::P64 = R5;
           _sge00::P64 = R4;
           _sgdZZ::P64 = R3;
           _sgdZY::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggOu; else goto cggOv;
       cggOv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggOx; else goto cggOw;
       cggOx: // global
           HpAlloc = 24;
           goto cggOu;
       cggOu: // global
           R5 = _sge01::P64;
           R4 = _sge00::P64;
           R3 = _sgdZZ::P64;
           R2 = _sgdZY::P64;
           R1 = Data.Functor.Compose.$w$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggOw: // global
           I64[Hp - 16] = lvl8_sge02_info;
           P64[Hp] = _sgdZZ::P64;
           I64[Sp - 48] = block_cggMS_info;
           R2 = _sgdZZ::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgdZY::P64;
           P64[Sp - 24] = _sgdZZ::P64;
           P64[Sp - 16] = _sge00::P64;
           P64[Sp - 8] = _sge01::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapMp_info" {
     Data.Functor.Compose.$w$cgmapMp_info:
         const Data.Functor.Compose.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cggMS() //  [R1]
         { []
         }
     {offset
       cggMS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cggOA; else goto cggOz;
       cggOA: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggOz: // global
           I64[Hp - 72] = sat_sge0p_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sge0j_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggMS_info" {
     block_cggMS_info:
         const _cggMS;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.914103477 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapMp_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapMp_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cggPP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapMp_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMp_entry() //  []
         { []
         }
     {offset
       cggPT: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapMp_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapMp_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapMp_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.920481064 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapM_closure" {
     Data.Functor.Compose.$w$cgmapM_closure:
         const Data.Functor.Compose.$w$cgmapM_info;
 },
 sat_sge0I_entry() //  [R1, R2]
         { []
         }
     {offset
       cggQi: // global
           _sge0G::P64 = R2;
           _sge0I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cggQj; else goto cggQk;
       cggQk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cggQm; else goto cggQl;
       cggQm: // global
           HpAlloc = 32;
           goto cggQj;
       cggQj: // global
           R2 = _sge0G::P64;
           R1 = _sge0I::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggQl: // global
           _sge0A::P64 = P64[_sge0I::P64 + 7];
           _sge0F::P64 = P64[_sge0I::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sge0F::P64;
           P64[Hp] = _sge0G::P64;
           R2 = _sge0A::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge0I_info" {
     sat_sge0I_info:
         const sat_sge0I_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sge0J_entry() //  [R1, R2]
         { []
         }
     {offset
       cggQn: // global
           _sge0F::P64 = R2;
           _sge0J::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cggQo; else goto cggQp;
       cggQp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggQr; else goto cggQq;
       cggQr: // global
           HpAlloc = 24;
           goto cggQo;
       cggQo: // global
           R2 = _sge0F::P64;
           R1 = _sge0J::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggQq: // global
           _sge0A::P64 = P64[_sge0J::P64 + 7];
           _sge0D::P64 = P64[_sge0J::P64 + 15];
           I64[Hp - 16] = sat_sge0I_info;
           P64[Hp - 8] = _sge0A::P64;
           P64[Hp] = _sge0F::P64;
           R2 = _sge0A::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sge0D::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge0J_info" {
     sat_sge0J_info:
         const sat_sge0J_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sge0E_entry() //  [R1]
         { []
         }
     {offset
       cggQw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggQx; else goto cggQy;
       cggQx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggQy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge0E_info" {
     sat_sge0E_info:
         const sat_sge0E_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$w$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cggQz: // global
           _sge0C::P64 = R5;
           _sge0B::P64 = R4;
           _sge0A::P64 = R3;
           _sge0z::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cggQA; else goto cggQB;
       cggQB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cggQD; else goto cggQC;
       cggQD: // global
           HpAlloc = 88;
           goto cggQA;
       cggQA: // global
           R5 = _sge0C::P64;
           R4 = _sge0B::P64;
           R3 = _sge0A::P64;
           R2 = _sge0z::P64;
           R1 = Data.Functor.Compose.$w$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggQC: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sge0B::P64;
           P64[Hp - 56] = _sge0z::P64;
           P64[Hp - 48] = _sge0C::P64;
           I64[Hp - 40] = sat_sge0J_info;
           P64[Hp - 32] = _sge0A::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sge0E_info;
           P64[Hp] = _sge0A::P64;
           R2 = _sge0A::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapM_info" {
     Data.Functor.Compose.$w$cgmapM_info:
         const Data.Functor.Compose.$w$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.930088651 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapM_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapM_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapM_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cggR1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapM_entry() //  []
         { []
         }
     {offset
       cggR5: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapM_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapM_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapM_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapM_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.942215966 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapMo_closure" {
     Data.Functor.Compose.$w$cgmapMo_closure:
         const Data.Functor.Compose.$w$cgmapMo_info;
 },
 lvl8_sge0X_entry() //  [R1]
         { []
         }
     {offset
       cggRm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggRn; else goto cggRo;
       cggRn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggRo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sge0X_info" {
     lvl8_sge0X_info:
         const lvl8_sge0X_entry;
         const 1;
         const 16;
 },
 sat_sge1n_entry() //  [R1, R2]
         { []
         }
     {offset
       cggRB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggRC; else goto cggRD;
       cggRC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggRD: // global
           I64[Sp - 24] = block_cggRy_info;
           _sge0X::P64 = P64[R1 + 7];
           _sge0Y::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sge0X::P64;
           P64[Sp - 8] = _sge0Y::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uggRV; else goto cggRz;
       uggRV: // global
           call _cggRy(R1) args: 0, res: 0, upd: 0;
       cggRz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge1n_info" {
     sat_sge1n_info:
         const sat_sge1n_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cggRy() //  [R1]
         { []
         }
     {offset
       cggRy: // global
           I64[Sp - 8] = block_cggRG_info;
           _sge1k::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sge1k::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uggRU; else goto cggRI;
       uggRU: // global
           call _cggRG(R1) args: 0, res: 0, upd: 0;
       cggRI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggRy_info" {
     block_cggRy_info:
         const _cggRy;
         const 2;
         const 30;
 },
 _cggRG() //  [R1]
         { []
         }
     {offset
       cggRG: // global
           if (R1 & 7 == 1) goto cggRO; else goto cggRS;
       cggRO: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cggRS: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggRG_info" {
     block_cggRG_info:
         const _cggRG;
         const 3;
         const 30;
 },
 sat_sge1d_entry() //  [R1]
         { []
         }
     {offset
       cggSm: // global
           _sge1d::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cggSn; else goto cggSo;
       cggSo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggSq; else goto cggSp;
       cggSq: // global
           HpAlloc = 56;
           goto cggSn;
       cggSn: // global
           R1 = _sge1d::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggSp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge1d::P64;
           _sge0W::P64 = P64[_sge1d::P64 + 16];
           _sge0Y::P64 = P64[_sge1d::P64 + 24];
           _sge13::P64 = P64[_sge1d::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sge13::P64;
           P64[Hp - 24] = _sge0W::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sge0Y::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1d_info" {
     sat_sge1d_info:
         const sat_sge1d_entry;
         const 3;
         const 15;
 },
 sat_sge19_entry() //  [R1, R2]
         { []
         }
     {offset
       cggSC: // global
           _sge16::P64 = R2;
           _sge19::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cggSD; else goto cggSE;
       cggSE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggSG; else goto cggSF;
       cggSG: // global
           HpAlloc = 56;
           goto cggSD;
       cggSD: // global
           R2 = _sge16::P64;
           R1 = _sge19::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggSF: // global
           _sge0Y::P64 = P64[_sge19::P64 + 7];
           _sge13::P64 = P64[_sge19::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sge13::P64;
           P64[Hp - 24] = _sge16::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sge0Y::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge19_info" {
     sat_sge19_info:
         const sat_sge19_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sge1a_entry() //  [R1]
         { []
         }
     {offset
       cggSH: // global
           _sge1a::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggSI; else goto cggSJ;
       cggSJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggSL; else goto cggSK;
       cggSL: // global
           HpAlloc = 24;
           goto cggSI;
       cggSI: // global
           R1 = _sge1a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggSK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge1a::P64;
           _sge0Y::P64 = P64[_sge1a::P64 + 16];
           _sge0Z::P64 = P64[_sge1a::P64 + 24];
           _sge13::P64 = P64[_sge1a::P64 + 32];
           I64[Hp - 16] = sat_sge19_info;
           P64[Hp - 8] = _sge0Y::P64;
           P64[Hp] = _sge13::P64;
           R2 = _sge0Y::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sge0Z::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1a_info" {
     sat_sge1a_info:
         const sat_sge1a_entry;
         const 3;
         const 15;
 },
 sat_sge1g_entry() //  [R1, R2]
         { []
         }
     {offset
       cggSM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cggSN; else goto cggSO;
       cggSN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cggSO: // global
           I64[Sp - 40] = block_cggS6_info;
           _sge0U::P64 = P64[R1 + 7];
           _sge0W::P64 = P64[R1 + 15];
           _sge0Y::P64 = P64[R1 + 23];
           _sge0Z::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sge0U::P64;
           P64[Sp - 24] = _sge0W::P64;
           P64[Sp - 16] = _sge0Y::P64;
           P64[Sp - 8] = _sge0Z::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uggT5; else goto cggS7;
       uggT5: // global
           call _cggS6(R1) args: 0, res: 0, upd: 0;
       cggS7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge1g_info" {
     sat_sge1g_info:
         const sat_sge1g_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cggS6() //  [R1]
         { []
         }
     {offset
       cggS6: // global
           I64[Sp - 8] = block_cggSb_info;
           _sge13::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sge13::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uggT4; else goto cggSc;
       uggT4: // global
           call _cggSb(R1) args: 0, res: 0, upd: 0;
       cggSc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cggS6_info" {
     block_cggS6_info:
         const _cggS6;
         const 4;
         const 30;
 },
 _cggSb() //  [R1]
         { []
         }
     {offset
       cggSb: // global
           _sge0W::P64 = P64[Sp + 24];
           _sge0Y::P64 = P64[Sp + 32];
           _sge13::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cggSR; else goto cggSV;
       cggSR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cggSU; else goto cggST;
       cggSU: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggST: // global
           I64[Hp - 72] = sat_sge1d_info;
           P64[Hp - 56] = _sge0W::P64;
           P64[Hp - 48] = _sge0Y::P64;
           P64[Hp - 40] = _sge13::P64;
           I64[Hp - 32] = sat_sge1a_info;
           P64[Hp - 16] = _sge0Y::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sge13::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cggSV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cggT0; else goto cggSZ;
       cggT0: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggSZ: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sge13::P64;
           P64[Hp - 24] = _sge0W::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sge0Y::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggSb_info" {
     block_cggSb_info:
         const _cggSb;
         const 5;
         const 30;
 },
 sat_sge10_entry() //  [R1]
         { []
         }
     {offset
       cggTa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggTb; else goto cggTc;
       cggTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggTc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge10_info" {
     sat_sge10_info:
         const sat_sge10_entry;
         const 1;
         const 16;
 },
 sat_sge1h_entry() //  [R1]
         { []
         }
     {offset
       cggTd: // global
           _sge1h::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cggTe; else goto cggTf;
       cggTf: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cggTh; else goto cggTg;
       cggTh: // global
           HpAlloc = 104;
           goto cggTe;
       cggTe: // global
           R1 = _sge1h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggTg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sge1h::P64;
           _sge0T::P64 = P64[_sge1h::P64 + 16];
           _sge0U::P64 = P64[_sge1h::P64 + 24];
           _sge0V::P64 = P64[_sge1h::P64 + 32];
           _sge0W::P64 = P64[_sge1h::P64 + 40];
           _sge0Y::P64 = P64[_sge1h::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sge0V::P64;
           P64[Hp - 72] = _sge0T::P64;
           P64[Hp - 64] = _sge0W::P64;
           I64[Hp - 56] = sat_sge1g_info;
           P64[Hp - 48] = _sge0U::P64;
           P64[Hp - 40] = _sge0W::P64;
           P64[Hp - 32] = _sge0Y::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sge10_info;
           P64[Hp] = _sge0Y::P64;
           R2 = _sge0Y::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1h_info" {
     sat_sge1h_info:
         const sat_sge1h_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$w$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cggTi: // global
           _sge0W::P64 = R5;
           _sge0V::P64 = R4;
           _sge0U::P64 = R3;
           _sge0T::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cggTj; else goto cggTk;
       cggTk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggTm; else goto cggTl;
       cggTm: // global
           HpAlloc = 24;
           goto cggTj;
       cggTj: // global
           R5 = _sge0W::P64;
           R4 = _sge0V::P64;
           R3 = _sge0U::P64;
           R2 = _sge0T::P64;
           R1 = Data.Functor.Compose.$w$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggTl: // global
           I64[Hp - 16] = lvl8_sge0X_info;
           P64[Hp] = _sge0U::P64;
           I64[Sp - 48] = block_cggRp_info;
           R2 = _sge0U::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sge0T::P64;
           P64[Sp - 24] = _sge0U::P64;
           P64[Sp - 16] = _sge0V::P64;
           P64[Sp - 8] = _sge0W::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapMo_info" {
     Data.Functor.Compose.$w$cgmapMo_info:
         const Data.Functor.Compose.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cggRp() //  [R1]
         { []
         }
     {offset
       cggRp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cggTp; else goto cggTo;
       cggTp: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cggTo: // global
           I64[Hp - 72] = sat_sge1n_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sge1h_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggRp_info" {
     block_cggRp_info:
         const _cggRp;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.969712579 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapMo_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapMo_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cggUL: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapMo_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMo_entry() //  []
         { []
         }
     {offset
       cggUP: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapMo_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapMo_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapMo_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.974210511 UTC

[section ""data" . lvl4_rgdQh_closure" {
     lvl4_rgdQh_closure:
         const lvl4_rgdQh_info;
         const 0;
 },
 lvl4_rgdQh_entry() //  []
         { []
         }
     {offset
       cggV2: // global
           R1 = Data.Functor.Compose.$cCompose_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rgdQh_info" {
     lvl4_rgdQh_info:
         const lvl4_rgdQh_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sge5q_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.977985574 UTC

[section ""data" . lvl5_rgdQi_closure" {
     lvl5_rgdQi_closure:
         const lvl5_rgdQi_info;
         const 0;
 },
 lvl5_rgdQi_entry() //  []
         { []
         }
     {offset
       cggVe: // global
           R1 = Data.Functor.Compose.$tCompose_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rgdQi_info" {
     lvl5_rgdQi_info:
         const lvl5_rgdQi_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sge5q_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.981190131 UTC

[section ""data" . lvl6_rgdQj_closure" {
     lvl6_rgdQj_closure:
         const lvl6_rgdQj_info;
 },
 lvl6_rgdQj_entry() //  []
         { []
         }
     {offset
       cggVq: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rgdQj_info" {
     lvl6_rgdQj_info:
         const lvl6_rgdQj_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.984224428 UTC

[section ""data" . lvl7_rgdQk_closure" {
     lvl7_rgdQk_closure:
         const lvl7_rgdQk_info;
 },
 lvl7_rgdQk_entry() //  []
         { []
         }
     {offset
       cggVC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rgdQk_info" {
     lvl7_rgdQk_info:
         const lvl7_rgdQk_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:07.994436792 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_closure" {
     Data.Functor.Compose.$fDataCompose_closure:
         const Data.Functor.Compose.$fDataCompose_info;
         const 0;
 },
 sat_sge2v_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggVT: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapMo_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge2v_info" {
     sat_sge2v_info:
         const sat_sge2v_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sge2r_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggW1: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapMp_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge2r_info" {
     sat_sge2r_info:
         const sat_sge2r_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sge2n_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggW9: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapM_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge2n_info" {
     sat_sge2n_info:
         const sat_sge2n_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sge2j_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggWk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cggWl; else goto cggWm;
       cggWl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggWm: // global
           I64[Sp - 32] = block_cggWh_info;
           _sge1I::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 24] = _sge1I::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uggWu; else goto cggWi;
       uggWu: // global
           call _cggWh(R1) args: 0, res: 0, upd: 0;
       cggWi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge2j_info" {
     sat_sge2j_info:
         const sat_sge2j_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sge5q_srt+496;
 },
 _cggWh() //  [R1]
         { []
         }
     {offset
       cggWh: // global
           if (I64[R1 + 7] == 0) goto cggWt; else goto cggWs;
       cggWt: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggWs: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cggWh_info" {
     block_cggWh_info:
         const _cggWh;
         const 3;
         const 4294967326;
         const Sge5q_srt+496;
 },
 sat_sge2c_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggWC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cggWG; else goto cggWF;
       cggWG: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cggWF: // global
           _sge1I::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sge1I::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge2c_info" {
     sat_sge2c_info:
         const sat_sge2c_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sge28_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cggWN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggWR; else goto cggWQ;
       cggWR: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggWQ: // global
           _sge1I::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sge1I::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sge23::P64 = R2;
           R2 = Hp - 32;
           R1 = _sge23::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge28_info" {
     sat_sge28_info:
         const sat_sge28_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sge22_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cggWY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cggX2; else goto cggX1;
       cggX2: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggX1: // global
           _sge1I::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sge1I::P64;
           P64[Hp] = R5;
           _sge1Y::P64 = R3;
           R3 = Hp - 32;
           _sge1X::P64 = R2;
           R2 = _sge1Y::P64;
           R1 = _sge1X::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge22_info" {
     sat_sge22_info:
         const sat_sge22_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sge1W_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cggX8: // global
           R3 = R3;
           _sge1U::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sge1U::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge1W_info" {
     sat_sge1W_info:
         const sat_sge1W_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sge1S_entry() //  [R1]
         { []
         }
     {offset
       cggXk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggXl; else goto cggXm;
       cggXl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggXm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Compose.$fDataCompose2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1S_info" {
     sat_sge1S_info:
         const sat_sge1S_entry;
         const 1;
         const 16;
 },
 sat_sge1T_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggXn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggXr; else goto cggXq;
       cggXr: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggXq: // global
           _sge1I::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sge1S_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sge1P::P64 = R2;
           R2 = _sge1I::P64;
           R1 = _sge1P::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge1T_info" {
     sat_sge1T_info:
         const sat_sge1T_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sge1N_entry() //  [R1]
         { []
         }
     {offset
       cggXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggXC; else goto cggXD;
       cggXC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggXD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Compose.$fDataCompose2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1N_info" {
     sat_sge1N_info:
         const sat_sge1N_entry;
         const 1;
         const 16;
 },
 sat_sge1O_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cggXE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cggXI; else goto cggXH;
       cggXI: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cggXH: // global
           _sge1I::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sge1N_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           _sge1K::P64 = R2;
           R2 = _sge1I::P64;
           R1 = _sge1K::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sge1O_info" {
     sat_sge1O_info:
         const sat_sge1O_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sge1J_entry() //  [R1]
         { []
         }
     {offset
       cggXN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cggXO; else goto cggXP;
       cggXO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cggXP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$w$cp1Data_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sge1J_info" {
     sat_sge1J_info:
         const sat_sge1J_entry;
         const 5;
         const 4294967311;
         const Sge5q_srt+472;
 },
 Data.Functor.Compose.$fDataCompose_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cggXR: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cggXV; else goto cggXU;
       cggXV: // global
           HpAlloc = 344;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fDataCompose_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cggXU: // global
           I64[Hp - 336] = sat_sge2v_info;
           _sge1I::P64 = P64[Sp];
           P64[Hp - 328] = _sge1I::P64;
           I64[Hp - 320] = sat_sge2r_info;
           P64[Hp - 312] = _sge1I::P64;
           I64[Hp - 304] = sat_sge2n_info;
           P64[Hp - 296] = _sge1I::P64;
           I64[Hp - 288] = sat_sge2j_info;
           P64[Hp - 280] = _sge1I::P64;
           I64[Hp - 272] = sat_sge2c_info;
           P64[Hp - 264] = _sge1I::P64;
           I64[Hp - 256] = sat_sge28_info;
           P64[Hp - 248] = _sge1I::P64;
           I64[Hp - 240] = sat_sge22_info;
           P64[Hp - 232] = _sge1I::P64;
           I64[Hp - 224] = sat_sge1W_info;
           P64[Hp - 216] = _sge1I::P64;
           I64[Hp - 208] = sat_sge1T_info;
           P64[Hp - 200] = _sge1I::P64;
           I64[Hp - 192] = sat_sge1O_info;
           P64[Hp - 184] = _sge1I::P64;
           I64[Hp - 176] = sat_sge1J_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 189;
           P64[Hp - 96] = Hp - 205;
           P64[Hp - 88] = lvl4_rgdQh_closure+1;
           P64[Hp - 80] = lvl5_rgdQi_closure+1;
           P64[Hp - 72] = lvl6_rgdQj_closure+2;
           P64[Hp - 64] = lvl7_rgdQk_closure+2;
           P64[Hp - 56] = Hp - 222;
           P64[Hp - 48] = Hp - 236;
           P64[Hp - 40] = Hp - 252;
           P64[Hp - 32] = Hp - 270;
           P64[Hp - 24] = Hp - 285;
           P64[Hp - 16] = Hp - 301;
           P64[Hp - 8] = Hp - 317;
           P64[Hp] = Hp - 333;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_info" {
     Data.Functor.Compose.$fDataCompose_info:
         const Data.Functor.Compose.$fDataCompose_entry;
         const 0;
         const 519691042830;
         const 25769803802;
         const Sge5q_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:08.021102205 UTC

[section ""relreadonly" . Sge5q_srt" {
     Sge5q_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Compose.$fRead1Compose2_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure;
         const Data.Functor.Compose.$fRead1Compose_closure;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Functor.Compose.$w$cliftShowsPrec_closure;
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure;
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure;
         const Data.Functor.Compose.$fShow1Compose_closure;
         const Data.Functor.Compose.$fReadCompose_$creadPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadList_closure;
         const Data.Functor.Compose.$fReadCompose_closure;
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure;
         const Data.Functor.Compose.$fShowCompose_$cshow_closure;
         const Data.Functor.Compose.$fShowCompose_$cshowList_closure;
         const Data.Functor.Compose.$fShowCompose_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Compose.$fFoldableCompose_$csum_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Compose.$fFoldableCompose2_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Compose.$fFoldableCompose3_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Compose.$fFoldableCompose_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Compose.$fFoldableCompose7_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure;
         const Data.Functor.Compose.$fFoldableCompose6_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure;
         const Data.Functor.Compose.$fFoldableCompose_$clength_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure;
         const Data.Functor.Compose.$fFoldableCompose8_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cnull_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_closure;
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_closure;
         const Data.Functor.Compose.$fFoldableCompose_closure;
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure;
         const Data.Functor.Compose.$fTraversableCompose_closure;
         const GHC.List.badHead_closure;
         const go61_rgdPX_closure;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Functor.Compose.$fDataCompose5_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Compose.$w$cp1Data_closure;
         const Data.Functor.Compose.$cCompose_closure;
         const Data.Functor.Compose.$tCompose_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Compose.$fDataCompose_closure;
         const lvl4_rgdQh_closure;
         const lvl5_rgdQi_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.524941801 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:12:11.526844813 UTC

[section ""data" . $fEq1Compose1_rgdPP_closure" {
     $fEq1Compose1_rgdPP_closure:
         const $fEq1Compose1_rgdPP_info;
 },
 $fEq1Compose1_rgdPP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cghbf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghbj; else goto cghbi;
       cghbj: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $fEq1Compose1_rgdPP_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghbi: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           _sggZ0::P64 = R2;
           R2 = Hp - 24;
           R1 = _sggZ0::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $fEq1Compose1_rgdPP_info" {
     $fEq1Compose1_rgdPP_info:
         const $fEq1Compose1_rgdPP_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.530774865 UTC

[section ""data" . Data.Functor.Compose.$fEq1Compose_closure" {
     Data.Functor.Compose.$fEq1Compose_closure:
         const Data.Functor.Compose.$fEq1Compose_info;
 },
 Data.Functor.Compose.$fEq1Compose_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cghbt: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $fEq1Compose1_rgdPP_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEq1Compose_info" {
     Data.Functor.Compose.$fEq1Compose_info:
         const Data.Functor.Compose.$fEq1Compose_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.534959091 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure" {
     Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure:
         const Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info;
 },
 sat_sggZb_entry() //  [R1]
         { []
         }
     {offset
       cghbI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghbJ; else goto cghbK;
       cghbJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sggZb_info" {
     sat_sggZb_info:
         const sat_sggZb_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cghbL: // global
           _sggZa::P64 = R6;
           _sggZ9::P64 = R5;
           _sggZ8::P64 = R4;
           _sggZ7::P64 = R3;
           _sggZ6::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cghbM; else goto cghbN;
       cghbN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghbP; else goto cghbO;
       cghbP: // global
           HpAlloc = 32;
           goto cghbM;
       cghbM: // global
           R6 = _sggZa::P64;
           R5 = _sggZ9::P64;
           R4 = _sggZ8::P64;
           R3 = _sggZ7::P64;
           R2 = _sggZ6::P64;
           R1 = Data.Functor.Compose.$fOrd1Compose_$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghbO: // global
           I64[Hp - 24] = sat_sggZb_info;
           P64[Hp - 8] = _sggZ7::P64;
           P64[Hp] = _sggZ8::P64;
           R2 = _sggZ6::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sggZ9::P64;
           P64[Sp - 8] = _sggZa::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info" {
     Data.Functor.Compose.$fOrd1Compose_$cliftCompare_info:
         const Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.541486328 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose1_closure" {
     Data.Functor.Compose.$fOrd1Compose1_closure:
         const Data.Functor.Compose.$fOrd1Compose1_info;
 },
 sat_sggZh_entry() //  [R1]
         { []
         }
     {offset
       cghcd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghce; else goto cghcf;
       cghce: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghcf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sggZh_info" {
     sat_sggZh_info:
         const sat_sggZh_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrd1Compose1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cghcg: // global
           _sggZg::P64 = R6;
           _sggZf::P64 = R5;
           _sggZe::P64 = R4;
           _sggZd::P64 = R3;
           _sggZc::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cghch; else goto cghci;
       cghci: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghck; else goto cghcj;
       cghck: // global
           HpAlloc = 32;
           goto cghch;
       cghch: // global
           R6 = _sggZg::P64;
           R5 = _sggZf::P64;
           R4 = _sggZe::P64;
           R3 = _sggZd::P64;
           R2 = _sggZc::P64;
           R1 = Data.Functor.Compose.$fOrd1Compose1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghcj: // global
           I64[Hp - 24] = sat_sggZh_info;
           P64[Hp - 8] = _sggZd::P64;
           P64[Hp] = _sggZe::P64;
           R2 = _sggZc::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sggZf::P64;
           P64[Sp - 8] = _sggZg::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose1_info" {
     Data.Functor.Compose.$fOrd1Compose1_info:
         const Data.Functor.Compose.$fOrd1Compose1_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.548156291 UTC

[section ""data" . Data.Functor.Compose.$fOrd1Compose_closure" {
     Data.Functor.Compose.$fOrd1Compose_closure:
         const Data.Functor.Compose.$fOrd1Compose_info;
 },
 sat_sggZl_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cghcJ: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fOrd1Compose_$cliftCompare_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZl_info" {
     sat_sggZl_info:
         const sat_sggZl_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sggZk_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cghcR: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fOrd1Compose1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZk_info" {
     sat_sggZk_info:
         const sat_sggZk_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 Data.Functor.Compose.$fOrd1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cghcV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cghcZ; else goto cghcY;
       cghcZ: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrd1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghcY: // global
           I64[Hp - 64] = sat_sggZl_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sggZk_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 37;
           P64[Hp] = Hp - 61;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrd1Compose_info" {
     Data.Functor.Compose.$fOrd1Compose_info:
         const Data.Functor.Compose.$fOrd1Compose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.554659351 UTC

[section ""cstring" . Data.Functor.Compose.$fDataCompose7_bytes" {
     Data.Functor.Compose.$fDataCompose7_bytes:
         I8[] [67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.556950276 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose6_closure" {
     Data.Functor.Compose.$fDataCompose6_closure:
         const Data.Functor.Compose.$fDataCompose6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fDataCompose6_entry() //  [R1]
         { []
         }
     {offset
       cghdn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghdo; else goto cghdp;
       cghdo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghdp: // global
           (_cghdk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghdk::I64 == 0) goto cghdm; else goto cghdl;
       cghdm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghdl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghdk::I64;
           R2 = Data.Functor.Compose.$fDataCompose7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose6_info" {
     Data.Functor.Compose.$fDataCompose6_info:
         const Data.Functor.Compose.$fDataCompose6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.561956926 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose2_closure" {
     Data.Functor.Compose.$fRead1Compose2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.563655381 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose1_closure" {
     Data.Functor.Compose.$fRead1Compose1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.570652945 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info;
         const 0;
 },
 sat_sggZs_entry() //  [R1]
         { []
         }
     {offset
       cghdM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghdN; else goto cghdO;
       cghdN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghdO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sggZs_info" {
     sat_sggZs_info:
         const sat_sggZs_entry;
         const 3;
         const 15;
 },
 sat_sggZr_entry() //  [R1]
         { []
         }
     {offset
       cghdT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghdU; else goto cghdV;
       cghdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghdV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sggZr_info" {
     sat_sggZr_info:
         const sat_sggZr_entry;
         const 3;
         const 15;
 },
 reader_sggZq_entry() //  [R1]
         { []
         }
     {offset
       cghdW: // global
           _sggZq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghdX; else goto cghdY;
       cghdY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cghe0; else goto cghdZ;
       cghe0: // global
           HpAlloc = 80;
           goto cghdX;
       cghdX: // global
           R1 = _sggZq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghdZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sggZq::P64;
           _sggZm::P64 = P64[_sggZq::P64 + 16];
           _sggZn::P64 = P64[_sggZq::P64 + 24];
           _sggZo::P64 = P64[_sggZq::P64 + 32];
           _sggZp::P64 = P64[_sggZq::P64 + 40];
           I64[Hp - 72] = sat_sggZs_info;
           P64[Hp - 56] = _sggZn::P64;
           P64[Hp - 48] = _sggZo::P64;
           P64[Hp - 40] = _sggZp::P64;
           I64[Hp - 32] = sat_sggZr_info;
           P64[Hp - 16] = _sggZn::P64;
           P64[Hp - 8] = _sggZo::P64;
           P64[Hp] = _sggZp::P64;
           R2 = _sggZm::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . reader_sggZq_info" {
     reader_sggZq_info:
         const reader_sggZq_entry;
         const 4;
         const 15;
 },
 sat_sggZz_entry() //  [R1, R2]
         { []
         }
     {offset
       cghek: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZz_info" {
     sat_sggZz_info:
         const sat_sggZz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sggZA_entry() //  [R1, R2]
         { []
         }
     {offset
       cghen: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgher; else goto cgheq;
       cgher: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgheq: // global
           _sggZq::P64 = P64[R1 + 7];
           _sggZv::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sggZz_info;
           P64[Hp] = _sggZv::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Compose.$fRead1Compose1_closure+1;
           R1 = _sggZq::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZA_info" {
     sat_sggZA_info:
         const sat_sggZA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 $wlvl_sggZt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghev: // global
           _sggZv::P64 = R3;
           _sggZu::I64 = R2;
           _sggZt::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cghew; else goto cghex;
       cghex: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghez; else goto cghey;
       cghez: // global
           HpAlloc = 24;
           goto cghew;
       cghew: // global
           R3 = _sggZv::P64;
           R2 = _sggZu::I64;
           R1 = _sggZt::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghey: // global
           if (%MO_S_Gt_W64(_sggZu::I64, 10)) goto cghet; else goto cgheu;
       cghet: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cgheu: // global
           _sggZq::P64 = P64[_sggZt::P64 + 6];
           I64[Hp - 16] = sat_sggZA_info;
           P64[Hp - 8] = _sggZq::P64;
           P64[Hp] = _sggZv::P64;
           I64[Sp - 8] = block_cgheA_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Compose.$fRead1Compose2_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_sggZt_info" {
     $wlvl_sggZt_info:
         const $wlvl_sggZt_entry;
         const 1;
         const 12884901897;
         const 8589934605;
         const Sghf8_srt;
 },
 _cgheA() //  [R1]
         { []
         }
     {offset
       cgheA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cgheF; else goto cgheE;
       cgheF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgheE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgheA_info" {
     block_cgheA_info:
         const _cgheA;
         const 0;
         const 30;
 },
 lvl8_sggZD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgheO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgheP; else goto cgheQ;
       cgheP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgheQ: // global
           I64[Sp - 24] = block_cgheL_info;
           _sggZt::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sggZt::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugheU; else goto cgheM;
       ugheU: // global
           call _cgheL(R1) args: 0, res: 0, upd: 0;
       cgheM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_sggZD_info" {
     lvl8_sggZD_info:
         const lvl8_sggZD_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const Sghf8_srt;
 },
 _cgheL() //  [R1]
         { []
         }
     {offset
       cgheL: // global
           R3 = P64[Sp + 16];
           R2 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl_sggZt_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgheL_info" {
     block_cgheL_info:
         const _cgheL;
         const 2;
         const 12884901918;
         const Sghf8_srt;
 },
 sat_sggZK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghf0: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZK_info" {
     sat_sggZK_info:
         const sat_sggZK_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const Sghf8_srt+16;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cghf3: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cghf7; else goto cghf6;
       cghf7: // global
           HpAlloc = 96;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghf6: // global
           I64[Hp - 88] = reader_sggZq_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           I64[Hp - 40] = $wlvl_sggZt_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = lvl8_sggZD_info;
           P64[Hp - 16] = Hp - 38;
           I64[Hp - 8] = sat_sggZK_info;
           P64[Hp] = Hp - 22;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry;
         const 0;
         const 64424509454;
         const 17179869208;
         const Sghf8_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.594390239 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info;
         const 0;
 },
 sat_sggZV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghgx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cghgy; else goto cghgz;
       cghgy: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghgz: // global
           I64[Sp - 8] = block_cghgu_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZV_info" {
     sat_sggZV_info:
         const sat_sggZV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cghgu() //  [R1]
         { []
         }
     {offset
       cghgu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghgC; else goto cghgB;
       cghgC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cghgB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghgu_info" {
     block_cghgu_info:
         const _cghgu;
         const 0;
         const 30;
 },
 sat_sggZQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cghgI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZQ_info" {
     sat_sggZQ_info:
         const sat_sggZQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sggZP_entry() //  [R1]
         { []
         }
     {offset
       cghgL: // global
           _sggZP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cghgM; else goto cghgN;
       cghgN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghgP; else goto cghgO;
       cghgP: // global
           HpAlloc = 32;
           goto cghgM;
       cghgM: // global
           R1 = _sggZP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sggZP::P64;
           _sggZL::P64 = P64[_sggZP::P64 + 16];
           _sggZM::P64 = P64[_sggZP::P64 + 24];
           _sggZN::P64 = P64[_sggZP::P64 + 32];
           _sggZO::P64 = P64[_sggZP::P64 + 40];
           I64[Hp - 24] = sat_sggZV_info;
           P64[Hp - 16] = _sggZO::P64;
           I64[Hp - 8] = sat_sggZQ_info;
           P64[Hp] = _sggZN::P64;
           R5 = Hp - 22;
           R4 = Hp - 7;
           R3 = _sggZM::P64;
           R2 = _sggZL::P64;
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sggZP_info" {
     ds_sggZP_info:
         const ds_sggZP_entry;
         const 4;
         const 4294967311;
         const Sghf8_srt+24;
 },
 sat_sggZX_entry() //  [R1]
         { []
         }
     {offset
       cghgZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghh0; else goto cghh1;
       cghh0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghh1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sggZX_info" {
     sat_sggZX_info:
         const sat_sggZX_entry;
         const 2;
         const 18;
 },
 sat_sggZY_entry() //  [R1, R2]
         { []
         }
     {offset
       cghh2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghh6; else goto cghh5;
       cghh6: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghh5: // global
           _sggZP::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sggZX_info;
           P64[Hp - 8] = _sggZP::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sggZY_info" {
     sat_sggZY_info:
         const sat_sggZY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cghh7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cghhb; else goto cghha;
       cghhb: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghha: // global
           I64[Hp - 56] = ds_sggZP_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = sat_sggZY_info;
           P64[Hp] = Hp - 56;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sghf8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.608801145 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info;
         const 0;
 },
 sat_sgh03_entry() //  [R1]
         { []
         }
     {offset
       cghhX: // global
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh03_info" {
     sat_sgh03_info:
         const sat_sgh03_entry;
         const 4;
         const 4294967311;
         const Sghf8_srt+24;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cghi0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghi4; else goto cghi3;
       cghi4: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghi3: // global
           I64[Hp - 40] = sat_sgh03_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sghf8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.61617462 UTC

[section ""data" . Data.Functor.Compose.$fRead1Compose_closure" {
     Data.Functor.Compose.$fRead1Compose_closure:
         const Data.Functor.Compose.$fRead1Compose_info;
         const 0;
 },
 sat_sgh09_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghim: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_entry(R5,
                                                                             R4,
                                                                             R3,
                                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh09_info" {
     sat_sgh09_info:
         const sat_sgh09_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+48;
 },
 sat_sgh08_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghiu: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh08_info" {
     sat_sgh08_info:
         const sat_sgh08_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+24;
 },
 sat_sgh07_entry() //  [R1]
         { []
         }
     {offset
       cghiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghiC; else goto cghiD;
       cghiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry(R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh07_info" {
     sat_sgh07_info:
         const sat_sgh07_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+56;
 },
 sat_sgh06_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghiJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_entry(R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh06_info" {
     sat_sgh06_info:
         const sat_sgh06_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+32;
 },
 Data.Functor.Compose.$fRead1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cghiN: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cghiR; else goto cghiQ;
       cghiR: // global
           HpAlloc = 144;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghiQ: // global
           I64[Hp - 136] = sat_sgh09_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgh08_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_sgh07_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sgh06_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 54;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 134;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_info" {
     Data.Functor.Compose.$fRead1Compose_info:
         const Data.Functor.Compose.$fRead1Compose_entry;
         const 0;
         const 253403070478;
         const 8589934607;
         const Sghf8_srt+24;
 },
 section ""data" . Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_info;
         const 0;
 },
 sat_sgh0c_entry() //  [R1]
         { []
         }
     {offset
       cghj0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghj1; else goto cghj2;
       cghj1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghj2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0c_info" {
     sat_sgh0c_info:
         const sat_sgh0c_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+64;
 },
 Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cghj3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghj7; else goto cghj6;
       cghj7: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghj6: // global
           I64[Hp - 24] = sat_sgh0c_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fRead1Compose_$cliftReadList_info" {
     Data.Functor.Compose.$fRead1Compose_$cliftReadList_info:
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sghf8_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.632596106 UTC

[section ""data" . Data.Functor.Compose.$w$cliftShowsPrec_closure" {
     Data.Functor.Compose.$w$cliftShowsPrec_closure:
         const Data.Functor.Compose.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Compose.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cghjM: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sgh0k_entry() //  [R1]
         { []
         }
     {offset
       cghjY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghjZ; else goto cghk0;
       cghjZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghk0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0k_info" {
     sat_sgh0k_info:
         const sat_sgh0k_entry;
         const 3;
         const 15;
 },
 sat_sgh0j_entry() //  [R1]
         { []
         }
     {offset
       cghk5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghk6; else goto cghk7;
       cghk6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghk7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0j_info" {
     sat_sgh0j_info:
         const sat_sgh0j_entry;
         const 3;
         const 15;
 },
 sat_sgh0l_entry() //  [R1]
         { []
         }
     {offset
       cghk8: // global
           _sgh0l::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cghk9; else goto cghka;
       cghka: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cghkc; else goto cghkb;
       cghkc: // global
           HpAlloc = 80;
           goto cghk9;
       cghk9: // global
           R1 = _sgh0l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghkb: // global
           _sgh0d::P64 = P64[_sgh0l::P64 + 16];
           _sgh0e::P64 = P64[_sgh0l::P64 + 24];
           _sgh0f::P64 = P64[_sgh0l::P64 + 32];
           _sgh0g::P64 = P64[_sgh0l::P64 + 40];
           I64[Hp - 72] = sat_sgh0k_info;
           P64[Hp - 56] = _sgh0e::P64;
           P64[Hp - 48] = _sgh0f::P64;
           P64[Hp - 40] = _sgh0g::P64;
           I64[Hp - 32] = sat_sgh0j_info;
           P64[Hp - 16] = _sgh0e::P64;
           P64[Hp - 8] = _sgh0f::P64;
           P64[Hp] = _sgh0g::P64;
           R2 = _sgh0d::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = Hp - 72;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0l_info" {
     sat_sgh0l_info:
         const sat_sgh0l_entry;
         const 4;
         const 15;
 },
 Data.Functor.Compose.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cghkd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghkh; else goto cghkg;
       cghkh: // global
           HpAlloc = 48;
           R1 = Data.Functor.Compose.$w$cliftShowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cghkg: // global
           I64[Hp - 40] = sat_sgh0l_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R5 = P64[Sp];
           R4 = R6;
           R3 = Data.Functor.Compose.$fDataCompose6_closure;
           R2 = Hp - 40;
           Sp = Sp + 8;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cliftShowsPrec_info" {
     Data.Functor.Compose.$w$cliftShowsPrec_info:
         const Data.Functor.Compose.$w$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803776;
         const Sghf8_srt+72;
         const 1030;
         const Data.Functor.Compose.$w$cliftShowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.644051204 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cghkV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghkW; else goto cghkX;
       cghkW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cghkX: // global
           I64[Sp - 40] = block_cghkS_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ughl1; else goto cghkT;
       ughl1: // global
           call _cghkS(R1) args: 0, res: 0, upd: 0;
       cghkT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_info:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const Sghf8_srt+80;
 },
 _cghkS() //  [R1]
         { []
         }
     {offset
       cghkS: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghkS_info" {
     block_cghkS_info:
         const _cghkS;
         const 5;
         const 4294967326;
         const Sghf8_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.649479408 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose3_closure" {
     Data.Functor.Compose.$fDataCompose3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.652245599 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_info;
         const 0;
 },
 sat_sgh0B_entry() //  [R1, R2]
         { []
         }
     {offset
       cghlm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cghln; else goto cghlo;
       cghln: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghlo: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sgh0A::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sgh0A::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0B_info" {
     sat_sgh0B_info:
         const sat_sgh0B_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sghf8_srt+80;
 },
 Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cghlp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cghlt; else goto cghls;
       cghlt: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cghls: // global
           I64[Hp - 32] = sat_sgh0B_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 31;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_$cliftShowList_info" {
     Data.Functor.Compose.$fShow1Compose_$cliftShowList_info:
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const Sghf8_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.658868778 UTC

[section ""data" . Data.Functor.Compose.$fShow1Compose_closure" {
     Data.Functor.Compose.$fShow1Compose_closure:
         const Data.Functor.Compose.$fShow1Compose_info;
         const 0;
 },
 sat_sgh0F_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cghlM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cghlN; else goto cghlO;
       cghlN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghlO: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$fShow1Compose_$cliftShowList_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0F_info" {
     sat_sgh0F_info:
         const sat_sgh0F_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sghf8_srt+96;
 },
 sat_sgh0E_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cghlU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cghlV; else goto cghlW;
       cghlV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghlW: // global
           R6 = R4;
           _B1::P64 = R5;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 12];
           R2 = P64[R1 + 4];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_entry(R6,
                                                                          R5,
                                                                          R4,
                                                                          R3,
                                                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0E_info" {
     sat_sgh0E_info:
         const sat_sgh0E_entry;
         const 2;
         const 4294967307;
         const 17179869208;
         const Sghf8_srt+88;
 },
 Data.Functor.Compose.$fShow1Compose_entry() //  [R2, R3]
         { []
         }
     {offset
       cghlY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cghm2; else goto cghm1;
       cghm2: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShow1Compose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghm1: // global
           I64[Hp - 64] = sat_sgh0F_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgh0E_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 36;
           P64[Hp] = Hp - 60;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShow1Compose_info" {
     Data.Functor.Compose.$fShow1Compose_info:
         const Data.Functor.Compose.$fShow1Compose_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sghf8_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.667180291 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_$c==_closure" {
     Data.Functor.Compose.$fEqCompose_$c==_closure:
         const Data.Functor.Compose.$fEqCompose_$c==_info;
 },
 sat_sgh0L_entry() //  [R1]
         { []
         }
     {offset
       cghmx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghmy; else goto cghmz;
       cghmy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghmz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0L_info" {
     sat_sgh0L_info:
         const sat_sgh0L_entry;
         const 1;
         const 16;
 },
 sat_sgh0M_entry() //  [R1]
         { []
         }
     {offset
       cghmA: // global
           _sgh0M::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cghmB; else goto cghmC;
       cghmC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghmE; else goto cghmD;
       cghmE: // global
           HpAlloc = 24;
           goto cghmB;
       cghmB: // global
           R1 = _sgh0M::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghmD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh0M::P64;
           _sgh0H::P64 = P64[_sgh0M::P64 + 16];
           _sgh0I::P64 = P64[_sgh0M::P64 + 24];
           I64[Hp - 16] = sat_sgh0L_info;
           P64[Hp] = _sgh0I::P64;
           R2 = Hp - 16;
           R1 = _sgh0H::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0M_info" {
     sat_sgh0M_info:
         const sat_sgh0M_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fEqCompose_$c==_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cghmF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghmJ; else goto cghmI;
       cghmJ: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fEqCompose_$c==_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghmI: // global
           I64[Hp - 24] = sat_sgh0M_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           _sgh0G::P64 = R2;
           R2 = Hp - 24;
           R1 = _sgh0G::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_$c==_info" {
     Data.Functor.Compose.$fEqCompose_$c==_info:
         const Data.Functor.Compose.$fEqCompose_$c==_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.675911597 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_$c/=_closure" {
     Data.Functor.Compose.$fEqCompose_$c/=_closure:
         const Data.Functor.Compose.$fEqCompose_$c/=_info;
 },
 sat_sgh0S_entry() //  [R1]
         { []
         }
     {offset
       cghnc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghnd; else goto cghne;
       cghnd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghne: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0S_info" {
     sat_sgh0S_info:
         const sat_sgh0S_entry;
         const 1;
         const 16;
 },
 sat_sgh0T_entry() //  [R1]
         { []
         }
     {offset
       cghnf: // global
           _sgh0T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cghng; else goto cghnh;
       cghnh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghnj; else goto cghni;
       cghnj: // global
           HpAlloc = 24;
           goto cghng;
       cghng: // global
           R1 = _sgh0T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghni: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh0T::P64;
           _sgh0O::P64 = P64[_sgh0T::P64 + 16];
           _sgh0P::P64 = P64[_sgh0T::P64 + 24];
           I64[Hp - 16] = sat_sgh0S_info;
           P64[Hp] = _sgh0P::P64;
           R2 = Hp - 16;
           R1 = _sgh0O::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh0T_info" {
     sat_sgh0T_info:
         const sat_sgh0T_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fEqCompose_$c/=_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cghnq: // global
           _sgh0R::P64 = R6;
           _sgh0Q::P64 = R5;
           _sgh0P::P64 = R4;
           _sgh0O::P64 = R3;
           _sgh0N::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cghnr; else goto cghns;
       cghns: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghnu; else goto cghnt;
       cghnu: // global
           HpAlloc = 32;
           goto cghnr;
       cghnr: // global
           R6 = _sgh0R::P64;
           R5 = _sgh0Q::P64;
           R4 = _sgh0P::P64;
           R3 = _sgh0O::P64;
           R2 = _sgh0N::P64;
           R1 = Data.Functor.Compose.$fEqCompose_$c/=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghnt: // global
           I64[Hp - 24] = sat_sgh0T_info;
           P64[Hp - 8] = _sgh0O::P64;
           P64[Hp] = _sgh0P::P64;
           I64[Sp - 8] = block_cghnk_info;
           R4 = _sgh0R::P64;
           R3 = _sgh0Q::P64;
           R2 = Hp - 24;
           R1 = _sgh0N::P64;
           Sp = Sp - 8;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_$c/=_info" {
     Data.Functor.Compose.$fEqCompose_$c/=_info:
         const Data.Functor.Compose.$fEqCompose_$c/=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghnk() //  [R1]
         { []
         }
     {offset
       cghnk: // global
           if (R1 & 7 == 1) goto cghnn; else goto cghno;
       cghnn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cghno: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghnk_info" {
     block_cghnk_info:
         const _cghnk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.686943534 UTC

[section ""data" . Data.Functor.Compose.$fEqCompose_closure" {
     Data.Functor.Compose.$fEqCompose_closure:
         const Data.Functor.Compose.$fEqCompose_info;
 },
 sat_sgh0Z_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghob: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fEqCompose_$c/=_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0Z_info" {
     sat_sgh0Z_info:
         const sat_sgh0Z_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh0Y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghoj: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fEqCompose_$c==_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh0Y_info" {
     sat_sgh0Y_info:
         const sat_sgh0Y_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 Data.Functor.Compose.$fEqCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghon: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cghor; else goto cghoq;
       cghor: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fEqCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghoq: // global
           I64[Hp - 80] = sat_sgh0Z_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sgh0Y_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 78;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fEqCompose_info" {
     Data.Functor.Compose.$fEqCompose_info:
         const Data.Functor.Compose.$fEqCompose_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.69468241 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$ccompare_closure" {
     Data.Functor.Compose.$fOrdCompose_$ccompare_closure:
         const Data.Functor.Compose.$fOrdCompose_$ccompare_info;
 },
 sat_sgh15_entry() //  [R1]
         { []
         }
     {offset
       cghoU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghoV; else goto cghoW;
       cghoV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghoW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh15_info" {
     sat_sgh15_info:
         const sat_sgh15_entry;
         const 1;
         const 16;
 },
 sat_sgh16_entry() //  [R1]
         { []
         }
     {offset
       cghoX: // global
           _sgh16::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghoY; else goto cghoZ;
       cghoZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghp1; else goto cghp0;
       cghp1: // global
           HpAlloc = 24;
           goto cghoY;
       cghoY: // global
           R1 = _sgh16::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh16::P64;
           _sgh11::P64 = P64[_sgh16::P64 + 16];
           _sgh12::P64 = P64[_sgh16::P64 + 24];
           I64[Hp - 16] = sat_sgh15_info;
           P64[Hp] = _sgh12::P64;
           R2 = _sgh11::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh16_info" {
     sat_sgh16_info:
         const sat_sgh16_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$ccompare_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       cghp2: // global
           _sgh14::P64 = R6;
           _sgh13::P64 = R5;
           _sgh12::P64 = R4;
           _sgh11::P64 = R3;
           _sgh10::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cghp3; else goto cghp4;
       cghp4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghp6; else goto cghp5;
       cghp6: // global
           HpAlloc = 32;
           goto cghp3;
       cghp3: // global
           R6 = _sgh14::P64;
           R5 = _sgh13::P64;
           R4 = _sgh12::P64;
           R3 = _sgh11::P64;
           R2 = _sgh10::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghp5: // global
           I64[Hp - 24] = sat_sgh16_info;
           P64[Hp - 8] = _sgh11::P64;
           P64[Hp] = _sgh12::P64;
           R2 = _sgh10::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgh13::P64;
           P64[Sp - 8] = _sgh14::P64;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$ccompare_info" {
     Data.Functor.Compose.$fOrdCompose_$ccompare_info:
         const Data.Functor.Compose.$fOrdCompose_$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.703441453 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure" {
     Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure:
         const Data.Functor.Compose.$fOrdCompose_$cp1Ord_info;
 },
 sat_sgh1c_entry() //  [R1]
         { []
         }
     {offset
       cghpA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghpB; else goto cghpC;
       cghpB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghpC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1c_info" {
     sat_sgh1c_info:
         const sat_sgh1c_entry;
         const 1;
         const 16;
 },
 sat_sgh1b_entry() //  [R1]
         { []
         }
     {offset
       cghpH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghpI; else goto cghpJ;
       cghpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghpJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1b_info" {
     sat_sgh1b_info:
         const sat_sgh1b_entry;
         const 1;
         const 16;
 },
 sat_sgh1a_entry() //  [R1]
         { []
         }
     {offset
       cghpO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghpP; else goto cghpQ;
       cghpP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghpQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$p1Ord1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1a_info" {
     sat_sgh1a_info:
         const sat_sgh1a_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghpR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cghpV; else goto cghpU;
       cghpV: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrdCompose_$cp1Ord_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghpU: // global
           I64[Hp - 64] = sat_sgh1c_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_sgh1b_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgh1a_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fEqCompose_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cp1Ord_info" {
     Data.Functor.Compose.$fOrdCompose_$cp1Ord_info:
         const Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.713493542 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c<_closure" {
     Data.Functor.Compose.$fOrdCompose_$c<_closure:
         const Data.Functor.Compose.$fOrdCompose_$c<_info;
 },
 sat_sgh1i_entry() //  [R1]
         { []
         }
     {offset
       cghqu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghqv; else goto cghqw;
       cghqv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghqw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1i_info" {
     sat_sgh1i_info:
         const sat_sgh1i_entry;
         const 1;
         const 16;
 },
 sat_sgh1j_entry() //  [R1]
         { []
         }
     {offset
       cghqx: // global
           _sgh1j::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghqy; else goto cghqz;
       cghqz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghqB; else goto cghqA;
       cghqB: // global
           HpAlloc = 24;
           goto cghqy;
       cghqy: // global
           R1 = _sgh1j::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghqA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1j::P64;
           _sgh1e::P64 = P64[_sgh1j::P64 + 16];
           _sgh1f::P64 = P64[_sgh1j::P64 + 24];
           I64[Hp - 16] = sat_sgh1i_info;
           P64[Hp] = _sgh1f::P64;
           R2 = _sgh1e::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1j_info" {
     sat_sgh1j_info:
         const sat_sgh1j_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c<_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cghqI: // global
           _sgh1h::P64 = R6;
           _sgh1g::P64 = R5;
           _sgh1f::P64 = R4;
           _sgh1e::P64 = R3;
           _sgh1d::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghqJ; else goto cghqK;
       cghqK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghqM; else goto cghqL;
       cghqM: // global
           HpAlloc = 32;
           goto cghqJ;
       cghqJ: // global
           R6 = _sgh1h::P64;
           R5 = _sgh1g::P64;
           R4 = _sgh1f::P64;
           R3 = _sgh1e::P64;
           R2 = _sgh1d::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghqL: // global
           I64[Hp - 24] = sat_sgh1j_info;
           P64[Hp - 8] = _sgh1e::P64;
           P64[Hp] = _sgh1f::P64;
           I64[Sp - 8] = block_cghqC_info;
           R2 = _sgh1d::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh1g::P64;
           P64[Sp - 16] = _sgh1h::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c<_info" {
     Data.Functor.Compose.$fOrdCompose_$c<_info:
         const Data.Functor.Compose.$fOrdCompose_$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghqC() //  [R1]
         { []
         }
     {offset
       cghqC: // global
           if (R1 & 7 == 1) goto cghqG; else goto cghqF;
       cghqG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cghqF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghqC_info" {
     block_cghqC_info:
         const _cghqC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.724503186 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c>=_closure" {
     Data.Functor.Compose.$fOrdCompose_$c>=_closure:
         const Data.Functor.Compose.$fOrdCompose_$c>=_info;
 },
 sat_sgh1q_entry() //  [R1]
         { []
         }
     {offset
       cghrA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghrB; else goto cghrC;
       cghrB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghrC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1q_info" {
     sat_sgh1q_info:
         const sat_sgh1q_entry;
         const 1;
         const 16;
 },
 sat_sgh1r_entry() //  [R1]
         { []
         }
     {offset
       cghrD: // global
           _sgh1r::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghrE; else goto cghrF;
       cghrF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghrH; else goto cghrG;
       cghrH: // global
           HpAlloc = 24;
           goto cghrE;
       cghrE: // global
           R1 = _sgh1r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghrG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1r::P64;
           _sgh1m::P64 = P64[_sgh1r::P64 + 16];
           _sgh1n::P64 = P64[_sgh1r::P64 + 24];
           I64[Hp - 16] = sat_sgh1q_info;
           P64[Hp] = _sgh1n::P64;
           R2 = _sgh1m::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1r_info" {
     sat_sgh1r_info:
         const sat_sgh1r_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c>=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cghrO: // global
           _sgh1p::P64 = R6;
           _sgh1o::P64 = R5;
           _sgh1n::P64 = R4;
           _sgh1m::P64 = R3;
           _sgh1l::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghrP; else goto cghrQ;
       cghrQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghrS; else goto cghrR;
       cghrS: // global
           HpAlloc = 32;
           goto cghrP;
       cghrP: // global
           R6 = _sgh1p::P64;
           R5 = _sgh1o::P64;
           R4 = _sgh1n::P64;
           R3 = _sgh1m::P64;
           R2 = _sgh1l::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c>=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghrR: // global
           I64[Hp - 24] = sat_sgh1r_info;
           P64[Hp - 8] = _sgh1m::P64;
           P64[Hp] = _sgh1n::P64;
           I64[Sp - 8] = block_cghrI_info;
           R2 = _sgh1l::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh1o::P64;
           P64[Sp - 16] = _sgh1p::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c>=_info" {
     Data.Functor.Compose.$fOrdCompose_$c>=_info:
         const Data.Functor.Compose.$fOrdCompose_$c>=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghrI() //  [R1]
         { []
         }
     {offset
       cghrI: // global
           if (R1 & 7 == 1) goto cghrM; else goto cghrL;
       cghrM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cghrL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghrI_info" {
     block_cghrI_info:
         const _cghrI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.735522427 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c>_closure" {
     Data.Functor.Compose.$fOrdCompose_$c>_closure:
         const Data.Functor.Compose.$fOrdCompose_$c>_info;
 },
 sat_sgh1y_entry() //  [R1]
         { []
         }
     {offset
       cghsG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghsH; else goto cghsI;
       cghsH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghsI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1y_info" {
     sat_sgh1y_info:
         const sat_sgh1y_entry;
         const 1;
         const 16;
 },
 sat_sgh1z_entry() //  [R1]
         { []
         }
     {offset
       cghsJ: // global
           _sgh1z::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghsK; else goto cghsL;
       cghsL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghsN; else goto cghsM;
       cghsN: // global
           HpAlloc = 24;
           goto cghsK;
       cghsK: // global
           R1 = _sgh1z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghsM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1z::P64;
           _sgh1u::P64 = P64[_sgh1z::P64 + 16];
           _sgh1v::P64 = P64[_sgh1z::P64 + 24];
           I64[Hp - 16] = sat_sgh1y_info;
           P64[Hp] = _sgh1v::P64;
           R2 = _sgh1u::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1z_info" {
     sat_sgh1z_info:
         const sat_sgh1z_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c>_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cghsU: // global
           _sgh1x::P64 = R6;
           _sgh1w::P64 = R5;
           _sgh1v::P64 = R4;
           _sgh1u::P64 = R3;
           _sgh1t::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghsV; else goto cghsW;
       cghsW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghsY; else goto cghsX;
       cghsY: // global
           HpAlloc = 32;
           goto cghsV;
       cghsV: // global
           R6 = _sgh1x::P64;
           R5 = _sgh1w::P64;
           R4 = _sgh1v::P64;
           R3 = _sgh1u::P64;
           R2 = _sgh1t::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c>_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghsX: // global
           I64[Hp - 24] = sat_sgh1z_info;
           P64[Hp - 8] = _sgh1u::P64;
           P64[Hp] = _sgh1v::P64;
           I64[Sp - 8] = block_cghsO_info;
           R2 = _sgh1t::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh1w::P64;
           P64[Sp - 16] = _sgh1x::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c>_info" {
     Data.Functor.Compose.$fOrdCompose_$c>_info:
         const Data.Functor.Compose.$fOrdCompose_$c>_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghsO() //  [R1]
         { []
         }
     {offset
       cghsO: // global
           if (R1 & 7 == 3) goto cghsS; else goto cghsR;
       cghsS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cghsR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghsO_info" {
     block_cghsO_info:
         const _cghsO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.74591151 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$c<=_closure" {
     Data.Functor.Compose.$fOrdCompose_$c<=_closure:
         const Data.Functor.Compose.$fOrdCompose_$c<=_info;
 },
 sat_sgh1G_entry() //  [R1]
         { []
         }
     {offset
       cghtM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghtN; else goto cghtO;
       cghtN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghtO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1G_info" {
     sat_sgh1G_info:
         const sat_sgh1G_entry;
         const 1;
         const 16;
 },
 sat_sgh1H_entry() //  [R1]
         { []
         }
     {offset
       cghtP: // global
           _sgh1H::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghtQ; else goto cghtR;
       cghtR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghtT; else goto cghtS;
       cghtT: // global
           HpAlloc = 24;
           goto cghtQ;
       cghtQ: // global
           R1 = _sgh1H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghtS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1H::P64;
           _sgh1C::P64 = P64[_sgh1H::P64 + 16];
           _sgh1D::P64 = P64[_sgh1H::P64 + 24];
           I64[Hp - 16] = sat_sgh1G_info;
           P64[Hp] = _sgh1D::P64;
           R2 = _sgh1C::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1H_info" {
     sat_sgh1H_info:
         const sat_sgh1H_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$c<=_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cghu0: // global
           _sgh1F::P64 = R6;
           _sgh1E::P64 = R5;
           _sgh1D::P64 = R4;
           _sgh1C::P64 = R3;
           _sgh1B::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghu1; else goto cghu2;
       cghu2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghu4; else goto cghu3;
       cghu4: // global
           HpAlloc = 32;
           goto cghu1;
       cghu1: // global
           R6 = _sgh1F::P64;
           R5 = _sgh1E::P64;
           R4 = _sgh1D::P64;
           R3 = _sgh1C::P64;
           R2 = _sgh1B::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghu3: // global
           I64[Hp - 24] = sat_sgh1H_info;
           P64[Hp - 8] = _sgh1C::P64;
           P64[Hp] = _sgh1D::P64;
           I64[Sp - 8] = block_cghtU_info;
           R2 = _sgh1B::P64;
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh1E::P64;
           P64[Sp - 16] = _sgh1F::P64;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$c<=_info" {
     Data.Functor.Compose.$fOrdCompose_$c<=_info:
         const Data.Functor.Compose.$fOrdCompose_$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghtU() //  [R1]
         { []
         }
     {offset
       cghtU: // global
           if (R1 & 7 == 3) goto cghtY; else goto cghtX;
       cghtY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cghtX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghtU_info" {
     block_cghtU_info:
         const _cghtU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.756478408 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cmax_closure" {
     Data.Functor.Compose.$fOrdCompose_$cmax_closure:
         const Data.Functor.Compose.$fOrdCompose_$cmax_info;
 },
 sat_sgh1O_entry() //  [R1]
         { []
         }
     {offset
       cghuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghuT; else goto cghuU;
       cghuT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghuU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1O_info" {
     sat_sgh1O_info:
         const sat_sgh1O_entry;
         const 1;
         const 16;
 },
 sat_sgh1P_entry() //  [R1]
         { []
         }
     {offset
       cghuV: // global
           _sgh1P::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghuW; else goto cghuX;
       cghuX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghuZ; else goto cghuY;
       cghuZ: // global
           HpAlloc = 24;
           goto cghuW;
       cghuW: // global
           R1 = _sgh1P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghuY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1P::P64;
           _sgh1K::P64 = P64[_sgh1P::P64 + 16];
           _sgh1L::P64 = P64[_sgh1P::P64 + 24];
           I64[Hp - 16] = sat_sgh1O_info;
           P64[Hp] = _sgh1L::P64;
           R2 = _sgh1K::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1P_info" {
     sat_sgh1P_info:
         const sat_sgh1P_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$cmax_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cghv6: // global
           _sgh1N::P64 = R6;
           _sgh1M::P64 = R5;
           _sgh1L::P64 = R4;
           _sgh1K::P64 = R3;
           _sgh1J::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cghv7; else goto cghv8;
       cghv8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghva; else goto cghv9;
       cghva: // global
           HpAlloc = 32;
           goto cghv7;
       cghv7: // global
           R6 = _sgh1N::P64;
           R5 = _sgh1M::P64;
           R4 = _sgh1L::P64;
           R3 = _sgh1K::P64;
           R2 = _sgh1J::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$cmax_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghv9: // global
           I64[Hp - 24] = sat_sgh1P_info;
           P64[Hp - 8] = _sgh1K::P64;
           P64[Hp] = _sgh1L::P64;
           I64[Sp - 24] = block_cghv0_info;
           R2 = _sgh1J::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = Hp - 24;
           P64[Sp - 40] = _sgh1M::P64;
           P64[Sp - 32] = _sgh1N::P64;
           P64[Sp - 16] = _sgh1M::P64;
           P64[Sp - 8] = _sgh1N::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cmax_info" {
     Data.Functor.Compose.$fOrdCompose_$cmax_info:
         const Data.Functor.Compose.$fOrdCompose_$cmax_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghv0() //  [R1]
         { []
         }
     {offset
       cghv0: // global
           if (R1 & 7 == 3) goto cghv4; else goto cghv3;
       cghv4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghv3: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghv0_info" {
     block_cghv0_info:
         const _cghv0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.768048751 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_$cmin_closure" {
     Data.Functor.Compose.$fOrdCompose_$cmin_closure:
         const Data.Functor.Compose.$fOrdCompose_$cmin_info;
 },
 sat_sgh1W_entry() //  [R1]
         { []
         }
     {offset
       cghvU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghvV; else goto cghvW;
       cghvV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghvW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1W_info" {
     sat_sgh1W_info:
         const sat_sgh1W_entry;
         const 1;
         const 16;
 },
 sat_sgh1X_entry() //  [R1]
         { []
         }
     {offset
       cghvX: // global
           _sgh1X::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghvY; else goto cghvZ;
       cghvZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghw1; else goto cghw0;
       cghw1: // global
           HpAlloc = 24;
           goto cghvY;
       cghvY: // global
           R1 = _sgh1X::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghw0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh1X::P64;
           _sgh1S::P64 = P64[_sgh1X::P64 + 16];
           _sgh1T::P64 = P64[_sgh1X::P64 + 24];
           I64[Hp - 16] = sat_sgh1W_info;
           P64[Hp] = _sgh1T::P64;
           R2 = _sgh1S::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh1X_info" {
     sat_sgh1X_info:
         const sat_sgh1X_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fOrdCompose_$cmin_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cghw8: // global
           _sgh1V::P64 = R6;
           _sgh1U::P64 = R5;
           _sgh1T::P64 = R4;
           _sgh1S::P64 = R3;
           _sgh1R::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto cghw9; else goto cghwa;
       cghwa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghwc; else goto cghwb;
       cghwc: // global
           HpAlloc = 32;
           goto cghw9;
       cghw9: // global
           R6 = _sgh1V::P64;
           R5 = _sgh1U::P64;
           R4 = _sgh1T::P64;
           R3 = _sgh1S::P64;
           R2 = _sgh1R::P64;
           R1 = Data.Functor.Compose.$fOrdCompose_$cmin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghwb: // global
           I64[Hp - 24] = sat_sgh1X_info;
           P64[Hp - 8] = _sgh1S::P64;
           P64[Hp] = _sgh1T::P64;
           I64[Sp - 24] = block_cghw2_info;
           R2 = _sgh1R::P64;
           I64[Sp - 56] = stg_ap_ppp_info;
           P64[Sp - 48] = Hp - 24;
           P64[Sp - 40] = _sgh1U::P64;
           P64[Sp - 32] = _sgh1V::P64;
           P64[Sp - 16] = _sgh1U::P64;
           P64[Sp - 8] = _sgh1V::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_$cmin_info" {
     Data.Functor.Compose.$fOrdCompose_$cmin_info:
         const Data.Functor.Compose.$fOrdCompose_$cmin_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cghw2() //  [R1]
         { []
         }
     {offset
       cghw2: // global
           if (R1 & 7 == 3) goto cghw6; else goto cghw5;
       cghw6: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghw5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghw2_info" {
     block_cghw2_info:
         const _cghw2;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.780361603 UTC

[section ""data" . Data.Functor.Compose.$fOrdCompose_closure" {
     Data.Functor.Compose.$fOrdCompose_closure:
         const Data.Functor.Compose.$fOrdCompose_info;
 },
 sat_sgh29_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghwT: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$cmin_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh29_info" {
     sat_sgh29_info:
         const sat_sgh29_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh28_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghx1: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$cmax_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh28_info" {
     sat_sgh28_info:
         const sat_sgh28_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh27_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghx9: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c>=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh27_info" {
     sat_sgh27_info:
         const sat_sgh27_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh26_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghxh: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c>_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh26_info" {
     sat_sgh26_info:
         const sat_sgh26_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh25_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghxp: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c<=_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh25_info" {
     sat_sgh25_info:
         const sat_sgh25_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh24_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghxx: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$c<_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh24_info" {
     sat_sgh24_info:
         const sat_sgh24_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh23_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghxF: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fOrdCompose_$ccompare_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh23_info" {
     sat_sgh23_info:
         const sat_sgh23_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_sgh22_entry() //  [R1]
         { []
         }
     {offset
       cghxM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghxN; else goto cghxO;
       cghxN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghxO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fOrdCompose_$cp1Ord_entry(R4,
                                                                R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh22_info" {
     sat_sgh22_info:
         const sat_sgh22_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fOrdCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghxQ: // global
           Hp = Hp + 336;
           if (Hp > HpLim) (likely: False) goto cghxU; else goto cghxT;
       cghxU: // global
           HpAlloc = 336;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fOrdCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghxT: // global
           I64[Hp - 328] = sat_sgh29_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           I64[Hp - 296] = sat_sgh28_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           I64[Hp - 264] = sat_sgh27_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           I64[Hp - 232] = sat_sgh26_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           I64[Hp - 200] = sat_sgh25_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           I64[Hp - 168] = sat_sgh24_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_sgh23_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_sgh22_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 104;
           P64[Hp - 48] = Hp - 134;
           P64[Hp - 40] = Hp - 166;
           P64[Hp - 32] = Hp - 198;
           P64[Hp - 24] = Hp - 230;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 294;
           P64[Hp] = Hp - 326;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fOrdCompose_info" {
     Data.Functor.Compose.$fOrdCompose_info:
         const Data.Functor.Compose.$fOrdCompose_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.797931533 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadPrec_info;
         const 0;
 },
 sat_sgh2e_entry() //  [R1]
         { []
         }
     {offset
       cghyP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghyQ; else goto cghyR;
       cghyQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghyR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2e_info" {
     sat_sgh2e_info:
         const sat_sgh2e_entry;
         const 1;
         const 16;
 },
 sat_sgh2d_entry() //  [R1]
         { []
         }
     {offset
       cghyW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghyX; else goto cghyY;
       cghyX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghyY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2d_info" {
     sat_sgh2d_info:
         const sat_sgh2d_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fReadCompose_$creadPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cghyZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghz3; else goto cghz2;
       cghz3: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghz2: // global
           I64[Hp - 40] = sat_sgh2e_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sgh2d_info;
           P64[Hp] = R4;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadPrec_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sghf8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.807572287 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadsPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadsPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_info;
         const 0;
 },
 sat_sgh2k_entry() //  [R1]
         { []
         }
     {offset
       cghzw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghzx; else goto cghzy;
       cghzx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2k_info" {
     sat_sgh2k_info:
         const sat_sgh2k_entry;
         const 1;
         const 16;
 },
 sat_sgh2j_entry() //  [R1]
         { []
         }
     {offset
       cghzD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghzE; else goto cghzF;
       cghzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2j_info" {
     sat_sgh2j_info:
         const sat_sgh2j_entry;
         const 1;
         const 16;
 },
 ds_sgh2i_entry() //  [R1]
         { []
         }
     {offset
       cghzG: // global
           _sgh2i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cghzH; else goto cghzI;
       cghzI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghzK; else goto cghzJ;
       cghzK: // global
           HpAlloc = 48;
           goto cghzH;
       cghzH: // global
           R1 = _sgh2i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghzJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh2i::P64;
           _sgh2f::P64 = P64[_sgh2i::P64 + 16];
           _sgh2g::P64 = P64[_sgh2i::P64 + 24];
           _sgh2h::P64 = P64[_sgh2i::P64 + 32];
           I64[Hp - 40] = sat_sgh2k_info;
           P64[Hp - 24] = _sgh2h::P64;
           I64[Hp - 16] = sat_sgh2j_info;
           P64[Hp] = _sgh2h::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgh2g::P64;
           R2 = _sgh2f::P64;
           Sp = Sp - 16;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sgh2i_info" {
     ds_sgh2i_info:
         const ds_sgh2i_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+24;
 },
 sat_sgh2m_entry() //  [R1]
         { []
         }
     {offset
       cghzU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghzV; else goto cghzW;
       cghzV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghzW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2m_info" {
     sat_sgh2m_info:
         const sat_sgh2m_entry;
         const 2;
         const 18;
 },
 sat_sgh2n_entry() //  [R1, R2]
         { []
         }
     {offset
       cghzX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghA1; else goto cghA0;
       cghA1: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghA0: // global
           _sgh2i::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sgh2m_info;
           P64[Hp - 8] = _sgh2i::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh2n_info" {
     sat_sgh2n_info:
         const sat_sgh2n_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fReadCompose_$creadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cghA2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cghA6; else goto cghA5;
       cghA6: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghA5: // global
           I64[Hp - 48] = ds_sgh2i_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sgh2n_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadsPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadsPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_entry;
         const 0;
         const 17596481011726;
         const 12884901911;
         const Sghf8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.821209357 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadListPrec_closure" {
     Data.Functor.Compose.$fReadCompose_$creadListPrec_closure:
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_info;
         const 0;
 },
 sat_sgh2s_entry() //  [R1]
         { []
         }
     {offset
       cghAT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghAU; else goto cghAV;
       cghAU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghAV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2s_info" {
     sat_sgh2s_info:
         const sat_sgh2s_entry;
         const 1;
         const 16;
 },
 sat_sgh2r_entry() //  [R1]
         { []
         }
     {offset
       cghB0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghB1; else goto cghB2;
       cghB1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghB2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2r_info" {
     sat_sgh2r_info:
         const sat_sgh2r_entry;
         const 1;
         const 16;
 },
 sat_sgh2t_entry() //  [R1]
         { []
         }
     {offset
       cghB3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghB7; else goto cghB6;
       cghB7: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghB6: // global
           _sgh2o::P64 = P64[R1 + 16];
           _sgh2p::P64 = P64[R1 + 24];
           _sgh2q::P64 = P64[R1 + 32];
           I64[Hp - 40] = sat_sgh2s_info;
           P64[Hp - 24] = _sgh2q::P64;
           I64[Hp - 16] = sat_sgh2r_info;
           P64[Hp] = _sgh2q::P64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = _sgh2p::P64;
           R2 = _sgh2o::P64;
           call Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_entry(R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh2t_info" {
     sat_sgh2t_info:
         const sat_sgh2t_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+24;
 },
 Data.Functor.Compose.$fReadCompose_$creadListPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cghB8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cghBc; else goto cghBb;
       cghBc: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghBb: // global
           I64[Hp - 32] = sat_sgh2t_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadListPrec_info" {
     Data.Functor.Compose.$fReadCompose_$creadListPrec_info:
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_entry;
         const 0;
         const 35205846925326;
         const 12884901911;
         const Sghf8_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.831207983 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_$creadList_closure" {
     Data.Functor.Compose.$fReadCompose_$creadList_closure:
         const Data.Functor.Compose.$fReadCompose_$creadList_info;
         const 0;
 },
 sat_sgh2x_entry() //  [R1]
         { []
         }
     {offset
       cghBF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghBG; else goto cghBH;
       cghBG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghBH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call Data.Functor.Compose.$fReadCompose_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2x_info" {
     sat_sgh2x_info:
         const sat_sgh2x_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+128;
 },
 Data.Functor.Compose.$fReadCompose_$creadList_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cghBI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cghBM; else goto cghBL;
       cghBM: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghBL: // global
           I64[Hp - 32] = sat_sgh2x_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_$creadList_info" {
     Data.Functor.Compose.$fReadCompose_$creadList_info:
         const Data.Functor.Compose.$fReadCompose_$creadList_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sghf8_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.839023231 UTC

[section ""data" . Data.Functor.Compose.$fReadCompose_closure" {
     Data.Functor.Compose.$fReadCompose_closure:
         const Data.Functor.Compose.$fReadCompose_info;
         const 0;
 },
 sat_sgh2E_entry() //  [R1]
         { []
         }
     {offset
       cghCa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghCb; else goto cghCc;
       cghCb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghCc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadListPrec_entry(R4,
                                                                        R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2E_info" {
     sat_sgh2E_info:
         const sat_sgh2E_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+128;
 },
 sat_sgh2D_entry() //  [R1]
         { []
         }
     {offset
       cghCh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghCi; else goto cghCj;
       cghCi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghCj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2D_info" {
     sat_sgh2D_info:
         const sat_sgh2D_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+112;
 },
 sat_sgh2C_entry() //  [R1]
         { []
         }
     {offset
       cghCo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghCp; else goto cghCq;
       cghCp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghCq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadList_entry(R4,
                                                                    R3,
                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2C_info" {
     sat_sgh2C_info:
         const sat_sgh2C_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+136;
 },
 sat_sgh2B_entry() //  [R1]
         { []
         }
     {offset
       cghCv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghCw; else goto cghCx;
       cghCw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghCx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fReadCompose_$creadsPrec_entry(R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2B_info" {
     sat_sgh2B_info:
         const sat_sgh2B_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+120;
 },
 Data.Functor.Compose.$fReadCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghCz: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cghCD; else goto cghCC;
       cghCD: // global
           HpAlloc = 200;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fReadCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghCC: // global
           I64[Hp - 192] = sat_sgh2E_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           I64[Hp - 152] = sat_sgh2D_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           I64[Hp - 112] = sat_sgh2C_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgh2B_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 152;
           P64[Hp] = Hp - 192;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fReadCompose_info" {
     Data.Functor.Compose.$fReadCompose_info:
         const Data.Functor.Compose.$fReadCompose_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const Sghf8_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.851955108 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure" {
     Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure:
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_info;
         const 0;
 },
 sat_sgh2N_entry() //  [R1]
         { []
         }
     {offset
       cghDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghDq; else goto cghDr;
       cghDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghDr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2N_info" {
     sat_sgh2N_info:
         const sat_sgh2N_entry;
         const 1;
         const 16;
 },
 sat_sgh2M_entry() //  [R1]
         { []
         }
     {offset
       cghDw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghDx; else goto cghDy;
       cghDx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghDy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2M_info" {
     sat_sgh2M_info:
         const sat_sgh2M_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cghDz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghDA; else goto cghDB;
       cghDA: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghDB: // global
           I64[Sp - 40] = block_cghDg_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ughDF; else goto cghDh;
       ughDF: // global
           call _cghDg(R1) args: 0, res: 0, upd: 0;
       cghDh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshowsPrec_info" {
     Data.Functor.Compose.$fShowCompose_$cshowsPrec_info:
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry;
         const 0;
         const 2203318222862;
         const 21474836505;
         const Sghf8_srt+80;
 },
 _cghDg() //  [R1]
         { []
         }
     {offset
       cghDg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cghDE; else goto cghDD;
       cghDE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cghDD: // global
           _sgh2L::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sgh2N_info;
           _sgh2H::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sgh2H::P64;
           I64[Hp - 16] = sat_sgh2M_info;
           P64[Hp] = _sgh2H::P64;
           R6 = _sgh2L::I64;
           R5 = Hp - 40;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghDg_info" {
     block_cghDg_info:
         const _cghDg;
         const 4;
         const 4294967326;
         const Sghf8_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.863612565 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshow_closure" {
     Data.Functor.Compose.$fShowCompose_$cshow_closure:
         const Data.Functor.Compose.$fShowCompose_$cshow_info;
         const 0;
 },
 sp_sgh2S_entry() //  [R1]
         { []
         }
     {offset
       cghEa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghEb; else goto cghEc;
       cghEb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghEc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sp_sgh2S_info" {
     sp_sgh2S_info:
         const sp_sgh2S_entry;
         const 1;
         const 16;
 },
 sl_sgh2T_entry() //  [R1]
         { []
         }
     {offset
       cghEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghEi; else goto cghEj;
       cghEi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghEj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sl_sgh2T_info" {
     sl_sgh2T_info:
         const sl_sgh2T_entry;
         const 1;
         const 16;
 },
 sat_sgh2V_entry() //  [R1]
         { []
         }
     {offset
       cghEs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghEt; else goto cghEu;
       cghEt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghEu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2V_info" {
     sat_sgh2V_info:
         const sat_sgh2V_entry;
         const 3;
         const 15;
 },
 sat_sgh2U_entry() //  [R1]
         { []
         }
     {offset
       cghEz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghEA; else goto cghEB;
       cghEA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghEB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2U_info" {
     sat_sgh2U_info:
         const sat_sgh2U_entry;
         const 3;
         const 15;
 },
 sat_sgh2W_entry() //  [R1]
         { []
         }
     {offset
       cghEC: // global
           _sgh2W::P64 = R1;
           if ((Sp + -64) < SpLim) (likely: False) goto cghED; else goto cghEE;
       cghEE: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cghEG; else goto cghEF;
       cghEG: // global
           HpAlloc = 80;
           goto cghED;
       cghED: // global
           R1 = _sgh2W::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghEF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh2W::P64;
           _sgh2O::P64 = P64[_sgh2W::P64 + 16];
           _sgh2P::P64 = P64[_sgh2W::P64 + 24];
           _sgh2R::P64 = P64[_sgh2W::P64 + 32];
           _sgh2S::P64 = P64[_sgh2W::P64 + 40];
           _sgh2T::P64 = P64[_sgh2W::P64 + 48];
           I64[Hp - 72] = sat_sgh2V_info;
           P64[Hp - 56] = _sgh2P::P64;
           P64[Hp - 48] = _sgh2S::P64;
           P64[Hp - 40] = _sgh2T::P64;
           I64[Hp - 32] = sat_sgh2U_info;
           P64[Hp - 16] = _sgh2P::P64;
           P64[Hp - 8] = _sgh2S::P64;
           P64[Hp] = _sgh2T::P64;
           R2 = _sgh2O::P64;
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = Hp - 32;
           P64[Sp - 48] = Hp - 72;
           P64[Sp - 40] = Data.Functor.Classes.$fRead1Const1_closure;
           P64[Sp - 32] = _sgh2R::P64;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh2W_info" {
     sat_sgh2W_info:
         const sat_sgh2W_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$fShowCompose_$cshow_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cghEI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cghEM; else goto cghEL;
       cghEM: // global
           HpAlloc = 128;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghEL: // global
           I64[Hp - 120] = sp_sgh2S_info;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sl_sgh2T_info;
           P64[Hp - 80] = R4;
           I64[Hp - 72] = sat_sgh2W_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure;
           P64[Hp] = Hp - 72;
           R3 = Hp - 14;
           R2 = Data.Functor.Compose.$fDataCompose6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshow_info" {
     Data.Functor.Compose.$fShowCompose_$cshow_info:
         const Data.Functor.Compose.$fShowCompose_$cshow_entry;
         const 0;
         const 8800387989518;
         const 17179869208;
         const Sghf8_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.877755504 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_$cshowList_closure" {
     Data.Functor.Compose.$fShowCompose_$cshowList_closure:
         const Data.Functor.Compose.$fShowCompose_$cshowList_info;
         const 0;
 },
 lvl8_sgh33_entry() //  [R1]
         { []
         }
     {offset
       cghFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghFL; else goto cghFM;
       cghFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghFM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh33_info" {
     lvl8_sgh33_info:
         const lvl8_sgh33_entry;
         const 1;
         const 16;
 },
 lvl9_sgh34_entry() //  [R1]
         { []
         }
     {offset
       cghFR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghFS; else goto cghFT;
       cghFS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghFT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_sgh34_info" {
     lvl9_sgh34_info:
         const lvl9_sgh34_entry;
         const 1;
         const 16;
 },
 sat_sgh36_entry() //  [R1, R2]
         { []
         }
     {offset
       cghFZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cghG0; else goto cghG1;
       cghG0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghG1: // global
           R6 = 0;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _sgh35::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sgh35::P64;
           Sp = Sp - 8;
           call Data.Functor.Compose.$w$cliftShowsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh36_info" {
     sat_sgh36_info:
         const sat_sgh36_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const Sghf8_srt+80;
 },
 Data.Functor.Compose.$fShowCompose_$cshowList_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cghG2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cghG6; else goto cghG5;
       cghG6: // global
           HpAlloc = 88;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghG5: // global
           I64[Hp - 80] = lvl8_sgh33_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl9_sgh34_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sgh36_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 31;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_$cshowList_info" {
     Data.Functor.Compose.$fShowCompose_$cshowList_info:
         const Data.Functor.Compose.$fShowCompose_$cshowList_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const Sghf8_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.888444921 UTC

[section ""data" . Data.Functor.Compose.$fShowCompose_closure" {
     Data.Functor.Compose.$fShowCompose_closure:
         const Data.Functor.Compose.$fShowCompose_info;
         const 0;
 },
 sat_sgh3c_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghGD: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fShowCompose_$cshowList_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3c_info" {
     sat_sgh3c_info:
         const sat_sgh3c_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sghf8_srt+168;
 },
 sat_sgh3b_entry() //  [R1, R2]
         { []
         }
     {offset
       cghGL: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fShowCompose_$cshow_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3b_info" {
     sat_sgh3b_info:
         const sat_sgh3b_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sghf8_srt+160;
 },
 sat_sgh3a_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghGT: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fShowCompose_$cshowsPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3a_info" {
     sat_sgh3a_info:
         const sat_sgh3a_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const Sghf8_srt+152;
 },
 Data.Functor.Compose.$fShowCompose_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghGX: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cghH1; else goto cghH0;
       cghH1: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fShowCompose_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghH0: // global
           I64[Hp - 120] = sat_sgh3c_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_sgh3b_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sgh3a_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fShowCompose_info" {
     Data.Functor.Compose.$fShowCompose_info:
         const Data.Functor.Compose.$fShowCompose_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const Sghf8_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.89860775 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose2_closure" {
     Data.Functor.Compose.$fFunctorCompose2_closure:
         const Data.Functor.Compose.$fFunctorCompose2_info;
 },
 sat_sgh3h_entry() //  [R1]
         { []
         }
     {offset
       cghHv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghHw; else goto cghHx;
       cghHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh3h_info" {
     sat_sgh3h_info:
         const sat_sgh3h_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFunctorCompose2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cghHy: // global
           _sgh3g::P64 = R5;
           _sgh3f::P64 = R4;
           _sgh3e::P64 = R3;
           _sgh3d::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cghHz; else goto cghHA;
       cghHA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghHC; else goto cghHB;
       cghHC: // global
           HpAlloc = 32;
           goto cghHz;
       cghHz: // global
           R5 = _sgh3g::P64;
           R4 = _sgh3f::P64;
           R3 = _sgh3e::P64;
           R2 = _sgh3d::P64;
           R1 = Data.Functor.Compose.$fFunctorCompose2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghHB: // global
           I64[Hp - 24] = sat_sgh3h_info;
           P64[Hp - 8] = _sgh3e::P64;
           P64[Hp] = _sgh3f::P64;
           R2 = _sgh3d::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgh3g::P64;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose2_info" {
     Data.Functor.Compose.$fFunctorCompose2_info:
         const Data.Functor.Compose.$fFunctorCompose2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.905480552 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose1_closure" {
     Data.Functor.Compose.$fFunctorCompose1_closure:
         const Data.Functor.Compose.$fFunctorCompose1_info;
 },
 sat_sgh3n_entry() //  [R1]
         { []
         }
     {offset
       cghI5: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3n_info" {
     sat_sgh3n_info:
         const sat_sgh3n_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgh3o_entry() //  [R1]
         { []
         }
     {offset
       cghI8: // global
           _sgh3o::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cghI9; else goto cghIa;
       cghIa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghIc; else goto cghIb;
       cghIc: // global
           HpAlloc = 16;
           goto cghI9;
       cghI9: // global
           R1 = _sgh3o::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghIb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh3o::P64;
           _sgh3j::P64 = P64[_sgh3o::P64 + 16];
           _sgh3k::P64 = P64[_sgh3o::P64 + 24];
           I64[Hp - 8] = sat_sgh3n_info;
           P64[Hp] = _sgh3k::P64;
           R2 = _sgh3j::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh3o_info" {
     sat_sgh3o_info:
         const sat_sgh3o_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFunctorCompose1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cghId: // global
           _sgh3l::P64 = R5;
           _sgh3k::P64 = R4;
           _sgh3j::P64 = R3;
           _sgh3i::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cghIe; else goto cghIf;
       cghIf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghIh; else goto cghIg;
       cghIh: // global
           HpAlloc = 32;
           goto cghIe;
       cghIe: // global
           R5 = _sgh3l::P64;
           R4 = _sgh3k::P64;
           R3 = _sgh3j::P64;
           R2 = _sgh3i::P64;
           R1 = Data.Functor.Compose.$fFunctorCompose1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghIg: // global
           I64[Hp - 24] = sat_sgh3o_info;
           P64[Hp - 8] = _sgh3j::P64;
           P64[Hp] = _sgh3k::P64;
           R2 = _sgh3i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgh3l::P64;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose1_info" {
     Data.Functor.Compose.$fFunctorCompose1_info:
         const Data.Functor.Compose.$fFunctorCompose1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.913981286 UTC

[section ""data" . Data.Functor.Compose.$fFunctorCompose_closure" {
     Data.Functor.Compose.$fFunctorCompose_closure:
         const Data.Functor.Compose.$fFunctorCompose_info;
 },
 sat_sgh3s_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghIK: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFunctorCompose1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3s_info" {
     sat_sgh3s_info:
         const sat_sgh3s_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh3r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghIS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFunctorCompose2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3r_info" {
     sat_sgh3r_info:
         const sat_sgh3r_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Compose.$fFunctorCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cghIW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cghJ0; else goto cghIZ;
       cghJ0: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFunctorCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghIZ: // global
           I64[Hp - 64] = sat_sgh3s_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_sgh3r_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFunctorCompose_info" {
     Data.Functor.Compose.$fFunctorCompose_info:
         const Data.Functor.Compose.$fFunctorCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.921784695 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info;
 },
 sat_sgh3y_entry() //  [R1]
         { []
         }
     {offset
       cghJp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghJq; else goto cghJr;
       cghJq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghJr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh3y_info" {
     sat_sgh3y_info:
         const sat_sgh3y_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cghJs: // global
           _sgh3x::P64 = R6;
           _sgh3w::P64 = R5;
           _sgh3v::P64 = R4;
           _sgh3u::P64 = R3;
           _sgh3t::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cghJt; else goto cghJu;
       cghJu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cghJw; else goto cghJv;
       cghJw: // global
           HpAlloc = 40;
           goto cghJt;
       cghJt: // global
           R6 = _sgh3x::P64;
           R5 = _sgh3w::P64;
           R4 = _sgh3v::P64;
           R3 = _sgh3u::P64;
           R2 = _sgh3t::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldMap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghJv: // global
           I64[Hp - 32] = sat_sgh3y_info;
           P64[Hp - 16] = _sgh3u::P64;
           P64[Hp - 8] = _sgh3v::P64;
           P64[Hp] = _sgh3w::P64;
           R2 = _sgh3t::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sgh3v::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _sgh3x::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldMap_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.929763182 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfold_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfold_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfold_info;
 },
 sat_sgh3D_entry() //  [R1]
         { []
         }
     {offset
       cghJV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghJW; else goto cghJX;
       cghJW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghJX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.id_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh3D_info" {
     sat_sgh3D_info:
         const sat_sgh3D_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfold_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cghJY: // global
           _sgh3C::P64 = R5;
           _sgh3B::P64 = R4;
           _sgh3A::P64 = R3;
           _sgh3z::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cghJZ; else goto cghK0;
       cghK0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghK2; else goto cghK1;
       cghK2: // global
           HpAlloc = 32;
           goto cghJZ;
       cghJZ: // global
           R5 = _sgh3C::P64;
           R4 = _sgh3B::P64;
           R3 = _sgh3A::P64;
           R2 = _sgh3z::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfold_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghK1: // global
           I64[Hp - 24] = sat_sgh3D_info;
           P64[Hp - 8] = _sgh3A::P64;
           P64[Hp] = _sgh3B::P64;
           R2 = _sgh3z::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = _sgh3B::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sgh3C::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfold_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfold_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfold_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.935613443 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose1_closure" {
     Data.Functor.Compose.$fFoldableCompose1_closure:
         const Data.Functor.Compose.$fFoldableCompose1_info;
 },
 Data.Functor.Compose.$fFoldableCompose1_entry() //  [R2]
         { []
         }
     {offset
       cghKo: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose1_info" {
     Data.Functor.Compose.$fFoldableCompose1_info:
         const Data.Functor.Compose.$fFoldableCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.94066553 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$csum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$csum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$csum_info;
         const 0;
 },
 $dMonoid_sgh3I_entry() //  [R1]
         { []
         }
     {offset
       cghKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghKE; else goto cghKF;
       cghKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidSum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgh3I_info" {
     $dMonoid_sgh3I_info:
         const $dMonoid_sgh3I_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+184;
 },
 lvl8_sgh3J_entry() //  [R1]
         { []
         }
     {offset
       cghKK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghKL; else goto cghKM;
       cghKL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghKM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh3J_info" {
     lvl8_sgh3J_info:
         const lvl8_sgh3J_entry;
         const 2;
         const 18;
 },
 sat_sgh3L_entry() //  [R1, R2]
         { []
         }
     {offset
       cghKS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghKT; else goto cghKU;
       cghKT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghKU: // global
           _sgh3K::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _sgh3K::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3L_info" {
     sat_sgh3L_info:
         const sat_sgh3L_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Compose.$fFoldableCompose_$csum_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cghKV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cghKZ; else goto cghKY;
       cghKZ: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$csum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghKY: // global
           I64[Hp - 80] = $dMonoid_sgh3I_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgh3J_info;
           P64[Hp - 40] = R3;
           _cghKz::P64 = Hp - 80;
           P64[Hp - 32] = _cghKz::P64;
           I64[Hp - 24] = sat_sgh3L_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cghKz::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$csum_info" {
     Data.Functor.Compose.$fFoldableCompose_$csum_info:
         const Data.Functor.Compose.$fFoldableCompose_$csum_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sghf8_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.949675389 UTC

[section ""cstring" . lvl_rgdPQ_bytes" {
     lvl_rgdPQ_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.95219261 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose2_closure" {
     Data.Functor.Compose.$fFoldableCompose2_closure:
         const Data.Functor.Compose.$fFoldableCompose2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose2_entry() //  [R1]
         { []
         }
     {offset
       cghLC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cghLD; else goto cghLE;
       cghLD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghLE: // global
           (_cghLx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghLx::I64 == 0) goto cghLz; else goto cghLy;
       cghLz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghLy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghLx::I64;
           I64[Sp - 24] = block_cghLA_info;
           R2 = lvl_rgdPQ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose2_info" {
     Data.Functor.Compose.$fFoldableCompose2_info:
         const Data.Functor.Compose.$fFoldableCompose2_entry;
         const 0;
         const 4294967317;
         const Sghf8_srt+200;
 },
 _cghLA() //  [R1]
         { []
         }
     {offset
       cghLA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghLA_info" {
     block_cghLA_info:
         const _cghLA;
         const 0;
         const 4294967326;
         const Sghf8_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.960020456 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cminimum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cminimum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_info;
         const 0;
 },
 $dMonoid_sgh3Q_entry() //  [R1]
         { []
         }
     {offset
       cghM2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghM3; else goto cghM4;
       cghM3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghM4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgh3Q_info" {
     $dMonoid_sgh3Q_info:
         const $dMonoid_sgh3Q_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+208;
 },
 lvl8_sgh3R_entry() //  [R1]
         { []
         }
     {offset
       cghM9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghMa; else goto cghMb;
       cghMa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghMb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh3R_info" {
     lvl8_sgh3R_info:
         const lvl8_sgh3R_entry;
         const 2;
         const 18;
 },
 sat_sgh3V_entry() //  [R1, R2]
         { []
         }
     {offset
       cghMn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghMo; else goto cghMp;
       cghMo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghMp: // global
           I64[Sp - 8] = block_cghMh_info;
           _sgh3S::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _sgh3S::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh3V_info" {
     sat_sgh3V_info:
         const sat_sgh3V_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sghf8_srt+216;
 },
 _cghMh() //  [R1]
         { []
         }
     {offset
       cghMh: // global
           if (R1 & 7 == 1) goto cghMk; else goto cghMl;
       cghMk: // global
           R1 = Data.Functor.Compose.$fFoldableCompose2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghMl: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghMh_info" {
     block_cghMh_info:
         const _cghMh;
         const 0;
         const 4294967326;
         const Sghf8_srt+216;
 },
 Data.Functor.Compose.$fFoldableCompose_$cminimum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cghMw: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cghMA; else goto cghMz;
       cghMA: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cminimum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghMz: // global
           I64[Hp - 80] = $dMonoid_sgh3Q_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgh3R_info;
           P64[Hp - 40] = R3;
           _cghLY::P64 = Hp - 80;
           P64[Hp - 32] = _cghLY::P64;
           I64[Hp - 24] = sat_sgh3V_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cghLY::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cminimum_info" {
     Data.Functor.Compose.$fFoldableCompose_$cminimum_info:
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sghf8_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.9707933 UTC

[section ""cstring" . lvl1_rgdPR_bytes" {
     lvl1_rgdPR_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.973369897 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose3_closure" {
     Data.Functor.Compose.$fFoldableCompose3_closure:
         const Data.Functor.Compose.$fFoldableCompose3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose3_entry() //  [R1]
         { []
         }
     {offset
       cghNk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cghNl; else goto cghNm;
       cghNl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghNm: // global
           (_cghNf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghNf::I64 == 0) goto cghNh; else goto cghNg;
       cghNh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghNg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghNf::I64;
           I64[Sp - 24] = block_cghNi_info;
           R2 = lvl1_rgdPR_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose3_info" {
     Data.Functor.Compose.$fFoldableCompose3_info:
         const Data.Functor.Compose.$fFoldableCompose3_entry;
         const 0;
         const 4294967317;
         const Sghf8_srt+200;
 },
 _cghNi() //  [R1]
         { []
         }
     {offset
       cghNi: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghNi_info" {
     block_cghNi_info:
         const _cghNi;
         const 0;
         const 4294967326;
         const Sghf8_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.981153796 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_info;
         const 0;
 },
 $dMonoid_sgh40_entry() //  [R1]
         { []
         }
     {offset
       cghNK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghNL; else goto cghNM;
       cghNL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghNM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Utils.$fMonoidMax_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgh40_info" {
     $dMonoid_sgh40_info:
         const $dMonoid_sgh40_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+232;
 },
 lvl8_sgh41_entry() //  [R1]
         { []
         }
     {offset
       cghNR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghNS; else goto cghNT;
       cghNS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghNT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Base.Just_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh41_info" {
     lvl8_sgh41_info:
         const lvl8_sgh41_entry;
         const 2;
         const 18;
 },
 sat_sgh45_entry() //  [R1, R2]
         { []
         }
     {offset
       cghO5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghO6; else goto cghO7;
       cghO6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghO7: // global
           I64[Sp - 8] = block_cghNZ_info;
           _sgh42::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_ppp_info;
           P64[Sp - 32] = P64[R1 + 15];
           P64[Sp - 24] = P64[R1 + 23];
           P64[Sp - 16] = _sgh42::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh45_info" {
     sat_sgh45_info:
         const sat_sgh45_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const Sghf8_srt+240;
 },
 _cghNZ() //  [R1]
         { []
         }
     {offset
       cghNZ: // global
           if (R1 & 7 == 1) goto cghO2; else goto cghO3;
       cghO2: // global
           R1 = Data.Functor.Compose.$fFoldableCompose3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghO3: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghNZ_info" {
     block_cghNZ_info:
         const _cghNZ;
         const 0;
         const 4294967326;
         const Sghf8_srt+240;
 },
 Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cghOe: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cghOi; else goto cghOh;
       cghOi: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghOh: // global
           I64[Hp - 80] = $dMonoid_sgh40_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgh41_info;
           P64[Hp - 40] = R3;
           _cghNG::P64 = Hp - 80;
           P64[Hp - 32] = _cghNG::P64;
           I64[Hp - 24] = sat_sgh45_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cghNG::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cmaximum_info" {
     Data.Functor.Compose.$fFoldableCompose_$cmaximum_info:
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const Sghf8_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:11.994126496 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$celem_closure" {
     Data.Functor.Compose.$fFoldableCompose_$celem_closure:
         const Data.Functor.Compose.$fFoldableCompose_$celem_info;
         const 0;
 },
 sat_sgh4b_entry() //  [R1]
         { []
         }
     {offset
       cghP5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghP6; else goto cghP7;
       cghP6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4b_info" {
     sat_sgh4b_info:
         const sat_sgh4b_entry;
         const 2;
         const 18;
 },
 lvl8_sgh4a_entry() //  [R1]
         { []
         }
     {offset
       cghP8: // global
           _sgh4a::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghP9; else goto cghPa;
       cghPa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghPc; else goto cghPb;
       cghPc: // global
           HpAlloc = 32;
           goto cghP9;
       cghP9: // global
           R1 = _sgh4a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghPb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh4a::P64;
           _sgh47::P64 = P64[_sgh4a::P64 + 16];
           _sgh48::P64 = P64[_sgh4a::P64 + 24];
           _sgh49::P64 = P64[_sgh4a::P64 + 32];
           I64[Hp - 24] = sat_sgh4b_info;
           P64[Hp - 8] = _sgh48::P64;
           P64[Hp] = _sgh49::P64;
           R2 = _sgh47::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh4a_info" {
     lvl8_sgh4a_info:
         const lvl8_sgh4a_entry;
         const 3;
         const 4294967311;
         const Sghf8_srt+256;
 },
 sat_sgh4d_entry() //  [R1, R2]
         { []
         }
     {offset
       cghPi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghPj; else goto cghPk;
       cghPj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghPk: // global
           _sgh4c::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Semigroup.Internal.$fMonoidAny_closure;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _sgh4c::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh4d_info" {
     sat_sgh4d_info:
         const sat_sgh4d_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+256;
 },
 Data.Functor.Compose.$fFoldableCompose_$celem_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cghPl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cghPp; else goto cghPo;
       cghPp: // global
           HpAlloc = 64;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$celem_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghPo: // global
           I64[Hp - 56] = lvl8_sgh4a_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sgh4d_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$celem_info" {
     Data.Functor.Compose.$fFoldableCompose_$celem_info:
         const Data.Functor.Compose.$fFoldableCompose_$celem_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const Sghf8_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.00345524 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose7_closure" {
     Data.Functor.Compose.$fFoldableCompose7_closure:
         const Data.Functor.Compose.$fFoldableCompose7_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose7_entry() //  [R1]
         { []
         }
     {offset
       cghQ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghQ2; else goto cghQ3;
       cghQ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghQ3: // global
           (_cghPY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghPY::I64 == 0) goto cghQ0; else goto cghPZ;
       cghQ0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghPZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghPY::I64;
           R2 = Data.Semigroup.Internal.$fMonoidEndo_closure;
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidDual_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose7_info" {
     Data.Functor.Compose.$fFoldableCompose7_info:
         const Data.Functor.Compose.$fFoldableCompose7_entry;
         const 0;
         const 4294967317;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.010079357 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_info;
         const 0;
 },
 sat_sgh4l_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghQp: // global
           _sgh4k::P64 = R3;
           R3 = R2;
           R2 = _sgh4k::P64;
           R1 = P64[R1 + 6];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh4l_info" {
     sat_sgh4l_info:
         const sat_sgh4l_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgh4m_entry() //  [R1]
         { []
         }
     {offset
       cghQs: // global
           _sgh4m::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghQt; else goto cghQu;
       cghQu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghQw; else goto cghQv;
       cghQw: // global
           HpAlloc = 16;
           goto cghQt;
       cghQt: // global
           R1 = _sgh4m::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghQv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh4m::P64;
           _sgh4f::P64 = P64[_sgh4m::P64 + 16];
           _sgh4g::P64 = P64[_sgh4m::P64 + 24];
           I64[Hp - 8] = sat_sgh4l_info;
           P64[Hp] = _sgh4g::P64;
           R2 = _sgh4f::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4m_info" {
     sat_sgh4m_info:
         const sat_sgh4m_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cghQx: // global
           _sgh4i::P64 = R6;
           _sgh4h::P64 = R5;
           _sgh4g::P64 = R4;
           _sgh4f::P64 = R3;
           _sgh4e::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghQy; else goto cghQz;
       cghQz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghQB; else goto cghQA;
       cghQB: // global
           HpAlloc = 32;
           goto cghQy;
       cghQy: // global
           R6 = _sgh4i::P64;
           R5 = _sgh4h::P64;
           R4 = _sgh4g::P64;
           R3 = _sgh4f::P64;
           R2 = _sgh4e::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghQA: // global
           I64[Hp - 24] = sat_sgh4m_info;
           P64[Hp - 8] = _sgh4f::P64;
           P64[Hp] = _sgh4g::P64;
           R2 = _sgh4e::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgh4i::P64;
           P64[Sp - 8] = _sgh4h::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const Sghf8_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.017046962 UTC

[section ""cstring" . lvl2_rgdPS_bytes" {
     lvl2_rgdPS_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.019559634 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose6_closure" {
     Data.Functor.Compose.$fFoldableCompose6_closure:
         const Data.Functor.Compose.$fFoldableCompose6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose6_entry() //  [R1]
         { []
         }
     {offset
       cghR6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cghR7; else goto cghR8;
       cghR7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghR8: // global
           (_cghR1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghR1::I64 == 0) goto cghR3; else goto cghR2;
       cghR3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghR2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghR1::I64;
           I64[Sp - 24] = block_cghR4_info;
           R2 = lvl2_rgdPS_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose6_info" {
     Data.Functor.Compose.$fFoldableCompose6_info:
         const Data.Functor.Compose.$fFoldableCompose6_entry;
         const 0;
         const 4294967317;
         const Sghf8_srt+200;
 },
 _cghR4() //  [R1]
         { []
         }
     {offset
       cghR4: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghR4_info" {
     block_cghR4_info:
         const _cghR4;
         const 0;
         const 4294967326;
         const Sghf8_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.027784207 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info;
         const 0;
 },
 sat_sgh4w_entry() //  [R1]
         { []
         }
     {offset
       cghRM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghRN; else goto cghRO;
       cghRN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghRO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cghRF_info;
           _sgh4q::P64 = P64[R1 + 16];
           _sgh4s::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgh4q::P64;
           P64[Sp - 24] = _sgh4s::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ughRV; else goto cghRG;
       ughRV: // global
           call _cghRF(R1) args: 0, res: 0, upd: 0;
       cghRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4w_info" {
     sat_sgh4w_info:
         const sat_sgh4w_entry;
         const 3;
         const 15;
 },
 _cghRF() //  [R1]
         { []
         }
     {offset
       cghRF: // global
           _sgh4s::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cghRJ; else goto cghRK;
       cghRJ: // global
           R1 = _sgh4s::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cghRK: // global
           R3 = _sgh4s::P64;
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghRF_info" {
     block_cghRF_info:
         const _cghRF;
         const 2;
         const 30;
 },
 sat_sgh4x_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghRX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cghS1; else goto cghS0;
       cghS1: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghS0: // global
           _sgh4q::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgh4w_info;
           P64[Hp - 32] = _sgh4q::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh4x_info" {
     sat_sgh4x_info:
         const sat_sgh4x_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgh4y_entry() //  [R1]
         { []
         }
     {offset
       cghS2: // global
           _sgh4y::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghS3; else goto cghS4;
       cghS4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghS6; else goto cghS5;
       cghS6: // global
           HpAlloc = 16;
           goto cghS3;
       cghS3: // global
           R1 = _sgh4y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghS5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh4y::P64;
           _sgh4p::P64 = P64[_sgh4y::P64 + 16];
           _sgh4q::P64 = P64[_sgh4y::P64 + 24];
           I64[Hp - 8] = sat_sgh4x_info;
           P64[Hp] = _sgh4q::P64;
           R2 = _sgh4p::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4y_info" {
     sat_sgh4y_info:
         const sat_sgh4y_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cghSd: // global
           _sgh4r::P64 = R5;
           _sgh4q::P64 = R4;
           _sgh4p::P64 = R3;
           _sgh4o::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cghSe; else goto cghSf;
       cghSf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghSh; else goto cghSg;
       cghSh: // global
           HpAlloc = 32;
           goto cghSe;
       cghSe: // global
           R5 = _sgh4r::P64;
           R4 = _sgh4q::P64;
           R3 = _sgh4p::P64;
           R2 = _sgh4o::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghSg: // global
           I64[Hp - 24] = sat_sgh4y_info;
           P64[Hp - 8] = _sgh4p::P64;
           P64[Hp] = _sgh4q::P64;
           I64[Sp - 8] = block_cghS7_info;
           R2 = _sgh4o::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh4r::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl1_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry;
         const 0;
         const 55834574862;
         const 17179869208;
         const Sghf8_srt+280;
 },
 _cghS7() //  [R1]
         { []
         }
     {offset
       cghS7: // global
           if (R1 & 7 == 1) goto cghSa; else goto cghSb;
       cghSa: // global
           R1 = Data.Functor.Compose.$fFoldableCompose6_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghSb: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghS7_info" {
     block_cghS7_info:
         const _cghS7;
         const 0;
         const 4294967326;
         const Sghf8_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.042662918 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info;
         const 0;
 },
 sat_sgh4K_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cghTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghTn; else goto cghTo;
       cghTn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghTo: // global
           I64[Sp - 16] = block_cghTk_info;
           _sgh4H::P64 = R3;
           R3 = R4;
           R2 = R2;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgh4H::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh4K_info" {
     sat_sgh4K_info:
         const sat_sgh4K_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cghTk() //  [R1]
         { []
         }
     {offset
       cghTk: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghTk_info" {
     block_cghTk_info:
         const _cghTk;
         const 1;
         const 30;
 },
 sat_sgh4L_entry() //  [R1]
         { []
         }
     {offset
       cghTq: // global
           _sgh4L::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghTr; else goto cghTs;
       cghTs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghTu; else goto cghTt;
       cghTu: // global
           HpAlloc = 16;
           goto cghTr;
       cghTr: // global
           R1 = _sgh4L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghTt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh4L::P64;
           _sgh4C::P64 = P64[_sgh4L::P64 + 16];
           _sgh4D::P64 = P64[_sgh4L::P64 + 24];
           I64[Hp - 8] = sat_sgh4K_info;
           P64[Hp] = _sgh4D::P64;
           R2 = _sgh4C::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4L_info" {
     sat_sgh4L_info:
         const sat_sgh4L_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+280;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cghTv: // global
           _sgh4F::P64 = R6;
           _sgh4E::P64 = R5;
           _sgh4D::P64 = R4;
           _sgh4C::P64 = R3;
           _sgh4B::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cghTw; else goto cghTx;
       cghTx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghTz; else goto cghTy;
       cghTz: // global
           HpAlloc = 32;
           goto cghTw;
       cghTw: // global
           R6 = _sgh4F::P64;
           R5 = _sgh4E::P64;
           R4 = _sgh4D::P64;
           R3 = _sgh4C::P64;
           R2 = _sgh4B::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghTy: // global
           I64[Hp - 24] = sat_sgh4L_info;
           P64[Hp - 8] = _sgh4C::P64;
           P64[Hp] = _sgh4D::P64;
           R2 = _sgh4B::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Functor.Compose.$fFoldableCompose7_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh4F::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _sgh4E::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr'_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const Sghf8_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.055049872 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_info;
         const 0;
 },
 sat_sgh4R_entry() //  [R1]
         { []
         }
     {offset
       cghUa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghUb; else goto cghUc;
       cghUb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghUc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh4R_info" {
     sat_sgh4R_info:
         const sat_sgh4R_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       cghUd: // global
           _sgh4Q::P64 = R6;
           _sgh4P::P64 = R5;
           _sgh4O::P64 = R4;
           _sgh4N::P64 = R3;
           _sgh4M::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghUe; else goto cghUf;
       cghUf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghUh; else goto cghUg;
       cghUh: // global
           HpAlloc = 32;
           goto cghUe;
       cghUe: // global
           R6 = _sgh4Q::P64;
           R5 = _sgh4P::P64;
           R4 = _sgh4O::P64;
           R3 = _sgh4N::P64;
           R2 = _sgh4M::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghUg: // global
           I64[Hp - 24] = sat_sgh4R_info;
           P64[Hp - 8] = _sgh4N::P64;
           P64[Hp] = _sgh4O::P64;
           R2 = _sgh4M::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgh4Q::P64;
           P64[Sp - 8] = _sgh4P::P64;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.065428624 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info;
         const 0;
 },
 sat_sgh51_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cghUO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghUP; else goto cghUQ;
       cghUP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghUQ: // global
           I64[Sp - 16] = block_cghUM_info;
           _sgh4Y::P64 = R3;
           R3 = R2;
           R2 = R4;
           R1 = P64[R1 + 5];
           P64[Sp - 8] = _sgh4Y::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh51_info" {
     sat_sgh51_info:
         const sat_sgh51_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _cghUM() //  [R1]
         { []
         }
     {offset
       cghUM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghUM_info" {
     block_cghUM_info:
         const _cghUM;
         const 1;
         const 30;
 },
 sat_sgh52_entry() //  [R1]
         { []
         }
     {offset
       cghUS: // global
           _sgh52::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghUT; else goto cghUU;
       cghUU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghUW; else goto cghUV;
       cghUW: // global
           HpAlloc = 16;
           goto cghUT;
       cghUT: // global
           R1 = _sgh52::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghUV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh52::P64;
           _sgh4T::P64 = P64[_sgh52::P64 + 16];
           _sgh4U::P64 = P64[_sgh52::P64 + 24];
           I64[Hp - 8] = sat_sgh51_info;
           P64[Hp] = _sgh4U::P64;
           R2 = _sgh4T::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 5;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh52_info" {
     sat_sgh52_info:
         const sat_sgh52_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cghUX: // global
           _sgh4W::P64 = R6;
           _sgh4V::P64 = R5;
           _sgh4U::P64 = R4;
           _sgh4T::P64 = R3;
           _sgh4S::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cghUY; else goto cghUZ;
       cghUZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghV1; else goto cghV0;
       cghV1: // global
           HpAlloc = 32;
           goto cghUY;
       cghUY: // global
           R6 = _sgh4W::P64;
           R5 = _sgh4V::P64;
           R4 = _sgh4U::P64;
           R3 = _sgh4T::P64;
           R2 = _sgh4S::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghV0: // global
           I64[Hp - 24] = sat_sgh52_info;
           P64[Hp - 8] = _sgh4T::P64;
           P64[Hp] = _sgh4U::P64;
           R2 = _sgh4S::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh4W::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = _sgh4V::P64;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldl'_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry;
         const 0;
         const 554050781198;
         const 21474836505;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.076916185 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose4_closure" {
     Data.Functor.Compose.$fFoldableCompose4_closure:
         const Data.Functor.Compose.$fFoldableCompose4_info;
 },
 Data.Functor.Compose.$fFoldableCompose4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cghVB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghVI; else goto cghVJ;
       cghVI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghVJ: // global
           I64[Sp - 16] = block_cghVy_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ughVN; else goto cghVz;
       ughVN: // global
           call _cghVy(R1) args: 0, res: 0, upd: 0;
       cghVz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose4_info" {
     Data.Functor.Compose.$fFoldableCompose4_info:
         const Data.Functor.Compose.$fFoldableCompose4_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cghVy() //  [R1]
         { []
         }
     {offset
       cghVy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghVM; else goto cghVL;
       cghVM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cghVL: // global
           _sgh58::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sgh58::I64;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghVy_info" {
     block_cghVy_info:
         const _cghVy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.083469398 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$clength_closure" {
     Data.Functor.Compose.$fFoldableCompose_$clength_closure:
         const Data.Functor.Compose.$fFoldableCompose_$clength_info;
         const 0;
 },
 sat_sgh5d_entry() //  [R1]
         { []
         }
     {offset
       cghW8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghW9; else goto cghWa;
       cghW9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghWa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose4_closure+3;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh5d_info" {
     sat_sgh5d_info:
         const sat_sgh5d_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$clength_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cghWb: // global
           _sgh5c::P64 = R4;
           _sgh5b::P64 = R3;
           _sgh5a::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cghWc; else goto cghWd;
       cghWd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghWf; else goto cghWe;
       cghWf: // global
           HpAlloc = 24;
           goto cghWc;
       cghWc: // global
           R4 = _sgh5c::P64;
           R3 = _sgh5b::P64;
           R2 = _sgh5a::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$clength_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghWe: // global
           I64[Hp - 16] = sat_sgh5d_info;
           P64[Hp] = _sgh5b::P64;
           R2 = _sgh5a::P64;
           I64[Sp - 48] = stg_ap_ppppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgh5c::P64;
           P64[Sp - 16] = GHC.Base.id_closure+1;
           P64[Sp - 8] = Data.Functor.Compose.$fDataCompose3_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$clength_info" {
     Data.Functor.Compose.$fFoldableCompose_$clength_info:
         const Data.Functor.Compose.$fFoldableCompose_$clength_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.088951044 UTC

[section ""cstring" . lvl3_rgdPT_bytes" {
     lvl3_rgdPT_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.091430987 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose8_closure" {
     Data.Functor.Compose.$fFoldableCompose8_closure:
         const Data.Functor.Compose.$fFoldableCompose8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Compose.$fFoldableCompose8_entry() //  [R1]
         { []
         }
     {offset
       cghWJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cghWK; else goto cghWL;
       cghWK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghWL: // global
           (_cghWE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cghWE::I64 == 0) goto cghWG; else goto cghWF;
       cghWG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cghWF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cghWE::I64;
           I64[Sp - 24] = block_cghWH_info;
           R2 = lvl3_rgdPT_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose8_info" {
     Data.Functor.Compose.$fFoldableCompose8_info:
         const Data.Functor.Compose.$fFoldableCompose8_entry;
         const 0;
         const 4294967317;
         const Sghf8_srt+200;
 },
 _cghWH() //  [R1]
         { []
         }
     {offset
       cghWH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghWH_info" {
     block_cghWH_info:
         const _cghWH;
         const 0;
         const 4294967326;
         const Sghf8_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.099958031 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info;
         const 0;
 },
 sat_sgh5n_entry() //  [R1]
         { []
         }
     {offset
       cghXp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghXq; else goto cghXr;
       cghXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghXr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cghXi_info;
           _sgh5h::P64 = P64[R1 + 16];
           _sgh5j::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sgh5h::P64;
           P64[Sp - 24] = _sgh5j::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ughXy; else goto cghXj;
       ughXy: // global
           call _cghXi(R1) args: 0, res: 0, upd: 0;
       cghXj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh5n_info" {
     sat_sgh5n_info:
         const sat_sgh5n_entry;
         const 3;
         const 15;
 },
 _cghXi() //  [R1]
         { []
         }
     {offset
       cghXi: // global
           _sgh5j::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cghXm; else goto cghXn;
       cghXm: // global
           R1 = _sgh5j::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cghXn: // global
           R3 = P64[R1 + 6];
           R2 = _sgh5j::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cghXi_info" {
     block_cghXi_info:
         const _cghXi;
         const 2;
         const 30;
 },
 sat_sgh5o_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cghXA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cghXE; else goto cghXD;
       cghXE: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cghXD: // global
           _sgh5h::P64 = P64[R1 + 6];
           I64[Hp - 48] = sat_sgh5n_info;
           P64[Hp - 32] = _sgh5h::P64;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5o_info" {
     sat_sgh5o_info:
         const sat_sgh5o_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sgh5p_entry() //  [R1]
         { []
         }
     {offset
       cghXF: // global
           _sgh5p::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cghXG; else goto cghXH;
       cghXH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cghXJ; else goto cghXI;
       cghXJ: // global
           HpAlloc = 16;
           goto cghXG;
       cghXG: // global
           R1 = _sgh5p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghXI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh5p::P64;
           _sgh5g::P64 = P64[_sgh5p::P64 + 16];
           _sgh5h::P64 = P64[_sgh5p::P64 + 24];
           I64[Hp - 8] = sat_sgh5o_info;
           P64[Hp] = _sgh5h::P64;
           R2 = _sgh5g::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 6;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh5p_info" {
     sat_sgh5p_info:
         const sat_sgh5p_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cghXQ: // global
           _sgh5i::P64 = R5;
           _sgh5h::P64 = R4;
           _sgh5g::P64 = R3;
           _sgh5f::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cghXR; else goto cghXS;
       cghXS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cghXU; else goto cghXT;
       cghXU: // global
           HpAlloc = 32;
           goto cghXR;
       cghXR: // global
           R5 = _sgh5i::P64;
           R4 = _sgh5h::P64;
           R3 = _sgh5g::P64;
           R2 = _sgh5f::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghXT: // global
           I64[Hp - 24] = sat_sgh5p_info;
           P64[Hp - 8] = _sgh5g::P64;
           P64[Hp] = _sgh5h::P64;
           I64[Sp - 8] = block_cghXK_info;
           R2 = _sgh5f::P64;
           I64[Sp - 48] = stg_ap_pppp_info;
           P64[Sp - 40] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sgh5i::P64;
           P64[Sp - 16] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 48;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info" {
     Data.Functor.Compose.$fFoldableCompose_$cfoldr1_info:
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry;
         const 0;
         const 6601364733966;
         const 17179869208;
         const Sghf8_srt+272;
 },
 _cghXK() //  [R1]
         { []
         }
     {offset
       cghXK: // global
           if (R1 & 7 == 1) goto cghXN; else goto cghXO;
       cghXN: // global
           R1 = Data.Functor.Compose.$fFoldableCompose8_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cghXO: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cghXK_info" {
     block_cghXK_info:
         const _cghXK;
         const 0;
         const 4294967326;
         const Sghf8_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.112856537 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose5_closure" {
     Data.Functor.Compose.$fFoldableCompose5_closure:
         const Data.Functor.Compose.$fFoldableCompose5_info;
 },
 Data.Functor.Compose.$fFoldableCompose5_entry() //  []
         { []
         }
     {offset
       cghYO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose5_info" {
     Data.Functor.Compose.$fFoldableCompose5_info:
         const Data.Functor.Compose.$fFoldableCompose5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.116980885 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cnull_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cnull_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cnull_info;
         const 0;
 },
 sat_sgh5x_entry() //  [R1]
         { []
         }
     {offset
       cghZ5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghZ6; else goto cghZ7;
       cghZ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghZ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose5_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh5x_info" {
     sat_sgh5x_info:
         const sat_sgh5x_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$cnull_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cghZ8: // global
           _sgh5w::P64 = R4;
           _sgh5v::P64 = R3;
           _sgh5u::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cghZ9; else goto cghZa;
       cghZa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cghZc; else goto cghZb;
       cghZc: // global
           HpAlloc = 24;
           goto cghZ9;
       cghZ9: // global
           R4 = _sgh5w::P64;
           R3 = _sgh5v::P64;
           R2 = _sgh5u::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cnull_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghZb: // global
           I64[Hp - 16] = sat_sgh5x_info;
           P64[Hp] = _sgh5v::P64;
           R2 = _sgh5u::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgh5w::P64;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cnull_info" {
     Data.Functor.Compose.$fFoldableCompose_$cnull_info:
         const Data.Functor.Compose.$fFoldableCompose_$cnull_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.124363076 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$cproduct_closure" {
     Data.Functor.Compose.$fFoldableCompose_$cproduct_closure:
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_info;
         const 0;
 },
 $dMonoid_sgh5B_entry() //  [R1]
         { []
         }
     {offset
       cghZE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cghZF; else goto cghZG;
       cghZF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghZG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Semigroup.Internal.$fMonoidProduct_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dMonoid_sgh5B_info" {
     $dMonoid_sgh5B_info:
         const $dMonoid_sgh5B_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+368;
 },
 lvl8_sgh5C_entry() //  [R1]
         { []
         }
     {offset
       cghZL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cghZM; else goto cghZN;
       cghZM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cghZN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Data.Functor.Compose.$fFoldableCompose1_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh5C_info" {
     lvl8_sgh5C_info:
         const lvl8_sgh5C_entry;
         const 2;
         const 18;
 },
 sat_sgh5E_entry() //  [R1, R2]
         { []
         }
     {offset
       cghZT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cghZU; else goto cghZV;
       cghZU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cghZV: // global
           _sgh5D::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _sgh5D::P64;
           Sp = Sp - 32;
           call Data.Foldable.foldMap_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5E_info" {
     sat_sgh5E_info:
         const sat_sgh5E_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Compose.$fFoldableCompose_$cproduct_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cghZW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgi00; else goto cghZZ;
       cgi00: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_$cproduct_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cghZZ: // global
           I64[Hp - 80] = $dMonoid_sgh5B_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl8_sgh5C_info;
           P64[Hp - 40] = R3;
           _cghZA::P64 = Hp - 80;
           P64[Hp - 32] = _cghZA::P64;
           I64[Hp - 24] = sat_sgh5E_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = _cghZA::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$cproduct_info" {
     Data.Functor.Compose.$fFoldableCompose_$cproduct_info:
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sghf8_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.134549658 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_$ctoList_closure" {
     Data.Functor.Compose.$fFoldableCompose_$ctoList_closure:
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_info;
         const 0;
 },
 sat_sgh5I_entry() //  [R1]
         { []
         }
     {offset
       cgi0C: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgi0D; else goto cgi0E;
       cgi0D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi0E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh5I_info" {
     sat_sgh5I_info:
         const sat_sgh5I_entry;
         const 1;
         const 4294967312;
         const Sghf8_srt+272;
 },
 Data.Functor.Compose.$fFoldableCompose_$ctoList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cgi0F: // global
           _sgh5H::P64 = R4;
           _sgh5G::P64 = R3;
           _sgh5F::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cgi0G; else goto cgi0H;
       cgi0H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgi0J; else goto cgi0I;
       cgi0J: // global
           HpAlloc = 24;
           goto cgi0G;
       cgi0G: // global
           R4 = _sgh5H::P64;
           R3 = _sgh5G::P64;
           R2 = _sgh5F::P64;
           R1 = Data.Functor.Compose.$fFoldableCompose_$ctoList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi0I: // global
           I64[Hp - 16] = sat_sgh5I_info;
           P64[Hp] = _sgh5G::P64;
           R2 = _sgh5F::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Data.Semigroup.Internal.$fMonoidEndo_closure;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgh5H::P64;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Foldable.foldMap_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_$ctoList_info" {
     Data.Functor.Compose.$fFoldableCompose_$ctoList_info:
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_entry;
         const 0;
         const 70373039144974;
         const 12884901911;
         const Sghf8_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.147046956 UTC

[section ""data" . Data.Functor.Compose.$fFoldableCompose_closure" {
     Data.Functor.Compose.$fFoldableCompose_closure:
         const Data.Functor.Compose.$fFoldableCompose_info;
         const 0;
 },
 sat_sgh60_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1d: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cproduct_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh60_info" {
     sat_sgh60_info:
         const sat_sgh60_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+376;
 },
 sat_sgh5Z_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1l: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$csum_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5Z_info" {
     sat_sgh5Z_info:
         const sat_sgh5Z_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+192;
 },
 sat_sgh5Y_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1t: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cminimum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5Y_info" {
     sat_sgh5Y_info:
         const sat_sgh5Y_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+224;
 },
 sat_sgh5X_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1B: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cmaximum_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5X_info" {
     sat_sgh5X_info:
         const sat_sgh5X_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+248;
 },
 sat_sgh5W_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi1J: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$celem_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5W_info" {
     sat_sgh5W_info:
         const sat_sgh5W_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+264;
 },
 sat_sgh5V_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1R: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$clength_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5V_info" {
     sat_sgh5V_info:
         const sat_sgh5V_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+336;
 },
 sat_sgh5U_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi1Z: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$cnull_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5U_info" {
     sat_sgh5U_info:
         const sat_sgh5U_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+360;
 },
 sat_sgh5T_entry() //  [R1, R2]
         { []
         }
     {offset
       cgi27: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fFoldableCompose_$ctoList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5T_info" {
     sat_sgh5T_info:
         const sat_sgh5T_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const Sghf8_srt+384;
 },
 sat_sgh5S_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi2f: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5S_info" {
     sat_sgh5S_info:
         const sat_sgh5S_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+296;
 },
 sat_sgh5R_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi2n: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr1_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5R_info" {
     sat_sgh5R_info:
         const sat_sgh5R_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const Sghf8_srt+344;
 },
 sat_sgh5Q_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi2v: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5Q_info" {
     sat_sgh5Q_info:
         const sat_sgh5Q_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sghf8_srt+328;
 },
 sat_sgh5P_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi2D: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldl_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5P_info" {
     sat_sgh5P_info:
         const sat_sgh5P_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sghf8_srt+288;
 },
 sat_sgh5O_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi2L: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr'_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5O_info" {
     sat_sgh5O_info:
         const sat_sgh5O_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sghf8_srt+312;
 },
 sat_sgh5N_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi2T: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldr_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5N_info" {
     sat_sgh5N_info:
         const sat_sgh5N_entry;
         const 2;
         const 4294967307;
         const 12884901911;
         const Sghf8_srt+320;
 },
 sat_sgh5M_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi31: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fFoldableCompose_$cfoldMap_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5M_info" {
     sat_sgh5M_info:
         const sat_sgh5M_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgh5L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi39: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fFoldableCompose_$cfold_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh5L_info" {
     sat_sgh5L_info:
         const sat_sgh5L_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.Functor.Compose.$fFoldableCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgi3d: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cgi3h; else goto cgi3g;
       cgi3h: // global
           HpAlloc = 520;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fFoldableCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi3g: // global
           I64[Hp - 512] = sat_sgh60_info;
           P64[Hp - 504] = R2;
           P64[Hp - 496] = R3;
           I64[Hp - 488] = sat_sgh5Z_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           I64[Hp - 464] = sat_sgh5Y_info;
           P64[Hp - 456] = R2;
           P64[Hp - 448] = R3;
           I64[Hp - 440] = sat_sgh5X_info;
           P64[Hp - 432] = R2;
           P64[Hp - 424] = R3;
           I64[Hp - 416] = sat_sgh5W_info;
           P64[Hp - 408] = R2;
           P64[Hp - 400] = R3;
           I64[Hp - 392] = sat_sgh5V_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           I64[Hp - 368] = sat_sgh5U_info;
           P64[Hp - 360] = R2;
           P64[Hp - 352] = R3;
           I64[Hp - 344] = sat_sgh5T_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           I64[Hp - 320] = sat_sgh5S_info;
           P64[Hp - 312] = R2;
           P64[Hp - 304] = R3;
           I64[Hp - 296] = sat_sgh5R_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           I64[Hp - 272] = sat_sgh5Q_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           I64[Hp - 248] = sat_sgh5P_info;
           P64[Hp - 240] = R2;
           P64[Hp - 232] = R3;
           I64[Hp - 224] = sat_sgh5O_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           I64[Hp - 200] = sat_sgh5N_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgh5M_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgh5L_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = Data.Foldable.C:Foldable_con_info;
           P64[Hp - 120] = Hp - 150;
           P64[Hp - 112] = Hp - 173;
           P64[Hp - 104] = Hp - 197;
           P64[Hp - 96] = Hp - 221;
           P64[Hp - 88] = Hp - 245;
           P64[Hp - 80] = Hp - 269;
           P64[Hp - 72] = Hp - 294;
           P64[Hp - 64] = Hp - 318;
           P64[Hp - 56] = Hp - 343;
           P64[Hp - 48] = Hp - 367;
           P64[Hp - 40] = Hp - 391;
           P64[Hp - 32] = Hp - 414;
           P64[Hp - 24] = Hp - 439;
           P64[Hp - 16] = Hp - 463;
           P64[Hp - 8] = Hp - 487;
           P64[Hp] = Hp - 511;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fFoldableCompose_info" {
     Data.Functor.Compose.$fFoldableCompose_info:
         const Data.Functor.Compose.$fFoldableCompose_entry;
         const 0;
         const 265627238878150670;
         const 8589934607;
         const Sghf8_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.174862981 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose1_closure" {
     Data.Functor.Compose.$fTraversableCompose1_closure:
         const Data.Functor.Compose.$fTraversableCompose1_info;
 },
 Data.Functor.Compose.$fTraversableCompose1_entry() //  [R2]
         { []
         }
     {offset
       cgi4K: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose1_info" {
     Data.Functor.Compose.$fTraversableCompose1_info:
         const Data.Functor.Compose.$fTraversableCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.180464865 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure" {
     Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure:
         const Data.Functor.Compose.$fTraversableCompose_$ctraverse_info;
 },
 sat_sgh68_entry() //  [R1]
         { []
         }
     {offset
       cgi53: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgi54; else goto cgi55;
       cgi54: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi55: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Data.Traversable.traverse_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh68_info" {
     sat_sgh68_info:
         const sat_sgh68_entry;
         const 3;
         const 15;
 },
 sat_sgh69_entry() //  [R1]
         { []
         }
     {offset
       cgi56: // global
           _sgh69::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cgi57; else goto cgi58;
       cgi58: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgi5a; else goto cgi59;
       cgi5a: // global
           HpAlloc = 40;
           goto cgi57;
       cgi57: // global
           R1 = _sgh69::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi59: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh69::P64;
           _sgh62::P64 = P64[_sgh69::P64 + 16];
           _sgh63::P64 = P64[_sgh69::P64 + 24];
           _sgh64::P64 = P64[_sgh69::P64 + 32];
           _sgh65::P64 = P64[_sgh69::P64 + 40];
           _sgh66::P64 = P64[_sgh69::P64 + 48];
           I64[Hp - 32] = sat_sgh68_info;
           P64[Hp - 16] = _sgh63::P64;
           P64[Hp - 8] = _sgh64::P64;
           P64[Hp] = _sgh65::P64;
           R2 = _sgh62::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = _sgh64::P64;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _sgh66::P64;
           Sp = Sp - 48;
           call Data.Traversable.traverse_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh69_info" {
     sat_sgh69_info:
         const sat_sgh69_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry() //  [R2,
                                                                   R3, R4, R5, R6]
         { []
         }
     {offset
       cgi5d: // global
           _sgh66::P64 = R6;
           _sgh65::P64 = R5;
           _sgh64::P64 = R4;
           _sgh63::P64 = R3;
           _sgh62::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgi5e; else goto cgi5f;
       cgi5f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgi5h; else goto cgi5g;
       cgi5h: // global
           HpAlloc = 56;
           goto cgi5e;
       cgi5e: // global
           R6 = _sgh66::P64;
           R5 = _sgh65::P64;
           R4 = _sgh64::P64;
           R3 = _sgh63::P64;
           R2 = _sgh62::P64;
           R1 = Data.Functor.Compose.$fTraversableCompose_$ctraverse_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi5g: // global
           I64[Hp - 48] = sat_sgh69_info;
           P64[Hp - 32] = _sgh62::P64;
           P64[Hp - 24] = _sgh63::P64;
           P64[Hp - 16] = _sgh64::P64;
           P64[Hp - 8] = _sgh65::P64;
           P64[Hp] = _sgh66::P64;
           I64[Sp - 16] = block_cgi5b_info;
           R2 = _sgh64::P64;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$ctraverse_info" {
     Data.Functor.Compose.$fTraversableCompose_$ctraverse_info:
         const Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgi5b() //  [R1]
         { []
         }
     {offset
       cgi5b: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Compose.$fTraversableCompose1_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgi5b_info" {
     block_cgi5b_info:
         const _cgi5b;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.19110752 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info;
         const 0;
 },
 sat_sgh6d_entry() //  [R1]
         { []
         }
     {offset
       cgi5W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi5X; else goto cgi5Y;
       cgi5X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi5Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6d_info" {
     sat_sgh6d_info:
         const sat_sgh6d_entry;
         const 1;
         const 16;
 },
 sat_sgh6c_entry() //  [R1]
         { []
         }
     {offset
       cgi63: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi64; else goto cgi65;
       cgi64: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi65: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p2Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6c_info" {
     sat_sgh6c_info:
         const sat_sgh6c_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgi66: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgi6a; else goto cgi69;
       cgi6a: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi69: // global
           I64[Hp - 40] = sat_sgh6d_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgh6c_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFoldableCompose_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info" {
     Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_info:
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sghf8_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.199089826 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info;
 },
 sat_sgh6h_entry() //  [R1]
         { []
         }
     {offset
       cgi6z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi6A; else goto cgi6B;
       cgi6A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi6B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6h_info" {
     sat_sgh6h_info:
         const sat_sgh6h_entry;
         const 1;
         const 16;
 },
 sat_sgh6g_entry() //  [R1]
         { []
         }
     {offset
       cgi6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi6H; else goto cgi6I;
       cgi6H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi6I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Traversable.$p1Traversable_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6g_info" {
     sat_sgh6g_info:
         const sat_sgh6g_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgi6J: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgi6N; else goto cgi6M;
       cgi6N: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi6M: // global
           I64[Hp - 40] = sat_sgh6h_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgh6g_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFunctorCompose_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info" {
     Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_info:
         const Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.205994532 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$csequenceA_closure" {
     Data.Functor.Compose.$fTraversableCompose_$csequenceA_closure:
         const Data.Functor.Compose.$fTraversableCompose_$csequenceA_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cgi78: // global
           R6 = R5;
           R5 = GHC.Base.id_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$csequenceA_info" {
     Data.Functor.Compose.$fTraversableCompose_$csequenceA_info:
         const Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.21006968 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$cmapM_closure" {
     Data.Functor.Compose.$fTraversableCompose_$cmapM_closure:
         const Data.Functor.Compose.$fTraversableCompose_$cmapM_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$cmapM_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cgi7m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgi7n; else goto cgi7o;
       cgi7n: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$cmapM_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi7o: // global
           I64[Sp - 40] = block_cgi7k_info;
           _sgh6l::P64 = R2;
           R2 = R4;
           P64[Sp - 32] = _sgh6l::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$cmapM_info" {
     Data.Functor.Compose.$fTraversableCompose_$cmapM_info:
         const Data.Functor.Compose.$fTraversableCompose_$cmapM_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cgi7k() //  [R1]
         { []
         }
     {offset
       cgi7k: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgi7k_info" {
     block_cgi7k_info:
         const _cgi7k;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.216464158 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_$csequence_closure" {
     Data.Functor.Compose.$fTraversableCompose_$csequence_closure:
         const Data.Functor.Compose.$fTraversableCompose_$csequence_info;
 },
 Data.Functor.Compose.$fTraversableCompose_$csequence_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cgi7H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgi7I; else goto cgi7J;
       cgi7I: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_$csequence_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi7J: // global
           I64[Sp - 32] = block_cgi7F_info;
           _sgh6r::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _sgh6r::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_$csequence_info" {
     Data.Functor.Compose.$fTraversableCompose_$csequence_info:
         const Data.Functor.Compose.$fTraversableCompose_$csequence_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgi7F() //  [R1]
         { []
         }
     {offset
       cgi7F: // global
           R6 = P64[Sp + 24];
           R5 = GHC.Base.id_closure+1;
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgi7F_info" {
     block_cgi7F_info:
         const _cgi7F;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.224537206 UTC

[section ""data" . Data.Functor.Compose.$fTraversableCompose_closure" {
     Data.Functor.Compose.$fTraversableCompose_closure:
         const Data.Functor.Compose.$fTraversableCompose_info;
         const 0;
 },
 sat_sgh6D_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi86: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fTraversableCompose_$csequence_entry(R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh6D_info" {
     sat_sgh6D_info:
         const sat_sgh6D_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh6C_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi8e: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fTraversableCompose_$cmapM_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh6C_info" {
     sat_sgh6C_info:
         const sat_sgh6C_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgh6B_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgi8m: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fTraversableCompose_$csequenceA_entry(R5,
                                                                            R4,
                                                                            R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh6B_info" {
     sat_sgh6B_info:
         const sat_sgh6B_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh6A_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgi8u: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fTraversableCompose_$ctraverse_entry(R6,
                                                                           R5,
                                                                           R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh6A_info" {
     sat_sgh6A_info:
         const sat_sgh6A_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgh6z_entry() //  [R1]
         { []
         }
     {offset
       cgi8B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi8C; else goto cgi8D;
       cgi8C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi8D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6z_info" {
     sat_sgh6z_info:
         const sat_sgh6z_entry;
         const 2;
         const 4294967314;
         const Sghf8_srt+400;
 },
 sat_sgh6y_entry() //  [R1]
         { []
         }
     {offset
       cgi8I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgi8J; else goto cgi8K;
       cgi8J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi8K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fTraversableCompose_$cp1Traversable_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6y_info" {
     sat_sgh6y_info:
         const sat_sgh6y_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fTraversableCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgi8M: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cgi8Q; else goto cgi8P;
       cgi8Q: // global
           HpAlloc = 216;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fTraversableCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi8P: // global
           I64[Hp - 208] = sat_sgh6D_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_sgh6C_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_sgh6B_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sgh6A_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sgh6z_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgh6y_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = Data.Traversable.C:Traversable_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 112;
           P64[Hp - 24] = Hp - 133;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 181;
           P64[Hp] = Hp - 206;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fTraversableCompose_info" {
     Data.Functor.Compose.$fTraversableCompose_info:
         const Data.Functor.Compose.$fTraversableCompose_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sghf8_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.238826799 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose4_closure" {
     Data.Functor.Compose.$fApplicativeCompose4_closure:
         const Data.Functor.Compose.$fApplicativeCompose4_info;
 },
 sat_sgh6J_entry() //  [R1]
         { []
         }
     {offset
       cgi9D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgi9E; else goto cgi9F;
       cgi9E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgi9F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6J_info" {
     sat_sgh6J_info:
         const sat_sgh6J_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose4_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       cgi9G: // global
           _sgh6I::P64 = R6;
           _sgh6H::P64 = R5;
           _sgh6G::P64 = R4;
           _sgh6F::P64 = R3;
           _sgh6E::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgi9H; else goto cgi9I;
       cgi9I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgi9K; else goto cgi9J;
       cgi9K: // global
           HpAlloc = 32;
           goto cgi9H;
       cgi9H: // global
           R6 = _sgh6I::P64;
           R5 = _sgh6H::P64;
           R4 = _sgh6G::P64;
           R3 = _sgh6F::P64;
           R2 = _sgh6E::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose4_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgi9J: // global
           I64[Hp - 24] = sat_sgh6J_info;
           P64[Hp - 8] = _sgh6F::P64;
           P64[Hp] = _sgh6G::P64;
           R2 = _sgh6E::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = _sgh6H::P64;
           P64[Sp - 8] = _sgh6I::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose4_info" {
     Data.Functor.Compose.$fApplicativeCompose4_info:
         const Data.Functor.Compose.$fApplicativeCompose4_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.245310333 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose5_closure" {
     Data.Functor.Compose.$fApplicativeCompose5_closure:
         const Data.Functor.Compose.$fApplicativeCompose5_info;
 },
 sat_sgh6O_entry() //  [R1]
         { []
         }
     {offset
       cgia8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgia9; else goto cgiaa;
       cgia9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiaa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6O_info" {
     sat_sgh6O_info:
         const sat_sgh6O_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose5_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cgiab: // global
           _sgh6N::P64 = R5;
           _sgh6M::P64 = R4;
           _sgh6L::P64 = R3;
           _sgh6K::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgiac; else goto cgiad;
       cgiad: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgiaf; else goto cgiae;
       cgiaf: // global
           HpAlloc = 24;
           goto cgiac;
       cgiac: // global
           R5 = _sgh6N::P64;
           R4 = _sgh6M::P64;
           R3 = _sgh6L::P64;
           R2 = _sgh6K::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose5_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiae: // global
           I64[Hp - 16] = sat_sgh6O_info;
           P64[Hp] = _sgh6L::P64;
           R2 = _sgh6K::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgh6M::P64;
           P64[Sp - 8] = _sgh6N::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose5_info" {
     Data.Functor.Compose.$fApplicativeCompose5_info:
         const Data.Functor.Compose.$fApplicativeCompose5_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.251572863 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose6_closure" {
     Data.Functor.Compose.$fApplicativeCompose6_closure:
         const Data.Functor.Compose.$fApplicativeCompose6_info;
 },
 sat_sgh6S_entry() //  [R1]
         { []
         }
     {offset
       cgiaB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgiaC; else goto cgiaD;
       cgiaC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiaD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6S_info" {
     sat_sgh6S_info:
         const sat_sgh6S_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cgiaE: // global
           _sgh6R::P64 = R4;
           _sgh6Q::P64 = R3;
           _sgh6P::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cgiaF; else goto cgiaG;
       cgiaG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgiaI; else goto cgiaH;
       cgiaI: // global
           HpAlloc = 32;
           goto cgiaF;
       cgiaF: // global
           R4 = _sgh6R::P64;
           R3 = _sgh6Q::P64;
           R2 = _sgh6P::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiaH: // global
           I64[Hp - 24] = sat_sgh6S_info;
           P64[Hp - 8] = _sgh6Q::P64;
           P64[Hp] = _sgh6R::P64;
           R2 = _sgh6P::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose6_info" {
     Data.Functor.Compose.$fApplicativeCompose6_info:
         const Data.Functor.Compose.$fApplicativeCompose6_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.259694934 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure" {
     Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure:
         const Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info;
 },
 sat_sgh6W_entry() //  [R1]
         { []
         }
     {offset
       cgib6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgib7; else goto cgib8;
       cgib7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgib8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6W_info" {
     sat_sgh6W_info:
         const sat_sgh6W_entry;
         const 1;
         const 16;
 },
 sat_sgh6V_entry() //  [R1]
         { []
         }
     {offset
       cgibd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgibe; else goto cgibf;
       cgibe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgibf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Applicative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh6V_info" {
     sat_sgh6V_info:
         const sat_sgh6V_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgibg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgibk; else goto cgibj;
       cgibk: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgibj: // global
           I64[Hp - 40] = sat_sgh6W_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sgh6V_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fFunctorCompose_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info" {
     Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_info:
         const Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.266733079 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose3_closure" {
     Data.Functor.Compose.$fApplicativeCompose3_closure:
         const Data.Functor.Compose.$fApplicativeCompose3_info;
 },
 Data.Functor.Compose.$fApplicativeCompose3_entry() //  [R3]
         { []
         }
     {offset
       cgibF: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose3_info" {
     Data.Functor.Compose.$fApplicativeCompose3_info:
         const Data.Functor.Compose.$fApplicativeCompose3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.272213697 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose2_closure" {
     Data.Functor.Compose.$fApplicativeCompose2_closure:
         const Data.Functor.Compose.$fApplicativeCompose2_info;
 },
 sat_sgh76_entry() //  [R1]
         { []
         }
     {offset
       cgic0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgic1; else goto cgic2;
       cgic1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgic2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cgibY_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh76_info" {
     sat_sgh76_info:
         const sat_sgh76_entry;
         const 1;
         const 16;
 },
 _cgibY() //  [R1]
         { []
         }
     {offset
       cgibY: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Data.Functor.Compose.$fApplicativeCompose3_closure+2;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgibY_info" {
     block_cgibY_info:
         const _cgibY;
         const 0;
         const 30;
 },
 sat_sgh77_entry() //  [R1]
         { []
         }
     {offset
       cgic8: // global
           _sgh77::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgic9; else goto cgica;
       cgica: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgicc; else goto cgicb;
       cgicc: // global
           HpAlloc = 24;
           goto cgic9;
       cgic9: // global
           R1 = _sgh77::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgicb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh77::P64;
           _sgh6Z::P64 = P64[_sgh77::P64 + 16];
           _sgh70::P64 = P64[_sgh77::P64 + 24];
           _sgh71::P64 = P64[_sgh77::P64 + 32];
           I64[Hp - 16] = sat_sgh76_info;
           P64[Hp] = _sgh70::P64;
           I64[Sp - 40] = block_cgic6_info;
           R2 = _sgh6Z::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sgh71::P64;
           Sp = Sp - 40;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh77_info" {
     sat_sgh77_info:
         const sat_sgh77_entry;
         const 3;
         const 15;
 },
 _cgic6() //  [R1]
         { []
         }
     {offset
       cgic6: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgic6_info" {
     block_cgic6_info:
         const _cgic6;
         const 2;
         const 30;
 },
 sat_sgh73_entry() //  [R1]
         { []
         }
     {offset
       cgick: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgicl; else goto cgicm;
       cgicl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgicm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<*>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh73_info" {
     sat_sgh73_info:
         const sat_sgh73_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose2_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cgicn: // global
           _sgh72::P64 = R5;
           _sgh71::P64 = R4;
           _sgh70::P64 = R3;
           _sgh6Z::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgico; else goto cgicp;
       cgicp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgicr; else goto cgicq;
       cgicr: // global
           HpAlloc = 64;
           goto cgico;
       cgico: // global
           R5 = _sgh72::P64;
           R4 = _sgh71::P64;
           R3 = _sgh70::P64;
           R2 = _sgh6Z::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgicq: // global
           I64[Hp - 56] = sat_sgh77_info;
           P64[Hp - 40] = _sgh6Z::P64;
           P64[Hp - 32] = _sgh70::P64;
           P64[Hp - 24] = _sgh71::P64;
           I64[Hp - 16] = sat_sgh73_info;
           P64[Hp] = _sgh70::P64;
           R2 = _sgh6Z::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = _sgh72::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose2_info" {
     Data.Functor.Compose.$fApplicativeCompose2_info:
         const Data.Functor.Compose.$fApplicativeCompose2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.285403452 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose1_closure" {
     Data.Functor.Compose.$fApplicativeCompose1_closure:
         const Data.Functor.Compose.$fApplicativeCompose1_info;
 },
 sat_sgh7c_entry() //  [R1]
         { []
         }
     {offset
       cgidc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgidd; else goto cgide;
       cgidd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgide: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.const_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7c_info" {
     sat_sgh7c_info:
         const sat_sgh7c_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fApplicativeCompose1_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cgidf: // global
           _sgh7b::P64 = R5;
           _sgh7a::P64 = R4;
           _sgh79::P64 = R3;
           _sgh78::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cgidg; else goto cgidh;
       cgidh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgidj; else goto cgidi;
       cgidj: // global
           HpAlloc = 24;
           goto cgidg;
       cgidg: // global
           R5 = _sgh7b::P64;
           R4 = _sgh7a::P64;
           R3 = _sgh79::P64;
           R2 = _sgh78::P64;
           R1 = Data.Functor.Compose.$fApplicativeCompose1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgidi: // global
           I64[Hp - 16] = sat_sgh7c_info;
           P64[Hp] = _sgh79::P64;
           R2 = _sgh78::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _sgh7a::P64;
           P64[Sp - 8] = _sgh7b::P64;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose1_info" {
     Data.Functor.Compose.$fApplicativeCompose1_info:
         const Data.Functor.Compose.$fApplicativeCompose1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.293736609 UTC

[section ""data" . Data.Functor.Compose.$fApplicativeCompose_closure" {
     Data.Functor.Compose.$fApplicativeCompose_closure:
         const Data.Functor.Compose.$fApplicativeCompose_info;
 },
 sat_sgh7k_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgidJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose1_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7k_info" {
     sat_sgh7k_info:
         const sat_sgh7k_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh7j_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgidR: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose2_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7j_info" {
     sat_sgh7j_info:
         const sat_sgh7j_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh7i_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgidZ: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 13];
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$fApplicativeCompose4_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7i_info" {
     sat_sgh7i_info:
         const sat_sgh7i_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 sat_sgh7h_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgie7: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Compose.$fApplicativeCompose5_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7h_info" {
     sat_sgh7h_info:
         const sat_sgh7h_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sgh7g_entry() //  [R1, R2]
         { []
         }
     {offset
       cgief: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fApplicativeCompose6_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7g_info" {
     sat_sgh7g_info:
         const sat_sgh7g_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh7f_entry() //  [R1]
         { []
         }
     {offset
       cgiem: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgien; else goto cgieo;
       cgien: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgieo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fApplicativeCompose_$cp1Applicative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7f_info" {
     sat_sgh7f_info:
         const sat_sgh7f_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fApplicativeCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgieq: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cgieu; else goto cgiet;
       cgieu: // global
           HpAlloc = 208;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fApplicativeCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiet: // global
           I64[Hp - 200] = sat_sgh7k_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           I64[Hp - 176] = sat_sgh7j_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           I64[Hp - 152] = sat_sgh7i_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           I64[Hp - 128] = sat_sgh7h_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           I64[Hp - 104] = sat_sgh7g_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           I64[Hp - 80] = sat_sgh7f_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 80;
           P64[Hp - 32] = Hp - 103;
           P64[Hp - 24] = Hp - 126;
           P64[Hp - 16] = Hp - 149;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 198;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fApplicativeCompose_info" {
     Data.Functor.Compose.$fApplicativeCompose_info:
         const Data.Functor.Compose.$fApplicativeCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.308358013 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info;
 },
 sat_sgh7n_entry() //  [R1]
         { []
         }
     {offset
       cgiff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgifg; else goto cgifh;
       cgifg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgifh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7n_info" {
     sat_sgh7n_info:
         const sat_sgh7n_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry() //  [R2,
                                                                        R3]
         { []
         }
     {offset
       cgifi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgifm; else goto cgifl;
       cgifm: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgifl: // global
           I64[Hp - 16] = sat_sgh7n_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Compose.$fApplicativeCompose_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info" {
     Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_info:
         const Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.319134833 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$csome_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$csome_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$csome_info;
 },
 sat_sgh7u_entry() //  [R1]
         { []
         }
     {offset
       cgifV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgifW; else goto cgifX;
       cgifW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgifX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7u_info" {
     sat_sgh7u_info:
         const sat_sgh7u_entry;
         const 1;
         const 16;
 },
 sat_sgh7v_entry() //  [R1]
         { []
         }
     {offset
       cgifY: // global
           _sgh7v::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgifZ; else goto cgig0;
       cgig0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgig2; else goto cgig1;
       cgig2: // global
           HpAlloc = 24;
           goto cgifZ;
       cgifZ: // global
           R1 = _sgh7v::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgig1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh7v::P64;
           _sgh7p::P64 = P64[_sgh7v::P64 + 16];
           _sgh7s::P64 = P64[_sgh7v::P64 + 24];
           I64[Hp - 16] = sat_sgh7u_info;
           P64[Hp] = _sgh7p::P64;
           R2 = _sgh7s::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7v_info" {
     sat_sgh7v_info:
         const sat_sgh7v_entry;
         const 2;
         const 18;
 },
 sat_sgh7w_entry() //  [R1]
         { []
         }
     {offset
       cgig3: // global
           _sgh7w::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgig4; else goto cgig5;
       cgig5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgig7; else goto cgig6;
       cgig7: // global
           HpAlloc = 32;
           goto cgig4;
       cgig4: // global
           R1 = _sgh7w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgig6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh7w::P64;
           _sgh7o::P64 = P64[_sgh7w::P64 + 16];
           _sgh7p::P64 = P64[_sgh7w::P64 + 24];
           _sgh7r::P64 = P64[_sgh7w::P64 + 32];
           _sgh7s::P64 = P64[_sgh7w::P64 + 40];
           I64[Hp - 24] = sat_sgh7v_info;
           P64[Hp - 8] = _sgh7p::P64;
           P64[Hp] = _sgh7s::P64;
           R2 = _sgh7o::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgh7r::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7w_info" {
     sat_sgh7w_info:
         const sat_sgh7w_entry;
         const 4;
         const 15;
 },
 sat_sgh7t_entry() //  [R1]
         { []
         }
     {offset
       cgigc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgigd; else goto cgige;
       cgigd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgige: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7t_info" {
     sat_sgh7t_info:
         const sat_sgh7t_entry;
         const 1;
         const 16;
 },
 some_v_sgh7r_entry() //  [R1]
         { []
         }
     {offset
       cgigf: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cgigg; else goto cgigh;
       cgigg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgigh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cgifF_info;
           _sgh7o::P64 = P64[R1 + 16];
           R2 = _sgh7o::P64;
           P64[Sp - 48] = _sgh7o::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = R1;
           Sp = Sp - 56;
           call GHC.Base.$p1Alternative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sgh7r_info" {
     some_v_sgh7r_info:
         const some_v_sgh7r_entry;
         const 3;
         const 15;
 },
 _cgifF() //  [R1]
         { []
         }
     {offset
       cgifF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cgigk; else goto cgigj;
       cgigk: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cgigj: // global
           I64[Hp - 64] = sat_sgh7w_info;
           P64[Hp - 48] = P64[Sp + 8];
           _sgh7p::P64 = P64[Sp + 16];
           P64[Hp - 40] = _sgh7p::P64;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_sgh7t_info;
           P64[Hp] = _sgh7p::P64;
           R2 = R1;
           I64[Sp + 8] = stg_ap_ppp_info;
           P64[Sp + 16] = Hp - 16;
           P64[Sp + 32] = Hp - 64;
           Sp = Sp + 8;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cgifF_info" {
     block_cgifF_info:
         const _cgifF;
         const 4;
         const 30;
 },
 Data.Functor.Compose.$fAlternativeCompose_$csome_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgigl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgigp; else goto cgigo;
       cgigp: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgigo: // global
           I64[Hp - 32] = some_v_sgh7r_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$csome_info" {
     Data.Functor.Compose.$fAlternativeCompose_$csome_info:
         const Data.Functor.Compose.$fAlternativeCompose_$csome_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.337405245 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_$cmany_closure" {
     Data.Functor.Compose.$fAlternativeCompose_$cmany_closure:
         const Data.Functor.Compose.$fAlternativeCompose_$cmany_info;
 },
 $dApplicative1_sgh7B_entry() //  [R1]
         { []
         }
     {offset
       cgihv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgihw; else goto cgihx;
       cgihw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgihx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative1_sgh7B_info" {
     $dApplicative1_sgh7B_info:
         const $dApplicative1_sgh7B_entry;
         const 1;
         const 16;
 },
 sat_sgh7E_entry() //  [R1]
         { []
         }
     {offset
       cgihG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgihH; else goto cgihI;
       cgihH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgihI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7E_info" {
     sat_sgh7E_info:
         const sat_sgh7E_entry;
         const 1;
         const 16;
 },
 sat_sgh7F_entry() //  [R1]
         { []
         }
     {offset
       cgihJ: // global
           _sgh7F::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgihK; else goto cgihL;
       cgihL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgihN; else goto cgihM;
       cgihN: // global
           HpAlloc = 24;
           goto cgihK;
       cgihK: // global
           R1 = _sgh7F::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgihM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh7F::P64;
           _sgh7y::P64 = P64[_sgh7F::P64 + 16];
           _sgh7B::P64 = P64[_sgh7F::P64 + 24];
           I64[Hp - 16] = sat_sgh7E_info;
           P64[Hp] = _sgh7y::P64;
           R2 = _sgh7B::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7F_info" {
     sat_sgh7F_info:
         const sat_sgh7F_entry;
         const 2;
         const 18;
 },
 sat_sgh7C_entry() //  [R1]
         { []
         }
     {offset
       cgihW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgihX; else goto cgihY;
       cgihX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgihY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Types.:_closure+2;
           Sp = Sp - 32;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7C_info" {
     sat_sgh7C_info:
         const sat_sgh7C_entry;
         const 1;
         const 16;
 },
 sat_sgh7D_entry() //  [R1]
         { []
         }
     {offset
       cgihZ: // global
           _sgh7D::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto cgii0; else goto cgii1;
       cgii1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgii3; else goto cgii2;
       cgii3: // global
           HpAlloc = 24;
           goto cgii0;
       cgii0: // global
           R1 = _sgh7D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgii2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh7D::P64;
           _sgh7y::P64 = P64[_sgh7D::P64 + 16];
           _sgh7z::P64 = P64[_sgh7D::P64 + 24];
           _sgh7A::P64 = P64[_sgh7D::P64 + 32];
           _sgh7B::P64 = P64[_sgh7D::P64 + 40];
           I64[Hp - 16] = sat_sgh7C_info;
           P64[Hp] = _sgh7y::P64;
           R2 = _sgh7B::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgh7z::P64;
           P64[Sp - 24] = _sgh7A::P64;
           Sp = Sp - 48;
           call GHC.Base.liftA2_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7D_info" {
     sat_sgh7D_info:
         const sat_sgh7D_entry;
         const 4;
         const 15;
 },
 many_v_sgh7A_entry() //  [R1]
         { []
         }
     {offset
       cgii4: // global
           _sgh7A::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgii5; else goto cgii6;
       cgii6: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgii8; else goto cgii7;
       cgii8: // global
           HpAlloc = 104;
           goto cgii5;
       cgii5: // global
           R1 = _sgh7A::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgii7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh7A::P64;
           _sgh7x::P64 = P64[_sgh7A::P64 + 16];
           _sgh7y::P64 = P64[_sgh7A::P64 + 24];
           _sgh7z::P64 = P64[_sgh7A::P64 + 32];
           I64[Hp - 96] = $dApplicative1_sgh7B_info;
           P64[Hp - 80] = _sgh7x::P64;
           I64[Hp - 72] = sat_sgh7F_info;
           P64[Hp - 56] = _sgh7y::P64;
           _cgihr::P64 = Hp - 96;
           P64[Hp - 48] = _cgihr::P64;
           I64[Hp - 40] = sat_sgh7D_info;
           P64[Hp - 24] = _sgh7y::P64;
           P64[Hp - 16] = _sgh7z::P64;
           P64[Hp - 8] = _sgh7A::P64;
           P64[Hp] = _cgihr::P64;
           R2 = _sgh7x::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Base.<|>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sgh7A_info" {
     many_v_sgh7A_info:
         const many_v_sgh7A_entry;
         const 3;
         const 15;
 },
 Data.Functor.Compose.$fAlternativeCompose_$cmany_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cgii9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgiid; else goto cgiic;
       cgiid: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_$cmany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiic: // global
           I64[Hp - 32] = many_v_sgh7A_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_$cmany_info" {
     Data.Functor.Compose.$fAlternativeCompose_$cmany_info:
         const Data.Functor.Compose.$fAlternativeCompose_$cmany_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.3557751 UTC

[section ""data" . Data.Functor.Compose.$fAlternativeCompose_closure" {
     Data.Functor.Compose.$fAlternativeCompose_closure:
         const Data.Functor.Compose.$fAlternativeCompose_info;
 },
 sat_sgh7M_entry() //  [R1, R2]
         { []
         }
     {offset
       cgije: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fAlternativeCompose_$cmany_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7M_info" {
     sat_sgh7M_info:
         const sat_sgh7M_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh7L_entry() //  [R1, R2]
         { []
         }
     {offset
       cgijm: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fAlternativeCompose_$csome_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7L_info" {
     sat_sgh7L_info:
         const sat_sgh7L_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh7K_entry() //  [R1]
         { []
         }
     {offset
       cgijt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiju; else goto cgijv;
       cgiju: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgijv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<|>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7K_info" {
     sat_sgh7K_info:
         const sat_sgh7K_entry;
         const 1;
         const 16;
 },
 sat_sgh7J_entry() //  [R1]
         { []
         }
     {offset
       cgijA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgijB; else goto cgijC;
       cgijB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgijC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.empty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7J_info" {
     sat_sgh7J_info:
         const sat_sgh7J_entry;
         const 1;
         const 16;
 },
 sat_sgh7I_entry() //  [R1]
         { []
         }
     {offset
       cgijH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgijI; else goto cgijJ;
       cgijI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgijJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$fAlternativeCompose_$cp1Alternative_entry(R3,
                                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh7I_info" {
     sat_sgh7I_info:
         const sat_sgh7I_entry;
         const 2;
         const 18;
 },
 Data.Functor.Compose.$fAlternativeCompose_entry() //  [R2, R3]
         { []
         }
     {offset
       cgijL: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cgijP; else goto cgijO;
       cgijP: // global
           HpAlloc = 176;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fAlternativeCompose_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgijO: // global
           I64[Hp - 168] = sat_sgh7M_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_sgh7L_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_sgh7K_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sgh7J_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sgh7I_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 96;
           P64[Hp - 16] = Hp - 120;
           P64[Hp - 8] = Hp - 143;
           P64[Hp] = Hp - 167;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fAlternativeCompose_info" {
     Data.Functor.Compose.$fAlternativeCompose_info:
         const Data.Functor.Compose.$fAlternativeCompose_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.36822766 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose1_closure" {
     Data.Functor.Compose.$fGeneric1Compose1_closure:
         const Data.Functor.Compose.$fGeneric1Compose1_info;
 },
 Data.Functor.Compose.$fGeneric1Compose1_entry() //  [R2, R3]
         { []
         }
     {offset
       cgikv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgikw; else goto cgikx;
       cgikw: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgikx: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Generics.$fGeneric1:.:2_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose1_info" {
     Data.Functor.Compose.$fGeneric1Compose1_info:
         const Data.Functor.Compose.$fGeneric1Compose1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.372498381 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose3_closure" {
     Data.Functor.Compose.$fGeneric1Compose3_closure:
         const Data.Functor.Compose.$fGeneric1Compose3_info;
 },
 Data.Functor.Compose.$fGeneric1Compose3_entry() //  [R2]
         { []
         }
     {offset
       cgikK: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose3_info" {
     Data.Functor.Compose.$fGeneric1Compose3_info:
         const Data.Functor.Compose.$fGeneric1Compose3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.376150611 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose2_closure" {
     Data.Functor.Compose.$fGeneric1Compose2_closure:
         const Data.Functor.Compose.$fGeneric1Compose2_info;
 },
 Data.Functor.Compose.$fGeneric1Compose2_entry() //  [R2, R3]
         { []
         }
     {offset
       cgikV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cgikW; else goto cgikX;
       cgikW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgikX: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Data.Functor.Compose.$fGeneric1Compose3_closure+1;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.fmap_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose2_info" {
     Data.Functor.Compose.$fGeneric1Compose2_info:
         const Data.Functor.Compose.$fGeneric1Compose2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.381565258 UTC

[section ""data" . Data.Functor.Compose.$fGeneric1Compose_closure" {
     Data.Functor.Compose.$fGeneric1Compose_closure:
         const Data.Functor.Compose.$fGeneric1Compose_info;
 },
 sat_sgh7U_entry() //  [R1, R2]
         { []
         }
     {offset
       cgile: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fGeneric1Compose1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7U_info" {
     sat_sgh7U_info:
         const sat_sgh7U_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sgh7T_entry() //  [R1, R2]
         { []
         }
     {offset
       cgilm: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Compose.$fGeneric1Compose2_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh7T_info" {
     sat_sgh7T_info:
         const sat_sgh7T_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Compose.$fGeneric1Compose_entry() //  [R2]
         { []
         }
     {offset
       cgilq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgilu; else goto cgilt;
       cgilu: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Compose.$fGeneric1Compose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgilt: // global
           I64[Hp - 48] = sat_sgh7U_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sgh7T_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Generics.C:Generic1_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGeneric1Compose_info" {
     Data.Functor.Compose.$fGeneric1Compose_info:
         const Data.Functor.Compose.$fGeneric1Compose_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.38848255 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose1_closure" {
     Data.Functor.Compose.$fGenericCompose1_closure:
         const Data.Functor.Compose.$fGenericCompose1_info;
 },
 Data.Functor.Compose.$fGenericCompose1_entry() //  [R2]
         { []
         }
     {offset
       cgilP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGenericCompose1_info" {
     Data.Functor.Compose.$fGenericCompose1_info:
         const Data.Functor.Compose.$fGenericCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.391984657 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose2_closure" {
     Data.Functor.Compose.$fGenericCompose2_closure:
         const Data.Functor.Compose.$fGenericCompose2_info;
 },
 Data.Functor.Compose.$fGenericCompose2_entry() //  [R2]
         { []
         }
     {offset
       cgim0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fGenericCompose2_info" {
     Data.Functor.Compose.$fGenericCompose2_info:
         const Data.Functor.Compose.$fGenericCompose2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.395291923 UTC

[section ""data" . Data.Functor.Compose.$fGenericCompose_closure" {
     Data.Functor.Compose.$fGenericCompose_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Compose.$fGenericCompose2_closure+1;
         const Data.Functor.Compose.$fGenericCompose1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.39754612 UTC

[section ""data" . Data.Functor.Compose.getCompose1_closure" {
     Data.Functor.Compose.getCompose1_closure:
         const Data.Functor.Compose.getCompose1_info;
 },
 Data.Functor.Compose.getCompose1_entry() //  [R2]
         { []
         }
     {offset
       cgimc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.getCompose1_info" {
     Data.Functor.Compose.getCompose1_info:
         const Data.Functor.Compose.getCompose1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.401013794 UTC

[section ""data" . Data.Functor.Compose.getCompose_closure" {
     Data.Functor.Compose.getCompose_closure:
         const Data.Functor.Compose.getCompose_info;
 },
 Data.Functor.Compose.getCompose_entry() //  [R2]
         { []
         }
     {offset
       cgimn: // global
           R2 = R2;
           call Data.Functor.Compose.getCompose1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.getCompose_info" {
     Data.Functor.Compose.getCompose_info:
         const Data.Functor.Compose.getCompose_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.403984577 UTC

[section ""cstring" . $cCompose1_rgdPU_bytes" {
     $cCompose1_rgdPU_bytes:
         I8[] [103,101,116,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.406650583 UTC

[section ""data" . $cCompose2_rgdPV_closure" {
     $cCompose2_rgdPV_closure:
         const $cCompose2_rgdPV_info;
         const 0;
         const 0;
         const 0;
 },
 $cCompose2_rgdPV_entry() //  [R1]
         { []
         }
     {offset
       cgimB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgimC; else goto cgimD;
       cgimC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgimD: // global
           (_cgimy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgimy::I64 == 0) goto cgimA; else goto cgimz;
       cgimA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgimz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgimy::I64;
           R2 = $cCompose1_rgdPU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cCompose2_rgdPV_info" {
     $cCompose2_rgdPV_info:
         const $cCompose2_rgdPV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.410222283 UTC

[section ""data" . $cCompose3_rgdPW_closure" {
     $cCompose3_rgdPW_closure:
         const :_con_info;
         const $cCompose2_rgdPV_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.414976862 UTC

[section ""data" . go61_rgdPX_closure" {
     go61_rgdPX_closure:
         const go61_rgdPX_info;
         const 0;
 },
 go61_rgdPX_entry() //  [R2, R3]
         { []
         }
     {offset
       cgimY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgimZ; else goto uginC;
       cgimZ: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rgdPX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uginC: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cgimO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rgdPX_info" {
     go61_rgdPX_info:
         const go61_rgdPX_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sghf8_srt+416;
 },
 _cgimO() //  []
         { []
         }
     {offset
       cgimO: // global
           _sgh7Y::P64 = P64[Sp];
           I64[Sp] = block_cgimR_info;
           R1 = _sgh7Y::P64;
           if (R1 & 7 != 0) goto uginG; else goto cgimS;
       uginG: // global
           call _cgimR(R1) args: 0, res: 0, upd: 0;
       cgimS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cgimR() //  [R1]
         { []
         }
     {offset
       cgimR: // global
           if (R1 & 7 == 1) goto uginD; else goto cgimW;
       uginD: // global
           Sp = Sp + 16;
           call _cgine() args: 0, res: 0, upd: 0;
       cgimW: // global
           I64[Sp - 8] = block_cgin6_info;
           _sgh81::P64 = P64[R1 + 6];
           _sgh82::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sgh82::P64;
           P64[Sp + 8] = _sgh81::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uginH; else goto cgin8;
       uginH: // global
           call _cgin6(R1) args: 0, res: 0, upd: 0;
       cgin8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgimR_info" {
     block_cgimR_info:
         const _cgimR;
         const 1;
         const 21474836510;
         const Sghf8_srt+416;
 },
 _cgin6() //  [R1]
         { []
         }
     {offset
       cgin6: // global
           if (R1 & 7 == 1) goto uginE; else goto cginj;
       uginE: // global
           Sp = Sp + 24;
           call _cgine() args: 0, res: 0, upd: 0;
       cginj: // global
           I64[Sp - 8] = block_cginh_info;
           _sgh84::P64 = P64[R1 + 6];
           _sgh85::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sgh85::P64;
           P64[Sp + 16] = _sgh84::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uginK; else goto cgink;
       uginK: // global
           call _cginh(R1) args: 0, res: 0, upd: 0;
       cgink: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgin6_info" {
     block_cgin6_info:
         const _cgin6;
         const 2;
         const 21474836510;
         const Sghf8_srt+416;
 },
 _cgine() //  []
         { []
         }
     {offset
       cgine: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cginh() //  [R1]
         { []
         }
     {offset
       cginh: // global
           I64[Sp] = block_cgino_info;
           R3 = Data.Functor.Compose.$fDataCompose6_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cginh_info" {
     block_cginh_info:
         const _cginh;
         const 3;
         const 21474836510;
         const Sghf8_srt+416;
 },
 _cgino() //  [R1]
         { []
         }
     {offset
       cgino: // global
           if (R1 & 7 == 1) goto cginv; else goto cginz;
       cginv: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cgimO() args: 0, res: 0, upd: 0;
       cginz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgino_info" {
     block_cgino_info:
         const _cgino;
         const 3;
         const 21474836510;
         const Sghf8_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.428498905 UTC

[section ""data" . $cCompose4_rgdPY_closure" {
     $cCompose4_rgdPY_closure:
         const Data.Data.AlgConstr_con_info;
         const $cCompose5_rgdPZ_closure;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$fDataCompose5_closure" {
     Data.Functor.Compose.$fDataCompose5_closure:
         const :_con_info;
         const Data.Functor.Compose.$cCompose_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$fDataCompose4_closure" {
     Data.Functor.Compose.$fDataCompose4_closure:
         const Data.Data.AlgRep_con_info;
         const Data.Functor.Compose.$fDataCompose5_closure+2;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$tCompose_closure" {
     Data.Functor.Compose.$tCompose_closure:
         const Data.Data.DataType_con_info;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Functor.Compose.$fDataCompose4_closure+1;
         const 0;
 },
 section ""data" . Data.Functor.Compose.$cCompose_closure" {
     Data.Functor.Compose.$cCompose_closure:
         const Data.Data.Constr_con_info;
         const $cCompose4_rgdPY_closure+1;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const $cCompose3_rgdPW_closure+2;
         const Data.Data.Prefix_closure+1;
         const Data.Functor.Compose.$tCompose_closure+1;
         const 0;
 },
 section ""data" . $cCompose5_rgdPZ_closure" {
     $cCompose5_rgdPZ_closure:
         const $cCompose5_rgdPZ_info;
         const 0;
         const 0;
         const 0;
 },
 $cCompose5_rgdPZ_entry() //  [R1]
         { []
         }
     {offset
       cgiov: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiow; else goto cgiox;
       cgiow: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiox: // global
           (_cgios::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cgios::I64 == 0) goto cgiou; else goto cgiot;
       cgiou: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cgiot: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cgios::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = Data.Functor.Compose.$fDataCompose5_closure+2;
           Sp = Sp - 16;
           call go61_rgdPX_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cCompose5_rgdPZ_info" {
     $cCompose5_rgdPZ_info:
         const $cCompose5_rgdPZ_entry;
         const 0;
         const 55834574869;
         const Sghf8_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.435459547 UTC

[section ""cstring" . Data.Functor.Compose.$trModule4_bytes" {
     Data.Functor.Compose.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.437515126 UTC

[section ""data" . Data.Functor.Compose.$trModule3_closure" {
     Data.Functor.Compose.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.439205792 UTC

[section ""cstring" . Data.Functor.Compose.$trModule2_bytes" {
     Data.Functor.Compose.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.440875274 UTC

[section ""data" . Data.Functor.Compose.$trModule1_closure" {
     Data.Functor.Compose.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.442701686 UTC

[section ""data" . Data.Functor.Compose.$trModule_closure" {
     Data.Functor.Compose.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Compose.$trModule3_closure+1;
         const Data.Functor.Compose.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.444463361 UTC

[section ""data" . $krep_rgdQ0_closure" {
     $krep_rgdQ0_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.446727178 UTC

[section ""data" . $krep1_rgdQ1_closure" {
     $krep1_rgdQ1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgdQ0_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.448590631 UTC

[section ""data" . $krep2_rgdQ2_closure" {
     $krep2_rgdQ2_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.450515013 UTC

[section ""data" . $krep3_rgdQ3_closure" {
     $krep3_rgdQ3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rgdQ2_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.452231833 UTC

[section ""data" . $krep4_rgdQ4_closure" {
     $krep4_rgdQ4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rgdQ0_closure+2;
         const $krep2_rgdQ2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.453943223 UTC

[section ""data" . $krep5_rgdQ5_closure" {
     $krep5_rgdQ5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rgdQ4_closure+4;
         const $krep1_rgdQ1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.455655635 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose9_closure" {
     Data.Functor.Compose.$fDataCompose9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rgdQ3_closure+4;
         const $krep5_rgdQ5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.457497803 UTC

[section ""data" . $krep6_rgdQ6_closure" {
     $krep6_rgdQ6_closure:
         const GHC.Types.KindRepVar_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.459230511 UTC

[section ""data" . $krep7_rgdQ7_closure" {
     $krep7_rgdQ7_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.460953264 UTC

[section ""data" . $krep8_rgdQ8_closure" {
     $krep8_rgdQ8_closure:
         const GHC.Types.KindRepVar_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.462986087 UTC

[section ""data" . $krep9_rgdQ9_closure" {
     $krep9_rgdQ9_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep6_rgdQ6_closure+2;
         const $krep8_rgdQ8_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.464757033 UTC

[section ""data" . $krep10_rgdQa_closure" {
     $krep10_rgdQa_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep7_rgdQ7_closure+2;
         const $krep9_rgdQ9_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.466587895 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose10_closure" {
     Data.Functor.Compose.$fDataCompose10_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$fDataCompose7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.468328476 UTC

[section ""data" . Data.Functor.Compose.$tcCompose_closure" {
     Data.Functor.Compose.$tcCompose_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Compose.$trModule_closure+1;
         const Data.Functor.Compose.$fDataCompose10_closure+1;
         const Data.Functor.Compose.$fDataCompose9_closure+4;
         const 6729400645769595507;
         const 7487202375031942550;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.470262101 UTC

[section ""data" . $krep11_rgdQb_closure" {
     $krep11_rgdQb_closure:
         const :_con_info;
         const $krep8_rgdQ8_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.472484891 UTC

[section ""data" . $krep12_rgdQc_closure" {
     $krep12_rgdQc_closure:
         const :_con_info;
         const $krep6_rgdQ6_closure+2;
         const $krep11_rgdQb_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.474715389 UTC

[section ""data" . $krep13_rgdQd_closure" {
     $krep13_rgdQd_closure:
         const :_con_info;
         const $krep7_rgdQ7_closure+2;
         const $krep12_rgdQc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.476367382 UTC

[section ""data" . $krep14_rgdQe_closure" {
     $krep14_rgdQe_closure:
         const :_con_info;
         const $krep_rgdQ0_closure+2;
         const $krep13_rgdQd_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.478160949 UTC

[section ""data" . $krep15_rgdQf_closure" {
     $krep15_rgdQf_closure:
         const :_con_info;
         const $krep2_rgdQ2_closure+2;
         const $krep14_rgdQe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.479854835 UTC

[section ""data" . $krep16_rgdQg_closure" {
     $krep16_rgdQg_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Compose.$tcCompose_closure+1;
         const $krep15_rgdQf_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.481645207 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose1_closure" {
     Data.Functor.Compose.$tc'Compose1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rgdQa_closure+3;
         const $krep16_rgdQg_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.48352345 UTC

[section ""cstring" . Data.Functor.Compose.$tc'Compose3_bytes" {
     Data.Functor.Compose.$tc'Compose3_bytes:
         I8[] [39,67,111,109,112,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.485202144 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose2_closure" {
     Data.Functor.Compose.$tc'Compose2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Compose.$tc'Compose3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.487341728 UTC

[section ""data" . Data.Functor.Compose.$tc'Compose_closure" {
     Data.Functor.Compose.$tc'Compose_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Compose.$trModule_closure+1;
         const Data.Functor.Compose.$tc'Compose2_closure+1;
         const Data.Functor.Compose.$tc'Compose1_closure+4;
         const 7236514282653524344;
         const 13791541438620948974;
         const 5;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.491297935 UTC

[section ""data" . Data.Functor.Compose.$w$cp1Data_closure" {
     Data.Functor.Compose.$w$cp1Data_closure:
         const Data.Functor.Compose.$w$cp1Data_info;
         const 0;
 },
 Data.Functor.Compose.$w$cp1Data_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgipt: // global
           _sgh8h::P64 = R6;
           _sgh8g::P64 = R5;
           _sgh8f::P64 = R4;
           _sgh8e::P64 = R3;
           _sgh8d::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cgipx; else goto cgipy;
       cgipy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgipA; else goto cgipz;
       cgipA: // global
           HpAlloc = 80;
           goto cgipx;
       cgipx: // global
           R6 = _sgh8h::P64;
           R5 = _sgh8g::P64;
           R4 = _sgh8f::P64;
           R3 = _sgh8e::P64;
           R2 = _sgh8d::P64;
           R1 = Data.Functor.Compose.$w$cp1Data_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgipz: // global
           I64[Hp - 72] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 64] = _sgh8h::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = Data.Typeable.Internal.SomeTypeRep_con_info;
           P64[Hp - 24] = _sgh8g::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           I64[Sp - 32] = block_cgipm_info;
           R6 = 2;
           R5 = Data.Functor.Compose.$fDataCompose10_closure+1;
           R4 = Data.Functor.Compose.$trModule_closure+1;
           R3 = 7487202375031942550;
           R2 = 6729400645769595507;
           P64[Sp - 48] = Data.Functor.Compose.$fDataCompose9_closure+4;
           P64[Sp - 40] = Hp - 14;
           P64[Sp - 24] = _sgh8d::P64;
           P64[Sp - 16] = _sgh8e::P64;
           P64[Sp - 8] = _sgh8f::P64;
           Sp = Sp - 48;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cp1Data_info" {
     Data.Functor.Compose.$w$cp1Data_info:
         const Data.Functor.Compose.$w$cp1Data_entry;
         const 0;
         const 30064771086;
         const 21474836505;
         const Sghf8_srt+456;
 },
 _cgipm() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgipm: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cgipn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cgipm_info" {
     block_cgipm_info:
         const _cgipm;
         const 3;
         const 4294967326;
         const Sghf8_srt+456;
 },
 _cgipn() //  []
         { []
         }
     {offset
       cgipn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cgipD; else goto cgipC;
       cgipD: // global
           HpAlloc = 48;
           I64[Sp] = block_cgipn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cgipC: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 40] = block_cgipr_info;
           R3 = P64[Sp + 56];
           R2 = Hp - 38;
           Sp = Sp + 40;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgipn_info" {
     block_cgipn_info:
         const _cgipn;
         const 1096;
         const 4294967326;
         const Sghf8_srt+456;
 },
 _cgipr() //  [R1]
         { []
         }
     {offset
       cgipr: // global
           I64[Sp] = block_cgipw_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgipr_info" {
     block_cgipr_info:
         const _cgipr;
         const 131;
         const 4294967326;
         const Sghf8_srt+456;
 },
 _cgipw() //  [R1]
         { []
         }
     {offset
       cgipw: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgipw_info" {
     block_cgipw_info:
         const _cgipw;
         const 387;
         const 4294967326;
         const Sghf8_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.503354621 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose8_closure" {
     Data.Functor.Compose.$fDataCompose8_closure:
         const Data.Functor.Compose.$fDataCompose8_info;
         const 0;
 },
 Data.Functor.Compose.$fDataCompose8_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cgiqr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Compose.$w$cp1Data_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose8_info" {
     Data.Functor.Compose.$fDataCompose8_info:
         const Data.Functor.Compose.$fDataCompose8_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const Sghf8_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.507669043 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose2_closure" {
     Data.Functor.Compose.$fDataCompose2_closure:
         const Data.Functor.Compose.$fDataCompose2_info;
 },
 Data.Functor.Compose.$fDataCompose2_entry() //  [R2]
         { []
         }
     {offset
       cgiqC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose2_info" {
     Data.Functor.Compose.$fDataCompose2_info:
         const Data.Functor.Compose.$fDataCompose2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.510860009 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose1_closure" {
     Data.Functor.Compose.$fDataCompose1_closure:
         const (,)_con_info;
         const Data.Functor.Compose.$fDataCompose2_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.519494426 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapMp_closure" {
     Data.Functor.Compose.$w$cgmapMp_closure:
         const Data.Functor.Compose.$w$cgmapMp_info;
 },
 lvl8_sgh8G_entry() //  [R1]
         { []
         }
     {offset
       cgiqS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiqT; else goto cgiqU;
       cgiqT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiqU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh8G_info" {
     lvl8_sgh8G_info:
         const lvl8_sgh8G_entry;
         const 1;
         const 16;
 },
 sat_sgh93_entry() //  [R1, R2]
         { []
         }
     {offset
       cgir7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgir8; else goto cgir9;
       cgir8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgir9: // global
           I64[Sp - 24] = block_cgir4_info;
           _sgh8G::P64 = P64[R1 + 7];
           _sgh8H::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgh8G::P64;
           P64[Sp - 8] = _sgh8H::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugirr; else goto cgir5;
       ugirr: // global
           call _cgir4(R1) args: 0, res: 0, upd: 0;
       cgir5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh93_info" {
     sat_sgh93_info:
         const sat_sgh93_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgir4() //  [R1]
         { []
         }
     {offset
       cgir4: // global
           I64[Sp - 8] = block_cgirc_info;
           _sgh90::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgh90::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugirq; else goto cgire;
       ugirq: // global
           call _cgirc(R1) args: 0, res: 0, upd: 0;
       cgire: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgir4_info" {
     block_cgir4_info:
         const _cgir4;
         const 2;
         const 30;
 },
 _cgirc() //  [R1]
         { []
         }
     {offset
       cgirc: // global
           if (R1 & 7 == 1) goto cgirk; else goto cgiro;
       cgirk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgiro: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgirc_info" {
     block_cgirc_info:
         const _cgirc;
         const 3;
         const 30;
 },
 sat_sgh8V_entry() //  [R1]
         { []
         }
     {offset
       cgirN: // global
           _sgh8V::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgirO; else goto cgirP;
       cgirP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgirR; else goto cgirQ;
       cgirR: // global
           HpAlloc = 56;
           goto cgirO;
       cgirO: // global
           R1 = _sgh8V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgirQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh8V::P64;
           _sgh8F::P64 = P64[_sgh8V::P64 + 16];
           _sgh8H::P64 = P64[_sgh8V::P64 + 24];
           _sgh8M::P64 = P64[_sgh8V::P64 + 32];
           _sgh8N::P64 = P64[_sgh8V::P64 + 40];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgh8M::P64;
           P64[Hp - 24] = _sgh8F::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = _sgh8N::P64;
           R2 = _sgh8H::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh8V_info" {
     sat_sgh8V_info:
         const sat_sgh8V_entry;
         const 4;
         const 15;
 },
 sat_sgh8R_entry() //  [R1, R2]
         { []
         }
     {offset
       cgis3: // global
           _sgh8O::P64 = R2;
           _sgh8R::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgis4; else goto cgis5;
       cgis5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgis7; else goto cgis6;
       cgis7: // global
           HpAlloc = 56;
           goto cgis4;
       cgis4: // global
           R2 = _sgh8O::P64;
           R1 = _sgh8R::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgis6: // global
           _sgh8H::P64 = P64[_sgh8R::P64 + 7];
           _sgh8M::P64 = P64[_sgh8R::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgh8M::P64;
           P64[Hp - 24] = _sgh8O::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgh8H::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh8R_info" {
     sat_sgh8R_info:
         const sat_sgh8R_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh8S_entry() //  [R1]
         { []
         }
     {offset
       cgis8: // global
           _sgh8S::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgis9; else goto cgisa;
       cgisa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgisc; else goto cgisb;
       cgisc: // global
           HpAlloc = 24;
           goto cgis9;
       cgis9: // global
           R1 = _sgh8S::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgisb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh8S::P64;
           _sgh8H::P64 = P64[_sgh8S::P64 + 16];
           _sgh8I::P64 = P64[_sgh8S::P64 + 24];
           _sgh8M::P64 = P64[_sgh8S::P64 + 32];
           I64[Hp - 16] = sat_sgh8R_info;
           P64[Hp - 8] = _sgh8H::P64;
           P64[Hp] = _sgh8M::P64;
           R2 = _sgh8H::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgh8I::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh8S_info" {
     sat_sgh8S_info:
         const sat_sgh8S_entry;
         const 3;
         const 15;
 },
 sat_sgh8W_entry() //  [R1, R2]
         { []
         }
     {offset
       cgisd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cgise; else goto cgisf;
       cgise: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgisf: // global
           I64[Sp - 40] = block_cgirC_info;
           _sgh8D::P64 = P64[R1 + 7];
           _sgh8F::P64 = P64[R1 + 15];
           _sgh8H::P64 = P64[R1 + 23];
           _sgh8I::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgh8D::P64;
           P64[Sp - 24] = _sgh8F::P64;
           P64[Sp - 16] = _sgh8H::P64;
           P64[Sp - 8] = _sgh8I::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugisj; else goto cgirD;
       ugisj: // global
           call _cgirC(R1) args: 0, res: 0, upd: 0;
       cgirD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh8W_info" {
     sat_sgh8W_info:
         const sat_sgh8W_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgirC() //  [R1]
         { []
         }
     {offset
       cgirC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgisi; else goto cgish;
       cgisi: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgish: // global
           _sgh8M::P64 = P64[R1 + 7];
           _sgh8N::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_sgh8V_info;
           P64[Hp - 64] = P64[Sp + 16];
           _sgh8H::P64 = P64[Sp + 24];
           P64[Hp - 56] = _sgh8H::P64;
           P64[Hp - 48] = _sgh8M::P64;
           P64[Hp - 40] = _sgh8N::P64;
           I64[Hp - 32] = sat_sgh8S_info;
           P64[Hp - 16] = _sgh8H::P64;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _sgh8M::P64;
           R2 = P64[Sp + 8];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 80;
           Sp = Sp + 16;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgirC_info" {
     block_cgirC_info:
         const _cgirC;
         const 4;
         const 30;
 },
 sat_sgh8J_entry() //  [R1]
         { []
         }
     {offset
       cgiso: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgisp; else goto cgisq;
       cgisp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgisq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh8J_info" {
     sat_sgh8J_info:
         const sat_sgh8J_entry;
         const 1;
         const 16;
 },
 sat_sgh8X_entry() //  [R1]
         { []
         }
     {offset
       cgisr: // global
           _sgh8X::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgiss; else goto cgist;
       cgist: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgisv; else goto cgisu;
       cgisv: // global
           HpAlloc = 104;
           goto cgiss;
       cgiss: // global
           R1 = _sgh8X::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgisu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh8X::P64;
           _sgh8C::P64 = P64[_sgh8X::P64 + 16];
           _sgh8D::P64 = P64[_sgh8X::P64 + 24];
           _sgh8E::P64 = P64[_sgh8X::P64 + 32];
           _sgh8F::P64 = P64[_sgh8X::P64 + 40];
           _sgh8H::P64 = P64[_sgh8X::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sgh8E::P64;
           P64[Hp - 72] = _sgh8C::P64;
           P64[Hp - 64] = _sgh8F::P64;
           I64[Hp - 56] = sat_sgh8W_info;
           P64[Hp - 48] = _sgh8D::P64;
           P64[Hp - 40] = _sgh8F::P64;
           P64[Hp - 32] = _sgh8H::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sgh8J_info;
           P64[Hp] = _sgh8H::P64;
           R2 = _sgh8H::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh8X_info" {
     sat_sgh8X_info:
         const sat_sgh8X_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$w$cgmapMp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgisw: // global
           _sgh8F::P64 = R5;
           _sgh8E::P64 = R4;
           _sgh8D::P64 = R3;
           _sgh8C::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgisx; else goto cgisy;
       cgisy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgisA; else goto cgisz;
       cgisA: // global
           HpAlloc = 24;
           goto cgisx;
       cgisx: // global
           R5 = _sgh8F::P64;
           R4 = _sgh8E::P64;
           R3 = _sgh8D::P64;
           R2 = _sgh8C::P64;
           R1 = Data.Functor.Compose.$w$cgmapMp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgisz: // global
           I64[Hp - 16] = lvl8_sgh8G_info;
           P64[Hp] = _sgh8D::P64;
           I64[Sp - 48] = block_cgiqV_info;
           R2 = _sgh8D::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgh8C::P64;
           P64[Sp - 24] = _sgh8D::P64;
           P64[Sp - 16] = _sgh8E::P64;
           P64[Sp - 8] = _sgh8F::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapMp_info" {
     Data.Functor.Compose.$w$cgmapMp_info:
         const Data.Functor.Compose.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgiqV() //  [R1]
         { []
         }
     {offset
       cgiqV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgisD; else goto cgisC;
       cgisD: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgisC: // global
           I64[Hp - 72] = sat_sgh93_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgh8X_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiqV_info" {
     block_cgiqV_info:
         const _cgiqV;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.546803761 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapMp_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapMp_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMp_slow() //  [R1]
         { []
         }
     {offset
       cgiup: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapMp_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMp_entry() //  []
         { []
         }
     {offset
       cgiut: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapMp_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapMp_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapMp_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapMp_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.554498996 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapM_closure" {
     Data.Functor.Compose.$w$cgmapM_closure:
         const Data.Functor.Compose.$w$cgmapM_info;
 },
 sat_sgh9m_entry() //  [R1, R2]
         { []
         }
     {offset
       cgiuS: // global
           _sgh9k::P64 = R2;
           _sgh9m::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgiuT; else goto cgiuU;
       cgiuU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cgiuW; else goto cgiuV;
       cgiuW: // global
           HpAlloc = 32;
           goto cgiuT;
       cgiuT: // global
           R2 = _sgh9k::P64;
           R1 = _sgh9m::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgiuV: // global
           _sgh9e::P64 = P64[_sgh9m::P64 + 7];
           _sgh9j::P64 = P64[_sgh9m::P64 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sgh9j::P64;
           P64[Hp] = _sgh9k::P64;
           R2 = _sgh9e::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh9m_info" {
     sat_sgh9m_info:
         const sat_sgh9m_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh9n_entry() //  [R1, R2]
         { []
         }
     {offset
       cgiuX: // global
           _sgh9j::P64 = R2;
           _sgh9n::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cgiuY; else goto cgiuZ;
       cgiuZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgiv1; else goto cgiv0;
       cgiv1: // global
           HpAlloc = 24;
           goto cgiuY;
       cgiuY: // global
           R2 = _sgh9j::P64;
           R1 = _sgh9n::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgiv0: // global
           _sgh9e::P64 = P64[_sgh9n::P64 + 7];
           _sgh9h::P64 = P64[_sgh9n::P64 + 15];
           I64[Hp - 16] = sat_sgh9m_info;
           P64[Hp - 8] = _sgh9e::P64;
           P64[Hp] = _sgh9j::P64;
           R2 = _sgh9e::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sgh9h::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh9n_info" {
     sat_sgh9n_info:
         const sat_sgh9n_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh9i_entry() //  [R1]
         { []
         }
     {offset
       cgiv6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgiv7; else goto cgiv8;
       cgiv7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiv8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose2_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh9i_info" {
     sat_sgh9i_info:
         const sat_sgh9i_entry;
         const 1;
         const 16;
 },
 Data.Functor.Compose.$w$cgmapM_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgiv9: // global
           _sgh9g::P64 = R5;
           _sgh9f::P64 = R4;
           _sgh9e::P64 = R3;
           _sgh9d::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cgiva; else goto cgivb;
       cgivb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cgivd; else goto cgivc;
       cgivd: // global
           HpAlloc = 88;
           goto cgiva;
       cgiva: // global
           R5 = _sgh9g::P64;
           R4 = _sgh9f::P64;
           R3 = _sgh9e::P64;
           R2 = _sgh9d::P64;
           R1 = Data.Functor.Compose.$w$cgmapM_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgivc: // global
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = _sgh9f::P64;
           P64[Hp - 56] = _sgh9d::P64;
           P64[Hp - 48] = _sgh9g::P64;
           I64[Hp - 40] = sat_sgh9n_info;
           P64[Hp - 32] = _sgh9e::P64;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = sat_sgh9i_info;
           P64[Hp] = _sgh9e::P64;
           R2 = _sgh9e::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapM_info" {
     Data.Functor.Compose.$w$cgmapM_info:
         const Data.Functor.Compose.$w$cgmapM_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.564864258 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapM_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapM_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapM_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapM_slow() //  [R1]
         { []
         }
     {offset
       cgivM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapM_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapM_entry() //  []
         { []
         }
     {offset
       cgivQ: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapM_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapM_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapM_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapM_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapM_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.577056649 UTC

[section ""data" . Data.Functor.Compose.$w$cgmapMo_closure" {
     Data.Functor.Compose.$w$cgmapMo_closure:
         const Data.Functor.Compose.$w$cgmapMo_info;
 },
 lvl8_sgh9B_entry() //  [R1]
         { []
         }
     {offset
       cgiw7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiw8; else goto cgiw9;
       cgiw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiw9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_sgh9B_info" {
     lvl8_sgh9B_info:
         const lvl8_sgh9B_entry;
         const 1;
         const 16;
 },
 sat_sgha1_entry() //  [R1, R2]
         { []
         }
     {offset
       cgiwm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgiwn; else goto cgiwo;
       cgiwn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgiwo: // global
           I64[Sp - 24] = block_cgiwj_info;
           _sgh9B::P64 = P64[R1 + 7];
           _sgh9C::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sgh9B::P64;
           P64[Sp - 8] = _sgh9C::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ugiwG; else goto cgiwk;
       ugiwG: // global
           call _cgiwj(R1) args: 0, res: 0, upd: 0;
       cgiwk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgha1_info" {
     sat_sgha1_info:
         const sat_sgha1_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cgiwj() //  [R1]
         { []
         }
     {offset
       cgiwj: // global
           I64[Sp - 8] = block_cgiwr_info;
           _sgh9Y::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgh9Y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugiwF; else goto cgiwt;
       ugiwF: // global
           call _cgiwr(R1) args: 0, res: 0, upd: 0;
       cgiwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiwj_info" {
     block_cgiwj_info:
         const _cgiwj;
         const 2;
         const 30;
 },
 _cgiwr() //  [R1]
         { []
         }
     {offset
       cgiwr: // global
           if (R1 & 7 == 1) goto cgiwz; else goto cgiwD;
       cgiwz: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cgiwD: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiwr_info" {
     block_cgiwr_info:
         const _cgiwr;
         const 3;
         const 30;
 },
 sat_sgh9R_entry() //  [R1]
         { []
         }
     {offset
       cgix7: // global
           _sgh9R::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cgix8; else goto cgix9;
       cgix9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgixb; else goto cgixa;
       cgixb: // global
           HpAlloc = 56;
           goto cgix8;
       cgix8: // global
           R1 = _sgh9R::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgixa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh9R::P64;
           _sgh9A::P64 = P64[_sgh9R::P64 + 16];
           _sgh9C::P64 = P64[_sgh9R::P64 + 24];
           _sgh9H::P64 = P64[_sgh9R::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgh9H::P64;
           P64[Hp - 24] = _sgh9A::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.False_closure+1;
           R2 = _sgh9C::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh9R_info" {
     sat_sgh9R_info:
         const sat_sgh9R_entry;
         const 3;
         const 15;
 },
 sat_sgh9N_entry() //  [R1, R2]
         { []
         }
     {offset
       cgixn: // global
           _sgh9K::P64 = R2;
           _sgh9N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cgixo; else goto cgixp;
       cgixp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgixr; else goto cgixq;
       cgixr: // global
           HpAlloc = 56;
           goto cgixo;
       cgixo: // global
           R2 = _sgh9K::P64;
           R1 = _sgh9N::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgixq: // global
           _sgh9C::P64 = P64[_sgh9N::P64 + 7];
           _sgh9H::P64 = P64[_sgh9N::P64 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgh9H::P64;
           P64[Hp - 24] = _sgh9K::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgh9C::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh9N_info" {
     sat_sgh9N_info:
         const sat_sgh9N_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sgh9O_entry() //  [R1]
         { []
         }
     {offset
       cgixs: // global
           _sgh9O::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgixt; else goto cgixu;
       cgixu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgixw; else goto cgixv;
       cgixw: // global
           HpAlloc = 24;
           goto cgixt;
       cgixt: // global
           R1 = _sgh9O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgixv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh9O::P64;
           _sgh9C::P64 = P64[_sgh9O::P64 + 16];
           _sgh9D::P64 = P64[_sgh9O::P64 + 24];
           _sgh9H::P64 = P64[_sgh9O::P64 + 32];
           I64[Hp - 16] = sat_sgh9N_info;
           P64[Hp - 8] = _sgh9C::P64;
           P64[Hp] = _sgh9H::P64;
           R2 = _sgh9C::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sgh9D::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh9O_info" {
     sat_sgh9O_info:
         const sat_sgh9O_entry;
         const 3;
         const 15;
 },
 sat_sgh9U_entry() //  [R1, R2]
         { []
         }
     {offset
       cgixx: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cgixy; else goto cgixz;
       cgixy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cgixz: // global
           I64[Sp - 40] = block_cgiwR_info;
           _sgh9y::P64 = P64[R1 + 7];
           _sgh9A::P64 = P64[R1 + 15];
           _sgh9C::P64 = P64[R1 + 23];
           _sgh9D::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _sgh9y::P64;
           P64[Sp - 24] = _sgh9A::P64;
           P64[Sp - 16] = _sgh9C::P64;
           P64[Sp - 8] = _sgh9D::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ugixQ; else goto cgiwS;
       ugixQ: // global
           call _cgiwR(R1) args: 0, res: 0, upd: 0;
       cgiwS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sgh9U_info" {
     sat_sgh9U_info:
         const sat_sgh9U_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cgiwR() //  [R1]
         { []
         }
     {offset
       cgiwR: // global
           I64[Sp - 8] = block_cgiwW_info;
           _sgh9H::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sgh9H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ugixP; else goto cgiwX;
       ugixP: // global
           call _cgiwW(R1) args: 0, res: 0, upd: 0;
       cgiwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiwR_info" {
     block_cgiwR_info:
         const _cgiwR;
         const 4;
         const 30;
 },
 _cgiwW() //  [R1]
         { []
         }
     {offset
       cgiwW: // global
           _sgh9A::P64 = P64[Sp + 24];
           _sgh9C::P64 = P64[Sp + 32];
           _sgh9H::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cgixC; else goto cgixG;
       cgixC: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgixF; else goto cgixE;
       cgixF: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgixE: // global
           I64[Hp - 72] = sat_sgh9R_info;
           P64[Hp - 56] = _sgh9A::P64;
           P64[Hp - 48] = _sgh9C::P64;
           P64[Hp - 40] = _sgh9H::P64;
           I64[Hp - 32] = sat_sgh9O_info;
           P64[Hp - 16] = _sgh9C::P64;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _sgh9H::P64;
           R2 = P64[Sp + 16];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 72;
           Sp = Sp + 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
       cgixG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cgixL; else goto cgixK;
       cgixL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgixK: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sgh9H::P64;
           P64[Hp - 24] = _sgh9A::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = GHC.Types.True_closure+2;
           R2 = _sgh9C::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiwW_info" {
     block_cgiwW_info:
         const _cgiwW;
         const 5;
         const 30;
 },
 sat_sgh9E_entry() //  [R1]
         { []
         }
     {offset
       cgixV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgixW; else goto cgixX;
       cgixW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgixX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Data.Functor.Compose.$fDataCompose1_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh9E_info" {
     sat_sgh9E_info:
         const sat_sgh9E_entry;
         const 1;
         const 16;
 },
 sat_sgh9V_entry() //  [R1]
         { []
         }
     {offset
       cgixY: // global
           _sgh9V::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cgixZ; else goto cgiy0;
       cgiy0: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cgiy2; else goto cgiy1;
       cgiy2: // global
           HpAlloc = 104;
           goto cgixZ;
       cgixZ: // global
           R1 = _sgh9V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiy1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sgh9V::P64;
           _sgh9x::P64 = P64[_sgh9V::P64 + 16];
           _sgh9y::P64 = P64[_sgh9V::P64 + 24];
           _sgh9z::P64 = P64[_sgh9V::P64 + 32];
           _sgh9A::P64 = P64[_sgh9V::P64 + 40];
           _sgh9C::P64 = P64[_sgh9V::P64 + 48];
           I64[Hp - 96] = stg_ap_3_upd_info;
           P64[Hp - 80] = _sgh9z::P64;
           P64[Hp - 72] = _sgh9x::P64;
           P64[Hp - 64] = _sgh9A::P64;
           I64[Hp - 56] = sat_sgh9U_info;
           P64[Hp - 48] = _sgh9y::P64;
           P64[Hp - 40] = _sgh9A::P64;
           P64[Hp - 32] = _sgh9C::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = sat_sgh9E_info;
           P64[Hp] = _sgh9C::P64;
           R2 = _sgh9C::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 55;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sgh9V_info" {
     sat_sgh9V_info:
         const sat_sgh9V_entry;
         const 5;
         const 15;
 },
 Data.Functor.Compose.$w$cgmapMo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cgiy3: // global
           _sgh9A::P64 = R5;
           _sgh9z::P64 = R4;
           _sgh9y::P64 = R3;
           _sgh9x::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto cgiy4; else goto cgiy5;
       cgiy5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgiy7; else goto cgiy6;
       cgiy7: // global
           HpAlloc = 24;
           goto cgiy4;
       cgiy4: // global
           R5 = _sgh9A::P64;
           R4 = _sgh9z::P64;
           R3 = _sgh9y::P64;
           R2 = _sgh9x::P64;
           R1 = Data.Functor.Compose.$w$cgmapMo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiy6: // global
           I64[Hp - 16] = lvl8_sgh9B_info;
           P64[Hp] = _sgh9y::P64;
           I64[Sp - 48] = block_cgiwa_info;
           R2 = _sgh9y::P64;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 32] = _sgh9x::P64;
           P64[Sp - 24] = _sgh9y::P64;
           P64[Sp - 16] = _sgh9z::P64;
           P64[Sp - 8] = _sgh9A::P64;
           Sp = Sp - 48;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$w$cgmapMo_info" {
     Data.Functor.Compose.$w$cgmapMo_info:
         const Data.Functor.Compose.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cgiwa() //  [R1]
         { []
         }
     {offset
       cgiwa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cgiya; else goto cgiy9;
       cgiya: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cgiy9: // global
           I64[Hp - 72] = sat_sgha1_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = R1;
           I64[Hp - 48] = sat_sgh9V_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 48;
           P64[Sp + 40] = Hp - 71;
           Sp = Sp + 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiwa_info" {
     block_cgiwa_info:
         const _cgiwa;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.607484326 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_$cgmapMo_closure" {
     Data.Functor.Compose.$fDataCompose_$cgmapMo_closure:
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_info;
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMo_slow() //  [R1]
         { []
         }
     {offset
       cgiAb: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Compose.$fDataCompose_$cgmapMo_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 40, res: 0, upd: 8;
     }
 },
 Data.Functor.Compose.$fDataCompose_$cgmapMo_entry() //  []
         { []
         }
     {offset
       cgiAf: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           Sp = Sp + 32;
           call Data.Functor.Compose.$w$cgmapMo_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_$cgmapMo_info" {
     Data.Functor.Compose.$fDataCompose_$cgmapMo_info:
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const Data.Functor.Compose.$fDataCompose_$cgmapMo_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.612282197 UTC

[section ""data" . lvl4_rgdQh_closure" {
     lvl4_rgdQh_closure:
         const lvl4_rgdQh_info;
         const 0;
 },
 lvl4_rgdQh_entry() //  []
         { []
         }
     {offset
       cgiAs: // global
           R1 = Data.Functor.Compose.$cCompose_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl4_rgdQh_info" {
     lvl4_rgdQh_info:
         const lvl4_rgdQh_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sghf8_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.61577328 UTC

[section ""data" . lvl5_rgdQi_closure" {
     lvl5_rgdQi_closure:
         const lvl5_rgdQi_info;
         const 0;
 },
 lvl5_rgdQi_entry() //  []
         { []
         }
     {offset
       cgiAE: // global
           R1 = Data.Functor.Compose.$tCompose_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rgdQi_info" {
     lvl5_rgdQi_info:
         const lvl5_rgdQi_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sghf8_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.619553582 UTC

[section ""data" . lvl6_rgdQj_closure" {
     lvl6_rgdQj_closure:
         const lvl6_rgdQj_info;
 },
 lvl6_rgdQj_entry() //  []
         { []
         }
     {offset
       cgiAQ: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_rgdQj_info" {
     lvl6_rgdQj_info:
         const lvl6_rgdQj_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.623085849 UTC

[section ""data" . lvl7_rgdQk_closure" {
     lvl7_rgdQk_closure:
         const lvl7_rgdQk_info;
 },
 lvl7_rgdQk_entry() //  []
         { []
         }
     {offset
       cgiB3: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rgdQk_info" {
     lvl7_rgdQk_info:
         const lvl7_rgdQk_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.633820904 UTC

[section ""data" . Data.Functor.Compose.$fDataCompose_closure" {
     Data.Functor.Compose.$fDataCompose_closure:
         const Data.Functor.Compose.$fDataCompose_info;
         const 0;
 },
 sat_sghb9_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiBl: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapMo_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghb9_info" {
     sat_sghb9_info:
         const sat_sghb9_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sghb5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiBt: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapMp_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghb5_info" {
     sat_sghb5_info:
         const sat_sghb5_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sghb1_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiBB: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Compose.$w$cgmapM_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghb1_info" {
     sat_sghb1_info:
         const sat_sghb1_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sghaX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiBM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cgiBN; else goto cgiBO;
       cgiBN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiBO: // global
           I64[Sp - 32] = block_cgiBJ_info;
           _sgham::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 24] = _sgham::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ugiBW; else goto cgiBK;
       ugiBW: // global
           call _cgiBJ(R1) args: 0, res: 0, upd: 0;
       cgiBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghaX_info" {
     sat_sghaX_info:
         const sat_sghaX_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const Sghf8_srt+496;
 },
 _cgiBJ() //  [R1]
         { []
         }
     {offset
       cgiBJ: // global
           if (I64[R1 + 7] == 0) goto cgiBV; else goto cgiBU;
       cgiBV: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiBU: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cgiBJ_info" {
     block_cgiBJ_info:
         const _cgiBJ;
         const 3;
         const 4294967326;
         const Sghf8_srt+496;
 },
 sat_sghaQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgiC4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cgiC8; else goto cgiC7;
       cgiC8: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiC7: // global
           _sgham::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _sgham::P64;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghaQ_info" {
     sat_sghaQ_info:
         const sat_sghaQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sghaM_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgiCf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgiCj; else goto cgiCi;
       cgiCj: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiCi: // global
           _sgham::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sgham::P64;
           P64[Hp] = R5;
           R3 = R3;
           _sghaH::P64 = R2;
           R2 = Hp - 32;
           R1 = _sghaH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghaM_info" {
     sat_sghaM_info:
         const sat_sghaM_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sghaG_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cgiCq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cgiCu; else goto cgiCt;
       cgiCu: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiCt: // global
           _sgham::P64 = P64[R1 + 4];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _sgham::P64;
           P64[Hp] = R5;
           _sghaC::P64 = R3;
           R3 = Hp - 32;
           _sghaB::P64 = R2;
           R2 = _sghaC::P64;
           R1 = _sghaB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghaG_info" {
     sat_sghaG_info:
         const sat_sghaG_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sghaA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cgiCA: // global
           R3 = R3;
           _sghay::P64 = R2;
           R2 = P64[R1 + 6];
           R1 = _sghay::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghaA_info" {
     sat_sghaA_info:
         const sat_sghaA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sghaw_entry() //  [R1]
         { []
         }
     {offset
       cgiCM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiCN; else goto cgiCO;
       cgiCN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiCO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Compose.$fDataCompose2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sghaw_info" {
     sat_sghaw_info:
         const sat_sghaw_entry;
         const 1;
         const 16;
 },
 sat_sghax_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiCP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgiCT; else goto cgiCS;
       cgiCT: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiCS: // global
           _sgham::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sghaw_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           _sghat::P64 = R2;
           R2 = _sgham::P64;
           R1 = _sghat::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghax_info" {
     sat_sghax_info:
         const sat_sghax_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sghar_entry() //  [R1]
         { []
         }
     {offset
       cgiD3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiD4; else goto cgiD5;
       cgiD4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiD5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Compose.$fDataCompose2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sghar_info" {
     sat_sghar_info:
         const sat_sghar_entry;
         const 1;
         const 16;
 },
 sat_sghas_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cgiD6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cgiDa; else goto cgiD9;
       cgiDa: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cgiD9: // global
           _sgham::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_sghar_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           _sghao::P64 = R2;
           R2 = _sgham::P64;
           R1 = _sghao::P64;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sghas_info" {
     sat_sghas_info:
         const sat_sghas_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sghan_entry() //  [R1]
         { []
         }
     {offset
       cgiDf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cgiDg; else goto cgiDh;
       cgiDg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cgiDh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Compose.$w$cp1Data_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sghan_info" {
     sat_sghan_info:
         const sat_sghan_entry;
         const 5;
         const 4294967311;
         const Sghf8_srt+472;
 },
 Data.Functor.Compose.$fDataCompose_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cgiDj: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cgiDn; else goto cgiDm;
       cgiDn: // global
           HpAlloc = 344;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Compose.$fDataCompose_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cgiDm: // global
           I64[Hp - 336] = sat_sghb9_info;
           _sgham::P64 = P64[Sp];
           P64[Hp - 328] = _sgham::P64;
           I64[Hp - 320] = sat_sghb5_info;
           P64[Hp - 312] = _sgham::P64;
           I64[Hp - 304] = sat_sghb1_info;
           P64[Hp - 296] = _sgham::P64;
           I64[Hp - 288] = sat_sghaX_info;
           P64[Hp - 280] = _sgham::P64;
           I64[Hp - 272] = sat_sghaQ_info;
           P64[Hp - 264] = _sgham::P64;
           I64[Hp - 256] = sat_sghaM_info;
           P64[Hp - 248] = _sgham::P64;
           I64[Hp - 240] = sat_sghaG_info;
           P64[Hp - 232] = _sgham::P64;
           I64[Hp - 224] = sat_sghaA_info;
           P64[Hp - 216] = _sgham::P64;
           I64[Hp - 208] = sat_sghax_info;
           P64[Hp - 200] = _sgham::P64;
           I64[Hp - 192] = sat_sghas_info;
           P64[Hp - 184] = _sgham::P64;
           I64[Hp - 176] = sat_sghan_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           P64[Hp - 136] = R5;
           P64[Hp - 128] = R6;
           I64[Hp - 120] = Data.Data.C:Data_con_info;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 189;
           P64[Hp - 96] = Hp - 205;
           P64[Hp - 88] = lvl4_rgdQh_closure+1;
           P64[Hp - 80] = lvl5_rgdQi_closure+1;
           P64[Hp - 72] = lvl6_rgdQj_closure+2;
           P64[Hp - 64] = lvl7_rgdQk_closure+2;
           P64[Hp - 56] = Hp - 222;
           P64[Hp - 48] = Hp - 236;
           P64[Hp - 40] = Hp - 252;
           P64[Hp - 32] = Hp - 270;
           P64[Hp - 24] = Hp - 285;
           P64[Hp - 16] = Hp - 301;
           P64[Hp - 8] = Hp - 317;
           P64[Hp] = Hp - 333;
           R1 = Hp - 119;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Compose.$fDataCompose_info" {
     Data.Functor.Compose.$fDataCompose_info:
         const Data.Functor.Compose.$fDataCompose_entry;
         const 0;
         const 519691042830;
         const 25769803802;
         const Sghf8_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:12:12.6629033 UTC

[section ""relreadonly" . Sghf8_srt" {
     Sghf8_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Compose.$fRead1Compose2_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadPrec_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadListPrec_closure;
         const Data.Functor.Compose.$fRead1Compose_$cliftReadList_closure;
         const Data.Functor.Compose.$fRead1Compose_closure;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Functor.Compose.$w$cliftShowsPrec_closure;
         const Data.Functor.Compose.$fShow1Compose_$cliftShowsPrec_closure;
         const Data.Functor.Compose.$fShow1Compose_$cliftShowList_closure;
         const Data.Functor.Compose.$fShow1Compose_closure;
         const Data.Functor.Compose.$fReadCompose_$creadPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadsPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadListPrec_closure;
         const Data.Functor.Compose.$fReadCompose_$creadList_closure;
         const Data.Functor.Compose.$fReadCompose_closure;
         const Data.Functor.Compose.$fShowCompose_$cshowsPrec_closure;
         const Data.Functor.Compose.$fShowCompose_$cshow_closure;
         const Data.Functor.Compose.$fShowCompose_$cshowList_closure;
         const Data.Functor.Compose.$fShowCompose_closure;
         const Data.Semigroup.Internal.$fMonoidSum_closure;
         const Data.Functor.Compose.$fFoldableCompose_$csum_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Utils.$fMonoidMin_closure;
         const Data.Functor.Compose.$fFoldableCompose2_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cminimum_closure;
         const Data.Functor.Utils.$fMonoidMax_closure;
         const Data.Functor.Compose.$fFoldableCompose3_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cmaximum_closure;
         const Data.Semigroup.Internal.$fMonoidAny_closure;
         const Data.Functor.Compose.$fFoldableCompose_$celem_closure;
         const Data.Semigroup.Internal.$fMonoidEndo_closure;
         const Data.Functor.Compose.$fFoldableCompose7_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl1_closure;
         const Data.Functor.Compose.$fFoldableCompose6_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr'_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldl'_closure;
         const Data.Functor.Compose.$fFoldableCompose_$clength_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cfoldr1_closure;
         const Data.Functor.Compose.$fFoldableCompose8_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cnull_closure;
         const Data.Semigroup.Internal.$fMonoidProduct_closure;
         const Data.Functor.Compose.$fFoldableCompose_$cproduct_closure;
         const Data.Functor.Compose.$fFoldableCompose_$ctoList_closure;
         const Data.Functor.Compose.$fFoldableCompose_closure;
         const Data.Functor.Compose.$fTraversableCompose_$cp2Traversable_closure;
         const Data.Functor.Compose.$fTraversableCompose_closure;
         const GHC.List.badHead_closure;
         const go61_rgdPX_closure;
         const Data.Functor.Compose.$fDataCompose6_closure;
         const Data.Data.mkConstr1_closure;
         const Data.Functor.Compose.$fDataCompose5_closure;
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Functor.Compose.$w$cp1Data_closure;
         const Data.Functor.Compose.$cCompose_closure;
         const Data.Functor.Compose.$tCompose_closure;
         const Data.Maybe.fromJust1_closure;
         const Data.Functor.Compose.$fDataCompose_closure;
         const lvl4_rgdQh_closure;
         const lvl5_rgdQi_closure;
 }]

