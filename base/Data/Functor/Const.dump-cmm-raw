
==================== Raw Cmm ====================
2018-03-16 16:02:20.837597524 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:20.838810274 UTC

[section ""data" . Data.Functor.Const.$fReadConst3_closure" {
     Data.Functor.Const.$fReadConst3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.840858636 UTC

[section ""cstring" . Data.Functor.Const.$fReadConst5_bytes" {
     Data.Functor.Const.$fReadConst5_bytes:
         I8[] [67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.843561985 UTC

[section ""data" . Data.Functor.Const.$fReadConst4_closure" {
     Data.Functor.Const.$fReadConst4_closure:
         const Data.Functor.Const.$fReadConst4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fReadConst4_entry() //  [R1]
         { []
         }
     {offset
       c76ar: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76as; else goto c76at;
       c76as: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76at: // global
           (_c76ao::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76ao::I64 == 0) goto c76aq; else goto c76ap;
       c76aq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76ap: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76ao::I64;
           R2 = Data.Functor.Const.$fReadConst5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst4_info" {
     Data.Functor.Const.$fReadConst4_info:
         const Data.Functor.Const.$fReadConst4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.853108039 UTC

[section ""data" . Data.Functor.Const.$w$creadsPrec_closure" {
     Data.Functor.Const.$w$creadsPrec_closure:
         const Data.Functor.Const.$w$creadsPrec_info;
         const 0;
 },
 go1_s750f_entry() //  [R1, R2]
         { []
         }
     {offset
       c76bd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76be; else goto c76bf;
       c76be: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76bf: // global
           I64[Sp - 24] = block_c76b6_info;
           _s750f::P64 = R1;
           _s750e::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s750e::P64;
           P64[Sp - 8] = _s750f::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u76bx; else goto c76b7;
       u76bx: // global
           call _c76b6(R1) args: 0, res: 0, upd: 0;
       c76b7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s750f_info" {
     go1_s750f_info:
         const go1_s750f_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c76b6() //  [R1]
         { []
         }
     {offset
       c76b6: // global
           if (R1 & 7 == 1) goto c76ba; else goto c76bb;
       c76ba: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c76bb: // global
           I64[Sp] = block_c76bl_info;
           _s750j::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s750j::P64;
           if (R1 & 7 != 0) goto u76bw; else goto c76bm;
       u76bw: // global
           call _c76bl(R1) args: 0, res: 0, upd: 0;
       c76bm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c76b6_info" {
     block_c76b6_info:
         const _c76b6;
         const 2;
         const 30;
 },
 _c76bl() //  [R1]
         { []
         }
     {offset
       c76bl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c76bv; else goto c76bu;
       c76bv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c76bu: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76bl_info" {
     block_c76bl_info:
         const _c76bl;
         const 2;
         const 30;
 },
 go_s7505_entry() //  [R1, R2]
         { []
         }
     {offset
       c76bC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c76bD; else goto u76bX;
       c76bD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u76bX: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c76aH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s7505_info" {
     go_s7505_info:
         const go_s7505_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S757l_srt;
 },
 _c76aH() //  []
         { []
         }
     {offset
       c76aH: // global
           _s7502::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_c76aK_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7502::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u76bZ; else goto c76aL;
       u76bZ: // global
           call _c76aK(R1) args: 0, res: 0, upd: 0;
       c76aL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c76aK() //  [R1]
         { []
         }
     {offset
       c76aK: // global
           if (R1 & 7 == 1) goto c76bz; else goto c76bA;
       c76bz: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c76bA: // global
           I64[Sp - 8] = block_c76aQ_info;
           _s7509::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7509::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u76c0; else goto c76aR;
       u76c0: // global
           call _c76aQ(R1) args: 0, res: 0, upd: 0;
       c76aR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c76aK_info" {
     block_c76aK_info:
         const _c76aK;
         const 2;
         const 4294967326;
         const S757l_srt;
 },
 _c76aQ() //  [R1]
         { []
         }
     {offset
       c76aQ: // global
           I64[Sp - 8] = block_c76aV_info;
           R3 = Data.Functor.Const.$fReadConst4_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c76aQ_info" {
     block_c76aQ_info:
         const _c76aQ;
         const 3;
         const 4294967326;
         const S757l_srt;
 },
 _c76aV() //  [R1]
         { []
         }
     {offset
       c76aV: // global
           _s7509::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c76bM; else goto c76bO;
       c76bM: // global
           P64[Sp + 32] = _s7509::P64;
           Sp = Sp + 24;
           call _c76aH() args: 0, res: 0, upd: 0;
       c76bO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c76bR; else goto c76bQ;
       c76bR: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c76bQ: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _s7509::P64;
           I64[Hp - 8] = go1_s750f_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 24] = block_c76bN_info;
           R2 = P64[Sp + 32];
           I64[Sp] = stg_ap_pp_info;
           _s750c::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp + 16] = _s750c::P64;
           P64[Sp + 32] = Hp - 7;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c76aV_info" {
     block_c76aV_info:
         const _c76aV;
         const 4;
         const 4294967326;
         const S757l_srt;
 },
 _c76bN() //  [R1]
         { []
         }
     {offset
       c76bN: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s750f_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76bN_info" {
     block_c76bN_info:
         const _c76bN;
         const 1;
         const 30;
 },
 sat_s750u_entry() //  [R1, R2]
         { []
         }
     {offset
       c76ca: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76cb; else goto c76cc;
       c76cb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76cc: // global
           I64[Sp - 16] = block_c76c8_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750u_info" {
     sat_s750u_info:
         const sat_s750u_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S757l_srt;
 },
 _c76c8() //  [R1]
         { []
         }
     {offset
       c76c8: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s7505_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76c8_info" {
     block_c76c8_info:
         const _c76c8;
         const 1;
         const 4294967326;
         const S757l_srt;
 },
 Data.Functor.Const.$w$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76ci: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c76cm; else goto c76cl;
       c76cm: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$w$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76cl: // global
           I64[Hp - 24] = go_s7505_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s750u_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _s750r::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _s750r::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$creadsPrec_info" {
     Data.Functor.Const.$w$creadsPrec_info:
         const Data.Functor.Const.$w$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901909;
         const S757l_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.878396397 UTC

[section ""data" . Data.Functor.Const.$fReadConst_$creadsPrec_closure" {
     Data.Functor.Const.$fReadConst_$creadsPrec_closure:
         const Data.Functor.Const.$fReadConst_$creadsPrec_info;
         const 0;
 },
 Data.Functor.Const.$fReadConst_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76dx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76dy; else goto c76dz;
       c76dy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76dz: // global
           I64[Sp - 24] = block_c76du_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u76dD; else goto c76dv;
       u76dD: // global
           call _c76du(R1) args: 0, res: 0, upd: 0;
       c76dv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_$creadsPrec_info" {
     Data.Functor.Const.$fReadConst_$creadsPrec_info:
         const Data.Functor.Const.$fReadConst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S757l_srt+24;
 },
 _c76du() //  [R1]
         { []
         }
     {offset
       c76du: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Const.$w$creadsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76du_info" {
     block_c76du_info:
         const _c76du;
         const 2;
         const 4294967326;
         const S757l_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.88599546 UTC

[section ""data" . Data.Functor.Const.$fReadConst2_closure" {
     Data.Functor.Const.$fReadConst2_closure:
         const Data.Functor.Const.$fReadConst2_info;
         const 0;
 },
 sat_s750D_entry() //  [R1, R2]
         { []
         }
     {offset
       c76dW: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$fReadConst_$creadsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750D_info" {
     sat_s750D_info:
         const sat_s750D_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S757l_srt+32;
 },
 Data.Functor.Const.$fReadConst2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76e2: // global
           _s750C::P64 = R4;
           _s750B::P64 = R3;
           _s750A::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c76e3; else goto c76e4;
       c76e4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76e6; else goto c76e5;
       c76e6: // global
           HpAlloc = 24;
           goto c76e3;
       c76e3: // global
           R4 = _s750C::P64;
           R3 = _s750B::P64;
           R2 = _s750A::P64;
           R1 = Data.Functor.Const.$fReadConst2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76e5: // global
           I64[Hp - 16] = sat_s750D_info;
           P64[Hp - 8] = _s750A::P64;
           P64[Hp] = _s750B::P64;
           I64[Sp - 8] = block_c76dZ_info;
           R3 = _s750C::P64;
           R2 = Hp - 15;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst2_info" {
     Data.Functor.Const.$fReadConst2_info:
         const Data.Functor.Const.$fReadConst2_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S757l_srt+32;
 },
 _c76dZ() //  [R1]
         { []
         }
     {offset
       c76dZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c76e9; else goto c76e8;
       c76e9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c76e8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76dZ_info" {
     block_c76dZ_info:
         const _c76dZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.894394095 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst5_closure" {
     Data.Functor.Const.$fFoldableConst5_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.897684582 UTC

[section ""data" . Data.Functor.Const.$fReadConst_$creadList_closure" {
     Data.Functor.Const.$fReadConst_$creadList_closure:
         const Data.Functor.Const.$fReadConst_$creadList_info;
         const 0;
 },
 sat_s750H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76eA: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750H_info" {
     sat_s750H_info:
         const sat_s750H_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+40;
 },
 sat_s750I_entry() //  [R1]
         { []
         }
     {offset
       c76eD: // global
           _s750I::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c76eE; else goto c76eF;
       c76eF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c76eH; else goto c76eG;
       c76eH: // global
           HpAlloc = 16;
           goto c76eE;
       c76eE: // global
           R1 = _s750I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76eG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s750I::P64;
           _s750G::P64 = P64[_s750I::P64 + 16];
           I64[Hp - 8] = sat_s750H_info;
           P64[Hp] = _s750G::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fFoldableConst5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s750I_info" {
     sat_s750I_info:
         const sat_s750I_entry;
         const 1;
         const 12884901904;
         const S757l_srt+40;
 },
 Data.Functor.Const.$fReadConst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c76eI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76eM; else goto c76eL;
       c76eM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76eL: // global
           I64[Hp - 16] = sat_s750I_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_$creadList_info" {
     Data.Functor.Const.$fReadConst_$creadList_info:
         const Data.Functor.Const.$fReadConst_$creadList_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S757l_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.907075299 UTC

[section ""data" . Data.Functor.Const.$w$creadListPrec_closure" {
     Data.Functor.Const.$w$creadListPrec_closure:
         const Data.Functor.Const.$w$creadListPrec_info;
         const 0;
 },
 sat_s750L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76fb: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750L_info" {
     sat_s750L_info:
         const sat_s750L_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+40;
 },
 w1_s750K_entry() //  [R1]
         { []
         }
     {offset
       c76fe: // global
           _s750K::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c76ff; else goto c76fg;
       c76fg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c76fi; else goto c76fh;
       c76fi: // global
           HpAlloc = 16;
           goto c76ff;
       c76ff: // global
           R1 = _s750K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76fh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s750K::P64;
           _s750J::P64 = P64[_s750K::P64 + 16];
           I64[Hp - 8] = sat_s750L_info;
           P64[Hp] = _s750J::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fFoldableConst5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s750K_info" {
     w1_s750K_info:
         const w1_s750K_entry;
         const 1;
         const 12884901904;
         const S757l_srt+40;
 },
 w2_s750M_entry() //  [R1, R2]
         { []
         }
     {offset
       c76fo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_s750M_info" {
     w2_s750M_info:
         const w2_s750M_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s750Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c76fz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c76fA; else goto c76fB;
       c76fA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76fB: // global
           I64[Sp - 8] = block_c76fw_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750Q_info" {
     sat_s750Q_info:
         const sat_s750Q_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c76fw() //  [R1]
         { []
         }
     {offset
       c76fw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c76fE; else goto c76fD;
       c76fE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c76fD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76fw_info" {
     block_c76fw_info:
         const _c76fw;
         const 0;
         const 30;
 },
 Data.Functor.Const.$w$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c76fF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c76fJ; else goto c76fI;
       c76fJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Const.$w$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76fI: // global
           I64[Hp - 48] = w1_s750K_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w2_s750M_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s750Q_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$creadListPrec_info" {
     Data.Functor.Const.$w$creadListPrec_info:
         const Data.Functor.Const.$w$creadListPrec_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const S757l_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.919815373 UTC

[section ""data" . Data.Functor.Const.$fReadConst1_closure" {
     Data.Functor.Const.$fReadConst1_closure:
         const Data.Functor.Const.$fReadConst1_info;
         const 0;
 },
 Data.Functor.Const.$fReadConst1_entry() //  [R2]
         { []
         }
     {offset
       c76gd: // global
           R2 = R2;
           call Data.Functor.Const.$w$creadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst1_info" {
     Data.Functor.Const.$fReadConst1_info:
         const Data.Functor.Const.$fReadConst1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S757l_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.92565463 UTC

[section ""data" . Data.Functor.Const.$fReadConst_closure" {
     Data.Functor.Const.$fReadConst_closure:
         const Data.Functor.Const.$fReadConst_info;
         const 0;
 },
 lvl_s750U_entry() //  [R1]
         { []
         }
     {offset
       c76gs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76gt; else goto c76gu;
       c76gt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76gu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$w$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s750U_info" {
     lvl_s750U_info:
         const lvl_s750U_entry;
         const 1;
         const 4294967312;
         const S757l_srt+64;
 },
 sat_s750Z_entry() //  [R1]
         { []
         }
     {offset
       c76gA: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750Z_info" {
     sat_s750Z_info:
         const sat_s750Z_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s750X_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76gI: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750X_info" {
     sat_s750X_info:
         const sat_s750X_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+40;
 },
 sat_s750W_entry() //  [R1]
         { []
         }
     {offset
       c76gP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76gQ; else goto c76gR;
       c76gQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76gR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fReadConst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s750W_info" {
     sat_s750W_info:
         const sat_s750W_entry;
         const 1;
         const 4294967312;
         const S757l_srt+56;
 },
 sat_s750V_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76gX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst_$creadsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s750V_info" {
     sat_s750V_info:
         const sat_s750V_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+32;
 },
 Data.Functor.Const.$fReadConst_entry() //  [R2]
         { []
         }
     {offset
       c76h1: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c76h5; else goto c76h4;
       c76h5: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76h4: // global
           I64[Hp - 128] = lvl_s750U_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s750Z_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_s750X_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s750W_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s750V_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_info" {
     Data.Functor.Const.$fReadConst_info:
         const Data.Functor.Const.$fReadConst_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S757l_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.936794552 UTC

[section ""cstring" . Data.Functor.Const.$fShowConst2_bytes" {
     Data.Functor.Const.$fShowConst2_bytes:
         I8[] [67,111,110,115,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.939156793 UTC

[section ""data" . Data.Functor.Const.$fShowConst1_closure" {
     Data.Functor.Const.$fShowConst1_closure:
         const Data.Functor.Const.$fShowConst1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fShowConst1_entry() //  [R1]
         { []
         }
     {offset
       c76hE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76hF; else goto c76hG;
       c76hF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76hG: // global
           (_c76hB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76hB::I64 == 0) goto c76hD; else goto c76hC;
       c76hD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76hC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76hB::I64;
           R2 = Data.Functor.Const.$fShowConst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst1_info" {
     Data.Functor.Const.$fShowConst1_info:
         const Data.Functor.Const.$fShowConst1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.946277094 UTC

[section ""data" . Data.Functor.Const.$w$cshowsPrec_closure" {
     Data.Functor.Const.$w$cshowsPrec_closure:
         const Data.Functor.Const.$w$cshowsPrec_info;
         const 0;
 },
 g_s7513_entry() //  [R1]
         { []
         }
     {offset
       c76hW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c76hX; else goto c76hY;
       c76hX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76hY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s7513_info" {
     g_s7513_info:
         const g_s7513_entry;
         const 2;
         const 18;
 },
 sat_s7516_entry() //  [R1]
         { []
         }
     {offset
       c76ib: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7516_info" {
     sat_s7516_info:
         const sat_s7516_entry;
         const 2;
         const 18;
 },
 sat_s7517_entry() //  [R1, R2]
         { []
         }
     {offset
       c76ie: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c76ii; else goto c76ih;
       c76ii: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76ih: // global
           _s7513::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s7516_info;
           P64[Hp - 8] = _s7513::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7517_info" {
     sat_s7517_info:
         const sat_s7517_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S757l_srt+80;
 },
 sat_s751a_entry() //  [R1]
         { []
         }
     {offset
       c76iy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76iC; else goto c76iB;
       c76iC: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76iB: // global
           _s7513::P64 = P64[R1 + 16];
           _s7518::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s7518::P64;
           R2 = Hp - 14;
           R1 = _s7513::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751a_info" {
     sat_s751a_info:
         const sat_s751a_entry;
         const 2;
         const 18;
 },
 sat_s751b_entry() //  [R1]
         { []
         }
     {offset
       c76iD: // global
           _s751b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c76iE; else goto c76iF;
       c76iF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c76iH; else goto c76iG;
       c76iH: // global
           HpAlloc = 32;
           goto c76iE;
       c76iE: // global
           R1 = _s751b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76iG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s751b::P64;
           _s7513::P64 = P64[_s751b::P64 + 16];
           _s7518::P64 = P64[_s751b::P64 + 24];
           I64[Hp - 24] = sat_s751a_info;
           P64[Hp - 8] = _s7513::P64;
           P64[Hp] = _s7518::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s751b_info" {
     sat_s751b_info:
         const sat_s751b_entry;
         const 2;
         const 4294967314;
         const S757l_srt+80;
 },
 sat_s751c_entry() //  [R1, R2]
         { []
         }
     {offset
       c76iJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c76iN; else goto c76iM;
       c76iN: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76iM: // global
           _s7513::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s751b_info;
           P64[Hp - 32] = _s7513::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751c_info" {
     sat_s751c_info:
         const sat_s751c_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S757l_srt+80;
 },
 Data.Functor.Const.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76iR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c76iV; else goto c76iU;
       c76iV: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76iU: // global
           I64[Hp - 40] = g_s7513_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c76hS::P64 = Hp - 40;
           if (%MO_S_Le_W64(R3, 10)) goto c76iP; else goto c76iQ;
       c76iP: // global
           I64[Hp - 8] = sat_s7517_info;
           P64[Hp] = _c76hS::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c76iQ: // global
           I64[Hp - 8] = sat_s751c_info;
           P64[Hp] = _c76hS::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$cshowsPrec_info" {
     Data.Functor.Const.$w$cshowsPrec_info:
         const Data.Functor.Const.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S757l_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.962166434 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshowsPrec_closure" {
     Data.Functor.Const.$fShowConst_$cshowsPrec_closure:
         const Data.Functor.Const.$fShowConst_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Const.$fShowConst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76jw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76jx; else goto c76jy;
       c76jx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76jy: // global
           I64[Sp - 24] = block_c76jt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u76jC; else goto c76ju;
       u76jC: // global
           call _c76jt(R1) args: 0, res: 0, upd: 0;
       c76ju: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshowsPrec_info" {
     Data.Functor.Const.$fShowConst_$cshowsPrec_info:
         const Data.Functor.Const.$fShowConst_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S757l_srt+88;
 },
 _c76jt() //  [R1]
         { []
         }
     {offset
       c76jt: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Const.$w$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c76jt_info" {
     block_c76jt_info:
         const _c76jt;
         const 2;
         const 4294967326;
         const S757l_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.968254573 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshow_closure" {
     Data.Functor.Const.$fShowConst_$cshow_closure:
         const Data.Functor.Const.$fShowConst_$cshow_info;
         const 0;
 },
 sat_s751k_entry() //  [R1]
         { []
         }
     {offset
       c76jU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c76jV; else goto c76jW;
       c76jV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76jW: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751k_info" {
     sat_s751k_info:
         const sat_s751k_entry;
         const 2;
         const 18;
 },
 Data.Functor.Const.$fShowConst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c76jX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c76k1; else goto c76k0;
       c76k1: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c76k0: // global
           I64[Hp - 24] = sat_s751k_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshow_info" {
     Data.Functor.Const.$fShowConst_$cshow_info:
         const Data.Functor.Const.$fShowConst_$cshow_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S757l_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.976925189 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshowList_closure" {
     Data.Functor.Const.$fShowConst_$cshowList_closure:
         const Data.Functor.Const.$fShowConst_$cshowList_info;
         const 0;
 },
 sat_s751p_entry() //  [R1, R2]
         { []
         }
     {offset
       c76kk: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$w$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751p_info" {
     sat_s751p_info:
         const sat_s751p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S757l_srt+88;
 },
 Data.Functor.Const.$fShowConst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c76kn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c76kr; else goto c76kq;
       c76kr: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76kq: // global
           I64[Hp - 8] = sat_s751p_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshowList_info" {
     Data.Functor.Const.$fShowConst_$cshowList_info:
         const Data.Functor.Const.$fShowConst_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S757l_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.985583053 UTC

[section ""data" . Data.Functor.Const.$fShowConst_closure" {
     Data.Functor.Const.$fShowConst_closure:
         const Data.Functor.Const.$fShowConst_info;
         const 0;
 },
 sat_s751t_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76kI: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fShowConst_$cshowList_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751t_info" {
     sat_s751t_info:
         const sat_s751t_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+112;
 },
 sat_s751s_entry() //  [R1, R2]
         { []
         }
     {offset
       c76kQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$fShowConst_$cshow_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751s_info" {
     sat_s751s_info:
         const sat_s751s_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S757l_srt+104;
 },
 sat_s751r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76kY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fShowConst_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s751r_info" {
     sat_s751r_info:
         const sat_s751r_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S757l_srt+96;
 },
 Data.Functor.Const.$fShowConst_entry() //  [R2]
         { []
         }
     {offset
       c76l2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c76l6; else goto c76l5;
       c76l6: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76l5: // global
           I64[Hp - 72] = sat_s751t_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s751s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s751r_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_info" {
     Data.Functor.Const.$fShowConst_info:
         const Data.Functor.Const.$fShowConst_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S757l_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.994678644 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldMap_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldMap_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c76ls: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldMap_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldMap_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:20.999726983 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfold_closure" {
     Data.Functor.Const.$fFoldableConst_$cfold_closure:
         const Data.Functor.Const.$fFoldableConst_$cfold_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c76lD: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfold_info" {
     Data.Functor.Const.$fFoldableConst_$cfold_info:
         const Data.Functor.Const.$fFoldableConst_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.003352741 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$csum_closure" {
     Data.Functor.Const.$fFoldableConst_$csum_closure:
         const Data.Functor.Const.$fFoldableConst_$csum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$csum_entry() //  [R2]
         { []
         }
     {offset
       c76lO: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$csum_info" {
     Data.Functor.Const.$fFoldableConst_$csum_info:
         const Data.Functor.Const.$fFoldableConst_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S757l_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.006722862 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst2_bytes" {
     Data.Functor.Const.$fFoldableConst2_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.008949733 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst1_closure" {
     Data.Functor.Const.$fFoldableConst1_closure:
         const Data.Functor.Const.$fFoldableConst1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst1_entry() //  [R1]
         { []
         }
     {offset
       c76m2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76m3; else goto c76m4;
       c76m3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76m4: // global
           (_c76lZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76lZ::I64 == 0) goto c76m1; else goto c76m0;
       c76m1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76m0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76lZ::I64;
           R2 = Data.Functor.Const.$fFoldableConst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst1_info" {
     Data.Functor.Const.$fFoldableConst1_info:
         const Data.Functor.Const.$fFoldableConst1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.01380411 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cminimum_closure" {
     Data.Functor.Const.$fFoldableConst_$cminimum_closure:
         const Data.Functor.Const.$fFoldableConst_$cminimum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cminimum_entry() //  []
         { []
         }
     {offset
       c76mg: // global
           R2 = Data.Functor.Const.$fFoldableConst1_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cminimum_info" {
     Data.Functor.Const.$fFoldableConst_$cminimum_info:
         const Data.Functor.Const.$fFoldableConst_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S757l_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.017286991 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst4_bytes" {
     Data.Functor.Const.$fFoldableConst4_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.019796639 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst3_closure" {
     Data.Functor.Const.$fFoldableConst3_closure:
         const Data.Functor.Const.$fFoldableConst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst3_entry() //  [R1]
         { []
         }
     {offset
       c76mu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76mv; else goto c76mw;
       c76mv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76mw: // global
           (_c76mr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76mr::I64 == 0) goto c76mt; else goto c76ms;
       c76mt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76ms: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76mr::I64;
           R2 = Data.Functor.Const.$fFoldableConst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst3_info" {
     Data.Functor.Const.$fFoldableConst3_info:
         const Data.Functor.Const.$fFoldableConst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.023995317 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cmaximum_closure" {
     Data.Functor.Const.$fFoldableConst_$cmaximum_closure:
         const Data.Functor.Const.$fFoldableConst_$cmaximum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cmaximum_entry() //  []
         { []
         }
     {offset
       c76mI: // global
           R2 = Data.Functor.Const.$fFoldableConst3_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cmaximum_info" {
     Data.Functor.Const.$fFoldableConst_$cmaximum_info:
         const Data.Functor.Const.$fFoldableConst_$cmaximum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S757l_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.027520229 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$celem_closure" {
     Data.Functor.Const.$fFoldableConst_$celem_closure:
         const Data.Functor.Const.$fFoldableConst_$celem_info;
 },
 Data.Functor.Const.$fFoldableConst_$celem_entry() //  []
         { []
         }
     {offset
       c76mT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$celem_info" {
     Data.Functor.Const.$fFoldableConst_$celem_info:
         const Data.Functor.Const.$fFoldableConst_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.031141301 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldl_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldl_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldl_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c76n5: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldl_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldl_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.034571152 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst7_bytes" {
     Data.Functor.Const.$fFoldableConst7_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.036957773 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst6_closure" {
     Data.Functor.Const.$fFoldableConst6_closure:
         const Data.Functor.Const.$fFoldableConst6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst6_entry() //  [R1]
         { []
         }
     {offset
       c76nj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76nk; else goto c76nl;
       c76nk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76nl: // global
           (_c76ng::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76ng::I64 == 0) goto c76ni; else goto c76nh;
       c76ni: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76nh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76ng::I64;
           R2 = Data.Functor.Const.$fFoldableConst7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst6_info" {
     Data.Functor.Const.$fFoldableConst6_info:
         const Data.Functor.Const.$fFoldableConst6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.04194267 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldl1_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldl1_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c76nx: // global
           R2 = Data.Functor.Const.$fFoldableConst6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldl1_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldl1_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S757l_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.046418681 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldr'_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldr'_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c76nI: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldr'_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldr'_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.049973929 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$clength_closure" {
     Data.Functor.Const.$fFoldableConst_$clength_closure:
         const Data.Functor.Const.$fFoldableConst_$clength_info;
 },
 Data.Functor.Const.$fFoldableConst_$clength_entry() //  []
         { []
         }
     {offset
       c76nT: // global
           R1 = Data.Functor.Const.$fFoldableConst5_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$clength_info" {
     Data.Functor.Const.$fFoldableConst_$clength_info:
         const Data.Functor.Const.$fFoldableConst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.05333212 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst9_bytes" {
     Data.Functor.Const.$fFoldableConst9_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.055968577 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst8_closure" {
     Data.Functor.Const.$fFoldableConst8_closure:
         const Data.Functor.Const.$fFoldableConst8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst8_entry() //  [R1]
         { []
         }
     {offset
       c76o8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76o9; else goto c76oa;
       c76o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76oa: // global
           (_c76o5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c76o5::I64 == 0) goto c76o7; else goto c76o6;
       c76o7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c76o6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c76o5::I64;
           R2 = Data.Functor.Const.$fFoldableConst9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst8_info" {
     Data.Functor.Const.$fFoldableConst8_info:
         const Data.Functor.Const.$fFoldableConst8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.060093239 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldr1_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldr1_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c76om: // global
           R2 = Data.Functor.Const.$fFoldableConst8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldr1_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldr1_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S757l_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.063999382 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cnull_closure" {
     Data.Functor.Const.$fFoldableConst_$cnull_closure:
         const Data.Functor.Const.$fFoldableConst_$cnull_info;
 },
 Data.Functor.Const.$fFoldableConst_$cnull_entry() //  []
         { []
         }
     {offset
       c76ox: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cnull_info" {
     Data.Functor.Const.$fFoldableConst_$cnull_info:
         const Data.Functor.Const.$fFoldableConst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.067766604 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cproduct_closure" {
     Data.Functor.Const.$fFoldableConst_$cproduct_closure:
         const Data.Functor.Const.$fFoldableConst_$cproduct_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c76oJ: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cproduct_info" {
     Data.Functor.Const.$fFoldableConst_$cproduct_info:
         const Data.Functor.Const.$fFoldableConst_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S757l_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.071679519 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$ctoList_closure" {
     Data.Functor.Const.$fFoldableConst_$ctoList_closure:
         const Data.Functor.Const.$fFoldableConst_$ctoList_info;
 },
 Data.Functor.Const.$fFoldableConst_$ctoList_entry() //  []
         { []
         }
     {offset
       c76oU: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$ctoList_info" {
     Data.Functor.Const.$fFoldableConst_$ctoList_info:
         const Data.Functor.Const.$fFoldableConst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.076245459 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_closure" {
     Data.Functor.Const.$fFoldableConst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Functor.Const.$fFoldableConst_$cfold_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldl_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldl_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_closure+2;
         const Data.Functor.Const.$fFoldableConst_$ctoList_closure+1;
         const Data.Functor.Const.$fFoldableConst_$cnull_closure+1;
         const Data.Functor.Const.$fFoldableConst_$clength_closure+1;
         const Data.Functor.Const.$fFoldableConst_$celem_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cmaximum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cminimum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$csum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.078809774 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst2_closure" {
     Data.Functor.Const.$fFunctorConst2_closure:
         const Data.Functor.Const.$fFunctorConst2_info;
 },
 Data.Functor.Const.$fFunctorConst2_entry() //  [R3]
         { []
         }
     {offset
       c76p7: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFunctorConst2_info" {
     Data.Functor.Const.$fFunctorConst2_info:
         const Data.Functor.Const.$fFunctorConst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.082474417 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst1_closure" {
     Data.Functor.Const.$fFunctorConst1_closure:
         const Data.Functor.Const.$fFunctorConst1_info;
 },
 Data.Functor.Const.$fFunctorConst1_entry() //  [R3]
         { []
         }
     {offset
       c76pi: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFunctorConst1_info" {
     Data.Functor.Const.$fFunctorConst1_info:
         const Data.Functor.Const.$fFunctorConst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.085783526 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst_closure" {
     Data.Functor.Const.$fFunctorConst_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Const.$fFunctorConst2_closure+2;
         const Data.Functor.Const.$fFunctorConst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.090983898 UTC

[section ""data" . Data.Functor.Const.$fApplicativeConst_closure" {
     Data.Functor.Const.$fApplicativeConst_closure:
         const Data.Functor.Const.$fApplicativeConst_info;
         const 0;
 },
 lvl_s7522_entry() //  [R1]
         { []
         }
     {offset
       c76py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76pz; else goto c76pA;
       c76pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76pA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s7522_info" {
     lvl_s7522_info:
         const lvl_s7522_entry;
         const 1;
         const 16;
 },
 sat_s752f_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76pG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76pH; else goto c76pI;
       c76pH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c76pI: // global
           _s752d::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s752d::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s752f_info" {
     sat_s752f_info:
         const sat_s752f_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s752c_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c76pO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76pP; else goto c76pQ;
       c76pP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c76pQ: // global
           _s752a::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s752a::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s752c_info" {
     sat_s752c_info:
         const sat_s752c_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s7529_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c76pW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c76pX; else goto c76pY;
       c76pX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c76pY: // global
           R2 = P64[R1 + 5];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7529_info" {
     sat_s7529_info:
         const sat_s7529_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s7525_entry() //  [R1]
         { []
         }
     {offset
       c76q3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76q4; else goto c76q5;
       c76q4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76q5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7525_info" {
     sat_s7525_info:
         const sat_s7525_entry;
         const 1;
         const 16;
 },
 sat_s7524_entry() //  [R1]
         { []
         }
     {offset
       c76qb: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7524_info" {
     sat_s7524_info:
         const sat_s7524_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Const.$fApplicativeConst_entry() //  [R2]
         { []
         }
     {offset
       c76qf: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c76qj; else goto c76qi;
       c76qj: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Functor.Const.$fApplicativeConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76qi: // global
           I64[Hp - 160] = lvl_s7522_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s752f_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s752c_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s7529_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s7525_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s7524_info;
           P64[Hp - 56] = Hp - 160;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Data.Functor.Const.$fFunctorConst_closure+1;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 101;
           P64[Hp - 8] = Hp - 118;
           P64[Hp] = Hp - 134;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fApplicativeConst_info" {
     Data.Functor.Const.$fApplicativeConst_info:
         const Data.Functor.Const.$fApplicativeConst_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S757l_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.109031776 UTC

[section ""data" . Data.Functor.Const.$fStorableConst_closure" {
     Data.Functor.Const.$fStorableConst_closure:
         const Data.Functor.Const.$fStorableConst_info;
 },
 sat_s752o_entry() //  [R1]
         { []
         }
     {offset
       c76r0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76r1; else goto c76r2;
       c76r1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76r2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752o_info" {
     sat_s752o_info:
         const sat_s752o_entry;
         const 1;
         const 16;
 },
 sat_s752n_entry() //  [R1]
         { []
         }
     {offset
       c76r7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76r8; else goto c76r9;
       c76r8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76r9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752n_info" {
     sat_s752n_info:
         const sat_s752n_entry;
         const 1;
         const 16;
 },
 sat_s752m_entry() //  [R1]
         { []
         }
     {offset
       c76re: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rf; else goto c76rg;
       c76rf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76rg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752m_info" {
     sat_s752m_info:
         const sat_s752m_entry;
         const 1;
         const 16;
 },
 sat_s752l_entry() //  [R1]
         { []
         }
     {offset
       c76rl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rm; else goto c76rn;
       c76rm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76rn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752l_info" {
     sat_s752l_info:
         const sat_s752l_entry;
         const 1;
         const 16;
 },
 sat_s752k_entry() //  [R1]
         { []
         }
     {offset
       c76rs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rt; else goto c76ru;
       c76rt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76ru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752k_info" {
     sat_s752k_info:
         const sat_s752k_entry;
         const 1;
         const 16;
 },
 sat_s752j_entry() //  [R1]
         { []
         }
     {offset
       c76rz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rA; else goto c76rB;
       c76rA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76rB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752j_info" {
     sat_s752j_info:
         const sat_s752j_entry;
         const 1;
         const 16;
 },
 sat_s752i_entry() //  [R1]
         { []
         }
     {offset
       c76rG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rH; else goto c76rI;
       c76rH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76rI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752i_info" {
     sat_s752i_info:
         const sat_s752i_entry;
         const 1;
         const 16;
 },
 sat_s752h_entry() //  [R1]
         { []
         }
     {offset
       c76rN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76rO; else goto c76rP;
       c76rO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76rP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752h_info" {
     sat_s752h_info:
         const sat_s752h_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fStorableConst_entry() //  [R2]
         { []
         }
     {offset
       c76rR: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c76rV; else goto c76rU;
       c76rV: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fStorableConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76rU: // global
           I64[Hp - 256] = sat_s752o_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s752n_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s752m_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s752l_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s752k_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s752j_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s752i_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s752h_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fStorableConst_info" {
     Data.Functor.Const.$fStorableConst_info:
         const Data.Functor.Const.$fStorableConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.128869124 UTC

[section ""data" . Data.Functor.Const.$fNumConst_closure" {
     Data.Functor.Const.$fNumConst_closure:
         const Data.Functor.Const.$fNumConst_info;
 },
 sat_s752w_entry() //  [R1]
         { []
         }
     {offset
       c76sN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76sO; else goto c76sP;
       c76sO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76sP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752w_info" {
     sat_s752w_info:
         const sat_s752w_entry;
         const 1;
         const 16;
 },
 sat_s752v_entry() //  [R1]
         { []
         }
     {offset
       c76sU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76sV; else goto c76sW;
       c76sV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76sW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752v_info" {
     sat_s752v_info:
         const sat_s752v_entry;
         const 1;
         const 16;
 },
 sat_s752u_entry() //  [R1]
         { []
         }
     {offset
       c76t1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76t2; else goto c76t3;
       c76t2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76t3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752u_info" {
     sat_s752u_info:
         const sat_s752u_entry;
         const 1;
         const 16;
 },
 sat_s752t_entry() //  [R1]
         { []
         }
     {offset
       c76t8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76t9; else goto c76ta;
       c76t9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76ta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752t_info" {
     sat_s752t_info:
         const sat_s752t_entry;
         const 1;
         const 16;
 },
 sat_s752s_entry() //  [R1]
         { []
         }
     {offset
       c76tf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76tg; else goto c76th;
       c76tg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76th: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752s_info" {
     sat_s752s_info:
         const sat_s752s_entry;
         const 1;
         const 16;
 },
 sat_s752r_entry() //  [R1]
         { []
         }
     {offset
       c76tm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76tn; else goto c76to;
       c76tn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76to: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752r_info" {
     sat_s752r_info:
         const sat_s752r_entry;
         const 1;
         const 16;
 },
 sat_s752q_entry() //  [R1]
         { []
         }
     {offset
       c76tt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76tu; else goto c76tv;
       c76tu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76tv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752q_info" {
     sat_s752q_info:
         const sat_s752q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fNumConst_entry() //  [R2]
         { []
         }
     {offset
       c76tx: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c76tB; else goto c76tA;
       c76tB: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Const.$fNumConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76tA: // global
           I64[Hp - 224] = sat_s752w_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s752v_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s752u_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s752t_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s752s_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s752r_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s752q_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fNumConst_info" {
     Data.Functor.Const.$fNumConst_info:
         const Data.Functor.Const.$fNumConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.150825434 UTC

[section ""data" . Data.Functor.Const.$fRealConst_$cp1Real_closure" {
     Data.Functor.Const.$fRealConst_$cp1Real_closure:
         const Data.Functor.Const.$fRealConst_$cp1Real_info;
 },
 sat_s752y_entry() //  [R1]
         { []
         }
     {offset
       c76uo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76up; else goto c76uq;
       c76up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752y_info" {
     sat_s752y_info:
         const sat_s752y_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_$cp1Real_entry() //  [R2]
         { []
         }
     {offset
       c76ur: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76uv; else goto c76uu;
       c76uv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_$cp1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76uu: // global
           I64[Hp - 16] = sat_s752y_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fNumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_$cp1Real_info" {
     Data.Functor.Const.$fRealConst_$cp1Real_info:
         const Data.Functor.Const.$fRealConst_$cp1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.162314164 UTC

[section ""data" . Data.Functor.Const.$fSemigroupConst_closure" {
     Data.Functor.Const.$fSemigroupConst_closure:
         const Data.Functor.Const.$fSemigroupConst_info;
 },
 sat_s752D_entry() //  [R1, R2]
         { []
         }
     {offset
       c76uN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76uO; else goto c76uP;
       c76uO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76uP: // global
           _s752C::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s752C::P64;
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s752D_info" {
     sat_s752D_info:
         const sat_s752D_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s752B_entry() //  [R1]
         { []
         }
     {offset
       c76uU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76uV; else goto c76uW;
       c76uV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76uW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752B_info" {
     sat_s752B_info:
         const sat_s752B_entry;
         const 1;
         const 16;
 },
 sat_s752A_entry() //  [R1]
         { []
         }
     {offset
       c76v1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76v2; else goto c76v3;
       c76v2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76v3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752A_info" {
     sat_s752A_info:
         const sat_s752A_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fSemigroupConst_entry() //  [R2]
         { []
         }
     {offset
       c76v5: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c76v9; else goto c76v8;
       c76v9: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Const.$fSemigroupConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76v8: // global
           I64[Hp - 88] = sat_s752D_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s752B_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s752A_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 87;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fSemigroupConst_info" {
     Data.Functor.Const.$fSemigroupConst_info:
         const Data.Functor.Const.$fSemigroupConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.178799275 UTC

[section ""data" . Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure" {
     Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure:
         const Data.Functor.Const.$fMonoidConst_$cp1Monoid_info;
 },
 sat_s752F_entry() //  [R1]
         { []
         }
     {offset
       c76vC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76vD; else goto c76vE;
       c76vD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76vE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752F_info" {
     sat_s752F_info:
         const sat_s752F_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c76vF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76vJ; else goto c76vI;
       c76vJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76vI: // global
           I64[Hp - 16] = sat_s752F_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fSemigroupConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fMonoidConst_$cp1Monoid_info" {
     Data.Functor.Const.$fMonoidConst_$cp1Monoid_info:
         const Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.191602367 UTC

[section ""data" . Data.Functor.Const.$fMonoidConst_closure" {
     Data.Functor.Const.$fMonoidConst_closure:
         const Data.Functor.Const.$fMonoidConst_info;
 },
 sat_s752K_entry() //  [R1]
         { []
         }
     {offset
       c76w0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76w1; else goto c76w2;
       c76w1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76w2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752K_info" {
     sat_s752K_info:
         const sat_s752K_entry;
         const 1;
         const 16;
 },
 sat_s752J_entry() //  [R1]
         { []
         }
     {offset
       c76w7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76w8; else goto c76w9;
       c76w8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76w9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752J_info" {
     sat_s752J_info:
         const sat_s752J_entry;
         const 1;
         const 16;
 },
 sat_s752I_entry() //  [R1]
         { []
         }
     {offset
       c76we: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76wf; else goto c76wg;
       c76wf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76wg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752I_info" {
     sat_s752I_info:
         const sat_s752I_entry;
         const 1;
         const 16;
 },
 sat_s752H_entry() //  [R1]
         { []
         }
     {offset
       c76wl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76wm; else goto c76wn;
       c76wm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76wn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752H_info" {
     sat_s752H_info:
         const sat_s752H_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fMonoidConst_entry() //  [R2]
         { []
         }
     {offset
       c76wp: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c76wt; else goto c76ws;
       c76wt: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fMonoidConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76ws: // global
           I64[Hp - 128] = sat_s752K_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s752J_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s752I_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s752H_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fMonoidConst_info" {
     Data.Functor.Const.$fMonoidConst_info:
         const Data.Functor.Const.$fMonoidConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.206333535 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const1_closure" {
     Data.Functor.Const.$fGeneric1Const1_closure:
         const Data.Functor.Const.$fGeneric1Const1_info;
 },
 Data.Functor.Const.$fGeneric1Const1_entry() //  [R2]
         { []
         }
     {offset
       c76wX: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGeneric1Const1_info" {
     Data.Functor.Const.$fGeneric1Const1_info:
         const Data.Functor.Const.$fGeneric1Const1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.210207892 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const2_closure" {
     Data.Functor.Const.$fGeneric1Const2_closure:
         const Data.Functor.Const.$fGeneric1Const2_info;
 },
 Data.Functor.Const.$fGeneric1Const2_entry() //  [R2]
         { []
         }
     {offset
       c76x8: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGeneric1Const2_info" {
     Data.Functor.Const.$fGeneric1Const2_info:
         const Data.Functor.Const.$fGeneric1Const2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.214363916 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const_closure" {
     Data.Functor.Const.$fGeneric1Const_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Const.$fGeneric1Const2_closure+1;
         const Data.Functor.Const.$fGeneric1Const1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.21686046 UTC

[section ""data" . Data.Functor.Const.$fGenericConst1_closure" {
     Data.Functor.Const.$fGenericConst1_closure:
         const Data.Functor.Const.$fGenericConst1_info;
 },
 Data.Functor.Const.$fGenericConst1_entry() //  [R2]
         { []
         }
     {offset
       c76xk: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGenericConst1_info" {
     Data.Functor.Const.$fGenericConst1_info:
         const Data.Functor.Const.$fGenericConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.220623312 UTC

[section ""data" . Data.Functor.Const.$fGenericConst2_closure" {
     Data.Functor.Const.$fGenericConst2_closure:
         const Data.Functor.Const.$fGenericConst2_info;
 },
 Data.Functor.Const.$fGenericConst2_entry() //  [R2]
         { []
         }
     {offset
       c76xv: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGenericConst2_info" {
     Data.Functor.Const.$fGenericConst2_info:
         const Data.Functor.Const.$fGenericConst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.223943022 UTC

[section ""data" . Data.Functor.Const.$fGenericConst_closure" {
     Data.Functor.Const.$fGenericConst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Const.$fGenericConst2_closure+1;
         const Data.Functor.Const.$fGenericConst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.227086164 UTC

[section ""data" . Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure" {
     Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure:
         const Data.Functor.Const.$fFractionalConst_$cp1Fractional_info;
 },
 sat_s752Q_entry() //  [R1]
         { []
         }
     {offset
       c76xL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76xM; else goto c76xN;
       c76xM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76xN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752Q_info" {
     sat_s752Q_info:
         const sat_s752Q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry() //  [R2]
         { []
         }
     {offset
       c76xO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76xS; else goto c76xR;
       c76xS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76xR: // global
           I64[Hp - 16] = sat_s752Q_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fNumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFractionalConst_$cp1Fractional_info" {
     Data.Functor.Const.$fFractionalConst_$cp1Fractional_info:
         const Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.234183503 UTC

[section ""data" . Data.Functor.Const.$fFractionalConst_closure" {
     Data.Functor.Const.$fFractionalConst_closure:
         const Data.Functor.Const.$fFractionalConst_info;
 },
 sat_s752V_entry() //  [R1]
         { []
         }
     {offset
       c76y9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76ya; else goto c76yb;
       c76ya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76yb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752V_info" {
     sat_s752V_info:
         const sat_s752V_entry;
         const 1;
         const 16;
 },
 sat_s752U_entry() //  [R1]
         { []
         }
     {offset
       c76yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76yh; else goto c76yi;
       c76yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752U_info" {
     sat_s752U_info:
         const sat_s752U_entry;
         const 1;
         const 16;
 },
 sat_s752T_entry() //  [R1]
         { []
         }
     {offset
       c76yn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76yo; else goto c76yp;
       c76yo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76yp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real./_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752T_info" {
     sat_s752T_info:
         const sat_s752T_entry;
         const 1;
         const 16;
 },
 sat_s752S_entry() //  [R1]
         { []
         }
     {offset
       c76yu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76yv; else goto c76yw;
       c76yv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76yw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752S_info" {
     sat_s752S_info:
         const sat_s752S_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFractionalConst_entry() //  [R2]
         { []
         }
     {offset
       c76yy: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c76yC; else goto c76yB;
       c76yC: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fFractionalConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76yB: // global
           I64[Hp - 128] = sat_s752V_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s752U_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s752T_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s752S_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFractionalConst_info" {
     Data.Functor.Const.$fFractionalConst_info:
         const Data.Functor.Const.$fFractionalConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.246721495 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure" {
     Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure:
         const Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info;
 },
 sat_s752X_entry() //  [R1]
         { []
         }
     {offset
       c76za: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76zb; else goto c76zc;
       c76zb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76zc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752X_info" {
     sat_s752X_info:
         const sat_s752X_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c76zd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76zh; else goto c76zg;
       c76zh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76zg: // global
           I64[Hp - 16] = sat_s752X_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFractionalConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info" {
     Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info:
         const Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.252760463 UTC

[section ""data" . Data.Functor.Const.$fFloatingConst_$cp1Floating_closure" {
     Data.Functor.Const.$fFloatingConst_$cp1Floating_closure:
         const Data.Functor.Const.$fFloatingConst_$cp1Floating_info;
 },
 sat_s752Z_entry() //  [R1]
         { []
         }
     {offset
       c76zy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76zz; else goto c76zA;
       c76zz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76zA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s752Z_info" {
     sat_s752Z_info:
         const sat_s752Z_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFloatingConst_$cp1Floating_entry() //  [R2]
         { []
         }
     {offset
       c76zB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76zF; else goto c76zE;
       c76zF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFloatingConst_$cp1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76zE: // global
           I64[Hp - 16] = sat_s752Z_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFractionalConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFloatingConst_$cp1Floating_info" {
     Data.Functor.Const.$fFloatingConst_$cp1Floating_info:
         const Data.Functor.Const.$fFloatingConst_$cp1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.267849955 UTC

[section ""data" . Data.Functor.Const.$fFloatingConst_closure" {
     Data.Functor.Const.$fFloatingConst_closure:
         const Data.Functor.Const.$fFloatingConst_info;
 },
 sat_s753n_entry() //  [R1]
         { []
         }
     {offset
       c76zW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76zX; else goto c76zY;
       c76zX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76zY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1mexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753n_info" {
     sat_s753n_info:
         const sat_s753n_entry;
         const 1;
         const 16;
 },
 sat_s753m_entry() //  [R1]
         { []
         }
     {offset
       c76A3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76A4; else goto c76A5;
       c76A4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76A5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1pexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753m_info" {
     sat_s753m_info:
         const sat_s753m_entry;
         const 1;
         const 16;
 },
 sat_s753l_entry() //  [R1]
         { []
         }
     {offset
       c76Aa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ab; else goto c76Ac;
       c76Ab: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ac: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.expm1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753l_info" {
     sat_s753l_info:
         const sat_s753l_entry;
         const 1;
         const 16;
 },
 sat_s753k_entry() //  [R1]
         { []
         }
     {offset
       c76Ah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ai; else goto c76Aj;
       c76Ai: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Aj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753k_info" {
     sat_s753k_info:
         const sat_s753k_entry;
         const 1;
         const 16;
 },
 sat_s753j_entry() //  [R1]
         { []
         }
     {offset
       c76Ao: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ap; else goto c76Aq;
       c76Ap: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Aq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753j_info" {
     sat_s753j_info:
         const sat_s753j_entry;
         const 1;
         const 16;
 },
 sat_s753i_entry() //  [R1]
         { []
         }
     {offset
       c76Av: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Aw; else goto c76Ax;
       c76Aw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ax: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753i_info" {
     sat_s753i_info:
         const sat_s753i_entry;
         const 1;
         const 16;
 },
 sat_s753h_entry() //  [R1]
         { []
         }
     {offset
       c76AC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76AD; else goto c76AE;
       c76AD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76AE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753h_info" {
     sat_s753h_info:
         const sat_s753h_entry;
         const 1;
         const 16;
 },
 sat_s753g_entry() //  [R1]
         { []
         }
     {offset
       c76AJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76AK; else goto c76AL;
       c76AK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76AL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753g_info" {
     sat_s753g_info:
         const sat_s753g_entry;
         const 1;
         const 16;
 },
 sat_s753f_entry() //  [R1]
         { []
         }
     {offset
       c76AQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76AR; else goto c76AS;
       c76AR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76AS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753f_info" {
     sat_s753f_info:
         const sat_s753f_entry;
         const 1;
         const 16;
 },
 sat_s753e_entry() //  [R1]
         { []
         }
     {offset
       c76AX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76AY; else goto c76AZ;
       c76AY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76AZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753e_info" {
     sat_s753e_info:
         const sat_s753e_entry;
         const 1;
         const 16;
 },
 sat_s753d_entry() //  [R1]
         { []
         }
     {offset
       c76B4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76B5; else goto c76B6;
       c76B5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76B6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753d_info" {
     sat_s753d_info:
         const sat_s753d_entry;
         const 1;
         const 16;
 },
 sat_s753c_entry() //  [R1]
         { []
         }
     {offset
       c76Bb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Bc; else goto c76Bd;
       c76Bc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Bd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753c_info" {
     sat_s753c_info:
         const sat_s753c_entry;
         const 1;
         const 16;
 },
 sat_s753b_entry() //  [R1]
         { []
         }
     {offset
       c76Bi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Bj; else goto c76Bk;
       c76Bj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Bk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753b_info" {
     sat_s753b_info:
         const sat_s753b_entry;
         const 1;
         const 16;
 },
 sat_s753a_entry() //  [R1]
         { []
         }
     {offset
       c76Bp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Bq; else goto c76Br;
       c76Bq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Br: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753a_info" {
     sat_s753a_info:
         const sat_s753a_entry;
         const 1;
         const 16;
 },
 sat_s7539_entry() //  [R1]
         { []
         }
     {offset
       c76Bw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Bx; else goto c76By;
       c76Bx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76By: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7539_info" {
     sat_s7539_info:
         const sat_s7539_entry;
         const 1;
         const 16;
 },
 sat_s7538_entry() //  [R1]
         { []
         }
     {offset
       c76BD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76BE; else goto c76BF;
       c76BE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76BF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7538_info" {
     sat_s7538_info:
         const sat_s7538_entry;
         const 1;
         const 16;
 },
 sat_s7537_entry() //  [R1]
         { []
         }
     {offset
       c76BK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76BL; else goto c76BM;
       c76BL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76BM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.logBase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7537_info" {
     sat_s7537_info:
         const sat_s7537_entry;
         const 1;
         const 16;
 },
 sat_s7536_entry() //  [R1]
         { []
         }
     {offset
       c76BR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76BS; else goto c76BT;
       c76BS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76BT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.**_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7536_info" {
     sat_s7536_info:
         const sat_s7536_entry;
         const 1;
         const 16;
 },
 sat_s7535_entry() //  [R1]
         { []
         }
     {offset
       c76BY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76BZ; else goto c76C0;
       c76BZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76C0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sqrt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7535_info" {
     sat_s7535_info:
         const sat_s7535_entry;
         const 1;
         const 16;
 },
 sat_s7534_entry() //  [R1]
         { []
         }
     {offset
       c76C5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76C6; else goto c76C7;
       c76C6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76C7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7534_info" {
     sat_s7534_info:
         const sat_s7534_entry;
         const 1;
         const 16;
 },
 sat_s7533_entry() //  [R1]
         { []
         }
     {offset
       c76Cc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Cd; else goto c76Ce;
       c76Cd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7533_info" {
     sat_s7533_info:
         const sat_s7533_entry;
         const 1;
         const 16;
 },
 sat_s7532_entry() //  [R1]
         { []
         }
     {offset
       c76Cj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ck; else goto c76Cl;
       c76Ck: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Cl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7532_info" {
     sat_s7532_info:
         const sat_s7532_entry;
         const 1;
         const 16;
 },
 sat_s7531_entry() //  [R1]
         { []
         }
     {offset
       c76Cq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Cr; else goto c76Cs;
       c76Cr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Cs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFloatingConst_$cp1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7531_info" {
     sat_s7531_info:
         const sat_s7531_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFloatingConst_entry() //  [R2]
         { []
         }
     {offset
       c76Cu: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto c76Cy; else goto c76Cx;
       c76Cy: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Const.$fFloatingConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Cx: // global
           I64[Hp - 736] = sat_s753n_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_s753m_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_s753l_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_s753k_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_s753j_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_s753i_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_s753h_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_s753g_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_s753f_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_s753e_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_s753d_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_s753c_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_s753b_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_s753a_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_s7539_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_s7538_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s7537_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_s7536_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s7535_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_s7534_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s7533_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s7532_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s7531_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFloatingConst_info" {
     Data.Functor.Const.$fFloatingConst_info:
         const Data.Functor.Const.$fFloatingConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.31296924 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure" {
     Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure:
         const Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info;
 },
 sat_s753p_entry() //  [R1]
         { []
         }
     {offset
       c76ED: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76EE; else goto c76EF;
       c76EE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76EF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753p_info" {
     sat_s753p_info:
         const sat_s753p_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c76EG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76EK; else goto c76EJ;
       c76EK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76EJ: // global
           I64[Hp - 16] = sat_s753p_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFloatingConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info" {
     Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info:
         const Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.319772097 UTC

[section ""data" . Data.Functor.Const.$fEqConst_closure" {
     Data.Functor.Const.$fEqConst_closure:
         const Data.Functor.Const.$fEqConst_info;
 },
 sat_s753s_entry() //  [R1]
         { []
         }
     {offset
       c76F1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76F2; else goto c76F3;
       c76F2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76F3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753s_info" {
     sat_s753s_info:
         const sat_s753s_entry;
         const 1;
         const 16;
 },
 sat_s753r_entry() //  [R1]
         { []
         }
     {offset
       c76F8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76F9; else goto c76Fa;
       c76F9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Fa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753r_info" {
     sat_s753r_info:
         const sat_s753r_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fEqConst_entry() //  [R2]
         { []
         }
     {offset
       c76Fc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c76Fg; else goto c76Ff;
       c76Fg: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Const.$fEqConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Ff: // global
           I64[Hp - 64] = sat_s753s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s753r_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fEqConst_info" {
     Data.Functor.Const.$fEqConst_info:
         const Data.Functor.Const.$fEqConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.327376151 UTC

[section ""data" . Data.Functor.Const.$fOrdConst_$cp1Ord_closure" {
     Data.Functor.Const.$fOrdConst_$cp1Ord_closure:
         const Data.Functor.Const.$fOrdConst_$cp1Ord_info;
 },
 sat_s753u_entry() //  [R1]
         { []
         }
     {offset
       c76FE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76FF; else goto c76FG;
       c76FF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76FG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753u_info" {
     sat_s753u_info:
         const sat_s753u_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fOrdConst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c76FH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76FL; else goto c76FK;
       c76FL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fOrdConst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76FK: // global
           I64[Hp - 16] = sat_s753u_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEqConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fOrdConst_$cp1Ord_info" {
     Data.Functor.Const.$fOrdConst_$cp1Ord_info:
         const Data.Functor.Const.$fOrdConst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.335769081 UTC

[section ""data" . Data.Functor.Const.$fOrdConst_closure" {
     Data.Functor.Const.$fOrdConst_closure:
         const Data.Functor.Const.$fOrdConst_info;
 },
 sat_s753D_entry() //  [R1]
         { []
         }
     {offset
       c76G2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76G3; else goto c76G4;
       c76G3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76G4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753D_info" {
     sat_s753D_info:
         const sat_s753D_entry;
         const 1;
         const 16;
 },
 sat_s753C_entry() //  [R1]
         { []
         }
     {offset
       c76G9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ga; else goto c76Gb;
       c76Ga: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Gb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753C_info" {
     sat_s753C_info:
         const sat_s753C_entry;
         const 1;
         const 16;
 },
 sat_s753B_entry() //  [R1]
         { []
         }
     {offset
       c76Gg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Gh; else goto c76Gi;
       c76Gh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Gi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753B_info" {
     sat_s753B_info:
         const sat_s753B_entry;
         const 1;
         const 16;
 },
 sat_s753A_entry() //  [R1]
         { []
         }
     {offset
       c76Gn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Go; else goto c76Gp;
       c76Go: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Gp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753A_info" {
     sat_s753A_info:
         const sat_s753A_entry;
         const 1;
         const 16;
 },
 sat_s753z_entry() //  [R1]
         { []
         }
     {offset
       c76Gu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Gv; else goto c76Gw;
       c76Gv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Gw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753z_info" {
     sat_s753z_info:
         const sat_s753z_entry;
         const 1;
         const 16;
 },
 sat_s753y_entry() //  [R1]
         { []
         }
     {offset
       c76GB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76GC; else goto c76GD;
       c76GC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76GD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753y_info" {
     sat_s753y_info:
         const sat_s753y_entry;
         const 1;
         const 16;
 },
 sat_s753x_entry() //  [R1]
         { []
         }
     {offset
       c76GI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76GJ; else goto c76GK;
       c76GJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76GK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753x_info" {
     sat_s753x_info:
         const sat_s753x_entry;
         const 1;
         const 16;
 },
 sat_s753w_entry() //  [R1]
         { []
         }
     {offset
       c76GP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76GQ; else goto c76GR;
       c76GQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76GR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fOrdConst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753w_info" {
     sat_s753w_info:
         const sat_s753w_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fOrdConst_entry() //  [R2]
         { []
         }
     {offset
       c76GT: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c76GX; else goto c76GW;
       c76GX: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fOrdConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76GW: // global
           I64[Hp - 256] = sat_s753D_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s753C_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s753B_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s753A_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s753z_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s753y_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s753x_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s753w_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fOrdConst_info" {
     Data.Functor.Const.$fOrdConst_info:
         const Data.Functor.Const.$fOrdConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.353433628 UTC

[section ""data" . Data.Functor.Const.$fIxConst_$cp1Ix_closure" {
     Data.Functor.Const.$fIxConst_$cp1Ix_closure:
         const Data.Functor.Const.$fIxConst_$cp1Ix_info;
 },
 sat_s753F_entry() //  [R1]
         { []
         }
     {offset
       c76HP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76HQ; else goto c76HR;
       c76HQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76HR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753F_info" {
     sat_s753F_info:
         const sat_s753F_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIxConst_$cp1Ix_entry() //  [R2]
         { []
         }
     {offset
       c76HS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76HW; else goto c76HV;
       c76HW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIxConst_$cp1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76HV: // global
           I64[Hp - 16] = sat_s753F_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fOrdConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIxConst_$cp1Ix_info" {
     Data.Functor.Const.$fIxConst_$cp1Ix_info:
         const Data.Functor.Const.$fIxConst_$cp1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.362209052 UTC

[section ""data" . Data.Functor.Const.$fIxConst_closure" {
     Data.Functor.Const.$fIxConst_closure:
         const Data.Functor.Const.$fIxConst_info;
 },
 sat_s753N_entry() //  [R1]
         { []
         }
     {offset
       c76Id: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ie; else goto c76If;
       c76Ie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76If: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753N_info" {
     sat_s753N_info:
         const sat_s753N_entry;
         const 1;
         const 16;
 },
 sat_s753M_entry() //  [R1]
         { []
         }
     {offset
       c76Ik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Il; else goto c76Im;
       c76Il: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Im: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753M_info" {
     sat_s753M_info:
         const sat_s753M_entry;
         const 1;
         const 16;
 },
 sat_s753L_entry() //  [R1]
         { []
         }
     {offset
       c76Ir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Is; else goto c76It;
       c76Is: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76It: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753L_info" {
     sat_s753L_info:
         const sat_s753L_entry;
         const 1;
         const 16;
 },
 sat_s753K_entry() //  [R1]
         { []
         }
     {offset
       c76Iy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Iz; else goto c76IA;
       c76Iz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76IA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753K_info" {
     sat_s753K_info:
         const sat_s753K_entry;
         const 1;
         const 16;
 },
 sat_s753J_entry() //  [R1]
         { []
         }
     {offset
       c76IF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76IG; else goto c76IH;
       c76IG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76IH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753J_info" {
     sat_s753J_info:
         const sat_s753J_entry;
         const 1;
         const 16;
 },
 sat_s753I_entry() //  [R1]
         { []
         }
     {offset
       c76IM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76IN; else goto c76IO;
       c76IN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76IO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753I_info" {
     sat_s753I_info:
         const sat_s753I_entry;
         const 1;
         const 16;
 },
 sat_s753H_entry() //  [R1]
         { []
         }
     {offset
       c76IT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76IU; else goto c76IV;
       c76IU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76IV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIxConst_$cp1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753H_info" {
     sat_s753H_info:
         const sat_s753H_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIxConst_entry() //  [R2]
         { []
         }
     {offset
       c76IX: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c76J1; else goto c76J0;
       c76J1: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Const.$fIxConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76J0: // global
           I64[Hp - 224] = sat_s753N_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s753M_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s753L_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s753K_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s753J_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s753I_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s753H_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIxConst_info" {
     Data.Functor.Const.$fIxConst_info:
         const Data.Functor.Const.$fIxConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.378567651 UTC

[section ""data" . Data.Functor.Const.$fRealConst_$cp2Real_closure" {
     Data.Functor.Const.$fRealConst_$cp2Real_closure:
         const Data.Functor.Const.$fRealConst_$cp2Real_info;
 },
 sat_s753P_entry() //  [R1]
         { []
         }
     {offset
       c76JO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76JP; else goto c76JQ;
       c76JP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76JQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753P_info" {
     sat_s753P_info:
         const sat_s753P_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_$cp2Real_entry() //  [R2]
         { []
         }
     {offset
       c76JR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76JV; else goto c76JU;
       c76JV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_$cp2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76JU: // global
           I64[Hp - 16] = sat_s753P_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fOrdConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_$cp2Real_info" {
     Data.Functor.Const.$fRealConst_$cp2Real_info:
         const Data.Functor.Const.$fRealConst_$cp2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.38931495 UTC

[section ""data" . Data.Functor.Const.$fRealConst_closure" {
     Data.Functor.Const.$fRealConst_closure:
         const Data.Functor.Const.$fRealConst_info;
 },
 sat_s753T_entry() //  [R1]
         { []
         }
     {offset
       c76Kc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Kd; else goto c76Ke;
       c76Kd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753T_info" {
     sat_s753T_info:
         const sat_s753T_entry;
         const 1;
         const 16;
 },
 sat_s753S_entry() //  [R1]
         { []
         }
     {offset
       c76Kj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Kk; else goto c76Kl;
       c76Kk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Kl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealConst_$cp2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753S_info" {
     sat_s753S_info:
         const sat_s753S_entry;
         const 1;
         const 16;
 },
 sat_s753R_entry() //  [R1]
         { []
         }
     {offset
       c76Kq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Kr; else goto c76Ks;
       c76Kr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealConst_$cp1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753R_info" {
     sat_s753R_info:
         const sat_s753R_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_entry() //  [R2]
         { []
         }
     {offset
       c76Ku: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c76Ky; else goto c76Kx;
       c76Ky: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Kx: // global
           I64[Hp - 96] = sat_s753T_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s753S_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s753R_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_info" {
     Data.Functor.Const.$fRealConst_info:
         const Data.Functor.Const.$fRealConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.398373741 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_$cp1Integral_closure" {
     Data.Functor.Const.$fIntegralConst_$cp1Integral_closure:
         const Data.Functor.Const.$fIntegralConst_$cp1Integral_info;
 },
 sat_s753V_entry() //  [R1]
         { []
         }
     {offset
       c76L1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76L2; else goto c76L3;
       c76L2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76L3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753V_info" {
     sat_s753V_info:
         const sat_s753V_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_$cp1Integral_entry() //  [R2]
         { []
         }
     {offset
       c76L4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76L8; else goto c76L7;
       c76L8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_$cp1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76L7: // global
           I64[Hp - 16] = sat_s753V_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_$cp1Integral_info" {
     Data.Functor.Const.$fIntegralConst_$cp1Integral_info:
         const Data.Functor.Const.$fIntegralConst_$cp1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.403949678 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure" {
     Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure:
         const Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info;
 },
 sat_s753X_entry() //  [R1]
         { []
         }
     {offset
       c76Lp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Lq; else goto c76Lr;
       c76Lq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Lr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753X_info" {
     sat_s753X_info:
         const sat_s753X_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c76Ls: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76Lw; else goto c76Lv;
       c76Lw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Lv: // global
           I64[Hp - 16] = sat_s753X_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info" {
     Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info:
         const Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.412093712 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_closure" {
     Data.Functor.Const.$fRealFracConst_closure:
         const Data.Functor.Const.$fRealFracConst_info;
 },
 sat_s754a_entry() //  [R1, R2]
         { []
         }
     {offset
       c76LO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76LP; else goto c76LQ;
       c76LP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76LQ: // global
           _s7549::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7549::P64;
           Sp = Sp - 16;
           call GHC.Real.floor_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s754a_info" {
     sat_s754a_info:
         const sat_s754a_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7548_entry() //  [R1, R2]
         { []
         }
     {offset
       c76LW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76LX; else goto c76LY;
       c76LX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76LY: // global
           _s7547::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7547::P64;
           Sp = Sp - 16;
           call GHC.Real.ceiling_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7548_info" {
     sat_s7548_info:
         const sat_s7548_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7546_entry() //  [R1, R2]
         { []
         }
     {offset
       c76M4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76M5; else goto c76M6;
       c76M5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76M6: // global
           _s7545::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7545::P64;
           Sp = Sp - 16;
           call GHC.Real.round_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7546_info" {
     sat_s7546_info:
         const sat_s7546_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7544_entry() //  [R1, R2]
         { []
         }
     {offset
       c76Mc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Md; else goto c76Me;
       c76Md: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Me: // global
           _s7543::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7543::P64;
           Sp = Sp - 16;
           call GHC.Real.truncate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7544_info" {
     sat_s7544_info:
         const sat_s7544_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7542_entry() //  [R1, R2]
         { []
         }
     {offset
       c76Mk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ml; else goto c76Mm;
       c76Ml: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Mm: // global
           _s7541::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7541::P64;
           Sp = Sp - 16;
           call GHC.Real.properFraction_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7542_info" {
     sat_s7542_info:
         const sat_s7542_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7540_entry() //  [R1]
         { []
         }
     {offset
       c76Mr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ms; else goto c76Mt;
       c76Ms: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Mt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7540_info" {
     sat_s7540_info:
         const sat_s7540_entry;
         const 1;
         const 16;
 },
 sat_s753Z_entry() //  [R1]
         { []
         }
     {offset
       c76My: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Mz; else goto c76MA;
       c76Mz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76MA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s753Z_info" {
     sat_s753Z_info:
         const sat_s753Z_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_entry() //  [R2]
         { []
         }
     {offset
       c76MC: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c76MG; else goto c76MF;
       c76MG: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76MF: // global
           I64[Hp - 184] = sat_s754a_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s7548_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s7546_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s7544_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s7542_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s7540_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s753Z_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 119;
           P64[Hp - 24] = Hp - 135;
           P64[Hp - 16] = Hp - 151;
           P64[Hp - 8] = Hp - 167;
           P64[Hp] = Hp - 183;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_info" {
     Data.Functor.Const.$fRealFracConst_info:
         const Data.Functor.Const.$fRealFracConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.430121044 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure" {
     Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure:
         const Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info;
 },
 sat_s754c_entry() //  [R1]
         { []
         }
     {offset
       c76Nt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Nu; else goto c76Nv;
       c76Nu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Nv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754c_info" {
     sat_s754c_info:
         const sat_s754c_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c76Nw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76NA; else goto c76Nz;
       c76NA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Nz: // global
           I64[Hp - 16] = sat_s754c_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealFracConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info" {
     Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info:
         const Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.441335144 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_closure" {
     Data.Functor.Const.$fRealFloatConst_closure:
         const Data.Functor.Const.$fRealFloatConst_info;
 },
 sat_s754t_entry() //  [R1]
         { []
         }
     {offset
       c76NR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76NS; else goto c76NT;
       c76NS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76NT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754t_info" {
     sat_s754t_info:
         const sat_s754t_entry;
         const 1;
         const 16;
 },
 sat_s754s_entry() //  [R1]
         { []
         }
     {offset
       c76NY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76NZ; else goto c76O0;
       c76NZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76O0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isIEEE_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754s_info" {
     sat_s754s_info:
         const sat_s754s_entry;
         const 1;
         const 16;
 },
 sat_s754r_entry() //  [R1]
         { []
         }
     {offset
       c76O5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76O6; else goto c76O7;
       c76O6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76O7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754r_info" {
     sat_s754r_info:
         const sat_s754r_entry;
         const 1;
         const 16;
 },
 sat_s754q_entry() //  [R1]
         { []
         }
     {offset
       c76Oc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Od; else goto c76Oe;
       c76Od: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Oe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isDenormalized_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754q_info" {
     sat_s754q_info:
         const sat_s754q_entry;
         const 1;
         const 16;
 },
 sat_s754p_entry() //  [R1]
         { []
         }
     {offset
       c76Oj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ok; else goto c76Ol;
       c76Ok: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754p_info" {
     sat_s754p_info:
         const sat_s754p_entry;
         const 1;
         const 16;
 },
 sat_s754o_entry() //  [R1]
         { []
         }
     {offset
       c76Oq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Or; else goto c76Os;
       c76Or: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Os: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754o_info" {
     sat_s754o_info:
         const sat_s754o_entry;
         const 1;
         const 16;
 },
 sat_s754n_entry() //  [R1]
         { []
         }
     {offset
       c76Ox: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Oy; else goto c76Oz;
       c76Oy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Oz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.scaleFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754n_info" {
     sat_s754n_info:
         const sat_s754n_entry;
         const 1;
         const 16;
 },
 sat_s754m_entry() //  [R1]
         { []
         }
     {offset
       c76OE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76OF; else goto c76OG;
       c76OF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76OG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.significand_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754m_info" {
     sat_s754m_info:
         const sat_s754m_entry;
         const 1;
         const 16;
 },
 sat_s754l_entry() //  [R1]
         { []
         }
     {offset
       c76OL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76OM; else goto c76ON;
       c76OM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76ON: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754l_info" {
     sat_s754l_info:
         const sat_s754l_entry;
         const 1;
         const 16;
 },
 sat_s754k_entry() //  [R1]
         { []
         }
     {offset
       c76OS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76OT; else goto c76OU;
       c76OT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76OU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.encodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754k_info" {
     sat_s754k_info:
         const sat_s754k_entry;
         const 1;
         const 16;
 },
 sat_s754j_entry() //  [R1]
         { []
         }
     {offset
       c76OZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76P0; else goto c76P1;
       c76P0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76P1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754j_info" {
     sat_s754j_info:
         const sat_s754j_entry;
         const 1;
         const 16;
 },
 sat_s754i_entry() //  [R1]
         { []
         }
     {offset
       c76P6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76P7; else goto c76P8;
       c76P7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76P8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754i_info" {
     sat_s754i_info:
         const sat_s754i_entry;
         const 1;
         const 16;
 },
 sat_s754h_entry() //  [R1]
         { []
         }
     {offset
       c76Pd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Pe; else goto c76Pf;
       c76Pe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Pf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754h_info" {
     sat_s754h_info:
         const sat_s754h_entry;
         const 1;
         const 16;
 },
 sat_s754g_entry() //  [R1]
         { []
         }
     {offset
       c76Pk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Pl; else goto c76Pm;
       c76Pl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Pm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRadix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754g_info" {
     sat_s754g_info:
         const sat_s754g_entry;
         const 1;
         const 16;
 },
 sat_s754f_entry() //  [R1]
         { []
         }
     {offset
       c76Pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ps; else goto c76Pt;
       c76Ps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Pt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754f_info" {
     sat_s754f_info:
         const sat_s754f_entry;
         const 1;
         const 16;
 },
 sat_s754e_entry() //  [R1]
         { []
         }
     {offset
       c76Py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Pz; else goto c76PA;
       c76Pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76PA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754e_info" {
     sat_s754e_info:
         const sat_s754e_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_entry() //  [R2]
         { []
         }
     {offset
       c76PC: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c76PG; else goto c76PF;
       c76PG: // global
           HpAlloc = 520;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76PF: // global
           I64[Hp - 512] = sat_s754t_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_s754s_info;
           P64[Hp - 472] = R2;
           I64[Hp - 464] = sat_s754r_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_s754q_info;
           P64[Hp - 424] = R2;
           I64[Hp - 416] = sat_s754p_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_s754o_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s754n_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_s754m_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s754l_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_s754k_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s754j_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_s754i_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s754h_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s754g_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s754f_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s754e_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = Hp - 152;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 200;
           P64[Hp - 96] = Hp - 224;
           P64[Hp - 88] = Hp - 248;
           P64[Hp - 80] = Hp - 272;
           P64[Hp - 72] = Hp - 296;
           P64[Hp - 64] = Hp - 320;
           P64[Hp - 56] = Hp - 344;
           P64[Hp - 48] = Hp - 368;
           P64[Hp - 40] = Hp - 392;
           P64[Hp - 32] = Hp - 416;
           P64[Hp - 24] = Hp - 440;
           P64[Hp - 16] = Hp - 464;
           P64[Hp - 8] = Hp - 488;
           P64[Hp] = Hp - 512;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_info" {
     Data.Functor.Const.$fRealFloatConst_info:
         const Data.Functor.Const.$fRealFloatConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.476320482 UTC

[section ""data" . Data.Functor.Const.$fEnumConst_closure" {
     Data.Functor.Const.$fEnumConst_closure:
         const Data.Functor.Const.$fEnumConst_info;
 },
 sat_s754C_entry() //  [R1]
         { []
         }
     {offset
       c76Rc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Rd; else goto c76Re;
       c76Rd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Re: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754C_info" {
     sat_s754C_info:
         const sat_s754C_entry;
         const 1;
         const 16;
 },
 sat_s754B_entry() //  [R1]
         { []
         }
     {offset
       c76Rj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Rk; else goto c76Rl;
       c76Rk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Rl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754B_info" {
     sat_s754B_info:
         const sat_s754B_entry;
         const 1;
         const 16;
 },
 sat_s754A_entry() //  [R1]
         { []
         }
     {offset
       c76Rq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Rr; else goto c76Rs;
       c76Rr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Rs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754A_info" {
     sat_s754A_info:
         const sat_s754A_entry;
         const 1;
         const 16;
 },
 sat_s754z_entry() //  [R1]
         { []
         }
     {offset
       c76Rx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ry; else goto c76Rz;
       c76Ry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754z_info" {
     sat_s754z_info:
         const sat_s754z_entry;
         const 1;
         const 16;
 },
 sat_s754y_entry() //  [R1]
         { []
         }
     {offset
       c76RE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76RF; else goto c76RG;
       c76RF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76RG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754y_info" {
     sat_s754y_info:
         const sat_s754y_entry;
         const 1;
         const 16;
 },
 sat_s754x_entry() //  [R1]
         { []
         }
     {offset
       c76RL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76RM; else goto c76RN;
       c76RM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76RN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754x_info" {
     sat_s754x_info:
         const sat_s754x_entry;
         const 1;
         const 16;
 },
 sat_s754w_entry() //  [R1]
         { []
         }
     {offset
       c76RS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76RT; else goto c76RU;
       c76RT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76RU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754w_info" {
     sat_s754w_info:
         const sat_s754w_entry;
         const 1;
         const 16;
 },
 sat_s754v_entry() //  [R1]
         { []
         }
     {offset
       c76RZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76S0; else goto c76S1;
       c76S0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76S1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754v_info" {
     sat_s754v_info:
         const sat_s754v_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fEnumConst_entry() //  [R2]
         { []
         }
     {offset
       c76S3: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c76S7; else goto c76S6;
       c76S7: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fEnumConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76S6: // global
           I64[Hp - 256] = sat_s754C_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s754B_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s754A_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s754z_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s754y_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s754x_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s754w_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s754v_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fEnumConst_info" {
     Data.Functor.Const.$fEnumConst_info:
         const Data.Functor.Const.$fEnumConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.494454755 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_$cp2Integral_closure" {
     Data.Functor.Const.$fIntegralConst_$cp2Integral_closure:
         const Data.Functor.Const.$fIntegralConst_$cp2Integral_info;
 },
 sat_s754E_entry() //  [R1]
         { []
         }
     {offset
       c76SZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76T0; else goto c76T1;
       c76T0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76T1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754E_info" {
     sat_s754E_info:
         const sat_s754E_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_$cp2Integral_entry() //  [R2]
         { []
         }
     {offset
       c76T2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76T6; else goto c76T5;
       c76T6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_$cp2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76T5: // global
           I64[Hp - 16] = sat_s754E_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEnumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_$cp2Integral_info" {
     Data.Functor.Const.$fIntegralConst_$cp2Integral_info:
         const Data.Functor.Const.$fIntegralConst_$cp2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.504037757 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_closure" {
     Data.Functor.Const.$fIntegralConst_closure:
         const Data.Functor.Const.$fIntegralConst_info;
 },
 sat_s754O_entry() //  [R1]
         { []
         }
     {offset
       c76Tn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76To; else goto c76Tp;
       c76To: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Tp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754O_info" {
     sat_s754O_info:
         const sat_s754O_entry;
         const 1;
         const 16;
 },
 sat_s754N_entry() //  [R1]
         { []
         }
     {offset
       c76Tu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Tv; else goto c76Tw;
       c76Tv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Tw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.divMod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754N_info" {
     sat_s754N_info:
         const sat_s754N_entry;
         const 1;
         const 16;
 },
 sat_s754M_entry() //  [R1]
         { []
         }
     {offset
       c76TB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76TC; else goto c76TD;
       c76TC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76TD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quotRem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754M_info" {
     sat_s754M_info:
         const sat_s754M_entry;
         const 1;
         const 16;
 },
 sat_s754L_entry() //  [R1]
         { []
         }
     {offset
       c76TI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76TJ; else goto c76TK;
       c76TJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76TK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.mod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754L_info" {
     sat_s754L_info:
         const sat_s754L_entry;
         const 1;
         const 16;
 },
 sat_s754K_entry() //  [R1]
         { []
         }
     {offset
       c76TP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76TQ; else goto c76TR;
       c76TQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76TR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.div_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754K_info" {
     sat_s754K_info:
         const sat_s754K_entry;
         const 1;
         const 16;
 },
 sat_s754J_entry() //  [R1]
         { []
         }
     {offset
       c76TW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76TX; else goto c76TY;
       c76TX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76TY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.rem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754J_info" {
     sat_s754J_info:
         const sat_s754J_entry;
         const 1;
         const 16;
 },
 sat_s754I_entry() //  [R1]
         { []
         }
     {offset
       c76U3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76U4; else goto c76U5;
       c76U4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76U5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quot_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754I_info" {
     sat_s754I_info:
         const sat_s754I_entry;
         const 1;
         const 16;
 },
 sat_s754H_entry() //  [R1]
         { []
         }
     {offset
       c76Ua: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ub; else goto c76Uc;
       c76Ub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Uc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIntegralConst_$cp2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754H_info" {
     sat_s754H_info:
         const sat_s754H_entry;
         const 1;
         const 16;
 },
 sat_s754G_entry() //  [R1]
         { []
         }
     {offset
       c76Uh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Ui; else goto c76Uj;
       c76Ui: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Uj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIntegralConst_$cp1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754G_info" {
     sat_s754G_info:
         const sat_s754G_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_entry() //  [R2]
         { []
         }
     {offset
       c76Ul: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c76Up; else goto c76Uo;
       c76Up: // global
           HpAlloc = 296;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76Uo: // global
           I64[Hp - 288] = sat_s754O_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_s754N_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s754M_info;
           P64[Hp - 224] = R2;
           I64[Hp - 216] = sat_s754L_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s754K_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s754J_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s754I_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s754H_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s754G_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_info" {
     Data.Functor.Const.$fIntegralConst_info:
         const Data.Functor.Const.$fIntegralConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.524149466 UTC

[section ""data" . Data.Functor.Const.$fBoundedConst_closure" {
     Data.Functor.Const.$fBoundedConst_closure:
         const Data.Functor.Const.$fBoundedConst_info;
 },
 sat_s754R_entry() //  [R1]
         { []
         }
     {offset
       c76Vm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Vn; else goto c76Vo;
       c76Vn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Vo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754R_info" {
     sat_s754R_info:
         const sat_s754R_entry;
         const 1;
         const 16;
 },
 sat_s754Q_entry() //  [R1]
         { []
         }
     {offset
       c76Vt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Vu; else goto c76Vv;
       c76Vu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Vv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754Q_info" {
     sat_s754Q_info:
         const sat_s754Q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBoundedConst_entry() //  [R2]
         { []
         }
     {offset
       c76Vx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c76VB; else goto c76VA;
       c76VB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Const.$fBoundedConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76VA: // global
           I64[Hp - 64] = sat_s754R_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s754Q_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBoundedConst_info" {
     Data.Functor.Const.$fBoundedConst_info:
         const Data.Functor.Const.$fBoundedConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.532996314 UTC

[section ""data" . Data.Functor.Const.$fBitsConst_$cp1Bits_closure" {
     Data.Functor.Const.$fBitsConst_$cp1Bits_closure:
         const Data.Functor.Const.$fBitsConst_$cp1Bits_info;
 },
 sat_s754T_entry() //  [R1]
         { []
         }
     {offset
       c76VZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76W0; else goto c76W1;
       c76W0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76W1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754T_info" {
     sat_s754T_info:
         const sat_s754T_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBitsConst_$cp1Bits_entry() //  [R2]
         { []
         }
     {offset
       c76W2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c76W6; else goto c76W5;
       c76W6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fBitsConst_$cp1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76W5: // global
           I64[Hp - 16] = sat_s754T_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEqConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBitsConst_$cp1Bits_info" {
     Data.Functor.Const.$fBitsConst_$cp1Bits_info:
         const Data.Functor.Const.$fBitsConst_$cp1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.547696596 UTC

[section ""data" . Data.Functor.Const.$fBitsConst_closure" {
     Data.Functor.Const.$fBitsConst_closure:
         const Data.Functor.Const.$fBitsConst_info;
 },
 sat_s755h_entry() //  [R1]
         { []
         }
     {offset
       c76Wn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Wo; else goto c76Wp;
       c76Wo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Wp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.popCount_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755h_info" {
     sat_s755h_info:
         const sat_s755h_entry;
         const 1;
         const 16;
 },
 sat_s755g_entry() //  [R1]
         { []
         }
     {offset
       c76Wu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Wv; else goto c76Ww;
       c76Wv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Ww: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755g_info" {
     sat_s755g_info:
         const sat_s755g_entry;
         const 1;
         const 16;
 },
 sat_s755f_entry() //  [R1]
         { []
         }
     {offset
       c76WB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76WC; else goto c76WD;
       c76WC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76WD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755f_info" {
     sat_s755f_info:
         const sat_s755f_entry;
         const 1;
         const 16;
 },
 sat_s755e_entry() //  [R1]
         { []
         }
     {offset
       c76WI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76WJ; else goto c76WK;
       c76WJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76WK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755e_info" {
     sat_s755e_info:
         const sat_s755e_entry;
         const 1;
         const 16;
 },
 sat_s755d_entry() //  [R1]
         { []
         }
     {offset
       c76WP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76WQ; else goto c76WR;
       c76WQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76WR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755d_info" {
     sat_s755d_info:
         const sat_s755d_entry;
         const 1;
         const 16;
 },
 sat_s755c_entry() //  [R1]
         { []
         }
     {offset
       c76WW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76WX; else goto c76WY;
       c76WX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76WY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755c_info" {
     sat_s755c_info:
         const sat_s755c_entry;
         const 1;
         const 16;
 },
 sat_s755b_entry() //  [R1]
         { []
         }
     {offset
       c76X3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76X4; else goto c76X5;
       c76X4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76X5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755b_info" {
     sat_s755b_info:
         const sat_s755b_entry;
         const 1;
         const 16;
 },
 sat_s755a_entry() //  [R1]
         { []
         }
     {offset
       c76Xa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Xb; else goto c76Xc;
       c76Xb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Xc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755a_info" {
     sat_s755a_info:
         const sat_s755a_entry;
         const 1;
         const 16;
 },
 sat_s7559_entry() //  [R1]
         { []
         }
     {offset
       c76Xh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Xi; else goto c76Xj;
       c76Xi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Xj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7559_info" {
     sat_s7559_info:
         const sat_s7559_entry;
         const 1;
         const 16;
 },
 sat_s7558_entry() //  [R1]
         { []
         }
     {offset
       c76Xo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Xp; else goto c76Xq;
       c76Xp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Xq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7558_info" {
     sat_s7558_info:
         const sat_s7558_entry;
         const 1;
         const 16;
 },
 sat_s7557_entry() //  [R1]
         { []
         }
     {offset
       c76Xv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Xw; else goto c76Xx;
       c76Xw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Xx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.testBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7557_info" {
     sat_s7557_info:
         const sat_s7557_entry;
         const 1;
         const 16;
 },
 sat_s7556_entry() //  [R1]
         { []
         }
     {offset
       c76XC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76XD; else goto c76XE;
       c76XD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76XE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complementBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7556_info" {
     sat_s7556_info:
         const sat_s7556_entry;
         const 1;
         const 16;
 },
 sat_s7555_entry() //  [R1]
         { []
         }
     {offset
       c76XJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76XK; else goto c76XL;
       c76XK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76XL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.clearBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7555_info" {
     sat_s7555_info:
         const sat_s7555_entry;
         const 1;
         const 16;
 },
 sat_s7554_entry() //  [R1]
         { []
         }
     {offset
       c76XQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76XR; else goto c76XS;
       c76XR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76XS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.setBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7554_info" {
     sat_s7554_info:
         const sat_s7554_entry;
         const 1;
         const 16;
 },
 sat_s7553_entry() //  [R1]
         { []
         }
     {offset
       c76XX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76XY; else goto c76XZ;
       c76XY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76XZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7553_info" {
     sat_s7553_info:
         const sat_s7553_entry;
         const 1;
         const 16;
 },
 sat_s7552_entry() //  [R1]
         { []
         }
     {offset
       c76Y4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Y5; else goto c76Y6;
       c76Y5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Y6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.zeroBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7552_info" {
     sat_s7552_info:
         const sat_s7552_entry;
         const 1;
         const 16;
 },
 sat_s7551_entry() //  [R1]
         { []
         }
     {offset
       c76Yb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Yc; else goto c76Yd;
       c76Yc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Yd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7551_info" {
     sat_s7551_info:
         const sat_s7551_entry;
         const 1;
         const 16;
 },
 sat_s7550_entry() //  [R1]
         { []
         }
     {offset
       c76Yi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Yj; else goto c76Yk;
       c76Yj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Yk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shift_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7550_info" {
     sat_s7550_info:
         const sat_s7550_entry;
         const 1;
         const 16;
 },
 sat_s754Z_entry() //  [R1]
         { []
         }
     {offset
       c76Yp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Yq; else goto c76Yr;
       c76Yq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Yr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complement_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754Z_info" {
     sat_s754Z_info:
         const sat_s754Z_entry;
         const 1;
         const 16;
 },
 sat_s754Y_entry() //  [R1]
         { []
         }
     {offset
       c76Yw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76Yx; else goto c76Yy;
       c76Yx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76Yy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.xor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754Y_info" {
     sat_s754Y_info:
         const sat_s754Y_entry;
         const 1;
         const 16;
 },
 sat_s754X_entry() //  [R1]
         { []
         }
     {offset
       c76YD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76YE; else goto c76YF;
       c76YE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76YF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..|._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754X_info" {
     sat_s754X_info:
         const sat_s754X_entry;
         const 1;
         const 16;
 },
 sat_s754W_entry() //  [R1]
         { []
         }
     {offset
       c76YK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76YL; else goto c76YM;
       c76YL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76YM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..&._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754W_info" {
     sat_s754W_info:
         const sat_s754W_entry;
         const 1;
         const 16;
 },
 sat_s754V_entry() //  [R1]
         { []
         }
     {offset
       c76YR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c76YS; else goto c76YT;
       c76YS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c76YT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fBitsConst_$cp1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s754V_info" {
     sat_s754V_info:
         const sat_s754V_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBitsConst_entry() //  [R2]
         { []
         }
     {offset
       c76YV: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto c76YZ; else goto c76YY;
       c76YZ: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Const.$fBitsConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c76YY: // global
           I64[Hp - 736] = sat_s755h_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_s755g_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_s755f_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_s755e_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_s755d_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_s755c_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_s755b_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_s755a_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_s7559_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_s7558_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_s7557_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_s7556_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_s7555_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_s7554_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_s7553_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_s7552_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s7551_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_s7550_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s754Z_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_s754Y_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s754X_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s754W_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s754V_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBitsConst_info" {
     Data.Functor.Const.$fBitsConst_info:
         const Data.Functor.Const.$fBitsConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.593287306 UTC

[section ""data" . Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure" {
     Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure:
         const Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info;
 },
 sat_s755j_entry() //  [R1]
         { []
         }
     {offset
       c7714: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7715; else goto c7716;
       c7715: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7716: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755j_info" {
     sat_s755j_info:
         const sat_s755j_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       c7717: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c771b; else goto c771a;
       c771b: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c771a: // global
           I64[Hp - 16] = sat_s755j_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fBitsConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info" {
     Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info:
         const Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.600092118 UTC

[section ""data" . Data.Functor.Const.$fFiniteBitsConst_closure" {
     Data.Functor.Const.$fFiniteBitsConst_closure:
         const Data.Functor.Const.$fFiniteBitsConst_info;
 },
 sat_s755o_entry() //  [R1]
         { []
         }
     {offset
       c771s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c771t; else goto c771u;
       c771t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c771u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countTrailingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755o_info" {
     sat_s755o_info:
         const sat_s755o_entry;
         const 1;
         const 16;
 },
 sat_s755n_entry() //  [R1]
         { []
         }
     {offset
       c771z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c771A; else goto c771B;
       c771A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c771B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countLeadingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755n_info" {
     sat_s755n_info:
         const sat_s755n_entry;
         const 1;
         const 16;
 },
 sat_s755m_entry() //  [R1]
         { []
         }
     {offset
       c771G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c771H; else goto c771I;
       c771H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c771I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755m_info" {
     sat_s755m_info:
         const sat_s755m_entry;
         const 1;
         const 16;
 },
 sat_s755l_entry() //  [R1]
         { []
         }
     {offset
       c771N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c771O; else goto c771P;
       c771O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c771P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s755l_info" {
     sat_s755l_info:
         const sat_s755l_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFiniteBitsConst_entry() //  [R2]
         { []
         }
     {offset
       c771R: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c771V; else goto c771U;
       c771V: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fFiniteBitsConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c771U: // global
           I64[Hp - 128] = sat_s755o_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s755n_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s755m_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s755l_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFiniteBitsConst_info" {
     Data.Functor.Const.$fFiniteBitsConst_info:
         const Data.Functor.Const.$fFiniteBitsConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.610907175 UTC

[section ""data" . Data.Functor.Const.getConst1_closure" {
     Data.Functor.Const.getConst1_closure:
         const Data.Functor.Const.getConst1_info;
 },
 Data.Functor.Const.getConst1_entry() //  [R2]
         { []
         }
     {offset
       c772p: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.getConst1_info" {
     Data.Functor.Const.getConst1_info:
         const Data.Functor.Const.getConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.614875287 UTC

[section ""data" . Data.Functor.Const.getConst_closure" {
     Data.Functor.Const.getConst_closure:
         const Data.Functor.Const.getConst_info;
 },
 Data.Functor.Const.getConst_entry() //  [R2]
         { []
         }
     {offset
       c772A: // global
           R2 = R2;
           call Data.Functor.Const.getConst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.getConst_info" {
     Data.Functor.Const.getConst_info:
         const Data.Functor.Const.getConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.618315476 UTC

[section ""cstring" . Data.Functor.Const.$trModule4_bytes" {
     Data.Functor.Const.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.620106033 UTC

[section ""data" . Data.Functor.Const.$trModule3_closure" {
     Data.Functor.Const.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.621784737 UTC

[section ""cstring" . Data.Functor.Const.$trModule2_bytes" {
     Data.Functor.Const.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.623565618 UTC

[section ""data" . Data.Functor.Const.$trModule1_closure" {
     Data.Functor.Const.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.625409776 UTC

[section ""data" . Data.Functor.Const.$trModule_closure" {
     Data.Functor.Const.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Const.$trModule3_closure+1;
         const Data.Functor.Const.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.627153177 UTC

[section ""data" . $krep_r74ZT_closure" {
     $krep_r74ZT_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.628935144 UTC

[section ""data" . $krep1_r74ZU_closure" {
     $krep1_r74ZU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.630698868 UTC

[section ""data" . $krep2_r74ZV_closure" {
     $krep2_r74ZV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r74ZU_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.632492157 UTC

[section ""data" . Data.Functor.Const.$tcConst1_closure" {
     Data.Functor.Const.$tcConst1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r74ZV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.634346726 UTC

[section ""data" . $krep3_r74ZW_closure" {
     $krep3_r74ZW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.636178312 UTC

[section ""data" . Data.Functor.Const.$tcConst2_closure" {
     Data.Functor.Const.$tcConst2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$fReadConst5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.638626246 UTC

[section ""data" . Data.Functor.Const.$tcConst_closure" {
     Data.Functor.Const.$tcConst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Const.$trModule_closure+1;
         const Data.Functor.Const.$tcConst2_closure+1;
         const Data.Functor.Const.$tcConst1_closure+4;
         const 18204097321285842582;
         const 16882168546145866005;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.64043001 UTC

[section ""data" . $krep4_r74ZX_closure" {
     $krep4_r74ZX_closure:
         const :_con_info;
         const $krep3_r74ZW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.642500043 UTC

[section ""data" . $krep5_r74ZY_closure" {
     $krep5_r74ZY_closure:
         const :_con_info;
         const $krep_r74ZT_closure+2;
         const $krep4_r74ZX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.644209519 UTC

[section ""data" . $krep6_r74ZZ_closure" {
     $krep6_r74ZZ_closure:
         const :_con_info;
         const $krep1_r74ZU_closure+2;
         const $krep5_r74ZY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.646024557 UTC

[section ""data" . $krep7_r7500_closure" {
     $krep7_r7500_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Const.$tcConst_closure+1;
         const $krep6_r74ZZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.647881547 UTC

[section ""data" . Data.Functor.Const.$tc'Const1_closure" {
     Data.Functor.Const.$tc'Const1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r74ZT_closure+2;
         const $krep7_r7500_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.649693756 UTC

[section ""cstring" . Data.Functor.Const.$tc'Const3_bytes" {
     Data.Functor.Const.$tc'Const3_bytes:
         I8[] [39,67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.651379064 UTC

[section ""data" . Data.Functor.Const.$tc'Const2_closure" {
     Data.Functor.Const.$tc'Const2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$tc'Const3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.653165753 UTC

[section ""data" . Data.Functor.Const.$tc'Const_closure" {
     Data.Functor.Const.$tc'Const_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Const.$trModule_closure+1;
         const Data.Functor.Const.$tc'Const2_closure+1;
         const Data.Functor.Const.$tc'Const1_closure+4;
         const 9035619270378585414;
         const 9797261638746114088;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:21.655240273 UTC

[section ""relreadonly" . S757l_srt" {
     S757l_srt:
         const Data.Functor.Const.$fReadConst4_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Const.$w$creadsPrec_closure;
         const Data.Functor.Const.$fReadConst_$creadsPrec_closure;
         const Data.Functor.Const.$fReadConst2_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Const.$fReadConst_$creadList_closure;
         const Data.Functor.Const.$w$creadListPrec_closure;
         const Data.Functor.Const.$fReadConst_closure;
         const Data.Functor.Const.$fShowConst1_closure;
         const Data.Functor.Const.$w$cshowsPrec_closure;
         const Data.Functor.Const.$fShowConst_$cshowsPrec_closure;
         const Data.Functor.Const.$fShowConst_$cshow_closure;
         const Data.Functor.Const.$fShowConst_$cshowList_closure;
         const Data.Functor.Const.$fShowConst_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Const.$fFoldableConst1_closure;
         const Data.Functor.Const.$fFoldableConst3_closure;
         const Data.Functor.Const.$fFoldableConst6_closure;
         const Data.Functor.Const.$fFoldableConst8_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const Data.Functor.Const.$fFunctorConst_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.92180807 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:24.922912632 UTC

[section ""data" . Data.Functor.Const.$fReadConst3_closure" {
     Data.Functor.Const.$fReadConst3_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.924546309 UTC

[section ""cstring" . Data.Functor.Const.$fReadConst5_bytes" {
     Data.Functor.Const.$fReadConst5_bytes:
         I8[] [67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.926883822 UTC

[section ""data" . Data.Functor.Const.$fReadConst4_closure" {
     Data.Functor.Const.$fReadConst4_closure:
         const Data.Functor.Const.$fReadConst4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fReadConst4_entry() //  [R1]
         { []
         }
     {offset
       c778y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c778z; else goto c778A;
       c778z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c778A: // global
           (_c778v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c778v::I64 == 0) goto c778x; else goto c778w;
       c778x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c778w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c778v::I64;
           R2 = Data.Functor.Const.$fReadConst5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst4_info" {
     Data.Functor.Const.$fReadConst4_info:
         const Data.Functor.Const.$fReadConst4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.935140433 UTC

[section ""data" . Data.Functor.Const.$w$creadsPrec_closure" {
     Data.Functor.Const.$w$creadsPrec_closure:
         const Data.Functor.Const.$w$creadsPrec_info;
         const 0;
 },
 go1_s773f_entry() //  [R1, R2]
         { []
         }
     {offset
       c779l: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c779m; else goto c779n;
       c779m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c779n: // global
           I64[Sp - 24] = block_c779e_info;
           _s773f::P64 = R1;
           _s773e::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s773e::P64;
           P64[Sp - 8] = _s773f::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u779F; else goto c779f;
       u779F: // global
           call _c779e(R1) args: 0, res: 0, upd: 0;
       c779f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s773f_info" {
     go1_s773f_info:
         const go1_s773f_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c779e() //  [R1]
         { []
         }
     {offset
       c779e: // global
           if (R1 & 7 == 1) goto c779i; else goto c779j;
       c779i: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c779j: // global
           I64[Sp] = block_c779t_info;
           _s773j::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s773j::P64;
           if (R1 & 7 != 0) goto u779E; else goto c779u;
       u779E: // global
           call _c779t(R1) args: 0, res: 0, upd: 0;
       c779u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c779e_info" {
     block_c779e_info:
         const _c779e;
         const 2;
         const 30;
 },
 _c779t() //  [R1]
         { []
         }
     {offset
       c779t: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c779D; else goto c779C;
       c779D: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c779C: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c779t_info" {
     block_c779t_info:
         const _c779t;
         const 2;
         const 30;
 },
 go_s7735_entry() //  [R1, R2]
         { []
         }
     {offset
       c779K: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c779L; else goto u77a5;
       c779L: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u77a5: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c778P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s7735_info" {
     go_s7735_info:
         const go_s7735_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S77av_srt;
 },
 _c778P() //  []
         { []
         }
     {offset
       c778P: // global
           _s7732::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_c778S_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7732::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u77a7; else goto c778T;
       u77a7: // global
           call _c778S(R1) args: 0, res: 0, upd: 0;
       c778T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c778S() //  [R1]
         { []
         }
     {offset
       c778S: // global
           if (R1 & 7 == 1) goto c779H; else goto c779I;
       c779H: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c779I: // global
           I64[Sp - 8] = block_c778Y_info;
           _s7739::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7739::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u77a8; else goto c778Z;
       u77a8: // global
           call _c778Y(R1) args: 0, res: 0, upd: 0;
       c778Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c778S_info" {
     block_c778S_info:
         const _c778S;
         const 2;
         const 4294967326;
         const S77av_srt;
 },
 _c778Y() //  [R1]
         { []
         }
     {offset
       c778Y: // global
           I64[Sp - 8] = block_c7793_info;
           R3 = Data.Functor.Const.$fReadConst4_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c778Y_info" {
     block_c778Y_info:
         const _c778Y;
         const 3;
         const 4294967326;
         const S77av_srt;
 },
 _c7793() //  [R1]
         { []
         }
     {offset
       c7793: // global
           _s7739::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c779U; else goto c779W;
       c779U: // global
           P64[Sp + 32] = _s7739::P64;
           Sp = Sp + 24;
           call _c778P() args: 0, res: 0, upd: 0;
       c779W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c779Z; else goto c779Y;
       c779Z: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c779Y: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _s7739::P64;
           I64[Hp - 8] = go1_s773f_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 24] = block_c779V_info;
           R2 = P64[Sp + 32];
           I64[Sp] = stg_ap_pp_info;
           _s773c::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp + 16] = _s773c::P64;
           P64[Sp + 32] = Hp - 7;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7793_info" {
     block_c7793_info:
         const _c7793;
         const 4;
         const 4294967326;
         const S77av_srt;
 },
 _c779V() //  [R1]
         { []
         }
     {offset
       c779V: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s773f_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c779V_info" {
     block_c779V_info:
         const _c779V;
         const 1;
         const 30;
 },
 sat_s773u_entry() //  [R1, R2]
         { []
         }
     {offset
       c77ai: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77aj; else goto c77ak;
       c77aj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ak: // global
           I64[Sp - 16] = block_c77ag_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773u_info" {
     sat_s773u_info:
         const sat_s773u_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S77av_srt;
 },
 _c77ag() //  [R1]
         { []
         }
     {offset
       c77ag: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s7735_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c77ag_info" {
     block_c77ag_info:
         const _c77ag;
         const 1;
         const 4294967326;
         const S77av_srt;
 },
 Data.Functor.Const.$w$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77aq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c77au; else goto c77at;
       c77au: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$w$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77at: // global
           I64[Hp - 24] = go_s7735_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s773u_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _s773r::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _s773r::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$creadsPrec_info" {
     Data.Functor.Const.$w$creadsPrec_info:
         const Data.Functor.Const.$w$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901909;
         const S77av_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.958226671 UTC

[section ""data" . Data.Functor.Const.$fReadConst_$creadsPrec_closure" {
     Data.Functor.Const.$fReadConst_$creadsPrec_closure:
         const Data.Functor.Const.$fReadConst_$creadsPrec_info;
         const 0;
 },
 Data.Functor.Const.$fReadConst_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77bX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c77bY; else goto c77bZ;
       c77bY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77bZ: // global
           I64[Sp - 24] = block_c77bU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u77c3; else goto c77bV;
       u77c3: // global
           call _c77bU(R1) args: 0, res: 0, upd: 0;
       c77bV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_$creadsPrec_info" {
     Data.Functor.Const.$fReadConst_$creadsPrec_info:
         const Data.Functor.Const.$fReadConst_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S77av_srt+24;
 },
 _c77bU() //  [R1]
         { []
         }
     {offset
       c77bU: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Const.$w$creadsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c77bU_info" {
     block_c77bU_info:
         const _c77bU;
         const 2;
         const 4294967326;
         const S77av_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.964345832 UTC

[section ""data" . Data.Functor.Const.$fReadConst2_closure" {
     Data.Functor.Const.$fReadConst2_closure:
         const Data.Functor.Const.$fReadConst2_info;
         const 0;
 },
 sat_s773D_entry() //  [R1, R2]
         { []
         }
     {offset
       c77cn: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$fReadConst_$creadsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773D_info" {
     sat_s773D_info:
         const sat_s773D_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S77av_srt+32;
 },
 Data.Functor.Const.$fReadConst2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77ct: // global
           _s773C::P64 = R4;
           _s773B::P64 = R3;
           _s773A::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c77cu; else goto c77cv;
       c77cv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77cx; else goto c77cw;
       c77cx: // global
           HpAlloc = 24;
           goto c77cu;
       c77cu: // global
           R4 = _s773C::P64;
           R3 = _s773B::P64;
           R2 = _s773A::P64;
           R1 = Data.Functor.Const.$fReadConst2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77cw: // global
           I64[Hp - 16] = sat_s773D_info;
           P64[Hp - 8] = _s773A::P64;
           P64[Hp] = _s773B::P64;
           I64[Sp - 8] = block_c77cq_info;
           R3 = _s773C::P64;
           R2 = Hp - 15;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst2_info" {
     Data.Functor.Const.$fReadConst2_info:
         const Data.Functor.Const.$fReadConst2_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S77av_srt+32;
 },
 _c77cq() //  [R1]
         { []
         }
     {offset
       c77cq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c77cA; else goto c77cz;
       c77cA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c77cz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c77cq_info" {
     block_c77cq_info:
         const _c77cq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.970933444 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst5_closure" {
     Data.Functor.Const.$fFoldableConst5_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.974551164 UTC

[section ""data" . Data.Functor.Const.$fReadConst_$creadList_closure" {
     Data.Functor.Const.$fReadConst_$creadList_closure:
         const Data.Functor.Const.$fReadConst_$creadList_info;
         const 0;
 },
 sat_s773H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77d4: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773H_info" {
     sat_s773H_info:
         const sat_s773H_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+40;
 },
 sat_s773I_entry() //  [R1]
         { []
         }
     {offset
       c77d7: // global
           _s773I::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c77d8; else goto c77d9;
       c77d9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c77db; else goto c77da;
       c77db: // global
           HpAlloc = 16;
           goto c77d8;
       c77d8: // global
           R1 = _s773I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77da: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s773I::P64;
           _s773G::P64 = P64[_s773I::P64 + 16];
           I64[Hp - 8] = sat_s773H_info;
           P64[Hp] = _s773G::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fFoldableConst5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s773I_info" {
     sat_s773I_info:
         const sat_s773I_entry;
         const 1;
         const 12884901904;
         const S77av_srt+40;
 },
 Data.Functor.Const.$fReadConst_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c77dc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77dg; else goto c77df;
       c77dg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77df: // global
           I64[Hp - 16] = sat_s773I_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_$creadList_info" {
     Data.Functor.Const.$fReadConst_$creadList_info:
         const Data.Functor.Const.$fReadConst_$creadList_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S77av_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.984382753 UTC

[section ""data" . Data.Functor.Const.$w$creadListPrec_closure" {
     Data.Functor.Const.$w$creadListPrec_closure:
         const Data.Functor.Const.$w$creadListPrec_info;
         const 0;
 },
 sat_s773L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77dN: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773L_info" {
     sat_s773L_info:
         const sat_s773L_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+40;
 },
 w1_s773K_entry() //  [R1]
         { []
         }
     {offset
       c77dQ: // global
           _s773K::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c77dR; else goto c77dS;
       c77dS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c77dU; else goto c77dT;
       c77dU: // global
           HpAlloc = 16;
           goto c77dR;
       c77dR: // global
           R1 = _s773K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77dT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s773K::P64;
           _s773J::P64 = P64[_s773K::P64 + 16];
           I64[Hp - 8] = sat_s773L_info;
           P64[Hp] = _s773J::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fFoldableConst5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_s773K_info" {
     w1_s773K_info:
         const w1_s773K_entry;
         const 1;
         const 12884901904;
         const S77av_srt+40;
 },
 w2_s773M_entry() //  [R1, R2]
         { []
         }
     {offset
       c77e0: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_s773M_info" {
     w2_s773M_info:
         const w2_s773M_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s773Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c77eb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c77ec; else goto c77ed;
       c77ec: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ed: // global
           I64[Sp - 8] = block_c77e8_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773Q_info" {
     sat_s773Q_info:
         const sat_s773Q_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c77e8() //  [R1]
         { []
         }
     {offset
       c77e8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c77eg; else goto c77ef;
       c77eg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c77ef: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c77e8_info" {
     block_c77e8_info:
         const _c77e8;
         const 0;
         const 30;
 },
 Data.Functor.Const.$w$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c77eh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c77el; else goto c77ek;
       c77el: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Const.$w$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ek: // global
           I64[Hp - 48] = w1_s773K_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w2_s773M_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s773Q_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$creadListPrec_info" {
     Data.Functor.Const.$w$creadListPrec_info:
         const Data.Functor.Const.$w$creadListPrec_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const S77av_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:24.99629805 UTC

[section ""data" . Data.Functor.Const.$fReadConst1_closure" {
     Data.Functor.Const.$fReadConst1_closure:
         const Data.Functor.Const.$fReadConst1_info;
         const 0;
 },
 Data.Functor.Const.$fReadConst1_entry() //  [R2]
         { []
         }
     {offset
       c77f0: // global
           R2 = R2;
           call Data.Functor.Const.$w$creadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst1_info" {
     Data.Functor.Const.$fReadConst1_info:
         const Data.Functor.Const.$fReadConst1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S77av_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.001507182 UTC

[section ""data" . Data.Functor.Const.$fReadConst_closure" {
     Data.Functor.Const.$fReadConst_closure:
         const Data.Functor.Const.$fReadConst_info;
         const 0;
 },
 lvl_s773U_entry() //  [R1]
         { []
         }
     {offset
       c77ff: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77fg; else goto c77fh;
       c77fg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77fh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$w$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s773U_info" {
     lvl_s773U_info:
         const lvl_s773U_entry;
         const 1;
         const 4294967312;
         const S77av_srt+64;
 },
 sat_s773Z_entry() //  [R1]
         { []
         }
     {offset
       c77fn: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773Z_info" {
     sat_s773Z_info:
         const sat_s773Z_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s773X_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77fv: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst2_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773X_info" {
     sat_s773X_info:
         const sat_s773X_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+40;
 },
 sat_s773W_entry() //  [R1]
         { []
         }
     {offset
       c77fC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77fD; else goto c77fE;
       c77fD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77fE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fReadConst_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s773W_info" {
     sat_s773W_info:
         const sat_s773W_entry;
         const 1;
         const 4294967312;
         const S77av_srt+56;
 },
 sat_s773V_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77fK: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fReadConst_$creadsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s773V_info" {
     sat_s773V_info:
         const sat_s773V_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+32;
 },
 Data.Functor.Const.$fReadConst_entry() //  [R2]
         { []
         }
     {offset
       c77fO: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c77fS; else goto c77fR;
       c77fS: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fReadConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77fR: // global
           I64[Hp - 128] = lvl_s773U_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s773Z_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_s773X_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s773W_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s773V_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fReadConst_info" {
     Data.Functor.Const.$fReadConst_info:
         const Data.Functor.Const.$fReadConst_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S77av_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.012386104 UTC

[section ""cstring" . Data.Functor.Const.$fShowConst2_bytes" {
     Data.Functor.Const.$fShowConst2_bytes:
         I8[] [67,111,110,115,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.014924926 UTC

[section ""data" . Data.Functor.Const.$fShowConst1_closure" {
     Data.Functor.Const.$fShowConst1_closure:
         const Data.Functor.Const.$fShowConst1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fShowConst1_entry() //  [R1]
         { []
         }
     {offset
       c77gz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77gA; else goto c77gB;
       c77gA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77gB: // global
           (_c77gw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c77gw::I64 == 0) goto c77gy; else goto c77gx;
       c77gy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c77gx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c77gw::I64;
           R2 = Data.Functor.Const.$fShowConst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst1_info" {
     Data.Functor.Const.$fShowConst1_info:
         const Data.Functor.Const.$fShowConst1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.022765447 UTC

[section ""data" . Data.Functor.Const.$w$cshowsPrec_closure" {
     Data.Functor.Const.$w$cshowsPrec_closure:
         const Data.Functor.Const.$w$cshowsPrec_info;
         const 0;
 },
 g_s7743_entry() //  [R1]
         { []
         }
     {offset
       c77gS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c77gT; else goto c77gU;
       c77gT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77gU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s7743_info" {
     g_s7743_info:
         const g_s7743_entry;
         const 2;
         const 18;
 },
 sat_s7746_entry() //  [R1]
         { []
         }
     {offset
       c77h7: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7746_info" {
     sat_s7746_info:
         const sat_s7746_entry;
         const 2;
         const 18;
 },
 sat_s7747_entry() //  [R1, R2]
         { []
         }
     {offset
       c77ha: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c77he; else goto c77hd;
       c77he: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77hd: // global
           _s7743::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s7746_info;
           P64[Hp - 8] = _s7743::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7747_info" {
     sat_s7747_info:
         const sat_s7747_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S77av_srt+80;
 },
 sat_s774a_entry() //  [R1]
         { []
         }
     {offset
       c77hu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77hy; else goto c77hx;
       c77hy: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77hx: // global
           _s7743::P64 = P64[R1 + 16];
           _s7748::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s7748::P64;
           R2 = Hp - 14;
           R1 = _s7743::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774a_info" {
     sat_s774a_info:
         const sat_s774a_entry;
         const 2;
         const 18;
 },
 sat_s774b_entry() //  [R1]
         { []
         }
     {offset
       c77hz: // global
           _s774b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c77hA; else goto c77hB;
       c77hB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c77hD; else goto c77hC;
       c77hD: // global
           HpAlloc = 32;
           goto c77hA;
       c77hA: // global
           R1 = _s774b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77hC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s774b::P64;
           _s7743::P64 = P64[_s774b::P64 + 16];
           _s7748::P64 = P64[_s774b::P64 + 24];
           I64[Hp - 24] = sat_s774a_info;
           P64[Hp - 8] = _s7743::P64;
           P64[Hp] = _s7748::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s774b_info" {
     sat_s774b_info:
         const sat_s774b_entry;
         const 2;
         const 4294967314;
         const S77av_srt+80;
 },
 sat_s774c_entry() //  [R1, R2]
         { []
         }
     {offset
       c77hF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c77hJ; else goto c77hI;
       c77hJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77hI: // global
           _s7743::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s774b_info;
           P64[Hp - 32] = _s7743::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774c_info" {
     sat_s774c_info:
         const sat_s774c_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S77av_srt+80;
 },
 Data.Functor.Const.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77hN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c77hR; else goto c77hQ;
       c77hR: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77hQ: // global
           I64[Hp - 40] = g_s7743_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _c77gO::P64 = Hp - 40;
           if (%MO_S_Le_W64(R3, 10)) goto c77hL; else goto c77hM;
       c77hL: // global
           I64[Hp - 8] = sat_s7747_info;
           P64[Hp] = _c77gO::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c77hM: // global
           I64[Hp - 8] = sat_s774c_info;
           P64[Hp] = _c77gO::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$w$cshowsPrec_info" {
     Data.Functor.Const.$w$cshowsPrec_info:
         const Data.Functor.Const.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S77av_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.037774399 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshowsPrec_closure" {
     Data.Functor.Const.$fShowConst_$cshowsPrec_closure:
         const Data.Functor.Const.$fShowConst_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Const.$fShowConst_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77iG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c77iH; else goto c77iI;
       c77iH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77iI: // global
           I64[Sp - 24] = block_c77iD_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u77iM; else goto c77iE;
       u77iM: // global
           call _c77iD(R1) args: 0, res: 0, upd: 0;
       c77iE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshowsPrec_info" {
     Data.Functor.Const.$fShowConst_$cshowsPrec_info:
         const Data.Functor.Const.$fShowConst_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S77av_srt+88;
 },
 _c77iD() //  [R1]
         { []
         }
     {offset
       c77iD: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Const.$w$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c77iD_info" {
     block_c77iD_info:
         const _c77iD;
         const 2;
         const 4294967326;
         const S77av_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.043643294 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshow_closure" {
     Data.Functor.Const.$fShowConst_$cshow_closure:
         const Data.Functor.Const.$fShowConst_$cshow_info;
         const 0;
 },
 sat_s774k_entry() //  [R1]
         { []
         }
     {offset
       c77j5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c77j6; else goto c77j7;
       c77j6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77j7: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Functor.Const.$fReadConst3_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774k_info" {
     sat_s774k_info:
         const sat_s774k_entry;
         const 2;
         const 18;
 },
 Data.Functor.Const.$fShowConst_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c77j8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c77jc; else goto c77jb;
       c77jc: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c77jb: // global
           I64[Hp - 24] = sat_s774k_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Functor.Const.$fShowConst1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshow_info" {
     Data.Functor.Const.$fShowConst_$cshow_info:
         const Data.Functor.Const.$fShowConst_$cshow_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S77av_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.050125762 UTC

[section ""data" . Data.Functor.Const.$fShowConst_$cshowList_closure" {
     Data.Functor.Const.$fShowConst_$cshowList_closure:
         const Data.Functor.Const.$fShowConst_$cshowList_info;
         const 0;
 },
 sat_s774p_entry() //  [R1, R2]
         { []
         }
     {offset
       c77jA: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$w$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774p_info" {
     sat_s774p_info:
         const sat_s774p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S77av_srt+88;
 },
 Data.Functor.Const.$fShowConst_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c77jD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c77jH; else goto c77jG;
       c77jH: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77jG: // global
           I64[Hp - 8] = sat_s774p_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_$cshowList_info" {
     Data.Functor.Const.$fShowConst_$cshowList_info:
         const Data.Functor.Const.$fShowConst_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S77av_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.056845854 UTC

[section ""data" . Data.Functor.Const.$fShowConst_closure" {
     Data.Functor.Const.$fShowConst_closure:
         const Data.Functor.Const.$fShowConst_info;
         const 0;
 },
 sat_s774t_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77jZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fShowConst_$cshowList_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774t_info" {
     sat_s774t_info:
         const sat_s774t_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+112;
 },
 sat_s774s_entry() //  [R1, R2]
         { []
         }
     {offset
       c77k7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Const.$fShowConst_$cshow_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774s_info" {
     sat_s774s_info:
         const sat_s774s_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S77av_srt+104;
 },
 sat_s774r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77kf: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Const.$fShowConst_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s774r_info" {
     sat_s774r_info:
         const sat_s774r_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S77av_srt+96;
 },
 Data.Functor.Const.$fShowConst_entry() //  [R2]
         { []
         }
     {offset
       c77kj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c77kn; else goto c77km;
       c77kn: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Const.$fShowConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77km: // global
           I64[Hp - 72] = sat_s774t_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s774s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s774r_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fShowConst_info" {
     Data.Functor.Const.$fShowConst_info:
         const Data.Functor.Const.$fShowConst_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S77av_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.064812157 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldMap_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldMap_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldMap_entry() //  [R2]
         { []
         }
     {offset
       c77kN: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldMap_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldMap_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.068663112 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfold_closure" {
     Data.Functor.Const.$fFoldableConst_$cfold_closure:
         const Data.Functor.Const.$fFoldableConst_$cfold_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfold_entry() //  [R2]
         { []
         }
     {offset
       c77kY: // global
           R2 = R2;
           call GHC.Base.mempty_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfold_info" {
     Data.Functor.Const.$fFoldableConst_$cfold_info:
         const Data.Functor.Const.$fFoldableConst_$cfold_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.071969871 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$csum_closure" {
     Data.Functor.Const.$fFoldableConst_$csum_closure:
         const Data.Functor.Const.$fFoldableConst_$csum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$csum_entry() //  [R2]
         { []
         }
     {offset
       c77l9: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidSum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$csum_info" {
     Data.Functor.Const.$fFoldableConst_$csum_info:
         const Data.Functor.Const.$fFoldableConst_$csum_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S77av_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.075106816 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst2_bytes" {
     Data.Functor.Const.$fFoldableConst2_bytes:
         I8[] [109,105,110,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.078130666 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst1_closure" {
     Data.Functor.Const.$fFoldableConst1_closure:
         const Data.Functor.Const.$fFoldableConst1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst1_entry() //  [R1]
         { []
         }
     {offset
       c77ln: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77lo; else goto c77lp;
       c77lo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77lp: // global
           (_c77lk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c77lk::I64 == 0) goto c77lm; else goto c77ll;
       c77lm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c77ll: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c77lk::I64;
           R2 = Data.Functor.Const.$fFoldableConst2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst1_info" {
     Data.Functor.Const.$fFoldableConst1_info:
         const Data.Functor.Const.$fFoldableConst1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.082801424 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cminimum_closure" {
     Data.Functor.Const.$fFoldableConst_$cminimum_closure:
         const Data.Functor.Const.$fFoldableConst_$cminimum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cminimum_entry() //  []
         { []
         }
     {offset
       c77lC: // global
           R2 = Data.Functor.Const.$fFoldableConst1_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cminimum_info" {
     Data.Functor.Const.$fFoldableConst_$cminimum_info:
         const Data.Functor.Const.$fFoldableConst_$cminimum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S77av_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.086459663 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst4_bytes" {
     Data.Functor.Const.$fFoldableConst4_bytes:
         I8[] [109,97,120,105,109,117,109,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.088601251 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst3_closure" {
     Data.Functor.Const.$fFoldableConst3_closure:
         const Data.Functor.Const.$fFoldableConst3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst3_entry() //  [R1]
         { []
         }
     {offset
       c77lQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77lR; else goto c77lS;
       c77lR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77lS: // global
           (_c77lN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c77lN::I64 == 0) goto c77lP; else goto c77lO;
       c77lP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c77lO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c77lN::I64;
           R2 = Data.Functor.Const.$fFoldableConst4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst3_info" {
     Data.Functor.Const.$fFoldableConst3_info:
         const Data.Functor.Const.$fFoldableConst3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.092433959 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cmaximum_closure" {
     Data.Functor.Const.$fFoldableConst_$cmaximum_closure:
         const Data.Functor.Const.$fFoldableConst_$cmaximum_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cmaximum_entry() //  []
         { []
         }
     {offset
       c77m5: // global
           R2 = Data.Functor.Const.$fFoldableConst3_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cmaximum_info" {
     Data.Functor.Const.$fFoldableConst_$cmaximum_info:
         const Data.Functor.Const.$fFoldableConst_$cmaximum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S77av_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.096325438 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$celem_closure" {
     Data.Functor.Const.$fFoldableConst_$celem_closure:
         const Data.Functor.Const.$fFoldableConst_$celem_info;
 },
 Data.Functor.Const.$fFoldableConst_$celem_entry() //  []
         { []
         }
     {offset
       c77mg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$celem_info" {
     Data.Functor.Const.$fFoldableConst_$celem_info:
         const Data.Functor.Const.$fFoldableConst_$celem_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.099705895 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldl_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldl_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldl_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldl_entry() //  [R3]
         { []
         }
     {offset
       c77mt: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldl_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldl_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.102760363 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst7_bytes" {
     Data.Functor.Const.$fFoldableConst7_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.105072661 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst6_closure" {
     Data.Functor.Const.$fFoldableConst6_closure:
         const Data.Functor.Const.$fFoldableConst6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst6_entry() //  [R1]
         { []
         }
     {offset
       c77mH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77mI; else goto c77mJ;
       c77mI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77mJ: // global
           (_c77mE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c77mE::I64 == 0) goto c77mG; else goto c77mF;
       c77mG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c77mF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c77mE::I64;
           R2 = Data.Functor.Const.$fFoldableConst7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst6_info" {
     Data.Functor.Const.$fFoldableConst6_info:
         const Data.Functor.Const.$fFoldableConst6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.109357848 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldl1_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldl1_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldl1_entry() //  []
         { []
         }
     {offset
       c77mW: // global
           R2 = Data.Functor.Const.$fFoldableConst6_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldl1_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldl1_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S77av_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.112756951 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldr'_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldr'_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_info;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldr'_entry() //  [R3]
         { []
         }
     {offset
       c77n7: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldr'_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldr'_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.116822017 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$clength_closure" {
     Data.Functor.Const.$fFoldableConst_$clength_closure:
         const Data.Functor.Const.$fFoldableConst_$clength_info;
 },
 Data.Functor.Const.$fFoldableConst_$clength_entry() //  []
         { []
         }
     {offset
       c77ni: // global
           R1 = Data.Functor.Const.$fFoldableConst5_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$clength_info" {
     Data.Functor.Const.$fFoldableConst_$clength_info:
         const Data.Functor.Const.$fFoldableConst_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.119825957 UTC

[section ""cstring" . Data.Functor.Const.$fFoldableConst9_bytes" {
     Data.Functor.Const.$fFoldableConst9_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,115,116,114,117,99,116,117,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.122391371 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst8_closure" {
     Data.Functor.Const.$fFoldableConst8_closure:
         const Data.Functor.Const.$fFoldableConst8_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst8_entry() //  [R1]
         { []
         }
     {offset
       c77nx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77ny; else goto c77nz;
       c77ny: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77nz: // global
           (_c77nu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c77nu::I64 == 0) goto c77nw; else goto c77nv;
       c77nw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c77nv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c77nu::I64;
           R2 = Data.Functor.Const.$fFoldableConst9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst8_info" {
     Data.Functor.Const.$fFoldableConst8_info:
         const Data.Functor.Const.$fFoldableConst8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.126804568 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cfoldr1_closure" {
     Data.Functor.Const.$fFoldableConst_$cfoldr1_closure:
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cfoldr1_entry() //  []
         { []
         }
     {offset
       c77nM: // global
           R2 = Data.Functor.Const.$fFoldableConst8_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cfoldr1_info" {
     Data.Functor.Const.$fFoldableConst_$cfoldr1_info:
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S77av_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.130610296 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cnull_closure" {
     Data.Functor.Const.$fFoldableConst_$cnull_closure:
         const Data.Functor.Const.$fFoldableConst_$cnull_info;
 },
 Data.Functor.Const.$fFoldableConst_$cnull_entry() //  []
         { []
         }
     {offset
       c77nX: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cnull_info" {
     Data.Functor.Const.$fFoldableConst_$cnull_info:
         const Data.Functor.Const.$fFoldableConst_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.134655358 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$cproduct_closure" {
     Data.Functor.Const.$fFoldableConst_$cproduct_closure:
         const Data.Functor.Const.$fFoldableConst_$cproduct_info;
         const 0;
 },
 Data.Functor.Const.$fFoldableConst_$cproduct_entry() //  [R2]
         { []
         }
     {offset
       c77oa: // global
           R2 = R2;
           call Data.Semigroup.Internal.$fMonoidProduct2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$cproduct_info" {
     Data.Functor.Const.$fFoldableConst_$cproduct_info:
         const Data.Functor.Const.$fFoldableConst_$cproduct_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S77av_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.137915977 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_$ctoList_closure" {
     Data.Functor.Const.$fFoldableConst_$ctoList_closure:
         const Data.Functor.Const.$fFoldableConst_$ctoList_info;
 },
 Data.Functor.Const.$fFoldableConst_$ctoList_entry() //  []
         { []
         }
     {offset
       c77ol: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFoldableConst_$ctoList_info" {
     Data.Functor.Const.$fFoldableConst_$ctoList_info:
         const Data.Functor.Const.$fFoldableConst_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.141308199 UTC

[section ""data" . Data.Functor.Const.$fFoldableConst_closure" {
     Data.Functor.Const.$fFoldableConst_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Functor.Const.$fFoldableConst_$cfold_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cfoldMap_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr'_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldl_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldl_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cfoldr1_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cfoldl1_closure+2;
         const Data.Functor.Const.$fFoldableConst_$ctoList_closure+1;
         const Data.Functor.Const.$fFoldableConst_$cnull_closure+1;
         const Data.Functor.Const.$fFoldableConst_$clength_closure+1;
         const Data.Functor.Const.$fFoldableConst_$celem_closure+3;
         const Data.Functor.Const.$fFoldableConst_$cmaximum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cminimum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$csum_closure+2;
         const Data.Functor.Const.$fFoldableConst_$cproduct_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.143567674 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst2_closure" {
     Data.Functor.Const.$fFunctorConst2_closure:
         const Data.Functor.Const.$fFunctorConst2_info;
 },
 Data.Functor.Const.$fFunctorConst2_entry() //  [R3]
         { []
         }
     {offset
       c77oz: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFunctorConst2_info" {
     Data.Functor.Const.$fFunctorConst2_info:
         const Data.Functor.Const.$fFunctorConst2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.147167824 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst1_closure" {
     Data.Functor.Const.$fFunctorConst1_closure:
         const Data.Functor.Const.$fFunctorConst1_info;
 },
 Data.Functor.Const.$fFunctorConst1_entry() //  [R3]
         { []
         }
     {offset
       c77oK: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFunctorConst1_info" {
     Data.Functor.Const.$fFunctorConst1_info:
         const Data.Functor.Const.$fFunctorConst1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.150808696 UTC

[section ""data" . Data.Functor.Const.$fFunctorConst_closure" {
     Data.Functor.Const.$fFunctorConst_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Const.$fFunctorConst2_closure+2;
         const Data.Functor.Const.$fFunctorConst1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.155336923 UTC

[section ""data" . Data.Functor.Const.$fApplicativeConst_closure" {
     Data.Functor.Const.$fApplicativeConst_closure:
         const Data.Functor.Const.$fApplicativeConst_info;
         const 0;
 },
 lvl_s7752_entry() //  [R1]
         { []
         }
     {offset
       c77p0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77p1; else goto c77p2;
       c77p1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77p2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s7752_info" {
     lvl_s7752_info:
         const lvl_s7752_entry;
         const 1;
         const 16;
 },
 sat_s775f_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77p8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c77p9; else goto c77pa;
       c77p9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c77pa: // global
           _s775d::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s775d::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s775f_info" {
     sat_s775f_info:
         const sat_s775f_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s775c_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c77pg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c77ph; else goto c77pi;
       c77ph: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c77pi: // global
           _s775a::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s775a::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s775c_info" {
     sat_s775c_info:
         const sat_s775c_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s7759_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c77po: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c77pp; else goto c77pq;
       c77pp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c77pq: // global
           R2 = P64[R1 + 5];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Base.mappend_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7759_info" {
     sat_s7759_info:
         const sat_s7759_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_s7755_entry() //  [R1]
         { []
         }
     {offset
       c77pv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77pw; else goto c77px;
       c77pw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77px: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7755_info" {
     sat_s7755_info:
         const sat_s7755_entry;
         const 1;
         const 16;
 },
 sat_s7754_entry() //  [R1]
         { []
         }
     {offset
       c77pD: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7754_info" {
     sat_s7754_info:
         const sat_s7754_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Const.$fApplicativeConst_entry() //  [R2]
         { []
         }
     {offset
       c77pH: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c77pL; else goto c77pK;
       c77pL: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Data.Functor.Const.$fApplicativeConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77pK: // global
           I64[Hp - 160] = lvl_s7752_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s775f_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s775c_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s7759_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s7755_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s7754_info;
           P64[Hp - 56] = Hp - 160;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Data.Functor.Const.$fFunctorConst_closure+1;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 101;
           P64[Hp - 8] = Hp - 118;
           P64[Hp] = Hp - 134;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fApplicativeConst_info" {
     Data.Functor.Const.$fApplicativeConst_info:
         const Data.Functor.Const.$fApplicativeConst_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S77av_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.172015946 UTC

[section ""data" . Data.Functor.Const.$fStorableConst_closure" {
     Data.Functor.Const.$fStorableConst_closure:
         const Data.Functor.Const.$fStorableConst_info;
 },
 sat_s775o_entry() //  [R1]
         { []
         }
     {offset
       c77qF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77qG; else goto c77qH;
       c77qG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77qH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775o_info" {
     sat_s775o_info:
         const sat_s775o_entry;
         const 1;
         const 16;
 },
 sat_s775n_entry() //  [R1]
         { []
         }
     {offset
       c77qM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77qN; else goto c77qO;
       c77qN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77qO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775n_info" {
     sat_s775n_info:
         const sat_s775n_entry;
         const 1;
         const 16;
 },
 sat_s775m_entry() //  [R1]
         { []
         }
     {offset
       c77qT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77qU; else goto c77qV;
       c77qU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77qV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775m_info" {
     sat_s775m_info:
         const sat_s775m_entry;
         const 1;
         const 16;
 },
 sat_s775l_entry() //  [R1]
         { []
         }
     {offset
       c77r0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77r1; else goto c77r2;
       c77r1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77r2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775l_info" {
     sat_s775l_info:
         const sat_s775l_entry;
         const 1;
         const 16;
 },
 sat_s775k_entry() //  [R1]
         { []
         }
     {offset
       c77r7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77r8; else goto c77r9;
       c77r8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77r9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775k_info" {
     sat_s775k_info:
         const sat_s775k_entry;
         const 1;
         const 16;
 },
 sat_s775j_entry() //  [R1]
         { []
         }
     {offset
       c77re: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77rf; else goto c77rg;
       c77rf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77rg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775j_info" {
     sat_s775j_info:
         const sat_s775j_entry;
         const 1;
         const 16;
 },
 sat_s775i_entry() //  [R1]
         { []
         }
     {offset
       c77rl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77rm; else goto c77rn;
       c77rm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77rn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775i_info" {
     sat_s775i_info:
         const sat_s775i_entry;
         const 1;
         const 16;
 },
 sat_s775h_entry() //  [R1]
         { []
         }
     {offset
       c77rs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77rt; else goto c77ru;
       c77rt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77ru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775h_info" {
     sat_s775h_info:
         const sat_s775h_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fStorableConst_entry() //  [R2]
         { []
         }
     {offset
       c77rw: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c77rA; else goto c77rz;
       c77rA: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fStorableConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77rz: // global
           I64[Hp - 256] = sat_s775o_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s775n_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s775m_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s775l_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s775k_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s775j_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s775i_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s775h_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fStorableConst_info" {
     Data.Functor.Const.$fStorableConst_info:
         const Data.Functor.Const.$fStorableConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.193527709 UTC

[section ""data" . Data.Functor.Const.$fNumConst_closure" {
     Data.Functor.Const.$fNumConst_closure:
         const Data.Functor.Const.$fNumConst_info;
 },
 sat_s775w_entry() //  [R1]
         { []
         }
     {offset
       c77sJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77sK; else goto c77sL;
       c77sK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77sL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775w_info" {
     sat_s775w_info:
         const sat_s775w_entry;
         const 1;
         const 16;
 },
 sat_s775v_entry() //  [R1]
         { []
         }
     {offset
       c77sQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77sR; else goto c77sS;
       c77sR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77sS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775v_info" {
     sat_s775v_info:
         const sat_s775v_entry;
         const 1;
         const 16;
 },
 sat_s775u_entry() //  [R1]
         { []
         }
     {offset
       c77sX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77sY; else goto c77sZ;
       c77sY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77sZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775u_info" {
     sat_s775u_info:
         const sat_s775u_entry;
         const 1;
         const 16;
 },
 sat_s775t_entry() //  [R1]
         { []
         }
     {offset
       c77t4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77t5; else goto c77t6;
       c77t5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77t6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775t_info" {
     sat_s775t_info:
         const sat_s775t_entry;
         const 1;
         const 16;
 },
 sat_s775s_entry() //  [R1]
         { []
         }
     {offset
       c77tb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77tc; else goto c77td;
       c77tc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77td: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775s_info" {
     sat_s775s_info:
         const sat_s775s_entry;
         const 1;
         const 16;
 },
 sat_s775r_entry() //  [R1]
         { []
         }
     {offset
       c77ti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77tj; else goto c77tk;
       c77tj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77tk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775r_info" {
     sat_s775r_info:
         const sat_s775r_entry;
         const 1;
         const 16;
 },
 sat_s775q_entry() //  [R1]
         { []
         }
     {offset
       c77tp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77tq; else goto c77tr;
       c77tq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77tr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775q_info" {
     sat_s775q_info:
         const sat_s775q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fNumConst_entry() //  [R2]
         { []
         }
     {offset
       c77tt: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c77tx; else goto c77tw;
       c77tx: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Const.$fNumConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77tw: // global
           I64[Hp - 224] = sat_s775w_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s775v_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s775u_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s775t_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s775s_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s775r_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s775q_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fNumConst_info" {
     Data.Functor.Const.$fNumConst_info:
         const Data.Functor.Const.$fNumConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.209188401 UTC

[section ""data" . Data.Functor.Const.$fRealConst_$cp1Real_closure" {
     Data.Functor.Const.$fRealConst_$cp1Real_closure:
         const Data.Functor.Const.$fRealConst_$cp1Real_info;
 },
 sat_s775y_entry() //  [R1]
         { []
         }
     {offset
       c77uz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77uA; else goto c77uB;
       c77uA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77uB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775y_info" {
     sat_s775y_info:
         const sat_s775y_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_$cp1Real_entry() //  [R2]
         { []
         }
     {offset
       c77uC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77uG; else goto c77uF;
       c77uG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_$cp1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77uF: // global
           I64[Hp - 16] = sat_s775y_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fNumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_$cp1Real_info" {
     Data.Functor.Const.$fRealConst_$cp1Real_info:
         const Data.Functor.Const.$fRealConst_$cp1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.216478346 UTC

[section ""data" . Data.Functor.Const.$fSemigroupConst_closure" {
     Data.Functor.Const.$fSemigroupConst_closure:
         const Data.Functor.Const.$fSemigroupConst_info;
 },
 sat_s775D_entry() //  [R1, R2]
         { []
         }
     {offset
       c77v0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77v1; else goto c77v2;
       c77v1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77v2: // global
           _s775C::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s775C::P64;
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s775D_info" {
     sat_s775D_info:
         const sat_s775D_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s775B_entry() //  [R1]
         { []
         }
     {offset
       c77v7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77v8; else goto c77v9;
       c77v8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77v9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775B_info" {
     sat_s775B_info:
         const sat_s775B_entry;
         const 1;
         const 16;
 },
 sat_s775A_entry() //  [R1]
         { []
         }
     {offset
       c77ve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77vf; else goto c77vg;
       c77vf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77vg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775A_info" {
     sat_s775A_info:
         const sat_s775A_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fSemigroupConst_entry() //  [R2]
         { []
         }
     {offset
       c77vi: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c77vm; else goto c77vl;
       c77vm: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = Data.Functor.Const.$fSemigroupConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77vl: // global
           I64[Hp - 88] = sat_s775D_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s775B_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s775A_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 87;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fSemigroupConst_info" {
     Data.Functor.Const.$fSemigroupConst_info:
         const Data.Functor.Const.$fSemigroupConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.225606764 UTC

[section ""data" . Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure" {
     Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure:
         const Data.Functor.Const.$fMonoidConst_$cp1Monoid_info;
 },
 sat_s775F_entry() //  [R1]
         { []
         }
     {offset
       c77vW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77vX; else goto c77vY;
       c77vX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77vY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775F_info" {
     sat_s775F_info:
         const sat_s775F_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c77vZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77w3; else goto c77w2;
       c77w3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fMonoidConst_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77w2: // global
           I64[Hp - 16] = sat_s775F_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fSemigroupConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fMonoidConst_$cp1Monoid_info" {
     Data.Functor.Const.$fMonoidConst_$cp1Monoid_info:
         const Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.233027998 UTC

[section ""data" . Data.Functor.Const.$fMonoidConst_closure" {
     Data.Functor.Const.$fMonoidConst_closure:
         const Data.Functor.Const.$fMonoidConst_info;
 },
 sat_s775K_entry() //  [R1]
         { []
         }
     {offset
       c77wm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77wn; else goto c77wo;
       c77wn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77wo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775K_info" {
     sat_s775K_info:
         const sat_s775K_entry;
         const 1;
         const 16;
 },
 sat_s775J_entry() //  [R1]
         { []
         }
     {offset
       c77wt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77wu; else goto c77wv;
       c77wu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77wv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775J_info" {
     sat_s775J_info:
         const sat_s775J_entry;
         const 1;
         const 16;
 },
 sat_s775I_entry() //  [R1]
         { []
         }
     {offset
       c77wA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77wB; else goto c77wC;
       c77wB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77wC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775I_info" {
     sat_s775I_info:
         const sat_s775I_entry;
         const 1;
         const 16;
 },
 sat_s775H_entry() //  [R1]
         { []
         }
     {offset
       c77wH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77wI; else goto c77wJ;
       c77wI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77wJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fMonoidConst_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775H_info" {
     sat_s775H_info:
         const sat_s775H_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fMonoidConst_entry() //  [R2]
         { []
         }
     {offset
       c77wL: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c77wP; else goto c77wO;
       c77wP: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fMonoidConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77wO: // global
           I64[Hp - 128] = sat_s775K_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s775J_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s775I_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s775H_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fMonoidConst_info" {
     Data.Functor.Const.$fMonoidConst_info:
         const Data.Functor.Const.$fMonoidConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.24350661 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const1_closure" {
     Data.Functor.Const.$fGeneric1Const1_closure:
         const Data.Functor.Const.$fGeneric1Const1_info;
 },
 Data.Functor.Const.$fGeneric1Const1_entry() //  [R2]
         { []
         }
     {offset
       c77xs: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGeneric1Const1_info" {
     Data.Functor.Const.$fGeneric1Const1_info:
         const Data.Functor.Const.$fGeneric1Const1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.247439181 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const2_closure" {
     Data.Functor.Const.$fGeneric1Const2_closure:
         const Data.Functor.Const.$fGeneric1Const2_info;
 },
 Data.Functor.Const.$fGeneric1Const2_entry() //  [R2]
         { []
         }
     {offset
       c77xD: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGeneric1Const2_info" {
     Data.Functor.Const.$fGeneric1Const2_info:
         const Data.Functor.Const.$fGeneric1Const2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.250951045 UTC

[section ""data" . Data.Functor.Const.$fGeneric1Const_closure" {
     Data.Functor.Const.$fGeneric1Const_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Const.$fGeneric1Const2_closure+1;
         const Data.Functor.Const.$fGeneric1Const1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.252769033 UTC

[section ""data" . Data.Functor.Const.$fGenericConst1_closure" {
     Data.Functor.Const.$fGenericConst1_closure:
         const Data.Functor.Const.$fGenericConst1_info;
 },
 Data.Functor.Const.$fGenericConst1_entry() //  [R2]
         { []
         }
     {offset
       c77xP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGenericConst1_info" {
     Data.Functor.Const.$fGenericConst1_info:
         const Data.Functor.Const.$fGenericConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.256135871 UTC

[section ""data" . Data.Functor.Const.$fGenericConst2_closure" {
     Data.Functor.Const.$fGenericConst2_closure:
         const Data.Functor.Const.$fGenericConst2_info;
 },
 Data.Functor.Const.$fGenericConst2_entry() //  [R2]
         { []
         }
     {offset
       c77y0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fGenericConst2_info" {
     Data.Functor.Const.$fGenericConst2_info:
         const Data.Functor.Const.$fGenericConst2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.259187059 UTC

[section ""data" . Data.Functor.Const.$fGenericConst_closure" {
     Data.Functor.Const.$fGenericConst_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Const.$fGenericConst2_closure+1;
         const Data.Functor.Const.$fGenericConst1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.26184407 UTC

[section ""data" . Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure" {
     Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure:
         const Data.Functor.Const.$fFractionalConst_$cp1Fractional_info;
 },
 sat_s775Q_entry() //  [R1]
         { []
         }
     {offset
       c77yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77yh; else goto c77yi;
       c77yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775Q_info" {
     sat_s775Q_info:
         const sat_s775Q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry() //  [R2]
         { []
         }
     {offset
       c77yj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77yn; else goto c77ym;
       c77yn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFractionalConst_$cp1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ym: // global
           I64[Hp - 16] = sat_s775Q_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fNumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFractionalConst_$cp1Fractional_info" {
     Data.Functor.Const.$fFractionalConst_$cp1Fractional_info:
         const Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.269073913 UTC

[section ""data" . Data.Functor.Const.$fFractionalConst_closure" {
     Data.Functor.Const.$fFractionalConst_closure:
         const Data.Functor.Const.$fFractionalConst_info;
 },
 sat_s775V_entry() //  [R1]
         { []
         }
     {offset
       c77yG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77yH; else goto c77yI;
       c77yH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77yI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775V_info" {
     sat_s775V_info:
         const sat_s775V_entry;
         const 1;
         const 16;
 },
 sat_s775U_entry() //  [R1]
         { []
         }
     {offset
       c77yN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77yO; else goto c77yP;
       c77yO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77yP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775U_info" {
     sat_s775U_info:
         const sat_s775U_entry;
         const 1;
         const 16;
 },
 sat_s775T_entry() //  [R1]
         { []
         }
     {offset
       c77yU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77yV; else goto c77yW;
       c77yV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77yW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real./_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775T_info" {
     sat_s775T_info:
         const sat_s775T_entry;
         const 1;
         const 16;
 },
 sat_s775S_entry() //  [R1]
         { []
         }
     {offset
       c77z1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77z2; else goto c77z3;
       c77z2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77z3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFractionalConst_$cp1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775S_info" {
     sat_s775S_info:
         const sat_s775S_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFractionalConst_entry() //  [R2]
         { []
         }
     {offset
       c77z5: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c77z9; else goto c77z8;
       c77z9: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fFractionalConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77z8: // global
           I64[Hp - 128] = sat_s775V_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s775U_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s775T_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s775S_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFractionalConst_info" {
     Data.Functor.Const.$fFractionalConst_info:
         const Data.Functor.Const.$fFractionalConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.280738753 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure" {
     Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure:
         const Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info;
 },
 sat_s775X_entry() //  [R1]
         { []
         }
     {offset
       c77zQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77zR; else goto c77zS;
       c77zR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77zS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775X_info" {
     sat_s775X_info:
         const sat_s775X_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c77zT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77zX; else goto c77zW;
       c77zX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_$cp2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77zW: // global
           I64[Hp - 16] = sat_s775X_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFractionalConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info" {
     Data.Functor.Const.$fRealFracConst_$cp2RealFrac_info:
         const Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.286710715 UTC

[section ""data" . Data.Functor.Const.$fFloatingConst_$cp1Floating_closure" {
     Data.Functor.Const.$fFloatingConst_$cp1Floating_closure:
         const Data.Functor.Const.$fFloatingConst_$cp1Floating_info;
 },
 sat_s775Z_entry() //  [R1]
         { []
         }
     {offset
       c77Ag: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ah; else goto c77Ai;
       c77Ah: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ai: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s775Z_info" {
     sat_s775Z_info:
         const sat_s775Z_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFloatingConst_$cp1Floating_entry() //  [R2]
         { []
         }
     {offset
       c77Aj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77An; else goto c77Am;
       c77An: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFloatingConst_$cp1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Am: // global
           I64[Hp - 16] = sat_s775Z_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFractionalConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFloatingConst_$cp1Floating_info" {
     Data.Functor.Const.$fFloatingConst_$cp1Floating_info:
         const Data.Functor.Const.$fFloatingConst_$cp1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.300065299 UTC

[section ""data" . Data.Functor.Const.$fFloatingConst_closure" {
     Data.Functor.Const.$fFloatingConst_closure:
         const Data.Functor.Const.$fFloatingConst_info;
 },
 sat_s776n_entry() //  [R1]
         { []
         }
     {offset
       c77AG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77AH; else goto c77AI;
       c77AH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77AI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1mexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776n_info" {
     sat_s776n_info:
         const sat_s776n_entry;
         const 1;
         const 16;
 },
 sat_s776m_entry() //  [R1]
         { []
         }
     {offset
       c77AN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77AO; else goto c77AP;
       c77AO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77AP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1pexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776m_info" {
     sat_s776m_info:
         const sat_s776m_entry;
         const 1;
         const 16;
 },
 sat_s776l_entry() //  [R1]
         { []
         }
     {offset
       c77AU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77AV; else goto c77AW;
       c77AV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77AW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.expm1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776l_info" {
     sat_s776l_info:
         const sat_s776l_entry;
         const 1;
         const 16;
 },
 sat_s776k_entry() //  [R1]
         { []
         }
     {offset
       c77B1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77B2; else goto c77B3;
       c77B2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77B3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776k_info" {
     sat_s776k_info:
         const sat_s776k_entry;
         const 1;
         const 16;
 },
 sat_s776j_entry() //  [R1]
         { []
         }
     {offset
       c77B8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77B9; else goto c77Ba;
       c77B9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ba: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776j_info" {
     sat_s776j_info:
         const sat_s776j_entry;
         const 1;
         const 16;
 },
 sat_s776i_entry() //  [R1]
         { []
         }
     {offset
       c77Bf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Bg; else goto c77Bh;
       c77Bg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Bh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776i_info" {
     sat_s776i_info:
         const sat_s776i_entry;
         const 1;
         const 16;
 },
 sat_s776h_entry() //  [R1]
         { []
         }
     {offset
       c77Bm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Bn; else goto c77Bo;
       c77Bn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Bo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776h_info" {
     sat_s776h_info:
         const sat_s776h_entry;
         const 1;
         const 16;
 },
 sat_s776g_entry() //  [R1]
         { []
         }
     {offset
       c77Bt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Bu; else goto c77Bv;
       c77Bu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Bv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776g_info" {
     sat_s776g_info:
         const sat_s776g_entry;
         const 1;
         const 16;
 },
 sat_s776f_entry() //  [R1]
         { []
         }
     {offset
       c77BA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77BB; else goto c77BC;
       c77BB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77BC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776f_info" {
     sat_s776f_info:
         const sat_s776f_entry;
         const 1;
         const 16;
 },
 sat_s776e_entry() //  [R1]
         { []
         }
     {offset
       c77BH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77BI; else goto c77BJ;
       c77BI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77BJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776e_info" {
     sat_s776e_info:
         const sat_s776e_entry;
         const 1;
         const 16;
 },
 sat_s776d_entry() //  [R1]
         { []
         }
     {offset
       c77BO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77BP; else goto c77BQ;
       c77BP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77BQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776d_info" {
     sat_s776d_info:
         const sat_s776d_entry;
         const 1;
         const 16;
 },
 sat_s776c_entry() //  [R1]
         { []
         }
     {offset
       c77BV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77BW; else goto c77BX;
       c77BW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77BX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776c_info" {
     sat_s776c_info:
         const sat_s776c_entry;
         const 1;
         const 16;
 },
 sat_s776b_entry() //  [R1]
         { []
         }
     {offset
       c77C2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77C3; else goto c77C4;
       c77C3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77C4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776b_info" {
     sat_s776b_info:
         const sat_s776b_entry;
         const 1;
         const 16;
 },
 sat_s776a_entry() //  [R1]
         { []
         }
     {offset
       c77C9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ca; else goto c77Cb;
       c77Ca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Cb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776a_info" {
     sat_s776a_info:
         const sat_s776a_entry;
         const 1;
         const 16;
 },
 sat_s7769_entry() //  [R1]
         { []
         }
     {offset
       c77Cg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ch; else goto c77Ci;
       c77Ch: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ci: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7769_info" {
     sat_s7769_info:
         const sat_s7769_entry;
         const 1;
         const 16;
 },
 sat_s7768_entry() //  [R1]
         { []
         }
     {offset
       c77Cn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Co; else goto c77Cp;
       c77Co: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Cp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7768_info" {
     sat_s7768_info:
         const sat_s7768_entry;
         const 1;
         const 16;
 },
 sat_s7767_entry() //  [R1]
         { []
         }
     {offset
       c77Cu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Cv; else goto c77Cw;
       c77Cv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Cw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.logBase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7767_info" {
     sat_s7767_info:
         const sat_s7767_entry;
         const 1;
         const 16;
 },
 sat_s7766_entry() //  [R1]
         { []
         }
     {offset
       c77CB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77CC; else goto c77CD;
       c77CC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77CD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.**_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7766_info" {
     sat_s7766_info:
         const sat_s7766_entry;
         const 1;
         const 16;
 },
 sat_s7765_entry() //  [R1]
         { []
         }
     {offset
       c77CI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77CJ; else goto c77CK;
       c77CJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77CK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sqrt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7765_info" {
     sat_s7765_info:
         const sat_s7765_entry;
         const 1;
         const 16;
 },
 sat_s7764_entry() //  [R1]
         { []
         }
     {offset
       c77CP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77CQ; else goto c77CR;
       c77CQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77CR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7764_info" {
     sat_s7764_info:
         const sat_s7764_entry;
         const 1;
         const 16;
 },
 sat_s7763_entry() //  [R1]
         { []
         }
     {offset
       c77CW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77CX; else goto c77CY;
       c77CX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77CY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7763_info" {
     sat_s7763_info:
         const sat_s7763_entry;
         const 1;
         const 16;
 },
 sat_s7762_entry() //  [R1]
         { []
         }
     {offset
       c77D3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77D4; else goto c77D5;
       c77D4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77D5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7762_info" {
     sat_s7762_info:
         const sat_s7762_entry;
         const 1;
         const 16;
 },
 sat_s7761_entry() //  [R1]
         { []
         }
     {offset
       c77Da: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Db; else goto c77Dc;
       c77Db: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Dc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFloatingConst_$cp1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7761_info" {
     sat_s7761_info:
         const sat_s7761_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFloatingConst_entry() //  [R2]
         { []
         }
     {offset
       c77De: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto c77Di; else goto c77Dh;
       c77Di: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Const.$fFloatingConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Dh: // global
           I64[Hp - 736] = sat_s776n_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_s776m_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_s776l_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_s776k_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_s776j_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_s776i_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_s776h_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_s776g_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_s776f_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_s776e_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_s776d_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_s776c_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_s776b_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_s776a_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_s7769_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_s7768_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s7767_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_s7766_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s7765_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_s7764_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s7763_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s7762_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s7761_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFloatingConst_info" {
     Data.Functor.Const.$fFloatingConst_info:
         const Data.Functor.Const.$fFloatingConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.344350397 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure" {
     Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure:
         const Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info;
 },
 sat_s776p_entry() //  [R1]
         { []
         }
     {offset
       c77G8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77G9; else goto c77Ga;
       c77G9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ga: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776p_info" {
     sat_s776p_info:
         const sat_s776p_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c77Gb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77Gf; else goto c77Ge;
       c77Gf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Ge: // global
           I64[Hp - 16] = sat_s776p_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fFloatingConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info" {
     Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_info:
         const Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.351744881 UTC

[section ""data" . Data.Functor.Const.$fEqConst_closure" {
     Data.Functor.Const.$fEqConst_closure:
         const Data.Functor.Const.$fEqConst_info;
 },
 sat_s776s_entry() //  [R1]
         { []
         }
     {offset
       c77Gy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Gz; else goto c77GA;
       c77Gz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77GA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776s_info" {
     sat_s776s_info:
         const sat_s776s_entry;
         const 1;
         const 16;
 },
 sat_s776r_entry() //  [R1]
         { []
         }
     {offset
       c77GF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77GG; else goto c77GH;
       c77GG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77GH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776r_info" {
     sat_s776r_info:
         const sat_s776r_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fEqConst_entry() //  [R2]
         { []
         }
     {offset
       c77GJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c77GN; else goto c77GM;
       c77GN: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Const.$fEqConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77GM: // global
           I64[Hp - 64] = sat_s776s_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s776r_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fEqConst_info" {
     Data.Functor.Const.$fEqConst_info:
         const Data.Functor.Const.$fEqConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.359191735 UTC

[section ""data" . Data.Functor.Const.$fOrdConst_$cp1Ord_closure" {
     Data.Functor.Const.$fOrdConst_$cp1Ord_closure:
         const Data.Functor.Const.$fOrdConst_$cp1Ord_info;
 },
 sat_s776u_entry() //  [R1]
         { []
         }
     {offset
       c77Hg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Hh; else goto c77Hi;
       c77Hh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Hi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776u_info" {
     sat_s776u_info:
         const sat_s776u_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fOrdConst_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c77Hj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77Hn; else goto c77Hm;
       c77Hn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fOrdConst_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Hm: // global
           I64[Hp - 16] = sat_s776u_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEqConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fOrdConst_$cp1Ord_info" {
     Data.Functor.Const.$fOrdConst_$cp1Ord_info:
         const Data.Functor.Const.$fOrdConst_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.367552848 UTC

[section ""data" . Data.Functor.Const.$fOrdConst_closure" {
     Data.Functor.Const.$fOrdConst_closure:
         const Data.Functor.Const.$fOrdConst_info;
 },
 sat_s776D_entry() //  [R1]
         { []
         }
     {offset
       c77HG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77HH; else goto c77HI;
       c77HH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77HI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776D_info" {
     sat_s776D_info:
         const sat_s776D_entry;
         const 1;
         const 16;
 },
 sat_s776C_entry() //  [R1]
         { []
         }
     {offset
       c77HN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77HO; else goto c77HP;
       c77HO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77HP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776C_info" {
     sat_s776C_info:
         const sat_s776C_entry;
         const 1;
         const 16;
 },
 sat_s776B_entry() //  [R1]
         { []
         }
     {offset
       c77HU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77HV; else goto c77HW;
       c77HV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77HW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776B_info" {
     sat_s776B_info:
         const sat_s776B_entry;
         const 1;
         const 16;
 },
 sat_s776A_entry() //  [R1]
         { []
         }
     {offset
       c77I1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77I2; else goto c77I3;
       c77I2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77I3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776A_info" {
     sat_s776A_info:
         const sat_s776A_entry;
         const 1;
         const 16;
 },
 sat_s776z_entry() //  [R1]
         { []
         }
     {offset
       c77I8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77I9; else goto c77Ia;
       c77I9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776z_info" {
     sat_s776z_info:
         const sat_s776z_entry;
         const 1;
         const 16;
 },
 sat_s776y_entry() //  [R1]
         { []
         }
     {offset
       c77If: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ig; else goto c77Ih;
       c77Ig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776y_info" {
     sat_s776y_info:
         const sat_s776y_entry;
         const 1;
         const 16;
 },
 sat_s776x_entry() //  [R1]
         { []
         }
     {offset
       c77Im: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77In; else goto c77Io;
       c77In: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Io: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776x_info" {
     sat_s776x_info:
         const sat_s776x_entry;
         const 1;
         const 16;
 },
 sat_s776w_entry() //  [R1]
         { []
         }
     {offset
       c77It: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Iu; else goto c77Iv;
       c77Iu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Iv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fOrdConst_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776w_info" {
     sat_s776w_info:
         const sat_s776w_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fOrdConst_entry() //  [R2]
         { []
         }
     {offset
       c77Ix: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c77IB; else goto c77IA;
       c77IB: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fOrdConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77IA: // global
           I64[Hp - 256] = sat_s776D_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s776C_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s776B_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s776A_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s776z_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s776y_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s776x_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s776w_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fOrdConst_info" {
     Data.Functor.Const.$fOrdConst_info:
         const Data.Functor.Const.$fOrdConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.386299183 UTC

[section ""data" . Data.Functor.Const.$fIxConst_$cp1Ix_closure" {
     Data.Functor.Const.$fIxConst_$cp1Ix_closure:
         const Data.Functor.Const.$fIxConst_$cp1Ix_info;
 },
 sat_s776F_entry() //  [R1]
         { []
         }
     {offset
       c77JK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77JL; else goto c77JM;
       c77JL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77JM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776F_info" {
     sat_s776F_info:
         const sat_s776F_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIxConst_$cp1Ix_entry() //  [R2]
         { []
         }
     {offset
       c77JN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77JR; else goto c77JQ;
       c77JR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIxConst_$cp1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77JQ: // global
           I64[Hp - 16] = sat_s776F_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fOrdConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIxConst_$cp1Ix_info" {
     Data.Functor.Const.$fIxConst_$cp1Ix_info:
         const Data.Functor.Const.$fIxConst_$cp1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.39408344 UTC

[section ""data" . Data.Functor.Const.$fIxConst_closure" {
     Data.Functor.Const.$fIxConst_closure:
         const Data.Functor.Const.$fIxConst_info;
 },
 sat_s776N_entry() //  [R1]
         { []
         }
     {offset
       c77Ka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Kb; else goto c77Kc;
       c77Kb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Kc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776N_info" {
     sat_s776N_info:
         const sat_s776N_entry;
         const 1;
         const 16;
 },
 sat_s776M_entry() //  [R1]
         { []
         }
     {offset
       c77Kh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ki; else goto c77Kj;
       c77Ki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Kj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776M_info" {
     sat_s776M_info:
         const sat_s776M_entry;
         const 1;
         const 16;
 },
 sat_s776L_entry() //  [R1]
         { []
         }
     {offset
       c77Ko: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Kp; else goto c77Kq;
       c77Kp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Kq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776L_info" {
     sat_s776L_info:
         const sat_s776L_entry;
         const 1;
         const 16;
 },
 sat_s776K_entry() //  [R1]
         { []
         }
     {offset
       c77Kv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Kw; else goto c77Kx;
       c77Kw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Kx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776K_info" {
     sat_s776K_info:
         const sat_s776K_entry;
         const 1;
         const 16;
 },
 sat_s776J_entry() //  [R1]
         { []
         }
     {offset
       c77KC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77KD; else goto c77KE;
       c77KD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77KE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776J_info" {
     sat_s776J_info:
         const sat_s776J_entry;
         const 1;
         const 16;
 },
 sat_s776I_entry() //  [R1]
         { []
         }
     {offset
       c77KJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77KK; else goto c77KL;
       c77KK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77KL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776I_info" {
     sat_s776I_info:
         const sat_s776I_entry;
         const 1;
         const 16;
 },
 sat_s776H_entry() //  [R1]
         { []
         }
     {offset
       c77KQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77KR; else goto c77KS;
       c77KR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77KS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIxConst_$cp1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776H_info" {
     sat_s776H_info:
         const sat_s776H_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIxConst_entry() //  [R2]
         { []
         }
     {offset
       c77KU: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c77KY; else goto c77KX;
       c77KY: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Const.$fIxConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77KX: // global
           I64[Hp - 224] = sat_s776N_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s776M_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s776L_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s776K_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s776J_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s776I_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s776H_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIxConst_info" {
     Data.Functor.Const.$fIxConst_info:
         const Data.Functor.Const.$fIxConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.410305502 UTC

[section ""data" . Data.Functor.Const.$fRealConst_$cp2Real_closure" {
     Data.Functor.Const.$fRealConst_$cp2Real_closure:
         const Data.Functor.Const.$fRealConst_$cp2Real_info;
 },
 sat_s776P_entry() //  [R1]
         { []
         }
     {offset
       c77M0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77M1; else goto c77M2;
       c77M1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77M2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776P_info" {
     sat_s776P_info:
         const sat_s776P_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_$cp2Real_entry() //  [R2]
         { []
         }
     {offset
       c77M3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77M7; else goto c77M6;
       c77M7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_$cp2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77M6: // global
           I64[Hp - 16] = sat_s776P_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fOrdConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_$cp2Real_info" {
     Data.Functor.Const.$fRealConst_$cp2Real_info:
         const Data.Functor.Const.$fRealConst_$cp2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.418043666 UTC

[section ""data" . Data.Functor.Const.$fRealConst_closure" {
     Data.Functor.Const.$fRealConst_closure:
         const Data.Functor.Const.$fRealConst_info;
 },
 sat_s776T_entry() //  [R1]
         { []
         }
     {offset
       c77Mq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Mr; else goto c77Ms;
       c77Mr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ms: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776T_info" {
     sat_s776T_info:
         const sat_s776T_entry;
         const 1;
         const 16;
 },
 sat_s776S_entry() //  [R1]
         { []
         }
     {offset
       c77Mx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77My; else goto c77Mz;
       c77My: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Mz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealConst_$cp2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776S_info" {
     sat_s776S_info:
         const sat_s776S_entry;
         const 1;
         const 16;
 },
 sat_s776R_entry() //  [R1]
         { []
         }
     {offset
       c77ME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77MF; else goto c77MG;
       c77MF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77MG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealConst_$cp1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776R_info" {
     sat_s776R_info:
         const sat_s776R_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealConst_entry() //  [R2]
         { []
         }
     {offset
       c77MI: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c77MM; else goto c77ML;
       c77MM: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ML: // global
           I64[Hp - 96] = sat_s776T_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s776S_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s776R_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealConst_info" {
     Data.Functor.Const.$fRealConst_info:
         const Data.Functor.Const.$fRealConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.427180375 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_$cp1Integral_closure" {
     Data.Functor.Const.$fIntegralConst_$cp1Integral_closure:
         const Data.Functor.Const.$fIntegralConst_$cp1Integral_info;
 },
 sat_s776V_entry() //  [R1]
         { []
         }
     {offset
       c77Nm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Nn; else goto c77No;
       c77Nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77No: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776V_info" {
     sat_s776V_info:
         const sat_s776V_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_$cp1Integral_entry() //  [R2]
         { []
         }
     {offset
       c77Np: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77Nt; else goto c77Ns;
       c77Nt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_$cp1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Ns: // global
           I64[Hp - 16] = sat_s776V_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_$cp1Integral_info" {
     Data.Functor.Const.$fIntegralConst_$cp1Integral_info:
         const Data.Functor.Const.$fIntegralConst_$cp1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.433109601 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure" {
     Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure:
         const Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info;
 },
 sat_s776X_entry() //  [R1]
         { []
         }
     {offset
       c77NM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77NN; else goto c77NO;
       c77NN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77NO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776X_info" {
     sat_s776X_info:
         const sat_s776X_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c77NP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77NT; else goto c77NS;
       c77NT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_$cp1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77NS: // global
           I64[Hp - 16] = sat_s776X_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info" {
     Data.Functor.Const.$fRealFracConst_$cp1RealFrac_info:
         const Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.441683655 UTC

[section ""data" . Data.Functor.Const.$fRealFracConst_closure" {
     Data.Functor.Const.$fRealFracConst_closure:
         const Data.Functor.Const.$fRealFracConst_info;
 },
 sat_s777a_entry() //  [R1, R2]
         { []
         }
     {offset
       c77Od: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Oe; else goto c77Of;
       c77Oe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Of: // global
           _s7779::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7779::P64;
           Sp = Sp - 16;
           call GHC.Real.floor_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s777a_info" {
     sat_s777a_info:
         const sat_s777a_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7778_entry() //  [R1, R2]
         { []
         }
     {offset
       c77Ol: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Om; else goto c77On;
       c77Om: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77On: // global
           _s7777::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7777::P64;
           Sp = Sp - 16;
           call GHC.Real.ceiling_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7778_info" {
     sat_s7778_info:
         const sat_s7778_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7776_entry() //  [R1, R2]
         { []
         }
     {offset
       c77Ot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ou; else goto c77Ov;
       c77Ou: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Ov: // global
           _s7775::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7775::P64;
           Sp = Sp - 16;
           call GHC.Real.round_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7776_info" {
     sat_s7776_info:
         const sat_s7776_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7774_entry() //  [R1, R2]
         { []
         }
     {offset
       c77OB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77OC; else goto c77OD;
       c77OC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77OD: // global
           _s7773::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7773::P64;
           Sp = Sp - 16;
           call GHC.Real.truncate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7774_info" {
     sat_s7774_info:
         const sat_s7774_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7772_entry() //  [R1, R2]
         { []
         }
     {offset
       c77OJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77OK; else goto c77OL;
       c77OK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77OL: // global
           _s7771::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s7771::P64;
           Sp = Sp - 16;
           call GHC.Real.properFraction_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7772_info" {
     sat_s7772_info:
         const sat_s7772_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s7770_entry() //  [R1]
         { []
         }
     {offset
       c77OQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77OR; else goto c77OS;
       c77OR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77OS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFracConst_$cp2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7770_info" {
     sat_s7770_info:
         const sat_s7770_entry;
         const 1;
         const 16;
 },
 sat_s776Z_entry() //  [R1]
         { []
         }
     {offset
       c77OX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77OY; else goto c77OZ;
       c77OY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77OZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFracConst_$cp1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s776Z_info" {
     sat_s776Z_info:
         const sat_s776Z_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFracConst_entry() //  [R2]
         { []
         }
     {offset
       c77P1: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c77P5; else goto c77P4;
       c77P5: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFracConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77P4: // global
           I64[Hp - 184] = sat_s777a_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s7778_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s7776_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s7774_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s7772_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s7770_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s776Z_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 119;
           P64[Hp - 24] = Hp - 135;
           P64[Hp - 16] = Hp - 151;
           P64[Hp - 8] = Hp - 167;
           P64[Hp] = Hp - 183;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFracConst_info" {
     Data.Functor.Const.$fRealFracConst_info:
         const Data.Functor.Const.$fRealFracConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.458605754 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure" {
     Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure:
         const Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info;
 },
 sat_s777c_entry() //  [R1]
         { []
         }
     {offset
       c77Q7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Q8; else goto c77Q9;
       c77Q8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Q9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777c_info" {
     sat_s777c_info:
         const sat_s777c_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c77Qa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77Qe; else goto c77Qd;
       c77Qe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Qd: // global
           I64[Hp - 16] = sat_s777c_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fRealFracConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info" {
     Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_info:
         const Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.469810656 UTC

[section ""data" . Data.Functor.Const.$fRealFloatConst_closure" {
     Data.Functor.Const.$fRealFloatConst_closure:
         const Data.Functor.Const.$fRealFloatConst_info;
 },
 sat_s777t_entry() //  [R1]
         { []
         }
     {offset
       c77Qx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Qy; else goto c77Qz;
       c77Qy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Qz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777t_info" {
     sat_s777t_info:
         const sat_s777t_entry;
         const 1;
         const 16;
 },
 sat_s777s_entry() //  [R1]
         { []
         }
     {offset
       c77QE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77QF; else goto c77QG;
       c77QF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77QG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isIEEE_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777s_info" {
     sat_s777s_info:
         const sat_s777s_entry;
         const 1;
         const 16;
 },
 sat_s777r_entry() //  [R1]
         { []
         }
     {offset
       c77QL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77QM; else goto c77QN;
       c77QM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77QN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777r_info" {
     sat_s777r_info:
         const sat_s777r_entry;
         const 1;
         const 16;
 },
 sat_s777q_entry() //  [R1]
         { []
         }
     {offset
       c77QS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77QT; else goto c77QU;
       c77QT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77QU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isDenormalized_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777q_info" {
     sat_s777q_info:
         const sat_s777q_entry;
         const 1;
         const 16;
 },
 sat_s777p_entry() //  [R1]
         { []
         }
     {offset
       c77QZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77R0; else goto c77R1;
       c77R0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77R1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777p_info" {
     sat_s777p_info:
         const sat_s777p_entry;
         const 1;
         const 16;
 },
 sat_s777o_entry() //  [R1]
         { []
         }
     {offset
       c77R6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77R7; else goto c77R8;
       c77R7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77R8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777o_info" {
     sat_s777o_info:
         const sat_s777o_entry;
         const 1;
         const 16;
 },
 sat_s777n_entry() //  [R1]
         { []
         }
     {offset
       c77Rd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Re; else goto c77Rf;
       c77Re: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Rf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.scaleFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777n_info" {
     sat_s777n_info:
         const sat_s777n_entry;
         const 1;
         const 16;
 },
 sat_s777m_entry() //  [R1]
         { []
         }
     {offset
       c77Rk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Rl; else goto c77Rm;
       c77Rl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Rm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.significand_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777m_info" {
     sat_s777m_info:
         const sat_s777m_entry;
         const 1;
         const 16;
 },
 sat_s777l_entry() //  [R1]
         { []
         }
     {offset
       c77Rr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Rs; else goto c77Rt;
       c77Rs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Rt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777l_info" {
     sat_s777l_info:
         const sat_s777l_entry;
         const 1;
         const 16;
 },
 sat_s777k_entry() //  [R1]
         { []
         }
     {offset
       c77Ry: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Rz; else goto c77RA;
       c77Rz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77RA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.encodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777k_info" {
     sat_s777k_info:
         const sat_s777k_entry;
         const 1;
         const 16;
 },
 sat_s777j_entry() //  [R1]
         { []
         }
     {offset
       c77RF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77RG; else goto c77RH;
       c77RG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77RH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777j_info" {
     sat_s777j_info:
         const sat_s777j_entry;
         const 1;
         const 16;
 },
 sat_s777i_entry() //  [R1]
         { []
         }
     {offset
       c77RM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77RN; else goto c77RO;
       c77RN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77RO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777i_info" {
     sat_s777i_info:
         const sat_s777i_entry;
         const 1;
         const 16;
 },
 sat_s777h_entry() //  [R1]
         { []
         }
     {offset
       c77RT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77RU; else goto c77RV;
       c77RU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77RV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777h_info" {
     sat_s777h_info:
         const sat_s777h_entry;
         const 1;
         const 16;
 },
 sat_s777g_entry() //  [R1]
         { []
         }
     {offset
       c77S0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77S1; else goto c77S2;
       c77S1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77S2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRadix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777g_info" {
     sat_s777g_info:
         const sat_s777g_entry;
         const 1;
         const 16;
 },
 sat_s777f_entry() //  [R1]
         { []
         }
     {offset
       c77S7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77S8; else goto c77S9;
       c77S8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77S9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFloatConst_$cp2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777f_info" {
     sat_s777f_info:
         const sat_s777f_entry;
         const 1;
         const 16;
 },
 sat_s777e_entry() //  [R1]
         { []
         }
     {offset
       c77Se: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Sf; else goto c77Sg;
       c77Sf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Sg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fRealFloatConst_$cp1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777e_info" {
     sat_s777e_info:
         const sat_s777e_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fRealFloatConst_entry() //  [R2]
         { []
         }
     {offset
       c77Si: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto c77Sm; else goto c77Sl;
       c77Sm: // global
           HpAlloc = 520;
           R2 = R2;
           R1 = Data.Functor.Const.$fRealFloatConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Sl: // global
           I64[Hp - 512] = sat_s777t_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_s777s_info;
           P64[Hp - 472] = R2;
           I64[Hp - 464] = sat_s777r_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_s777q_info;
           P64[Hp - 424] = R2;
           I64[Hp - 416] = sat_s777p_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_s777o_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_s777n_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_s777m_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_s777l_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_s777k_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_s777j_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_s777i_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_s777h_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s777g_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s777f_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s777e_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = Hp - 152;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 200;
           P64[Hp - 96] = Hp - 224;
           P64[Hp - 88] = Hp - 248;
           P64[Hp - 80] = Hp - 272;
           P64[Hp - 72] = Hp - 296;
           P64[Hp - 64] = Hp - 320;
           P64[Hp - 56] = Hp - 344;
           P64[Hp - 48] = Hp - 368;
           P64[Hp - 40] = Hp - 392;
           P64[Hp - 32] = Hp - 416;
           P64[Hp - 24] = Hp - 440;
           P64[Hp - 16] = Hp - 464;
           P64[Hp - 8] = Hp - 488;
           P64[Hp] = Hp - 512;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fRealFloatConst_info" {
     Data.Functor.Const.$fRealFloatConst_info:
         const Data.Functor.Const.$fRealFloatConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.504131935 UTC

[section ""data" . Data.Functor.Const.$fEnumConst_closure" {
     Data.Functor.Const.$fEnumConst_closure:
         const Data.Functor.Const.$fEnumConst_info;
 },
 sat_s777C_entry() //  [R1]
         { []
         }
     {offset
       c77Up: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Uq; else goto c77Ur;
       c77Uq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ur: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777C_info" {
     sat_s777C_info:
         const sat_s777C_entry;
         const 1;
         const 16;
 },
 sat_s777B_entry() //  [R1]
         { []
         }
     {offset
       c77Uw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Ux; else goto c77Uy;
       c77Ux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Uy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777B_info" {
     sat_s777B_info:
         const sat_s777B_entry;
         const 1;
         const 16;
 },
 sat_s777A_entry() //  [R1]
         { []
         }
     {offset
       c77UD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77UE; else goto c77UF;
       c77UE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77UF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777A_info" {
     sat_s777A_info:
         const sat_s777A_entry;
         const 1;
         const 16;
 },
 sat_s777z_entry() //  [R1]
         { []
         }
     {offset
       c77UK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77UL; else goto c77UM;
       c77UL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77UM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777z_info" {
     sat_s777z_info:
         const sat_s777z_entry;
         const 1;
         const 16;
 },
 sat_s777y_entry() //  [R1]
         { []
         }
     {offset
       c77UR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77US; else goto c77UT;
       c77US: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77UT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777y_info" {
     sat_s777y_info:
         const sat_s777y_entry;
         const 1;
         const 16;
 },
 sat_s777x_entry() //  [R1]
         { []
         }
     {offset
       c77UY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77UZ; else goto c77V0;
       c77UZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77V0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777x_info" {
     sat_s777x_info:
         const sat_s777x_entry;
         const 1;
         const 16;
 },
 sat_s777w_entry() //  [R1]
         { []
         }
     {offset
       c77V5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77V6; else goto c77V7;
       c77V6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77V7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777w_info" {
     sat_s777w_info:
         const sat_s777w_entry;
         const 1;
         const 16;
 },
 sat_s777v_entry() //  [R1]
         { []
         }
     {offset
       c77Vc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Vd; else goto c77Ve;
       c77Vd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Ve: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777v_info" {
     sat_s777v_info:
         const sat_s777v_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fEnumConst_entry() //  [R2]
         { []
         }
     {offset
       c77Vg: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto c77Vk; else goto c77Vj;
       c77Vk: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Const.$fEnumConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Vj: // global
           I64[Hp - 256] = sat_s777C_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s777B_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s777A_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s777z_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s777y_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s777x_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s777w_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s777v_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fEnumConst_info" {
     Data.Functor.Const.$fEnumConst_info:
         const Data.Functor.Const.$fEnumConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.522818508 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_$cp2Integral_closure" {
     Data.Functor.Const.$fIntegralConst_$cp2Integral_closure:
         const Data.Functor.Const.$fIntegralConst_$cp2Integral_info;
 },
 sat_s777E_entry() //  [R1]
         { []
         }
     {offset
       c77Wt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Wu; else goto c77Wv;
       c77Wu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Wv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777E_info" {
     sat_s777E_info:
         const sat_s777E_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_$cp2Integral_entry() //  [R2]
         { []
         }
     {offset
       c77Ww: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c77WA; else goto c77Wz;
       c77WA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_$cp2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Wz: // global
           I64[Hp - 16] = sat_s777E_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEnumConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_$cp2Integral_info" {
     Data.Functor.Const.$fIntegralConst_$cp2Integral_info:
         const Data.Functor.Const.$fIntegralConst_$cp2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.531768543 UTC

[section ""data" . Data.Functor.Const.$fIntegralConst_closure" {
     Data.Functor.Const.$fIntegralConst_closure:
         const Data.Functor.Const.$fIntegralConst_info;
 },
 sat_s777O_entry() //  [R1]
         { []
         }
     {offset
       c77WT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77WU; else goto c77WV;
       c77WU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77WV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777O_info" {
     sat_s777O_info:
         const sat_s777O_entry;
         const 1;
         const 16;
 },
 sat_s777N_entry() //  [R1]
         { []
         }
     {offset
       c77X0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77X1; else goto c77X2;
       c77X1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77X2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.divMod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777N_info" {
     sat_s777N_info:
         const sat_s777N_entry;
         const 1;
         const 16;
 },
 sat_s777M_entry() //  [R1]
         { []
         }
     {offset
       c77X7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77X8; else goto c77X9;
       c77X8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77X9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quotRem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777M_info" {
     sat_s777M_info:
         const sat_s777M_entry;
         const 1;
         const 16;
 },
 sat_s777L_entry() //  [R1]
         { []
         }
     {offset
       c77Xe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Xf; else goto c77Xg;
       c77Xf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Xg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.mod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777L_info" {
     sat_s777L_info:
         const sat_s777L_entry;
         const 1;
         const 16;
 },
 sat_s777K_entry() //  [R1]
         { []
         }
     {offset
       c77Xl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Xm; else goto c77Xn;
       c77Xm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Xn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.div_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777K_info" {
     sat_s777K_info:
         const sat_s777K_entry;
         const 1;
         const 16;
 },
 sat_s777J_entry() //  [R1]
         { []
         }
     {offset
       c77Xs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Xt; else goto c77Xu;
       c77Xt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Xu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.rem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777J_info" {
     sat_s777J_info:
         const sat_s777J_entry;
         const 1;
         const 16;
 },
 sat_s777I_entry() //  [R1]
         { []
         }
     {offset
       c77Xz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77XA; else goto c77XB;
       c77XA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77XB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quot_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777I_info" {
     sat_s777I_info:
         const sat_s777I_entry;
         const 1;
         const 16;
 },
 sat_s777H_entry() //  [R1]
         { []
         }
     {offset
       c77XG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77XH; else goto c77XI;
       c77XH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77XI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIntegralConst_$cp2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777H_info" {
     sat_s777H_info:
         const sat_s777H_entry;
         const 1;
         const 16;
 },
 sat_s777G_entry() //  [R1]
         { []
         }
     {offset
       c77XN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77XO; else goto c77XP;
       c77XO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77XP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fIntegralConst_$cp1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777G_info" {
     sat_s777G_info:
         const sat_s777G_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fIntegralConst_entry() //  [R2]
         { []
         }
     {offset
       c77XR: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c77XV; else goto c77XU;
       c77XV: // global
           HpAlloc = 296;
           R2 = R2;
           R1 = Data.Functor.Const.$fIntegralConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77XU: // global
           I64[Hp - 288] = sat_s777O_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_s777N_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_s777M_info;
           P64[Hp - 224] = R2;
           I64[Hp - 216] = sat_s777L_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_s777K_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s777J_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s777I_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s777H_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s777G_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fIntegralConst_info" {
     Data.Functor.Const.$fIntegralConst_info:
         const Data.Functor.Const.$fIntegralConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.552615192 UTC

[section ""data" . Data.Functor.Const.$fBoundedConst_closure" {
     Data.Functor.Const.$fBoundedConst_closure:
         const Data.Functor.Const.$fBoundedConst_info;
 },
 sat_s777R_entry() //  [R1]
         { []
         }
     {offset
       c77Zb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Zc; else goto c77Zd;
       c77Zc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Zd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777R_info" {
     sat_s777R_info:
         const sat_s777R_entry;
         const 1;
         const 16;
 },
 sat_s777Q_entry() //  [R1]
         { []
         }
     {offset
       c77Zi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77Zj; else goto c77Zk;
       c77Zj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77Zk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777Q_info" {
     sat_s777Q_info:
         const sat_s777Q_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBoundedConst_entry() //  [R2]
         { []
         }
     {offset
       c77Zm: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c77Zq; else goto c77Zp;
       c77Zq: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Const.$fBoundedConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77Zp: // global
           I64[Hp - 64] = sat_s777R_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s777Q_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBoundedConst_info" {
     Data.Functor.Const.$fBoundedConst_info:
         const Data.Functor.Const.$fBoundedConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.56024359 UTC

[section ""data" . Data.Functor.Const.$fBitsConst_$cp1Bits_closure" {
     Data.Functor.Const.$fBitsConst_$cp1Bits_closure:
         const Data.Functor.Const.$fBitsConst_$cp1Bits_info;
 },
 sat_s777T_entry() //  [R1]
         { []
         }
     {offset
       c77ZT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c77ZU; else goto c77ZV;
       c77ZU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c77ZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777T_info" {
     sat_s777T_info:
         const sat_s777T_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBitsConst_$cp1Bits_entry() //  [R2]
         { []
         }
     {offset
       c77ZW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7800; else goto c77ZZ;
       c7800: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fBitsConst_$cp1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c77ZZ: // global
           I64[Hp - 16] = sat_s777T_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fEqConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBitsConst_$cp1Bits_info" {
     Data.Functor.Const.$fBitsConst_$cp1Bits_info:
         const Data.Functor.Const.$fBitsConst_$cp1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.574797951 UTC

[section ""data" . Data.Functor.Const.$fBitsConst_closure" {
     Data.Functor.Const.$fBitsConst_closure:
         const Data.Functor.Const.$fBitsConst_info;
 },
 sat_s778h_entry() //  [R1]
         { []
         }
     {offset
       c780j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780k; else goto c780l;
       c780k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.popCount_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778h_info" {
     sat_s778h_info:
         const sat_s778h_entry;
         const 1;
         const 16;
 },
 sat_s778g_entry() //  [R1]
         { []
         }
     {offset
       c780q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780r; else goto c780s;
       c780r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778g_info" {
     sat_s778g_info:
         const sat_s778g_entry;
         const 1;
         const 16;
 },
 sat_s778f_entry() //  [R1]
         { []
         }
     {offset
       c780x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780y; else goto c780z;
       c780y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778f_info" {
     sat_s778f_info:
         const sat_s778f_entry;
         const 1;
         const 16;
 },
 sat_s778e_entry() //  [R1]
         { []
         }
     {offset
       c780E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780F; else goto c780G;
       c780F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778e_info" {
     sat_s778e_info:
         const sat_s778e_entry;
         const 1;
         const 16;
 },
 sat_s778d_entry() //  [R1]
         { []
         }
     {offset
       c780L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780M; else goto c780N;
       c780M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778d_info" {
     sat_s778d_info:
         const sat_s778d_entry;
         const 1;
         const 16;
 },
 sat_s778c_entry() //  [R1]
         { []
         }
     {offset
       c780S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c780T; else goto c780U;
       c780T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c780U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778c_info" {
     sat_s778c_info:
         const sat_s778c_entry;
         const 1;
         const 16;
 },
 sat_s778b_entry() //  [R1]
         { []
         }
     {offset
       c780Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7810; else goto c7811;
       c7810: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7811: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778b_info" {
     sat_s778b_info:
         const sat_s778b_entry;
         const 1;
         const 16;
 },
 sat_s778a_entry() //  [R1]
         { []
         }
     {offset
       c7816: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7817; else goto c7818;
       c7817: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7818: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778a_info" {
     sat_s778a_info:
         const sat_s778a_entry;
         const 1;
         const 16;
 },
 sat_s7789_entry() //  [R1]
         { []
         }
     {offset
       c781d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781e; else goto c781f;
       c781e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7789_info" {
     sat_s7789_info:
         const sat_s7789_entry;
         const 1;
         const 16;
 },
 sat_s7788_entry() //  [R1]
         { []
         }
     {offset
       c781k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781l; else goto c781m;
       c781l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7788_info" {
     sat_s7788_info:
         const sat_s7788_entry;
         const 1;
         const 16;
 },
 sat_s7787_entry() //  [R1]
         { []
         }
     {offset
       c781r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781s; else goto c781t;
       c781s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.testBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7787_info" {
     sat_s7787_info:
         const sat_s7787_entry;
         const 1;
         const 16;
 },
 sat_s7786_entry() //  [R1]
         { []
         }
     {offset
       c781y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781z; else goto c781A;
       c781z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complementBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7786_info" {
     sat_s7786_info:
         const sat_s7786_entry;
         const 1;
         const 16;
 },
 sat_s7785_entry() //  [R1]
         { []
         }
     {offset
       c781F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781G; else goto c781H;
       c781G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.clearBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7785_info" {
     sat_s7785_info:
         const sat_s7785_entry;
         const 1;
         const 16;
 },
 sat_s7784_entry() //  [R1]
         { []
         }
     {offset
       c781M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781N; else goto c781O;
       c781N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.setBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7784_info" {
     sat_s7784_info:
         const sat_s7784_entry;
         const 1;
         const 16;
 },
 sat_s7783_entry() //  [R1]
         { []
         }
     {offset
       c781T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c781U; else goto c781V;
       c781U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c781V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7783_info" {
     sat_s7783_info:
         const sat_s7783_entry;
         const 1;
         const 16;
 },
 sat_s7782_entry() //  [R1]
         { []
         }
     {offset
       c7820: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7821; else goto c7822;
       c7821: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7822: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.zeroBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7782_info" {
     sat_s7782_info:
         const sat_s7782_entry;
         const 1;
         const 16;
 },
 sat_s7781_entry() //  [R1]
         { []
         }
     {offset
       c7827: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7828; else goto c7829;
       c7828: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7829: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7781_info" {
     sat_s7781_info:
         const sat_s7781_entry;
         const 1;
         const 16;
 },
 sat_s7780_entry() //  [R1]
         { []
         }
     {offset
       c782e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782f; else goto c782g;
       c782f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shift_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7780_info" {
     sat_s7780_info:
         const sat_s7780_entry;
         const 1;
         const 16;
 },
 sat_s777Z_entry() //  [R1]
         { []
         }
     {offset
       c782l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782m; else goto c782n;
       c782m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complement_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777Z_info" {
     sat_s777Z_info:
         const sat_s777Z_entry;
         const 1;
         const 16;
 },
 sat_s777Y_entry() //  [R1]
         { []
         }
     {offset
       c782s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782t; else goto c782u;
       c782t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.xor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777Y_info" {
     sat_s777Y_info:
         const sat_s777Y_entry;
         const 1;
         const 16;
 },
 sat_s777X_entry() //  [R1]
         { []
         }
     {offset
       c782z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782A; else goto c782B;
       c782A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..|._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777X_info" {
     sat_s777X_info:
         const sat_s777X_entry;
         const 1;
         const 16;
 },
 sat_s777W_entry() //  [R1]
         { []
         }
     {offset
       c782G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782H; else goto c782I;
       c782H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..&._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777W_info" {
     sat_s777W_info:
         const sat_s777W_entry;
         const 1;
         const 16;
 },
 sat_s777V_entry() //  [R1]
         { []
         }
     {offset
       c782N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c782O; else goto c782P;
       c782O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c782P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fBitsConst_$cp1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s777V_info" {
     sat_s777V_info:
         const sat_s777V_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fBitsConst_entry() //  [R2]
         { []
         }
     {offset
       c782R: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto c782V; else goto c782U;
       c782V: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Const.$fBitsConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c782U: // global
           I64[Hp - 736] = sat_s778h_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_s778g_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_s778f_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_s778e_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_s778d_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_s778c_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_s778b_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_s778a_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_s7789_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_s7788_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_s7787_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_s7786_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_s7785_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_s7784_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_s7783_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_s7782_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_s7781_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_s7780_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_s777Z_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_s777Y_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_s777X_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_s777W_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_s777V_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fBitsConst_info" {
     Data.Functor.Const.$fBitsConst_info:
         const Data.Functor.Const.$fBitsConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.622845509 UTC

[section ""data" . Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure" {
     Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure:
         const Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info;
 },
 sat_s778j_entry() //  [R1]
         { []
         }
     {offset
       c785L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c785M; else goto c785N;
       c785M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c785N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778j_info" {
     sat_s778j_info:
         const sat_s778j_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       c785O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c785S; else goto c785R;
       c785S: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c785R: // global
           I64[Hp - 16] = sat_s778j_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Const.$fBitsConst_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info" {
     Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_info:
         const Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.629894697 UTC

[section ""data" . Data.Functor.Const.$fFiniteBitsConst_closure" {
     Data.Functor.Const.$fFiniteBitsConst_closure:
         const Data.Functor.Const.$fFiniteBitsConst_info;
 },
 sat_s778o_entry() //  [R1]
         { []
         }
     {offset
       c786b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c786c; else goto c786d;
       c786c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c786d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countTrailingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778o_info" {
     sat_s778o_info:
         const sat_s778o_entry;
         const 1;
         const 16;
 },
 sat_s778n_entry() //  [R1]
         { []
         }
     {offset
       c786i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c786j; else goto c786k;
       c786j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c786k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countLeadingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778n_info" {
     sat_s778n_info:
         const sat_s778n_entry;
         const 1;
         const 16;
 },
 sat_s778m_entry() //  [R1]
         { []
         }
     {offset
       c786p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c786q; else goto c786r;
       c786q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c786r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778m_info" {
     sat_s778m_info:
         const sat_s778m_entry;
         const 1;
         const 16;
 },
 sat_s778l_entry() //  [R1]
         { []
         }
     {offset
       c786w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c786x; else goto c786y;
       c786x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c786y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Const.$fFiniteBitsConst_$cp1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s778l_info" {
     sat_s778l_info:
         const sat_s778l_entry;
         const 1;
         const 16;
 },
 Data.Functor.Const.$fFiniteBitsConst_entry() //  [R2]
         { []
         }
     {offset
       c786A: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c786E; else goto c786D;
       c786E: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Const.$fFiniteBitsConst_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c786D: // global
           I64[Hp - 128] = sat_s778o_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s778n_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s778m_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s778l_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.$fFiniteBitsConst_info" {
     Data.Functor.Const.$fFiniteBitsConst_info:
         const Data.Functor.Const.$fFiniteBitsConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.640700635 UTC

[section ""data" . Data.Functor.Const.getConst1_closure" {
     Data.Functor.Const.getConst1_closure:
         const Data.Functor.Const.getConst1_info;
 },
 Data.Functor.Const.getConst1_entry() //  [R2]
         { []
         }
     {offset
       c787h: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.getConst1_info" {
     Data.Functor.Const.getConst1_info:
         const Data.Functor.Const.getConst1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.644258823 UTC

[section ""data" . Data.Functor.Const.getConst_closure" {
     Data.Functor.Const.getConst_closure:
         const Data.Functor.Const.getConst_info;
 },
 Data.Functor.Const.getConst_entry() //  [R2]
         { []
         }
     {offset
       c787s: // global
           R2 = R2;
           call Data.Functor.Const.getConst1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Const.getConst_info" {
     Data.Functor.Const.getConst_info:
         const Data.Functor.Const.getConst_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.64808588 UTC

[section ""cstring" . Data.Functor.Const.$trModule4_bytes" {
     Data.Functor.Const.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.650137238 UTC

[section ""data" . Data.Functor.Const.$trModule3_closure" {
     Data.Functor.Const.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.651804079 UTC

[section ""cstring" . Data.Functor.Const.$trModule2_bytes" {
     Data.Functor.Const.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.653568287 UTC

[section ""data" . Data.Functor.Const.$trModule1_closure" {
     Data.Functor.Const.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.655372461 UTC

[section ""data" . Data.Functor.Const.$trModule_closure" {
     Data.Functor.Const.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Const.$trModule3_closure+1;
         const Data.Functor.Const.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.657189592 UTC

[section ""data" . $krep_r74ZT_closure" {
     $krep_r74ZT_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.658940089 UTC

[section ""data" . $krep1_r74ZU_closure" {
     $krep1_r74ZU_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.660687861 UTC

[section ""data" . $krep2_r74ZV_closure" {
     $krep2_r74ZV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r74ZU_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.662453752 UTC

[section ""data" . Data.Functor.Const.$tcConst1_closure" {
     Data.Functor.Const.$tcConst1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r74ZV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.664175078 UTC

[section ""data" . $krep3_r74ZW_closure" {
     $krep3_r74ZW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.665920891 UTC

[section ""data" . Data.Functor.Const.$tcConst2_closure" {
     Data.Functor.Const.$tcConst2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$fReadConst5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.66763945 UTC

[section ""data" . Data.Functor.Const.$tcConst_closure" {
     Data.Functor.Const.$tcConst_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Const.$trModule_closure+1;
         const Data.Functor.Const.$tcConst2_closure+1;
         const Data.Functor.Const.$tcConst1_closure+4;
         const 18204097321285842582;
         const 16882168546145866005;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.669488673 UTC

[section ""data" . $krep4_r74ZX_closure" {
     $krep4_r74ZX_closure:
         const :_con_info;
         const $krep3_r74ZW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.67125997 UTC

[section ""data" . $krep5_r74ZY_closure" {
     $krep5_r74ZY_closure:
         const :_con_info;
         const $krep_r74ZT_closure+2;
         const $krep4_r74ZX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.673991095 UTC

[section ""data" . $krep6_r74ZZ_closure" {
     $krep6_r74ZZ_closure:
         const :_con_info;
         const $krep1_r74ZU_closure+2;
         const $krep5_r74ZY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.675738304 UTC

[section ""data" . $krep7_r7500_closure" {
     $krep7_r7500_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Const.$tcConst_closure+1;
         const $krep6_r74ZZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.677422088 UTC

[section ""data" . Data.Functor.Const.$tc'Const1_closure" {
     Data.Functor.Const.$tc'Const1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r74ZT_closure+2;
         const $krep7_r7500_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.679032277 UTC

[section ""cstring" . Data.Functor.Const.$tc'Const3_bytes" {
     Data.Functor.Const.$tc'Const3_bytes:
         I8[] [39,67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.680634689 UTC

[section ""data" . Data.Functor.Const.$tc'Const2_closure" {
     Data.Functor.Const.$tc'Const2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Const.$tc'Const3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.682327 UTC

[section ""data" . Data.Functor.Const.$tc'Const_closure" {
     Data.Functor.Const.$tc'Const_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Const.$trModule_closure+1;
         const Data.Functor.Const.$tc'Const2_closure+1;
         const Data.Functor.Const.$tc'Const1_closure+4;
         const 9035619270378585414;
         const 9797261638746114088;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:25.684194744 UTC

[section ""relreadonly" . S77av_srt" {
     S77av_srt:
         const Data.Functor.Const.$fReadConst4_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Const.$w$creadsPrec_closure;
         const Data.Functor.Const.$fReadConst_$creadsPrec_closure;
         const Data.Functor.Const.$fReadConst2_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Const.$fReadConst_$creadList_closure;
         const Data.Functor.Const.$w$creadListPrec_closure;
         const Data.Functor.Const.$fReadConst_closure;
         const Data.Functor.Const.$fShowConst1_closure;
         const Data.Functor.Const.$w$cshowsPrec_closure;
         const Data.Functor.Const.$fShowConst_$cshowsPrec_closure;
         const Data.Functor.Const.$fShowConst_$cshow_closure;
         const Data.Functor.Const.$fShowConst_$cshowList_closure;
         const Data.Functor.Const.$fShowConst_closure;
         const Data.Semigroup.Internal.$fMonoidSum2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Functor.Const.$fFoldableConst1_closure;
         const Data.Functor.Const.$fFoldableConst3_closure;
         const Data.Functor.Const.$fFoldableConst6_closure;
         const Data.Functor.Const.$fFoldableConst8_closure;
         const Data.Semigroup.Internal.$fMonoidProduct2_closure;
         const Data.Functor.Const.$fApplicativeConst_closure;
         const Data.Functor.Const.$fFunctorConst_closure;
 }]

