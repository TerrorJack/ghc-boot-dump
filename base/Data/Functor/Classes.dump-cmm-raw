
==================== Raw Cmm ====================
2018-03-16 16:08:44.503705731 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:44.505565761 UTC

[section ""data" . Data.Functor.Classes.liftShowsPrec2_closure" {
     Data.Functor.Classes.liftShowsPrec2_closure:
         const Data.Functor.Classes.liftShowsPrec2_info;
 },
 Data.Functor.Classes.liftShowsPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdC2r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC2s; else goto cdC2t;
       cdC2s: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC2t: // global
           I64[Sp - 8] = block_cdC2o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC2x; else goto cdC2p;
       udC2x: // global
           call _cdC2o(R1) args: 0, res: 0, upd: 0;
       cdC2p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowsPrec2_info" {
     Data.Functor.Classes.liftShowsPrec2_info:
         const Data.Functor.Classes.liftShowsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC2o() //  [R1]
         { []
         }
     {offset
       cdC2o: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC2o_info" {
     block_cdC2o_info:
         const _cdC2o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.511164717 UTC

[section ""data" . Data.Functor.Classes.liftShowList2_closure" {
     Data.Functor.Classes.liftShowList2_closure:
         const Data.Functor.Classes.liftShowList2_info;
 },
 Data.Functor.Classes.liftShowList2_entry() //  [R2]
         { []
         }
     {offset
       cdC2O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC2P; else goto cdC2Q;
       cdC2P: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC2Q: // global
           I64[Sp - 8] = block_cdC2L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC2U; else goto cdC2M;
       udC2U: // global
           call _cdC2L(R1) args: 0, res: 0, upd: 0;
       cdC2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowList2_info" {
     Data.Functor.Classes.liftShowList2_info:
         const Data.Functor.Classes.liftShowList2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC2L() //  [R1]
         { []
         }
     {offset
       cdC2L: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC2L_info" {
     block_cdC2L_info:
         const _cdC2L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.516692459 UTC

[section ""data" . Data.Functor.Classes.liftReadsPrec2_closure" {
     Data.Functor.Classes.liftReadsPrec2_closure:
         const Data.Functor.Classes.liftReadsPrec2_info;
 },
 Data.Functor.Classes.liftReadsPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdC3b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC3c; else goto cdC3d;
       cdC3c: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC3d: // global
           I64[Sp - 8] = block_cdC38_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC3h; else goto cdC39;
       udC3h: // global
           call _cdC38(R1) args: 0, res: 0, upd: 0;
       cdC39: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadsPrec2_info" {
     Data.Functor.Classes.liftReadsPrec2_info:
         const Data.Functor.Classes.liftReadsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC38() //  [R1]
         { []
         }
     {offset
       cdC38: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC38_info" {
     block_cdC38_info:
         const _cdC38;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.522269834 UTC

[section ""data" . Data.Functor.Classes.liftReadList2_closure" {
     Data.Functor.Classes.liftReadList2_closure:
         const Data.Functor.Classes.liftReadList2_info;
 },
 Data.Functor.Classes.liftReadList2_entry() //  [R2]
         { []
         }
     {offset
       cdC3y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC3z; else goto cdC3A;
       cdC3z: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC3A: // global
           I64[Sp - 8] = block_cdC3v_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC3E; else goto cdC3w;
       udC3E: // global
           call _cdC3v(R1) args: 0, res: 0, upd: 0;
       cdC3w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList2_info" {
     Data.Functor.Classes.liftReadList2_info:
         const Data.Functor.Classes.liftReadList2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC3v() //  [R1]
         { []
         }
     {offset
       cdC3v: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC3v_info" {
     block_cdC3v_info:
         const _cdC3v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.527905273 UTC

[section ""data" . Data.Functor.Classes.liftReadPrec2_closure" {
     Data.Functor.Classes.liftReadPrec2_closure:
         const Data.Functor.Classes.liftReadPrec2_info;
 },
 Data.Functor.Classes.liftReadPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdC3V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC3W; else goto cdC3X;
       cdC3W: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC3X: // global
           I64[Sp - 8] = block_cdC3S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC41; else goto cdC3T;
       udC41: // global
           call _cdC3S(R1) args: 0, res: 0, upd: 0;
       cdC3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadPrec2_info" {
     Data.Functor.Classes.liftReadPrec2_info:
         const Data.Functor.Classes.liftReadPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC3S() //  [R1]
         { []
         }
     {offset
       cdC3S: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC3S_info" {
     block_cdC3S_info:
         const _cdC3S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.535156321 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec2_closure" {
     Data.Functor.Classes.liftReadListPrec2_closure:
         const Data.Functor.Classes.liftReadListPrec2_info;
 },
 Data.Functor.Classes.liftReadListPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdC4i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC4j; else goto cdC4k;
       cdC4j: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC4k: // global
           I64[Sp - 8] = block_cdC4f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC4o; else goto cdC4g;
       udC4o: // global
           call _cdC4f(R1) args: 0, res: 0, upd: 0;
       cdC4g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec2_info" {
     Data.Functor.Classes.liftReadListPrec2_info:
         const Data.Functor.Classes.liftReadListPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC4f() //  [R1]
         { []
         }
     {offset
       cdC4f: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC4f_info" {
     block_cdC4f_info:
         const _cdC4f;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.541695166 UTC

[section ""data" . Data.Functor.Classes.$p1Ord2_closure" {
     Data.Functor.Classes.$p1Ord2_closure:
         const Data.Functor.Classes.$p1Ord2_info;
 },
 Data.Functor.Classes.$p1Ord2_entry() //  [R2]
         { []
         }
     {offset
       cdC4F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC4G; else goto cdC4H;
       cdC4G: // global
           R2 = R2;
           R1 = Data.Functor.Classes.$p1Ord2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC4H: // global
           I64[Sp - 8] = block_cdC4C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC4L; else goto cdC4D;
       udC4L: // global
           call _cdC4C(R1) args: 0, res: 0, upd: 0;
       cdC4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$p1Ord2_info" {
     Data.Functor.Classes.$p1Ord2_info:
         const Data.Functor.Classes.$p1Ord2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC4C() //  [R1]
         { []
         }
     {offset
       cdC4C: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC4C_info" {
     block_cdC4C_info:
         const _cdC4C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.547083658 UTC

[section ""data" . Data.Functor.Classes.liftCompare2_closure" {
     Data.Functor.Classes.liftCompare2_closure:
         const Data.Functor.Classes.liftCompare2_info;
 },
 Data.Functor.Classes.liftCompare2_entry() //  [R2]
         { []
         }
     {offset
       cdC52: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC53; else goto cdC54;
       cdC53: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftCompare2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC54: // global
           I64[Sp - 8] = block_cdC4Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC58; else goto cdC50;
       udC58: // global
           call _cdC4Z(R1) args: 0, res: 0, upd: 0;
       cdC50: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftCompare2_info" {
     Data.Functor.Classes.liftCompare2_info:
         const Data.Functor.Classes.liftCompare2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC4Z() //  [R1]
         { []
         }
     {offset
       cdC4Z: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC4Z_info" {
     block_cdC4Z_info:
         const _cdC4Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.552292634 UTC

[section ""data" . Data.Functor.Classes.liftEq2_closure" {
     Data.Functor.Classes.liftEq2_closure:
         const Data.Functor.Classes.liftEq2_info;
 },
 Data.Functor.Classes.liftEq2_entry() //  [R2]
         { []
         }
     {offset
       cdC5m: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftEq2_info" {
     Data.Functor.Classes.liftEq2_info:
         const Data.Functor.Classes.liftEq2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.556233532 UTC

[section ""data" . Data.Functor.Classes.liftShowsPrec_closure" {
     Data.Functor.Classes.liftShowsPrec_closure:
         const Data.Functor.Classes.liftShowsPrec_info;
 },
 Data.Functor.Classes.liftShowsPrec_entry() //  [R2]
         { []
         }
     {offset
       cdC5A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC5B; else goto cdC5C;
       cdC5B: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC5C: // global
           I64[Sp - 8] = block_cdC5x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC5G; else goto cdC5y;
       udC5G: // global
           call _cdC5x(R1) args: 0, res: 0, upd: 0;
       cdC5y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowsPrec_info" {
     Data.Functor.Classes.liftShowsPrec_info:
         const Data.Functor.Classes.liftShowsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC5x() //  [R1]
         { []
         }
     {offset
       cdC5x: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC5x_info" {
     block_cdC5x_info:
         const _cdC5x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.562008421 UTC

[section ""data" . Data.Functor.Classes.liftShowList_closure" {
     Data.Functor.Classes.liftShowList_closure:
         const Data.Functor.Classes.liftShowList_info;
 },
 Data.Functor.Classes.liftShowList_entry() //  [R2]
         { []
         }
     {offset
       cdC5X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC5Y; else goto cdC5Z;
       cdC5Y: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC5Z: // global
           I64[Sp - 8] = block_cdC5U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC63; else goto cdC5V;
       udC63: // global
           call _cdC5U(R1) args: 0, res: 0, upd: 0;
       cdC5V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowList_info" {
     Data.Functor.Classes.liftShowList_info:
         const Data.Functor.Classes.liftShowList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC5U() //  [R1]
         { []
         }
     {offset
       cdC5U: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC5U_info" {
     block_cdC5U_info:
         const _cdC5U;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.568741682 UTC

[section ""data" . Data.Functor.Classes.liftReadsPrec_closure" {
     Data.Functor.Classes.liftReadsPrec_closure:
         const Data.Functor.Classes.liftReadsPrec_info;
 },
 Data.Functor.Classes.liftReadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cdC6k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC6l; else goto cdC6m;
       cdC6l: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC6m: // global
           I64[Sp - 8] = block_cdC6h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC6q; else goto cdC6i;
       udC6q: // global
           call _cdC6h(R1) args: 0, res: 0, upd: 0;
       cdC6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadsPrec_info" {
     Data.Functor.Classes.liftReadsPrec_info:
         const Data.Functor.Classes.liftReadsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC6h() //  [R1]
         { []
         }
     {offset
       cdC6h: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC6h_info" {
     block_cdC6h_info:
         const _cdC6h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.574235981 UTC

[section ""data" . Data.Functor.Classes.liftReadList_closure" {
     Data.Functor.Classes.liftReadList_closure:
         const Data.Functor.Classes.liftReadList_info;
 },
 Data.Functor.Classes.liftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdC6H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC6I; else goto cdC6J;
       cdC6I: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC6J: // global
           I64[Sp - 8] = block_cdC6E_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC6N; else goto cdC6F;
       udC6N: // global
           call _cdC6E(R1) args: 0, res: 0, upd: 0;
       cdC6F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList_info" {
     Data.Functor.Classes.liftReadList_info:
         const Data.Functor.Classes.liftReadList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC6E() //  [R1]
         { []
         }
     {offset
       cdC6E: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC6E_info" {
     block_cdC6E_info:
         const _cdC6E;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.580142307 UTC

[section ""data" . Data.Functor.Classes.liftReadPrec_closure" {
     Data.Functor.Classes.liftReadPrec_closure:
         const Data.Functor.Classes.liftReadPrec_info;
 },
 Data.Functor.Classes.liftReadPrec_entry() //  [R2]
         { []
         }
     {offset
       cdC74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC75; else goto cdC76;
       cdC75: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC76: // global
           I64[Sp - 8] = block_cdC71_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC7a; else goto cdC72;
       udC7a: // global
           call _cdC71(R1) args: 0, res: 0, upd: 0;
       cdC72: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadPrec_info" {
     Data.Functor.Classes.liftReadPrec_info:
         const Data.Functor.Classes.liftReadPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC71() //  [R1]
         { []
         }
     {offset
       cdC71: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC71_info" {
     block_cdC71_info:
         const _cdC71;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.586143054 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec_closure" {
     Data.Functor.Classes.liftReadListPrec_closure:
         const Data.Functor.Classes.liftReadListPrec_info;
 },
 Data.Functor.Classes.liftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdC7r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC7s; else goto cdC7t;
       cdC7s: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC7t: // global
           I64[Sp - 8] = block_cdC7o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC7x; else goto cdC7p;
       udC7x: // global
           call _cdC7o(R1) args: 0, res: 0, upd: 0;
       cdC7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec_info" {
     Data.Functor.Classes.liftReadListPrec_info:
         const Data.Functor.Classes.liftReadListPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC7o() //  [R1]
         { []
         }
     {offset
       cdC7o: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC7o_info" {
     block_cdC7o_info:
         const _cdC7o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.592237689 UTC

[section ""data" . Data.Functor.Classes.$p1Ord1_closure" {
     Data.Functor.Classes.$p1Ord1_closure:
         const Data.Functor.Classes.$p1Ord1_info;
 },
 Data.Functor.Classes.$p1Ord1_entry() //  [R2]
         { []
         }
     {offset
       cdC7O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC7P; else goto cdC7Q;
       cdC7P: // global
           R2 = R2;
           R1 = Data.Functor.Classes.$p1Ord1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC7Q: // global
           I64[Sp - 8] = block_cdC7L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC7U; else goto cdC7M;
       udC7U: // global
           call _cdC7L(R1) args: 0, res: 0, upd: 0;
       cdC7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$p1Ord1_info" {
     Data.Functor.Classes.$p1Ord1_info:
         const Data.Functor.Classes.$p1Ord1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC7L() //  [R1]
         { []
         }
     {offset
       cdC7L: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC7L_info" {
     block_cdC7L_info:
         const _cdC7L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.598807165 UTC

[section ""data" . Data.Functor.Classes.liftCompare_closure" {
     Data.Functor.Classes.liftCompare_closure:
         const Data.Functor.Classes.liftCompare_info;
 },
 Data.Functor.Classes.liftCompare_entry() //  [R2]
         { []
         }
     {offset
       cdC8b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdC8c; else goto cdC8d;
       cdC8c: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftCompare_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC8d: // global
           I64[Sp - 8] = block_cdC88_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udC8h; else goto cdC89;
       udC8h: // global
           call _cdC88(R1) args: 0, res: 0, upd: 0;
       cdC89: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftCompare_info" {
     Data.Functor.Classes.liftCompare_info:
         const Data.Functor.Classes.liftCompare_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdC88() //  [R1]
         { []
         }
     {offset
       cdC88: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC88_info" {
     block_cdC88_info:
         const _cdC88;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.604662632 UTC

[section ""data" . Data.Functor.Classes.liftEq_closure" {
     Data.Functor.Classes.liftEq_closure:
         const Data.Functor.Classes.liftEq_info;
 },
 Data.Functor.Classes.liftEq_entry() //  [R2]
         { []
         }
     {offset
       cdC8v: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftEq_info" {
     Data.Functor.Classes.liftEq_info:
         const Data.Functor.Classes.liftEq_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.60785447 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const1_closure" {
     Data.Functor.Classes.$fRead1Const1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.609673309 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Const4_bytes" {
     Data.Functor.Classes.$fRead1Const4_bytes:
         I8[] [67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.612038082 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const3_closure" {
     Data.Functor.Classes.$fRead1Const3_closure:
         const Data.Functor.Classes.$fRead1Const3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const3_entry() //  [R1]
         { []
         }
     {offset
       cdC8K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdC8L; else goto cdC8M;
       cdC8L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdC8M: // global
           (_cdC8H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdC8H::I64 == 0) goto cdC8J; else goto cdC8I;
       cdC8J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdC8I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdC8H::I64;
           R2 = Data.Functor.Classes.$fRead1Const4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const3_info" {
     Data.Functor.Classes.$fRead1Const3_info:
         const Data.Functor.Classes.$fRead1Const3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.616120236 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const2_closure" {
     Data.Functor.Classes.$fRead1Const2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Const3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.620777601 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadPrec1_info;
         const 0;
 },
 sat_sdyo7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdC9n: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyo7_info" {
     sat_sdyo7_info:
         const sat_sdyo7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyo8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdC9q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdC9u; else goto cdC9t;
       cdC9u: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdC9t: // global
           _sdynX::P64 = P64[R1 + 7];
           _sdyo1::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdyo7_info;
           P64[Hp] = _sdyo1::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdynX::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyo8_info" {
     sat_sdyo8_info:
         const sat_sdyo8_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyob_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdC9v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdC9w; else goto cdC9x;
       cdC9w: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdC9x: // global
           I64[Sp - 24] = block_cdC94_info;
           _sdynX::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdynX::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udC9K; else goto cdC95;
       udC9K: // global
           call _cdC94(R1) args: 0, res: 0, upd: 0;
       cdC95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyob_info" {
     sat_sdyob_info:
         const sat_sdyob_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SdyRV_srt;
 },
 _cdC94() //  [R1]
         { []
         }
     {offset
       cdC94: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdC9A; else goto cdC9z;
       cdC9A: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdC9z: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdC9C; else goto cdC9G;
       cdC9C: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdC9G: // global
           I64[Hp - 16] = sat_sdyo8_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdC9D_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Const2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC94_info" {
     block_cdC94_info:
         const _cdC94;
         const 2;
         const 12884901918;
         const SdyRV_srt;
 },
 _cdC9D() //  [R1]
         { []
         }
     {offset
       cdC9D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdC9J; else goto cdC9I;
       cdC9J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdC9I: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdC9D_info" {
     block_cdC9D_info:
         const _cdC9D;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdC9L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdC9P; else goto cdC9O;
       cdC9P: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdC9O: // global
           I64[Hp - 8] = sat_sdyob_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec1_info" {
     Data.Functor.Classes.$w$cliftReadPrec1_info:
         const Data.Functor.Classes.$w$cliftReadPrec1_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SdyRV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.634331401 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const6_closure" {
     Data.Functor.Classes.$fRead1Const6_closure:
         const Data.Functor.Classes.$fRead1Const6_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const6_entry() //  [R2, R6]
         { []
         }
     {offset
       cdCaj: // global
           R4 = P64[Sp];
           R3 = R6;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const6_info" {
     Data.Functor.Classes.$fRead1Const6_info:
         const Data.Functor.Classes.$fRead1Const6_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdyRV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.639762326 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdyoo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCaz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoo_info" {
     sat_sdyoo_info:
         const sat_sdyoo_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+24;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdCaC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCaG; else goto cdCaF;
       cdCaG: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCaF: // global
           I64[Hp - 8] = sat_sdyoo_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SdyRV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.650436387 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec7_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec7_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec7_info;
         const 0;
 },
 lvl3_sdyor_entry() //  [R1]
         { []
         }
     {offset
       cdCb0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCb1; else goto cdCb2;
       cdCb1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCb2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyor_info" {
     lvl3_sdyor_info:
         const lvl3_sdyor_entry;
         const 1;
         const 16;
 },
 sat_sdyoz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCbr: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoz_info" {
     sat_sdyoz_info:
         const sat_sdyoz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyoC_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCbx: // global
           _sdyox::P64 = R2;
           _sdyoC::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdCby; else goto cdCbz;
       cdCbz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCbB; else goto cdCbA;
       cdCbB: // global
           HpAlloc = 16;
           goto cdCby;
       cdCby: // global
           R2 = _sdyox::P64;
           R1 = _sdyoC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCbA: // global
           _sdyor::P64 = P64[_sdyoC::P64 + 7];
           _sdyot::P64 = P64[_sdyoC::P64 + 15];
           I64[Hp - 8] = sat_sdyoz_info;
           P64[Hp] = _sdyot::P64;
           I64[Sp - 8] = block_cdCbu_info;
           R3 = Hp - 7;
           R2 = _sdyor::P64;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoC_info" {
     sat_sdyoC_info:
         const sat_sdyoC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdCbu() //  [R1]
         { []
         }
     {offset
       cdCbu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCbE; else goto cdCbD;
       cdCbE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCbD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCbu_info" {
     block_cdCbu_info:
         const _cdCbu;
         const 0;
         const 30;
 },
 sat_sdyoF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCbF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCbG; else goto cdCbH;
       cdCbG: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCbH: // global
           I64[Sp - 24] = block_cdCb8_info;
           _sdyor::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdyor::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCbU; else goto cdCb9;
       udCbU: // global
           call _cdCb8(R1) args: 0, res: 0, upd: 0;
       cdCb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoF_info" {
     sat_sdyoF_info:
         const sat_sdyoF_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SdyRV_srt;
 },
 _cdCb8() //  [R1]
         { []
         }
     {offset
       cdCb8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCbK; else goto cdCbJ;
       cdCbK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCbJ: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdCbM; else goto cdCbQ;
       cdCbM: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCbQ: // global
           I64[Hp - 16] = sat_sdyoC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdCbN_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Const2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCb8_info" {
     block_cdCb8_info:
         const _cdCb8;
         const 2;
         const 12884901918;
         const SdyRV_srt;
 },
 _cdCbN() //  [R1]
         { []
         }
     {offset
       cdCbN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCbT; else goto cdCbS;
       cdCbT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCbS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCbN_info" {
     block_cdCbN_info:
         const _cdCbN;
         const 0;
         const 30;
 },
 sat_sdyoG_entry() //  [R1]
         { []
         }
     {offset
       cdCbV: // global
           _sdyoG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCbW; else goto cdCbX;
       cdCbX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdCbZ; else goto cdCbY;
       cdCbZ: // global
           HpAlloc = 40;
           goto cdCbW;
       cdCbW: // global
           R1 = _sdyoG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCbY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyoG::P64;
           _sdyop::P64 = P64[_sdyoG::P64 + 16];
           _sdyoq::P64 = P64[_sdyoG::P64 + 24];
           I64[Hp - 32] = lvl3_sdyor_info;
           P64[Hp - 16] = _sdyop::P64;
           I64[Hp - 8] = sat_sdyoF_info;
           P64[Hp] = Hp - 32;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdyoq::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyoG_info" {
     sat_sdyoG_info:
         const sat_sdyoG_entry;
         const 2;
         const 30064771090;
         const SdyRV_srt;
 },
 Data.Functor.Classes.$w$cliftReadsPrec7_entry() //  [R2, R3]
         { []
         }
     {offset
       cdCc0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCc4; else goto cdCc3;
       cdCc4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCc3: // global
           I64[Hp - 24] = sat_sdyoG_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec7_info" {
     Data.Functor.Classes.$w$cliftReadsPrec7_info:
         const Data.Functor.Classes.$w$cliftReadsPrec7_entry;
         const 0;
         const 304942678030;
         const 8589934607;
         const SdyRV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.670770936 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_entry() //  [R2,
                                                                 R6]
         { []
         }
     {offset
       cdCcM: // global
           R3 = R6;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec7_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.675722087 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Either3_bytes" {
     Data.Functor.Classes.$fRead1Either3_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.679471704 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either2_closure" {
     Data.Functor.Classes.$fRead1Either2_closure:
         const Data.Functor.Classes.$fRead1Either2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either2_entry() //  [R1]
         { []
         }
     {offset
       cdCd0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCd1; else goto cdCd2;
       cdCd1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCd2: // global
           (_cdCcX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdCcX::I64 == 0) goto cdCcZ; else goto cdCcY;
       cdCcZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdCcY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdCcX::I64;
           R2 = Data.Functor.Classes.$fRead1Either3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either2_info" {
     Data.Functor.Classes.$fRead1Either2_info:
         const Data.Functor.Classes.$fRead1Either2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.685224066 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either1_closure" {
     Data.Functor.Classes.$fRead1Either1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Either2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.687110705 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Either6_bytes" {
     Data.Functor.Classes.$fRead1Either6_bytes:
         I8[] [76,101,102,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.690151149 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either5_closure" {
     Data.Functor.Classes.$fRead1Either5_closure:
         const Data.Functor.Classes.$fRead1Either5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either5_entry() //  [R1]
         { []
         }
     {offset
       cdCdi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCdj; else goto cdCdk;
       cdCdj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCdk: // global
           (_cdCdf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdCdf::I64 == 0) goto cdCdh; else goto cdCdg;
       cdCdh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdCdg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdCdf::I64;
           R2 = Data.Functor.Classes.$fRead1Either6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either5_info" {
     Data.Functor.Classes.$fRead1Either5_info:
         const Data.Functor.Classes.$fRead1Either5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.69389624 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either4_closure" {
     Data.Functor.Classes.$fRead1Either4_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Either5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.700764229 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec3_closure" {
     Data.Functor.Classes.$w$cliftReadPrec3_closure:
         const Data.Functor.Classes.$w$cliftReadPrec3_info;
         const 0;
 },
 sat_sdyoY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCdW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCe0; else goto cdCdZ;
       cdCe0: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCdZ: // global
           _sdyoR::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _sdyoR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoY_info" {
     sat_sdyoY_info:
         const sat_sdyoY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyoZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCe1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCe5; else goto cdCe4;
       cdCe5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCe4: // global
           _sdyoM::P64 = P64[R1 + 7];
           _sdyoR::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdyoY_info;
           P64[Hp] = _sdyoR::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdyoM::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyoZ_info" {
     sat_sdyoZ_info:
         const sat_sdyoZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyp6_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCen: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCer; else goto cdCeq;
       cdCer: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCeq: // global
           _sdyoR::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sdyoR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyp6_info" {
     sat_sdyp6_info:
         const sat_sdyp6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyp7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCes: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCew; else goto cdCev;
       cdCew: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCev: // global
           _sdyoN::P64 = P64[R1 + 7];
           _sdyoR::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdyp6_info;
           P64[Hp] = _sdyoR::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdyoN::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyp7_info" {
     sat_sdyp7_info:
         const sat_sdyp7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdypa_entry() //  [R1]
         { []
         }
     {offset
       cdCeA: // global
           _sdypa::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdCeB; else goto cdCeC;
       cdCeC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCeE; else goto cdCeD;
       cdCeE: // global
           HpAlloc = 24;
           goto cdCeB;
       cdCeB: // global
           R1 = _sdypa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCeD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdypa::P64;
           _sdyoN::P64 = P64[_sdypa::P64 + 16];
           _sdyoR::P64 = P64[_sdypa::P64 + 24];
           I64[Hp - 16] = sat_sdyp7_info;
           P64[Hp - 8] = _sdyoN::P64;
           P64[Hp] = _sdyoR::P64;
           I64[Sp - 24] = block_cdCex_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Either1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdypa_info" {
     sat_sdypa_info:
         const sat_sdypa_entry;
         const 2;
         const 554050781202;
         const SdyRV_srt;
 },
 _cdCex() //  [R1]
         { []
         }
     {offset
       cdCex: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCeH; else goto cdCeG;
       cdCeH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdCeG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdCex_info" {
     block_cdCex_info:
         const _cdCex;
         const 0;
         const 30;
 },
 sat_sdypb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCeI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCeJ; else goto cdCeK;
       cdCeJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCeK: // global
           I64[Sp - 32] = block_cdCdC_info;
           _sdyoM::P64 = P64[R1 + 6];
           _sdyoN::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sdyoM::P64;
           P64[Sp - 16] = _sdyoN::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCeV; else goto cdCdD;
       udCeV: // global
           call _cdCdC(R1) args: 0, res: 0, upd: 0;
       cdCdD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdypb_info" {
     sat_sdypb_info:
         const sat_sdypb_entry;
         const 2;
         const 3852585664523;
         const 8589934607;
         const SdyRV_srt;
 },
 _cdCdC() //  [R1]
         { []
         }
     {offset
       cdCdC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCeN; else goto cdCeM;
       cdCeN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCeM: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdCeP; else goto cdCeR;
       cdCeP: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCeR: // global
           I64[Hp - 16] = sat_sdyoZ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 8] = block_cdCe6_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Either4_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCdC_info" {
     block_cdCdC_info:
         const _cdCdC;
         const 3;
         const 3852585664542;
         const SdyRV_srt;
 },
 _cdCe6() //  [R1]
         { []
         }
     {offset
       cdCe6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdCeU; else goto cdCeT;
       cdCeU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCeT: // global
           I64[Hp - 40] = sat_sdypa_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCe6_info" {
     block_cdCe6_info:
         const _cdCe6;
         const 2;
         const 1653562408990;
         const SdyRV_srt;
 },
 Data.Functor.Classes.$w$cliftReadPrec3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCeW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCf0; else goto cdCeZ;
       cdCf0: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCeZ: // global
           I64[Hp - 16] = sat_sdypb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdyoO::P64 = R4;
           R4 = R5;
           R3 = _sdyoO::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec3_info" {
     Data.Functor.Classes.$w$cliftReadPrec3_info:
         const Data.Functor.Classes.$w$cliftReadPrec3_entry;
         const 0;
         const 8267812044814;
         const 17179869208;
         const SdyRV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.720488109 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either8_closure" {
     Data.Functor.Classes.$fRead1Either8_closure:
         const Data.Functor.Classes.$fRead1Either8_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either8_entry() //  [R2, R4, R6]
         { []
         }
     {offset
       cdCfJ: // global
           R5 = P64[Sp];
           _sdype::P64 = R4;
           R4 = R6;
           R3 = _sdype::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either8_info" {
     Data.Functor.Classes.$fRead1Either8_info:
         const Data.Functor.Classes.$fRead1Either8_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdyRV_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.724796167 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdypo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCfZ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdypo_info" {
     sat_sdypo_info:
         const sat_sdypo_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdyRV_srt+80;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cdCg2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCg6; else goto cdCg5;
       cdCg6: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCg5: // global
           I64[Hp - 16] = sat_sdypo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_entry;
         const 0;
         const 828928688142;
         const 17179869208;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.733312989 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec8_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec8_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec8_info;
         const 0;
 },
 sat_sdypt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCgr: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdypt_info" {
     sat_sdypt_info:
         const sat_sdypt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyps_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCgz: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyps_info" {
     sat_sdyps_info:
         const sat_sdyps_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdypu_entry() //  [R1]
         { []
         }
     {offset
       cdCgC: // global
           _sdypu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCgD; else goto cdCgE;
       cdCgE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCgG; else goto cdCgF;
       cdCgG: // global
           HpAlloc = 32;
           goto cdCgD;
       cdCgD: // global
           R1 = _sdypu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCgF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdypu::P64;
           _sdypp::P64 = P64[_sdypu::P64 + 16];
           _sdypq::P64 = P64[_sdypu::P64 + 24];
           _sdypr::P64 = P64[_sdypu::P64 + 32];
           I64[Hp - 24] = sat_sdypt_info;
           P64[Hp - 16] = _sdypq::P64;
           I64[Hp - 8] = sat_sdyps_info;
           P64[Hp] = _sdypp::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdypr::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdypu_info" {
     sat_sdypu_info:
         const sat_sdypu_entry;
         const 3;
         const 4294967311;
         const SdyRV_srt+80;
 },
 Data.Functor.Classes.$w$cliftReadsPrec8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCgH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdCgL; else goto cdCgK;
       cdCgL: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCgK: // global
           I64[Hp - 32] = sat_sdypu_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec8_info" {
     Data.Functor.Classes.$w$cliftReadsPrec8_info:
         const Data.Functor.Classes.$w$cliftReadsPrec8_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdyRV_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.742585459 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_entry() //  [R2,
                                                                  R4, R6]
         { []
         }
     {offset
       cdCh4: // global
           _sdypx::P64 = R4;
           R4 = R6;
           R3 = _sdypx::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec8_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.747629818 UTC

[section ""data" . Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdChm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdChn; else goto cdCho;
       cdChn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCho: // global
           I64[Sp - 24] = block_cdChf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udChZ; else goto cdChg;
       udChZ: // global
           call _cdChf(R1) args: 0, res: 0, upd: 0;
       cdChg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Maybe_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Maybe_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdChf() //  [R1]
         { []
         }
     {offset
       cdChf: // global
           _sdypC::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdChj; else goto cdChk;
       cdChj: // global
           I64[Sp + 16] = block_cdChr_info;
           R1 = _sdypC::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto udChX; else goto cdCht;
       udChX: // global
           call _cdChr(R1) args: 0, res: 0, upd: 0;
       cdCht: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdChk: // global
           I64[Sp] = block_cdChG_info;
           _sdypG::P64 = P64[R1 + 6];
           R1 = _sdypC::P64;
           P64[Sp + 16] = _sdypG::P64;
           if (R1 & 7 != 0) goto udChY; else goto cdChI;
       udChY: // global
           call _cdChG(R1) args: 0, res: 0, upd: 0;
       cdChI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdChf_info" {
     block_cdChf_info:
         const _cdChf;
         const 2;
         const 30;
 },
 _cdChr() //  [R1]
         { []
         }
     {offset
       cdChr: // global
           if (R1 & 7 == 1) goto cdChz; else goto udChW;
       cdChz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udChW: // global
           Sp = Sp + 8;
           call _cdChO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdChr_info" {
     block_cdChr_info:
         const _cdChr;
         const 0;
         const 30;
 },
 _cdChG() //  [R1]
         { []
         }
     {offset
       cdChG: // global
           if (R1 & 7 == 1) goto udChV; else goto cdChS;
       udChV: // global
           Sp = Sp + 24;
           call _cdChO() args: 0, res: 0, upd: 0;
       cdChS: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdChG_info" {
     block_cdChG_info:
         const _cdChG;
         const 2;
         const 30;
 },
 _cdChO() //  []
         { []
         }
     {offset
       cdChO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.759059639 UTC

[section ""data" . Data.Functor.Classes.$fEq1Maybe_closure" {
     Data.Functor.Classes.$fEq1Maybe_closure:
         const Data.Functor.Classes.$fEq1Maybe_info;
 },
 Data.Functor.Classes.$fEq1Maybe_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCix: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Maybe_info" {
     Data.Functor.Classes.$fEq1Maybe_info:
         const Data.Functor.Classes.$fEq1Maybe_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.764733301 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdCiP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCiQ; else goto udCjA;
       cdCiQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       udCjA: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdCiF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdCiF() //  []
         { []
         }
     {offset
       cdCiF: // global
           I64[Sp - 8] = block_cdCiI_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCjF; else goto cdCiJ;
       udCjF: // global
           call _cdCiI(R1) args: 0, res: 0, upd: 0;
       cdCiJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdCiI() //  [R1]
         { []
         }
     {offset
       cdCiI: // global
           _sdypL::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCiM; else goto cdCiN;
       cdCiM: // global
           I64[Sp + 24] = block_cdCiU_info;
           R1 = _sdypL::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto udCjG; else goto cdCiW;
       udCjG: // global
           call _cdCiU(R1) args: 0, res: 0, upd: 0;
       cdCiW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCiN: // global
           I64[Sp] = block_cdCj9_info;
           _sdypQ::P64 = P64[R1 + 6];
           _sdypR::P64 = P64[R1 + 14];
           R1 = _sdypL::P64;
           P64[Sp + 16] = _sdypR::P64;
           P64[Sp + 24] = _sdypQ::P64;
           if (R1 & 7 != 0) goto udCjH; else goto cdCjb;
       udCjH: // global
           call _cdCj9(R1) args: 0, res: 0, upd: 0;
       cdCjb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCiI_info" {
     block_cdCiI_info:
         const _cdCiI;
         const 131;
         const 30;
 },
 _cdCiU() //  [R1]
         { []
         }
     {offset
       cdCiU: // global
           if (R1 & 7 == 1) goto cdCj2; else goto udCjE;
       cdCj2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udCjE: // global
           Sp = Sp + 8;
           call _cdCjs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCiU_info" {
     block_cdCiU_info:
         const _cdCiU;
         const 0;
         const 30;
 },
 _cdCj9() //  [R1]
         { []
         }
     {offset
       cdCj9: // global
           if (R1 & 7 == 1) goto udCjB; else goto cdCjm;
       udCjB: // global
           Sp = Sp + 32;
           call _cdCjs() args: 0, res: 0, upd: 0;
       cdCjm: // global
           I64[Sp] = block_cdCjk_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           _sdypU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _sdypU::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCj9_info" {
     block_cdCj9_info:
         const _cdCj9;
         const 3;
         const 30;
 },
 _cdCjk() //  [R1]
         { []
         }
     {offset
       cdCjk: // global
           if (R1 & 7 == 1) goto udCjC; else goto cdCjw;
       udCjC: // global
           Sp = Sp + 32;
           call _cdCjs() args: 0, res: 0, upd: 0;
       cdCjw: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _cdCiF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCjk_info" {
     block_cdCjk_info:
         const _cdCjk;
         const 3;
         const 30;
 },
 _cdCjs() //  []
         { []
         }
     {offset
       cdCjs: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.778416761 UTC

[section ""data" . Data.Functor.Classes.$fEq1[]_closure" {
     Data.Functor.Classes.$fEq1[]_closure:
         const Data.Functor.Classes.$fEq1[]_info;
 },
 Data.Functor.Classes.$fEq1[]_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCks: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1[]_info" {
     Data.Functor.Classes.$fEq1[]_info:
         const Data.Functor.Classes.$fEq1[]_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.782639067 UTC

[section ""data" . Data.Functor.Classes.$w$cliftEq_closure" {
     Data.Functor.Classes.$w$cliftEq_closure:
         const Data.Functor.Classes.$w$cliftEq_info;
 },
 Data.Functor.Classes.$w$cliftEq_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdCkJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCkK; else goto cdCkL;
       cdCkK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCkL: // global
           I64[Sp - 32] = block_cdCkD_info;
           _sdypX::P64 = R3;
           R3 = R5;
           _sdypW::P64 = R2;
           R2 = _sdypX::P64;
           R1 = _sdypW::P64;
           P64[Sp - 24] = _sdypW::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftEq_info" {
     Data.Functor.Classes.$w$cliftEq_info:
         const Data.Functor.Classes.$w$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdCkD() //  [R1]
         { []
         }
     {offset
       cdCkD: // global
           if (R1 & 7 == 1) goto cdCkG; else goto cdCkH;
       cdCkG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCkH: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCkD_info" {
     block_cdCkD_info:
         const _cdCkD;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.789281251 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cdCla: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCle; else goto cdClf;
       cdCle: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdClf: // global
           I64[Sp - 24] = block_cdCl7_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCln; else goto cdCl8;
       udCln: // global
           call _cdCl7(R1) args: 0, res: 0, upd: 0;
       cdCl8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdCl7() //  [R1]
         { []
         }
     {offset
       cdCl7: // global
           I64[Sp - 8] = block_cdCld_info;
           _sdyq6::P64 = P64[R1 + 7];
           _sdyq7::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdyq7::P64;
           P64[Sp + 16] = _sdyq6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udClm; else goto cdClh;
       udClm: // global
           call _cdCld(R1) args: 0, res: 0, upd: 0;
       cdClh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCl7_info" {
     block_cdCl7_info:
         const _cdCl7;
         const 2;
         const 30;
 },
 _cdCld() //  [R1]
         { []
         }
     {offset
       cdCld: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftEq_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCld_info" {
     block_cdCld_info:
         const _cdCld;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.796387481 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdClF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_info" {
     Data.Functor.Classes.$fEq1NonEmpty_info:
         const Data.Functor.Classes.$fEq1NonEmpty_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.799973972 UTC

[section ""data" . Data.Functor.Classes.$fEq1Identity_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Identity_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Identity_$cliftEq_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cdClQ: // global
           _sdyqc::P64 = R3;
           R3 = R4;
           _sdyqb::P64 = R2;
           R2 = _sdyqc::P64;
           R1 = _sdyqb::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Identity_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Identity_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.8036785 UTC

[section ""data" . Data.Functor.Classes.$fEq1Identity_closure" {
     Data.Functor.Classes.$fEq1Identity_closure:
         const Data.Functor.Classes.$fEq1Identity_info;
 },
 Data.Functor.Classes.$fEq1Identity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCm1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Identity_$cliftEq_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Identity_info" {
     Data.Functor.Classes.$fEq1Identity_info:
         const Data.Functor.Classes.$fEq1Identity_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.807745192 UTC

[section ""data" . Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry() //  []
         { []
         }
     {offset
       cdCmc: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Proxy_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Proxy_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.811612824 UTC

[section ""data" . Data.Functor.Classes.$fEq1Proxy_closure" {
     Data.Functor.Classes.$fEq1Proxy_closure:
         const Data.Functor.Classes.$fEq1Proxy_info;
 },
 Data.Functor.Classes.$fEq1Proxy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCmo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Proxy_info" {
     Data.Functor.Classes.$fEq1Proxy_info:
         const Data.Functor.Classes.$fEq1Proxy_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.816409503 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cdCmG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCmH; else goto cdCmI;
       cdCmH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCmI: // global
           I64[Sp - 24] = block_cdCmz_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCnh; else goto cdCmA;
       udCnh: // global
           call _cdCmz(R1) args: 0, res: 0, upd: 0;
       cdCmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdCmz() //  [R1]
         { []
         }
     {offset
       cdCmz: // global
           _sdyqj::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdCmD; else goto cdCmE;
       cdCmD: // global
           I64[Sp + 16] = block_cdCmL_info;
           R1 = _sdyqj::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto udCnf; else goto cdCmN;
       udCnf: // global
           call _cdCmL(R1) args: 0, res: 0, upd: 0;
       cdCmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCmE: // global
           I64[Sp] = block_cdCn0_info;
           _sdyqn::P64 = P64[R1 + 6];
           R1 = _sdyqj::P64;
           P64[Sp + 16] = _sdyqn::P64;
           if (R1 & 7 != 0) goto udCng; else goto cdCn2;
       udCng: // global
           call _cdCn0(R1) args: 0, res: 0, upd: 0;
       cdCn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCmz_info" {
     block_cdCmz_info:
         const _cdCmz;
         const 2;
         const 30;
 },
 _cdCmL() //  [R1]
         { []
         }
     {offset
       cdCmL: // global
           if (R1 & 7 == 1) goto cdCmT; else goto cdCmX;
       cdCmT: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCmX: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCmL_info" {
     block_cdCmL_info:
         const _cdCmL;
         const 0;
         const 30;
 },
 _cdCn0() //  [R1]
         { []
         }
     {offset
       cdCn0: // global
           if (R1 & 7 == 1) goto cdCn8; else goto cdCnc;
       cdCn8: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCnc: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCn0_info" {
     block_cdCn0_info:
         const _cdCn0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.825130724 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Maybe_closure" {
     Data.Functor.Classes.$fOrd1Maybe_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.830001758 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info;
 },
 Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdCnU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCnV; else goto udCoK;
       cdCnV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       udCoK: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdCnK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdCnK() //  []
         { []
         }
     {offset
       cdCnK: // global
           I64[Sp - 8] = block_cdCnN_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCoQ; else goto cdCnO;
       udCoQ: // global
           call _cdCnN(R1) args: 0, res: 0, upd: 0;
       cdCnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdCnN() //  [R1]
         { []
         }
     {offset
       cdCnN: // global
           _sdyqs::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCnR; else goto cdCnS;
       cdCnR: // global
           I64[Sp + 24] = block_cdCnZ_info;
           R1 = _sdyqs::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto udCoR; else goto cdCo1;
       udCoR: // global
           call _cdCnZ(R1) args: 0, res: 0, upd: 0;
       cdCo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCnS: // global
           I64[Sp] = block_cdCoe_info;
           _sdyqx::P64 = P64[R1 + 6];
           _sdyqy::P64 = P64[R1 + 14];
           R1 = _sdyqs::P64;
           P64[Sp + 16] = _sdyqy::P64;
           P64[Sp + 24] = _sdyqx::P64;
           if (R1 & 7 != 0) goto udCoS; else goto cdCog;
       udCoS: // global
           call _cdCoe(R1) args: 0, res: 0, upd: 0;
       cdCog: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCnN_info" {
     block_cdCnN_info:
         const _cdCnN;
         const 131;
         const 30;
 },
 _cdCnZ() //  [R1]
         { []
         }
     {offset
       cdCnZ: // global
           if (R1 & 7 == 1) goto cdCo7; else goto udCoP;
       cdCo7: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udCoP: // global
           Sp = Sp + 8;
           call _cdCox() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCnZ_info" {
     block_cdCnZ_info:
         const _cdCnZ;
         const 0;
         const 30;
 },
 _cdCoe() //  [R1]
         { []
         }
     {offset
       cdCoe: // global
           if (R1 & 7 == 1) goto udCoL; else goto cdCor;
       udCoL: // global
           Sp = Sp + 32;
           call _cdCoF() args: 0, res: 0, upd: 0;
       cdCor: // global
           I64[Sp] = block_cdCop_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           _sdyqB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _sdyqB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCoe_info" {
     block_cdCoe_info:
         const _cdCoe;
         const 3;
         const 30;
 },
 _cdCop() //  [R1]
         { []
         }
     {offset
       cdCop: // global
           _cdCoH::P64 = R1 & 7;
           if (_cdCoH::P64 < 3) goto udCoJ; else goto udCoM;
       udCoJ: // global
           if (_cdCoH::P64 < 2) goto udCoN; else goto cdCoB;
       udCoN: // global
           Sp = Sp + 32;
           call _cdCox() args: 0, res: 0, upd: 0;
       cdCoB: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _cdCnK() args: 0, res: 0, upd: 0;
       udCoM: // global
           Sp = Sp + 32;
           call _cdCoF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCop_info" {
     block_cdCop_info:
         const _cdCop;
         const 3;
         const 30;
 },
 _cdCox() //  []
         { []
         }
     {offset
       cdCox: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdCoF() //  []
         { []
         }
     {offset
       cdCoF: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.842944714 UTC

[section ""data" . Data.Functor.Classes.$fOrd1[]_closure" {
     Data.Functor.Classes.$fOrd1[]_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure+3;
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.846644319 UTC

[section ""data" . Data.Functor.Classes.$w$cliftCompare1_closure" {
     Data.Functor.Classes.$w$cliftCompare1_closure:
         const Data.Functor.Classes.$w$cliftCompare1_info;
 },
 Data.Functor.Classes.$w$cliftCompare1_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdCpO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCpP; else goto cdCpQ;
       cdCpP: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftCompare1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCpQ: // global
           I64[Sp - 32] = block_cdCpH_info;
           _sdyqE::P64 = R3;
           R3 = R5;
           _sdyqD::P64 = R2;
           R2 = _sdyqE::P64;
           R1 = _sdyqD::P64;
           P64[Sp - 24] = _sdyqD::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftCompare1_info" {
     Data.Functor.Classes.$w$cliftCompare1_info:
         const Data.Functor.Classes.$w$cliftCompare1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdCpH() //  [R1]
         { []
         }
     {offset
       cdCpH: // global
           _cdCpN::P64 = R1 & 7;
           if (_cdCpN::P64 < 3) goto udCq0; else goto cdCpM;
       udCq0: // global
           if (_cdCpN::P64 < 2) goto cdCpK; else goto cdCpL;
       cdCpK: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCpL: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
       cdCpM: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCpH_info" {
     block_cdCpH_info:
         const _cdCpH;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.853202763 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdCqj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCqn; else goto cdCqo;
       cdCqn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCqo: // global
           I64[Sp - 24] = block_cdCqg_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCqw; else goto cdCqh;
       udCqw: // global
           call _cdCqg(R1) args: 0, res: 0, upd: 0;
       cdCqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdCqg() //  [R1]
         { []
         }
     {offset
       cdCqg: // global
           I64[Sp - 8] = block_cdCqm_info;
           _sdyqN::P64 = P64[R1 + 7];
           _sdyqO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdyqO::P64;
           P64[Sp + 16] = _sdyqN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCqv; else goto cdCqq;
       udCqv: // global
           call _cdCqm(R1) args: 0, res: 0, upd: 0;
       cdCqq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCqg_info" {
     block_cdCqg_info:
         const _cdCqg;
         const 2;
         const 30;
 },
 _cdCqm() //  [R1]
         { []
         }
     {offset
       cdCqm: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftCompare1_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCqm_info" {
     block_cdCqm_info:
         const _cdCqm;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.8600121 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.862224975 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Identity_$cliftCompare_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdCqP: // global
           _sdyqT::P64 = R3;
           R3 = R4;
           _sdyqS::P64 = R2;
           R2 = _sdyqT::P64;
           R1 = _sdyqS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.865849627 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Identity_closure" {
     Data.Functor.Classes.$fOrd1Identity_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.867897265 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_entry() //  []
         { []
         }
     {offset
       cdCr1: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.871202428 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Proxy_closure" {
     Data.Functor.Classes.$fOrd1Proxy_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.873347949 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadPrec_entry() //  [R3]
         { []
         }
     {offset
       cdCre: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.876412653 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1NonEmpty4_bytes" {
     Data.Functor.Classes.$fRead1NonEmpty4_bytes:
         I8[] [58,124]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.879447945 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty3_closure" {
     Data.Functor.Classes.$fRead1NonEmpty3_closure:
         const Data.Functor.Classes.$fRead1NonEmpty3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty3_entry() //  [R1]
         { []
         }
     {offset
       cdCrs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCrt; else goto cdCru;
       cdCrt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCru: // global
           (_cdCrp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdCrp::I64 == 0) goto cdCrr; else goto cdCrq;
       cdCrr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdCrq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdCrp::I64;
           R2 = Data.Functor.Classes.$fRead1NonEmpty4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty3_info" {
     Data.Functor.Classes.$fRead1NonEmpty3_info:
         const Data.Functor.Classes.$fRead1NonEmpty3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.883529654 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty2_closure" {
     Data.Functor.Classes.$fRead1NonEmpty2_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.892108024 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec5_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec5_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec5_info;
         const 0;
 },
 Data.Functor.Classes.$w$cliftReadsPrec5_slow() //  [R1]
         { []
         }
     {offset
       cdCrE: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 go2_sdyrn_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCsx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCsy; else goto cdCsz;
       cdCsy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCsz: // global
           I64[Sp - 32] = block_cdCsq_info;
           _sdyrn::P64 = R1;
           _sdyra::P64 = P64[R1 + 7];
           _sdyrm::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sdyra::P64;
           P64[Sp - 16] = _sdyrm::P64;
           P64[Sp - 8] = _sdyrn::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCsT; else goto cdCsr;
       udCsT: // global
           call _cdCsq(R1) args: 0, res: 0, upd: 0;
       cdCsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_sdyrn_info" {
     go2_sdyrn_info:
         const go2_sdyrn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdCsq() //  [R1]
         { []
         }
     {offset
       cdCsq: // global
           if (R1 & 7 == 1) goto cdCsu; else goto cdCsv;
       cdCsu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdCsv: // global
           I64[Sp] = block_cdCsF_info;
           _sdyrr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdyrr::P64;
           if (R1 & 7 != 0) goto udCsS; else goto cdCsG;
       udCsS: // global
           call _cdCsF(R1) args: 0, res: 0, upd: 0;
       cdCsG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCsq_info" {
     block_cdCsq_info:
         const _cdCsq;
         const 3;
         const 30;
 },
 _cdCsF() //  [R1]
         { []
         }
     {offset
       cdCsF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdCsR; else goto cdCsQ;
       cdCsR: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCsQ: // global
           _sdyrt::P64 = P64[R1 + 7];
           _sdyru::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = GHC.Base.:|_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _sdyrt::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _sdyru::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCsF_info" {
     block_cdCsF_info:
         const _cdCsF;
         const 3;
         const 30;
 },
 go1_sdyrd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCsY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdCsZ; else goto udCtj;
       cdCsZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       udCtj: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cdCs1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_sdyrd_info" {
     go1_sdyrd_info:
         const go1_sdyrd_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdyRV_srt+104;
 },
 _cdCs1() //  []
         { []
         }
     {offset
       cdCs1: // global
           I64[Sp - 24] = block_cdCs4_info;
           R1 = P64[Sp + 8];
           _sdyrd::P64 = P64[Sp];
           P64[Sp - 16] = P64[_sdyrd::P64 + 15];
           P64[Sp - 8] = P64[_sdyrd::P64 + 23];
           P64[Sp + 8] = P64[_sdyrd::P64 + 7];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCtl; else goto cdCs5;
       udCtl: // global
           call _cdCs4(R1) args: 0, res: 0, upd: 0;
       cdCs5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdCs4() //  [R1]
         { []
         }
     {offset
       cdCs4: // global
           if (R1 & 7 == 1) goto cdCsV; else goto cdCsW;
       cdCsV: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdCsW: // global
           I64[Sp] = block_cdCsa_info;
           _sdyrh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdyrh::P64;
           if (R1 & 7 != 0) goto udCtm; else goto cdCsb;
       udCtm: // global
           call _cdCsa(R1) args: 0, res: 0, upd: 0;
       cdCsb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCs4_info" {
     block_cdCs4_info:
         const _cdCs4;
         const 4;
         const 4294967326;
         const SdyRV_srt+104;
 },
 _cdCsa() //  [R1]
         { []
         }
     {offset
       cdCsa: // global
           I64[Sp - 8] = block_cdCsf_info;
           R3 = Data.Functor.Classes.$fRead1NonEmpty3_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCsa_info" {
     block_cdCsa_info:
         const _cdCsa;
         const 4;
         const 4294967326;
         const SdyRV_srt+104;
 },
 _cdCsf() //  [R1]
         { []
         }
     {offset
       cdCsf: // global
           _sdyrh::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCt8; else goto cdCta;
       cdCt8: // global
           P64[Sp + 40] = _sdyrh::P64;
           Sp = Sp + 32;
           call _cdCs1() args: 0, res: 0, upd: 0;
       cdCta: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCtd; else goto cdCtc;
       cdCtd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCtc: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sdyrh::P64;
           I64[Hp - 16] = go2_sdyrn_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           I64[Sp + 32] = block_cdCt9_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 40];
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCsf_info" {
     block_cdCsf_info:
         const _cdCsf;
         const 5;
         const 4294967326;
         const SdyRV_srt+104;
 },
 _cdCt9() //  [R1]
         { []
         }
     {offset
       cdCt9: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go2_sdyrn_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCt9_info" {
     block_cdCt9_info:
         const _cdCt9;
         const 1;
         const 30;
 },
 go_sdyr4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCtt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCtu; else goto cdCtv;
       cdCtu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCtv: // global
           I64[Sp - 24] = block_cdCrN_info;
           _sdyr4::P64 = R1;
           _sdyr1::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdyr1::P64;
           P64[Sp - 8] = _sdyr4::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCtI; else goto cdCrO;
       udCtI: // global
           call _cdCrN(R1) args: 0, res: 0, upd: 0;
       cdCrO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyr4_info" {
     go_sdyr4_info:
         const go_sdyr4_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SdyRV_srt+104;
 },
 _cdCrN() //  [R1]
         { []
         }
     {offset
       cdCrN: // global
           if (R1 & 7 == 1) goto cdCtq; else goto cdCtr;
       cdCtq: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCtr: // global
           I64[Sp - 8] = block_cdCrT_info;
           _sdyr8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyr8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCtH; else goto cdCrU;
       udCtH: // global
           call _cdCrT(R1) args: 0, res: 0, upd: 0;
       cdCrU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCrN_info" {
     block_cdCrN_info:
         const _cdCrN;
         const 2;
         const 12884901918;
         const SdyRV_srt+104;
 },
 _cdCrT() //  [R1]
         { []
         }
     {offset
       cdCrT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdCtC; else goto cdCtB;
       cdCtC: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCtB: // global
           _sdyra::P64 = P64[R1 + 7];
           _sdyrb::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdyrd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdyra::P64;
           P64[Hp] = Hp - 56;
           I64[Sp + 16] = block_cdCty_info;
           R3 = _sdyrb::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 24] = Hp - 23;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCrT_info" {
     block_cdCrT_info:
         const _cdCrT;
         const 3;
         const 12884901918;
         const SdyRV_srt+104;
 },
 _cdCty() //  [R1]
         { []
         }
     {offset
       cdCty: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdyrd_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCty_info" {
     block_cdCty_info:
         const _cdCty;
         const 1;
         const 4294967326;
         const SdyRV_srt+104;
 },
 sat_sdyrE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCtQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCtR; else goto cdCtS;
       cdCtR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCtS: // global
           I64[Sp - 16] = block_cdCtO_info;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1NonEmpty2_closure+1;
           _sdyr4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdyr4::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyrE_info" {
     sat_sdyrE_info:
         const sat_sdyrE_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdyRV_srt+104;
 },
 _cdCtO() //  [R1]
         { []
         }
     {offset
       cdCtO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyr4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCtO_info" {
     block_cdCtO_info:
         const _cdCtO;
         const 1;
         const 12884901918;
         const SdyRV_srt+104;
 },
 Data.Functor.Classes.$w$cliftReadsPrec5_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdCtY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdCu2; else goto cdCu1;
       cdCu2: // global
           HpAlloc = 40;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec5_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdCu1: // global
           I64[Hp - 32] = go_sdyr4_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sdyrE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           _sdyrB::P64 = I64[(%MO_S_Gt_W64(R4,
                                           5) << 3) + GHC.Types.Bool_closure_tbl];
           R4 = R5;
           R3 = Hp - 15;
           R2 = _sdyrB::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec5_info" {
     Data.Functor.Classes.$w$cliftReadsPrec5_info:
         const Data.Functor.Classes.$w$cliftReadsPrec5_entry;
         const 0;
         const 64424509454;
         const 17179869184;
         const SdyRV_srt+104;
         const 260;
         const Data.Functor.Classes.$w$cliftReadsPrec5_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.923572691 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdCvI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCvJ; else goto cdCvK;
       cdCvJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCvK: // global
           I64[Sp - 32] = block_cdCvF_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCvO; else goto cdCvG;
       udCvO: // global
           call _cdCvF(R1) args: 0, res: 0, upd: 0;
       cdCvG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SdyRV_srt+128;
 },
 _cdCvF() //  [R1]
         { []
         }
     {offset
       cdCvF: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCvF_info" {
     block_cdCvF_info:
         const _cdCvF;
         const 3;
         const 4294967326;
         const SdyRV_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.928785049 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Proxy4_bytes" {
     Data.Functor.Classes.$fRead1Proxy4_bytes:
         I8[] [80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.931117073 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy3_closure" {
     Data.Functor.Classes.$fRead1Proxy3_closure:
         const Data.Functor.Classes.$fRead1Proxy3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy3_entry() //  [R1]
         { []
         }
     {offset
       cdCw5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCw6; else goto cdCw7;
       cdCw6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCw7: // global
           (_cdCw2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdCw2::I64 == 0) goto cdCw4; else goto cdCw3;
       cdCw4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdCw3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdCw2::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy3_info" {
     Data.Functor.Classes.$fRead1Proxy3_info:
         const Data.Functor.Classes.$fRead1Proxy3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.934725532 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_lexeme_closure" {
     Data.Functor.Classes.$fRead1Proxy_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Proxy3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.937938016 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy2_closure" {
     Data.Functor.Classes.$fRead1Proxy2_closure:
         const Data.Functor.Classes.$fRead1Proxy2_info;
         const 0;
 },
 sat_sdyrO_entry() //  [R1]
         { []
         }
     {offset
       cdCwp: // global
           R2 = Data.Proxy.Proxy_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyrO_info" {
     sat_sdyrO_info:
         const sat_sdyrO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$fRead1Proxy2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdCwv: // global
           _sdyrM::P64 = R3;
           _sdyrL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdCww; else goto cdCwx;
       cdCwx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCwz; else goto cdCwy;
       cdCwz: // global
           HpAlloc = 16;
           goto cdCww;
       cdCww: // global
           R3 = _sdyrM::P64;
           R2 = _sdyrL::P64;
           R1 = Data.Functor.Classes.$fRead1Proxy2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCwy: // global
           I64[Hp - 8] = sat_sdyrO_info;
           P64[Hp] = _sdyrM::P64;
           I64[Sp - 8] = block_cdCws_info;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Proxy_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy2_info" {
     Data.Functor.Classes.$fRead1Proxy2_info:
         const Data.Functor.Classes.$fRead1Proxy2_entry;
         const 0;
         const 3377704015495182;
         const 8589934607;
         const SdyRV_srt;
 },
 _cdCws() //  [R1]
         { []
         }
     {offset
       cdCws: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCwC; else goto cdCwB;
       cdCwC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCwB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCws_info" {
     block_cdCws_info:
         const _cdCws;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.944813274 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy1_closure" {
     Data.Functor.Classes.$fRead1Proxy1_closure:
         const Data.Functor.Classes.$fRead1Proxy1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdCwT: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Proxy2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy1_info" {
     Data.Functor.Classes.$fRead1Proxy1_info:
         const Data.Functor.Classes.$fRead1Proxy1_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const SdyRV_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.94835169 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy5_closure" {
     Data.Functor.Classes.$fRead1Proxy5_closure:
         const Data.Functor.Classes.$fRead1Proxy5_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy5_entry() //  [R4, R5]
         { []
         }
     {offset
       cdCx4: // global
           R3 = R5;
           R2 = R4;
           call Data.Functor.Classes.$fRead1Proxy1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy5_info" {
     Data.Functor.Classes.$fRead1Proxy5_info:
         const Data.Functor.Classes.$fRead1Proxy5_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.952528866 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info;
 },
 Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_entry() //  [R3]
         { []
         }
     {offset
       cdCxf: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.95623778 UTC

[section ""cstring" . Data.Functor.Classes.$fShow1NonEmpty1_bytes" {
     Data.Functor.Classes.$fShow1NonEmpty1_bytes:
         I8[] [32,58,124,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.964738375 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec1_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec1_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec1_info;
 },
 Data.Functor.Classes.$w$cliftShowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       cdCxo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sdys1_entry() //  [R1]
         { []
         }
     {offset
       cdCxw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCxx; else goto cdCxy;
       cdCxx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCxy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1NonEmpty2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdys1_info" {
     f_sdys1_info:
         const f_sdys1_entry;
         const 2;
         const 18;
 },
 sat_sdys6_entry() //  [R1]
         { []
         }
     {offset
       cdCxN: // global
           _sdys6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCxO; else goto cdCxP;
       cdCxP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCxR; else goto cdCxQ;
       cdCxR: // global
           HpAlloc = 32;
           goto cdCxO;
       cdCxO: // global
           R1 = _sdys6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCxQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdys6::P64;
           _sdys2::P64 = P64[_sdys6::P64 + 16];
           _sdys4::P64 = P64[_sdys6::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdys2::P64;
           P64[Hp] = _sdys4::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Classes.$fShow1NonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdys6_info" {
     sat_sdys6_info:
         const sat_sdys6_entry;
         const 2;
         const 18;
 },
 sat_sdys7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCxS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCxW; else goto cdCxV;
       cdCxW: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCxV: // global
           _sdys1::P64 = P64[R1 + 7];
           _sdys2::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdys6_info;
           P64[Hp - 8] = _sdys2::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdys1::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdys7_info" {
     sat_sdys7_info:
         const sat_sdys7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdysa_entry() //  [R1]
         { []
         }
     {offset
       cdCyg: // global
           _sdysa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCyh; else goto cdCyi;
       cdCyi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCyk; else goto cdCyj;
       cdCyk: // global
           HpAlloc = 24;
           goto cdCyh;
       cdCyh: // global
           R1 = _sdysa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCyj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdysa::P64;
           _sdys2::P64 = P64[_sdysa::P64 + 16];
           _sdys8::P64 = P64[_sdysa::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdys8::P64;
           R2 = Hp - 14;
           R1 = _sdys2::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdysa_info" {
     sat_sdysa_info:
         const sat_sdysa_entry;
         const 2;
         const 18;
 },
 sat_sdysb_entry() //  [R1]
         { []
         }
     {offset
       cdCyl: // global
           _sdysb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCym; else goto cdCyn;
       cdCyn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCyp; else goto cdCyo;
       cdCyp: // global
           HpAlloc = 32;
           goto cdCym;
       cdCym: // global
           R1 = _sdysb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCyo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdysb::P64;
           _sdys2::P64 = P64[_sdysb::P64 + 16];
           _sdys8::P64 = P64[_sdysb::P64 + 24];
           I64[Hp - 24] = sat_sdysa_info;
           P64[Hp - 8] = _sdys2::P64;
           P64[Hp] = _sdys8::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Classes.$fShow1NonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdysb_info" {
     sat_sdysb_info:
         const sat_sdysb_entry;
         const 2;
         const 18;
 },
 sat_sdysc_entry() //  [R1]
         { []
         }
     {offset
       cdCyq: // global
           _sdysc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCyr; else goto cdCys;
       cdCys: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCyu; else goto cdCyt;
       cdCyu: // global
           HpAlloc = 32;
           goto cdCyr;
       cdCyr: // global
           R1 = _sdysc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCyt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdysc::P64;
           _sdys1::P64 = P64[_sdysc::P64 + 16];
           _sdys2::P64 = P64[_sdysc::P64 + 24];
           _sdys8::P64 = P64[_sdysc::P64 + 32];
           I64[Hp - 24] = sat_sdysb_info;
           P64[Hp - 8] = _sdys2::P64;
           P64[Hp] = _sdys8::P64;
           R2 = Hp - 24;
           R1 = _sdys1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdysc_info" {
     sat_sdysc_info:
         const sat_sdysc_entry;
         const 3;
         const 15;
 },
 sat_sdysd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCyw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdCyA; else goto cdCyz;
       cdCyA: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCyz: // global
           _sdys1::P64 = P64[R1 + 7];
           _sdys2::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdysc_info;
           P64[Hp - 40] = _sdys1::P64;
           P64[Hp - 32] = _sdys2::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdysd_info" {
     sat_sdysd_info:
         const sat_sdysd_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$w$cliftShowsPrec1_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cdCyE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdCyI; else goto cdCyH;
       cdCyI: // global
           HpAlloc = 88;
           R1 = Data.Functor.Classes.$w$cliftShowsPrec1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdCyH: // global
           I64[Hp - 80] = f_sdys1_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cdCxs::P64 = Hp - 80;
           _cdCxz::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 5)) goto cdCyC; else goto cdCyD;
       cdCyC: // global
           I64[Hp - 16] = sat_sdys7_info;
           P64[Hp - 8] = _cdCxs::P64;
           P64[Hp] = _cdCxz::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCyD: // global
           I64[Hp - 16] = sat_sdysd_info;
           P64[Hp - 8] = _cdCxs::P64;
           P64[Hp] = _cdCxz::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec1_info" {
     Data.Functor.Classes.$w$cliftShowsPrec1_info:
         const Data.Functor.Classes.$w$cliftShowsPrec1_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 261;
         const Data.Functor.Classes.$w$cliftShowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.987782384 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info;
 },
 Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdCzq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCzu; else goto cdCzv;
       cdCzu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCzv: // global
           I64[Sp - 32] = block_cdCzn_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCzD; else goto cdCzo;
       udCzD: // global
           call _cdCzn(R1) args: 0, res: 0, upd: 0;
       cdCzo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCzn() //  [R1]
         { []
         }
     {offset
       cdCzn: // global
           I64[Sp] = block_cdCzt_info;
           _sdysj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sdysj::I64;
           if (R1 & 7 != 0) goto udCzC; else goto cdCzx;
       udCzC: // global
           call _cdCzt(R1) args: 0, res: 0, upd: 0;
       cdCzx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCzn_info" {
     block_cdCzn_info:
         const _cdCzn;
         const 3;
         const 30;
 },
 _cdCzt() //  [R1]
         { []
         }
     {offset
       cdCzt: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCzt_info" {
     block_cdCzt_info:
         const _cdCzt;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:44.996338043 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy2_closure" {
     Data.Functor.Classes.$fShow1Proxy2_closure:
         const Data.Functor.Classes.$fShow1Proxy2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy2_entry() //  [R2]
         { []
         }
     {offset
       cdCzV: // global
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Proxy3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy2_info" {
     Data.Functor.Classes.$fShow1Proxy2_info:
         const Data.Functor.Classes.$fShow1Proxy2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdyRV_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.001089591 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_entry() //  [R6]
         { []
         }
     {offset
       cdCA6: // global
           R2 = R6;
           call Data.Functor.Classes.$fShow1Proxy2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.007366192 UTC

[section ""data" . Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdCAk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdCAo; else goto cdCAp;
       cdCAo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCAp: // global
           I64[Sp - 32] = block_cdCAh_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCAJ; else goto cdCAi;
       udCAJ: // global
           call _cdCAh(R1) args: 0, res: 0, upd: 0;
       cdCAi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2(,)_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2(,)_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCAh() //  [R1]
         { []
         }
     {offset
       cdCAh: // global
           I64[Sp - 8] = block_cdCAn_info;
           _sdysw::P64 = P64[R1 + 7];
           _sdysx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdysx::P64;
           P64[Sp + 24] = _sdysw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCAI; else goto cdCAr;
       udCAI: // global
           call _cdCAn(R1) args: 0, res: 0, upd: 0;
       cdCAr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCAh_info" {
     block_cdCAh_info:
         const _cdCAh;
         const 3;
         const 30;
 },
 _cdCAn() //  [R1]
         { []
         }
     {offset
       cdCAn: // global
           I64[Sp] = block_cdCAv_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 32];
           _sdysA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sdysA::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCAn_info" {
     block_cdCAn_info:
         const _cdCAn;
         const 4;
         const 30;
 },
 _cdCAv() //  [R1]
         { []
         }
     {offset
       cdCAv: // global
           if (R1 & 7 == 1) goto cdCAC; else goto cdCAG;
       cdCAC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCAG: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCAv_info" {
     block_cdCAv_info:
         const _cdCAv;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.016701397 UTC

[section ""data" . Data.Functor.Classes.$fEq2(,)_closure" {
     Data.Functor.Classes.$fEq2(,)_closure:
         const Data.Functor.Classes.$fEq2(,)_info;
 },
 Data.Functor.Classes.$fEq2(,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCB7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2(,)_info" {
     Data.Functor.Classes.$fEq2(,)_info:
         const Data.Functor.Classes.$fEq2(,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.021294442 UTC

[section ""data" . Data.Functor.Classes.$fEq1(,)_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1(,)_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1(,)_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1(,)_$cliftEq_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCBl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdCBp; else goto cdCBq;
       cdCBp: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1(,)_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCBq: // global
           I64[Sp - 32] = block_cdCBi_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCBK; else goto cdCBj;
       udCBK: // global
           call _cdCBi(R1) args: 0, res: 0, upd: 0;
       cdCBj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1(,)_$cliftEq_info" {
     Data.Functor.Classes.$fEq1(,)_$cliftEq_info:
         const Data.Functor.Classes.$fEq1(,)_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCBi() //  [R1]
         { []
         }
     {offset
       cdCBi: // global
           I64[Sp - 8] = block_cdCBo_info;
           _sdysH::P64 = P64[R1 + 7];
           _sdysI::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdysI::P64;
           P64[Sp + 24] = _sdysH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCBJ; else goto cdCBs;
       udCBJ: // global
           call _cdCBo(R1) args: 0, res: 0, upd: 0;
       cdCBs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCBi_info" {
     block_cdCBi_info:
         const _cdCBi;
         const 3;
         const 30;
 },
 _cdCBo() //  [R1]
         { []
         }
     {offset
       cdCBo: // global
           I64[Sp] = block_cdCBw_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCBo_info" {
     block_cdCBo_info:
         const _cdCBo;
         const 4;
         const 30;
 },
 _cdCBw() //  [R1]
         { []
         }
     {offset
       cdCBw: // global
           if (R1 & 7 == 1) goto cdCBD; else goto cdCBH;
       cdCBD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCBH: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCBw_info" {
     block_cdCBw_info:
         const _cdCBw;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.029632499 UTC

[section ""data" . Data.Functor.Classes.$fEq1(,)_closure" {
     Data.Functor.Classes.$fEq1(,)_closure:
         const Data.Functor.Classes.$fEq1(,)_info;
 },
 Data.Functor.Classes.$fEq1(,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCCb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1(,)_$cliftEq_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1(,)_info" {
     Data.Functor.Classes.$fEq1(,)_info:
         const Data.Functor.Classes.$fEq1(,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.034608237 UTC

[section ""data" . Data.Functor.Classes.$fEq2Either_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2Either_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2Either_$cliftEq2_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdCCt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCCu; else goto cdCCv;
       cdCCu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq2Either_$cliftEq2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCCv: // global
           I64[Sp - 32] = block_cdCCm_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCD6; else goto cdCCn;
       udCD6: // global
           call _cdCCm(R1) args: 0, res: 0, upd: 0;
       cdCCn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Either_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2Either_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCCm() //  [R1]
         { []
         }
     {offset
       cdCCm: // global
           _sdysQ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCCq; else goto cdCCr;
       cdCCq: // global
           I64[Sp] = block_cdCCy_info;
           _sdysS::P64 = P64[R1 + 7];
           R1 = _sdysQ::P64;
           P64[Sp + 24] = _sdysS::P64;
           if (R1 & 7 != 0) goto udCD4; else goto cdCCA;
       udCD4: // global
           call _cdCCy(R1) args: 0, res: 0, upd: 0;
       cdCCA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCCr: // global
           I64[Sp + 8] = block_cdCCN_info;
           _sdysW::P64 = P64[R1 + 6];
           R1 = _sdysQ::P64;
           P64[Sp + 24] = _sdysW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udCD5; else goto cdCCP;
       udCD5: // global
           call _cdCCN(R1) args: 0, res: 0, upd: 0;
       cdCCP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCCm_info" {
     block_cdCCm_info:
         const _cdCCm;
         const 3;
         const 30;
 },
 _cdCCy() //  [R1]
         { []
         }
     {offset
       cdCCy: // global
           if (R1 & 7 == 1) goto cdCCG; else goto udCD3;
       cdCCG: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       udCD3: // global
           Sp = Sp + 32;
           call _cdCCV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCCy_info" {
     block_cdCCy_info:
         const _cdCCy;
         const 131;
         const 30;
 },
 _cdCCN() //  [R1]
         { []
         }
     {offset
       cdCCN: // global
           if (R1 & 7 == 1) goto udCD2; else goto cdCCZ;
       udCD2: // global
           Sp = Sp + 24;
           call _cdCCV() args: 0, res: 0, upd: 0;
       cdCCZ: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCCN_info" {
     block_cdCCN_info:
         const _cdCCN;
         const 2;
         const 30;
 },
 _cdCCV() //  []
         { []
         }
     {offset
       cdCCV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.044618876 UTC

[section ""data" . Data.Functor.Classes.$fEq2Either_closure" {
     Data.Functor.Classes.$fEq2Either_closure:
         const Data.Functor.Classes.$fEq2Either_info;
 },
 Data.Functor.Classes.$fEq2Either_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCDD: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2Either_$cliftEq2_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Either_info" {
     Data.Functor.Classes.$fEq2Either_info:
         const Data.Functor.Classes.$fEq2Either_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.050381199 UTC

[section ""data" . Data.Functor.Classes.$fEq1Either_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Either_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Either_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Either_$cliftEq_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdCDV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCDW; else goto cdCDX;
       cdCDW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Either_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCDX: // global
           I64[Sp - 32] = block_cdCDO_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCEy; else goto cdCDP;
       udCEy: // global
           call _cdCDO(R1) args: 0, res: 0, upd: 0;
       cdCDP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Either_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Either_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Either_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCDO() //  [R1]
         { []
         }
     {offset
       cdCDO: // global
           _sdyt3::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCDS; else goto cdCDT;
       cdCDS: // global
           I64[Sp] = block_cdCE0_info;
           _sdyt5::P64 = P64[R1 + 7];
           R1 = _sdyt3::P64;
           P64[Sp + 24] = _sdyt5::P64;
           if (R1 & 7 != 0) goto udCEw; else goto cdCE2;
       udCEw: // global
           call _cdCE0(R1) args: 0, res: 0, upd: 0;
       cdCE2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCDT: // global
           I64[Sp + 8] = block_cdCEf_info;
           _sdyt9::P64 = P64[R1 + 6];
           R1 = _sdyt3::P64;
           P64[Sp + 24] = _sdyt9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udCEx; else goto cdCEh;
       udCEx: // global
           call _cdCEf(R1) args: 0, res: 0, upd: 0;
       cdCEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCDO_info" {
     block_cdCDO_info:
         const _cdCDO;
         const 3;
         const 30;
 },
 _cdCE0() //  [R1]
         { []
         }
     {offset
       cdCE0: // global
           if (R1 & 7 == 1) goto cdCE8; else goto udCEv;
       cdCE8: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       udCEv: // global
           Sp = Sp + 32;
           call _cdCEn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCE0_info" {
     block_cdCE0_info:
         const _cdCE0;
         const 131;
         const 30;
 },
 _cdCEf() //  [R1]
         { []
         }
     {offset
       cdCEf: // global
           if (R1 & 7 == 1) goto udCEu; else goto cdCEr;
       udCEu: // global
           Sp = Sp + 24;
           call _cdCEn() args: 0, res: 0, upd: 0;
       cdCEr: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCEf_info" {
     block_cdCEf_info:
         const _cdCEf;
         const 2;
         const 30;
 },
 _cdCEn() //  []
         { []
         }
     {offset
       cdCEn: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.059779254 UTC

[section ""data" . Data.Functor.Classes.$fEq1Either_closure" {
     Data.Functor.Classes.$fEq1Either_closure:
         const Data.Functor.Classes.$fEq1Either_info;
 },
 Data.Functor.Classes.$fEq1Either_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCF7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Either_$cliftEq_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Either_info" {
     Data.Functor.Classes.$fEq1Either_info:
         const Data.Functor.Classes.$fEq1Either_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.063427351 UTC

[section ""data" . Data.Functor.Classes.$fEq2Const_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2Const_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2Const_$cliftEq2_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdCFi: // global
           R3 = R5;
           _sdytd::P64 = R2;
           R2 = R4;
           R1 = _sdytd::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Const_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2Const_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.066919616 UTC

[section ""data" . Data.Functor.Classes.$fEq2Const_closure" {
     Data.Functor.Classes.$fEq2Const_closure:
         const Data.Functor.Classes.$fEq2Const_info;
 },
 Data.Functor.Classes.$fEq2Const_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCFt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2Const_$cliftEq2_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Const_info" {
     Data.Functor.Classes.$fEq2Const_info:
         const Data.Functor.Classes.$fEq2Const_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.07047367 UTC

[section ""data" . Data.Functor.Classes.$fEq1Const_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Const_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Const_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Const_$cliftEq_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cdCFE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCFF; else goto cdCFG;
       cdCFF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Const_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCFG: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Const_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Const_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Const_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.074224052 UTC

[section ""data" . Data.Functor.Classes.$fEq1Const_closure" {
     Data.Functor.Classes.$fEq1Const_closure:
         const Data.Functor.Classes.$fEq1Const_info;
 },
 Data.Functor.Classes.$fEq1Const_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCFQ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Const_$cliftEq_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Const_info" {
     Data.Functor.Classes.$fEq1Const_info:
         const Data.Functor.Classes.$fEq1Const_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.079415153 UTC

[section ""data" . Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdCG4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdCG8; else goto cdCG9;
       cdCG8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCG9: // global
           I64[Sp - 32] = block_cdCG1_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCGy; else goto cdCG2;
       udCGy: // global
           call _cdCG1(R1) args: 0, res: 0, upd: 0;
       cdCG2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCG1() //  [R1]
         { []
         }
     {offset
       cdCG1: // global
           I64[Sp - 8] = block_cdCG7_info;
           _sdytq::P64 = P64[R1 + 7];
           _sdytr::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdytr::P64;
           P64[Sp + 24] = _sdytq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCGx; else goto cdCGb;
       udCGx: // global
           call _cdCG7(R1) args: 0, res: 0, upd: 0;
       cdCGb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCG1_info" {
     block_cdCG1_info:
         const _cdCG1;
         const 3;
         const 30;
 },
 _cdCG7() //  [R1]
         { []
         }
     {offset
       cdCG7: // global
           I64[Sp] = block_cdCGf_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 32];
           _sdytu::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sdytu::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCG7_info" {
     block_cdCG7_info:
         const _cdCG7;
         const 4;
         const 30;
 },
 _cdCGf() //  [R1]
         { []
         }
     {offset
       cdCGf: // global
           _cdCGv::P64 = R1 & 7;
           if (_cdCGv::P64 < 3) goto udCGw; else goto cdCGu;
       udCGw: // global
           if (_cdCGv::P64 < 2) goto cdCGm; else goto cdCGq;
       cdCGm: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCGq: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCGu: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCGf_info" {
     block_cdCGf_info:
         const _cdCGf;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.08812557 UTC

[section ""data" . Data.Functor.Classes.$fOrd2(,)_closure" {
     Data.Functor.Classes.$fOrd2(,)_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.091405053 UTC

[section ""data" . Data.Functor.Classes.$w$cliftCompare_closure" {
     Data.Functor.Classes.$w$cliftCompare_closure:
         const Data.Functor.Classes.$w$cliftCompare_info;
 },
 Data.Functor.Classes.$w$cliftCompare_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdCH4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdCH5; else goto cdCH6;
       cdCH5: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdCH6: // global
           I64[Sp - 24] = block_cdCGX_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftCompare_info" {
     Data.Functor.Classes.$w$cliftCompare_info:
         const Data.Functor.Classes.$w$cliftCompare_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdCGX() //  [R1]
         { []
         }
     {offset
       cdCGX: // global
           _cdCH3::P64 = R1 & 7;
           if (_cdCH3::P64 < 3) goto udCHg; else goto cdCH2;
       udCHg: // global
           if (_cdCH3::P64 < 2) goto cdCH0; else goto cdCH1;
       cdCH0: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCH1: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCH2: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCGX_info" {
     block_cdCGX_info:
         const _cdCGX;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.097811725 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdCHz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdCHD; else goto cdCHE;
       cdCHD: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCHE: // global
           I64[Sp - 32] = block_cdCHw_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCHM; else goto cdCHx;
       udCHM: // global
           call _cdCHw(R1) args: 0, res: 0, upd: 0;
       cdCHx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCHw() //  [R1]
         { []
         }
     {offset
       cdCHw: // global
           I64[Sp - 8] = block_cdCHC_info;
           _sdytI::P64 = P64[R1 + 7];
           _sdytJ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdytJ::P64;
           P64[Sp + 24] = _sdytI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCHL; else goto cdCHG;
       udCHL: // global
           call _cdCHC(R1) args: 0, res: 0, upd: 0;
       cdCHG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCHw_info" {
     block_cdCHw_info:
         const _cdCHw;
         const 3;
         const 30;
 },
 _cdCHC() //  [R1]
         { []
         }
     {offset
       cdCHC: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCHC_info" {
     block_cdCHC_info:
         const _cdCHC;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.10615123 UTC

[section ""data" . Data.Functor.Classes.$w$cp1Ord1_closure" {
     Data.Functor.Classes.$w$cp1Ord1_closure:
         const Data.Functor.Classes.$w$cp1Ord1_info;
 },
 Data.Functor.Classes.$w$cp1Ord1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdCI7: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdCI8; else goto cdCI9;
       cdCI8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cp1Ord1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdCI9: // global
           I64[Sp - 40] = block_cdCI5_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cp1Ord1_info" {
     Data.Functor.Classes.$w$cp1Ord1_info:
         const Data.Functor.Classes.$w$cp1Ord1_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdCI5() //  [R1]
         { []
         }
     {offset
       cdCI5: // global
           I64[Sp] = block_cdCIc_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCI5_info" {
     block_cdCI5_info:
         const _cdCI5;
         const 5;
         const 30;
 },
 _cdCIc() //  [R1]
         { []
         }
     {offset
       cdCIc: // global
           if (R1 & 7 == 1) goto cdCIj; else goto cdCIn;
       cdCIj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCIn: // global
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCIc_info" {
     block_cdCIc_info:
         const _cdCIc;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.114223743 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)1_closure" {
     Data.Functor.Classes.$fOrd1(,)1_closure:
         const Data.Functor.Classes.$fOrd1(,)1_info;
 },
 Data.Functor.Classes.$fOrd1(,)1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCIM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdCIQ; else goto cdCIR;
       cdCIQ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCIR: // global
           I64[Sp - 32] = block_cdCIJ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCIZ; else goto cdCIK;
       udCIZ: // global
           call _cdCIJ(R1) args: 0, res: 0, upd: 0;
       cdCIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)1_info" {
     Data.Functor.Classes.$fOrd1(,)1_info:
         const Data.Functor.Classes.$fOrd1(,)1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCIJ() //  [R1]
         { []
         }
     {offset
       cdCIJ: // global
           I64[Sp - 8] = block_cdCIP_info;
           _sdyu0::P64 = P64[R1 + 7];
           _sdyu1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdyu1::P64;
           P64[Sp + 24] = _sdyu0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udCIY; else goto cdCIT;
       udCIY: // global
           call _cdCIP(R1) args: 0, res: 0, upd: 0;
       cdCIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCIJ_info" {
     block_cdCIJ_info:
         const _cdCIJ;
         const 3;
         const 30;
 },
 _cdCIP() //  [R1]
         { []
         }
     {offset
       cdCIP: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCIP_info" {
     block_cdCIP_info:
         const _cdCIP;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.122929077 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)_closure" {
     Data.Functor.Classes.$fOrd1(,)_closure:
         const Data.Functor.Classes.$fOrd1(,)_info;
 },
 sat_sdyu7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCJn: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyu7_info" {
     sat_sdyu7_info:
         const sat_sdyu7_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdyu6_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCJv: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1(,)1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyu6_info" {
     sat_sdyu6_info:
         const sat_sdyu6_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdCJz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCJD; else goto cdCJC;
       cdCJD: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCJC: // global
           I64[Hp - 48] = sat_sdyu7_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyu6_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)_info" {
     Data.Functor.Classes.$fOrd1(,)_info:
         const Data.Functor.Classes.$fOrd1(,)_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.131384614 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2Either_$cliftCompare2_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       cdCK2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCK3; else goto cdCK4;
       cdCK3: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCK4: // global
           I64[Sp - 32] = block_cdCJV_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCKD; else goto cdCJW;
       udCKD: // global
           call _cdCJV(R1) args: 0, res: 0, upd: 0;
       cdCJW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCJV() //  [R1]
         { []
         }
     {offset
       cdCJV: // global
           _sdyub::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCJZ; else goto cdCK0;
       cdCJZ: // global
           I64[Sp] = block_cdCK7_info;
           _sdyud::P64 = P64[R1 + 7];
           R1 = _sdyub::P64;
           P64[Sp + 24] = _sdyud::P64;
           if (R1 & 7 != 0) goto udCKB; else goto cdCK9;
       udCKB: // global
           call _cdCK7(R1) args: 0, res: 0, upd: 0;
       cdCK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCK0: // global
           I64[Sp + 8] = block_cdCKm_info;
           _sdyuh::P64 = P64[R1 + 6];
           R1 = _sdyub::P64;
           P64[Sp + 24] = _sdyuh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udCKC; else goto cdCKo;
       udCKC: // global
           call _cdCKm(R1) args: 0, res: 0, upd: 0;
       cdCKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCJV_info" {
     block_cdCJV_info:
         const _cdCJV;
         const 3;
         const 30;
 },
 _cdCK7() //  [R1]
         { []
         }
     {offset
       cdCK7: // global
           if (R1 & 7 == 1) goto cdCKf; else goto cdCKj;
       cdCKf: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCKj: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCK7_info" {
     block_cdCK7_info:
         const _cdCK7;
         const 131;
         const 30;
 },
 _cdCKm() //  [R1]
         { []
         }
     {offset
       cdCKm: // global
           if (R1 & 7 == 1) goto cdCKu; else goto cdCKy;
       cdCKu: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCKy: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCKm_info" {
     block_cdCKm_info:
         const _cdCKm;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.140224886 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Either_closure" {
     Data.Functor.Classes.$fOrd2Either_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.143997209 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Either_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdCLf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCLg; else goto cdCLh;
       cdCLg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCLh: // global
           I64[Sp - 32] = block_cdCL8_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCLQ; else goto cdCL9;
       udCLQ: // global
           call _cdCL8(R1) args: 0, res: 0, upd: 0;
       cdCL9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Either_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCL8() //  [R1]
         { []
         }
     {offset
       cdCL8: // global
           _sdyuo::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCLc; else goto cdCLd;
       cdCLc: // global
           I64[Sp] = block_cdCLk_info;
           _sdyuq::P64 = P64[R1 + 7];
           R1 = _sdyuo::P64;
           P64[Sp + 24] = _sdyuq::P64;
           if (R1 & 7 != 0) goto udCLO; else goto cdCLm;
       udCLO: // global
           call _cdCLk(R1) args: 0, res: 0, upd: 0;
       cdCLm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCLd: // global
           I64[Sp + 8] = block_cdCLz_info;
           _sdyuu::P64 = P64[R1 + 6];
           R1 = _sdyuo::P64;
           P64[Sp + 24] = _sdyuu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udCLP; else goto cdCLB;
       udCLP: // global
           call _cdCLz(R1) args: 0, res: 0, upd: 0;
       cdCLB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCL8_info" {
     block_cdCL8_info:
         const _cdCL8;
         const 3;
         const 30;
 },
 _cdCLk() //  [R1]
         { []
         }
     {offset
       cdCLk: // global
           if (R1 & 7 == 1) goto cdCLs; else goto cdCLw;
       cdCLs: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       cdCLw: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCLk_info" {
     block_cdCLk_info:
         const _cdCLk;
         const 131;
         const 30;
 },
 _cdCLz() //  [R1]
         { []
         }
     {offset
       cdCLz: // global
           if (R1 & 7 == 1) goto cdCLH; else goto cdCLL;
       cdCLH: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdCLL: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCLz_info" {
     block_cdCLz_info:
         const _cdCLz;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.155475065 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either1_closure" {
     Data.Functor.Classes.$fOrd1Either1_closure:
         const Data.Functor.Classes.$fOrd1Either1_info;
 },
 Data.Functor.Classes.$fOrd1Either1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCMt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCMu; else goto cdCMv;
       cdCMu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCMv: // global
           I64[Sp - 32] = block_cdCMm_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCNb; else goto cdCMn;
       udCNb: // global
           call _cdCMm(R1) args: 0, res: 0, upd: 0;
       cdCMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either1_info" {
     Data.Functor.Classes.$fOrd1Either1_info:
         const Data.Functor.Classes.$fOrd1Either1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCMm() //  [R1]
         { []
         }
     {offset
       cdCMm: // global
           _sdyuB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdCMq; else goto cdCMr;
       cdCMq: // global
           I64[Sp] = block_cdCMy_info;
           _sdyuD::P64 = P64[R1 + 7];
           R1 = _sdyuB::P64;
           P64[Sp + 24] = _sdyuD::P64;
           if (R1 & 7 != 0) goto udCN9; else goto cdCMA;
       udCN9: // global
           call _cdCMy(R1) args: 0, res: 0, upd: 0;
       cdCMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdCMr: // global
           I64[Sp + 8] = block_cdCMS_info;
           _sdyuI::P64 = P64[R1 + 6];
           R1 = _sdyuB::P64;
           P64[Sp + 24] = _sdyuI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udCNa; else goto cdCMU;
       udCNa: // global
           call _cdCMS(R1) args: 0, res: 0, upd: 0;
       cdCMU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCMm_info" {
     block_cdCMm_info:
         const _cdCMm;
         const 3;
         const 30;
 },
 _cdCMy() //  [R1]
         { []
         }
     {offset
       cdCMy: // global
           if (R1 & 7 == 1) goto cdCMH; else goto udCN8;
       cdCMH: // global
           _sdyuy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdCME_info;
           R2 = _sdyuy::P64;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       udCN8: // global
           Sp = Sp + 32;
           call _cdCN0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdCMy_info" {
     block_cdCMy_info:
         const _cdCMy;
         const 131;
         const 30;
 },
 _cdCME() //  [R1]
         { []
         }
     {offset
       cdCME: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sdyuF::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sdyuF::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCME_info" {
     block_cdCME_info:
         const _cdCME;
         const 2;
         const 30;
 },
 _cdCMS() //  [R1]
         { []
         }
     {offset
       cdCMS: // global
           if (R1 & 7 == 1) goto udCN7; else goto cdCN4;
       udCN7: // global
           Sp = Sp + 24;
           call _cdCN0() args: 0, res: 0, upd: 0;
       cdCN4: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCMS_info" {
     block_cdCMS_info:
         const _cdCMS;
         const 2;
         const 30;
 },
 _cdCN0() //  []
         { []
         }
     {offset
       cdCN0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.168915405 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either_closure" {
     Data.Functor.Classes.$fOrd1Either_closure:
         const Data.Functor.Classes.$fOrd1Either_info;
 },
 sat_sdyuO_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCNS: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyuO_info" {
     sat_sdyuO_info:
         const sat_sdyuO_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdyuN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCO0: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Either1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyuN_info" {
     sat_sdyuN_info:
         const sat_sdyuN_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1Either_entry() //  [R2]
         { []
         }
     {offset
       cdCO4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCO8; else goto cdCO7;
       cdCO8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCO7: // global
           I64[Hp - 48] = sat_sdyuO_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyuN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either_info" {
     Data.Functor.Classes.$fOrd1Either_info:
         const Data.Functor.Classes.$fOrd1Either_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.178044331 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2Const_$cliftCompare2_entry() //  [R2,
                                                              R4, R5]
         { []
         }
     {offset
       cdCOq: // global
           R3 = R5;
           _sdyuP::P64 = R2;
           R2 = R4;
           R1 = _sdyuP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.182243682 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Const_closure" {
     Data.Functor.Classes.$fOrd2Const_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.185088076 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Const1_closure" {
     Data.Functor.Classes.$fOrd1Const1_closure:
         const Data.Functor.Classes.$fOrd1Const1_info;
 },
 Data.Functor.Classes.$fOrd1Const1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCOE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCOF; else goto cdCOG;
       cdCOF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Const1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCOG: // global
           I64[Sp - 24] = block_cdCOC_info;
           R2 = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Const1_info" {
     Data.Functor.Classes.$fOrd1Const1_info:
         const Data.Functor.Classes.$fOrd1Const1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdCOC() //  [R1]
         { []
         }
     {offset
       cdCOC: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCOC_info" {
     block_cdCOC_info:
         const _cdCOC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.192457148 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Const_closure" {
     Data.Functor.Classes.$fOrd1Const_closure:
         const Data.Functor.Classes.$fOrd1Const_info;
 },
 sat_sdyv3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCP1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCP2; else goto cdCP3;
       cdCP2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCP3: // global
           R2 = P64[R1 + 5];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyv3_info" {
     sat_sdyv3_info:
         const sat_sdyv3_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdyuZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdCP9: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Const1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyuZ_info" {
     sat_sdyuZ_info:
         const sat_sdyuZ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1Const_entry() //  [R2]
         { []
         }
     {offset
       cdCPd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCPh; else goto cdCPg;
       cdCPh: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCPg: // global
           I64[Hp - 48] = sat_sdyv3_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyuZ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Const_info" {
     Data.Functor.Classes.$fOrd1Const_info:
         const Data.Functor.Classes.$fOrd1Const_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.201050416 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1(,)5_bytes" {
     Data.Functor.Classes.$fRead1(,)5_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.203808057 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)4_closure" {
     Data.Functor.Classes.$fRead1(,)4_closure:
         const Data.Functor.Classes.$fRead1(,)4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)4_entry() //  [R1]
         { []
         }
     {offset
       cdCPD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCPE; else goto cdCPF;
       cdCPE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCPF: // global
           (_cdCPA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdCPA::I64 == 0) goto cdCPC; else goto cdCPB;
       cdCPC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdCPB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdCPA::I64;
           R2 = Data.Functor.Classes.$fRead1(,)5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)4_info" {
     Data.Functor.Classes.$fRead1(,)4_info:
         const Data.Functor.Classes.$fRead1(,)4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.208037395 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)3_closure" {
     Data.Functor.Classes.$fRead1(,)3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Functor.Classes.$fRead1(,)4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.214874934 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadPrec2_info;
         const 0;
 },
 sat_sdyvf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCQd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCQh; else goto cdCQg;
       cdCQh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCQg: // global
           _sdyva::P64 = P64[R1 + 7];
           _sdyvb::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sdyvb::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sdyva::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvf_info" {
     sat_sdyvf_info:
         const sat_sdyvf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyvg_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCQi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCQm; else goto cdCQl;
       cdCQm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCQl: // global
           _sdyv5::P64 = P64[R1 + 7];
           _sdyv9::P64 = P64[R1 + 15];
           _sdyva::P64 = P64[R1 + 23];
           _sdyvb::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_sdyvf_info;
           P64[Hp - 8] = _sdyva::P64;
           P64[Hp] = _sdyvb::P64;
           R3 = Hp - 15;
           R2 = _sdyv9::P64;
           R1 = _sdyv5::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvg_info" {
     sat_sdyvg_info:
         const sat_sdyvg_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_sdyvj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCQq: // global
           _sdyvb::P64 = R2;
           _sdyvj::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdCQr; else goto cdCQs;
       cdCQs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdCQu; else goto cdCQt;
       cdCQu: // global
           HpAlloc = 40;
           goto cdCQr;
       cdCQr: // global
           R2 = _sdyvb::P64;
           R1 = _sdyvj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCQt: // global
           _sdyv5::P64 = P64[_sdyvj::P64 + 7];
           _sdyv9::P64 = P64[_sdyvj::P64 + 15];
           _sdyva::P64 = P64[_sdyvj::P64 + 23];
           I64[Hp - 32] = sat_sdyvg_info;
           P64[Hp - 24] = _sdyv5::P64;
           P64[Hp - 16] = _sdyv9::P64;
           P64[Hp - 8] = _sdyva::P64;
           P64[Hp] = _sdyvb::P64;
           I64[Sp - 8] = block_cdCQn_info;
           R3 = Hp - 31;
           R2 = Data.Functor.Classes.$fRead1(,)3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvj_info" {
     sat_sdyvj_info:
         const sat_sdyvj_entry;
         const 3;
         const 36028801313931272;
         const 4294967301;
         const SdyRV_srt;
 },
 _cdCQn() //  [R1]
         { []
         }
     {offset
       cdCQn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCQx; else goto cdCQw;
       cdCQx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCQw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCQn_info" {
     block_cdCQn_info:
         const _cdCQn;
         const 0;
         const 30;
 },
 p_sdyv8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCQy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCQC; else goto cdCQB;
       cdCQC: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCQB: // global
           _sdyv4::P64 = P64[R1 + 6];
           _sdyv5::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sdyvj_info;
           P64[Hp - 16] = _sdyv5::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 23;
           R2 = R2;
           R1 = _sdyv4::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdyv8_info" {
     p_sdyv8_info:
         const p_sdyv8_entry;
         const 2;
         const 36028801313931275;
         const 8589934607;
         const SdyRV_srt;
 },
 lvl3_sdyvk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCQL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdCQM; else goto cdCQN;
       cdCQM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCQN: // global
           I64[Sp - 8] = block_cdCQI_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_sdyvk_info" {
     lvl3_sdyvk_info:
         const lvl3_sdyvk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdCQI() //  [R1]
         { []
         }
     {offset
       cdCQI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCQQ; else goto cdCQP;
       cdCQQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCQP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCQI_info" {
     block_cdCQI_info:
         const _cdCQI;
         const 0;
         const 30;
 },
 sat_sdyvt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCQZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdCR0; else goto cdCR1;
       cdCR0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCR1: // global
           I64[Sp - 8] = block_cdCQW_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvt_info" {
     sat_sdyvt_info:
         const sat_sdyvt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdCQW() //  [R1]
         { []
         }
     {offset
       cdCQW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCR4; else goto cdCR3;
       cdCR4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCR3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCQW_info" {
     block_cdCQW_info:
         const _cdCQW;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCR5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCR9; else goto cdCR8;
       cdCR9: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCR8: // global
           I64[Hp - 48] = p_sdyv8_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = lvl3_sdyvk_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sdyvt_info;
           P64[Hp] = Hp - 22;
           _sdyv6::P64 = R4;
           R4 = R5;
           R3 = _sdyv6::P64;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec2_info" {
     Data.Functor.Classes.$w$cliftReadPrec2_info:
         const Data.Functor.Classes.$w$cliftReadPrec2_entry;
         const 0;
         const 108086412531728398;
         const 17179869208;
         const SdyRV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.234419173 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)2_closure" {
     Data.Functor.Classes.$fRead1(,)2_closure:
         const Data.Functor.Classes.$fRead1(,)2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)2_entry() //  [R2, R4, R6]
         { []
         }
     {offset
       cdCRR: // global
           R5 = P64[Sp];
           _sdyvw::P64 = R4;
           R4 = R6;
           R3 = _sdyvw::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)2_info" {
     Data.Functor.Classes.$fRead1(,)2_info:
         const Data.Functor.Classes.$fRead1(,)2_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdyRV_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.240088157 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec6_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec6_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec6_info;
         const 0;
 },
 sat_sdyvE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCSb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvE_info" {
     sat_sdyvE_info:
         const sat_sdyvE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyvD_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCSj: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvD_info" {
     sat_sdyvD_info:
         const sat_sdyvD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyvF_entry() //  [R1]
         { []
         }
     {offset
       cdCSm: // global
           _sdyvF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCSn; else goto cdCSo;
       cdCSo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdCSq; else goto cdCSp;
       cdCSq: // global
           HpAlloc = 32;
           goto cdCSn;
       cdCSn: // global
           R1 = _sdyvF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCSp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyvF::P64;
           _sdyvA::P64 = P64[_sdyvF::P64 + 16];
           _sdyvB::P64 = P64[_sdyvF::P64 + 24];
           _sdyvC::P64 = P64[_sdyvF::P64 + 32];
           I64[Hp - 24] = sat_sdyvE_info;
           P64[Hp - 16] = _sdyvB::P64;
           I64[Hp - 8] = sat_sdyvD_info;
           P64[Hp] = _sdyvA::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdyvC::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyvF_info" {
     sat_sdyvF_info:
         const sat_sdyvF_entry;
         const 3;
         const 4294967311;
         const SdyRV_srt+192;
 },
 Data.Functor.Classes.$w$cliftReadsPrec6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdCSr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdCSv; else goto cdCSu;
       cdCSv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCSu: // global
           I64[Hp - 32] = sat_sdyvF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec6_info" {
     Data.Functor.Classes.$w$cliftReadsPrec6_info:
         const Data.Functor.Classes.$w$cliftReadsPrec6_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdyRV_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.249840416 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_entry() //  [R2,
                                                               R4, R6]
         { []
         }
     {offset
       cdCSO: // global
           _sdyvI::P64 = R4;
           R4 = R6;
           R3 = _sdyvI::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec6_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.253891009 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdyvR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCT4: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyvR_info" {
     sat_sdyvR_info:
         const sat_sdyvR_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdyRV_srt+192;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdCT7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCTb; else goto cdCTa;
       cdCTb: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCTa: // global
           I64[Hp - 16] = sat_sdyvR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_entry;
         const 0;
         const 22518002431819790;
         const 17179869208;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.259035766 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)3_closure" {
     Data.Functor.Classes.$fShow1(,)3_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.260793437 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity5_closure" {
     Data.Functor.Classes.$fRead1Identity5_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.262445224 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)2_closure" {
     Data.Functor.Classes.$fShow1(,)2_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.264109175 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)1_closure" {
     Data.Functor.Classes.$fShow1(,)1_closure:
         const GHC.Types.C#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.268958393 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec2_info;
 },
 f_sdyvW_entry() //  [R1]
         { []
         }
     {offset
       cdCTv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCTw; else goto cdCTx;
       cdCTw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdyvW_info" {
     f_sdyvW_info:
         const f_sdyvW_entry;
         const 2;
         const 18;
 },
 f1_sdyvX_entry() //  [R1]
         { []
         }
     {offset
       cdCTC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCTD; else goto cdCTE;
       cdCTD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCTE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyvX_info" {
     f1_sdyvX_info:
         const f1_sdyvX_entry;
         const 2;
         const 18;
 },
 sat_sdyw0_entry() //  [R1]
         { []
         }
     {offset
       cdCTT: // global
           _sdyw0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCTU; else goto cdCTV;
       cdCTV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCTX; else goto cdCTW;
       cdCTX: // global
           HpAlloc = 24;
           goto cdCTU;
       cdCTU: // global
           R1 = _sdyw0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCTW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyw0::P64;
           _sdyvX::P64 = P64[_sdyw0::P64 + 16];
           _sdyvY::P64 = P64[_sdyw0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)1_closure+1;
           P64[Hp] = _sdyvY::P64;
           R2 = Hp - 14;
           R1 = _sdyvX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyw0_info" {
     sat_sdyw0_info:
         const sat_sdyw0_entry;
         const 2;
         const 18;
 },
 sat_sdyw2_entry() //  [R1]
         { []
         }
     {offset
       cdCTZ: // global
           _sdyw2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCU0; else goto cdCU1;
       cdCU1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCU3; else goto cdCU2;
       cdCU3: // global
           HpAlloc = 56;
           goto cdCU0;
       cdCU0: // global
           R1 = _sdyw2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyw2::P64;
           _sdyvW::P64 = P64[_sdyw2::P64 + 16];
           _sdyvX::P64 = P64[_sdyw2::P64 + 24];
           _sdyvY::P64 = P64[_sdyw2::P64 + 32];
           I64[Hp - 48] = sat_sdyw0_info;
           P64[Hp - 32] = _sdyvX::P64;
           P64[Hp - 24] = _sdyvY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)2_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdyvW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyw2_info" {
     sat_sdyw2_info:
         const sat_sdyw2_entry;
         const 3;
         const 15;
 },
 sat_sdyw3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCU5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdCU9; else goto cdCU8;
       cdCU9: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCU8: // global
           _sdyvW::P64 = P64[R1 + 7];
           _sdyvX::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdyw2_info;
           P64[Hp - 40] = _sdyvW::P64;
           P64[Hp - 32] = _sdyvX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyw3_info" {
     sat_sdyw3_info:
         const sat_sdyw3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$w$cliftShowsPrec2_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdCUa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdCUe; else goto cdCUd;
       cdCUe: // global
           HpAlloc = 88;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCUd: // global
           I64[Hp - 80] = f_sdyvW_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = f1_sdyvX_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sdyw3_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec2_info" {
     Data.Functor.Classes.$w$cliftShowsPrec2_info:
         const Data.Functor.Classes.$w$cliftShowsPrec2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.283817789 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cdCUP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCUQ; else goto cdCUR;
       cdCUQ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdCUR: // global
           I64[Sp - 16] = block_cdCUM_info;
           R1 = P64[Sp];
           P64[Sp - 8] = R4;
           P64[Sp] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udCUV; else goto cdCUN;
       udCUV: // global
           call _cdCUM(R1) args: 0, res: 0, upd: 0;
       cdCUN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdCUM() //  [R1]
         { []
         }
     {offset
       cdCUM: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCUM_info" {
     block_cdCUM_info:
         const _cdCUM;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.289906681 UTC

[section ""data" . Data.Functor.Classes.$dmliftShowList2_closure" {
     Data.Functor.Classes.$dmliftShowList2_closure:
         const Data.Functor.Classes.$dmliftShowList2_info;
 },
 sat_sdywi_entry() //  [R1]
         { []
         }
     {offset
       cdCVd: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdCVe; else goto cdCVf;
       cdCVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = P64[R1 + 24];
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec2_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdywi_info" {
     sat_sdywi_info:
         const sat_sdywi_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.$dmliftShowList2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdCVg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdCVk; else goto cdCVj;
       cdCVk: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftShowList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCVj: // global
           I64[Hp - 48] = sat_sdywi_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftShowList2_info" {
     Data.Functor.Classes.$dmliftShowList2_info:
         const Data.Functor.Classes.$dmliftShowList2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.298292245 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList3_closure" {
     Data.Functor.Classes.$w$cliftShowList3_closure:
         const Data.Functor.Classes.$w$cliftShowList3_info;
 },
 sat_sdywt_entry() //  [R1]
         { []
         }
     {offset
       cdCVU: // global
           _sdywt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCVV; else goto cdCVW;
       cdCVW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCVY; else goto cdCVX;
       cdCVY: // global
           HpAlloc = 24;
           goto cdCVV;
       cdCVV: // global
           R1 = _sdywt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCVX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdywt::P64;
           _sdywk::P64 = P64[_sdywt::P64 + 16];
           _sdywo::P64 = P64[_sdywt::P64 + 24];
           _sdywr::P64 = P64[_sdywt::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)1_closure+1;
           P64[Hp] = _sdywo::P64;
           R4 = Hp - 14;
           R3 = _sdywr::P64;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = _sdywk::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdywt_info" {
     sat_sdywt_info:
         const sat_sdywt_entry;
         const 3;
         const 15;
 },
 sat_sdywv_entry() //  [R1]
         { []
         }
     {offset
       cdCW0: // global
           _sdywv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdCW1; else goto cdCW2;
       cdCW2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdCW4; else goto cdCW3;
       cdCW4: // global
           HpAlloc = 64;
           goto cdCW1;
       cdCW1: // global
           R1 = _sdywv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCW3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdywv::P64;
           _sdywj::P64 = P64[_sdywv::P64 + 16];
           _sdywk::P64 = P64[_sdywv::P64 + 24];
           _sdywo::P64 = P64[_sdywv::P64 + 32];
           _sdywq::P64 = P64[_sdywv::P64 + 40];
           _sdywr::P64 = P64[_sdywv::P64 + 48];
           I64[Hp - 56] = sat_sdywt_info;
           P64[Hp - 40] = _sdywk::P64;
           P64[Hp - 32] = _sdywo::P64;
           P64[Hp - 24] = _sdywr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)2_closure+1;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _sdywq::P64;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = _sdywj::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdywv_info" {
     sat_sdywv_info:
         const sat_sdywv_entry;
         const 5;
         const 15;
 },
 sat_sdyww_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdCW5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdCW7; else goto cdCW8;
       cdCW7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCW8: // global
           I64[Sp - 32] = block_cdCVG_info;
           _sdywj::P64 = P64[R1 + 6];
           _sdywk::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sdywj::P64;
           P64[Sp - 16] = _sdywk::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udCWc; else goto cdCVH;
       udCWc: // global
           call _cdCVG(R1) args: 0, res: 0, upd: 0;
       cdCVH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyww_info" {
     sat_sdyww_info:
         const sat_sdyww_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cdCVG() //  [R1]
         { []
         }
     {offset
       cdCVG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdCWb; else goto cdCWa;
       cdCWb: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCWa: // global
           _sdywq::P64 = P64[R1 + 7];
           _sdywr::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sdywv_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sdywq::P64;
           P64[Hp - 24] = _sdywr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)3_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCVG_info" {
     block_cdCVG_info:
         const _cdCVG;
         const 3;
         const 30;
 },
 Data.Functor.Classes.$w$cliftShowList3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdCWd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCWh; else goto cdCWg;
       cdCWh: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCWg: // global
           I64[Hp - 16] = sat_sdyww_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdywl::P64 = R4;
           R4 = R5;
           R3 = _sdywl::P64;
           R2 = Hp - 14;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList3_info" {
     Data.Functor.Classes.$w$cliftShowList3_info:
         const Data.Functor.Classes.$w$cliftShowList3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.309945582 UTC

[section ""data" . Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info;
 },
 Data.Functor.Classes.$fShow2(,)_$cliftShowList2_entry() //  [R2,
                                                              R4, R6]
         { []
         }
     {offset
       cdCWM: // global
           R5 = P64[Sp];
           _sdywz::P64 = R4;
           R4 = R6;
           R3 = _sdywz::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftShowList3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.313295905 UTC

[section ""data" . Data.Functor.Classes.$fShow2(,)_closure" {
     Data.Functor.Classes.$fShow2(,)_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.316503055 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info;
 },
 sat_sdywL_entry() //  [R1]
         { []
         }
     {offset
       cdCX7: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdywL_info" {
     sat_sdywL_info:
         const sat_sdywL_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cdCXa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdCXb; else goto cdCXc;
       cdCXb: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCXc: // global
           I64[Sp - 24] = block_cdCWY_info;
           R1 = R6;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udCXg; else goto cdCWZ;
       udCXg: // global
           call _cdCWY(R1) args: 0, res: 0, upd: 0;
       cdCWZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdCWY() //  [R1]
         { []
         }
     {offset
       cdCWY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdCXf; else goto cdCXe;
       cdCXf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCXe: // global
           _sdywJ::P64 = P64[R1 + 7];
           _sdywK::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sdywL_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sdywK::P64;
           R4 = _sdywJ::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCWY_info" {
     block_cdCWY_info:
         const _cdCWY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.328278736 UTC

[section ""data" . $w$dmliftReadListPrec2_rdymu_closure" {
     $w$dmliftReadListPrec2_rdymu_closure:
         const $w$dmliftReadListPrec2_rdymu_info;
 },
 sat_sdywW_entry() //  [R1]
         { []
         }
     {offset
       cdCXG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCXH; else goto cdCXI;
       cdCXH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCXI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdywW_info" {
     sat_sdywW_info:
         const sat_sdywW_entry;
         const 1;
         const 16;
 },
 sat_sdywX_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCXO: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdywX_info" {
     sat_sdywX_info:
         const sat_sdywX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdywV_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCXW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdywV_info" {
     sat_sdywV_info:
         const sat_sdywV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdywT_entry() //  [R1]
         { []
         }
     {offset
       cdCY3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdCY4; else goto cdCY5;
       cdCY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdywT_info" {
     sat_sdywT_info:
         const sat_sdywT_entry;
         const 1;
         const 16;
 },
 sat_sdywU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCYb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdywU_info" {
     sat_sdywU_info:
         const sat_sdywU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdywS_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCYj: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdywS_info" {
     sat_sdywS_info:
         const sat_sdywS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w5_sdywR_entry() //  [R1]
         { []
         }
     {offset
       cdCYm: // global
           _sdywR::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdCYn; else goto cdCYo;
       cdCYo: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdCYq; else goto cdCYp;
       cdCYq: // global
           HpAlloc = 112;
           goto cdCYn;
       cdCYn: // global
           R1 = _sdywR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdCYp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdywR::P64;
           _sdywM::P64 = P64[_sdywR::P64 + 16];
           _sdywN::P64 = P64[_sdywR::P64 + 24];
           _sdywO::P64 = P64[_sdywR::P64 + 32];
           _sdywP::P64 = P64[_sdywR::P64 + 40];
           _sdywQ::P64 = P64[_sdywR::P64 + 48];
           I64[Hp - 104] = sat_sdywW_info;
           P64[Hp - 88] = _sdywQ::P64;
           I64[Hp - 80] = sat_sdywX_info;
           P64[Hp - 72] = Hp - 104;
           I64[Hp - 64] = sat_sdywV_info;
           P64[Hp - 56] = _sdywP::P64;
           I64[Hp - 48] = sat_sdywT_info;
           P64[Hp - 32] = _sdywO::P64;
           I64[Hp - 24] = sat_sdywU_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdywS_info;
           P64[Hp] = _sdywN::P64;
           R2 = _sdywM::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           P64[Sp - 32] = Hp - 63;
           P64[Sp - 24] = Hp - 79;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadList2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w5_sdywR_info" {
     w5_sdywR_info:
         const w5_sdywR_entry;
         const 5;
         const 15;
 },
 sat_sdyx1_entry() //  [R1, R2]
         { []
         }
     {offset
       cdCYz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdCYA; else goto cdCYB;
       cdCYA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdCYB: // global
           I64[Sp - 8] = block_cdCYw_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyx1_info" {
     sat_sdyx1_info:
         const sat_sdyx1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdCYw() //  [R1]
         { []
         }
     {offset
       cdCYw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdCYE; else goto cdCYD;
       cdCYE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdCYD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdCYw_info" {
     block_cdCYw_info:
         const _cdCYw;
         const 0;
         const 30;
 },
 $w$dmliftReadListPrec2_rdymu_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdCYF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdCYJ; else goto cdCYI;
       cdCYJ: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$dmliftReadListPrec2_rdymu_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdCYI: // global
           I64[Hp - 64] = w5_sdywR_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdyx1_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $w$dmliftReadListPrec2_rdymu_info" {
     $w$dmliftReadListPrec2_rdymu_info:
         const $w$dmliftReadListPrec2_rdymu_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.346615706 UTC

[section ""data" . $dmliftReadListPrec1_rdymv_closure" {
     $dmliftReadListPrec1_rdymv_closure:
         const $dmliftReadListPrec1_rdymv_info;
 },
 $dmliftReadListPrec1_rdymv_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdCZw: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call $w$dmliftReadListPrec2_rdymu_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmliftReadListPrec1_rdymv_info" {
     $dmliftReadListPrec1_rdymv_info:
         const $dmliftReadListPrec1_rdymv_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.350458142 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadListPrec2_closure" {
     Data.Functor.Classes.$dmliftReadListPrec2_closure:
         const Data.Functor.Classes.$dmliftReadListPrec2_info;
 },
 Data.Functor.Classes.$dmliftReadListPrec2_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cdCZH: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmliftReadListPrec1_rdymv_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadListPrec2_info" {
     Data.Functor.Classes.$dmliftReadListPrec2_info:
         const Data.Functor.Classes.$dmliftReadListPrec2_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.358100266 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadPrec2_closure" {
     Data.Functor.Classes.$dmliftReadPrec2_closure:
         const Data.Functor.Classes.$dmliftReadPrec2_info;
 },
 sat_sdyxi_entry() //  [R1]
         { []
         }
     {offset
       cdD00: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdD01; else goto cdD02;
       cdD01: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD02: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyxi_info" {
     sat_sdyxi_info:
         const sat_sdyxi_entry;
         const 1;
         const 16;
 },
 sat_sdyxj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD08: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxj_info" {
     sat_sdyxj_info:
         const sat_sdyxj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxh_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD0g: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxh_info" {
     sat_sdyxh_info:
         const sat_sdyxh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxf_entry() //  [R1]
         { []
         }
     {offset
       cdD0n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdD0o; else goto cdD0p;
       cdD0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyxf_info" {
     sat_sdyxf_info:
         const sat_sdyxf_entry;
         const 1;
         const 16;
 },
 sat_sdyxg_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD0v: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxg_info" {
     sat_sdyxg_info:
         const sat_sdyxg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxe_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD0D: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxe_info" {
     sat_sdyxe_info:
         const sat_sdyxe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdyxd_entry() //  [R1]
         { []
         }
     {offset
       cdD0G: // global
           _sdyxd::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdD0H; else goto cdD0I;
       cdD0I: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdD0K; else goto cdD0J;
       cdD0K: // global
           HpAlloc = 112;
           goto cdD0H;
       cdD0H: // global
           R1 = _sdyxd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD0J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyxd::P64;
           _sdyx8::P64 = P64[_sdyxd::P64 + 16];
           _sdyx9::P64 = P64[_sdyxd::P64 + 24];
           _sdyxa::P64 = P64[_sdyxd::P64 + 32];
           _sdyxb::P64 = P64[_sdyxd::P64 + 40];
           _sdyxc::P64 = P64[_sdyxd::P64 + 48];
           I64[Hp - 104] = sat_sdyxi_info;
           P64[Hp - 88] = _sdyxc::P64;
           I64[Hp - 80] = sat_sdyxj_info;
           P64[Hp - 72] = Hp - 104;
           I64[Hp - 64] = sat_sdyxh_info;
           P64[Hp - 56] = _sdyxb::P64;
           I64[Hp - 48] = sat_sdyxf_info;
           P64[Hp - 32] = _sdyxa::P64;
           I64[Hp - 24] = sat_sdyxg_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdyxe_info;
           P64[Hp] = _sdyx9::P64;
           R2 = _sdyx8::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           P64[Sp - 32] = Hp - 63;
           P64[Sp - 24] = Hp - 79;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadsPrec2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyxd_info" {
     f1_sdyxd_info:
         const f1_sdyxd_entry;
         const 5;
         const 15;
 },
 sat_sdyxp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD0Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD10; else goto cdD11;
       cdD10: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD11: // global
           I64[Sp - 8] = block_cdD0W_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxp_info" {
     sat_sdyxp_info:
         const sat_sdyxp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdD0W() //  [R1]
         { []
         }
     {offset
       cdD0W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD14; else goto cdD13;
       cdD14: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD13: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD0W_info" {
     block_cdD0W_info:
         const _cdD0W;
         const 0;
         const 30;
 },
 sat_sdyxq_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD15: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdD19; else goto cdD18;
       cdD19: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD18: // global
           _sdyxd::P64 = P64[R1 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _sdyxd::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyxp_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxq_info" {
     sat_sdyxq_info:
         const sat_sdyxq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadPrec2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdD1a: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdD1e; else goto cdD1d;
       cdD1e: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD1d: // global
           I64[Hp - 64] = f1_sdyxd_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdyxq_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadPrec2_info" {
     Data.Functor.Classes.$dmliftReadPrec2_info:
         const Data.Functor.Classes.$dmliftReadPrec2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.386188802 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadList2_closure" {
     Data.Functor.Classes.$dmliftReadList2_closure:
         const Data.Functor.Classes.$dmliftReadList2_info;
         const 0;
 },
 sat_sdyxH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdD2m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD2n; else goto cdD2o;
       cdD2n: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD2o: // global
           I64[Sp - 8] = block_cdD2j_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxH_info" {
     sat_sdyxH_info:
         const sat_sdyxH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdD2j() //  [R1]
         { []
         }
     {offset
       cdD2j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD2r; else goto cdD2q;
       cdD2r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD2q: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD2j_info" {
     block_cdD2j_info:
         const _cdD2j;
         const 0;
         const 30;
 },
 sat_sdyxC_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD2x: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxC_info" {
     sat_sdyxC_info:
         const sat_sdyxC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdD2I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD2J; else goto cdD2K;
       cdD2J: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD2K: // global
           I64[Sp - 8] = block_cdD2F_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxB_info" {
     sat_sdyxB_info:
         const sat_sdyxB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdD2F() //  [R1]
         { []
         }
     {offset
       cdD2F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD2N; else goto cdD2M;
       cdD2N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD2M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD2F_info" {
     block_cdD2F_info:
         const _cdD2F;
         const 0;
         const 30;
 },
 sat_sdyxw_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD2T: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxw_info" {
     sat_sdyxw_info:
         const sat_sdyxw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxI_entry() //  [R1]
         { []
         }
     {offset
       cdD2W: // global
           _sdyxI::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdD2X; else goto cdD2Y;
       cdD2Y: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdD30; else goto cdD2Z;
       cdD30: // global
           HpAlloc = 64;
           goto cdD2X;
       cdD2X: // global
           R1 = _sdyxI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD2Z: // global
           _sdyxr::P64 = P64[_sdyxI::P64 + 16];
           _sdyxs::P64 = P64[_sdyxI::P64 + 24];
           _sdyxt::P64 = P64[_sdyxI::P64 + 32];
           _sdyxu::P64 = P64[_sdyxI::P64 + 40];
           _sdyxv::P64 = P64[_sdyxI::P64 + 48];
           I64[Hp - 56] = sat_sdyxH_info;
           P64[Hp - 48] = _sdyxv::P64;
           I64[Hp - 40] = sat_sdyxC_info;
           P64[Hp - 32] = _sdyxu::P64;
           I64[Hp - 24] = sat_sdyxB_info;
           P64[Hp - 16] = _sdyxt::P64;
           I64[Hp - 8] = sat_sdyxw_info;
           P64[Hp] = _sdyxs::P64;
           R2 = _sdyxr::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 54;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxI_info" {
     sat_sdyxI_info:
         const sat_sdyxI_entry;
         const 5;
         const 15;
 },
 sat_sdyxJ_entry() //  [R1]
         { []
         }
     {offset
       cdD31: // global
           _sdyxJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdD32; else goto cdD33;
       cdD33: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdD35; else goto cdD34;
       cdD35: // global
           HpAlloc = 56;
           goto cdD32;
       cdD32: // global
           R1 = _sdyxJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD34: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyxJ::P64;
           _sdyxr::P64 = P64[_sdyxJ::P64 + 16];
           _sdyxs::P64 = P64[_sdyxJ::P64 + 24];
           _sdyxt::P64 = P64[_sdyxJ::P64 + 32];
           _sdyxu::P64 = P64[_sdyxJ::P64 + 40];
           _sdyxv::P64 = P64[_sdyxJ::P64 + 48];
           I64[Hp - 48] = sat_sdyxI_info;
           P64[Hp - 32] = _sdyxr::P64;
           P64[Hp - 24] = _sdyxs::P64;
           P64[Hp - 16] = _sdyxt::P64;
           P64[Hp - 8] = _sdyxu::P64;
           P64[Hp] = _sdyxv::P64;
           R2 = Hp - 48;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyxJ_info" {
     sat_sdyxJ_info:
         const sat_sdyxJ_entry;
         const 5;
         const 4294967311;
         const SdyRV_srt+32;
 },
 Data.Functor.Classes.$dmliftReadList2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdD36: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdD3a; else goto cdD39;
       cdD3a: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD39: // global
           I64[Hp - 48] = sat_sdyxJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadList2_info" {
     Data.Functor.Classes.$dmliftReadList2_info:
         const Data.Functor.Classes.$dmliftReadList2_entry;
         const 0;
         const 36028801313931278;
         const 21474836505;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.411270406 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadsPrec2_closure" {
     Data.Functor.Classes.$dmliftReadsPrec2_closure:
         const Data.Functor.Classes.$dmliftReadsPrec2_info;
 },
 sat_sdyy1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdD43: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD44; else goto cdD45;
       cdD44: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD45: // global
           I64[Sp - 8] = block_cdD40_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyy1_info" {
     sat_sdyy1_info:
         const sat_sdyy1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdD40() //  [R1]
         { []
         }
     {offset
       cdD40: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD48; else goto cdD47;
       cdD48: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD47: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD40_info" {
     block_cdD40_info:
         const _cdD40;
         const 0;
         const 30;
 },
 sat_sdyxW_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD4e: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxW_info" {
     sat_sdyxW_info:
         const sat_sdyxW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyxV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdD4p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD4q; else goto cdD4r;
       cdD4q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD4r: // global
           I64[Sp - 8] = block_cdD4m_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxV_info" {
     sat_sdyxV_info:
         const sat_sdyxV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdD4m() //  [R1]
         { []
         }
     {offset
       cdD4m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD4u; else goto cdD4t;
       cdD4u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD4t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD4m_info" {
     block_cdD4m_info:
         const _cdD4m;
         const 0;
         const 30;
 },
 sat_sdyxQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD4A: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyxQ_info" {
     sat_sdyxQ_info:
         const sat_sdyxQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sdyxP_entry() //  [R1]
         { []
         }
     {offset
       cdD4D: // global
           _sdyxP::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdD4E; else goto cdD4F;
       cdD4F: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdD4H; else goto cdD4G;
       cdD4H: // global
           HpAlloc = 64;
           goto cdD4E;
       cdD4E: // global
           R1 = _sdyxP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD4G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyxP::P64;
           _sdyxK::P64 = P64[_sdyxP::P64 + 16];
           _sdyxL::P64 = P64[_sdyxP::P64 + 24];
           _sdyxM::P64 = P64[_sdyxP::P64 + 32];
           _sdyxN::P64 = P64[_sdyxP::P64 + 40];
           _sdyxO::P64 = P64[_sdyxP::P64 + 48];
           I64[Hp - 56] = sat_sdyy1_info;
           P64[Hp - 48] = _sdyxO::P64;
           I64[Hp - 40] = sat_sdyxW_info;
           P64[Hp - 32] = _sdyxN::P64;
           I64[Hp - 24] = sat_sdyxV_info;
           P64[Hp - 16] = _sdyxM::P64;
           I64[Hp - 8] = sat_sdyxQ_info;
           P64[Hp] = _sdyxL::P64;
           R2 = _sdyxK::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 22;
           P64[Sp - 32] = Hp - 39;
           P64[Sp - 24] = Hp - 54;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdyxP_info" {
     ds_sdyxP_info:
         const ds_sdyxP_entry;
         const 5;
         const 15;
 },
 sat_sdyy3_entry() //  [R1]
         { []
         }
     {offset
       cdD4R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdD4S; else goto cdD4T;
       cdD4S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD4T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyy3_info" {
     sat_sdyy3_info:
         const sat_sdyy3_entry;
         const 2;
         const 18;
 },
 sat_sdyy4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD4U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdD4Y; else goto cdD4X;
       cdD4Y: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD4X: // global
           _sdyxP::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdyy3_info;
           P64[Hp - 8] = _sdyxP::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyy4_info" {
     sat_sdyy4_info:
         const sat_sdyy4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadsPrec2_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cdD4Z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdD53; else goto cdD52;
       cdD53: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD52: // global
           I64[Hp - 64] = ds_sdyxP_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdyy4_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadsPrec2_info" {
     Data.Functor.Classes.$dmliftReadsPrec2_info:
         const Data.Functor.Classes.$dmliftReadsPrec2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.432056858 UTC

[section ""data" . Data.Functor.Classes.$dmliftShowList_closure" {
     Data.Functor.Classes.$dmliftShowList_closure:
         const Data.Functor.Classes.$dmliftShowList_info;
 },
 sat_sdyy8_entry() //  [R1]
         { []
         }
     {offset
       cdD5T: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdD5U; else goto cdD5V;
       cdD5U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD5V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           Sp = Sp - 48;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyy8_info" {
     sat_sdyy8_info:
         const sat_sdyy8_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.$dmliftShowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdD5W: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdD60; else goto cdD5Z;
       cdD60: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftShowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD5Z: // global
           I64[Hp - 32] = sat_sdyy8_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftShowList_info" {
     Data.Functor.Classes.$dmliftShowList_info:
         const Data.Functor.Classes.$dmliftShowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.439233506 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList_closure" {
     Data.Functor.Classes.$w$cliftShowList_closure:
         const Data.Functor.Classes.$w$cliftShowList_info;
 },
 lvl3_sdyyd_entry() //  [R1]
         { []
         }
     {offset
       cdD6j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdD6k; else goto cdD6l;
       cdD6k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD6l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyyd_info" {
     lvl3_sdyyd_info:
         const lvl3_sdyyd_entry;
         const 1;
         const 16;
 },
 sat_sdyyi_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD6u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdD6v; else goto cdD6w;
       cdD6v: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD6w: // global
           I64[Sp - 24] = block_cdD6r_info;
           _sdyya::P64 = P64[R1 + 7];
           _sdyyd::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdyya::P64;
           P64[Sp - 8] = _sdyyd::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udD6A; else goto cdD6s;
       udD6A: // global
           call _cdD6r(R1) args: 0, res: 0, upd: 0;
       cdD6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyi_info" {
     sat_sdyyi_info:
         const sat_sdyyi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdD6r() //  [R1]
         { []
         }
     {offset
       cdD6r: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD6r_info" {
     block_cdD6r_info:
         const _cdD6r;
         const 2;
         const 30;
 },
 Data.Functor.Classes.$w$cliftShowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdD6B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdD6F; else goto cdD6E;
       cdD6F: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD6E: // global
           I64[Hp - 40] = lvl3_sdyyd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdyyi_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           _sdyyb::P64 = R4;
           R4 = R5;
           R3 = _sdyyb::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList_info" {
     Data.Functor.Classes.$w$cliftShowList_info:
         const Data.Functor.Classes.$w$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.44836203 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowList_info;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowList_entry() //  [R2, R3,
                                                             R5, R6]
         { []
         }
     {offset
       cdD71: // global
           _sdyym::P64 = R5;
           R5 = R6;
           R4 = _sdyym::P64;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowList_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.453961063 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_closure" {
     Data.Functor.Classes.$fShow1(,)_closure:
         const Data.Functor.Classes.$fShow1(,)_info;
 },
 sat_sdyyu_entry() //  [R1, R2, R4, R5]
         { []
         }
     {offset
       cdD7h: // global
           R5 = R5;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$w$cliftShowList_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyu_info" {
     sat_sdyyu_info:
         const sat_sdyyu_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sdyyp_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdD7p: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyp_info" {
     sat_sdyyp_info:
         const sat_sdyyp_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 Data.Functor.Classes.$fShow1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdD7t: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdD7x; else goto cdD7w;
       cdD7x: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD7w: // global
           I64[Hp - 48] = sat_sdyyu_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyyp_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_info" {
     Data.Functor.Classes.$fShow1(,)_info:
         const Data.Functor.Classes.$fShow1(,)_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.460659181 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy1_closure" {
     Data.Functor.Classes.$fShow1Proxy1_closure:
         const Data.Functor.Classes.$fShow1Proxy1_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy1_entry() //  [R3]
         { []
         }
     {offset
       cdD7P: // global
           R2 = R3;
           call Data.Functor.Classes.$fShow1Proxy2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy1_info" {
     Data.Functor.Classes.$fShow1Proxy1_info:
         const Data.Functor.Classes.$fShow1Proxy1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.464156344 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy_$cliftShowList_entry() //  [R4,
                                                               R5]
         { []
         }
     {offset
       cdD80: // global
           _sdyyy::P64 = R4;
           R4 = R5;
           R3 = _sdyyy::P64;
           R2 = Data.Functor.Classes.$fShow1Proxy1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.467423714 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_closure" {
     Data.Functor.Classes.$fShow1Proxy_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure+5;
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.471042407 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info;
 },
 sat_sdyyI_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD8k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdD8l; else goto cdD8m;
       cdD8l: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD8m: // global
           I64[Sp - 24] = block_cdD8h_info;
           _sdyyA::P64 = P64[R1 + 7];
           _sdyyB::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdyyA::P64;
           P64[Sp - 8] = _sdyyB::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udD8q; else goto cdD8i;
       udD8q: // global
           call _cdD8h(R1) args: 0, res: 0, upd: 0;
       cdD8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyI_info" {
     sat_sdyyI_info:
         const sat_sdyyI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdD8h() //  [R1]
         { []
         }
     {offset
       cdD8h: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD8h_info" {
     block_cdD8h_info:
         const _cdD8h;
         const 2;
         const 30;
 },
 Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdD8r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdD8v; else goto cdD8u;
       cdD8v: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD8u: // global
           I64[Hp - 16] = sat_sdyyI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdyyC::P64 = R4;
           R4 = R5;
           R3 = _sdyyC::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.477939231 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.480147926 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1[]_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_info;
 },
 Data.Functor.Classes.$fShow1[]_$cliftShowList_entry() //  [R3, R4,
                                                            R5]
         { []
         }
     {offset
       cdD8N: // global
           _B2::P64 = R4;
           R4 = R5;
           _sdyyK::P64 = R3;
           R3 = _B2::P64;
           R2 = _sdyyK::P64;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1[]_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1[]_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.484452831 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_closure" {
     Data.Functor.Classes.$fShow1[]_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure+3;
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.489025272 UTC

[section ""data" . $w$dmliftReadListPrec_rdymw_closure" {
     $w$dmliftReadListPrec_rdymw_closure:
         const $w$dmliftReadListPrec_rdymw_info;
 },
 sat_sdyyQ_entry() //  [R1]
         { []
         }
     {offset
       cdD97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdD98; else goto cdD99;
       cdD98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD99: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyyQ_info" {
     sat_sdyyQ_info:
         const sat_sdyyQ_entry;
         const 1;
         const 16;
 },
 sat_sdyyR_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD9f: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyR_info" {
     sat_sdyyR_info:
         const sat_sdyyR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyyP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD9n: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyP_info" {
     sat_sdyyP_info:
         const sat_sdyyP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w3_sdyyO_entry() //  [R1]
         { []
         }
     {offset
       cdD9q: // global
           _sdyyO::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdD9r; else goto cdD9s;
       cdD9s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdD9u; else goto cdD9t;
       cdD9u: // global
           HpAlloc = 56;
           goto cdD9r;
       cdD9r: // global
           R1 = _sdyyO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdD9t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyyO::P64;
           _sdyyL::P64 = P64[_sdyyO::P64 + 16];
           _sdyyM::P64 = P64[_sdyyO::P64 + 24];
           _sdyyN::P64 = P64[_sdyyO::P64 + 32];
           I64[Hp - 48] = sat_sdyyQ_info;
           P64[Hp - 32] = _sdyyN::P64;
           I64[Hp - 24] = sat_sdyyR_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdyyP_info;
           P64[Hp] = _sdyyM::P64;
           R2 = _sdyyL::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w3_sdyyO_info" {
     w3_sdyyO_info:
         const w3_sdyyO_entry;
         const 3;
         const 15;
 },
 sat_sdyyV_entry() //  [R1, R2]
         { []
         }
     {offset
       cdD9D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdD9E; else goto cdD9F;
       cdD9E: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdD9F: // global
           I64[Sp - 8] = block_cdD9A_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyyV_info" {
     sat_sdyyV_info:
         const sat_sdyyV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdD9A() //  [R1]
         { []
         }
     {offset
       cdD9A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdD9I; else goto cdD9H;
       cdD9I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdD9H: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdD9A_info" {
     block_cdD9A_info:
         const _cdD9A;
         const 0;
         const 30;
 },
 $w$dmliftReadListPrec_rdymw_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdD9J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdD9N; else goto cdD9M;
       cdD9N: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$dmliftReadListPrec_rdymw_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdD9M: // global
           I64[Hp - 48] = w3_sdyyO_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdyyV_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $w$dmliftReadListPrec_rdymw_info" {
     $w$dmliftReadListPrec_rdymw_info:
         const $w$dmliftReadListPrec_rdymw_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.502415721 UTC

[section ""data" . $dmliftReadListPrec3_rdymx_closure" {
     $dmliftReadListPrec3_rdymx_closure:
         const $dmliftReadListPrec3_rdymx_info;
 },
 $dmliftReadListPrec3_rdymx_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDan: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $w$dmliftReadListPrec_rdymw_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmliftReadListPrec3_rdymx_info" {
     $dmliftReadListPrec3_rdymx_info:
         const $dmliftReadListPrec3_rdymx_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.505792167 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadListPrec_closure" {
     Data.Functor.Classes.$dmliftReadListPrec_closure:
         const Data.Functor.Classes.$dmliftReadListPrec_info;
 },
 Data.Functor.Classes.$dmliftReadListPrec_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cdDay: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmliftReadListPrec3_rdymx_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadListPrec_info" {
     Data.Functor.Classes.$dmliftReadListPrec_info:
         const Data.Functor.Classes.$dmliftReadListPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.512229228 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadPrec_closure" {
     Data.Functor.Classes.$dmliftReadPrec_closure:
         const Data.Functor.Classes.$dmliftReadPrec_info;
 },
 sat_sdyz5_entry() //  [R1]
         { []
         }
     {offset
       cdDaR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDaS; else goto cdDaT;
       cdDaS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDaT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyz5_info" {
     sat_sdyz5_info:
         const sat_sdyz5_entry;
         const 1;
         const 16;
 },
 sat_sdyz6_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDaZ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyz6_info" {
     sat_sdyz6_info:
         const sat_sdyz6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyz4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDb7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyz4_info" {
     sat_sdyz4_info:
         const sat_sdyz4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdyz3_entry() //  [R1]
         { []
         }
     {offset
       cdDba: // global
           _sdyz3::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDbb; else goto cdDbc;
       cdDbc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDbe; else goto cdDbd;
       cdDbe: // global
           HpAlloc = 56;
           goto cdDbb;
       cdDbb: // global
           R1 = _sdyz3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDbd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyz3::P64;
           _sdyz0::P64 = P64[_sdyz3::P64 + 16];
           _sdyz1::P64 = P64[_sdyz3::P64 + 24];
           _sdyz2::P64 = P64[_sdyz3::P64 + 32];
           I64[Hp - 48] = sat_sdyz5_info;
           P64[Hp - 32] = _sdyz2::P64;
           I64[Hp - 24] = sat_sdyz6_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdyz4_info;
           P64[Hp] = _sdyz1::P64;
           R2 = _sdyz0::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyz3_info" {
     f1_sdyz3_info:
         const f1_sdyz3_entry;
         const 3;
         const 15;
 },
 sat_sdyzc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDbt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDbu; else goto cdDbv;
       cdDbu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDbv: // global
           I64[Sp - 8] = block_cdDbq_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzc_info" {
     sat_sdyzc_info:
         const sat_sdyzc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDbq() //  [R1]
         { []
         }
     {offset
       cdDbq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDby; else goto cdDbx;
       cdDby: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDbx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDbq_info" {
     block_cdDbq_info:
         const _cdDbq;
         const 0;
         const 30;
 },
 sat_sdyzd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDbz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDbD; else goto cdDbC;
       cdDbD: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDbC: // global
           _sdyz3::P64 = P64[R1 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _sdyz3::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyzc_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzd_info" {
     sat_sdyzd_info:
         const sat_sdyzd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDbE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDbI; else goto cdDbH;
       cdDbI: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDbH: // global
           I64[Hp - 48] = f1_sdyz3_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdyzd_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadPrec_info" {
     Data.Functor.Classes.$dmliftReadPrec_info:
         const Data.Functor.Classes.$dmliftReadPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.530964155 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadList_closure" {
     Data.Functor.Classes.$dmliftReadList_closure:
         const Data.Functor.Classes.$dmliftReadList_info;
         const 0;
 },
 sat_sdyzm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDcD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDcE; else goto cdDcF;
       cdDcE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDcF: // global
           I64[Sp - 8] = block_cdDcA_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzm_info" {
     sat_sdyzm_info:
         const sat_sdyzm_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDcA() //  [R1]
         { []
         }
     {offset
       cdDcA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDcI; else goto cdDcH;
       cdDcI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDcH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDcA_info" {
     block_cdDcA_info:
         const _cdDcA;
         const 0;
         const 30;
 },
 sat_sdyzh_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDcO: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzh_info" {
     sat_sdyzh_info:
         const sat_sdyzh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyzn_entry() //  [R1]
         { []
         }
     {offset
       cdDcR: // global
           _sdyzn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDcS; else goto cdDcT;
       cdDcT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDcV; else goto cdDcU;
       cdDcV: // global
           HpAlloc = 32;
           goto cdDcS;
       cdDcS: // global
           R1 = _sdyzn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDcU: // global
           _sdyze::P64 = P64[_sdyzn::P64 + 16];
           _sdyzf::P64 = P64[_sdyzn::P64 + 24];
           _sdyzg::P64 = P64[_sdyzn::P64 + 32];
           I64[Hp - 24] = sat_sdyzm_info;
           P64[Hp - 16] = _sdyzg::P64;
           I64[Hp - 8] = sat_sdyzh_info;
           P64[Hp] = _sdyzf::P64;
           R2 = _sdyze::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 22;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzn_info" {
     sat_sdyzn_info:
         const sat_sdyzn_entry;
         const 3;
         const 15;
 },
 sat_sdyzo_entry() //  [R1]
         { []
         }
     {offset
       cdDcW: // global
           _sdyzo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDcX; else goto cdDcY;
       cdDcY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDd0; else goto cdDcZ;
       cdDd0: // global
           HpAlloc = 40;
           goto cdDcX;
       cdDcX: // global
           R1 = _sdyzo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDcZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyzo::P64;
           _sdyze::P64 = P64[_sdyzo::P64 + 16];
           _sdyzf::P64 = P64[_sdyzo::P64 + 24];
           _sdyzg::P64 = P64[_sdyzo::P64 + 32];
           I64[Hp - 32] = sat_sdyzn_info;
           P64[Hp - 16] = _sdyze::P64;
           P64[Hp - 8] = _sdyzf::P64;
           P64[Hp] = _sdyzg::P64;
           R2 = Hp - 32;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyzo_info" {
     sat_sdyzo_info:
         const sat_sdyzo_entry;
         const 3;
         const 4294967311;
         const SdyRV_srt+32;
 },
 Data.Functor.Classes.$dmliftReadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDd1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDd5; else goto cdDd4;
       cdDd5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDd4: // global
           I64[Hp - 32] = sat_sdyzo_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadList_info" {
     Data.Functor.Classes.$dmliftReadList_info:
         const Data.Functor.Classes.$dmliftReadList_entry;
         const 0;
         const 144115192370823182;
         const 12884901911;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.546772419 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info;
         const 0;
 },
 f_sdyzr_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDdE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_sdyzr_info" {
     f_sdyzr_info:
         const f_sdyzr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdyzs_entry() //  [R1]
         { []
         }
     {offset
       cdDdL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDdM; else goto cdDdN;
       cdDdM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDdN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyzs_info" {
     f1_sdyzs_info:
         const f1_sdyzs_entry;
         const 1;
         const 16;
 },
 f2_sdyzt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDdT: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sdyzt_info" {
     f2_sdyzt_info:
         const f2_sdyzt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyzz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDe9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDea; else goto cdDeb;
       cdDea: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDeb: // global
           I64[Sp - 32] = block_cdDe6_info;
           _sdyzr::P64 = P64[R1 + 7];
           _sdyzt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sdyzr::P64;
           P64[Sp - 16] = _sdyzt::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udDef; else goto cdDe7;
       udDef: // global
           call _cdDe6(R1) args: 0, res: 0, upd: 0;
       cdDe7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzz_info" {
     sat_sdyzz_info:
         const sat_sdyzz_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdyRV_srt+128;
 },
 _cdDe6() //  [R1]
         { []
         }
     {offset
       cdDe6: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDe6_info" {
     block_cdDe6_info:
         const _cdDe6;
         const 3;
         const 4294967326;
         const SdyRV_srt+128;
 },
 sat_sdyzC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDej: // global
           _sdyzv::P64 = R3;
           _sdyzu::P64 = R2;
           _sdyzC::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdDek; else goto cdDel;
       cdDel: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDen; else goto cdDem;
       cdDen: // global
           HpAlloc = 32;
           goto cdDek;
       cdDek: // global
           R3 = _sdyzv::P64;
           R2 = _sdyzu::P64;
           R1 = _sdyzC::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDem: // global
           _sdyzr::P64 = P64[_sdyzC::P64 + 6];
           _sdyzt::P64 = P64[_sdyzC::P64 + 14];
           I64[Hp - 24] = sat_sdyzz_info;
           P64[Hp - 16] = _sdyzr::P64;
           P64[Hp - 8] = _sdyzt::P64;
           P64[Hp] = _sdyzu::P64;
           I64[Sp - 8] = block_cdDeg_info;
           R3 = _sdyzv::P64;
           R2 = Hp - 23;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzC_info" {
     sat_sdyzC_info:
         const sat_sdyzC_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdyRV_srt+128;
 },
 _cdDeg() //  [R1]
         { []
         }
     {offset
       cdDeg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDeq; else goto cdDep;
       cdDeq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDep: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDeg_info" {
     block_cdDeg_info:
         const _cdDeg;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cdDer: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdDev; else goto cdDeu;
       cdDev: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDeu: // global
           I64[Hp - 72] = f_sdyzr_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = f1_sdyzs_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = f2_sdyzt_info;
           P64[Hp - 24] = Hp - 56;
           I64[Hp - 16] = sat_sdyzC_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 31;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const SdyRV_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.568428708 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info;
         const 0;
 },
 sat_sdyzK_entry() //  [R1]
         { []
         }
     {offset
       cdDfp: // global
           _sdyzK::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDfq; else goto cdDfr;
       cdDfr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDft; else goto cdDfs;
       cdDft: // global
           HpAlloc = 32;
           goto cdDfq;
       cdDfq: // global
           R1 = _sdyzK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDfs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyzK::P64;
           _sdyzD::P64 = P64[_sdyzK::P64 + 16];
           _sdyzG::P64 = P64[_sdyzK::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdyzD::P64;
           P64[Hp] = _sdyzG::P64;
           I64[Sp - 24] = block_cdDfm_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyzK_info" {
     sat_sdyzK_info:
         const sat_sdyzK_entry;
         const 2;
         const 18;
 },
 _cdDfm() //  [R1]
         { []
         }
     {offset
       cdDfm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDfw; else goto cdDfv;
       cdDfw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdDfv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdDfm_info" {
     block_cdDfm_info:
         const _cdDfm;
         const 0;
         const 30;
 },
 f_sdyzF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDfx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDfB; else goto cdDfA;
       cdDfB: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDfA: // global
           _sdyzD::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdyzK_info;
           P64[Hp - 8] = _sdyzD::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_sdyzF_info" {
     f_sdyzF_info:
         const f_sdyzF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdyzL_entry() //  [R1]
         { []
         }
     {offset
       cdDfJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdDfK; else goto cdDfL;
       cdDfK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDfL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdDfG_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyzL_info" {
     f1_sdyzL_info:
         const f1_sdyzL_entry;
         const 1;
         const 16;
 },
 _cdDfG() //  [R1]
         { []
         }
     {offset
       cdDfG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDfO; else goto cdDfN;
       cdDfO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdDfN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdDfG_info" {
     block_cdDfG_info:
         const _cdDfG;
         const 0;
         const 30;
 },
 f2_sdyzO_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDfU: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sdyzO_info" {
     f2_sdyzO_info:
         const f2_sdyzO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyzU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDga: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDgb; else goto cdDgc;
       cdDgb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDgc: // global
           I64[Sp - 32] = block_cdDg7_info;
           _sdyzF::P64 = P64[R1 + 7];
           _sdyzO::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sdyzF::P64;
           P64[Sp - 16] = _sdyzO::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udDgg; else goto cdDg8;
       udDgg: // global
           call _cdDg7(R1) args: 0, res: 0, upd: 0;
       cdDg8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzU_info" {
     sat_sdyzU_info:
         const sat_sdyzU_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdyRV_srt+128;
 },
 _cdDg7() //  [R1]
         { []
         }
     {offset
       cdDg7: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDg7_info" {
     block_cdDg7_info:
         const _cdDg7;
         const 3;
         const 4294967326;
         const SdyRV_srt+128;
 },
 sat_sdyzX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDgk: // global
           _sdyzQ::P64 = R3;
           _sdyzP::P64 = R2;
           _sdyzX::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdDgl; else goto cdDgm;
       cdDgm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDgo; else goto cdDgn;
       cdDgo: // global
           HpAlloc = 32;
           goto cdDgl;
       cdDgl: // global
           R3 = _sdyzQ::P64;
           R2 = _sdyzP::P64;
           R1 = _sdyzX::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDgn: // global
           _sdyzF::P64 = P64[_sdyzX::P64 + 6];
           _sdyzO::P64 = P64[_sdyzX::P64 + 14];
           I64[Hp - 24] = sat_sdyzU_info;
           P64[Hp - 16] = _sdyzF::P64;
           P64[Hp - 8] = _sdyzO::P64;
           P64[Hp] = _sdyzP::P64;
           I64[Sp - 8] = block_cdDgh_info;
           R3 = _sdyzQ::P64;
           R2 = Hp - 23;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyzX_info" {
     sat_sdyzX_info:
         const sat_sdyzX_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdyRV_srt+128;
 },
 _cdDgh() //  [R1]
         { []
         }
     {offset
       cdDgh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDgr; else goto cdDgq;
       cdDgr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDgq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDgh_info" {
     block_cdDgh_info:
         const _cdDgh;
         const 0;
         const 30;
 },
 sat_sdyzY_entry() //  [R1]
         { []
         }
     {offset
       cdDgs: // global
           _sdyzY::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDgt; else goto cdDgu;
       cdDgu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdDgw; else goto cdDgv;
       cdDgw: // global
           HpAlloc = 80;
           goto cdDgt;
       cdDgt: // global
           R1 = _sdyzY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDgv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyzY::P64;
           _sdyzD::P64 = P64[_sdyzY::P64 + 16];
           _sdyzE::P64 = P64[_sdyzY::P64 + 24];
           I64[Hp - 72] = f_sdyzF_info;
           P64[Hp - 64] = _sdyzD::P64;
           I64[Hp - 56] = f1_sdyzL_info;
           P64[Hp - 40] = _sdyzE::P64;
           I64[Hp - 32] = f2_sdyzO_info;
           P64[Hp - 24] = Hp - 56;
           I64[Hp - 16] = sat_sdyzX_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 31;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyzY_info" {
     sat_sdyzY_info:
         const sat_sdyzY_entry;
         const 2;
         const 17596481011730;
         const SdyRV_srt+32;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cdDgx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDgB; else goto cdDgA;
       cdDgB: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDgA: // global
           I64[Hp - 24] = sat_sdyzY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry;
         const 0;
         const 576478348784435214;
         const 8589934607;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.597608689 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdyA3_entry() //  [R1]
         { []
         }
     {offset
       cdDhB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDhC; else goto cdDhD;
       cdDhC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDhD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyA3_info" {
     sat_sdyA3_info:
         const sat_sdyA3_entry;
         const 1;
         const 16;
 },
 sat_sdyA4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDhJ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyA4_info" {
     sat_sdyA4_info:
         const sat_sdyA4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyA2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDhR: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyA2_info" {
     sat_sdyA2_info:
         const sat_sdyA2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_sdyA1_entry() //  [R1]
         { []
         }
     {offset
       cdDhU: // global
           _sdyA1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDhV; else goto cdDhW;
       cdDhW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDhY; else goto cdDhX;
       cdDhY: // global
           HpAlloc = 56;
           goto cdDhV;
       cdDhV: // global
           R1 = _sdyA1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDhX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyA1::P64;
           _sdyzZ::P64 = P64[_sdyA1::P64 + 16];
           _sdyA0::P64 = P64[_sdyA1::P64 + 24];
           I64[Hp - 48] = sat_sdyA3_info;
           P64[Hp - 32] = _sdyA0::P64;
           I64[Hp - 24] = sat_sdyA4_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdyA2_info;
           P64[Hp] = _sdyzZ::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_sdyA1_info" {
     w2_sdyA1_info:
         const w2_sdyA1_entry;
         const 2;
         const 4294967314;
         const SdyRV_srt+248;
 },
 sat_sdyA8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDi7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDi8; else goto cdDi9;
       cdDi8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDi9: // global
           I64[Sp - 8] = block_cdDi4_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyA8_info" {
     sat_sdyA8_info:
         const sat_sdyA8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDi4() //  [R1]
         { []
         }
     {offset
       cdDi4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDic; else goto cdDib;
       cdDic: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDib: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDi4_info" {
     block_cdDi4_info:
         const _cdDi4;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadListPrec2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDid: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDih; else goto cdDig;
       cdDih: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDig: // global
           I64[Hp - 40] = w2_sdyA1_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdyA8_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec2_info" {
     Data.Functor.Classes.$w$cliftReadListPrec2_info:
         const Data.Functor.Classes.$w$cliftReadListPrec2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdyRV_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.612550266 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty1_closure" {
     Data.Functor.Classes.$fRead1NonEmpty1_closure:
         const Data.Functor.Classes.$fRead1NonEmpty1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDiP: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec2_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty1_info" {
     Data.Functor.Classes.$fRead1NonEmpty1_info:
         const Data.Functor.Classes.$fRead1NonEmpty1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.615961748 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure+4;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure+2;
         const Data.Functor.Classes.$fRead1NonEmpty1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.620814262 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadsPrec_closure" {
     Data.Functor.Classes.$dmliftReadsPrec_closure:
         const Data.Functor.Classes.$dmliftReadsPrec_info;
 },
 sat_sdyAl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDjd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDje; else goto cdDjf;
       cdDje: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDjf: // global
           I64[Sp - 8] = block_cdDja_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyAl_info" {
     sat_sdyAl_info:
         const sat_sdyAl_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDja() //  [R1]
         { []
         }
     {offset
       cdDja: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDji; else goto cdDjh;
       cdDji: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDjh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDja_info" {
     block_cdDja_info:
         const _cdDja;
         const 0;
         const 30;
 },
 sat_sdyAg_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDjo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyAg_info" {
     sat_sdyAg_info:
         const sat_sdyAg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sdyAf_entry() //  [R1]
         { []
         }
     {offset
       cdDjr: // global
           _sdyAf::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDjs; else goto cdDjt;
       cdDjt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDjv; else goto cdDju;
       cdDjv: // global
           HpAlloc = 32;
           goto cdDjs;
       cdDjs: // global
           R1 = _sdyAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyAf::P64;
           _sdyAc::P64 = P64[_sdyAf::P64 + 16];
           _sdyAd::P64 = P64[_sdyAf::P64 + 24];
           _sdyAe::P64 = P64[_sdyAf::P64 + 32];
           I64[Hp - 24] = sat_sdyAl_info;
           P64[Hp - 16] = _sdyAe::P64;
           I64[Hp - 8] = sat_sdyAg_info;
           P64[Hp] = _sdyAd::P64;
           R2 = _sdyAc::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 22;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdyAf_info" {
     ds_sdyAf_info:
         const ds_sdyAf_entry;
         const 3;
         const 15;
 },
 sat_sdyAn_entry() //  [R1]
         { []
         }
     {offset
       cdDjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDjG; else goto cdDjH;
       cdDjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDjH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAn_info" {
     sat_sdyAn_info:
         const sat_sdyAn_entry;
         const 2;
         const 18;
 },
 sat_sdyAo_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDjI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDjM; else goto cdDjL;
       cdDjM: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDjL: // global
           _sdyAf::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdyAn_info;
           P64[Hp - 8] = _sdyAf::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyAo_info" {
     sat_sdyAo_info:
         const sat_sdyAo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDjN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDjR; else goto cdDjQ;
       cdDjR: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDjQ: // global
           I64[Hp - 48] = ds_sdyAf_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdyAo_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadsPrec_info" {
     Data.Functor.Classes.$dmliftReadsPrec_info:
         const Data.Functor.Classes.$dmliftReadsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.635522046 UTC

[section ""data" . Data.Functor.Classes.eq1_closure" {
     Data.Functor.Classes.eq1_closure:
         const Data.Functor.Classes.eq1_info;
 },
 sat_sdyAr_entry() //  [R1]
         { []
         }
     {offset
       cdDku: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDkv; else goto cdDkw;
       cdDkv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDkw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAr_info" {
     sat_sdyAr_info:
         const sat_sdyAr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.eq1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDkx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDkB; else goto cdDkA;
       cdDkB: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.eq1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDkA: // global
           I64[Hp - 16] = sat_sdyAr_info;
           P64[Hp] = R3;
           _sdyAp::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdyAp::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.eq1_info" {
     Data.Functor.Classes.eq1_info:
         const Data.Functor.Classes.eq1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.641987994 UTC

[section ""data" . Data.Functor.Classes.compare1_closure" {
     Data.Functor.Classes.compare1_closure:
         const Data.Functor.Classes.compare1_info;
 },
 sat_sdyAu_entry() //  [R1]
         { []
         }
     {offset
       cdDkS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDkT; else goto cdDkU;
       cdDkT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDkU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAu_info" {
     sat_sdyAu_info:
         const sat_sdyAu_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.compare1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDkV: // global
           _sdyAt::P64 = R3;
           _sdyAs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDkW; else goto cdDkX;
       cdDkX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDkZ; else goto cdDkY;
       cdDkZ: // global
           HpAlloc = 24;
           goto cdDkW;
       cdDkW: // global
           R3 = _sdyAt::P64;
           R2 = _sdyAs::P64;
           R1 = Data.Functor.Classes.compare1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDkY: // global
           I64[Hp - 16] = sat_sdyAu_info;
           P64[Hp] = _sdyAt::P64;
           R2 = _sdyAs::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.compare1_info" {
     Data.Functor.Classes.compare1_info:
         const Data.Functor.Classes.compare1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.648564867 UTC

[section ""data" . Data.Functor.Classes.readsPrec1_closure" {
     Data.Functor.Classes.readsPrec1_closure:
         const Data.Functor.Classes.readsPrec1_info;
 },
 sat_sdyAy_entry() //  [R1]
         { []
         }
     {offset
       cdDli: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDlj; else goto cdDlk;
       cdDlj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDlk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAy_info" {
     sat_sdyAy_info:
         const sat_sdyAy_entry;
         const 1;
         const 16;
 },
 sat_sdyAx_entry() //  [R1]
         { []
         }
     {offset
       cdDlp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDlq; else goto cdDlr;
       cdDlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDlr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAx_info" {
     sat_sdyAx_info:
         const sat_sdyAx_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDls: // global
           _sdyAw::P64 = R3;
           _sdyAv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDlt; else goto cdDlu;
       cdDlu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDlw; else goto cdDlv;
       cdDlw: // global
           HpAlloc = 48;
           goto cdDlt;
       cdDlt: // global
           R3 = _sdyAw::P64;
           R2 = _sdyAv::P64;
           R1 = Data.Functor.Classes.readsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDlv: // global
           I64[Hp - 40] = sat_sdyAy_info;
           P64[Hp - 24] = _sdyAw::P64;
           I64[Hp - 16] = sat_sdyAx_info;
           P64[Hp] = _sdyAw::P64;
           R2 = _sdyAv::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsPrec1_info" {
     Data.Functor.Classes.readsPrec1_info:
         const Data.Functor.Classes.readsPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.659860125 UTC

[section ""data" . Data.Functor.Classes.readsUnary1_closure" {
     Data.Functor.Classes.readsUnary1_closure:
         const Data.Functor.Classes.readsUnary1_info;
 },
 go_sdyAG_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDm7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDm8; else goto cdDm9;
       cdDm8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDm9: // global
           I64[Sp - 24] = block_cdDm0_info;
           _sdyAG::P64 = R1;
           _sdyAC::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdyAC::P64;
           P64[Sp - 8] = _sdyAG::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udDmt; else goto cdDm1;
       udDmt: // global
           call _cdDm0(R1) args: 0, res: 0, upd: 0;
       cdDm1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyAG_info" {
     go_sdyAG_info:
         const go_sdyAG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDm0() //  [R1]
         { []
         }
     {offset
       cdDm0: // global
           if (R1 & 7 == 1) goto cdDm4; else goto cdDm5;
       cdDm4: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDm5: // global
           I64[Sp - 8] = block_cdDmf_info;
           _sdyAK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyAK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udDms; else goto cdDmg;
       udDms: // global
           call _cdDmf(R1) args: 0, res: 0, upd: 0;
       cdDmg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDm0_info" {
     block_cdDm0_info:
         const _cdDm0;
         const 2;
         const 30;
 },
 _cdDmf() //  [R1]
         { []
         }
     {offset
       cdDmf: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdDmr; else goto cdDmq;
       cdDmr: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDmq: // global
           _sdyAM::P64 = P64[R1 + 7];
           _sdyAN::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdyAM::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdyAN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDmf_info" {
     block_cdDmf_info:
         const _cdDmf;
         const 3;
         const 30;
 },
 sat_sdyAS_entry() //  [R1]
         { []
         }
     {offset
       cdDmy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDmz; else goto cdDmA;
       cdDmz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDmA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAS_info" {
     sat_sdyAS_info:
         const sat_sdyAS_entry;
         const 1;
         const 16;
 },
 sat_sdyAR_entry() //  [R1]
         { []
         }
     {offset
       cdDmF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDmG; else goto cdDmH;
       cdDmG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDmH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyAR_info" {
     sat_sdyAR_info:
         const sat_sdyAR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDmM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdDmN; else goto cdDmO;
       cdDmN: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnary1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdDmO: // global
           I64[Sp - 32] = block_cdDlQ_info;
           _sdyAA::P64 = R3;
           R3 = R4;
           _sdyAz::P64 = R2;
           R2 = R6;
           P64[Sp - 24] = _sdyAz::P64;
           P64[Sp - 16] = _sdyAA::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnary1_info" {
     Data.Functor.Classes.readsUnary1_info:
         const Data.Functor.Classes.readsUnary1_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdDlQ() //  [R1]
         { []
         }
     {offset
       cdDlQ: // global
           if (R1 & 7 == 1) goto cdDmJ; else goto cdDmK;
       cdDmJ: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDmK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDmU; else goto cdDmT;
       cdDmU: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDmT: // global
           I64[Hp - 56] = go_sdyAG_info;
           P64[Hp - 48] = P64[Sp + 24];
           I64[Hp - 40] = sat_sdyAS_info;
           _sdyAA::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sdyAA::P64;
           I64[Hp - 16] = sat_sdyAR_info;
           P64[Hp] = _sdyAA::P64;
           I64[Sp + 24] = block_cdDmR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           P64[Sp + 8] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 55;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDlQ_info" {
     block_cdDlQ_info:
         const _cdDlQ;
         const 4;
         const 30;
 },
 _cdDmR() //  [R1]
         { []
         }
     {offset
       cdDmR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyAG_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDmR_info" {
     block_cdDmR_info:
         const _cdDmR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.682065416 UTC

[section ""data" . Data.Functor.Classes.readsBinary1_closure" {
     Data.Functor.Classes.readsBinary1_closure:
         const Data.Functor.Classes.readsBinary1_info;
 },
 Data.Functor.Classes.readsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdDnN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.readsBinary1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 lvl3_sdyB2_entry() //  [R1]
         { []
         }
     {offset
       cdDo0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDo1; else goto cdDo2;
       cdDo1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDo2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyB2_info" {
     lvl3_sdyB2_info:
         const lvl3_sdyB2_entry;
         const 1;
         const 16;
 },
 lvl4_sdyB3_entry() //  [R1]
         { []
         }
     {offset
       cdDo7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDo8; else goto cdDo9;
       cdDo8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDo9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_sdyB3_info" {
     lvl4_sdyB3_info:
         const lvl4_sdyB3_entry;
         const 1;
         const 16;
 },
 go1_sdyBd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDoD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDoE; else goto cdDoF;
       cdDoE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDoF: // global
           I64[Sp - 40] = block_cdDow_info;
           _sdyBd::P64 = R1;
           _sdyAY::P64 = P64[R1 + 7];
           _sdyBa::P64 = P64[R1 + 15];
           _sdyBc::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sdyAY::P64;
           P64[Sp - 24] = _sdyBa::P64;
           P64[Sp - 16] = _sdyBc::P64;
           P64[Sp - 8] = _sdyBd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udDoZ; else goto cdDox;
       udDoZ: // global
           call _cdDow(R1) args: 0, res: 0, upd: 0;
       cdDox: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sdyBd_info" {
     go1_sdyBd_info:
         const go1_sdyBd_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cdDow() //  [R1]
         { []
         }
     {offset
       cdDow: // global
           if (R1 & 7 == 1) goto cdDoA; else goto cdDoB;
       cdDoA: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdDoB: // global
           I64[Sp] = block_cdDoL_info;
           _sdyBh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sdyBh::P64;
           if (R1 & 7 != 0) goto udDoY; else goto cdDoM;
       udDoY: // global
           call _cdDoL(R1) args: 0, res: 0, upd: 0;
       cdDoM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDow_info" {
     block_cdDow_info:
         const _cdDow;
         const 4;
         const 30;
 },
 _cdDoL() //  [R1]
         { []
         }
     {offset
       cdDoL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdDoX; else goto cdDoW;
       cdDoX: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDoW: // global
           _sdyBj::P64 = P64[R1 + 7];
           _sdyBk::P64 = P64[R1 + 15];
           I64[Hp - 112] = stg_ap_2_upd_info;
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdyBj::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 80;
           P64[Hp - 24] = _sdyBk::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDoL_info" {
     block_cdDoL_info:
         const _cdDoL;
         const 4;
         const 30;
 },
 go_sdyB4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDp4: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdDp5; else goto cdDp6;
       cdDp5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDp6: // global
           I64[Sp - 48] = block_cdDof_info;
           _sdyB4::P64 = R1;
           _sdyAV::P64 = P64[R1 + 7];
           _sdyAY::P64 = P64[R1 + 15];
           _sdyB2::P64 = P64[R1 + 23];
           _sdyB3::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _sdyAV::P64;
           P64[Sp - 32] = _sdyAY::P64;
           P64[Sp - 24] = _sdyB2::P64;
           P64[Sp - 16] = _sdyB3::P64;
           P64[Sp - 8] = _sdyB4::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udDpj; else goto cdDog;
       udDpj: // global
           call _cdDof(R1) args: 0, res: 0, upd: 0;
       cdDog: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyB4_info" {
     go_sdyB4_info:
         const go_sdyB4_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cdDof() //  [R1]
         { []
         }
     {offset
       cdDof: // global
           if (R1 & 7 == 1) goto cdDp1; else goto cdDp2;
       cdDp1: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDp2: // global
           I64[Sp - 8] = block_cdDol_info;
           _sdyB8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyB8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udDpi; else goto cdDom;
       udDpi: // global
           call _cdDol(R1) args: 0, res: 0, upd: 0;
       cdDom: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDof_info" {
     block_cdDof_info:
         const _cdDof;
         const 5;
         const 30;
 },
 _cdDol() //  [R1]
         { []
         }
     {offset
       cdDol: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDpd; else goto cdDpc;
       cdDpd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDpc: // global
           _sdyBa::P64 = P64[R1 + 7];
           _sdyBb::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdyBd_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sdyBa::P64;
           P64[Hp] = Hp - 56;
           _sdyB3::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdDp9_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = P64[Sp + 32];
           P64[Sp + 16] = _sdyB3::P64;
           P64[Sp + 24] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 32] = _sdyBb::P64;
           P64[Sp + 48] = Hp - 23;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDol_info" {
     block_cdDol_info:
         const _cdDol;
         const 6;
         const 30;
 },
 _cdDp9() //  [R1]
         { []
         }
     {offset
       cdDp9: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdyBd_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDp9_info" {
     block_cdDp9_info:
         const _cdDp9;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readsBinary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDpo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDpp; else goto cdDpq;
       cdDpp: // global
           R1 = Data.Functor.Classes.readsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdDpq: // global
           I64[Sp - 32] = block_cdDnR_info;
           _sdyAV::P64 = R3;
           R3 = R5;
           _sdyAU::P64 = R2;
           R2 = P64[Sp];
           P64[Sp - 24] = _sdyAV::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = _sdyAU::P64;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsBinary1_info" {
     Data.Functor.Classes.readsBinary1_info:
         const Data.Functor.Classes.readsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Classes.readsBinary1_slow;
 },
 _cdDnR() //  [R1]
         { []
         }
     {offset
       cdDnR: // global
           if (R1 & 7 == 1) goto cdDpl; else goto cdDpm;
       cdDpl: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDpm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdDpw; else goto cdDpv;
       cdDpw: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDpv: // global
           I64[Hp - 80] = lvl3_sdyB2_info;
           _sdyAW::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sdyAW::P64;
           I64[Hp - 56] = lvl4_sdyB3_info;
           P64[Hp - 40] = _sdyAW::P64;
           I64[Hp - 32] = go_sdyB4_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           _cdDnW::P64 = Hp - 80;
           P64[Hp - 8] = _cdDnW::P64;
           _cdDo3::P64 = Hp - 56;
           P64[Hp] = _cdDo3::P64;
           _sdyAU::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cdDpt_info;
           R2 = _sdyAU::P64;
           I64[Sp - 8] = stg_ap_pppp_info;
           P64[Sp] = _cdDnW::P64;
           P64[Sp + 8] = _cdDo3::P64;
           P64[Sp + 16] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 40] = Hp - 31;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDnR_info" {
     block_cdDnR_info:
         const _cdDnR;
         const 5;
         const 30;
 },
 _cdDpt() //  [R1]
         { []
         }
     {offset
       cdDpt: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyB4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDpt_info" {
     block_cdDpt_info:
         const _cdDpt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.708771902 UTC

[section ""data" . Data.Functor.Classes.readPrec1_closure" {
     Data.Functor.Classes.readPrec1_closure:
         const Data.Functor.Classes.readPrec1_info;
 },
 sat_sdyBt_entry() //  [R1]
         { []
         }
     {offset
       cdDqX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDqY; else goto cdDqZ;
       cdDqY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDqZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyBt_info" {
     sat_sdyBt_info:
         const sat_sdyBt_entry;
         const 1;
         const 16;
 },
 sat_sdyBs_entry() //  [R1]
         { []
         }
     {offset
       cdDr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDr5; else goto cdDr6;
       cdDr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDr6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyBs_info" {
     sat_sdyBs_info:
         const sat_sdyBs_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDr7: // global
           _sdyBr::P64 = R3;
           _sdyBq::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDr8; else goto cdDr9;
       cdDr9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDrb; else goto cdDra;
       cdDrb: // global
           HpAlloc = 48;
           goto cdDr8;
       cdDr8: // global
           R3 = _sdyBr::P64;
           R2 = _sdyBq::P64;
           R1 = Data.Functor.Classes.readPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDra: // global
           I64[Hp - 40] = sat_sdyBt_info;
           P64[Hp - 24] = _sdyBr::P64;
           I64[Hp - 16] = sat_sdyBs_info;
           P64[Hp] = _sdyBr::P64;
           R2 = _sdyBq::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readPrec1_info" {
     Data.Functor.Classes.readPrec1_info:
         const Data.Functor.Classes.readPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.717830255 UTC

[section ""data" . Data.Functor.Classes.liftReadListDefault_closure" {
     Data.Functor.Classes.liftReadListDefault_closure:
         const Data.Functor.Classes.liftReadListDefault_info;
 },
 sat_sdyBC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDrH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDrI; else goto cdDrJ;
       cdDrI: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDrJ: // global
           I64[Sp - 8] = block_cdDrE_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyBC_info" {
     sat_sdyBC_info:
         const sat_sdyBC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDrE() //  [R1]
         { []
         }
     {offset
       cdDrE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDrM; else goto cdDrL;
       cdDrM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDrL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDrE_info" {
     block_cdDrE_info:
         const _cdDrE;
         const 0;
         const 30;
 },
 sat_sdyBx_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDrS: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyBx_info" {
     sat_sdyBx_info:
         const sat_sdyBx_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyBD_entry() //  [R1]
         { []
         }
     {offset
       cdDrV: // global
           _sdyBD::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdDrW; else goto cdDrX;
       cdDrX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDrZ; else goto cdDrY;
       cdDrZ: // global
           HpAlloc = 32;
           goto cdDrW;
       cdDrW: // global
           R1 = _sdyBD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDrY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyBD::P64;
           _sdyBu::P64 = P64[_sdyBD::P64 + 16];
           _sdyBv::P64 = P64[_sdyBD::P64 + 24];
           _sdyBw::P64 = P64[_sdyBD::P64 + 32];
           I64[Hp - 24] = sat_sdyBC_info;
           P64[Hp - 16] = _sdyBw::P64;
           I64[Hp - 8] = sat_sdyBx_info;
           P64[Hp] = _sdyBv::P64;
           R2 = _sdyBu::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 22;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadListPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyBD_info" {
     sat_sdyBD_info:
         const sat_sdyBD_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.liftReadListDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDs0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDs4; else goto cdDs3;
       cdDs4: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDs3: // global
           I64[Hp - 32] = sat_sdyBD_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListDefault_info" {
     Data.Functor.Classes.liftReadListDefault_info:
         const Data.Functor.Classes.liftReadListDefault_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.729639137 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrecDefault_closure" {
     Data.Functor.Classes.liftReadListPrecDefault_closure:
         const Data.Functor.Classes.liftReadListPrecDefault_info;
         const 0;
 },
 sat_sdyBH_entry() //  [R1]
         { []
         }
     {offset
       cdDsy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdDsz; else goto cdDsA;
       cdDsz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDsA: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyBH_info" {
     sat_sdyBH_info:
         const sat_sdyBH_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.liftReadListPrecDefault_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdDsB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDsF; else goto cdDsE;
       cdDsF: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrecDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDsE: // global
           I64[Hp - 32] = sat_sdyBH_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrecDefault_info" {
     Data.Functor.Classes.liftReadListPrecDefault_info:
         const Data.Functor.Classes.liftReadListPrecDefault_entry;
         const 0;
         const 2305843013508661262;
         const 12884901911;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.735623225 UTC

[section ""data" . lvl_rdymy_closure" {
     lvl_rdymy_closure:
         const lvl_rdymy_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rdymy_entry() //  [R1]
         { []
         }
     {offset
       cdDsW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDsX; else goto cdDsY;
       cdDsX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDsY: // global
           (_cdDsT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdDsT::I64 == 0) goto cdDsV; else goto cdDsU;
       cdDsV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdDsU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdDsT::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rdymy_info" {
     lvl_rdymy_info:
         const lvl_rdymy_entry;
         const 0;
         const 281479271677973;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.740578996 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_entry() //  []
         { []
         }
     {offset
       cdDta: // global
           R1 = lvl_rdymy_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.744801234 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info;
         const 0;
 },
 sat_sdyBN_entry() //  [R1]
         { []
         }
     {offset
       cdDtp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDtq; else goto cdDtr;
       cdDtq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDtr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Functor.Classes.$fRead1Proxy2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyBN_info" {
     sat_sdyBN_info:
         const sat_sdyBN_entry;
         const 1;
         const 281479271677968;
         const SdyRV_srt+16;
 },
 section ""relreadonly" . udDtx_srtd" {
     udDtx_srtd:
         const SdyRV_srt+16;
         const 34;
         const 8590000129;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdDts: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDtw; else goto cdDtv;
       cdDtw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDtv: // global
           I64[Hp - 16] = sat_sdyBN_info;
           P64[Hp] = R4;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const udDtx_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.751334138 UTC

[section ""data" . lvl1_rdymz_closure" {
     lvl1_rdymz_closure:
         const lvl1_rdymz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rdymz_entry() //  [R1]
         { []
         }
     {offset
       cdDtN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDtO; else goto cdDtP;
       cdDtO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDtP: // global
           (_cdDtK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdDtK::I64 == 0) goto cdDtM; else goto cdDtL;
       cdDtM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdDtL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdDtK::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy1_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rdymz_info" {
     lvl1_rdymz_info:
         const lvl1_rdymz_entry;
         const 0;
         const 281479271677973;
         const SdyRV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.755298157 UTC

[section ""data" . lvl2_rdymA_closure" {
     lvl2_rdymA_closure:
         const lvl2_rdymA_info;
         const 0;
 },
 lvl2_rdymA_entry() //  [R2]
         { []
         }
     {offset
       cdDu1: // global
           R3 = R2;
           R2 = lvl1_rdymz_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rdymA_info" {
     lvl2_rdymA_info:
         const lvl2_rdymA_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdyRV_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.759068826 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadList_entry() //  [R4]
         { []
         }
     {offset
       cdDuc: // global
           R2 = R4;
           call lvl2_rdymA_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.762330841 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_closure" {
     Data.Functor.Classes.$fRead1Proxy_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure+3;
         const Data.Functor.Classes.$fRead1Proxy5_closure+4;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.764554262 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_entry() //  [R3]
         { []
         }
     {offset
       cdDuo: // global
           R2 = R3;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.76930631 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info;
 },
 sat_sdyBX_entry() //  [R1]
         { []
         }
     {offset
       cdDuG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdDuH; else goto cdDuI;
       cdDuH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDuI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdDuD_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyBX_info" {
     sat_sdyBX_info:
         const sat_sdyBX_entry;
         const 1;
         const 16;
 },
 _cdDuD() //  [R1]
         { []
         }
     {offset
       cdDuD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDuL; else goto cdDuK;
       cdDuL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdDuK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdDuD_info" {
     block_cdDuD_info:
         const _cdDuD;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cdDuM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDuQ; else goto cdDuP;
       cdDuQ: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDuP: // global
           I64[Hp - 16] = sat_sdyBX_info;
           P64[Hp] = R3;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.77919877 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList2_closure" {
     Data.Functor.Classes.$w$cliftReadList2_closure:
         const Data.Functor.Classes.$w$cliftReadList2_info;
         const 0;
 },
 sat_sdyC3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDvj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDvk; else goto cdDvl;
       cdDvk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDvl: // global
           I64[Sp - 8] = block_cdDvg_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyC3_info" {
     sat_sdyC3_info:
         const sat_sdyC3_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDvg() //  [R1]
         { []
         }
     {offset
       cdDvg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDvo; else goto cdDvn;
       cdDvo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDvn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDvg_info" {
     block_cdDvg_info:
         const _cdDvg;
         const 0;
         const 30;
 },
 sat_sdyC4_entry() //  [R1]
         { []
         }
     {offset
       cdDvp: // global
           _sdyC4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDvq; else goto cdDvr;
       cdDvr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDvt; else goto cdDvs;
       cdDvt: // global
           HpAlloc = 16;
           goto cdDvq;
       cdDvq: // global
           R1 = _sdyC4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDvs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyC4::P64;
           _sdyBY::P64 = P64[_sdyC4::P64 + 16];
           I64[Hp - 8] = sat_sdyC3_info;
           P64[Hp] = _sdyBY::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyC4_info" {
     sat_sdyC4_info:
         const sat_sdyC4_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+304;
 },
 Data.Functor.Classes.$w$cliftReadList2_entry() //  [R2]
         { []
         }
     {offset
       cdDvu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDvy; else goto cdDvx;
       cdDvy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDvx: // global
           I64[Hp - 16] = sat_sdyC4_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList2_info" {
     Data.Functor.Classes.$w$cliftReadList2_info:
         const Data.Functor.Classes.$w$cliftReadList2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.788200425 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadList_entry() //  [R3]
         { []
         }
     {offset
       cdDvT: // global
           R2 = R3;
           call Data.Functor.Classes.$w$cliftReadList2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.791907506 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_closure" {
     Data.Functor.Classes.$fRead1[]_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure+2;
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.796188529 UTC

[section ""data" . Data.Functor.Classes.showsPrec1_closure" {
     Data.Functor.Classes.showsPrec1_closure:
         const Data.Functor.Classes.showsPrec1_info;
 },
 sat_sdyCa_entry() //  [R1]
         { []
         }
     {offset
       cdDw9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDwa; else goto cdDwb;
       cdDwa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDwb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCa_info" {
     sat_sdyCa_info:
         const sat_sdyCa_entry;
         const 1;
         const 16;
 },
 sat_sdyC9_entry() //  [R1]
         { []
         }
     {offset
       cdDwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDwh; else goto cdDwi;
       cdDwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDwi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyC9_info" {
     sat_sdyC9_info:
         const sat_sdyC9_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.showsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDwj: // global
           _sdyC8::P64 = R3;
           _sdyC7::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDwk; else goto cdDwl;
       cdDwl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDwn; else goto cdDwm;
       cdDwn: // global
           HpAlloc = 48;
           goto cdDwk;
       cdDwk: // global
           R3 = _sdyC8::P64;
           R2 = _sdyC7::P64;
           R1 = Data.Functor.Classes.showsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDwm: // global
           I64[Hp - 40] = sat_sdyCa_info;
           P64[Hp - 24] = _sdyC8::P64;
           I64[Hp - 16] = sat_sdyC9_info;
           P64[Hp] = _sdyC8::P64;
           R2 = _sdyC7::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsPrec1_info" {
     Data.Functor.Classes.showsPrec1_info:
         const Data.Functor.Classes.showsPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.803346345 UTC

[section ""data" . Data.Functor.Classes.showsUnaryWith1_closure" {
     Data.Functor.Classes.showsUnaryWith1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.810110427 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnary1_closure" {
     Data.Functor.Classes.$wshowsUnary1_closure:
         const Data.Functor.Classes.$wshowsUnary1_info;
 },
 Data.Functor.Classes.$wshowsUnary1_slow() //  [R1]
         { []
         }
     {offset
       cdDwF: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsUnary1_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdyCi_entry() //  [R1]
         { []
         }
     {offset
       cdDwR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDwS; else goto cdDwT;
       cdDwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCi_info" {
     sat_sdyCi_info:
         const sat_sdyCi_entry;
         const 1;
         const 16;
 },
 sat_sdyCh_entry() //  [R1]
         { []
         }
     {offset
       cdDwY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDwZ; else goto cdDx0;
       cdDwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDx0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCh_info" {
     sat_sdyCh_info:
         const sat_sdyCh_entry;
         const 1;
         const 16;
 },
 g_sdyCg_entry() //  [R1]
         { []
         }
     {offset
       cdDx1: // global
           _sdyCg::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdDx2; else goto cdDx3;
       cdDx3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDx5; else goto cdDx4;
       cdDx5: // global
           HpAlloc = 48;
           goto cdDx2;
       cdDx2: // global
           R1 = _sdyCg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDx4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCg::P64;
           _sdyCb::P64 = P64[_sdyCg::P64 + 16];
           _sdyCc::P64 = P64[_sdyCg::P64 + 24];
           _sdyCf::P64 = P64[_sdyCg::P64 + 32];
           I64[Hp - 40] = sat_sdyCi_info;
           P64[Hp - 24] = _sdyCc::P64;
           I64[Hp - 16] = sat_sdyCh_info;
           P64[Hp] = _sdyCc::P64;
           R2 = _sdyCb::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdyCf::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdyCg_info" {
     g_sdyCg_info:
         const g_sdyCg_entry;
         const 3;
         const 15;
 },
 sat_sdyCn_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDxg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDxk; else goto cdDxj;
       cdDxk: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDxj: // global
           _sdyCd::P64 = P64[R1 + 7];
           _sdyCg::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdyCg::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyCd::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyCn_info" {
     sat_sdyCn_info:
         const sat_sdyCn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyCq_entry() //  [R1]
         { []
         }
     {offset
       cdDxA: // global
           _sdyCq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDxB; else goto cdDxC;
       cdDxC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDxE; else goto cdDxD;
       cdDxE: // global
           HpAlloc = 24;
           goto cdDxB;
       cdDxB: // global
           R1 = _sdyCq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDxD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCq::P64;
           _sdyCg::P64 = P64[_sdyCq::P64 + 16];
           _sdyCo::P64 = P64[_sdyCq::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdyCo::P64;
           R2 = Hp - 14;
           R1 = _sdyCg::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCq_info" {
     sat_sdyCq_info:
         const sat_sdyCq_entry;
         const 2;
         const 18;
 },
 sat_sdyCs_entry() //  [R1]
         { []
         }
     {offset
       cdDxG: // global
           _sdyCs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDxH; else goto cdDxI;
       cdDxI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDxK; else goto cdDxJ;
       cdDxK: // global
           HpAlloc = 56;
           goto cdDxH;
       cdDxH: // global
           R1 = _sdyCs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDxJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCs::P64;
           _sdyCd::P64 = P64[_sdyCs::P64 + 16];
           _sdyCg::P64 = P64[_sdyCs::P64 + 24];
           _sdyCo::P64 = P64[_sdyCs::P64 + 32];
           I64[Hp - 48] = sat_sdyCq_info;
           P64[Hp - 32] = _sdyCg::P64;
           P64[Hp - 24] = _sdyCo::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyCd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCs_info" {
     sat_sdyCs_info:
         const sat_sdyCs_entry;
         const 3;
         const 15;
 },
 sat_sdyCt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDxM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDxQ; else goto cdDxP;
       cdDxQ: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDxP: // global
           _sdyCd::P64 = P64[R1 + 7];
           _sdyCg::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdyCs_info;
           P64[Hp - 40] = _sdyCd::P64;
           P64[Hp - 32] = _sdyCg::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyCt_info" {
     sat_sdyCt_info:
         const sat_sdyCt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDxU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDxY; else goto cdDxX;
       cdDxY: // global
           HpAlloc = 64;
           R1 = Data.Functor.Classes.$wshowsUnary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdDxX: // global
           I64[Hp - 56] = g_sdyCg_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cdDwJ::P64 = Hp - 56;
           if (%MO_S_Le_W64(R5, 10)) goto cdDxS; else goto cdDxT;
       cdDxS: // global
           I64[Hp - 16] = sat_sdyCn_info;
           P64[Hp - 8] = R4;
           P64[Hp] = _cdDwJ::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDxT: // global
           I64[Hp - 16] = sat_sdyCt_info;
           P64[Hp - 8] = R4;
           P64[Hp] = _cdDwJ::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnary1_info" {
     Data.Functor.Classes.$wshowsUnary1_info:
         const Data.Functor.Classes.$wshowsUnary1_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 517;
         const Data.Functor.Classes.$wshowsUnary1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.830475085 UTC

[section ""data" . Data.Functor.Classes.showsUnary1_closure" {
     Data.Functor.Classes.showsUnary1_closure:
         const Data.Functor.Classes.showsUnary1_info;
 },
 Data.Functor.Classes.showsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDyK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDyL; else goto cdDyM;
       cdDyL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnary1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDyM: // global
           I64[Sp - 40] = block_cdDyH_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udDyQ; else goto cdDyI;
       udDyQ: // global
           call _cdDyH(R1) args: 0, res: 0, upd: 0;
       cdDyI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnary1_info" {
     Data.Functor.Classes.showsUnary1_info:
         const Data.Functor.Classes.showsUnary1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdDyH() //  [R1]
         { []
         }
     {offset
       cdDyH: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsUnary1_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDyH_info" {
     block_cdDyH_info:
         const _cdDyH;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.842950186 UTC

[section ""data" . Data.Functor.Classes.$wshowsBinary1_closure" {
     Data.Functor.Classes.$wshowsBinary1_closure:
         const Data.Functor.Classes.$wshowsBinary1_info;
 },
 Data.Functor.Classes.$wshowsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdDz1: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinary1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sdyCK_entry() //  [R1]
         { []
         }
     {offset
       cdDzd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDze; else goto cdDzf;
       cdDze: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCK_info" {
     sat_sdyCK_info:
         const sat_sdyCK_entry;
         const 1;
         const 16;
 },
 sat_sdyCJ_entry() //  [R1]
         { []
         }
     {offset
       cdDzk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDzl; else goto cdDzm;
       cdDzl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCJ_info" {
     sat_sdyCJ_info:
         const sat_sdyCJ_entry;
         const 1;
         const 16;
 },
 f1_sdyCI_entry() //  [R1]
         { []
         }
     {offset
       cdDzn: // global
           _sdyCI::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdDzo; else goto cdDzp;
       cdDzp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDzr; else goto cdDzq;
       cdDzr: // global
           HpAlloc = 48;
           goto cdDzo;
       cdDzo: // global
           R1 = _sdyCI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCI::P64;
           _sdyCB::P64 = P64[_sdyCI::P64 + 16];
           _sdyCD::P64 = P64[_sdyCI::P64 + 24];
           _sdyCG::P64 = P64[_sdyCI::P64 + 32];
           I64[Hp - 40] = sat_sdyCK_info;
           P64[Hp - 24] = _sdyCD::P64;
           I64[Hp - 16] = sat_sdyCJ_info;
           P64[Hp] = _sdyCD::P64;
           R2 = _sdyCB::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdyCG::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdyCI_info" {
     f1_sdyCI_info:
         const f1_sdyCI_entry;
         const 3;
         const 15;
 },
 sat_sdyCN_entry() //  [R1]
         { []
         }
     {offset
       cdDzA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDzB; else goto cdDzC;
       cdDzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCN_info" {
     sat_sdyCN_info:
         const sat_sdyCN_entry;
         const 1;
         const 16;
 },
 sat_sdyCM_entry() //  [R1]
         { []
         }
     {offset
       cdDzH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDzI; else goto cdDzJ;
       cdDzI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCM_info" {
     sat_sdyCM_info:
         const sat_sdyCM_entry;
         const 1;
         const 16;
 },
 g1_sdyCL_entry() //  [R1]
         { []
         }
     {offset
       cdDzK: // global
           _sdyCL::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdDzL; else goto cdDzM;
       cdDzM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDzO; else goto cdDzN;
       cdDzO: // global
           HpAlloc = 48;
           goto cdDzL;
       cdDzL: // global
           R1 = _sdyCL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCL::P64;
           _sdyCC::P64 = P64[_sdyCL::P64 + 16];
           _sdyCD::P64 = P64[_sdyCL::P64 + 24];
           _sdyCH::P64 = P64[_sdyCL::P64 + 32];
           I64[Hp - 40] = sat_sdyCN_info;
           P64[Hp - 24] = _sdyCD::P64;
           I64[Hp - 16] = sat_sdyCM_info;
           P64[Hp] = _sdyCD::P64;
           R2 = _sdyCC::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdyCH::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sdyCL_info" {
     g1_sdyCL_info:
         const g1_sdyCL_entry;
         const 3;
         const 15;
 },
 sat_sdyCS_entry() //  [R1]
         { []
         }
     {offset
       cdDA3: // global
           _sdyCS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDA4; else goto cdDA5;
       cdDA5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDA7; else goto cdDA6;
       cdDA7: // global
           HpAlloc = 56;
           goto cdDA4;
       cdDA4: // global
           R1 = _sdyCS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDA6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCS::P64;
           _sdyCI::P64 = P64[_sdyCS::P64 + 16];
           _sdyCL::P64 = P64[_sdyCS::P64 + 24];
           _sdyCP::P64 = P64[_sdyCS::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdyCL::P64;
           P64[Hp - 24] = _sdyCP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdyCI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCS_info" {
     sat_sdyCS_info:
         const sat_sdyCS_entry;
         const 3;
         const 15;
 },
 sat_sdyCU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDA9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDAd; else goto cdDAc;
       cdDAd: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDAc: // global
           _sdyCE::P64 = P64[R1 + 7];
           _sdyCI::P64 = P64[R1 + 15];
           _sdyCL::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_sdyCS_info;
           P64[Hp - 40] = _sdyCI::P64;
           P64[Hp - 32] = _sdyCL::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdyCE::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyCU_info" {
     sat_sdyCU_info:
         const sat_sdyCU_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdyCX_entry() //  [R1]
         { []
         }
     {offset
       cdDAx: // global
           _sdyCX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDAy; else goto cdDAz;
       cdDAz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDAB; else goto cdDAA;
       cdDAB: // global
           HpAlloc = 24;
           goto cdDAy;
       cdDAy: // global
           R1 = _sdyCX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDAA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCX::P64;
           _sdyCL::P64 = P64[_sdyCX::P64 + 16];
           _sdyCV::P64 = P64[_sdyCX::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdyCV::P64;
           R2 = Hp - 14;
           R1 = _sdyCL::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCX_info" {
     sat_sdyCX_info:
         const sat_sdyCX_entry;
         const 2;
         const 18;
 },
 sat_sdyCZ_entry() //  [R1]
         { []
         }
     {offset
       cdDAD: // global
           _sdyCZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDAE; else goto cdDAF;
       cdDAF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDAH; else goto cdDAG;
       cdDAH: // global
           HpAlloc = 56;
           goto cdDAE;
       cdDAE: // global
           R1 = _sdyCZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDAG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyCZ::P64;
           _sdyCI::P64 = P64[_sdyCZ::P64 + 16];
           _sdyCL::P64 = P64[_sdyCZ::P64 + 24];
           _sdyCV::P64 = P64[_sdyCZ::P64 + 32];
           I64[Hp - 48] = sat_sdyCX_info;
           P64[Hp - 32] = _sdyCL::P64;
           P64[Hp - 24] = _sdyCV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdyCI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyCZ_info" {
     sat_sdyCZ_info:
         const sat_sdyCZ_entry;
         const 3;
         const 15;
 },
 sat_sdyD1_entry() //  [R1]
         { []
         }
     {offset
       cdDAJ: // global
           _sdyD1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDAK; else goto cdDAL;
       cdDAL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDAN; else goto cdDAM;
       cdDAN: // global
           HpAlloc = 64;
           goto cdDAK;
       cdDAK: // global
           R1 = _sdyD1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDAM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyD1::P64;
           _sdyCE::P64 = P64[_sdyD1::P64 + 16];
           _sdyCI::P64 = P64[_sdyD1::P64 + 24];
           _sdyCL::P64 = P64[_sdyD1::P64 + 32];
           _sdyCV::P64 = P64[_sdyD1::P64 + 40];
           I64[Hp - 56] = sat_sdyCZ_info;
           P64[Hp - 40] = _sdyCI::P64;
           P64[Hp - 32] = _sdyCL::P64;
           P64[Hp - 24] = _sdyCV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdyCE::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyD1_info" {
     sat_sdyD1_info:
         const sat_sdyD1_entry;
         const 4;
         const 15;
 },
 sat_sdyD2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDAP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdDAT; else goto cdDAS;
       cdDAT: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDAS: // global
           _sdyCE::P64 = P64[R1 + 7];
           _sdyCI::P64 = P64[R1 + 15];
           _sdyCL::P64 = P64[R1 + 23];
           I64[Hp - 64] = sat_sdyD1_info;
           P64[Hp - 48] = _sdyCE::P64;
           P64[Hp - 40] = _sdyCI::P64;
           P64[Hp - 32] = _sdyCL::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyD2_info" {
     sat_sdyD2_info:
         const sat_sdyD2_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsBinary1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdDAX: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdDB1; else goto cdDB0;
       cdDB1: // global
           HpAlloc = 112;
           R1 = Data.Functor.Classes.$wshowsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdDB0: // global
           I64[Hp - 104] = f1_sdyCI_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = P64[Sp];
           I64[Hp - 64] = g1_sdyCL_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = P64[Sp + 8];
           _cdDz5::P64 = Hp - 104;
           _cdDzs::P64 = Hp - 64;
           if (%MO_S_Le_W64(R6, 10)) goto cdDAV; else goto cdDAW;
       cdDAV: // global
           I64[Hp - 24] = sat_sdyCU_info;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = _cdDz5::P64;
           P64[Hp] = _cdDzs::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDAW: // global
           I64[Hp - 24] = sat_sdyD2_info;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = _cdDz5::P64;
           P64[Hp] = _cdDzs::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsBinary1_info" {
     Data.Functor.Classes.$wshowsBinary1_info:
         const Data.Functor.Classes.$wshowsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 1031;
         const Data.Functor.Classes.$wshowsBinary1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.872365509 UTC

[section ""data" . Data.Functor.Classes.showsBinary1_closure" {
     Data.Functor.Classes.showsBinary1_closure:
         const Data.Functor.Classes.showsBinary1_info;
 },
 Data.Functor.Classes.showsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdDC7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.showsBinary1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Classes.showsBinary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDCe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDCf; else goto cdDCg;
       cdDCf: // global
           R1 = Data.Functor.Classes.showsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdDCg: // global
           I64[Sp - 40] = block_cdDCb_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udDCk; else goto cdDCc;
       udDCk: // global
           call _cdDCb(R1) args: 0, res: 0, upd: 0;
       cdDCc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsBinary1_info" {
     Data.Functor.Classes.showsBinary1_info:
         const Data.Functor.Classes.showsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Classes.showsBinary1_slow;
 },
 _cdDCb() //  [R1]
         { []
         }
     {offset
       cdDCb: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinary1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDCb_info" {
     block_cdDCb_info:
         const _cdDCb;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.879915271 UTC

[section ""data" . Data.Functor.Classes.eq2_closure" {
     Data.Functor.Classes.eq2_closure:
         const Data.Functor.Classes.eq2_info;
 },
 sat_sdyDg_entry() //  [R1]
         { []
         }
     {offset
       cdDCE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDCF; else goto cdDCG;
       cdDCF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDCG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDg_info" {
     sat_sdyDg_info:
         const sat_sdyDg_entry;
         const 1;
         const 16;
 },
 sat_sdyDf_entry() //  [R1]
         { []
         }
     {offset
       cdDCL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDCM; else goto cdDCN;
       cdDCM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDCN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDf_info" {
     sat_sdyDf_info:
         const sat_sdyDf_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.eq2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDCO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDCS; else goto cdDCR;
       cdDCS: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.eq2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDCR: // global
           I64[Hp - 40] = sat_sdyDg_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sdyDf_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sdyDc::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdyDc::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.eq2_info" {
     Data.Functor.Classes.eq2_info:
         const Data.Functor.Classes.eq2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.887692228 UTC

[section ""data" . Data.Functor.Classes.compare2_closure" {
     Data.Functor.Classes.compare2_closure:
         const Data.Functor.Classes.compare2_info;
 },
 sat_sdyDl_entry() //  [R1]
         { []
         }
     {offset
       cdDDd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDDe; else goto cdDDf;
       cdDDe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDl_info" {
     sat_sdyDl_info:
         const sat_sdyDl_entry;
         const 1;
         const 16;
 },
 sat_sdyDk_entry() //  [R1]
         { []
         }
     {offset
       cdDDk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDDl; else goto cdDDm;
       cdDDl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDDm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDk_info" {
     sat_sdyDk_info:
         const sat_sdyDk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.compare2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDDn: // global
           _sdyDj::P64 = R4;
           _sdyDi::P64 = R3;
           _sdyDh::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdDDo; else goto cdDDp;
       cdDDp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDDr; else goto cdDDq;
       cdDDr: // global
           HpAlloc = 48;
           goto cdDDo;
       cdDDo: // global
           R4 = _sdyDj::P64;
           R3 = _sdyDi::P64;
           R2 = _sdyDh::P64;
           R1 = Data.Functor.Classes.compare2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDDq: // global
           I64[Hp - 40] = sat_sdyDl_info;
           P64[Hp - 24] = _sdyDj::P64;
           I64[Hp - 16] = sat_sdyDk_info;
           P64[Hp] = _sdyDi::P64;
           R2 = _sdyDh::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftCompare2_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.compare2_info" {
     Data.Functor.Classes.compare2_info:
         const Data.Functor.Classes.compare2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.896841839 UTC

[section ""data" . Data.Functor.Classes.readsPrec2_closure" {
     Data.Functor.Classes.readsPrec2_closure:
         const Data.Functor.Classes.readsPrec2_info;
 },
 sat_sdyDs_entry() //  [R1]
         { []
         }
     {offset
       cdDDP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDDQ; else goto cdDDR;
       cdDDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDDR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDs_info" {
     sat_sdyDs_info:
         const sat_sdyDs_entry;
         const 1;
         const 16;
 },
 sat_sdyDr_entry() //  [R1]
         { []
         }
     {offset
       cdDDW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDDX; else goto cdDDY;
       cdDDX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDDY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDr_info" {
     sat_sdyDr_info:
         const sat_sdyDr_entry;
         const 1;
         const 16;
 },
 sat_sdyDq_entry() //  [R1]
         { []
         }
     {offset
       cdDE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDE4; else goto cdDE5;
       cdDE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDE5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDq_info" {
     sat_sdyDq_info:
         const sat_sdyDq_entry;
         const 1;
         const 16;
 },
 sat_sdyDp_entry() //  [R1]
         { []
         }
     {offset
       cdDEa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDEb; else goto cdDEc;
       cdDEb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDEc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDp_info" {
     sat_sdyDp_info:
         const sat_sdyDp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDEd: // global
           _sdyDo::P64 = R4;
           _sdyDn::P64 = R3;
           _sdyDm::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDEe; else goto cdDEf;
       cdDEf: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdDEh; else goto cdDEg;
       cdDEh: // global
           HpAlloc = 96;
           goto cdDEe;
       cdDEe: // global
           R4 = _sdyDo::P64;
           R3 = _sdyDn::P64;
           R2 = _sdyDm::P64;
           R1 = Data.Functor.Classes.readsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDEg: // global
           I64[Hp - 88] = sat_sdyDs_info;
           P64[Hp - 72] = _sdyDo::P64;
           I64[Hp - 64] = sat_sdyDr_info;
           P64[Hp - 48] = _sdyDo::P64;
           I64[Hp - 40] = sat_sdyDq_info;
           P64[Hp - 24] = _sdyDn::P64;
           I64[Hp - 16] = sat_sdyDp_info;
           P64[Hp] = _sdyDn::P64;
           R2 = _sdyDm::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadsPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsPrec2_info" {
     Data.Functor.Classes.readsPrec2_info:
         const Data.Functor.Classes.readsPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.910205241 UTC

[section ""data" . Data.Functor.Classes.readPrec2_closure" {
     Data.Functor.Classes.readPrec2_closure:
         const Data.Functor.Classes.readPrec2_info;
 },
 sat_sdyDz_entry() //  [R1]
         { []
         }
     {offset
       cdDEP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDEQ; else goto cdDER;
       cdDEQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDz_info" {
     sat_sdyDz_info:
         const sat_sdyDz_entry;
         const 1;
         const 16;
 },
 sat_sdyDy_entry() //  [R1]
         { []
         }
     {offset
       cdDEW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDEX; else goto cdDEY;
       cdDEX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDEY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDy_info" {
     sat_sdyDy_info:
         const sat_sdyDy_entry;
         const 1;
         const 16;
 },
 sat_sdyDx_entry() //  [R1]
         { []
         }
     {offset
       cdDF3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDF4; else goto cdDF5;
       cdDF4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDF5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDx_info" {
     sat_sdyDx_info:
         const sat_sdyDx_entry;
         const 1;
         const 16;
 },
 sat_sdyDw_entry() //  [R1]
         { []
         }
     {offset
       cdDFa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDFb; else goto cdDFc;
       cdDFb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDFc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDw_info" {
     sat_sdyDw_info:
         const sat_sdyDw_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDFd: // global
           _sdyDv::P64 = R4;
           _sdyDu::P64 = R3;
           _sdyDt::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDFe; else goto cdDFf;
       cdDFf: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdDFh; else goto cdDFg;
       cdDFh: // global
           HpAlloc = 96;
           goto cdDFe;
       cdDFe: // global
           R4 = _sdyDv::P64;
           R3 = _sdyDu::P64;
           R2 = _sdyDt::P64;
           R1 = Data.Functor.Classes.readPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDFg: // global
           I64[Hp - 88] = sat_sdyDz_info;
           P64[Hp - 72] = _sdyDv::P64;
           I64[Hp - 64] = sat_sdyDy_info;
           P64[Hp - 48] = _sdyDv::P64;
           I64[Hp - 40] = sat_sdyDx_info;
           P64[Hp - 24] = _sdyDu::P64;
           I64[Hp - 16] = sat_sdyDw_info;
           P64[Hp] = _sdyDu::P64;
           R2 = _sdyDt::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readPrec2_info" {
     Data.Functor.Classes.readPrec2_info:
         const Data.Functor.Classes.readPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.923971136 UTC

[section ""data" . Data.Functor.Classes.liftReadList2Default_closure" {
     Data.Functor.Classes.liftReadList2Default_closure:
         const Data.Functor.Classes.liftReadList2Default_info;
 },
 sat_sdyDQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDFX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDFY; else goto cdDFZ;
       cdDFY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDFZ: // global
           I64[Sp - 8] = block_cdDFU_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyDQ_info" {
     sat_sdyDQ_info:
         const sat_sdyDQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDFU() //  [R1]
         { []
         }
     {offset
       cdDFU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDG2; else goto cdDG1;
       cdDG2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDG1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDFU_info" {
     block_cdDFU_info:
         const _cdDFU;
         const 0;
         const 30;
 },
 sat_sdyDL_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDG8: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyDL_info" {
     sat_sdyDL_info:
         const sat_sdyDL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyDK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDGj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDGk; else goto cdDGl;
       cdDGk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDGl: // global
           I64[Sp - 8] = block_cdDGg_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyDK_info" {
     sat_sdyDK_info:
         const sat_sdyDK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdDGg() //  [R1]
         { []
         }
     {offset
       cdDGg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDGo; else goto cdDGn;
       cdDGo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDGn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDGg_info" {
     block_cdDGg_info:
         const _cdDGg;
         const 0;
         const 30;
 },
 sat_sdyDF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDGu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyDF_info" {
     sat_sdyDF_info:
         const sat_sdyDF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyDR_entry() //  [R1]
         { []
         }
     {offset
       cdDGx: // global
           _sdyDR::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto cdDGy; else goto cdDGz;
       cdDGz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdDGB; else goto cdDGA;
       cdDGB: // global
           HpAlloc = 64;
           goto cdDGy;
       cdDGy: // global
           R1 = _sdyDR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDGA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyDR::P64;
           _sdyDA::P64 = P64[_sdyDR::P64 + 16];
           _sdyDB::P64 = P64[_sdyDR::P64 + 24];
           _sdyDC::P64 = P64[_sdyDR::P64 + 32];
           _sdyDD::P64 = P64[_sdyDR::P64 + 40];
           _sdyDE::P64 = P64[_sdyDR::P64 + 48];
           I64[Hp - 56] = sat_sdyDQ_info;
           P64[Hp - 48] = _sdyDE::P64;
           I64[Hp - 40] = sat_sdyDL_info;
           P64[Hp - 32] = _sdyDD::P64;
           I64[Hp - 24] = sat_sdyDK_info;
           P64[Hp - 16] = _sdyDC::P64;
           I64[Hp - 8] = sat_sdyDF_info;
           P64[Hp] = _sdyDB::P64;
           R2 = _sdyDA::P64;
           I64[Sp - 72] = stg_ap_pppppp_info;
           P64[Sp - 64] = Hp - 7;
           P64[Sp - 56] = Hp - 22;
           P64[Sp - 48] = Hp - 39;
           P64[Sp - 40] = Hp - 54;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 72;
           call Data.Functor.Classes.liftReadListPrec2_entry(R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyDR_info" {
     sat_sdyDR_info:
         const sat_sdyDR_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.liftReadList2Default_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cdDGC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDGG; else goto cdDGF;
       cdDGG: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList2Default_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDGF: // global
           I64[Hp - 48] = sat_sdyDR_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList2Default_info" {
     Data.Functor.Classes.liftReadList2Default_info:
         const Data.Functor.Classes.liftReadList2Default_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.940309921 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_closure" {
     Data.Functor.Classes.$fRead2Either_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1Either8_closure+6;
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadList2_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cdDHj: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2Either_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.945054659 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_closure" {
     Data.Functor.Classes.$fRead2Const_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1Const6_closure+6;
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadList2_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdDHv: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2Const_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.950541082 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_closure" {
     Data.Functor.Classes.$fRead2(,)_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1(,)2_closure+6;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadList2_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdDHH: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2(,)_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.95559266 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec2Default_closure" {
     Data.Functor.Classes.liftReadListPrec2Default_closure:
         const Data.Functor.Classes.liftReadListPrec2Default_info;
         const 0;
 },
 sat_sdyDX_entry() //  [R1]
         { []
         }
     {offset
       cdDHX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdDHY; else goto cdDHZ;
       cdDHY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDHZ: // global
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           P64[Sp - 16] = P64[R1 + 40];
           P64[Sp - 8] = P64[R1 + 48];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyDX_info" {
     sat_sdyDX_info:
         const sat_sdyDX_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.liftReadListPrec2Default_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cdDI0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDI4; else goto cdDI3;
       cdDI4: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec2Default_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDI3: // global
           I64[Hp - 48] = sat_sdyDX_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec2Default_info" {
     Data.Functor.Classes.liftReadListPrec2Default_info:
         const Data.Functor.Classes.liftReadListPrec2Default_entry;
         const 0;
         const 141733920782;
         const 21474836505;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.962218908 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)1_closure" {
     Data.Functor.Classes.$fRead1(,)1_closure:
         const Data.Functor.Classes.$fRead1(,)1_info;
         const 0;
 },
 sat_sdyE3_entry() //  [R1]
         { []
         }
     {offset
       cdDIp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDIq; else goto cdDIr;
       cdDIq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDIr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyE3_info" {
     sat_sdyE3_info:
         const sat_sdyE3_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1(,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDIs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDIw; else goto cdDIv;
       cdDIw: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDIv: // global
           I64[Hp - 16] = sat_sdyE3_info;
           P64[Hp] = R2;
           _sdyE1::P64 = R5;
           R5 = R6;
           R4 = _sdyE1::P64;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)1_info" {
     Data.Functor.Classes.$fRead1(,)1_info:
         const Data.Functor.Classes.$fRead1(,)1_entry;
         const 0;
         const 4503603922337806;
         const 21474836505;
         const SdyRV_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.969044692 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec_info;
         const 0;
 },
 sat_sdyE8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDIS: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyE8_info" {
     sat_sdyE8_info:
         const sat_sdyE8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyE7_entry() //  [R1]
         { []
         }
     {offset
       cdDIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDJ0; else goto cdDJ1;
       cdDJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDJ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyE7_info" {
     sat_sdyE7_info:
         const sat_sdyE7_entry;
         const 1;
         const 16;
 },
 sat_sdyE9_entry() //  [R1]
         { []
         }
     {offset
       cdDJ2: // global
           _sdyE9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDJ3; else goto cdDJ4;
       cdDJ4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDJ6; else goto cdDJ5;
       cdDJ6: // global
           HpAlloc = 40;
           goto cdDJ3;
       cdDJ3: // global
           R1 = _sdyE9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDJ5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyE9::P64;
           _sdyE4::P64 = P64[_sdyE9::P64 + 16];
           _sdyE5::P64 = P64[_sdyE9::P64 + 24];
           _sdyE6::P64 = P64[_sdyE9::P64 + 32];
           I64[Hp - 32] = sat_sdyE8_info;
           P64[Hp - 24] = _sdyE5::P64;
           I64[Hp - 16] = sat_sdyE7_info;
           P64[Hp] = _sdyE4::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdyE6::P64;
           R3 = Hp - 31;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyE9_info" {
     sat_sdyE9_info:
         const sat_sdyE9_entry;
         const 3;
         const 4294967311;
         const SdyRV_srt+192;
 },
 Data.Functor.Classes.$w$cliftReadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDJ7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDJb; else goto cdDJa;
       cdDJb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDJa: // global
           I64[Hp - 32] = sat_sdyE9_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec_info" {
     Data.Functor.Classes.$w$cliftReadsPrec_info:
         const Data.Functor.Classes.$w$cliftReadsPrec_entry;
         const 0;
         const 9007203549708302;
         const 12884901911;
         const SdyRV_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.978257689 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_entry() //  [R2,
                                                              R3, R5]
         { []
         }
     {offset
       cdDJv: // global
           R4 = R5;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.982552943 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdyEh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDJL: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$fRead1(,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEh_info" {
     sat_sdyEh_info:
         const sat_sdyEh_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SdyRV_srt+352;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdDJO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDJS; else goto cdDJR;
       cdDJS: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDJR: // global
           I64[Hp - 24] = sat_sdyEh_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry;
         const 0;
         const 1378684502030;
         const 12884901911;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:45.990692623 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_closure" {
     Data.Functor.Classes.$fRead1(,)_closure:
         const Data.Functor.Classes.$fRead1(,)_info;
         const 0;
 },
 sat_sdyEp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDK9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEp_info" {
     sat_sdyEp_info:
         const sat_sdyEp_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+368;
 },
 sat_sdyEo_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdDKh: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1(,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEo_info" {
     sat_sdyEo_info:
         const sat_sdyEo_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+352;
 },
 sat_sdyEn_entry() //  [R1]
         { []
         }
     {offset
       cdDKo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDKp; else goto cdDKq;
       cdDKp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDKq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEn_info" {
     sat_sdyEn_info:
         const sat_sdyEn_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+376;
 },
 sat_sdyEm_entry() //  [R1, R2, R4]
         { []
         }
     {offset
       cdDKw: // global
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEm_info" {
     sat_sdyEm_info:
         const sat_sdyEm_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdyRV_srt+360;
 },
 Data.Functor.Classes.$fRead1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdDKA: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdDKE; else goto cdDKD;
       cdDKE: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDKD: // global
           I64[Hp - 104] = sat_sdyEp_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sdyEo_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdyEn_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdyEm_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_info" {
     Data.Functor.Classes.$fRead1(,)_info:
         const Data.Functor.Classes.$fRead1(,)_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SdyRV_srt+352;
 },
 section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_info;
         const 0;
 },
 sat_sdyEr_entry() //  [R1]
         { []
         }
     {offset
       cdDKN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDKO; else goto cdDKP;
       cdDKO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDKP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1(,)_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEr_info" {
     sat_sdyEr_info:
         const sat_sdyEr_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+384;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdDKQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDKU; else goto cdDKT;
       cdDKU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDKT: // global
           I64[Hp - 16] = sat_sdyEr_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdyRV_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.008252941 UTC

[section ""data" . Data.Functor.Classes.showsPrec2_closure" {
     Data.Functor.Classes.showsPrec2_closure:
         const Data.Functor.Classes.showsPrec2_info;
 },
 sat_sdyEy_entry() //  [R1]
         { []
         }
     {offset
       cdDLx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDLy; else goto cdDLz;
       cdDLy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEy_info" {
     sat_sdyEy_info:
         const sat_sdyEy_entry;
         const 1;
         const 16;
 },
 sat_sdyEx_entry() //  [R1]
         { []
         }
     {offset
       cdDLE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDLF; else goto cdDLG;
       cdDLF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDLG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEx_info" {
     sat_sdyEx_info:
         const sat_sdyEx_entry;
         const 1;
         const 16;
 },
 sat_sdyEw_entry() //  [R1]
         { []
         }
     {offset
       cdDLL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDLM; else goto cdDLN;
       cdDLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDLN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEw_info" {
     sat_sdyEw_info:
         const sat_sdyEw_entry;
         const 1;
         const 16;
 },
 sat_sdyEv_entry() //  [R1]
         { []
         }
     {offset
       cdDLS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDLT; else goto cdDLU;
       cdDLT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDLU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyEv_info" {
     sat_sdyEv_info:
         const sat_sdyEv_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.showsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDLV: // global
           _sdyEu::P64 = R4;
           _sdyEt::P64 = R3;
           _sdyEs::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdDLW; else goto cdDLX;
       cdDLX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdDLZ; else goto cdDLY;
       cdDLZ: // global
           HpAlloc = 96;
           goto cdDLW;
       cdDLW: // global
           R4 = _sdyEu::P64;
           R3 = _sdyEt::P64;
           R2 = _sdyEs::P64;
           R1 = Data.Functor.Classes.showsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDLY: // global
           I64[Hp - 88] = sat_sdyEy_info;
           P64[Hp - 72] = _sdyEu::P64;
           I64[Hp - 64] = sat_sdyEx_info;
           P64[Hp - 48] = _sdyEu::P64;
           I64[Hp - 40] = sat_sdyEw_info;
           P64[Hp - 24] = _sdyEt::P64;
           I64[Hp - 16] = sat_sdyEv_info;
           P64[Hp] = _sdyEt::P64;
           R2 = _sdyEs::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsPrec2_info" {
     Data.Functor.Classes.showsPrec2_info:
         const Data.Functor.Classes.showsPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.022347363 UTC

[section ""data" . Data.Functor.Classes.$wreadsData_closure" {
     Data.Functor.Classes.$wreadsData_closure:
         const Data.Functor.Classes.$wreadsData_info;
         const 0;
 },
 sat_sdyEL_entry() //  [R1]
         { []
         }
     {offset
       cdDMN: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_sdyEC_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEL_info" {
     sat_sdyEL_info:
         const sat_sdyEL_entry;
         const 2;
         const 18;
 },
 go_sdyEC_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDMU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDMV; else goto cdDMW;
       cdDMV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDMW: // global
           I64[Sp - 24] = block_cdDMy_info;
           _sdyEC::P64 = R1;
           _sdyEz::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdyEz::P64;
           P64[Sp - 8] = _sdyEC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udDN9; else goto cdDMz;
       udDN9: // global
           call _cdDMy(R1) args: 0, res: 0, upd: 0;
       cdDMz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyEC_info" {
     go_sdyEC_info:
         const go_sdyEC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDMy() //  [R1]
         { []
         }
     {offset
       cdDMy: // global
           if (R1 & 7 == 1) goto cdDMR; else goto cdDMS;
       cdDMR: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDMS: // global
           I64[Sp - 8] = block_cdDME_info;
           _sdyEG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyEG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udDN8; else goto cdDMF;
       udDN8: // global
           call _cdDME(R1) args: 0, res: 0, upd: 0;
       cdDMF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDMy_info" {
     block_cdDMy_info:
         const _cdDMy;
         const 2;
         const 30;
 },
 _cdDME() //  [R1]
         { []
         }
     {offset
       cdDME: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDN3; else goto cdDN2;
       cdDN3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDN2: // global
           _sdyEI::P64 = P64[R1 + 7];
           _sdyEJ::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdyEL_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           _sdyEz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdDMZ_info;
           R3 = _sdyEJ::P64;
           R2 = _sdyEI::P64;
           R1 = _sdyEz::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDME_info" {
     block_cdDME_info:
         const _cdDME;
         const 3;
         const 30;
 },
 _cdDMZ() //  [R1]
         { []
         }
     {offset
       cdDMZ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDMZ_info" {
     block_cdDMZ_info:
         const _cdDMZ;
         const 1;
         const 30;
 },
 sat_sdyEQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDNh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDNi; else goto cdDNj;
       cdDNi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDNj: // global
           I64[Sp - 16] = block_cdDNf_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyEQ_info" {
     sat_sdyEQ_info:
         const sat_sdyEQ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdyRV_srt+392;
 },
 _cdDNf() //  [R1]
         { []
         }
     {offset
       cdDNf: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyEC_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDNf_info" {
     block_cdDNf_info:
         const _cdDNf;
         const 1;
         const 30;
 },
 section ""relreadonly" . udDNu_srtd" {
     udDNu_srtd:
         const SdyRV_srt+120;
         const 36;
         const 51539607553;
 },
 Data.Functor.Classes.$wreadsData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDNp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDNt; else goto cdDNs;
       cdDNt: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadsData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDNs: // global
           I64[Hp - 24] = go_sdyEC_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyEQ_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _sdyEN::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _sdyEN::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadsData_info" {
     Data.Functor.Classes.$wreadsData_info:
         const Data.Functor.Classes.$wreadsData_entry;
         const 0;
         const 18446744069414584334;
         const 12884901909;
         const udDNu_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.040269806 UTC

[section ""data" . Data.Functor.Classes.readsData_closure" {
     Data.Functor.Classes.readsData_closure:
         const Data.Functor.Classes.readsData_info;
         const 0;
 },
 Data.Functor.Classes.readsData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDOg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdDOh; else goto cdDOi;
       cdDOh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDOi: // global
           I64[Sp - 24] = block_cdDOd_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udDOm; else goto cdDOe;
       udDOm: // global
           call _cdDOd(R1) args: 0, res: 0, upd: 0;
       cdDOe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsData_info" {
     Data.Functor.Classes.readsData_info:
         const Data.Functor.Classes.readsData_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdyRV_srt+400;
 },
 _cdDOd() //  [R1]
         { []
         }
     {offset
       cdDOd: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wreadsData_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDOd_info" {
     block_cdDOd_info:
         const _cdDOd;
         const 2;
         const 4294967326;
         const SdyRV_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.045639504 UTC

[section ""data" . Data.Functor.Classes.readData2_closure" {
     Data.Functor.Classes.readData2_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.049188451 UTC

[section ""data" . Data.Functor.Classes.readData1_closure" {
     Data.Functor.Classes.readData1_closure:
         const Data.Functor.Classes.readData1_info;
         const 0;
 },
 lvl3_sdyEZ_entry() //  [R1]
         { []
         }
     {offset
       cdDOF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDOG; else goto cdDOH;
       cdDOG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDOH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.readData2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyEZ_info" {
     lvl3_sdyEZ_info:
         const lvl3_sdyEZ_entry;
         const 1;
         const 16;
 },
 sat_sdyF4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDOQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDOR; else goto cdDOS;
       cdDOR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDOS: // global
           I64[Sp - 16] = block_cdDON_info;
           _sdyEZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sdyEZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udDP1; else goto cdDOO;
       udDP1: // global
           call _cdDON(R1) args: 0, res: 0, upd: 0;
       cdDOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyF4_info" {
     sat_sdyF4_info:
         const sat_sdyF4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDON() //  [R1]
         { []
         }
     {offset
       cdDON: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdDOZ; else goto cdDP0;
       cdDOZ: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDP0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDON_info" {
     block_cdDON_info:
         const _cdDON;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readData1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDP2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDP6; else goto cdDP5;
       cdDP6: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readData1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDP5: // global
           I64[Hp - 32] = lvl3_sdyEZ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyF4_info;
           P64[Hp] = Hp - 32;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readData1_info" {
     Data.Functor.Classes.readData1_info:
         const Data.Functor.Classes.readData1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdyRV_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.058521916 UTC

[section ""data" . Data.Functor.Classes.readData_closure" {
     Data.Functor.Classes.readData_closure:
         const Data.Functor.Classes.readData_info;
         const 0;
 },
 Data.Functor.Classes.readData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDPt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readData1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readData_info" {
     Data.Functor.Classes.readData_info:
         const Data.Functor.Classes.readData_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.064498477 UTC

[section ""data" . Data.Functor.Classes.readsUnaryWith_closure" {
     Data.Functor.Classes.readsUnaryWith_closure:
         const Data.Functor.Classes.readsUnaryWith_info;
 },
 go_sdyFb_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDPV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDPW; else goto cdDPX;
       cdDPW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDPX: // global
           I64[Sp - 24] = block_cdDPO_info;
           _sdyFb::P64 = R1;
           _sdyF7::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdyF7::P64;
           P64[Sp - 8] = _sdyFb::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udDQh; else goto cdDPP;
       udDQh: // global
           call _cdDPO(R1) args: 0, res: 0, upd: 0;
       cdDPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyFb_info" {
     go_sdyFb_info:
         const go_sdyFb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdDPO() //  [R1]
         { []
         }
     {offset
       cdDPO: // global
           if (R1 & 7 == 1) goto cdDPS; else goto cdDPT;
       cdDPS: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDPT: // global
           I64[Sp - 8] = block_cdDQ3_info;
           _sdyFf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyFf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udDQg; else goto cdDQ4;
       udDQg: // global
           call _cdDQ3(R1) args: 0, res: 0, upd: 0;
       cdDQ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDPO_info" {
     block_cdDPO_info:
         const _cdDPO;
         const 2;
         const 30;
 },
 _cdDQ3() //  [R1]
         { []
         }
     {offset
       cdDQ3: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdDQf; else goto cdDQe;
       cdDQf: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDQe: // global
           _sdyFh::P64 = P64[R1 + 7];
           _sdyFi::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdyFh::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdyFi::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDQ3_info" {
     block_cdDQ3_info:
         const _cdDQ3;
         const 3;
         const 30;
 },
 Data.Functor.Classes.readsUnaryWith_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdDQm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdDQn; else goto cdDQo;
       cdDQn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDQo: // global
           I64[Sp - 32] = block_cdDPE_info;
           R3 = R3;
           _sdyF5::P64 = R2;
           R2 = R5;
           P64[Sp - 24] = _sdyF5::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnaryWith_info" {
     Data.Functor.Classes.readsUnaryWith_info:
         const Data.Functor.Classes.readsUnaryWith_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdDPE() //  [R1]
         { []
         }
     {offset
       cdDPE: // global
           if (R1 & 7 == 1) goto cdDQj; else goto cdDQk;
       cdDQj: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdDQk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDQu; else goto cdDQt;
       cdDQu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDQt: // global
           I64[Hp - 8] = go_sdyFb_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdDQr_info;
           R3 = P64[Sp + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDPE_info" {
     block_cdDPE_info:
         const _cdDPE;
         const 3;
         const 30;
 },
 _cdDQr() //  [R1]
         { []
         }
     {offset
       cdDQr: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyFb_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDQr_info" {
     block_cdDQr_info:
         const _cdDQr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.080119253 UTC

[section ""data" . Data.Functor.Classes.$wreadUnaryWith_closure" {
     Data.Functor.Classes.$wreadUnaryWith_closure:
         const Data.Functor.Classes.$wreadUnaryWith_info;
         const 0;
 },
 sat_sdyFA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDRq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDRu; else goto cdDRt;
       cdDRu: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDRt: // global
           _sdyFp::P64 = P64[R1 + 7];
           _sdyFr::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdyFp::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdyFr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyFA_info" {
     sat_sdyFA_info:
         const sat_sdyFA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyFx_entry() //  [R1]
         { []
         }
     {offset
       cdDRC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdDRJ; else goto cdDRK;
       cdDRJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDRK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdDRz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udDRO; else goto cdDRA;
       udDRO: // global
           call _cdDRz(R1) args: 0, res: 0, upd: 0;
       cdDRA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyFx_info" {
     sat_sdyFx_info:
         const sat_sdyFx_entry;
         const 1;
         const 16;
 },
 _cdDRz() //  [R1]
         { []
         }
     {offset
       cdDRz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDRN; else goto cdDRM;
       cdDRN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdDRM: // global
           _sdyFw::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdyFw::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdDRz_info" {
     block_cdDRz_info:
         const _cdDRz;
         const 0;
         const 30;
 },
 sat_sdyFB_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDRP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDRT; else goto cdDRS;
       cdDRT: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDRS: // global
           _sdyFn::P64 = P64[R1 + 7];
           _sdyFp::P64 = P64[R1 + 15];
           _sdyFq::P64 = P64[R1 + 23];
           _sdyFr::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_sdyFA_info;
           P64[Hp - 32] = _sdyFp::P64;
           P64[Hp - 24] = _sdyFr::P64;
           I64[Hp - 16] = sat_sdyFx_info;
           P64[Hp] = _sdyFq::P64;
           R3 = Hp - 39;
           R2 = Hp - 16;
           R1 = _sdyFn::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyFB_info" {
     sat_sdyFB_info:
         const sat_sdyFB_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wreadUnaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdDRV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdDRZ; else goto cdDRY;
       cdDRZ: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadUnaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDRY: // global
           I64[Hp - 48] = sat_sdyFB_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R3;
           R3 = Hp - 47;
           R2 = Hp - 4;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadUnaryWith_info" {
     Data.Functor.Classes.$wreadUnaryWith_info:
         const Data.Functor.Classes.$wreadUnaryWith_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdyRV_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.091337268 UTC

[section ""data" . Data.Functor.Classes.readUnaryWith1_closure" {
     Data.Functor.Classes.readUnaryWith1_closure:
         const Data.Functor.Classes.readUnaryWith1_info;
         const 0;
 },
 Data.Functor.Classes.readUnaryWith1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdDSr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdDSs; else goto cdDSt;
       cdDSs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readUnaryWith1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDSt: // global
           I64[Sp - 8] = block_cdDSo_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Functor.Classes.$wreadUnaryWith_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readUnaryWith1_info" {
     Data.Functor.Classes.readUnaryWith1_info:
         const Data.Functor.Classes.readUnaryWith1_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const SdyRV_srt+432;
 },
 _cdDSo() //  [R1]
         { []
         }
     {offset
       cdDSo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdDSw; else goto cdDSv;
       cdDSw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdDSv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdDSo_info" {
     block_cdDSo_info:
         const _cdDSo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.097175751 UTC

[section ""data" . Data.Functor.Classes.readUnaryWith_closure" {
     Data.Functor.Classes.readUnaryWith_closure:
         const Data.Functor.Classes.readUnaryWith_info;
         const 0;
 },
 Data.Functor.Classes.readUnaryWith_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDSK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readUnaryWith1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readUnaryWith_info" {
     Data.Functor.Classes.readUnaryWith_info:
         const Data.Functor.Classes.readUnaryWith_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.101352417 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const5_closure" {
     Data.Functor.Classes.$fRead1Const5_closure:
         const Data.Functor.Classes.$fRead1Const5_info;
         const 0;
 },
 sat_sdyFO_entry() //  [R1]
         { []
         }
     {offset
       cdDSZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDT0; else goto cdDT1;
       cdDT0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDT1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyFO_info" {
     sat_sdyFO_info:
         const sat_sdyFO_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1Const5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdDT2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDT6; else goto cdDT5;
       cdDT6: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDT5: // global
           I64[Hp - 16] = sat_sdyFO_info;
           P64[Hp] = R2;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const5_info" {
     Data.Functor.Classes.$fRead1Const5_info:
         const Data.Functor.Classes.$fRead1Const5_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdyRV_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.108562454 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec1_info;
         const 0;
 },
 sat_sdyFR_entry() //  [R1]
         { []
         }
     {offset
       cdDTr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDTs; else goto cdDTt;
       cdDTs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDTt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyFR_info" {
     sat_sdyFR_info:
         const sat_sdyFR_entry;
         const 1;
         const 16;
 },
 sat_sdyFS_entry() //  [R1]
         { []
         }
     {offset
       cdDTu: // global
           _sdyFS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDTv; else goto cdDTw;
       cdDTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDTy; else goto cdDTx;
       cdDTy: // global
           HpAlloc = 24;
           goto cdDTv;
       cdDTv: // global
           R1 = _sdyFS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyFS::P64;
           _sdyFP::P64 = P64[_sdyFS::P64 + 16];
           _sdyFQ::P64 = P64[_sdyFS::P64 + 24];
           I64[Hp - 16] = sat_sdyFR_info;
           P64[Hp] = _sdyFP::P64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdyFQ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyFS_info" {
     sat_sdyFS_info:
         const sat_sdyFS_entry;
         const 2;
         const 4294967314;
         const SdyRV_srt+464;
 },
 Data.Functor.Classes.$w$cliftReadsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDTz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdDTD; else goto cdDTC;
       cdDTD: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDTC: // global
           I64[Hp - 24] = sat_sdyFS_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec1_info" {
     Data.Functor.Classes.$w$cliftReadsPrec1_info:
         const Data.Functor.Classes.$w$cliftReadsPrec1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdyRV_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.116261134 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_entry() //  [R2,
                                                                R5]
         { []
         }
     {offset
       cdDTU: // global
           R3 = R5;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.120508999 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec_info;
         const 0;
 },
 w1_sdyFY_entry() //  [R1]
         { []
         }
     {offset
       cdDU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDUa; else goto cdDUb;
       cdDUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDUb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdyFY_info" {
     w1_sdyFY_info:
         const w1_sdyFY_entry;
         const 1;
         const 16;
 },
 sat_sdyG1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDUh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyG1_info" {
     sat_sdyG1_info:
         const sat_sdyG1_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+464;
 },
 Data.Functor.Classes.$w$cliftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdDUk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDUo; else goto cdDUn;
       cdDUo: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDUn: // global
           I64[Hp - 32] = w1_sdyFY_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyG1_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec_info" {
     Data.Functor.Classes.$w$cliftReadListPrec_info:
         const Data.Functor.Classes.$w$cliftReadListPrec_entry;
         const 0;
         const 22518002431819790;
         const 4294967301;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.127083188 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdDUF: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.133533428 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_closure" {
     Data.Functor.Classes.$fRead1Const_closure:
         const Data.Functor.Classes.$fRead1Const_info;
         const 0;
 },
 lvl3_sdyG6_entry() //  [R1]
         { []
         }
     {offset
       cdDUU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDUV; else goto cdDUW;
       cdDUV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDUW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyG6_info" {
     lvl3_sdyG6_info:
         const lvl3_sdyG6_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+480;
 },
 sat_sdyGf_entry() //  [R1]
         { []
         }
     {offset
       cdDV2: // global
           R1 = P64[R1 + 6];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGf_info" {
     sat_sdyGf_info:
         const sat_sdyGf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdyGc_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdDVa: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1Const5_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGc_info" {
     sat_sdyGc_info:
         const sat_sdyGc_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+456;
 },
 sat_sdyGb_entry() //  [R1]
         { []
         }
     {offset
       cdDVh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDVi; else goto cdDVj;
       cdDVi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDVj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Const_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGb_info" {
     sat_sdyGb_info:
         const sat_sdyGb_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+488;
 },
 sat_sdyGa_entry() //  [R1, R4]
         { []
         }
     {offset
       cdDVp: // global
           R3 = R4;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGa_info" {
     sat_sdyGa_info:
         const sat_sdyGa_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdyRV_srt+472;
 },
 Data.Functor.Classes.$fRead1Const_entry() //  [R2]
         { []
         }
     {offset
       cdDVt: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdDVx; else goto cdDVw;
       cdDVx: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDVw: // global
           I64[Hp - 128] = lvl3_sdyG6_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sdyGf_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_sdyGc_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdyGb_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdyGa_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_info" {
     Data.Functor.Classes.$fRead1Const_info:
         const Data.Functor.Classes.$fRead1Const_entry;
         const 0;
         const 261993005070;
         const 4294967301;
         const SdyRV_srt+456;
 },
 section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_info;
         const 0;
 },
 sat_sdyGh_entry() //  [R1]
         { []
         }
     {offset
       cdDVG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDVH; else goto cdDVI;
       cdDVH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDVI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Const_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGh_info" {
     sat_sdyGh_info:
         const sat_sdyGh_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+496;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdDVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDVN; else goto cdDVM;
       cdDVN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDVM: // global
           I64[Hp - 16] = sat_sdyGh_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdyRV_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.15041202 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either7_closure" {
     Data.Functor.Classes.$fRead1Either7_closure:
         const Data.Functor.Classes.$fRead1Either7_info;
         const 0;
 },
 sat_sdyGn_entry() //  [R1]
         { []
         }
     {offset
       cdDWv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDWw; else goto cdDWx;
       cdDWw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDWx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGn_info" {
     sat_sdyGn_info:
         const sat_sdyGn_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1Either7_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdDWy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDWC; else goto cdDWB;
       cdDWC: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either7_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDWB: // global
           I64[Hp - 16] = sat_sdyGn_info;
           P64[Hp] = R2;
           _sdyGl::P64 = R5;
           R5 = R6;
           R4 = _sdyGl::P64;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either7_info" {
     Data.Functor.Classes.$fRead1Either7_info:
         const Data.Functor.Classes.$fRead1Either7_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdyRV_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.157129148 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec2_info;
         const 0;
 },
 sat_sdyGs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDWY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGs_info" {
     sat_sdyGs_info:
         const sat_sdyGs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyGr_entry() //  [R1]
         { []
         }
     {offset
       cdDX5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDX6; else goto cdDX7;
       cdDX6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDX7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGr_info" {
     sat_sdyGr_info:
         const sat_sdyGr_entry;
         const 1;
         const 16;
 },
 sat_sdyGt_entry() //  [R1]
         { []
         }
     {offset
       cdDX8: // global
           _sdyGt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdDX9; else goto cdDXa;
       cdDXa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDXc; else goto cdDXb;
       cdDXc: // global
           HpAlloc = 40;
           goto cdDX9;
       cdDX9: // global
           R1 = _sdyGt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDXb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyGt::P64;
           _sdyGo::P64 = P64[_sdyGt::P64 + 16];
           _sdyGp::P64 = P64[_sdyGt::P64 + 24];
           _sdyGq::P64 = P64[_sdyGt::P64 + 32];
           I64[Hp - 32] = sat_sdyGs_info;
           P64[Hp - 24] = _sdyGp::P64;
           I64[Hp - 16] = sat_sdyGr_info;
           P64[Hp] = _sdyGo::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdyGq::P64;
           R3 = Hp - 31;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGt_info" {
     sat_sdyGt_info:
         const sat_sdyGt_entry;
         const 3;
         const 4294967311;
         const SdyRV_srt+512;
 },
 Data.Functor.Classes.$w$cliftReadsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdDXd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdDXh; else goto cdDXg;
       cdDXh: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDXg: // global
           I64[Hp - 32] = sat_sdyGt_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec2_info" {
     Data.Functor.Classes.$w$cliftReadsPrec2_info:
         const Data.Functor.Classes.$w$cliftReadsPrec2_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdyRV_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.16601003 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_entry() //  [R2,
                                                                 R3, R5]
         { []
         }
     {offset
       cdDXB: // global
           R4 = R5;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.170387727 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec1_info;
         const 0;
 },
 w2_sdyGA_entry() //  [R1]
         { []
         }
     {offset
       cdDXQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDXR; else goto cdDXS;
       cdDXR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDXS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_sdyGA_info" {
     w2_sdyGA_info:
         const w2_sdyGA_entry;
         const 1;
         const 16;
 },
 sat_sdyGD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdDXY: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 6];
           R2 = P64[R1 + 14];
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGD_info" {
     sat_sdyGD_info:
         const sat_sdyGD_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdyRV_srt+512;
 },
 Data.Functor.Classes.$w$cliftReadListPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdDY1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdDY5; else goto cdDY4;
       cdDY5: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdDY4: // global
           I64[Hp - 40] = w2_sdyGA_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdyGD_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec1_info" {
     Data.Functor.Classes.$w$cliftReadListPrec1_info:
         const Data.Functor.Classes.$w$cliftReadListPrec1_entry;
         const 0;
         const 1441151885053526030;
         const 8589934607;
         const SdyRV_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.177871307 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cdDYm: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.184337831 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_closure" {
     Data.Functor.Classes.$fRead1Either_closure:
         const Data.Functor.Classes.$fRead1Either_info;
         const 0;
 },
 sat_sdyGQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdDYC: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadListPrec1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGQ_info" {
     sat_sdyGQ_info:
         const sat_sdyGQ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+528;
 },
 sat_sdyGN_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdDYK: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1Either7_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGN_info" {
     sat_sdyGN_info:
         const sat_sdyGN_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+504;
 },
 sat_sdyGM_entry() //  [R1]
         { []
         }
     {offset
       cdDYR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDYS; else goto cdDYT;
       cdDYS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDYT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Either_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGM_info" {
     sat_sdyGM_info:
         const sat_sdyGM_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+536;
 },
 sat_sdyGL_entry() //  [R1, R2, R4]
         { []
         }
     {offset
       cdDYZ: // global
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyGL_info" {
     sat_sdyGL_info:
         const sat_sdyGL_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdyRV_srt+520;
 },
 Data.Functor.Classes.$fRead1Either_entry() //  [R2]
         { []
         }
     {offset
       cdDZ3: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdDZ7; else goto cdDZ6;
       cdDZ7: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDZ6: // global
           I64[Hp - 104] = sat_sdyGQ_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sdyGN_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdyGM_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdyGL_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_info" {
     Data.Functor.Classes.$fRead1Either_info:
         const Data.Functor.Classes.$fRead1Either_entry;
         const 0;
         const 261993005070;
         const 4294967301;
         const SdyRV_srt+504;
 },
 section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_info;
         const 0;
 },
 sat_sdyGS_entry() //  [R1]
         { []
         }
     {offset
       cdDZg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdDZh; else goto cdDZi;
       cdDZh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdDZi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Either_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyGS_info" {
     sat_sdyGS_info:
         const sat_sdyGS_entry;
         const 1;
         const 4294967312;
         const SdyRV_srt+544;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdDZj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdDZn; else goto cdDZm;
       cdDZn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdDZm: // global
           I64[Hp - 16] = sat_sdyGS_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdyRV_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.198090374 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Identity4_bytes" {
     Data.Functor.Classes.$fRead1Identity4_bytes:
         I8[] [73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.200478285 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity3_closure" {
     Data.Functor.Classes.$fRead1Identity3_closure:
         const Data.Functor.Classes.$fRead1Identity3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity3_entry() //  [R1]
         { []
         }
     {offset
       cdDZZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdE00; else goto cdE01;
       cdE00: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE01: // global
           (_cdDZW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdDZW::I64 == 0) goto cdDZY; else goto cdDZX;
       cdDZY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdDZX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdDZW::I64;
           R2 = Data.Functor.Classes.$fRead1Identity4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity3_info" {
     Data.Functor.Classes.$fRead1Identity3_info:
         const Data.Functor.Classes.$fRead1Identity3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.204158275 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity2_closure" {
     Data.Functor.Classes.$fRead1Identity2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Identity3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.209105362 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec_closure" {
     Data.Functor.Classes.$w$cliftReadPrec_closure:
         const Data.Functor.Classes.$w$cliftReadPrec_info;
         const 0;
 },
 sat_sdyH3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE0C: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyH3_info" {
     sat_sdyH3_info:
         const sat_sdyH3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyH4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE0F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE0J; else goto cdE0I;
       cdE0J: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdE0I: // global
           _sdyGT::P64 = P64[R1 + 7];
           _sdyGX::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdyH3_info;
           P64[Hp] = _sdyGX::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdyGT::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyH4_info" {
     sat_sdyH4_info:
         const sat_sdyH4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyH7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE0K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdE0L; else goto cdE0M;
       cdE0L: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE0M: // global
           I64[Sp - 24] = block_cdE0j_info;
           _sdyGT::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdyGT::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udE0Z; else goto cdE0k;
       udE0Z: // global
           call _cdE0j(R1) args: 0, res: 0, upd: 0;
       cdE0k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyH7_info" {
     sat_sdyH7_info:
         const sat_sdyH7_entry;
         const 1;
         const 70373039144969;
         const 8589934607;
         const SdyRV_srt+440;
 },
 _cdE0j() //  [R1]
         { []
         }
     {offset
       cdE0j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdE0P; else goto cdE0O;
       cdE0P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE0O: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdE0R; else goto cdE0V;
       cdE0R: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdE0V: // global
           I64[Hp - 16] = sat_sdyH4_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdE0S_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Identity2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE0j_info" {
     block_cdE0j_info:
         const _cdE0j;
         const 2;
         const 70373039144990;
         const SdyRV_srt+440;
 },
 _cdE0S() //  [R1]
         { []
         }
     {offset
       cdE0S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE0Y; else goto cdE0X;
       cdE0Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE0X: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE0S_info" {
     block_cdE0S_info:
         const _cdE0S;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdE10: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE14; else goto cdE13;
       cdE14: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE13: // global
           I64[Hp - 8] = sat_sdyH7_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec_info" {
     Data.Functor.Classes.$w$cliftReadPrec_info:
         const Data.Functor.Classes.$w$cliftReadPrec_entry;
         const 0;
         const 844446404968462;
         const 12884901911;
         const SdyRV_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.222423465 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity1_closure" {
     Data.Functor.Classes.$fRead1Identity1_closure:
         const Data.Functor.Classes.$fRead1Identity1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity1_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdE1y: // global
           _sdyHa::P64 = R4;
           R4 = R5;
           R3 = _sdyHa::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity1_info" {
     Data.Functor.Classes.$fRead1Identity1_info:
         const Data.Functor.Classes.$fRead1Identity1_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.229622138 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec3_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec3_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec3_info;
         const 0;
 },
 lvl3_sdyHe_entry() //  [R1]
         { []
         }
     {offset
       cdE1R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdE1S; else goto cdE1T;
       cdE1S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE1T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyHe_info" {
     lvl3_sdyHe_info:
         const lvl3_sdyHe_entry;
         const 1;
         const 16;
 },
 sat_sdyHm_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE2i: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHm_info" {
     sat_sdyHm_info:
         const sat_sdyHm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyHp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE2o: // global
           _sdyHk::P64 = R2;
           _sdyHp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdE2p; else goto cdE2q;
       cdE2q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE2s; else goto cdE2r;
       cdE2s: // global
           HpAlloc = 16;
           goto cdE2p;
       cdE2p: // global
           R2 = _sdyHk::P64;
           R1 = _sdyHp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdE2r: // global
           _sdyHe::P64 = P64[_sdyHp::P64 + 7];
           _sdyHg::P64 = P64[_sdyHp::P64 + 15];
           I64[Hp - 8] = sat_sdyHm_info;
           P64[Hp] = _sdyHg::P64;
           I64[Sp - 8] = block_cdE2l_info;
           R3 = Hp - 7;
           R2 = _sdyHe::P64;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHp_info" {
     sat_sdyHp_info:
         const sat_sdyHp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdE2l() //  [R1]
         { []
         }
     {offset
       cdE2l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE2v; else goto cdE2u;
       cdE2v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE2u: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE2l_info" {
     block_cdE2l_info:
         const _cdE2l;
         const 0;
         const 30;
 },
 sat_sdyHs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE2w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdE2x; else goto cdE2y;
       cdE2x: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE2y: // global
           I64[Sp - 24] = block_cdE1Z_info;
           _sdyHe::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdyHe::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udE2L; else goto cdE20;
       udE2L: // global
           call _cdE1Z(R1) args: 0, res: 0, upd: 0;
       cdE20: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHs_info" {
     sat_sdyHs_info:
         const sat_sdyHs_entry;
         const 1;
         const 70373039144969;
         const 8589934607;
         const SdyRV_srt+440;
 },
 _cdE1Z() //  [R1]
         { []
         }
     {offset
       cdE1Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdE2B; else goto cdE2A;
       cdE2B: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE2A: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdE2D; else goto cdE2H;
       cdE2D: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdE2H: // global
           I64[Hp - 16] = sat_sdyHp_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdE2E_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Identity2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE1Z_info" {
     block_cdE1Z_info:
         const _cdE1Z;
         const 2;
         const 70373039144990;
         const SdyRV_srt+440;
 },
 _cdE2E() //  [R1]
         { []
         }
     {offset
       cdE2E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE2K; else goto cdE2J;
       cdE2K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE2J: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE2E_info" {
     block_cdE2E_info:
         const _cdE2E;
         const 0;
         const 30;
 },
 sat_sdyHt_entry() //  [R1]
         { []
         }
     {offset
       cdE2M: // global
           _sdyHt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdE2N; else goto cdE2O;
       cdE2O: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdE2Q; else goto cdE2P;
       cdE2Q: // global
           HpAlloc = 40;
           goto cdE2N;
       cdE2N: // global
           R1 = _sdyHt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE2P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyHt::P64;
           _sdyHc::P64 = P64[_sdyHt::P64 + 16];
           _sdyHd::P64 = P64[_sdyHt::P64 + 24];
           I64[Hp - 32] = lvl3_sdyHe_info;
           P64[Hp - 16] = _sdyHc::P64;
           I64[Hp - 8] = sat_sdyHs_info;
           P64[Hp] = Hp - 32;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdyHd::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyHt_info" {
     sat_sdyHt_info:
         const sat_sdyHt_entry;
         const 2;
         const 281496451547154;
         const SdyRV_srt+424;
 },
 Data.Functor.Classes.$w$cliftReadsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cdE2R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdE2V; else goto cdE2U;
       cdE2V: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE2U: // global
           I64[Hp - 24] = sat_sdyHt_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec3_info" {
     Data.Functor.Classes.$w$cliftReadsPrec3_info:
         const Data.Functor.Classes.$w$cliftReadsPrec3_entry;
         const 0;
         const 1407396358389774;
         const 8589934607;
         const SdyRV_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.247521493 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_entry() //  [R2,
                                                                   R4]
         { []
         }
     {offset
       cdE3D: // global
           R3 = R4;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec3_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.254036645 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdyHB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE3T: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHB_info" {
     sat_sdyHB_info:
         const sat_sdyHB_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+560;
 },
 section ""relreadonly" . udE41_srtd" {
     udE41_srtd:
         const SdyRV_srt+304;
         const 35;
         const 21474836481;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_entry() //  [R2,
                                                                      R3]
         { []
         }
     {offset
       cdE3W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE40; else goto cdE3Z;
       cdE40: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE3Z: // global
           I64[Hp - 8] = sat_sdyHB_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udE41_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.263909933 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList_closure" {
     Data.Functor.Classes.$w$cliftReadList_closure:
         const Data.Functor.Classes.$w$cliftReadList_info;
         const 0;
 },
 w1_sdyHD_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE4n: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w1_sdyHD_info" {
     w1_sdyHD_info:
         const w1_sdyHD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyHG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE4v: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHG_info" {
     sat_sdyHG_info:
         const sat_sdyHG_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+560;
 },
 section ""relreadonly" . udE4I_srtd" {
     udE4I_srtd:
         const SdyRV_srt+304;
         const 33;
         const 4294967297;
 },
 sat_sdyHH_entry() //  [R1]
         { []
         }
     {offset
       cdE4y: // global
           _sdyHH::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdE4z; else goto cdE4A;
       cdE4A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdE4C; else goto cdE4B;
       cdE4C: // global
           HpAlloc = 32;
           goto cdE4z;
       cdE4z: // global
           R1 = _sdyHH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE4B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyHH::P64;
           _sdyHC::P64 = P64[_sdyHH::P64 + 16];
           I64[Hp - 24] = w1_sdyHD_info;
           P64[Hp - 16] = _sdyHC::P64;
           I64[Hp - 8] = sat_sdyHG_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyHH_info" {
     sat_sdyHH_info:
         const sat_sdyHH_entry;
         const 1;
         const 18446744069414584336;
         const udE4I_srtd;
 },
 section ""relreadonly" . udE4J_srtd" {
     udE4J_srtd:
         const SdyRV_srt+304;
         const 36;
         const 38654705665;
 },
 Data.Functor.Classes.$w$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdE4D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdE4H; else goto cdE4G;
       cdE4H: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdE4G: // global
           I64[Hp - 16] = sat_sdyHH_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList_info" {
     Data.Functor.Classes.$w$cliftReadList_info:
         const Data.Functor.Classes.$w$cliftReadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const udE4J_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.277124052 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdE55: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.28137002 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_closure" {
     Data.Functor.Classes.$fRead1Identity_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1Identity1_closure+4;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.283549325 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Maybe7_bytes" {
     Data.Functor.Classes.$fRead1Maybe7_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.286342623 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe6_closure" {
     Data.Functor.Classes.$fRead1Maybe6_closure:
         const Data.Functor.Classes.$fRead1Maybe6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe6_entry() //  [R1]
         { []
         }
     {offset
       cdE5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdE5l; else goto cdE5m;
       cdE5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE5m: // global
           (_cdE5h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdE5h::I64 == 0) goto cdE5j; else goto cdE5i;
       cdE5j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdE5i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdE5h::I64;
           R2 = Data.Functor.Classes.$fRead1Maybe7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe6_info" {
     Data.Functor.Classes.$fRead1Maybe6_info:
         const Data.Functor.Classes.$fRead1Maybe6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.290885459 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_lexeme_closure" {
     Data.Functor.Classes.$fRead1Maybe_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Maybe6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.294903401 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe5_closure" {
     Data.Functor.Classes.$fRead1Maybe5_closure:
         const Data.Functor.Classes.$fRead1Maybe5_info;
         const 0;
 },
 sat_sdyHN_entry() //  [R1]
         { []
         }
     {offset
       cdE5E: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyHN_info" {
     sat_sdyHN_info:
         const sat_sdyHN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$fRead1Maybe5_entry() //  [R2, R3]
         { []
         }
     {offset
       cdE5K: // global
           _sdyHL::P64 = R3;
           _sdyHK::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdE5L; else goto cdE5M;
       cdE5M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE5O; else goto cdE5N;
       cdE5O: // global
           HpAlloc = 16;
           goto cdE5L;
       cdE5L: // global
           R3 = _sdyHL::P64;
           R2 = _sdyHK::P64;
           R1 = Data.Functor.Classes.$fRead1Maybe5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE5N: // global
           I64[Hp - 8] = sat_sdyHN_info;
           P64[Hp] = _sdyHL::P64;
           I64[Sp - 8] = block_cdE5H_info;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Maybe_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe5_info" {
     Data.Functor.Classes.$fRead1Maybe5_info:
         const Data.Functor.Classes.$fRead1Maybe5_entry;
         const 0;
         const 6755403736023054;
         const 8589934607;
         const SdyRV_srt+440;
 },
 _cdE5H() //  [R1]
         { []
         }
     {offset
       cdE5H: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE5R; else goto cdE5Q;
       cdE5R: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE5Q: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE5H_info" {
     block_cdE5H_info:
         const _cdE5H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.303171429 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Maybe4_bytes" {
     Data.Functor.Classes.$fRead1Maybe4_bytes:
         I8[] [74,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.306305026 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe3_closure" {
     Data.Functor.Classes.$fRead1Maybe3_closure:
         const Data.Functor.Classes.$fRead1Maybe3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe3_entry() //  [R1]
         { []
         }
     {offset
       cdE6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdE6c; else goto cdE6d;
       cdE6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE6d: // global
           (_cdE68::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdE68::I64 == 0) goto cdE6a; else goto cdE69;
       cdE6a: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdE69: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdE68::I64;
           R2 = Data.Functor.Classes.$fRead1Maybe4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe3_info" {
     Data.Functor.Classes.$fRead1Maybe3_info:
         const Data.Functor.Classes.$fRead1Maybe3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.310350988 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe2_closure" {
     Data.Functor.Classes.$fRead1Maybe2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Maybe3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.316067288 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec4_closure" {
     Data.Functor.Classes.$w$cliftReadPrec4_closure:
         const Data.Functor.Classes.$w$cliftReadPrec4_info;
         const 0;
 },
 sat_sdyI2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE6T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE6X; else goto cdE6W;
       cdE6X: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdE6W: // global
           _sdyHV::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sdyHV::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyI2_info" {
     sat_sdyI2_info:
         const sat_sdyI2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyI3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE6Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE72; else goto cdE71;
       cdE72: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdE71: // global
           _sdyHQ::P64 = P64[R1 + 7];
           _sdyHV::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdyI2_info;
           P64[Hp] = _sdyHV::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdyHQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyI3_info" {
     sat_sdyI3_info:
         const sat_sdyI3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyI6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE73: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdE74; else goto cdE75;
       cdE74: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE75: // global
           I64[Sp - 24] = block_cdE6z_info;
           _sdyHQ::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdyHQ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udE7i; else goto cdE6A;
       udE7i: // global
           call _cdE6z(R1) args: 0, res: 0, upd: 0;
       cdE6A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyI6_info" {
     sat_sdyI6_info:
         const sat_sdyI6_entry;
         const 1;
         const 9007203549708297;
         const 8589934607;
         const SdyRV_srt+440;
 },
 _cdE6z() //  [R1]
         { []
         }
     {offset
       cdE6z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdE78; else goto cdE77;
       cdE78: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE77: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdE7a; else goto cdE7e;
       cdE7a: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdE7e: // global
           I64[Hp - 16] = sat_sdyI3_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdE7b_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Maybe2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE6z_info" {
     block_cdE6z_info:
         const _cdE6z;
         const 2;
         const 9007203549708318;
         const SdyRV_srt+440;
 },
 _cdE7b() //  [R1]
         { []
         }
     {offset
       cdE7b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE7h; else goto cdE7g;
       cdE7h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdE7g: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE7b_info" {
     block_cdE7b_info:
         const _cdE7b;
         const 0;
         const 30;
 },
 sat_sdyI7_entry() //  [R1]
         { []
         }
     {offset
       cdE7j: // global
           _sdyI7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdE7k; else goto cdE7l;
       cdE7l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE7n; else goto cdE7m;
       cdE7n: // global
           HpAlloc = 16;
           goto cdE7k;
       cdE7k: // global
           R1 = _sdyI7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE7m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyI7::P64;
           _sdyHQ::P64 = P64[_sdyI7::P64 + 16];
           _sdyHR::P64 = P64[_sdyI7::P64 + 24];
           _sdyHS::P64 = P64[_sdyI7::P64 + 32];
           I64[Hp - 8] = sat_sdyI6_info;
           P64[Hp] = _sdyHQ::P64;
           R4 = _sdyHS::P64;
           R3 = _sdyHR::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyI7_info" {
     sat_sdyI7_info:
         const sat_sdyI7_entry;
         const 3;
         const 36028818493800463;
         const SdyRV_srt+424;
 },
 section ""relreadonly" . udE7y_srtd" {
     udE7y_srtd:
         const SdyRV_srt+64;
         const 70;
         const 175921860444161;
         const 52;
 },
 Data.Functor.Classes.$w$cliftReadPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdE7q: // global
           _sdyHS::P64 = R4;
           _sdyHR::P64 = R3;
           _sdyHQ::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdE7r; else goto cdE7s;
       cdE7s: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdE7u; else goto cdE7t;
       cdE7u: // global
           HpAlloc = 40;
           goto cdE7r;
       cdE7r: // global
           R4 = _sdyHS::P64;
           R3 = _sdyHR::P64;
           R2 = _sdyHQ::P64;
           R1 = Data.Functor.Classes.$w$cliftReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE7t: // global
           I64[Hp - 32] = sat_sdyI7_info;
           P64[Hp - 16] = _sdyHQ::P64;
           P64[Hp - 8] = _sdyHR::P64;
           P64[Hp] = _sdyHS::P64;
           I64[Sp - 16] = block_cdE7o_info;
           R4 = _sdyHS::P64;
           R3 = _sdyHR::P64;
           R2 = Data.Functor.Classes.$fRead1Maybe5_closure+2;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec4_info" {
     Data.Functor.Classes.$w$cliftReadPrec4_info:
         const Data.Functor.Classes.$w$cliftReadPrec4_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const udE7y_srtd;
 },
 _cdE7o() //  [R1]
         { []
         }
     {offset
       cdE7o: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdE7o_info" {
     block_cdE7o_info:
         const _cdE7o;
         const 1;
         const 4294967326;
         const SdyRV_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.333311155 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe1_closure" {
     Data.Functor.Classes.$fRead1Maybe1_closure:
         const Data.Functor.Classes.$fRead1Maybe1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe1_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdE8c: // global
           _sdyIa::P64 = R4;
           R4 = R5;
           R3 = _sdyIa::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe1_info" {
     Data.Functor.Classes.$fRead1Maybe1_info:
         const Data.Functor.Classes.$fRead1Maybe1_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.338029049 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec4_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec4_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec4_info;
         const 0;
 },
 sat_sdyIe_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE8w: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyIe_info" {
     sat_sdyIe_info:
         const sat_sdyIe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyIf_entry() //  [R1]
         { []
         }
     {offset
       cdE8z: // global
           _sdyIf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdE8A; else goto cdE8B;
       cdE8B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE8D; else goto cdE8C;
       cdE8D: // global
           HpAlloc = 16;
           goto cdE8A;
       cdE8A: // global
           R1 = _sdyIf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE8C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyIf::P64;
           _sdyIc::P64 = P64[_sdyIf::P64 + 16];
           _sdyId::P64 = P64[_sdyIf::P64 + 24];
           I64[Hp - 8] = sat_sdyIe_info;
           P64[Hp] = _sdyIc::P64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdyId::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyIf_info" {
     sat_sdyIf_info:
         const sat_sdyIf_entry;
         const 2;
         const 4294967314;
         const SdyRV_srt+616;
 },
 Data.Functor.Classes.$w$cliftReadsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       cdE8E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdE8I; else goto cdE8H;
       cdE8I: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE8H: // global
           I64[Hp - 24] = sat_sdyIf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec4_info" {
     Data.Functor.Classes.$w$cliftReadsPrec4_info:
         const Data.Functor.Classes.$w$cliftReadsPrec4_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SdyRV_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.34635794 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_entry() //  [R2,
                                                                R4]
         { []
         }
     {offset
       cdE8Y: // global
           R3 = R4;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec4_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdyRV_srt+632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.350473783 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdyIn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE9e: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyIn_info" {
     sat_sdyIn_info:
         const sat_sdyIn_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+616;
 },
 section ""relreadonly" . udE9m_srtd" {
     udE9m_srtd:
         const SdyRV_srt+304;
         const 43;
         const 4947802324993;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cdE9h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdE9l; else goto cdE9k;
       cdE9l: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdE9k: // global
           I64[Hp - 8] = sat_sdyIn_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udE9m_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.358037566 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList1_closure" {
     Data.Functor.Classes.$w$cliftReadList1_closure:
         const Data.Functor.Classes.$w$cliftReadList1_info;
         const 0;
 },
 w1_sdyIp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdE9I: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w1_sdyIp_info" {
     w1_sdyIp_info:
         const w1_sdyIp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdyIs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdE9Q: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyIs_info" {
     sat_sdyIs_info:
         const sat_sdyIs_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdyRV_srt+616;
 },
 section ""relreadonly" . udEa3_srtd" {
     udEa3_srtd:
         const SdyRV_srt+304;
         const 40;
         const 549755813889;
 },
 sat_sdyIt_entry() //  [R1]
         { []
         }
     {offset
       cdE9T: // global
           _sdyIt::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdE9U; else goto cdE9V;
       cdE9V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdE9X; else goto cdE9W;
       cdE9X: // global
           HpAlloc = 32;
           goto cdE9U;
       cdE9U: // global
           R1 = _sdyIt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdE9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyIt::P64;
           _sdyIo::P64 = P64[_sdyIt::P64 + 16];
           I64[Hp - 24] = w1_sdyIp_info;
           P64[Hp - 16] = _sdyIo::P64;
           I64[Hp - 8] = sat_sdyIs_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyIt_info" {
     sat_sdyIt_info:
         const sat_sdyIt_entry;
         const 1;
         const 18446744069414584336;
         const udEa3_srtd;
 },
 section ""relreadonly" . udEa4_srtd" {
     udEa4_srtd:
         const SdyRV_srt+304;
         const 44;
         const 9345848836097;
 },
 Data.Functor.Classes.$w$cliftReadList1_entry() //  [R2]
         { []
         }
     {offset
       cdE9Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEa2; else goto cdEa1;
       cdEa2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEa1: // global
           I64[Hp - 16] = sat_sdyIt_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList1_info" {
     Data.Functor.Classes.$w$cliftReadList1_info:
         const Data.Functor.Classes.$w$cliftReadList1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const udEa4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.368284182 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdEaq: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdyRV_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.371577844 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_closure" {
     Data.Functor.Classes.$fRead1Maybe_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1Maybe1_closure+4;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.378431432 UTC

[section ""data" . Data.Functor.Classes.readsBinaryWith_closure" {
     Data.Functor.Classes.readsBinaryWith_closure:
         const Data.Functor.Classes.readsBinaryWith_info;
 },
 go1_sdyIM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEba: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdEbb; else goto cdEbc;
       cdEbb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEbc: // global
           I64[Sp - 40] = block_cdEb3_info;
           _sdyIM::P64 = R1;
           _sdyIz::P64 = P64[R1 + 7];
           _sdyIJ::P64 = P64[R1 + 15];
           _sdyIL::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sdyIz::P64;
           P64[Sp - 24] = _sdyIJ::P64;
           P64[Sp - 16] = _sdyIL::P64;
           P64[Sp - 8] = _sdyIM::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udEbw; else goto cdEb4;
       udEbw: // global
           call _cdEb3(R1) args: 0, res: 0, upd: 0;
       cdEb4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sdyIM_info" {
     go1_sdyIM_info:
         const go1_sdyIM_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cdEb3() //  [R1]
         { []
         }
     {offset
       cdEb3: // global
           if (R1 & 7 == 1) goto cdEb7; else goto cdEb8;
       cdEb7: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdEb8: // global
           I64[Sp] = block_cdEbi_info;
           _sdyIQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sdyIQ::P64;
           if (R1 & 7 != 0) goto udEbv; else goto cdEbj;
       udEbv: // global
           call _cdEbi(R1) args: 0, res: 0, upd: 0;
       cdEbj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEb3_info" {
     block_cdEb3_info:
         const _cdEb3;
         const 4;
         const 30;
 },
 _cdEbi() //  [R1]
         { []
         }
     {offset
       cdEbi: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdEbu; else goto cdEbt;
       cdEbu: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEbt: // global
           _sdyIS::P64 = P64[R1 + 7];
           _sdyIT::P64 = P64[R1 + 15];
           I64[Hp - 112] = stg_ap_2_upd_info;
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdyIS::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 80;
           P64[Hp - 24] = _sdyIT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEbi_info" {
     block_cdEbi_info:
         const _cdEbi;
         const 4;
         const 30;
 },
 go_sdyID_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEbB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdEbC; else goto cdEbD;
       cdEbC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEbD: // global
           I64[Sp - 32] = block_cdEaM_info;
           _sdyID::P64 = R1;
           _sdyIx::P64 = P64[R1 + 7];
           _sdyIz::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sdyIx::P64;
           P64[Sp - 16] = _sdyIz::P64;
           P64[Sp - 8] = _sdyID::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udEbQ; else goto cdEaN;
       udEbQ: // global
           call _cdEaM(R1) args: 0, res: 0, upd: 0;
       cdEaN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyID_info" {
     go_sdyID_info:
         const go_sdyID_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdEaM() //  [R1]
         { []
         }
     {offset
       cdEaM: // global
           if (R1 & 7 == 1) goto cdEby; else goto cdEbz;
       cdEby: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEbz: // global
           I64[Sp - 8] = block_cdEaS_info;
           _sdyIH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyIH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udEbP; else goto cdEaT;
       udEbP: // global
           call _cdEaS(R1) args: 0, res: 0, upd: 0;
       cdEaT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEaM_info" {
     block_cdEaM_info:
         const _cdEaM;
         const 3;
         const 30;
 },
 _cdEaS() //  [R1]
         { []
         }
     {offset
       cdEaS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEbK; else goto cdEbJ;
       cdEbK: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEbJ: // global
           _sdyIJ::P64 = P64[R1 + 7];
           _sdyIK::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdyIM_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sdyIJ::P64;
           P64[Hp] = Hp - 56;
           I64[Sp + 24] = block_cdEbG_info;
           R3 = _sdyIK::P64;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = Hp - 23;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEaS_info" {
     block_cdEaS_info:
         const _cdEaS;
         const 4;
         const 30;
 },
 _cdEbG() //  [R1]
         { []
         }
     {offset
       cdEbG: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdyIM_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEbG_info" {
     block_cdEbG_info:
         const _cdEbG;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdEbV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdEbW; else goto cdEbX;
       cdEbW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEbX: // global
           I64[Sp - 32] = block_cdEaC_info;
           _sdyIx::P64 = R3;
           R3 = R4;
           _sdyIw::P64 = R2;
           R2 = R6;
           P64[Sp - 24] = _sdyIw::P64;
           P64[Sp - 16] = _sdyIx::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsBinaryWith_info" {
     Data.Functor.Classes.readsBinaryWith_info:
         const Data.Functor.Classes.readsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdEaC() //  [R1]
         { []
         }
     {offset
       cdEaC: // global
           if (R1 & 7 == 1) goto cdEbS; else goto cdEbT;
       cdEbS: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEbT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEc3; else goto cdEc2;
       cdEc3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEc2: // global
           I64[Hp - 16] = go_sdyID_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cdEc0_info;
           R3 = P64[Sp + 32];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 8];
           P64[Sp + 32] = Hp - 15;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEaC_info" {
     block_cdEaC_info:
         const _cdEaC;
         const 4;
         const 30;
 },
 _cdEc0() //  [R1]
         { []
         }
     {offset
       cdEc0: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyID_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEc0_info" {
     block_cdEc0_info:
         const _cdEc0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.402735297 UTC

[section ""data" . Data.Functor.Classes.$wreadBinaryWith_closure" {
     Data.Functor.Classes.$wreadBinaryWith_closure:
         const Data.Functor.Classes.$wreadBinaryWith_info;
         const 0;
 },
 lvl3_sdyJ7_entry() //  [R1]
         { []
         }
     {offset
       cdEdq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEdx; else goto cdEdy;
       cdEdx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdEdn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEdC; else goto cdEdo;
       udEdC: // global
           call _cdEdn(R1) args: 0, res: 0, upd: 0;
       cdEdo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyJ7_info" {
     lvl3_sdyJ7_info:
         const lvl3_sdyJ7_entry;
         const 1;
         const 16;
 },
 _cdEdn() //  [R1]
         { []
         }
     {offset
       cdEdn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEdB; else goto cdEdA;
       cdEdB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdEdA: // global
           _sdyJa::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdyJa::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdEdn_info" {
     block_cdEdn_info:
         const _cdEdn;
         const 0;
         const 30;
 },
 sat_sdyJe_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEdO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdEdS; else goto cdEdR;
       cdEdS: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEdR: // global
           _sdyJ2::P64 = P64[R1 + 7];
           _sdyJ4::P64 = P64[R1 + 15];
           _sdyJb::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdyJ2::P64;
           P64[Hp - 8] = _sdyJb::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _sdyJ4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyJe_info" {
     sat_sdyJe_info:
         const sat_sdyJe_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdyJf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEdT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdEdX; else goto cdEdW;
       cdEdX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEdW: // global
           _sdyJ0::P64 = P64[R1 + 7];
           _sdyJ2::P64 = P64[R1 + 15];
           _sdyJ4::P64 = P64[R1 + 23];
           _sdyJ7::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_sdyJe_info;
           P64[Hp - 16] = _sdyJ2::P64;
           P64[Hp - 8] = _sdyJ4::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _sdyJ7::P64;
           R1 = _sdyJ0::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyJf_info" {
     sat_sdyJf_info:
         const sat_sdyJf_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_sdyJg_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEdY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEe2; else goto cdEe1;
       cdEe2: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEe1: // global
           _sdyIZ::P64 = P64[R1 + 7];
           _sdyJ0::P64 = P64[R1 + 15];
           _sdyJ2::P64 = P64[R1 + 23];
           _sdyJ3::P64 = P64[R1 + 31];
           _sdyJ4::P64 = P64[R1 + 39];
           I64[Hp - 56] = lvl3_sdyJ7_info;
           P64[Hp - 40] = _sdyJ3::P64;
           I64[Hp - 32] = sat_sdyJf_info;
           P64[Hp - 24] = _sdyJ0::P64;
           P64[Hp - 16] = _sdyJ2::P64;
           P64[Hp - 8] = _sdyJ4::P64;
           _cdEdj::P64 = Hp - 56;
           P64[Hp] = _cdEdj::P64;
           R3 = Hp - 31;
           R2 = _cdEdj::P64;
           R1 = _sdyIZ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyJg_info" {
     sat_sdyJg_info:
         const sat_sdyJg_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wreadBinaryWith_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdEe4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEe8; else goto cdEe7;
       cdEe8: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEe7: // global
           I64[Hp - 56] = sat_sdyJg_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R4;
           R3 = Hp - 55;
           R2 = Hp - 4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadBinaryWith_info" {
     Data.Functor.Classes.$wreadBinaryWith_info:
         const Data.Functor.Classes.$wreadBinaryWith_entry;
         const 0;
         const 576460756598390798;
         const 25769803802;
         const SdyRV_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.416686743 UTC

[section ""data" . Data.Functor.Classes.readBinaryWith1_closure" {
     Data.Functor.Classes.readBinaryWith1_closure:
         const Data.Functor.Classes.readBinaryWith1_info;
         const 0;
 },
 Data.Functor.Classes.readBinaryWith1_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdEeE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdEeF; else goto cdEeG;
       cdEeF: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readBinaryWith1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEeG: // global
           _sdyJm::P64 = P64[Sp];
           I64[Sp] = block_cdEeB_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = _sdyJm::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.$wreadBinaryWith_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readBinaryWith1_info" {
     Data.Functor.Classes.readBinaryWith1_info:
         const Data.Functor.Classes.readBinaryWith1_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SdyRV_srt+656;
 },
 _cdEeB() //  [R1]
         { []
         }
     {offset
       cdEeB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEeJ; else goto cdEeI;
       cdEeJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEeI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEeB_info" {
     block_cdEeB_info:
         const _cdEeB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.422505686 UTC

[section ""data" . Data.Functor.Classes.readBinaryWith_closure" {
     Data.Functor.Classes.readBinaryWith_closure:
         const Data.Functor.Classes.readBinaryWith_info;
         const 0;
 },
 Data.Functor.Classes.readBinaryWith_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdEeX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readBinaryWith1_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readBinaryWith_info" {
     Data.Functor.Classes.readBinaryWith_info:
         const Data.Functor.Classes.readBinaryWith_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdyRV_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.429939595 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnaryWith_closure" {
     Data.Functor.Classes.$wshowsUnaryWith_closure:
         const Data.Functor.Classes.$wshowsUnaryWith_info;
 },
 Data.Functor.Classes.$wshowsUnaryWith_slow() //  [R1]
         { []
         }
     {offset
       cdEf5: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 g_sdyJt_entry() //  [R1]
         { []
         }
     {offset
       cdEfd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEfe; else goto cdEff;
       cdEfe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdyJt_info" {
     g_sdyJt_info:
         const g_sdyJt_entry;
         const 2;
         const 18;
 },
 sat_sdyJy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEfq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEfu; else goto cdEft;
       cdEfu: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEft: // global
           _sdyJq::P64 = P64[R1 + 7];
           _sdyJt::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdyJt::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyJq::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyJy_info" {
     sat_sdyJy_info:
         const sat_sdyJy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyJB_entry() //  [R1]
         { []
         }
     {offset
       cdEfK: // global
           _sdyJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdEfL; else goto cdEfM;
       cdEfM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEfO; else goto cdEfN;
       cdEfO: // global
           HpAlloc = 24;
           goto cdEfL;
       cdEfL: // global
           R1 = _sdyJB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEfN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyJB::P64;
           _sdyJt::P64 = P64[_sdyJB::P64 + 16];
           _sdyJz::P64 = P64[_sdyJB::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdyJz::P64;
           R2 = Hp - 14;
           R1 = _sdyJt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyJB_info" {
     sat_sdyJB_info:
         const sat_sdyJB_entry;
         const 2;
         const 18;
 },
 sat_sdyJD_entry() //  [R1]
         { []
         }
     {offset
       cdEfQ: // global
           _sdyJD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdEfR; else goto cdEfS;
       cdEfS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEfU; else goto cdEfT;
       cdEfU: // global
           HpAlloc = 56;
           goto cdEfR;
       cdEfR: // global
           R1 = _sdyJD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEfT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyJD::P64;
           _sdyJq::P64 = P64[_sdyJD::P64 + 16];
           _sdyJt::P64 = P64[_sdyJD::P64 + 24];
           _sdyJz::P64 = P64[_sdyJD::P64 + 32];
           I64[Hp - 48] = sat_sdyJB_info;
           P64[Hp - 32] = _sdyJt::P64;
           P64[Hp - 24] = _sdyJz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyJq::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyJD_info" {
     sat_sdyJD_info:
         const sat_sdyJD_entry;
         const 3;
         const 15;
 },
 sat_sdyJE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEfW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEg0; else goto cdEfZ;
       cdEg0: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEfZ: // global
           _sdyJq::P64 = P64[R1 + 7];
           _sdyJt::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdyJD_info;
           P64[Hp - 40] = _sdyJq::P64;
           P64[Hp - 32] = _sdyJt::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyJE_info" {
     sat_sdyJE_info:
         const sat_sdyJE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnaryWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEg4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEg8; else goto cdEg7;
       cdEg8: // global
           HpAlloc = 56;
           R1 = Data.Functor.Classes.$wshowsUnaryWith_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdEg7: // global
           I64[Hp - 48] = g_sdyJt_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cdEf9::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 10)) goto cdEg2; else goto cdEg3;
       cdEg2: // global
           I64[Hp - 16] = sat_sdyJy_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdEf9::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEg3: // global
           I64[Hp - 16] = sat_sdyJE_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdEf9::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnaryWith_info" {
     Data.Functor.Classes.$wshowsUnaryWith_info:
         const Data.Functor.Classes.$wshowsUnaryWith_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const Data.Functor.Classes.$wshowsUnaryWith_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.446018179 UTC

[section ""data" . Data.Functor.Classes.showsUnaryWith_closure" {
     Data.Functor.Classes.showsUnaryWith_closure:
         const Data.Functor.Classes.showsUnaryWith_info;
 },
 Data.Functor.Classes.showsUnaryWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEgK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdEgL; else goto cdEgM;
       cdEgL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnaryWith_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEgM: // global
           I64[Sp - 32] = block_cdEgH_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udEgQ; else goto cdEgI;
       udEgQ: // global
           call _cdEgH(R1) args: 0, res: 0, upd: 0;
       cdEgI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnaryWith_info" {
     Data.Functor.Classes.showsUnaryWith_info:
         const Data.Functor.Classes.showsUnaryWith_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdEgH() //  [R1]
         { []
         }
     {offset
       cdEgH: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEgH_info" {
     block_cdEgH_info:
         const _cdEgH;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.451935037 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cdEh7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEh8; else goto cdEh9;
       cdEh8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEh9: // global
           I64[Sp - 16] = block_cdEh4_info;
           R1 = R6;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udEhd; else goto cdEh5;
       udEhd: // global
           call _cdEh4(R1) args: 0, res: 0, upd: 0;
       cdEh5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SdyRV_srt+672;
 },
 _cdEh4() //  [R1]
         { []
         }
     {offset
       cdEh4: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEh4_info" {
     block_cdEh4_info:
         const _cdEh4;
         const 2;
         const 4294967326;
         const SdyRV_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.458448723 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_info;
         const 0;
 },
 sat_sdyK0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEhw: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyK0_info" {
     sat_sdyK0_info:
         const sat_sdyK0_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdyRV_srt+672;
 },
 Data.Functor.Classes.$fShow2Const_$cliftShowList2_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cdEhz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEhD; else goto cdEhC;
       cdEhD: // global
           HpAlloc = 16;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEhC: // global
           I64[Hp - 8] = sat_sdyK0_info;
           P64[Hp] = R2;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Const_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2Const_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const SdyRV_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.463540634 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_closure" {
     Data.Functor.Classes.$fShow2Const_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure+6;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.46670906 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info;
         const 0;
 },
 sat_sdyK8_entry() //  [R1]
         { []
         }
     {offset
       cdEhZ: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyK8_info" {
     sat_sdyK8_info:
         const sat_sdyK8_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cdEi2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEi3; else goto cdEi4;
       cdEi3: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEi4: // global
           I64[Sp - 24] = block_cdEhQ_info;
           R1 = R5;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEi8; else goto cdEhR;
       udEi8: // global
           call _cdEhQ(R1) args: 0, res: 0, upd: 0;
       cdEhR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SdyRV_srt+672;
 },
 _cdEhQ() //  [R1]
         { []
         }
     {offset
       cdEhQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEi7; else goto cdEi6;
       cdEi7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEi6: // global
           _sdyK7::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdyK8_info;
           P64[Hp] = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = _sdyK7::I64;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEhQ_info" {
     block_cdEhQ_info:
         const _cdEhQ;
         const 2;
         const 4294967326;
         const SdyRV_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.475592514 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Const_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_info;
         const 0;
 },
 lvl3_sdyKe_entry() //  [R1]
         { []
         }
     {offset
       cdEiu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEiv; else goto cdEiw;
       cdEiv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEiw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyKe_info" {
     lvl3_sdyKe_info:
         const lvl3_sdyKe_entry;
         const 1;
         const 16;
 },
 sat_sdyKg_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEiC: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyKg_info" {
     sat_sdyKg_info:
         const sat_sdyKg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdyRV_srt+672;
 },
 Data.Functor.Classes.$fShow1Const_$cliftShowList_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cdEiF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdEiJ; else goto cdEiI;
       cdEiJ: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEiI: // global
           I64[Hp - 32] = lvl3_sdyKe_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdyKg_info;
           P64[Hp] = Hp - 32;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Const_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SdyRV_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.484013261 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_closure" {
     Data.Functor.Classes.$fShow1Const_closure:
         const Data.Functor.Classes.$fShow1Const_info;
         const 0;
 },
 sat_sdyKj_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdEj5: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Const_$cliftShowList_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyKj_info" {
     sat_sdyKj_info:
         const sat_sdyKj_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+704;
 },
 sat_sdyKi_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdEjd: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry(R6,
                                                                        R5,
                                                                        R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyKi_info" {
     sat_sdyKi_info:
         const sat_sdyKi_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+696;
 },
 Data.Functor.Classes.$fShow1Const_entry() //  [R2]
         { []
         }
     {offset
       cdEjh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEjl; else goto cdEjk;
       cdEjl: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEjk: // global
           I64[Hp - 48] = sat_sdyKj_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyKi_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_info" {
     Data.Functor.Classes.$fShow1Const_info:
         const Data.Functor.Classes.$fShow1Const_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SdyRV_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.49266383 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cdEjK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEjL; else goto cdEjM;
       cdEjL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEjM: // global
           I64[Sp - 24] = block_cdEjD_info;
           R1 = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEk7; else goto cdEjE;
       udEk7: // global
           call _cdEjD(R1) args: 0, res: 0, upd: 0;
       cdEjE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_entry;
         const 0;
         const 30064771086;
         const 25769803802;
         const SdyRV_srt+720;
 },
 _cdEjD() //  [R1]
         { []
         }
     {offset
       cdEjD: // global
           _sdyKo::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdEjH; else goto cdEjI;
       cdEjH: // global
           I64[Sp + 8] = block_cdEjP_info;
           _sdyKr::P64 = P64[R1 + 7];
           R1 = _sdyKo::P64;
           P64[Sp + 16] = _sdyKr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udEk5; else goto cdEjR;
       udEk5: // global
           call _cdEjP(R1) args: 0, res: 0, upd: 0;
       cdEjR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdEjI: // global
           I64[Sp] = block_cdEjY_info;
           _sdyKu::P64 = P64[R1 + 6];
           R1 = _sdyKo::P64;
           P64[Sp + 24] = _sdyKu::P64;
           if (R1 & 7 != 0) goto udEk6; else goto cdEk0;
       udEk6: // global
           call _cdEjY(R1) args: 0, res: 0, upd: 0;
       cdEk0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEjD_info" {
     block_cdEjD_info:
         const _cdEjD;
         const 3;
         const 12884901918;
         const SdyRV_srt+720;
 },
 _cdEjP() //  [R1]
         { []
         }
     {offset
       cdEjP: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEjP_info" {
     block_cdEjP_info:
         const _cdEjP;
         const 2;
         const 4294967326;
         const SdyRV_srt+728;
 },
 _cdEjY() //  [R1]
         { []
         }
     {offset
       cdEjY: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEjY_info" {
     block_cdEjY_info:
         const _cdEjY;
         const 131;
         const 4294967326;
         const SdyRV_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.50482013 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList4_closure" {
     Data.Functor.Classes.$w$cliftShowList4_closure:
         const Data.Functor.Classes.$w$cliftShowList4_info;
         const 0;
 },
 sat_sdyKF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEkH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEkI; else goto cdEkJ;
       cdEkI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEkJ: // global
           I64[Sp - 24] = block_cdEkA_info;
           _sdyKx::P64 = P64[R1 + 7];
           _sdyKy::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdyKx::P64;
           P64[Sp - 8] = _sdyKy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEkQ; else goto cdEkB;
       udEkQ: // global
           call _cdEkA(R1) args: 0, res: 0, upd: 0;
       cdEkB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyKF_info" {
     sat_sdyKF_info:
         const sat_sdyKF_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdyRV_srt+720;
 },
 _cdEkA() //  [R1]
         { []
         }
     {offset
       cdEkA: // global
           if (R1 & 7 == 1) goto cdEkE; else goto cdEkF;
       cdEkE: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdEkF: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEkA_info" {
     block_cdEkA_info:
         const _cdEkA;
         const 2;
         const 12884901918;
         const SdyRV_srt+720;
 },
 Data.Functor.Classes.$w$cliftShowList4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEkR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEkV; else goto cdEkU;
       cdEkV: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEkU: // global
           I64[Hp - 16] = sat_sdyKF_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdyKz::P64 = R4;
           R4 = R5;
           R3 = _sdyKz::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList4_info" {
     Data.Functor.Classes.$w$cliftShowList4_info:
         const Data.Functor.Classes.$w$cliftShowList4_entry;
         const 0;
         const 47244640270;
         const 17179869208;
         const SdyRV_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.514389515 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Either_$cliftShowList2_entry() //  [R2,
                                                                 R4, R6]
         { []
         }
     {offset
       cdEle: // global
           R5 = P64[Sp];
           _sdyKI::P64 = R4;
           R4 = R6;
           R3 = _sdyKI::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftShowList4_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Either_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2Either_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdyRV_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.518510375 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_closure" {
     Data.Functor.Classes.$fShow2Either_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure+6;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.522993702 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cdEln: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdyKS_entry() //  [R1]
         { []
         }
     {offset
       cdElA: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyKS_info" {
     sat_sdyKS_info:
         const sat_sdyKS_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdElH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdElI; else goto cdElJ;
       cdElI: // global
           R1 = Data.Functor.Classes.$w$cliftShowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdElJ: // global
           I64[Sp - 32] = block_cdElr_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udElQ; else goto cdEls;
       udElQ: // global
           call _cdElr(R1) args: 0, res: 0, upd: 0;
       cdEls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec_info" {
     Data.Functor.Classes.$w$cliftShowsPrec_info:
         const Data.Functor.Classes.$w$cliftShowsPrec_entry;
         const 0;
         const 81604378638;
         const 17179869184;
         const SdyRV_srt+720;
         const 260;
         const Data.Functor.Classes.$w$cliftShowsPrec_slow;
 },
 _cdElr() //  [R1]
         { []
         }
     {offset
       cdElr: // global
           _sdyKO::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto cdElE; else goto cdElF;
       cdElE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdElM; else goto cdElL;
       cdElM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdElL: // global
           _sdyKR::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sdyKS_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sdyKR::P64;
           R4 = _sdyKO::I64;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = Hp - 16;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdElF: // global
           R5 = P64[R1 + 6];
           R4 = _sdyKO::I64;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdElr_info" {
     block_cdElr_info:
         const _cdElr;
         const 259;
         const 12884901918;
         const SdyRV_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.533557819 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cdEmf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdEmg; else goto cdEmh;
       cdEmg: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEmh: // global
           I64[Sp - 32] = block_cdEmc_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udEml; else goto cdEmd;
       udEml: // global
           call _cdEmc(R1) args: 0, res: 0, upd: 0;
       cdEmd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdyRV_srt+752;
 },
 _cdEmc() //  [R1]
         { []
         }
     {offset
       cdEmc: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEmc_info" {
     block_cdEmc_info:
         const _cdEmc;
         const 3;
         const 4294967326;
         const SdyRV_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.542188432 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList1_closure" {
     Data.Functor.Classes.$w$cliftShowList1_closure:
         const Data.Functor.Classes.$w$cliftShowList1_info;
         const 0;
 },
 lvl3_sdyL5_entry() //  [R1]
         { []
         }
     {offset
       cdEmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEmE; else goto cdEmF;
       cdEmE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEmF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdyL5_info" {
     lvl3_sdyL5_info:
         const lvl3_sdyL5_entry;
         const 1;
         const 16;
 },
 sat_sdyLa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEmS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEmT; else goto cdEmU;
       cdEmT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEmU: // global
           I64[Sp - 24] = block_cdEmL_info;
           _sdyL2::P64 = P64[R1 + 7];
           _sdyL5::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdyL2::P64;
           P64[Sp - 8] = _sdyL5::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEn1; else goto cdEmM;
       udEn1: // global
           call _cdEmL(R1) args: 0, res: 0, upd: 0;
       cdEmM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyLa_info" {
     sat_sdyLa_info:
         const sat_sdyLa_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdyRV_srt+720;
 },
 _cdEmL() //  [R1]
         { []
         }
     {offset
       cdEmL: // global
           if (R1 & 7 == 1) goto cdEmP; else goto cdEmQ;
       cdEmP: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdEmQ: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEmL_info" {
     block_cdEmL_info:
         const _cdEmL;
         const 2;
         const 12884901918;
         const SdyRV_srt+720;
 },
 Data.Functor.Classes.$w$cliftShowList1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEn2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdEn6; else goto cdEn5;
       cdEn6: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEn5: // global
           I64[Hp - 40] = lvl3_sdyL5_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdyLa_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           _sdyL3::P64 = R4;
           R4 = R5;
           R3 = _sdyL3::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList1_info" {
     Data.Functor.Classes.$w$cliftShowList1_info:
         const Data.Functor.Classes.$w$cliftShowList1_entry;
         const 0;
         const 287762808846;
         const 17179869208;
         const SdyRV_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.551656543 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Either_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Either_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Either_$cliftShowList_entry() //  [R2,
                                                                R3, R5, R6]
         { []
         }
     {offset
       cdEnu: // global
           _sdyLe::P64 = R5;
           R5 = R6;
           R4 = _sdyLe::P64;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Either_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Either_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdyRV_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.556427303 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_closure" {
     Data.Functor.Classes.$fShow1Either_closure:
         const Data.Functor.Classes.$fShow1Either_info;
         const 0;
 },
 sat_sdyLm_entry() //  [R1, R2, R4, R5]
         { []
         }
     {offset
       cdEnK: // global
           R5 = R5;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$w$cliftShowList1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyLm_info" {
     sat_sdyLm_info:
         const sat_sdyLm_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+768;
 },
 sat_sdyLh_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdEnS: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyLh_info" {
     sat_sdyLh_info:
         const sat_sdyLh_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdyRV_srt+760;
 },
 Data.Functor.Classes.$fShow1Either_entry() //  [R2]
         { []
         }
     {offset
       cdEnW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEo0; else goto cdEnZ;
       cdEo0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEnZ: // global
           I64[Hp - 48] = sat_sdyLm_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdyLh_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_info" {
     Data.Functor.Classes.$fShow1Either_info:
         const Data.Functor.Classes.$fShow1Either_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SdyRV_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.564761968 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdEol: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEom; else goto cdEon;
       cdEom: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEon: // global
           I64[Sp - 24] = block_cdEoi_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEor; else goto cdEoj;
       udEor: // global
           call _cdEoi(R1) args: 0, res: 0, upd: 0;
       cdEoj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SdyRV_srt+784;
 },
 _cdEoi() //  [R1]
         { []
         }
     {offset
       cdEoi: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Identity3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEoi_info" {
     block_cdEoi_info:
         const _cdEoi;
         const 2;
         const 4294967326;
         const SdyRV_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.57067904 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_info;
         const 0;
 },
 sat_sdyLy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEoK: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Identity3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyLy_info" {
     sat_sdyLy_info:
         const sat_sdyLy_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdyRV_srt+784;
 },
 Data.Functor.Classes.$fShow1Identity_$cliftShowList_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdEoN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEoR; else goto cdEoQ;
       cdEoR: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEoQ: // global
           I64[Hp - 8] = sat_sdyLy_info;
           P64[Hp] = R2;
           _sdyLv::P64 = R4;
           R4 = R5;
           R3 = _sdyLv::P64;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Identity_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SdyRV_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.576004618 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_closure" {
     Data.Functor.Classes.$fShow1Identity_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.578208569 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe1_closure" {
     Data.Functor.Classes.$fShow1Maybe1_closure:
         const Data.Functor.Classes.$fShow1Maybe1_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe1_entry() //  [R2]
         { []
         }
     {offset
       cdEp4: // global
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Maybe6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe1_info" {
     Data.Functor.Classes.$fShow1Maybe1_info:
         const Data.Functor.Classes.$fShow1Maybe1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdyRV_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.582671821 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdEpm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdEpn; else goto cdEpo;
       cdEpn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEpo: // global
           I64[Sp - 24] = block_cdEpf_info;
           R1 = R5;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEpC; else goto cdEpg;
       udEpC: // global
           call _cdEpf(R1) args: 0, res: 0, upd: 0;
       cdEpg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SdyRV_srt+816;
 },
 _cdEpf() //  [R1]
         { []
         }
     {offset
       cdEpf: // global
           if (R1 & 7 == 1) goto cdEpj; else goto cdEpk;
       cdEpj: // global
           R1 = Data.Functor.Classes.$fShow1Maybe1_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEpk: // global
           I64[Sp] = block_cdEpu_info;
           _sdyLE::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sdyLE::P64;
           if (R1 & 7 != 0) goto udEpB; else goto cdEpw;
       udEpB: // global
           call _cdEpu(R1) args: 0, res: 0, upd: 0;
       cdEpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEpf_info" {
     block_cdEpf_info:
         const _cdEpf;
         const 2;
         const 12884901918;
         const SdyRV_srt+816;
 },
 _cdEpu() //  [R1]
         { []
         }
     {offset
       cdEpu: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Maybe3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEpu_info" {
     block_cdEpu_info:
         const _cdEpu;
         const 2;
         const 4294967326;
         const SdyRV_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.591488345 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList2_closure" {
     Data.Functor.Classes.$w$cliftShowList2_closure:
         const Data.Functor.Classes.$w$cliftShowList2_info;
         const 0;
 },
 sat_sdyLN_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEq9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEqa; else goto cdEqb;
       cdEqa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEqb: // global
           I64[Sp - 16] = block_cdEq2_info;
           _sdyLH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sdyLH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udEqi; else goto cdEq3;
       udEqi: // global
           call _cdEq2(R1) args: 0, res: 0, upd: 0;
       cdEq3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyLN_info" {
     sat_sdyLN_info:
         const sat_sdyLN_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SdyRV_srt+816;
 },
 _cdEq2() //  [R1]
         { []
         }
     {offset
       cdEq2: // global
           if (R1 & 7 == 1) goto cdEq6; else goto cdEq7;
       cdEq6: // global
           R1 = Data.Functor.Classes.$fShow1Maybe1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEq7: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Maybe3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEq2_info" {
     block_cdEq2_info:
         const _cdEq2;
         const 1;
         const 12884901918;
         const SdyRV_srt+816;
 },
 Data.Functor.Classes.$w$cliftShowList2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdEqj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEqn; else goto cdEqm;
       cdEqn: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEqm: // global
           I64[Hp - 8] = sat_sdyLN_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList2_info" {
     Data.Functor.Classes.$w$cliftShowList2_info:
         const Data.Functor.Classes.$w$cliftShowList2_entry;
         const 0;
         const 47244640270;
         const 12884901911;
         const SdyRV_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.599478035 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe_$cliftShowList_entry() //  [R2,
                                                               R4, R5]
         { []
         }
     {offset
       cdEqH: // global
           _sdyLQ::P64 = R4;
           R4 = R5;
           R3 = _sdyLQ::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList2_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdyRV_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.602983588 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_closure" {
     Data.Functor.Classes.$fShow1Maybe_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.61003615 UTC

[section ""data" . Data.Functor.Classes.$wshowsBinaryWith_closure" {
     Data.Functor.Classes.$wshowsBinaryWith_closure:
         const Data.Functor.Classes.$wshowsBinaryWith_info;
 },
 Data.Functor.Classes.$wshowsBinaryWith_slow() //  [R1]
         { []
         }
     {offset
       cdEqQ: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 16, res: 0, upd: 8;
     }
 },
 f_sdyLY_entry() //  [R1]
         { []
         }
     {offset
       cdEqY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEqZ; else goto cdEr0;
       cdEqZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEr0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdyLY_info" {
     f_sdyLY_info:
         const f_sdyLY_entry;
         const 2;
         const 18;
 },
 g_sdyLZ_entry() //  [R1]
         { []
         }
     {offset
       cdEr5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdEr6; else goto cdEr7;
       cdEr6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEr7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdyLZ_info" {
     g_sdyLZ_info:
         const g_sdyLZ_entry;
         const 2;
         const 18;
 },
 sat_sdyM4_entry() //  [R1]
         { []
         }
     {offset
       cdErm: // global
           _sdyM4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdErn; else goto cdEro;
       cdEro: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdErq; else goto cdErp;
       cdErq: // global
           HpAlloc = 56;
           goto cdErn;
       cdErn: // global
           R1 = _sdyM4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdErp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyM4::P64;
           _sdyLY::P64 = P64[_sdyM4::P64 + 16];
           _sdyLZ::P64 = P64[_sdyM4::P64 + 24];
           _sdyM1::P64 = P64[_sdyM4::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdyLZ::P64;
           P64[Hp - 24] = _sdyM1::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdyLY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyM4_info" {
     sat_sdyM4_info:
         const sat_sdyM4_entry;
         const 3;
         const 15;
 },
 sat_sdyM6_entry() //  [R1, R2]
         { []
         }
     {offset
       cdErs: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdErw; else goto cdErv;
       cdErw: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdErv: // global
           _sdyLU::P64 = P64[R1 + 7];
           _sdyLY::P64 = P64[R1 + 15];
           _sdyLZ::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_sdyM4_info;
           P64[Hp - 40] = _sdyLY::P64;
           P64[Hp - 32] = _sdyLZ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdyLU::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyM6_info" {
     sat_sdyM6_info:
         const sat_sdyM6_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdyM9_entry() //  [R1]
         { []
         }
     {offset
       cdErQ: // global
           _sdyM9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdErR; else goto cdErS;
       cdErS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdErU; else goto cdErT;
       cdErU: // global
           HpAlloc = 24;
           goto cdErR;
       cdErR: // global
           R1 = _sdyM9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdErT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyM9::P64;
           _sdyLZ::P64 = P64[_sdyM9::P64 + 16];
           _sdyM7::P64 = P64[_sdyM9::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdyM7::P64;
           R2 = Hp - 14;
           R1 = _sdyLZ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyM9_info" {
     sat_sdyM9_info:
         const sat_sdyM9_entry;
         const 2;
         const 18;
 },
 sat_sdyMb_entry() //  [R1]
         { []
         }
     {offset
       cdErW: // global
           _sdyMb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdErX; else goto cdErY;
       cdErY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEs0; else goto cdErZ;
       cdEs0: // global
           HpAlloc = 56;
           goto cdErX;
       cdErX: // global
           R1 = _sdyMb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdErZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyMb::P64;
           _sdyLY::P64 = P64[_sdyMb::P64 + 16];
           _sdyLZ::P64 = P64[_sdyMb::P64 + 24];
           _sdyM7::P64 = P64[_sdyMb::P64 + 32];
           I64[Hp - 48] = sat_sdyM9_info;
           P64[Hp - 32] = _sdyLZ::P64;
           P64[Hp - 24] = _sdyM7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdyLY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyMb_info" {
     sat_sdyMb_info:
         const sat_sdyMb_entry;
         const 3;
         const 15;
 },
 sat_sdyMd_entry() //  [R1]
         { []
         }
     {offset
       cdEs2: // global
           _sdyMd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdEs3; else goto cdEs4;
       cdEs4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEs6; else goto cdEs5;
       cdEs6: // global
           HpAlloc = 64;
           goto cdEs3;
       cdEs3: // global
           R1 = _sdyMd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEs5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyMd::P64;
           _sdyLU::P64 = P64[_sdyMd::P64 + 16];
           _sdyLY::P64 = P64[_sdyMd::P64 + 24];
           _sdyLZ::P64 = P64[_sdyMd::P64 + 32];
           _sdyM7::P64 = P64[_sdyMd::P64 + 40];
           I64[Hp - 56] = sat_sdyMb_info;
           P64[Hp - 40] = _sdyLY::P64;
           P64[Hp - 32] = _sdyLZ::P64;
           P64[Hp - 24] = _sdyM7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdyLU::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyMd_info" {
     sat_sdyMd_info:
         const sat_sdyMd_entry;
         const 4;
         const 15;
 },
 sat_sdyMe_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEs8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdEsc; else goto cdEsb;
       cdEsc: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEsb: // global
           _sdyLU::P64 = P64[R1 + 7];
           _sdyLY::P64 = P64[R1 + 15];
           _sdyLZ::P64 = P64[R1 + 23];
           I64[Hp - 64] = sat_sdyMd_info;
           P64[Hp - 48] = _sdyLU::P64;
           P64[Hp - 40] = _sdyLY::P64;
           P64[Hp - 32] = _sdyLZ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyMe_info" {
     sat_sdyMe_info:
         const sat_sdyMe_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cdEsg: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdEsk; else goto cdEsj;
       cdEsk: // global
           HpAlloc = 96;
           R1 = Data.Functor.Classes.$wshowsBinaryWith_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cdEsj: // global
           I64[Hp - 88] = f_sdyLY_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R6;
           I64[Hp - 56] = g_sdyLZ_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = P64[Sp];
           _cdEqU::P64 = Hp - 88;
           _cdEr1::P64 = Hp - 56;
           if (%MO_S_Le_W64(R5, 10)) goto cdEse; else goto cdEsf;
       cdEse: // global
           I64[Hp - 24] = sat_sdyM6_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cdEqU::P64;
           P64[Hp] = _cdEr1::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEsf: // global
           I64[Hp - 24] = sat_sdyMe_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cdEqU::P64;
           P64[Hp] = _cdEr1::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsBinaryWith_info" {
     Data.Functor.Classes.$wshowsBinaryWith_info:
         const Data.Functor.Classes.$wshowsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 518;
         const Data.Functor.Classes.$wshowsBinaryWith_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.631646818 UTC

[section ""data" . Data.Functor.Classes.showsBinaryWith_closure" {
     Data.Functor.Classes.showsBinaryWith_closure:
         const Data.Functor.Classes.showsBinaryWith_info;
 },
 Data.Functor.Classes.showsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdEtb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdEtc; else goto cdEtd;
       cdEtc: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdEtd: // global
           I64[Sp - 40] = block_cdEt8_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udEth; else goto cdEt9;
       udEth: // global
           call _cdEt8(R1) args: 0, res: 0, upd: 0;
       cdEt9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsBinaryWith_info" {
     Data.Functor.Classes.showsBinaryWith_info:
         const Data.Functor.Classes.showsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdEt8() //  [R1]
         { []
         }
     {offset
       cdEt8: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEt8_info" {
     block_cdEt8_info:
         const _cdEt8;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.641081229 UTC

[section ""data" . Data.Functor.Classes.readsUnary_closure" {
     Data.Functor.Classes.readsUnary_closure:
         const Data.Functor.Classes.readsUnary_info;
 },
 go_sdyMt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEtM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdEtN; else goto cdEtO;
       cdEtN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEtO: // global
           I64[Sp - 24] = block_cdEtF_info;
           _sdyMt::P64 = R1;
           _sdyMp::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdyMp::P64;
           P64[Sp - 8] = _sdyMt::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udEu8; else goto cdEtG;
       udEu8: // global
           call _cdEtF(R1) args: 0, res: 0, upd: 0;
       cdEtG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdyMt_info" {
     go_sdyMt_info:
         const go_sdyMt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdEtF() //  [R1]
         { []
         }
     {offset
       cdEtF: // global
           if (R1 & 7 == 1) goto cdEtJ; else goto cdEtK;
       cdEtJ: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEtK: // global
           I64[Sp - 8] = block_cdEtU_info;
           _sdyMx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdyMx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udEu7; else goto cdEtV;
       udEu7: // global
           call _cdEtU(R1) args: 0, res: 0, upd: 0;
       cdEtV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEtF_info" {
     block_cdEtF_info:
         const _cdEtF;
         const 2;
         const 30;
 },
 _cdEtU() //  [R1]
         { []
         }
     {offset
       cdEtU: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdEu6; else goto cdEu5;
       cdEu6: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEu5: // global
           _sdyMz::P64 = P64[R1 + 7];
           _sdyMA::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdyMz::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdyMA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEtU_info" {
     block_cdEtU_info:
         const _cdEtU;
         const 3;
         const 30;
 },
 Data.Functor.Classes.readsUnary_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdEud: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdEue; else goto cdEuf;
       cdEue: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnary_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEuf: // global
           I64[Sp - 32] = block_cdEtv_info;
           R3 = R3;
           _sdyMn::P64 = R2;
           R2 = R5;
           P64[Sp - 24] = _sdyMn::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnary_info" {
     Data.Functor.Classes.readsUnary_info:
         const Data.Functor.Classes.readsUnary_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdEtv() //  [R1]
         { []
         }
     {offset
       cdEtv: // global
           if (R1 & 7 == 1) goto cdEua; else goto cdEub;
       cdEua: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEub: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdEul; else goto cdEuk;
       cdEul: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdEuk: // global
           I64[Hp - 8] = go_sdyMt_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdEui_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEtv_info" {
     block_cdEtv_info:
         const _cdEtv;
         const 3;
         const 30;
 },
 _cdEui() //  [R1]
         { []
         }
     {offset
       cdEui: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdyMt_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEui_info" {
     block_cdEui_info:
         const _cdEui;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.658378821 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnary_closure" {
     Data.Functor.Classes.$wshowsUnary_closure:
         const Data.Functor.Classes.$wshowsUnary_info;
 },
 Data.Functor.Classes.$wshowsUnary_slow() //  [R1]
         { []
         }
     {offset
       cdEv4: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnary_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 g_sdyMJ_entry() //  [R1]
         { []
         }
     {offset
       cdEvc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdEvd; else goto cdEve;
       cdEvd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEve: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdyMJ_info" {
     g_sdyMJ_info:
         const g_sdyMJ_entry;
         const 2;
         const 18;
 },
 sat_sdyMO_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEvp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEvt; else goto cdEvs;
       cdEvt: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEvs: // global
           _sdyMG::P64 = P64[R1 + 7];
           _sdyMJ::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdyMJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyMG::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyMO_info" {
     sat_sdyMO_info:
         const sat_sdyMO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdyMR_entry() //  [R1]
         { []
         }
     {offset
       cdEvJ: // global
           _sdyMR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdEvK; else goto cdEvL;
       cdEvL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEvN; else goto cdEvM;
       cdEvN: // global
           HpAlloc = 24;
           goto cdEvK;
       cdEvK: // global
           R1 = _sdyMR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEvM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyMR::P64;
           _sdyMJ::P64 = P64[_sdyMR::P64 + 16];
           _sdyMP::P64 = P64[_sdyMR::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdyMP::P64;
           R2 = Hp - 14;
           R1 = _sdyMJ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyMR_info" {
     sat_sdyMR_info:
         const sat_sdyMR_entry;
         const 2;
         const 18;
 },
 sat_sdyMT_entry() //  [R1]
         { []
         }
     {offset
       cdEvP: // global
           _sdyMT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdEvQ; else goto cdEvR;
       cdEvR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEvT; else goto cdEvS;
       cdEvT: // global
           HpAlloc = 56;
           goto cdEvQ;
       cdEvQ: // global
           R1 = _sdyMT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdEvS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdyMT::P64;
           _sdyMG::P64 = P64[_sdyMT::P64 + 16];
           _sdyMJ::P64 = P64[_sdyMT::P64 + 24];
           _sdyMP::P64 = P64[_sdyMT::P64 + 32];
           I64[Hp - 48] = sat_sdyMR_info;
           P64[Hp - 32] = _sdyMJ::P64;
           P64[Hp - 24] = _sdyMP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdyMG::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdyMT_info" {
     sat_sdyMT_info:
         const sat_sdyMT_entry;
         const 3;
         const 15;
 },
 sat_sdyMU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdEvV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdEvZ; else goto cdEvY;
       cdEvZ: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdEvY: // global
           _sdyMG::P64 = P64[R1 + 7];
           _sdyMJ::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdyMT_info;
           P64[Hp - 40] = _sdyMG::P64;
           P64[Hp - 32] = _sdyMJ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdyMU_info" {
     sat_sdyMU_info:
         const sat_sdyMU_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnary_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEw3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdEw7; else goto cdEw6;
       cdEw7: // global
           HpAlloc = 56;
           R1 = Data.Functor.Classes.$wshowsUnary_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdEw6: // global
           I64[Hp - 48] = g_sdyMJ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cdEv8::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 10)) goto cdEw1; else goto cdEw2;
       cdEw1: // global
           I64[Hp - 16] = sat_sdyMO_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdEv8::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdEw2: // global
           I64[Hp - 16] = sat_sdyMU_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdEv8::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnary_info" {
     Data.Functor.Classes.$wshowsUnary_info:
         const Data.Functor.Classes.$wshowsUnary_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const Data.Functor.Classes.$wshowsUnary_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.673102413 UTC

[section ""data" . Data.Functor.Classes.showsUnary_closure" {
     Data.Functor.Classes.showsUnary_closure:
         const Data.Functor.Classes.showsUnary_info;
 },
 Data.Functor.Classes.showsUnary_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEwK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdEwL; else goto cdEwM;
       cdEwL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnary_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEwM: // global
           I64[Sp - 32] = block_cdEwH_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udEwQ; else goto cdEwI;
       udEwQ: // global
           call _cdEwH(R1) args: 0, res: 0, upd: 0;
       cdEwI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnary_info" {
     Data.Functor.Classes.showsUnary_info:
         const Data.Functor.Classes.showsUnary_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdEwH() //  [R1]
         { []
         }
     {offset
       cdEwH: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnary_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdEwH_info" {
     block_cdEwH_info:
         const _cdEwH;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.678448921 UTC

[section ""cstring" . Data.Functor.Classes.$trModule4_bytes" {
     Data.Functor.Classes.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.680252658 UTC

[section ""data" . Data.Functor.Classes.$trModule3_closure" {
     Data.Functor.Classes.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.68268162 UTC

[section ""cstring" . Data.Functor.Classes.$trModule2_bytes" {
     Data.Functor.Classes.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.684355529 UTC

[section ""data" . Data.Functor.Classes.$trModule1_closure" {
     Data.Functor.Classes.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.686431606 UTC

[section ""data" . Data.Functor.Classes.$trModule_closure" {
     Data.Functor.Classes.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Classes.$trModule3_closure+1;
         const Data.Functor.Classes.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.688323292 UTC

[section ""data" . $krep_rdymB_closure" {
     $krep_rdymB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.690194571 UTC

[section ""data" . Data.Functor.Classes.$tcEq4_closure" {
     Data.Functor.Classes.$tcEq4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rdymB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.691931028 UTC

[section ""data" . Data.Functor.Classes.$tcEq7_closure" {
     Data.Functor.Classes.$tcEq7_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdymB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.693790183 UTC

[section ""cstring" . Data.Functor.Classes.$tcEq6_bytes" {
     Data.Functor.Classes.$tcEq6_bytes:
         I8[] [69,113,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.695528141 UTC

[section ""data" . Data.Functor.Classes.$tcEq5_closure" {
     Data.Functor.Classes.$tcEq5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcEq6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.697361394 UTC

[section ""data" . Data.Functor.Classes.$tcEq1_closure" {
     Data.Functor.Classes.$tcEq1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcEq5_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 71749974434880567;
         const 7233443027070644957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.699201095 UTC

[section ""cstring" . Data.Functor.Classes.$tcOrd5_bytes" {
     Data.Functor.Classes.$tcOrd5_bytes:
         I8[] [79,114,100,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.700945374 UTC

[section ""data" . Data.Functor.Classes.$tcOrd4_closure" {
     Data.Functor.Classes.$tcOrd4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcOrd5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.703113976 UTC

[section ""data" . Data.Functor.Classes.$tcOrd1_closure" {
     Data.Functor.Classes.$tcOrd1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcOrd4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 11825914698899667233;
         const 4554948325937498991;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.705021868 UTC

[section ""cstring" . Data.Functor.Classes.$tcRead5_bytes" {
     Data.Functor.Classes.$tcRead5_bytes:
         I8[] [82,101,97,100,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.706820216 UTC

[section ""data" . Data.Functor.Classes.$tcRead4_closure" {
     Data.Functor.Classes.$tcRead4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcRead5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.709289933 UTC

[section ""data" . Data.Functor.Classes.$tcRead1_closure" {
     Data.Functor.Classes.$tcRead1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcRead4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 14547308444716217043;
         const 925634574698086715;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.711253587 UTC

[section ""cstring" . Data.Functor.Classes.$tcShow5_bytes" {
     Data.Functor.Classes.$tcShow5_bytes:
         I8[] [83,104,111,119,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.713064312 UTC

[section ""data" . Data.Functor.Classes.$tcShow4_closure" {
     Data.Functor.Classes.$tcShow4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcShow5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.71485039 UTC

[section ""data" . Data.Functor.Classes.$tcShow1_closure" {
     Data.Functor.Classes.$tcShow1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcShow4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 4743290066722511112;
         const 6779909240154408836;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.716705102 UTC

[section ""cstring" . Data.Functor.Classes.$tcEq9_bytes" {
     Data.Functor.Classes.$tcEq9_bytes:
         I8[] [69,113,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.719010476 UTC

[section ""data" . Data.Functor.Classes.$tcEq8_closure" {
     Data.Functor.Classes.$tcEq8_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcEq9_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.720823059 UTC

[section ""data" . Data.Functor.Classes.$tcEq2_closure" {
     Data.Functor.Classes.$tcEq2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcEq8_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 16920549266159426738;
         const 13264288076834164909;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.722687183 UTC

[section ""cstring" . Data.Functor.Classes.$tcOrd7_bytes" {
     Data.Functor.Classes.$tcOrd7_bytes:
         I8[] [79,114,100,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.724403558 UTC

[section ""data" . Data.Functor.Classes.$tcOrd6_closure" {
     Data.Functor.Classes.$tcOrd6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcOrd7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.726274278 UTC

[section ""data" . Data.Functor.Classes.$tcOrd2_closure" {
     Data.Functor.Classes.$tcOrd2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcOrd6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 4167316048525678806;
         const 17649124474771181823;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.72815398 UTC

[section ""cstring" . Data.Functor.Classes.$tcRead7_bytes" {
     Data.Functor.Classes.$tcRead7_bytes:
         I8[] [82,101,97,100,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.729921082 UTC

[section ""data" . Data.Functor.Classes.$tcRead6_closure" {
     Data.Functor.Classes.$tcRead6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcRead7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.731789179 UTC

[section ""data" . Data.Functor.Classes.$tcRead2_closure" {
     Data.Functor.Classes.$tcRead2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcRead6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 615267248700376470;
         const 8978126042197021701;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.734157697 UTC

[section ""cstring" . Data.Functor.Classes.$tcShow7_bytes" {
     Data.Functor.Classes.$tcShow7_bytes:
         I8[] [83,104,111,119,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.735944687 UTC

[section ""data" . Data.Functor.Classes.$tcShow6_closure" {
     Data.Functor.Classes.$tcShow6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcShow7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.73845585 UTC

[section ""data" . Data.Functor.Classes.$tcShow2_closure" {
     Data.Functor.Classes.$tcShow2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcShow6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 11321900378419812635;
         const 1323607160578303441;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.740970898 UTC

[section ""data" . Data.Functor.Classes.C:Show2_closure" {
     Data.Functor.Classes.C:Show2_closure:
         const Data.Functor.Classes.C:Show2_info;
 },
 Data.Functor.Classes.C:Show2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdExB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdExF; else goto cdExE;
       cdExF: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Show2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdExE: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Show2_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show2_info" {
     Data.Functor.Classes.C:Show2_info:
         const Data.Functor.Classes.C:Show2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.745180867 UTC

[section ""data" . Data.Functor.Classes.C:Read2_closure" {
     Data.Functor.Classes.C:Read2_closure:
         const Data.Functor.Classes.C:Read2_info;
 },
 Data.Functor.Classes.C:Read2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdExQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdExU; else goto cdExT;
       cdExU: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Read2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdExT: // global
           I64[Hp - 32] = Data.Functor.Classes.C:Read2_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read2_info" {
     Data.Functor.Classes.C:Read2_info:
         const Data.Functor.Classes.C:Read2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.751662249 UTC

[section ""data" . Data.Functor.Classes.C:Ord2_closure" {
     Data.Functor.Classes.C:Ord2_closure:
         const Data.Functor.Classes.C:Ord2_info;
 },
 Data.Functor.Classes.C:Ord2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdEy5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEy9; else goto cdEy8;
       cdEy9: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Ord2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEy8: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Ord2_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord2_info" {
     Data.Functor.Classes.C:Ord2_info:
         const Data.Functor.Classes.C:Ord2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.756611905 UTC

[section ""data" . Data.Functor.Classes.C:Show1_closure" {
     Data.Functor.Classes.C:Show1_closure:
         const Data.Functor.Classes.C:Show1_info;
 },
 Data.Functor.Classes.C:Show1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdEyk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEyo; else goto cdEyn;
       cdEyo: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Show1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEyn: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show1_info" {
     Data.Functor.Classes.C:Show1_info:
         const Data.Functor.Classes.C:Show1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.761198444 UTC

[section ""data" . Data.Functor.Classes.C:Read1_closure" {
     Data.Functor.Classes.C:Read1_closure:
         const Data.Functor.Classes.C:Read1_info;
 },
 Data.Functor.Classes.C:Read1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdEyz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdEyD; else goto cdEyC;
       cdEyD: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Read1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEyC: // global
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read1_info" {
     Data.Functor.Classes.C:Read1_info:
         const Data.Functor.Classes.C:Read1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.765771458 UTC

[section ""data" . Data.Functor.Classes.C:Ord1_closure" {
     Data.Functor.Classes.C:Ord1_closure:
         const Data.Functor.Classes.C:Ord1_info;
 },
 Data.Functor.Classes.C:Ord1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdEyO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdEyS; else goto cdEyR;
       cdEyS: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Ord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdEyR: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord1_info" {
     Data.Functor.Classes.C:Ord1_info:
         const Data.Functor.Classes.C:Ord1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.770279039 UTC

[section ""cstring" . idC29_str" {
     idC29_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,83,104,111,119,50]
 },
 Data.Functor.Classes.C:Show2_con_entry() //  [R1]
         { []
         }
     {offset
       cdEyY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show2_con_info" {
     Data.Functor.Classes.C:Show2_con_info:
         const Data.Functor.Classes.C:Show2_con_entry;
         const 2;
         const 4;
         const idC29_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.77414347 UTC

[section ""cstring" . idC2b_str" {
     idC2b_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,82,101,97,100,50]
 },
 Data.Functor.Classes.C:Read2_con_entry() //  [R1]
         { []
         }
     {offset
       cdEz4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read2_con_info" {
     Data.Functor.Classes.C:Read2_con_info:
         const Data.Functor.Classes.C:Read2_con_entry;
         const 4;
         const 1;
         const idC2b_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.778491241 UTC

[section ""cstring" . idC2d_str" {
     idC2d_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,79,114,100,50]
 },
 Data.Functor.Classes.C:Ord2_con_entry() //  [R1]
         { []
         }
     {offset
       cdEza: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord2_con_info" {
     Data.Functor.Classes.C:Ord2_con_info:
         const Data.Functor.Classes.C:Ord2_con_entry;
         const 2;
         const 4;
         const idC2d_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.782355395 UTC

[section ""cstring" . idC2f_str" {
     idC2f_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,83,104,111,119,49]
 },
 Data.Functor.Classes.C:Show1_con_entry() //  [R1]
         { []
         }
     {offset
       cdEzg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show1_con_info" {
     Data.Functor.Classes.C:Show1_con_info:
         const Data.Functor.Classes.C:Show1_con_entry;
         const 2;
         const 4;
         const idC2f_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.786138495 UTC

[section ""cstring" . idC2h_str" {
     idC2h_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,82,101,97,100,49]
 },
 Data.Functor.Classes.C:Read1_con_entry() //  [R1]
         { []
         }
     {offset
       cdEzm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read1_con_info" {
     Data.Functor.Classes.C:Read1_con_info:
         const Data.Functor.Classes.C:Read1_con_entry;
         const 4;
         const 1;
         const idC2h_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.789756708 UTC

[section ""cstring" . idC2j_str" {
     idC2j_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,79,114,100,49]
 },
 Data.Functor.Classes.C:Ord1_con_entry() //  [R1]
         { []
         }
     {offset
       cdEzs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord1_con_info" {
     Data.Functor.Classes.C:Ord1_con_info:
         const Data.Functor.Classes.C:Ord1_con_entry;
         const 2;
         const 4;
         const idC2j_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:46.793570959 UTC

[section ""relreadonly" . SdyRV_srt" {
     SdyRV_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Classes.$fRead1Const2_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Classes.$w$cliftReadPrec1_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec7_closure;
         const Data.Functor.Classes.$fRead1Either1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Classes.$fRead1Either4_closure;
         const Data.Functor.Classes.$w$cliftReadPrec3_closure;
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec8_closure;
         const Data.Functor.Classes.$fRead1NonEmpty3_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec5_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure;
         const Data.Functor.Classes.$fRead1Proxy2_closure;
         const Data.Functor.Classes.$fRead1Proxy_lexeme_closure;
         const Data.Functor.Classes.$fRead1Proxy1_closure;
         const Data.Functor.Classes.$fRead1Proxy3_closure;
         const Data.Functor.Classes.$fShow1Proxy2_closure;
         const Data.Functor.Classes.$fRead1(,)3_closure;
         const Data.Functor.Classes.$w$cliftReadPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec6_closure;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$dmliftReadList2_closure;
         const Data.Functor.Classes.$fShow1Proxy1_closure;
         const Data.Functor.Classes.$dmliftReadList_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec2_closure;
         const Data.Functor.Classes.liftReadListPrecDefault_closure;
         const lvl_rdymy_closure;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure;
         const lvl1_rdymz_closure;
         const lvl2_rdymA_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Classes.$w$cliftReadList2_closure;
         const Data.Functor.Classes.$fRead2Either_closure;
         const Data.Functor.Classes.$fRead2Const_closure;
         const Data.Functor.Classes.$fRead2(,)_closure;
         const Data.Functor.Classes.liftReadListPrec2Default_closure;
         const Data.Functor.Classes.$fRead1(,)1_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec_closure;
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1(,)_closure;
         const GHC.Read.lex1_closure;
         const Data.Functor.Classes.$wreadsData_closure;
         const Data.Functor.Classes.readsData_closure;
         const Data.Functor.Classes.readData1_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Classes.$wreadUnaryWith_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Classes.readUnaryWith1_closure;
         const Data.Functor.Classes.$fRead1Const5_closure;
         const Data.Functor.Classes.$w$cliftReadPrec1_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec1_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec_closure;
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Const_closure;
         const Data.Functor.Classes.$fRead1Either7_closure;
         const Data.Functor.Classes.$w$cliftReadPrec3_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec1_closure;
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Either_closure;
         const Data.Functor.Classes.$fRead1Identity2_closure;
         const Data.Functor.Classes.$w$cliftReadPrec_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec3_closure;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$w$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Maybe5_closure;
         const Data.Functor.Classes.$fRead1Maybe_lexeme_closure;
         const Data.Functor.Classes.$fRead1Maybe2_closure;
         const Data.Functor.Classes.$w$cliftReadPrec4_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec4_closure;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$w$cliftReadList1_closure;
         const Data.Functor.Classes.$wreadBinaryWith_closure;
         const Data.Functor.Classes.readBinaryWith1_closure;
         const Data.Functor.Classes.$fRead1Const3_closure;
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure;
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure;
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_closure;
         const Data.Functor.Classes.$fShow1Const_closure;
         const Data.Functor.Classes.$fRead1Either2_closure;
         const Data.Functor.Classes.$fRead1Either5_closure;
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure;
         const Data.Functor.Classes.$w$cliftShowList4_closure;
         const Data.Functor.Classes.$w$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$w$cliftShowList1_closure;
         const Data.Functor.Classes.$fShow1Either_closure;
         const Data.Functor.Classes.$fRead1Identity3_closure;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure;
         const Data.Functor.Classes.$fRead1Maybe6_closure;
         const Data.Functor.Classes.$fRead1Maybe3_closure;
         const Data.Functor.Classes.$fShow1Maybe1_closure;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$w$cliftShowList2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.89080238 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:53.892723498 UTC

[section ""data" . Data.Functor.Classes.liftShowsPrec2_closure" {
     Data.Functor.Classes.liftShowsPrec2_closure:
         const Data.Functor.Classes.liftShowsPrec2_info;
 },
 Data.Functor.Classes.liftShowsPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdF04: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF05; else goto cdF06;
       cdF05: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF06: // global
           I64[Sp - 8] = block_cdF01_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF0a; else goto cdF02;
       udF0a: // global
           call _cdF01(R1) args: 0, res: 0, upd: 0;
       cdF02: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowsPrec2_info" {
     Data.Functor.Classes.liftShowsPrec2_info:
         const Data.Functor.Classes.liftShowsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF01() //  [R1]
         { []
         }
     {offset
       cdF01: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF01_info" {
     block_cdF01_info:
         const _cdF01;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.898318599 UTC

[section ""data" . Data.Functor.Classes.liftShowList2_closure" {
     Data.Functor.Classes.liftShowList2_closure:
         const Data.Functor.Classes.liftShowList2_info;
 },
 Data.Functor.Classes.liftShowList2_entry() //  [R2]
         { []
         }
     {offset
       cdF0s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF0t; else goto cdF0u;
       cdF0t: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF0u: // global
           I64[Sp - 8] = block_cdF0p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF0y; else goto cdF0q;
       udF0y: // global
           call _cdF0p(R1) args: 0, res: 0, upd: 0;
       cdF0q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowList2_info" {
     Data.Functor.Classes.liftShowList2_info:
         const Data.Functor.Classes.liftShowList2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF0p() //  [R1]
         { []
         }
     {offset
       cdF0p: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF0p_info" {
     block_cdF0p_info:
         const _cdF0p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.903926417 UTC

[section ""data" . Data.Functor.Classes.liftReadsPrec2_closure" {
     Data.Functor.Classes.liftReadsPrec2_closure:
         const Data.Functor.Classes.liftReadsPrec2_info;
 },
 Data.Functor.Classes.liftReadsPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdF0Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF0R; else goto cdF0S;
       cdF0R: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF0S: // global
           I64[Sp - 8] = block_cdF0N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF0W; else goto cdF0O;
       udF0W: // global
           call _cdF0N(R1) args: 0, res: 0, upd: 0;
       cdF0O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadsPrec2_info" {
     Data.Functor.Classes.liftReadsPrec2_info:
         const Data.Functor.Classes.liftReadsPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF0N() //  [R1]
         { []
         }
     {offset
       cdF0N: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF0N_info" {
     block_cdF0N_info:
         const _cdF0N;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.91044136 UTC

[section ""data" . Data.Functor.Classes.liftReadList2_closure" {
     Data.Functor.Classes.liftReadList2_closure:
         const Data.Functor.Classes.liftReadList2_info;
 },
 Data.Functor.Classes.liftReadList2_entry() //  [R2]
         { []
         }
     {offset
       cdF1e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF1f; else goto cdF1g;
       cdF1f: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF1g: // global
           I64[Sp - 8] = block_cdF1b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF1k; else goto cdF1c;
       udF1k: // global
           call _cdF1b(R1) args: 0, res: 0, upd: 0;
       cdF1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList2_info" {
     Data.Functor.Classes.liftReadList2_info:
         const Data.Functor.Classes.liftReadList2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF1b() //  [R1]
         { []
         }
     {offset
       cdF1b: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF1b_info" {
     block_cdF1b_info:
         const _cdF1b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.915702672 UTC

[section ""data" . Data.Functor.Classes.liftReadPrec2_closure" {
     Data.Functor.Classes.liftReadPrec2_closure:
         const Data.Functor.Classes.liftReadPrec2_info;
 },
 Data.Functor.Classes.liftReadPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdF1C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF1D; else goto cdF1E;
       cdF1D: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF1E: // global
           I64[Sp - 8] = block_cdF1z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF1I; else goto cdF1A;
       udF1I: // global
           call _cdF1z(R1) args: 0, res: 0, upd: 0;
       cdF1A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadPrec2_info" {
     Data.Functor.Classes.liftReadPrec2_info:
         const Data.Functor.Classes.liftReadPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF1z() //  [R1]
         { []
         }
     {offset
       cdF1z: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF1z_info" {
     block_cdF1z_info:
         const _cdF1z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.921018222 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec2_closure" {
     Data.Functor.Classes.liftReadListPrec2_closure:
         const Data.Functor.Classes.liftReadListPrec2_info;
 },
 Data.Functor.Classes.liftReadListPrec2_entry() //  [R2]
         { []
         }
     {offset
       cdF20: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF21; else goto cdF22;
       cdF21: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF22: // global
           I64[Sp - 8] = block_cdF1X_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF26; else goto cdF1Y;
       udF26: // global
           call _cdF1X(R1) args: 0, res: 0, upd: 0;
       cdF1Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec2_info" {
     Data.Functor.Classes.liftReadListPrec2_info:
         const Data.Functor.Classes.liftReadListPrec2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF1X() //  [R1]
         { []
         }
     {offset
       cdF1X: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF1X_info" {
     block_cdF1X_info:
         const _cdF1X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.926834025 UTC

[section ""data" . Data.Functor.Classes.$p1Ord2_closure" {
     Data.Functor.Classes.$p1Ord2_closure:
         const Data.Functor.Classes.$p1Ord2_info;
 },
 Data.Functor.Classes.$p1Ord2_entry() //  [R2]
         { []
         }
     {offset
       cdF2o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF2p; else goto cdF2q;
       cdF2p: // global
           R2 = R2;
           R1 = Data.Functor.Classes.$p1Ord2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF2q: // global
           I64[Sp - 8] = block_cdF2l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF2u; else goto cdF2m;
       udF2u: // global
           call _cdF2l(R1) args: 0, res: 0, upd: 0;
       cdF2m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$p1Ord2_info" {
     Data.Functor.Classes.$p1Ord2_info:
         const Data.Functor.Classes.$p1Ord2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF2l() //  [R1]
         { []
         }
     {offset
       cdF2l: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF2l_info" {
     block_cdF2l_info:
         const _cdF2l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.932168112 UTC

[section ""data" . Data.Functor.Classes.liftCompare2_closure" {
     Data.Functor.Classes.liftCompare2_closure:
         const Data.Functor.Classes.liftCompare2_info;
 },
 Data.Functor.Classes.liftCompare2_entry() //  [R2]
         { []
         }
     {offset
       cdF2M: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF2N; else goto cdF2O;
       cdF2N: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftCompare2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF2O: // global
           I64[Sp - 8] = block_cdF2J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF2S; else goto cdF2K;
       udF2S: // global
           call _cdF2J(R1) args: 0, res: 0, upd: 0;
       cdF2K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftCompare2_info" {
     Data.Functor.Classes.liftCompare2_info:
         const Data.Functor.Classes.liftCompare2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF2J() //  [R1]
         { []
         }
     {offset
       cdF2J: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF2J_info" {
     block_cdF2J_info:
         const _cdF2J;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.937208159 UTC

[section ""data" . Data.Functor.Classes.liftEq2_closure" {
     Data.Functor.Classes.liftEq2_closure:
         const Data.Functor.Classes.liftEq2_info;
 },
 Data.Functor.Classes.liftEq2_entry() //  [R2]
         { []
         }
     {offset
       cdF37: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftEq2_info" {
     Data.Functor.Classes.liftEq2_info:
         const Data.Functor.Classes.liftEq2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.944157582 UTC

[section ""data" . Data.Functor.Classes.liftShowsPrec_closure" {
     Data.Functor.Classes.liftShowsPrec_closure:
         const Data.Functor.Classes.liftShowsPrec_info;
 },
 Data.Functor.Classes.liftShowsPrec_entry() //  [R2]
         { []
         }
     {offset
       cdF3l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF3m; else goto cdF3n;
       cdF3m: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF3n: // global
           I64[Sp - 8] = block_cdF3i_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF3r; else goto cdF3j;
       udF3r: // global
           call _cdF3i(R1) args: 0, res: 0, upd: 0;
       cdF3j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowsPrec_info" {
     Data.Functor.Classes.liftShowsPrec_info:
         const Data.Functor.Classes.liftShowsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF3i() //  [R1]
         { []
         }
     {offset
       cdF3i: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF3i_info" {
     block_cdF3i_info:
         const _cdF3i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.949843956 UTC

[section ""data" . Data.Functor.Classes.liftShowList_closure" {
     Data.Functor.Classes.liftShowList_closure:
         const Data.Functor.Classes.liftShowList_info;
 },
 Data.Functor.Classes.liftShowList_entry() //  [R2]
         { []
         }
     {offset
       cdF3J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF3K; else goto cdF3L;
       cdF3K: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftShowList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF3L: // global
           I64[Sp - 8] = block_cdF3G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF3P; else goto cdF3H;
       udF3P: // global
           call _cdF3G(R1) args: 0, res: 0, upd: 0;
       cdF3H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftShowList_info" {
     Data.Functor.Classes.liftShowList_info:
         const Data.Functor.Classes.liftShowList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF3G() //  [R1]
         { []
         }
     {offset
       cdF3G: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF3G_info" {
     block_cdF3G_info:
         const _cdF3G;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.955240879 UTC

[section ""data" . Data.Functor.Classes.liftReadsPrec_closure" {
     Data.Functor.Classes.liftReadsPrec_closure:
         const Data.Functor.Classes.liftReadsPrec_info;
 },
 Data.Functor.Classes.liftReadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cdF47: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF48; else goto cdF49;
       cdF48: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF49: // global
           I64[Sp - 8] = block_cdF44_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF4d; else goto cdF45;
       udF4d: // global
           call _cdF44(R1) args: 0, res: 0, upd: 0;
       cdF45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadsPrec_info" {
     Data.Functor.Classes.liftReadsPrec_info:
         const Data.Functor.Classes.liftReadsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF44() //  [R1]
         { []
         }
     {offset
       cdF44: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF44_info" {
     block_cdF44_info:
         const _cdF44;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.961039156 UTC

[section ""data" . Data.Functor.Classes.liftReadList_closure" {
     Data.Functor.Classes.liftReadList_closure:
         const Data.Functor.Classes.liftReadList_info;
 },
 Data.Functor.Classes.liftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdF4v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF4w; else goto cdF4x;
       cdF4w: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF4x: // global
           I64[Sp - 8] = block_cdF4s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF4B; else goto cdF4t;
       udF4B: // global
           call _cdF4s(R1) args: 0, res: 0, upd: 0;
       cdF4t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList_info" {
     Data.Functor.Classes.liftReadList_info:
         const Data.Functor.Classes.liftReadList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF4s() //  [R1]
         { []
         }
     {offset
       cdF4s: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF4s_info" {
     block_cdF4s_info:
         const _cdF4s;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.966561227 UTC

[section ""data" . Data.Functor.Classes.liftReadPrec_closure" {
     Data.Functor.Classes.liftReadPrec_closure:
         const Data.Functor.Classes.liftReadPrec_info;
 },
 Data.Functor.Classes.liftReadPrec_entry() //  [R2]
         { []
         }
     {offset
       cdF4T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF4U; else goto cdF4V;
       cdF4U: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF4V: // global
           I64[Sp - 8] = block_cdF4Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF4Z; else goto cdF4R;
       udF4Z: // global
           call _cdF4Q(R1) args: 0, res: 0, upd: 0;
       cdF4R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadPrec_info" {
     Data.Functor.Classes.liftReadPrec_info:
         const Data.Functor.Classes.liftReadPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF4Q() //  [R1]
         { []
         }
     {offset
       cdF4Q: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF4Q_info" {
     block_cdF4Q_info:
         const _cdF4Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.971873784 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec_closure" {
     Data.Functor.Classes.liftReadListPrec_closure:
         const Data.Functor.Classes.liftReadListPrec_info;
 },
 Data.Functor.Classes.liftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdF5h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF5i; else goto cdF5j;
       cdF5i: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF5j: // global
           I64[Sp - 8] = block_cdF5e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF5n; else goto cdF5f;
       udF5n: // global
           call _cdF5e(R1) args: 0, res: 0, upd: 0;
       cdF5f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec_info" {
     Data.Functor.Classes.liftReadListPrec_info:
         const Data.Functor.Classes.liftReadListPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF5e() //  [R1]
         { []
         }
     {offset
       cdF5e: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF5e_info" {
     block_cdF5e_info:
         const _cdF5e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.977726628 UTC

[section ""data" . Data.Functor.Classes.$p1Ord1_closure" {
     Data.Functor.Classes.$p1Ord1_closure:
         const Data.Functor.Classes.$p1Ord1_info;
 },
 Data.Functor.Classes.$p1Ord1_entry() //  [R2]
         { []
         }
     {offset
       cdF5F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF5G; else goto cdF5H;
       cdF5G: // global
           R2 = R2;
           R1 = Data.Functor.Classes.$p1Ord1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF5H: // global
           I64[Sp - 8] = block_cdF5C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF5L; else goto cdF5D;
       udF5L: // global
           call _cdF5C(R1) args: 0, res: 0, upd: 0;
       cdF5D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$p1Ord1_info" {
     Data.Functor.Classes.$p1Ord1_info:
         const Data.Functor.Classes.$p1Ord1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF5C() //  [R1]
         { []
         }
     {offset
       cdF5C: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF5C_info" {
     block_cdF5C_info:
         const _cdF5C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.983312998 UTC

[section ""data" . Data.Functor.Classes.liftCompare_closure" {
     Data.Functor.Classes.liftCompare_closure:
         const Data.Functor.Classes.liftCompare_info;
 },
 Data.Functor.Classes.liftCompare_entry() //  [R2]
         { []
         }
     {offset
       cdF63: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdF64; else goto cdF65;
       cdF64: // global
           R2 = R2;
           R1 = Data.Functor.Classes.liftCompare_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF65: // global
           I64[Sp - 8] = block_cdF60_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udF69; else goto cdF61;
       udF69: // global
           call _cdF60(R1) args: 0, res: 0, upd: 0;
       cdF61: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftCompare_info" {
     Data.Functor.Classes.liftCompare_info:
         const Data.Functor.Classes.liftCompare_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdF60() //  [R1]
         { []
         }
     {offset
       cdF60: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF60_info" {
     block_cdF60_info:
         const _cdF60;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.988232678 UTC

[section ""data" . Data.Functor.Classes.liftEq_closure" {
     Data.Functor.Classes.liftEq_closure:
         const Data.Functor.Classes.liftEq_info;
 },
 Data.Functor.Classes.liftEq_entry() //  [R2]
         { []
         }
     {offset
       cdF6o: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftEq_info" {
     Data.Functor.Classes.liftEq_info:
         const Data.Functor.Classes.liftEq_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.991206476 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const1_closure" {
     Data.Functor.Classes.$fRead1Const1_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.992824809 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Const4_bytes" {
     Data.Functor.Classes.$fRead1Const4_bytes:
         I8[] [67,111,110,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.995093389 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const3_closure" {
     Data.Functor.Classes.$fRead1Const3_closure:
         const Data.Functor.Classes.$fRead1Const3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const3_entry() //  [R1]
         { []
         }
     {offset
       cdF6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdF6E; else goto cdF6F;
       cdF6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdF6F: // global
           (_cdF6A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdF6A::I64 == 0) goto cdF6C; else goto cdF6B;
       cdF6C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdF6B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdF6A::I64;
           R2 = Data.Functor.Classes.$fRead1Const4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const3_info" {
     Data.Functor.Classes.$fRead1Const3_info:
         const Data.Functor.Classes.$fRead1Const3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:53.999202916 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const2_closure" {
     Data.Functor.Classes.$fRead1Const2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Const3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.003493132 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadPrec1_info;
         const 0;
 },
 sat_sdEB3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdF7h: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEB3_info" {
     sat_sdEB3_info:
         const sat_sdEB3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEB4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdF7k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF7o; else goto cdF7n;
       cdF7o: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF7n: // global
           _sdEAT::P64 = P64[R1 + 7];
           _sdEAX::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdEB3_info;
           P64[Hp] = _sdEAX::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdEAT::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEB4_info" {
     sat_sdEB4_info:
         const sat_sdEB4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEB7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdF7p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdF7q; else goto cdF7r;
       cdF7q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdF7r: // global
           I64[Sp - 24] = block_cdF6Y_info;
           _sdEAT::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdEAT::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udF7E; else goto cdF6Z;
       udF7E: // global
           call _cdF6Y(R1) args: 0, res: 0, upd: 0;
       cdF6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEB7_info" {
     sat_sdEB7_info:
         const sat_sdEB7_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SdF7K_srt;
 },
 _cdF6Y() //  [R1]
         { []
         }
     {offset
       cdF6Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdF7u; else goto cdF7t;
       cdF7u: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdF7t: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdF7w; else goto cdF7A;
       cdF7w: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdF7A: // global
           I64[Hp - 16] = sat_sdEB4_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdF7x_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Const2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF6Y_info" {
     block_cdF6Y_info:
         const _cdF6Y;
         const 2;
         const 12884901918;
         const SdF7K_srt;
 },
 _cdF7x() //  [R1]
         { []
         }
     {offset
       cdF7x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF7D; else goto cdF7C;
       cdF7D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdF7C: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF7x_info" {
     block_cdF7x_info:
         const _cdF7x;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdF7F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF7J; else goto cdF7I;
       cdF7J: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdF7I: // global
           I64[Hp - 8] = sat_sdEB7_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec1_info" {
     Data.Functor.Classes.$w$cliftReadPrec1_info:
         const Data.Functor.Classes.$w$cliftReadPrec1_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const SdF7K_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.016202228 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const6_closure" {
     Data.Functor.Classes.$fRead1Const6_closure:
         const Data.Functor.Classes.$fRead1Const6_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const6_entry() //  [R2, R6]
         { []
         }
     {offset
       cdF8l: // global
           R4 = P64[Sp];
           R3 = R6;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const6_info" {
     Data.Functor.Classes.$fRead1Const6_info:
         const Data.Functor.Classes.$fRead1Const6_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdF7K_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.02006134 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdEBk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdF8B: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBk_info" {
     sat_sdEBk_info:
         const sat_sdEBk_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+24;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_entry() //  [R2,
                                                                    R3, R4, R5]
         { []
         }
     {offset
       cdF8E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF8I; else goto cdF8H;
       cdF8I: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdF8H: // global
           I64[Hp - 8] = sat_sdEBk_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SdF7K_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.028694656 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec7_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec7_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec7_info;
         const 0;
 },
 lvl3_sdEBn_entry() //  [R1]
         { []
         }
     {offset
       cdF93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdF94; else goto cdF95;
       cdF94: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdF95: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEBn_info" {
     lvl3_sdEBn_info:
         const lvl3_sdEBn_entry;
         const 1;
         const 16;
 },
 sat_sdEBv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdF9u: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBv_info" {
     sat_sdEBv_info:
         const sat_sdEBv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEBy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdF9A: // global
           _sdEBt::P64 = R2;
           _sdEBy::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdF9B; else goto cdF9C;
       cdF9C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF9E; else goto cdF9D;
       cdF9E: // global
           HpAlloc = 16;
           goto cdF9B;
       cdF9B: // global
           R2 = _sdEBt::P64;
           R1 = _sdEBy::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdF9D: // global
           _sdEBn::P64 = P64[_sdEBy::P64 + 7];
           _sdEBp::P64 = P64[_sdEBy::P64 + 15];
           I64[Hp - 8] = sat_sdEBv_info;
           P64[Hp] = _sdEBp::P64;
           I64[Sp - 8] = block_cdF9x_info;
           R3 = Hp - 7;
           R2 = _sdEBn::P64;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBy_info" {
     sat_sdEBy_info:
         const sat_sdEBy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdF9x() //  [R1]
         { []
         }
     {offset
       cdF9x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF9H; else goto cdF9G;
       cdF9H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdF9G: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF9x_info" {
     block_cdF9x_info:
         const _cdF9x;
         const 0;
         const 30;
 },
 sat_sdEBB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdF9I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdF9J; else goto cdF9K;
       cdF9J: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdF9K: // global
           I64[Sp - 24] = block_cdF9b_info;
           _sdEBn::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdEBn::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udF9X; else goto cdF9c;
       udF9X: // global
           call _cdF9b(R1) args: 0, res: 0, upd: 0;
       cdF9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBB_info" {
     sat_sdEBB_info:
         const sat_sdEBB_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const SdF7K_srt;
 },
 _cdF9b() //  [R1]
         { []
         }
     {offset
       cdF9b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdF9N; else goto cdF9M;
       cdF9N: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdF9M: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdF9P; else goto cdF9T;
       cdF9P: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdF9T: // global
           I64[Hp - 16] = sat_sdEBy_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdF9Q_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Const2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF9b_info" {
     block_cdF9b_info:
         const _cdF9b;
         const 2;
         const 12884901918;
         const SdF7K_srt;
 },
 _cdF9Q() //  [R1]
         { []
         }
     {offset
       cdF9Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdF9W; else goto cdF9V;
       cdF9W: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdF9V: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdF9Q_info" {
     block_cdF9Q_info:
         const _cdF9Q;
         const 0;
         const 30;
 },
 sat_sdEBC_entry() //  [R1]
         { []
         }
     {offset
       cdF9Y: // global
           _sdEBC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdF9Z; else goto cdFa0;
       cdFa0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdFa2; else goto cdFa1;
       cdFa2: // global
           HpAlloc = 40;
           goto cdF9Z;
       cdF9Z: // global
           R1 = _sdEBC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFa1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEBC::P64;
           _sdEBl::P64 = P64[_sdEBC::P64 + 16];
           _sdEBm::P64 = P64[_sdEBC::P64 + 24];
           I64[Hp - 32] = lvl3_sdEBn_info;
           P64[Hp - 16] = _sdEBl::P64;
           I64[Hp - 8] = sat_sdEBB_info;
           P64[Hp] = Hp - 32;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdEBm::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEBC_info" {
     sat_sdEBC_info:
         const sat_sdEBC_entry;
         const 2;
         const 30064771090;
         const SdF7K_srt;
 },
 Data.Functor.Classes.$w$cliftReadsPrec7_entry() //  [R2, R3]
         { []
         }
     {offset
       cdFa3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFa7; else goto cdFa6;
       cdFa7: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFa6: // global
           I64[Hp - 24] = sat_sdEBC_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec7_info" {
     Data.Functor.Classes.$w$cliftReadsPrec7_info:
         const Data.Functor.Classes.$w$cliftReadsPrec7_entry;
         const 0;
         const 304942678030;
         const 8589934607;
         const SdF7K_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.04633232 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_entry() //  [R2,
                                                                 R6]
         { []
         }
     {offset
       cdFb4: // global
           R3 = R6;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec7_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.049841555 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Either3_bytes" {
     Data.Functor.Classes.$fRead1Either3_bytes:
         I8[] [82,105,103,104,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.052006657 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either2_closure" {
     Data.Functor.Classes.$fRead1Either2_closure:
         const Data.Functor.Classes.$fRead1Either2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either2_entry() //  [R1]
         { []
         }
     {offset
       cdFbi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFbj; else goto cdFbk;
       cdFbj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFbk: // global
           (_cdFbf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdFbf::I64 == 0) goto cdFbh; else goto cdFbg;
       cdFbh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdFbg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdFbf::I64;
           R2 = Data.Functor.Classes.$fRead1Either3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either2_info" {
     Data.Functor.Classes.$fRead1Either2_info:
         const Data.Functor.Classes.$fRead1Either2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.055549308 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either1_closure" {
     Data.Functor.Classes.$fRead1Either1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Either2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.05723343 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Either6_bytes" {
     Data.Functor.Classes.$fRead1Either6_bytes:
         I8[] [76,101,102,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.059422893 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either5_closure" {
     Data.Functor.Classes.$fRead1Either5_closure:
         const Data.Functor.Classes.$fRead1Either5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either5_entry() //  [R1]
         { []
         }
     {offset
       cdFbB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFbC; else goto cdFbD;
       cdFbC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFbD: // global
           (_cdFby::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdFby::I64 == 0) goto cdFbA; else goto cdFbz;
       cdFbA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdFbz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdFby::I64;
           R2 = Data.Functor.Classes.$fRead1Either6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either5_info" {
     Data.Functor.Classes.$fRead1Either5_info:
         const Data.Functor.Classes.$fRead1Either5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.063236419 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either4_closure" {
     Data.Functor.Classes.$fRead1Either4_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Either5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.069698606 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec3_closure" {
     Data.Functor.Classes.$w$cliftReadPrec3_closure:
         const Data.Functor.Classes.$w$cliftReadPrec3_info;
         const 0;
 },
 sat_sdEBU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFcg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFck; else goto cdFcj;
       cdFck: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFcj: // global
           _sdEBN::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           R1 = _sdEBN::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBU_info" {
     sat_sdEBU_info:
         const sat_sdEBU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEBV_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFcl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFcp; else goto cdFco;
       cdFcp: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFco: // global
           _sdEBI::P64 = P64[R1 + 7];
           _sdEBN::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdEBU_info;
           P64[Hp] = _sdEBN::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdEBI::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEBV_info" {
     sat_sdEBV_info:
         const sat_sdEBV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEC2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFcH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFcL; else goto cdFcK;
       cdFcL: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFcK: // global
           _sdEBN::P64 = P64[R1 + 7];
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sdEBN::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEC2_info" {
     sat_sdEC2_info:
         const sat_sdEC2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEC3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFcM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFcQ; else goto cdFcP;
       cdFcQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFcP: // global
           _sdEBJ::P64 = P64[R1 + 7];
           _sdEBN::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdEC2_info;
           P64[Hp] = _sdEBN::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdEBJ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEC3_info" {
     sat_sdEC3_info:
         const sat_sdEC3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEC6_entry() //  [R1]
         { []
         }
     {offset
       cdFcU: // global
           _sdEC6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdFcV; else goto cdFcW;
       cdFcW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFcY; else goto cdFcX;
       cdFcY: // global
           HpAlloc = 24;
           goto cdFcV;
       cdFcV: // global
           R1 = _sdEC6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFcX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEC6::P64;
           _sdEBJ::P64 = P64[_sdEC6::P64 + 16];
           _sdEBN::P64 = P64[_sdEC6::P64 + 24];
           I64[Hp - 16] = sat_sdEC3_info;
           P64[Hp - 8] = _sdEBJ::P64;
           P64[Hp] = _sdEBN::P64;
           I64[Sp - 24] = block_cdFcR_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Either1_closure+4;
           Sp = Sp - 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEC6_info" {
     sat_sdEC6_info:
         const sat_sdEC6_entry;
         const 2;
         const 554050781202;
         const SdF7K_srt;
 },
 _cdFcR() //  [R1]
         { []
         }
     {offset
       cdFcR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFd1; else goto cdFd0;
       cdFd1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdFd0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdFcR_info" {
     block_cdFcR_info:
         const _cdFcR;
         const 0;
         const 30;
 },
 sat_sdEC7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFd2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFd3; else goto cdFd4;
       cdFd3: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFd4: // global
           I64[Sp - 32] = block_cdFbW_info;
           _sdEBI::P64 = P64[R1 + 6];
           _sdEBJ::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sdEBI::P64;
           P64[Sp - 16] = _sdEBJ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFdf; else goto cdFbX;
       udFdf: // global
           call _cdFbW(R1) args: 0, res: 0, upd: 0;
       cdFbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEC7_info" {
     sat_sdEC7_info:
         const sat_sdEC7_entry;
         const 2;
         const 3852585664523;
         const 8589934607;
         const SdF7K_srt;
 },
 _cdFbW() //  [R1]
         { []
         }
     {offset
       cdFbW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFd7; else goto cdFd6;
       cdFd7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFd6: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdFd9; else goto cdFdb;
       cdFd9: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFdb: // global
           I64[Hp - 16] = sat_sdEBV_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 8] = block_cdFcq_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Either4_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFbW_info" {
     block_cdFbW_info:
         const _cdFbW;
         const 3;
         const 3852585664542;
         const SdF7K_srt;
 },
 _cdFcq() //  [R1]
         { []
         }
     {offset
       cdFcq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdFde; else goto cdFdd;
       cdFde: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFdd: // global
           I64[Hp - 40] = sat_sdEC6_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 40;
           R2 = Hp - 6;
           Sp = Sp + 24;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFcq_info" {
     block_cdFcq_info:
         const _cdFcq;
         const 2;
         const 1653562408990;
         const SdF7K_srt;
 },
 Data.Functor.Classes.$w$cliftReadPrec3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFdg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFdk; else goto cdFdj;
       cdFdk: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFdj: // global
           I64[Hp - 16] = sat_sdEC7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdEBK::P64 = R4;
           R4 = R5;
           R3 = _sdEBK::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec3_info" {
     Data.Functor.Classes.$w$cliftReadPrec3_info:
         const Data.Functor.Classes.$w$cliftReadPrec3_entry;
         const 0;
         const 8267812044814;
         const 17179869208;
         const SdF7K_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.090026087 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either8_closure" {
     Data.Functor.Classes.$fRead1Either8_closure:
         const Data.Functor.Classes.$fRead1Either8_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either8_entry() //  [R2, R4, R6]
         { []
         }
     {offset
       cdFei: // global
           R5 = P64[Sp];
           _sdECa::P64 = R4;
           R4 = R6;
           R3 = _sdECa::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either8_info" {
     Data.Functor.Classes.$fRead1Either8_info:
         const Data.Functor.Classes.$fRead1Either8_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdF7K_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.094093549 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdECk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFey: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdECk_info" {
     sat_sdECk_info:
         const sat_sdECk_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdF7K_srt+80;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_entry() //  [R2,
                                                                     R3, R4, R5]
         { []
         }
     {offset
       cdFeB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFeF; else goto cdFeE;
       cdFeF: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFeE: // global
           I64[Hp - 16] = sat_sdECk_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_entry;
         const 0;
         const 828928688142;
         const 17179869208;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.100588675 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec8_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec8_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec8_info;
         const 0;
 },
 sat_sdECp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFf1: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdECp_info" {
     sat_sdECp_info:
         const sat_sdECp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdECo_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFf9: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdECo_info" {
     sat_sdECo_info:
         const sat_sdECo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdECq_entry() //  [R1]
         { []
         }
     {offset
       cdFfc: // global
           _sdECq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFfd; else goto cdFfe;
       cdFfe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFfg; else goto cdFff;
       cdFfg: // global
           HpAlloc = 32;
           goto cdFfd;
       cdFfd: // global
           R1 = _sdECq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdECq::P64;
           _sdECl::P64 = P64[_sdECq::P64 + 16];
           _sdECm::P64 = P64[_sdECq::P64 + 24];
           _sdECn::P64 = P64[_sdECq::P64 + 32];
           I64[Hp - 24] = sat_sdECp_info;
           P64[Hp - 16] = _sdECm::P64;
           I64[Hp - 8] = sat_sdECo_info;
           P64[Hp] = _sdECl::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdECn::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdECq_info" {
     sat_sdECq_info:
         const sat_sdECq_entry;
         const 3;
         const 4294967311;
         const SdF7K_srt+80;
 },
 Data.Functor.Classes.$w$cliftReadsPrec8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFfh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdFfl; else goto cdFfk;
       cdFfl: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFfk: // global
           I64[Hp - 32] = sat_sdECq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec8_info" {
     Data.Functor.Classes.$w$cliftReadsPrec8_info:
         const Data.Functor.Classes.$w$cliftReadsPrec8_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SdF7K_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.109743287 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_entry() //  [R2,
                                                                  R4, R6]
         { []
         }
     {offset
       cdFfK: // global
           _sdECt::P64 = R4;
           R4 = R6;
           R3 = _sdECt::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec8_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.114738973 UTC

[section ""data" . Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFg2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFg3; else goto cdFg4;
       cdFg3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFg4: // global
           I64[Sp - 24] = block_cdFfV_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFgF; else goto cdFfW;
       udFgF: // global
           call _cdFfV(R1) args: 0, res: 0, upd: 0;
       cdFfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Maybe_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Maybe_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFfV() //  [R1]
         { []
         }
     {offset
       cdFfV: // global
           _sdECy::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdFfZ; else goto cdFg0;
       cdFfZ: // global
           I64[Sp + 16] = block_cdFg7_info;
           R1 = _sdECy::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto udFgD; else goto cdFg9;
       udFgD: // global
           call _cdFg7(R1) args: 0, res: 0, upd: 0;
       cdFg9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFg0: // global
           I64[Sp] = block_cdFgm_info;
           _sdECC::P64 = P64[R1 + 6];
           R1 = _sdECy::P64;
           P64[Sp + 16] = _sdECC::P64;
           if (R1 & 7 != 0) goto udFgE; else goto cdFgo;
       udFgE: // global
           call _cdFgm(R1) args: 0, res: 0, upd: 0;
       cdFgo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFfV_info" {
     block_cdFfV_info:
         const _cdFfV;
         const 2;
         const 30;
 },
 _cdFg7() //  [R1]
         { []
         }
     {offset
       cdFg7: // global
           if (R1 & 7 == 1) goto cdFgf; else goto udFgC;
       cdFgf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udFgC: // global
           Sp = Sp + 8;
           call _cdFgu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFg7_info" {
     block_cdFg7_info:
         const _cdFg7;
         const 0;
         const 30;
 },
 _cdFgm() //  [R1]
         { []
         }
     {offset
       cdFgm: // global
           if (R1 & 7 == 1) goto udFgB; else goto cdFgy;
       udFgB: // global
           Sp = Sp + 24;
           call _cdFgu() args: 0, res: 0, upd: 0;
       cdFgy: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFgm_info" {
     block_cdFgm_info:
         const _cdFgm;
         const 2;
         const 30;
 },
 _cdFgu() //  []
         { []
         }
     {offset
       cdFgu: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.125139169 UTC

[section ""data" . Data.Functor.Classes.$fEq1Maybe_closure" {
     Data.Functor.Classes.$fEq1Maybe_closure:
         const Data.Functor.Classes.$fEq1Maybe_info;
 },
 Data.Functor.Classes.$fEq1Maybe_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFhi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Maybe_$cliftEq_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Maybe_info" {
     Data.Functor.Classes.$fEq1Maybe_info:
         const Data.Functor.Classes.$fEq1Maybe_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.130847045 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdFhA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFhB; else goto udFil;
       cdFhB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       udFil: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdFhq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_info:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFhq() //  []
         { []
         }
     {offset
       cdFhq: // global
           I64[Sp - 8] = block_cdFht_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFiq; else goto cdFhu;
       udFiq: // global
           call _cdFht(R1) args: 0, res: 0, upd: 0;
       cdFhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdFht() //  [R1]
         { []
         }
     {offset
       cdFht: // global
           _sdECH::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFhx; else goto cdFhy;
       cdFhx: // global
           I64[Sp + 24] = block_cdFhF_info;
           R1 = _sdECH::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto udFir; else goto cdFhH;
       udFir: // global
           call _cdFhF(R1) args: 0, res: 0, upd: 0;
       cdFhH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFhy: // global
           I64[Sp] = block_cdFhU_info;
           _sdECM::P64 = P64[R1 + 6];
           _sdECN::P64 = P64[R1 + 14];
           R1 = _sdECH::P64;
           P64[Sp + 16] = _sdECN::P64;
           P64[Sp + 24] = _sdECM::P64;
           if (R1 & 7 != 0) goto udFis; else goto cdFhW;
       udFis: // global
           call _cdFhU(R1) args: 0, res: 0, upd: 0;
       cdFhW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFht_info" {
     block_cdFht_info:
         const _cdFht;
         const 131;
         const 30;
 },
 _cdFhF() //  [R1]
         { []
         }
     {offset
       cdFhF: // global
           if (R1 & 7 == 1) goto cdFhN; else goto udFip;
       cdFhN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udFip: // global
           Sp = Sp + 8;
           call _cdFid() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFhF_info" {
     block_cdFhF_info:
         const _cdFhF;
         const 0;
         const 30;
 },
 _cdFhU() //  [R1]
         { []
         }
     {offset
       cdFhU: // global
           if (R1 & 7 == 1) goto udFim; else goto cdFi7;
       udFim: // global
           Sp = Sp + 32;
           call _cdFid() args: 0, res: 0, upd: 0;
       cdFi7: // global
           I64[Sp] = block_cdFi5_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           _sdECQ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _sdECQ::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFhU_info" {
     block_cdFhU_info:
         const _cdFhU;
         const 3;
         const 30;
 },
 _cdFi5() //  [R1]
         { []
         }
     {offset
       cdFi5: // global
           if (R1 & 7 == 1) goto udFin; else goto cdFih;
       udFin: // global
           Sp = Sp + 32;
           call _cdFid() args: 0, res: 0, upd: 0;
       cdFih: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _cdFhq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFi5_info" {
     block_cdFi5_info:
         const _cdFi5;
         const 3;
         const 30;
 },
 _cdFid() //  []
         { []
         }
     {offset
       cdFid: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.143129544 UTC

[section ""data" . Data.Functor.Classes.$fEq1[]_closure" {
     Data.Functor.Classes.$fEq1[]_closure:
         const Data.Functor.Classes.$fEq1[]_info;
 },
 Data.Functor.Classes.$fEq1[]_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFjj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1[]_info" {
     Data.Functor.Classes.$fEq1[]_info:
         const Data.Functor.Classes.$fEq1[]_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.147149097 UTC

[section ""data" . Data.Functor.Classes.$w$cliftEq_closure" {
     Data.Functor.Classes.$w$cliftEq_closure:
         const Data.Functor.Classes.$w$cliftEq_info;
 },
 Data.Functor.Classes.$w$cliftEq_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdFjA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFjB; else goto cdFjC;
       cdFjB: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftEq_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFjC: // global
           I64[Sp - 32] = block_cdFju_info;
           _sdECT::P64 = R3;
           R3 = R5;
           _sdECS::P64 = R2;
           R2 = _sdECT::P64;
           R1 = _sdECS::P64;
           P64[Sp - 24] = _sdECS::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftEq_info" {
     Data.Functor.Classes.$w$cliftEq_info:
         const Data.Functor.Classes.$w$cliftEq_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdFju() //  [R1]
         { []
         }
     {offset
       cdFju: // global
           if (R1 & 7 == 1) goto cdFjx; else goto cdFjy;
       cdFjx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFjy: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFju_info" {
     block_cdFju_info:
         const _cdFju;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.153559606 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cdFk3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFk7; else goto cdFk8;
       cdFk7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFk8: // global
           I64[Sp - 24] = block_cdFk0_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFkg; else goto cdFk1;
       udFkg: // global
           call _cdFk0(R1) args: 0, res: 0, upd: 0;
       cdFk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info" {
     Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_info:
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFk0() //  [R1]
         { []
         }
     {offset
       cdFk0: // global
           I64[Sp - 8] = block_cdFk6_info;
           _sdED2::P64 = P64[R1 + 7];
           _sdED3::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdED3::P64;
           P64[Sp + 16] = _sdED2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFkf; else goto cdFka;
       udFkf: // global
           call _cdFk6(R1) args: 0, res: 0, upd: 0;
       cdFka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFk0_info" {
     block_cdFk0_info:
         const _cdFk0;
         const 2;
         const 30;
 },
 _cdFk6() //  [R1]
         { []
         }
     {offset
       cdFk6: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftEq_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFk6_info" {
     block_cdFk6_info:
         const _cdFk6;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.16092107 UTC

[section ""data" . Data.Functor.Classes.$fEq1NonEmpty_closure" {
     Data.Functor.Classes.$fEq1NonEmpty_closure:
         const Data.Functor.Classes.$fEq1NonEmpty_info;
 },
 Data.Functor.Classes.$fEq1NonEmpty_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFkA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1NonEmpty_info" {
     Data.Functor.Classes.$fEq1NonEmpty_info:
         const Data.Functor.Classes.$fEq1NonEmpty_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.164652229 UTC

[section ""data" . Data.Functor.Classes.$fEq1Identity_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Identity_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Identity_$cliftEq_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cdFkL: // global
           _sdED8::P64 = R3;
           R3 = R4;
           _sdED7::P64 = R2;
           R2 = _sdED8::P64;
           R1 = _sdED7::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Identity_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Identity_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.168102347 UTC

[section ""data" . Data.Functor.Classes.$fEq1Identity_closure" {
     Data.Functor.Classes.$fEq1Identity_closure:
         const Data.Functor.Classes.$fEq1Identity_info;
 },
 Data.Functor.Classes.$fEq1Identity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFkW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Identity_$cliftEq_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Identity_info" {
     Data.Functor.Classes.$fEq1Identity_info:
         const Data.Functor.Classes.$fEq1Identity_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.171502288 UTC

[section ""data" . Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry() //  []
         { []
         }
     {offset
       cdFl7: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Proxy_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Proxy_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.175054229 UTC

[section ""data" . Data.Functor.Classes.$fEq1Proxy_closure" {
     Data.Functor.Classes.$fEq1Proxy_closure:
         const Data.Functor.Classes.$fEq1Proxy_info;
 },
 Data.Functor.Classes.$fEq1Proxy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFlk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Proxy_$cliftEq_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Proxy_info" {
     Data.Functor.Classes.$fEq1Proxy_info:
         const Data.Functor.Classes.$fEq1Proxy_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.179702239 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cdFlC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFlD; else goto cdFlE;
       cdFlD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFlE: // global
           I64[Sp - 24] = block_cdFlv_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFmd; else goto cdFlw;
       udFmd: // global
           call _cdFlv(R1) args: 0, res: 0, upd: 0;
       cdFlw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFlv() //  [R1]
         { []
         }
     {offset
       cdFlv: // global
           _sdEDf::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdFlz; else goto cdFlA;
       cdFlz: // global
           I64[Sp + 16] = block_cdFlH_info;
           R1 = _sdEDf::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto udFmb; else goto cdFlJ;
       udFmb: // global
           call _cdFlH(R1) args: 0, res: 0, upd: 0;
       cdFlJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFlA: // global
           I64[Sp] = block_cdFlW_info;
           _sdEDj::P64 = P64[R1 + 6];
           R1 = _sdEDf::P64;
           P64[Sp + 16] = _sdEDj::P64;
           if (R1 & 7 != 0) goto udFmc; else goto cdFlY;
       udFmc: // global
           call _cdFlW(R1) args: 0, res: 0, upd: 0;
       cdFlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFlv_info" {
     block_cdFlv_info:
         const _cdFlv;
         const 2;
         const 30;
 },
 _cdFlH() //  [R1]
         { []
         }
     {offset
       cdFlH: // global
           if (R1 & 7 == 1) goto cdFlP; else goto cdFlT;
       cdFlP: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFlT: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFlH_info" {
     block_cdFlH_info:
         const _cdFlH;
         const 0;
         const 30;
 },
 _cdFlW() //  [R1]
         { []
         }
     {offset
       cdFlW: // global
           if (R1 & 7 == 1) goto cdFm4; else goto cdFm8;
       cdFm4: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFm8: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFlW_info" {
     block_cdFlW_info:
         const _cdFlW;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.188302908 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Maybe_closure" {
     Data.Functor.Classes.$fOrd1Maybe_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Maybe_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Maybe_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.193138888 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info;
 },
 Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdFmW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFmX; else goto udFnM;
       cdFmX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       udFnM: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdFmM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_info:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFmM() //  []
         { []
         }
     {offset
       cdFmM: // global
           I64[Sp - 8] = block_cdFmP_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFnS; else goto cdFmQ;
       udFnS: // global
           call _cdFmP(R1) args: 0, res: 0, upd: 0;
       cdFmQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdFmP() //  [R1]
         { []
         }
     {offset
       cdFmP: // global
           _sdEDo::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFmT; else goto cdFmU;
       cdFmT: // global
           I64[Sp + 24] = block_cdFn1_info;
           R1 = _sdEDo::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto udFnT; else goto cdFn3;
       udFnT: // global
           call _cdFn1(R1) args: 0, res: 0, upd: 0;
       cdFn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFmU: // global
           I64[Sp] = block_cdFng_info;
           _sdEDt::P64 = P64[R1 + 6];
           _sdEDu::P64 = P64[R1 + 14];
           R1 = _sdEDo::P64;
           P64[Sp + 16] = _sdEDu::P64;
           P64[Sp + 24] = _sdEDt::P64;
           if (R1 & 7 != 0) goto udFnU; else goto cdFni;
       udFnU: // global
           call _cdFng(R1) args: 0, res: 0, upd: 0;
       cdFni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFmP_info" {
     block_cdFmP_info:
         const _cdFmP;
         const 131;
         const 30;
 },
 _cdFn1() //  [R1]
         { []
         }
     {offset
       cdFn1: // global
           if (R1 & 7 == 1) goto cdFn9; else goto udFnR;
       cdFn9: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udFnR: // global
           Sp = Sp + 8;
           call _cdFnz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFn1_info" {
     block_cdFn1_info:
         const _cdFn1;
         const 0;
         const 30;
 },
 _cdFng() //  [R1]
         { []
         }
     {offset
       cdFng: // global
           if (R1 & 7 == 1) goto udFnN; else goto cdFnt;
       udFnN: // global
           Sp = Sp + 32;
           call _cdFnH() args: 0, res: 0, upd: 0;
       cdFnt: // global
           I64[Sp] = block_cdFnr_info;
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 24];
           _sdEDx::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _sdEDx::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFng_info" {
     block_cdFng_info:
         const _cdFng;
         const 3;
         const 30;
 },
 _cdFnr() //  [R1]
         { []
         }
     {offset
       cdFnr: // global
           _cdFnJ::P64 = R1 & 7;
           if (_cdFnJ::P64 < 3) goto udFnL; else goto udFnO;
       udFnL: // global
           if (_cdFnJ::P64 < 2) goto udFnP; else goto cdFnD;
       udFnP: // global
           Sp = Sp + 32;
           call _cdFnz() args: 0, res: 0, upd: 0;
       cdFnD: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 24];
           Sp = Sp + 8;
           call _cdFmM() args: 0, res: 0, upd: 0;
       udFnO: // global
           Sp = Sp + 32;
           call _cdFnH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFnr_info" {
     block_cdFnr_info:
         const _cdFnr;
         const 3;
         const 30;
 },
 _cdFnz() //  []
         { []
         }
     {offset
       cdFnz: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdFnH() //  []
         { []
         }
     {offset
       cdFnH: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.20614804 UTC

[section ""data" . Data.Functor.Classes.$fOrd1[]_closure" {
     Data.Functor.Classes.$fOrd1[]_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1_closure+3;
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.209076883 UTC

[section ""data" . Data.Functor.Classes.$w$cliftCompare1_closure" {
     Data.Functor.Classes.$w$cliftCompare1_closure:
         const Data.Functor.Classes.$w$cliftCompare1_info;
 },
 Data.Functor.Classes.$w$cliftCompare1_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdFoX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFoY; else goto cdFoZ;
       cdFoY: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftCompare1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFoZ: // global
           I64[Sp - 32] = block_cdFoQ_info;
           _sdEDA::P64 = R3;
           R3 = R5;
           _sdEDz::P64 = R2;
           R2 = _sdEDA::P64;
           R1 = _sdEDz::P64;
           P64[Sp - 24] = _sdEDz::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftCompare1_info" {
     Data.Functor.Classes.$w$cliftCompare1_info:
         const Data.Functor.Classes.$w$cliftCompare1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdFoQ() //  [R1]
         { []
         }
     {offset
       cdFoQ: // global
           _cdFoW::P64 = R1 & 7;
           if (_cdFoW::P64 < 3) goto udFp9; else goto cdFoV;
       udFp9: // global
           if (_cdFoW::P64 < 2) goto cdFoT; else goto cdFoU;
       cdFoT: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFoU: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare1_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
       cdFoV: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFoQ_info" {
     block_cdFoQ_info:
         const _cdFoQ;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.215546112 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdFpv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFpz; else goto cdFpA;
       cdFpz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFpA: // global
           I64[Sp - 24] = block_cdFps_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFpI; else goto cdFpt;
       udFpI: // global
           call _cdFps(R1) args: 0, res: 0, upd: 0;
       cdFpt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdFps() //  [R1]
         { []
         }
     {offset
       cdFps: // global
           I64[Sp - 8] = block_cdFpy_info;
           _sdEDJ::P64 = P64[R1 + 7];
           _sdEDK::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdEDK::P64;
           P64[Sp + 16] = _sdEDJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFpH; else goto cdFpC;
       udFpH: // global
           call _cdFpy(R1) args: 0, res: 0, upd: 0;
       cdFpC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFps_info" {
     block_cdFps_info:
         const _cdFps;
         const 2;
         const 30;
 },
 _cdFpy() //  [R1]
         { []
         }
     {offset
       cdFpy: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftCompare1_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFpy_info" {
     block_cdFpy_info:
         const _cdFpy;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.222351848 UTC

[section ""data" . Data.Functor.Classes.$fOrd1NonEmpty_closure" {
     Data.Functor.Classes.$fOrd1NonEmpty_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1NonEmpty_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1NonEmpty_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.224418779 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Identity_$cliftCompare_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdFq3: // global
           _sdEDP::P64 = R3;
           R3 = R4;
           _sdEDO::P64 = R2;
           R2 = _sdEDP::P64;
           R1 = _sdEDO::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Identity_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.227659612 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Identity_closure" {
     Data.Functor.Classes.$fOrd1Identity_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Identity_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Identity_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.229709878 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_entry() //  []
         { []
         }
     {offset
       cdFqf: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.233219816 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Proxy_closure" {
     Data.Functor.Classes.$fOrd1Proxy_closure:
         const Data.Functor.Classes.C:Ord1_con_info;
         const Data.Functor.Classes.$fEq1Proxy_$cliftEq_closure+3;
         const Data.Functor.Classes.$fOrd1Proxy_$cliftCompare_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.235358988 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadPrec_entry() //  [R3]
         { []
         }
     {offset
       cdFqt: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.238327623 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1NonEmpty4_bytes" {
     Data.Functor.Classes.$fRead1NonEmpty4_bytes:
         I8[] [58,124]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.240588555 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty3_closure" {
     Data.Functor.Classes.$fRead1NonEmpty3_closure:
         const Data.Functor.Classes.$fRead1NonEmpty3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty3_entry() //  [R1]
         { []
         }
     {offset
       cdFqH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFqI; else goto cdFqJ;
       cdFqI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFqJ: // global
           (_cdFqE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdFqE::I64 == 0) goto cdFqG; else goto cdFqF;
       cdFqG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdFqF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdFqE::I64;
           R2 = Data.Functor.Classes.$fRead1NonEmpty4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty3_info" {
     Data.Functor.Classes.$fRead1NonEmpty3_info:
         const Data.Functor.Classes.$fRead1NonEmpty3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.244233308 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty2_closure" {
     Data.Functor.Classes.$fRead1NonEmpty2_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.253259721 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec5_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec5_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec5_info;
         const 0;
 },
 Data.Functor.Classes.$w$cliftReadsPrec5_slow() //  [R1]
         { []
         }
     {offset
       cdFqU: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 go2_sdEEj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFrN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFrO; else goto cdFrP;
       cdFrO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFrP: // global
           I64[Sp - 32] = block_cdFrG_info;
           _sdEEj::P64 = R1;
           _sdEE6::P64 = P64[R1 + 7];
           _sdEEi::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sdEE6::P64;
           P64[Sp - 16] = _sdEEi::P64;
           P64[Sp - 8] = _sdEEj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFs9; else goto cdFrH;
       udFs9: // global
           call _cdFrG(R1) args: 0, res: 0, upd: 0;
       cdFrH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_sdEEj_info" {
     go2_sdEEj_info:
         const go2_sdEEj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdFrG() //  [R1]
         { []
         }
     {offset
       cdFrG: // global
           if (R1 & 7 == 1) goto cdFrK; else goto cdFrL;
       cdFrK: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdFrL: // global
           I64[Sp] = block_cdFrV_info;
           _sdEEn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdEEn::P64;
           if (R1 & 7 != 0) goto udFs8; else goto cdFrW;
       udFs8: // global
           call _cdFrV(R1) args: 0, res: 0, upd: 0;
       cdFrW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFrG_info" {
     block_cdFrG_info:
         const _cdFrG;
         const 3;
         const 30;
 },
 _cdFrV() //  [R1]
         { []
         }
     {offset
       cdFrV: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdFs7; else goto cdFs6;
       cdFs7: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFs6: // global
           _sdEEp::P64 = P64[R1 + 7];
           _sdEEq::P64 = P64[R1 + 15];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = GHC.Base.:|_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _sdEEp::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _sdEEq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFrV_info" {
     block_cdFrV_info:
         const _cdFrV;
         const 3;
         const 30;
 },
 go1_sdEE9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFse: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdFsf; else goto udFsz;
       cdFsf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       udFsz: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cdFrh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_sdEE9_info" {
     go1_sdEE9_info:
         const go1_sdEE9_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdF7K_srt+104;
 },
 _cdFrh() //  []
         { []
         }
     {offset
       cdFrh: // global
           I64[Sp - 24] = block_cdFrk_info;
           R1 = P64[Sp + 8];
           _sdEE9::P64 = P64[Sp];
           P64[Sp - 16] = P64[_sdEE9::P64 + 15];
           P64[Sp - 8] = P64[_sdEE9::P64 + 23];
           P64[Sp + 8] = P64[_sdEE9::P64 + 7];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFsB; else goto cdFrl;
       udFsB: // global
           call _cdFrk(R1) args: 0, res: 0, upd: 0;
       cdFrl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdFrk() //  [R1]
         { []
         }
     {offset
       cdFrk: // global
           if (R1 & 7 == 1) goto cdFsb; else goto cdFsc;
       cdFsb: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdFsc: // global
           I64[Sp] = block_cdFrq_info;
           _sdEEd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdEEd::P64;
           if (R1 & 7 != 0) goto udFsC; else goto cdFrr;
       udFsC: // global
           call _cdFrq(R1) args: 0, res: 0, upd: 0;
       cdFrr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFrk_info" {
     block_cdFrk_info:
         const _cdFrk;
         const 4;
         const 4294967326;
         const SdF7K_srt+104;
 },
 _cdFrq() //  [R1]
         { []
         }
     {offset
       cdFrq: // global
           I64[Sp - 8] = block_cdFrv_info;
           R3 = Data.Functor.Classes.$fRead1NonEmpty3_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFrq_info" {
     block_cdFrq_info:
         const _cdFrq;
         const 4;
         const 4294967326;
         const SdF7K_srt+104;
 },
 _cdFrv() //  [R1]
         { []
         }
     {offset
       cdFrv: // global
           _sdEEd::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFso; else goto cdFsq;
       cdFso: // global
           P64[Sp + 40] = _sdEEd::P64;
           Sp = Sp + 32;
           call _cdFrh() args: 0, res: 0, upd: 0;
       cdFsq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFst; else goto cdFss;
       cdFst: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFss: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _sdEEd::P64;
           I64[Hp - 16] = go2_sdEEj_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           I64[Sp + 32] = block_cdFsp_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 40];
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFrv_info" {
     block_cdFrv_info:
         const _cdFrv;
         const 5;
         const 4294967326;
         const SdF7K_srt+104;
 },
 _cdFsp() //  [R1]
         { []
         }
     {offset
       cdFsp: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go2_sdEEj_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFsp_info" {
     block_cdFsp_info:
         const _cdFsp;
         const 1;
         const 30;
 },
 go_sdEE0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFsJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFsK; else goto cdFsL;
       cdFsK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFsL: // global
           I64[Sp - 24] = block_cdFr3_info;
           _sdEE0::P64 = R1;
           _sdEDX::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdEDX::P64;
           P64[Sp - 8] = _sdEE0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFsY; else goto cdFr4;
       udFsY: // global
           call _cdFr3(R1) args: 0, res: 0, upd: 0;
       cdFr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdEE0_info" {
     go_sdEE0_info:
         const go_sdEE0_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SdF7K_srt+104;
 },
 _cdFr3() //  [R1]
         { []
         }
     {offset
       cdFr3: // global
           if (R1 & 7 == 1) goto cdFsG; else goto cdFsH;
       cdFsG: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFsH: // global
           I64[Sp - 8] = block_cdFr9_info;
           _sdEE4::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdEE4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFsX; else goto cdFra;
       udFsX: // global
           call _cdFr9(R1) args: 0, res: 0, upd: 0;
       cdFra: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFr3_info" {
     block_cdFr3_info:
         const _cdFr3;
         const 2;
         const 12884901918;
         const SdF7K_srt+104;
 },
 _cdFr9() //  [R1]
         { []
         }
     {offset
       cdFr9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdFsS; else goto cdFsR;
       cdFsS: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFsR: // global
           _sdEE6::P64 = P64[R1 + 7];
           _sdEE7::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdEE9_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdEE6::P64;
           P64[Hp] = Hp - 56;
           I64[Sp + 16] = block_cdFsO_info;
           R3 = _sdEE7::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 24] = Hp - 23;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFr9_info" {
     block_cdFr9_info:
         const _cdFr9;
         const 3;
         const 12884901918;
         const SdF7K_srt+104;
 },
 _cdFsO() //  [R1]
         { []
         }
     {offset
       cdFsO: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdEE9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFsO_info" {
     block_cdFsO_info:
         const _cdFsO;
         const 1;
         const 4294967326;
         const SdF7K_srt+104;
 },
 sat_sdEEA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFt6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFt7; else goto cdFt8;
       cdFt7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFt8: // global
           I64[Sp - 16] = block_cdFt4_info;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1NonEmpty2_closure+1;
           _sdEE0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdEE0::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEEA_info" {
     sat_sdEEA_info:
         const sat_sdEEA_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdF7K_srt+104;
 },
 _cdFt4() //  [R1]
         { []
         }
     {offset
       cdFt4: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdEE0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFt4_info" {
     block_cdFt4_info:
         const _cdFt4;
         const 1;
         const 12884901918;
         const SdF7K_srt+104;
 },
 Data.Functor.Classes.$w$cliftReadsPrec5_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdFte: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdFti; else goto cdFth;
       cdFti: // global
           HpAlloc = 40;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec5_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdFth: // global
           I64[Hp - 32] = go_sdEE0_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sdEEA_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 31;
           _sdEEx::P64 = I64[(%MO_S_Gt_W64(R4,
                                           5) << 3) + GHC.Types.Bool_closure_tbl];
           R4 = R5;
           R3 = Hp - 15;
           R2 = _sdEEx::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec5_info" {
     Data.Functor.Classes.$w$cliftReadsPrec5_info:
         const Data.Functor.Classes.$w$cliftReadsPrec5_entry;
         const 0;
         const 64424509454;
         const 17179869184;
         const SdF7K_srt+104;
         const 260;
         const Data.Functor.Classes.$w$cliftReadsPrec5_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.284191975 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdFvk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFvl; else goto cdFvm;
       cdFvl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFvm: // global
           I64[Sp - 32] = block_cdFvh_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFvq; else goto cdFvi;
       udFvq: // global
           call _cdFvh(R1) args: 0, res: 0, upd: 0;
       cdFvi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SdF7K_srt+128;
 },
 _cdFvh() //  [R1]
         { []
         }
     {offset
       cdFvh: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFvh_info" {
     block_cdFvh_info:
         const _cdFvh;
         const 3;
         const 4294967326;
         const SdF7K_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.289149277 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Proxy4_bytes" {
     Data.Functor.Classes.$fRead1Proxy4_bytes:
         I8[] [80,114,111,120,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.291488222 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy3_closure" {
     Data.Functor.Classes.$fRead1Proxy3_closure:
         const Data.Functor.Classes.$fRead1Proxy3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy3_entry() //  [R1]
         { []
         }
     {offset
       cdFvI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFvJ; else goto cdFvK;
       cdFvJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFvK: // global
           (_cdFvF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdFvF::I64 == 0) goto cdFvH; else goto cdFvG;
       cdFvH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdFvG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdFvF::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy3_info" {
     Data.Functor.Classes.$fRead1Proxy3_info:
         const Data.Functor.Classes.$fRead1Proxy3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.295463138 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_lexeme_closure" {
     Data.Functor.Classes.$fRead1Proxy_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Proxy3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.298427468 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy2_closure" {
     Data.Functor.Classes.$fRead1Proxy2_closure:
         const Data.Functor.Classes.$fRead1Proxy2_info;
         const 0;
 },
 sat_sdEEK_entry() //  [R1]
         { []
         }
     {offset
       cdFw3: // global
           R2 = Data.Proxy.Proxy_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEEK_info" {
     sat_sdEEK_info:
         const sat_sdEEK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$fRead1Proxy2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdFw9: // global
           _sdEEI::P64 = R3;
           _sdEEH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdFwa; else goto cdFwb;
       cdFwb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFwd; else goto cdFwc;
       cdFwd: // global
           HpAlloc = 16;
           goto cdFwa;
       cdFwa: // global
           R3 = _sdEEI::P64;
           R2 = _sdEEH::P64;
           R1 = Data.Functor.Classes.$fRead1Proxy2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFwc: // global
           I64[Hp - 8] = sat_sdEEK_info;
           P64[Hp] = _sdEEI::P64;
           I64[Sp - 8] = block_cdFw6_info;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Proxy_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy2_info" {
     Data.Functor.Classes.$fRead1Proxy2_info:
         const Data.Functor.Classes.$fRead1Proxy2_entry;
         const 0;
         const 3377704015495182;
         const 8589934607;
         const SdF7K_srt;
 },
 _cdFw6() //  [R1]
         { []
         }
     {offset
       cdFw6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFwg; else goto cdFwf;
       cdFwg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFwf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFw6_info" {
     block_cdFw6_info:
         const _cdFw6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.305902435 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy1_closure" {
     Data.Functor.Classes.$fRead1Proxy1_closure:
         const Data.Functor.Classes.$fRead1Proxy1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdFwB: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Proxy2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy1_info" {
     Data.Functor.Classes.$fRead1Proxy1_info:
         const Data.Functor.Classes.$fRead1Proxy1_entry;
         const 0;
         const 281479271677966;
         const 8589934607;
         const SdF7K_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.309601816 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy5_closure" {
     Data.Functor.Classes.$fRead1Proxy5_closure:
         const Data.Functor.Classes.$fRead1Proxy5_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy5_entry() //  [R4, R5]
         { []
         }
     {offset
       cdFwM: // global
           R3 = R5;
           R2 = R4;
           call Data.Functor.Classes.$fRead1Proxy1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy5_info" {
     Data.Functor.Classes.$fRead1Proxy5_info:
         const Data.Functor.Classes.$fRead1Proxy5_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.313009879 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info;
 },
 Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_entry() //  [R3]
         { []
         }
     {offset
       cdFwX: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.316063168 UTC

[section ""cstring" . Data.Functor.Classes.$fShow1NonEmpty1_bytes" {
     Data.Functor.Classes.$fShow1NonEmpty1_bytes:
         I8[] [32,58,124,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.322645386 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec1_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec1_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec1_info;
 },
 Data.Functor.Classes.$w$cliftShowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       cdFx6: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 f_sdEEX_entry() //  [R1]
         { []
         }
     {offset
       cdFxe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFxf; else goto cdFxg;
       cdFxf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFxg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1NonEmpty2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdEEX_info" {
     f_sdEEX_info:
         const f_sdEEX_entry;
         const 2;
         const 18;
 },
 sat_sdEF2_entry() //  [R1]
         { []
         }
     {offset
       cdFxv: // global
           _sdEF2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFxw; else goto cdFxx;
       cdFxx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFxz; else goto cdFxy;
       cdFxz: // global
           HpAlloc = 32;
           goto cdFxw;
       cdFxw: // global
           R1 = _sdEF2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFxy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEF2::P64;
           _sdEEY::P64 = P64[_sdEF2::P64 + 16];
           _sdEF0::P64 = P64[_sdEF2::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdEEY::P64;
           P64[Hp] = _sdEF0::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Classes.$fShow1NonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEF2_info" {
     sat_sdEF2_info:
         const sat_sdEF2_entry;
         const 2;
         const 18;
 },
 sat_sdEF3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFxA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFxE; else goto cdFxD;
       cdFxE: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFxD: // global
           _sdEEX::P64 = P64[R1 + 7];
           _sdEEY::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdEF2_info;
           P64[Hp - 8] = _sdEEY::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdEEX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEF3_info" {
     sat_sdEF3_info:
         const sat_sdEF3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEF6_entry() //  [R1]
         { []
         }
     {offset
       cdFxY: // global
           _sdEF6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFxZ; else goto cdFy0;
       cdFy0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFy2; else goto cdFy1;
       cdFy2: // global
           HpAlloc = 24;
           goto cdFxZ;
       cdFxZ: // global
           R1 = _sdEF6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFy1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEF6::P64;
           _sdEEY::P64 = P64[_sdEF6::P64 + 16];
           _sdEF4::P64 = P64[_sdEF6::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEF4::P64;
           R2 = Hp - 14;
           R1 = _sdEEY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEF6_info" {
     sat_sdEF6_info:
         const sat_sdEF6_entry;
         const 2;
         const 18;
 },
 sat_sdEF7_entry() //  [R1]
         { []
         }
     {offset
       cdFy3: // global
           _sdEF7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFy4; else goto cdFy5;
       cdFy5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFy7; else goto cdFy6;
       cdFy7: // global
           HpAlloc = 32;
           goto cdFy4;
       cdFy4: // global
           R1 = _sdEF7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFy6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEF7::P64;
           _sdEEY::P64 = P64[_sdEF7::P64 + 16];
           _sdEF4::P64 = P64[_sdEF7::P64 + 24];
           I64[Hp - 24] = sat_sdEF6_info;
           P64[Hp - 8] = _sdEEY::P64;
           P64[Hp] = _sdEF4::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Classes.$fShow1NonEmpty1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEF7_info" {
     sat_sdEF7_info:
         const sat_sdEF7_entry;
         const 2;
         const 18;
 },
 sat_sdEF8_entry() //  [R1]
         { []
         }
     {offset
       cdFy8: // global
           _sdEF8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFy9; else goto cdFya;
       cdFya: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFyc; else goto cdFyb;
       cdFyc: // global
           HpAlloc = 32;
           goto cdFy9;
       cdFy9: // global
           R1 = _sdEF8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEF8::P64;
           _sdEEX::P64 = P64[_sdEF8::P64 + 16];
           _sdEEY::P64 = P64[_sdEF8::P64 + 24];
           _sdEF4::P64 = P64[_sdEF8::P64 + 32];
           I64[Hp - 24] = sat_sdEF7_info;
           P64[Hp - 8] = _sdEEY::P64;
           P64[Hp] = _sdEF4::P64;
           R2 = Hp - 24;
           R1 = _sdEEX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEF8_info" {
     sat_sdEF8_info:
         const sat_sdEF8_entry;
         const 3;
         const 15;
 },
 sat_sdEF9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFye: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdFyi; else goto cdFyh;
       cdFyi: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFyh: // global
           _sdEEX::P64 = P64[R1 + 7];
           _sdEEY::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdEF8_info;
           P64[Hp - 40] = _sdEEX::P64;
           P64[Hp - 32] = _sdEEY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEF9_info" {
     sat_sdEF9_info:
         const sat_sdEF9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$w$cliftShowsPrec1_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       cdFym: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdFyq; else goto cdFyp;
       cdFyq: // global
           HpAlloc = 88;
           R1 = Data.Functor.Classes.$w$cliftShowsPrec1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdFyp: // global
           I64[Hp - 80] = f_sdEEX_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R5;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cdFxa::P64 = Hp - 80;
           _cdFxh::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 5)) goto cdFyk; else goto cdFyl;
       cdFyk: // global
           I64[Hp - 16] = sat_sdEF3_info;
           P64[Hp - 8] = _cdFxa::P64;
           P64[Hp] = _cdFxh::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFyl: // global
           I64[Hp - 16] = sat_sdEF9_info;
           P64[Hp - 8] = _cdFxa::P64;
           P64[Hp] = _cdFxh::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec1_info" {
     Data.Functor.Classes.$w$cliftShowsPrec1_info:
         const Data.Functor.Classes.$w$cliftShowsPrec1_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 261;
         const Data.Functor.Classes.$w$cliftShowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.341892421 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info;
 },
 Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdFzq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFzu; else goto cdFzv;
       cdFzu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFzv: // global
           I64[Sp - 32] = block_cdFzn_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFzD; else goto cdFzo;
       udFzD: // global
           call _cdFzn(R1) args: 0, res: 0, upd: 0;
       cdFzo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFzn() //  [R1]
         { []
         }
     {offset
       cdFzn: // global
           I64[Sp] = block_cdFzt_info;
           _sdEFf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sdEFf::I64;
           if (R1 & 7 != 0) goto udFzC; else goto cdFzx;
       udFzC: // global
           call _cdFzt(R1) args: 0, res: 0, upd: 0;
       cdFzx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFzn_info" {
     block_cdFzn_info:
         const _cdFzn;
         const 3;
         const 30;
 },
 _cdFzt() //  [R1]
         { []
         }
     {offset
       cdFzt: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFzt_info" {
     block_cdFzt_info:
         const _cdFzt;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.349644257 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy2_closure" {
     Data.Functor.Classes.$fShow1Proxy2_closure:
         const Data.Functor.Classes.$fShow1Proxy2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy2_entry() //  [R2]
         { []
         }
     {offset
       cdFzX: // global
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Proxy3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy2_info" {
     Data.Functor.Classes.$fShow1Proxy2_info:
         const Data.Functor.Classes.$fShow1Proxy2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdF7K_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.353127316 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_entry() //  [R6]
         { []
         }
     {offset
       cdFA8: // global
           R2 = R6;
           call Data.Functor.Classes.$fShow1Proxy2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.358225423 UTC

[section ""data" . Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdFAm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdFAq; else goto cdFAr;
       cdFAq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFAr: // global
           I64[Sp - 32] = block_cdFAj_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFAL; else goto cdFAk;
       udFAL: // global
           call _cdFAj(R1) args: 0, res: 0, upd: 0;
       cdFAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2(,)_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2(,)_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFAj() //  [R1]
         { []
         }
     {offset
       cdFAj: // global
           I64[Sp - 8] = block_cdFAp_info;
           _sdEFs::P64 = P64[R1 + 7];
           _sdEFt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdEFt::P64;
           P64[Sp + 24] = _sdEFs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFAK; else goto cdFAt;
       udFAK: // global
           call _cdFAp(R1) args: 0, res: 0, upd: 0;
       cdFAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFAj_info" {
     block_cdFAj_info:
         const _cdFAj;
         const 3;
         const 30;
 },
 _cdFAp() //  [R1]
         { []
         }
     {offset
       cdFAp: // global
           I64[Sp] = block_cdFAx_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 32];
           _sdEFw::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sdEFw::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFAp_info" {
     block_cdFAp_info:
         const _cdFAp;
         const 4;
         const 30;
 },
 _cdFAx() //  [R1]
         { []
         }
     {offset
       cdFAx: // global
           if (R1 & 7 == 1) goto cdFAE; else goto cdFAI;
       cdFAE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFAI: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFAx_info" {
     block_cdFAx_info:
         const _cdFAx;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.367283357 UTC

[section ""data" . Data.Functor.Classes.$fEq2(,)_closure" {
     Data.Functor.Classes.$fEq2(,)_closure:
         const Data.Functor.Classes.$fEq2(,)_info;
 },
 Data.Functor.Classes.$fEq2(,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFBd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2(,)_$cliftEq2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2(,)_info" {
     Data.Functor.Classes.$fEq2(,)_info:
         const Data.Functor.Classes.$fEq2(,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.371876289 UTC

[section ""data" . Data.Functor.Classes.$fEq1(,)_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1(,)_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1(,)_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1(,)_$cliftEq_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFBr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdFBv; else goto cdFBw;
       cdFBv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1(,)_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFBw: // global
           I64[Sp - 32] = block_cdFBo_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFBQ; else goto cdFBp;
       udFBQ: // global
           call _cdFBo(R1) args: 0, res: 0, upd: 0;
       cdFBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1(,)_$cliftEq_info" {
     Data.Functor.Classes.$fEq1(,)_$cliftEq_info:
         const Data.Functor.Classes.$fEq1(,)_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFBo() //  [R1]
         { []
         }
     {offset
       cdFBo: // global
           I64[Sp - 8] = block_cdFBu_info;
           _sdEFD::P64 = P64[R1 + 7];
           _sdEFE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdEFE::P64;
           P64[Sp + 24] = _sdEFD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFBP; else goto cdFBy;
       udFBP: // global
           call _cdFBu(R1) args: 0, res: 0, upd: 0;
       cdFBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFBo_info" {
     block_cdFBo_info:
         const _cdFBo;
         const 3;
         const 30;
 },
 _cdFBu() //  [R1]
         { []
         }
     {offset
       cdFBu: // global
           I64[Sp] = block_cdFBC_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFBu_info" {
     block_cdFBu_info:
         const _cdFBu;
         const 4;
         const 30;
 },
 _cdFBC() //  [R1]
         { []
         }
     {offset
       cdFBC: // global
           if (R1 & 7 == 1) goto cdFBJ; else goto cdFBN;
       cdFBJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFBN: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFBC_info" {
     block_cdFBC_info:
         const _cdFBC;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.381159145 UTC

[section ""data" . Data.Functor.Classes.$fEq1(,)_closure" {
     Data.Functor.Classes.$fEq1(,)_closure:
         const Data.Functor.Classes.$fEq1(,)_info;
 },
 Data.Functor.Classes.$fEq1(,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFCm: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1(,)_$cliftEq_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1(,)_info" {
     Data.Functor.Classes.$fEq1(,)_info:
         const Data.Functor.Classes.$fEq1(,)_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.386996798 UTC

[section ""data" . Data.Functor.Classes.$fEq2Either_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2Either_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2Either_$cliftEq2_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       cdFCE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFCF; else goto cdFCG;
       cdFCF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq2Either_$cliftEq2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFCG: // global
           I64[Sp - 32] = block_cdFCx_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFDh; else goto cdFCy;
       udFDh: // global
           call _cdFCx(R1) args: 0, res: 0, upd: 0;
       cdFCy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Either_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2Either_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFCx() //  [R1]
         { []
         }
     {offset
       cdFCx: // global
           _sdEFM::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFCB; else goto cdFCC;
       cdFCB: // global
           I64[Sp] = block_cdFCJ_info;
           _sdEFO::P64 = P64[R1 + 7];
           R1 = _sdEFM::P64;
           P64[Sp + 24] = _sdEFO::P64;
           if (R1 & 7 != 0) goto udFDf; else goto cdFCL;
       udFDf: // global
           call _cdFCJ(R1) args: 0, res: 0, upd: 0;
       cdFCL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFCC: // global
           I64[Sp + 8] = block_cdFCY_info;
           _sdEFS::P64 = P64[R1 + 6];
           R1 = _sdEFM::P64;
           P64[Sp + 24] = _sdEFS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udFDg; else goto cdFD0;
       udFDg: // global
           call _cdFCY(R1) args: 0, res: 0, upd: 0;
       cdFD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFCx_info" {
     block_cdFCx_info:
         const _cdFCx;
         const 3;
         const 30;
 },
 _cdFCJ() //  [R1]
         { []
         }
     {offset
       cdFCJ: // global
           if (R1 & 7 == 1) goto cdFCR; else goto udFDe;
       cdFCR: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       udFDe: // global
           Sp = Sp + 32;
           call _cdFD6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFCJ_info" {
     block_cdFCJ_info:
         const _cdFCJ;
         const 131;
         const 30;
 },
 _cdFCY() //  [R1]
         { []
         }
     {offset
       cdFCY: // global
           if (R1 & 7 == 1) goto udFDd; else goto cdFDa;
       udFDd: // global
           Sp = Sp + 24;
           call _cdFD6() args: 0, res: 0, upd: 0;
       cdFDa: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFCY_info" {
     block_cdFCY_info:
         const _cdFCY;
         const 2;
         const 30;
 },
 _cdFD6() //  []
         { []
         }
     {offset
       cdFD6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.396738258 UTC

[section ""data" . Data.Functor.Classes.$fEq2Either_closure" {
     Data.Functor.Classes.$fEq2Either_closure:
         const Data.Functor.Classes.$fEq2Either_info;
 },
 Data.Functor.Classes.$fEq2Either_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFDS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2Either_$cliftEq2_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Either_info" {
     Data.Functor.Classes.$fEq2Either_info:
         const Data.Functor.Classes.$fEq2Either_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.402140572 UTC

[section ""data" . Data.Functor.Classes.$fEq1Either_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Either_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Either_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Either_$cliftEq_entry() //  [R2, R3, R4,
                                                        R5]
         { []
         }
     {offset
       cdFEa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFEb; else goto cdFEc;
       cdFEb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Either_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFEc: // global
           I64[Sp - 32] = block_cdFE3_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFEN; else goto cdFE4;
       udFEN: // global
           call _cdFE3(R1) args: 0, res: 0, upd: 0;
       cdFE4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Either_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Either_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Either_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFE3() //  [R1]
         { []
         }
     {offset
       cdFE3: // global
           _sdEFZ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFE7; else goto cdFE8;
       cdFE7: // global
           I64[Sp] = block_cdFEf_info;
           _sdEG1::P64 = P64[R1 + 7];
           R1 = _sdEFZ::P64;
           P64[Sp + 24] = _sdEG1::P64;
           if (R1 & 7 != 0) goto udFEL; else goto cdFEh;
       udFEL: // global
           call _cdFEf(R1) args: 0, res: 0, upd: 0;
       cdFEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFE8: // global
           I64[Sp + 8] = block_cdFEu_info;
           _sdEG5::P64 = P64[R1 + 6];
           R1 = _sdEFZ::P64;
           P64[Sp + 24] = _sdEG5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udFEM; else goto cdFEw;
       udFEM: // global
           call _cdFEu(R1) args: 0, res: 0, upd: 0;
       cdFEw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFE3_info" {
     block_cdFE3_info:
         const _cdFE3;
         const 3;
         const 30;
 },
 _cdFEf() //  [R1]
         { []
         }
     {offset
       cdFEf: // global
           if (R1 & 7 == 1) goto cdFEn; else goto udFEK;
       cdFEn: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
       udFEK: // global
           Sp = Sp + 32;
           call _cdFEC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFEf_info" {
     block_cdFEf_info:
         const _cdFEf;
         const 131;
         const 30;
 },
 _cdFEu() //  [R1]
         { []
         }
     {offset
       cdFEu: // global
           if (R1 & 7 == 1) goto udFEJ; else goto cdFEG;
       udFEJ: // global
           Sp = Sp + 24;
           call _cdFEC() args: 0, res: 0, upd: 0;
       cdFEG: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFEu_info" {
     block_cdFEu_info:
         const _cdFEu;
         const 2;
         const 30;
 },
 _cdFEC() //  []
         { []
         }
     {offset
       cdFEC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.411770238 UTC

[section ""data" . Data.Functor.Classes.$fEq1Either_closure" {
     Data.Functor.Classes.$fEq1Either_closure:
         const Data.Functor.Classes.$fEq1Either_info;
 },
 Data.Functor.Classes.$fEq1Either_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFFr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Either_$cliftEq_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Either_info" {
     Data.Functor.Classes.$fEq1Either_info:
         const Data.Functor.Classes.$fEq1Either_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.415452723 UTC

[section ""data" . Data.Functor.Classes.$fEq2Const_$cliftEq2_closure" {
     Data.Functor.Classes.$fEq2Const_$cliftEq2_closure:
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_info;
 },
 Data.Functor.Classes.$fEq2Const_$cliftEq2_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdFFC: // global
           R3 = R5;
           _sdEG9::P64 = R2;
           R2 = R4;
           R1 = _sdEG9::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Const_$cliftEq2_info" {
     Data.Functor.Classes.$fEq2Const_$cliftEq2_info:
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.419507093 UTC

[section ""data" . Data.Functor.Classes.$fEq2Const_closure" {
     Data.Functor.Classes.$fEq2Const_closure:
         const Data.Functor.Classes.$fEq2Const_info;
 },
 Data.Functor.Classes.$fEq2Const_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFFN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq2Const_$cliftEq2_entry(R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq2Const_info" {
     Data.Functor.Classes.$fEq2Const_info:
         const Data.Functor.Classes.$fEq2Const_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.423143311 UTC

[section ""data" . Data.Functor.Classes.$fEq1Const_$cliftEq_closure" {
     Data.Functor.Classes.$fEq1Const_$cliftEq_closure:
         const Data.Functor.Classes.$fEq1Const_$cliftEq_info;
 },
 Data.Functor.Classes.$fEq1Const_$cliftEq_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cdFFY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFFZ; else goto cdFG0;
       cdFFZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fEq1Const_$cliftEq_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFG0: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Const_$cliftEq_info" {
     Data.Functor.Classes.$fEq1Const_$cliftEq_info:
         const Data.Functor.Classes.$fEq1Const_$cliftEq_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.42695959 UTC

[section ""data" . Data.Functor.Classes.$fEq1Const_closure" {
     Data.Functor.Classes.$fEq1Const_closure:
         const Data.Functor.Classes.$fEq1Const_info;
 },
 Data.Functor.Classes.$fEq1Const_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFGb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$fEq1Const_$cliftEq_entry(R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fEq1Const_info" {
     Data.Functor.Classes.$fEq1Const_info:
         const Data.Functor.Classes.$fEq1Const_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.431664159 UTC

[section ""data" . Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       cdFGp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdFGt; else goto cdFGu;
       cdFGt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFGu: // global
           I64[Sp - 32] = block_cdFGm_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFGT; else goto cdFGn;
       udFGT: // global
           call _cdFGm(R1) args: 0, res: 0, upd: 0;
       cdFGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFGm() //  [R1]
         { []
         }
     {offset
       cdFGm: // global
           I64[Sp - 8] = block_cdFGs_info;
           _sdEGm::P64 = P64[R1 + 7];
           _sdEGn::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdEGn::P64;
           P64[Sp + 24] = _sdEGm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFGS; else goto cdFGw;
       udFGS: // global
           call _cdFGs(R1) args: 0, res: 0, upd: 0;
       cdFGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFGm_info" {
     block_cdFGm_info:
         const _cdFGm;
         const 3;
         const 30;
 },
 _cdFGs() //  [R1]
         { []
         }
     {offset
       cdFGs: // global
           I64[Sp] = block_cdFGA_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 32];
           _sdEGq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _sdEGq::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFGs_info" {
     block_cdFGs_info:
         const _cdFGs;
         const 4;
         const 30;
 },
 _cdFGA() //  [R1]
         { []
         }
     {offset
       cdFGA: // global
           _cdFGQ::P64 = R1 & 7;
           if (_cdFGQ::P64 < 3) goto udFGR; else goto cdFGP;
       udFGR: // global
           if (_cdFGQ::P64 < 2) goto cdFGH; else goto cdFGL;
       cdFGH: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFGL: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFGP: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFGA_info" {
     block_cdFGA_info:
         const _cdFGA;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.440401906 UTC

[section ""data" . Data.Functor.Classes.$fOrd2(,)_closure" {
     Data.Functor.Classes.$fOrd2(,)_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2(,)_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2(,)_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.443443428 UTC

[section ""data" . Data.Functor.Classes.$w$cliftCompare_closure" {
     Data.Functor.Classes.$w$cliftCompare_closure:
         const Data.Functor.Classes.$w$cliftCompare_info;
 },
 Data.Functor.Classes.$w$cliftCompare_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdFHu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdFHv; else goto cdFHw;
       cdFHv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftCompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdFHw: // global
           I64[Sp - 24] = block_cdFHn_info;
           R2 = R2;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = R4;
           P64[Sp - 32] = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftCompare_info" {
     Data.Functor.Classes.$w$cliftCompare_info:
         const Data.Functor.Classes.$w$cliftCompare_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdFHn() //  [R1]
         { []
         }
     {offset
       cdFHn: // global
           _cdFHt::P64 = R1 & 7;
           if (_cdFHt::P64 < 3) goto udFHG; else goto cdFHs;
       udFHG: // global
           if (_cdFHt::P64 < 2) goto cdFHq; else goto cdFHr;
       cdFHq: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFHr: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFHs: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFHn_info" {
     block_cdFHn_info:
         const _cdFHn;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.450421981 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cdFI3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdFI7; else goto cdFI8;
       cdFI7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)_$cliftCompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFI8: // global
           I64[Sp - 32] = block_cdFI0_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFIg; else goto cdFI1;
       udFIg: // global
           call _cdFI0(R1) args: 0, res: 0, upd: 0;
       cdFI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1(,)_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFI0() //  [R1]
         { []
         }
     {offset
       cdFI0: // global
           I64[Sp - 8] = block_cdFI6_info;
           _sdEGE::P64 = P64[R1 + 7];
           _sdEGF::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdEGF::P64;
           P64[Sp + 24] = _sdEGE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFIf; else goto cdFIa;
       udFIf: // global
           call _cdFI6(R1) args: 0, res: 0, upd: 0;
       cdFIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFI0_info" {
     block_cdFI0_info:
         const _cdFI0;
         const 3;
         const 30;
 },
 _cdFI6() //  [R1]
         { []
         }
     {offset
       cdFI6: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftCompare_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFI6_info" {
     block_cdFI6_info:
         const _cdFI6;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.458841048 UTC

[section ""data" . Data.Functor.Classes.$w$cp1Ord1_closure" {
     Data.Functor.Classes.$w$cp1Ord1_closure:
         const Data.Functor.Classes.$w$cp1Ord1_info;
 },
 Data.Functor.Classes.$w$cp1Ord1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdFID: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdFIE; else goto cdFIF;
       cdFIE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cp1Ord1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdFIF: // global
           I64[Sp - 40] = block_cdFIB_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cp1Ord1_info" {
     Data.Functor.Classes.$w$cp1Ord1_info:
         const Data.Functor.Classes.$w$cp1Ord1_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdFIB() //  [R1]
         { []
         }
     {offset
       cdFIB: // global
           I64[Sp] = block_cdFII_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFIB_info" {
     block_cdFIB_info:
         const _cdFIB;
         const 5;
         const 30;
 },
 _cdFII() //  [R1]
         { []
         }
     {offset
       cdFII: // global
           if (R1 & 7 == 1) goto cdFIP; else goto cdFIT;
       cdFIP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFIT: // global
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFII_info" {
     block_cdFII_info:
         const _cdFII;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.466848142 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)1_closure" {
     Data.Functor.Classes.$fOrd1(,)1_closure:
         const Data.Functor.Classes.$fOrd1(,)1_info;
 },
 Data.Functor.Classes.$fOrd1(,)1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFJm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdFJq; else goto cdFJr;
       cdFJq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFJr: // global
           I64[Sp - 32] = block_cdFJj_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFJz; else goto cdFJk;
       udFJz: // global
           call _cdFJj(R1) args: 0, res: 0, upd: 0;
       cdFJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)1_info" {
     Data.Functor.Classes.$fOrd1(,)1_info:
         const Data.Functor.Classes.$fOrd1(,)1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFJj() //  [R1]
         { []
         }
     {offset
       cdFJj: // global
           I64[Sp - 8] = block_cdFJp_info;
           _sdEGW::P64 = P64[R1 + 7];
           _sdEGX::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sdEGX::P64;
           P64[Sp + 24] = _sdEGW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udFJy; else goto cdFJt;
       udFJy: // global
           call _cdFJp(R1) args: 0, res: 0, upd: 0;
       cdFJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFJj_info" {
     block_cdFJj_info:
         const _cdFJj;
         const 3;
         const 30;
 },
 _cdFJp() //  [R1]
         { []
         }
     {offset
       cdFJp: // global
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cp1Ord1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFJp_info" {
     block_cdFJp_info:
         const _cdFJp;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.474666709 UTC

[section ""data" . Data.Functor.Classes.$fOrd1(,)_closure" {
     Data.Functor.Classes.$fOrd1(,)_closure:
         const Data.Functor.Classes.$fOrd1(,)_info;
 },
 sat_sdEH3_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFJZ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1(,)_$cliftCompare_entry(R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEH3_info" {
     sat_sdEH3_info:
         const sat_sdEH3_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdEH2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFK7: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1(,)1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEH2_info" {
     sat_sdEH2_info:
         const sat_sdEH2_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdFKb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFKf; else goto cdFKe;
       cdFKf: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFKe: // global
           I64[Hp - 48] = sat_sdEH3_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdEH2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1(,)_info" {
     Data.Functor.Classes.$fOrd1(,)_info:
         const Data.Functor.Classes.$fOrd1(,)_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.483149148 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2Either_$cliftCompare2_entry() //  [R2,
                                                               R3, R4, R5]
         { []
         }
     {offset
       cdFKH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFKI; else goto cdFKJ;
       cdFKI: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFKJ: // global
           I64[Sp - 32] = block_cdFKA_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFLi; else goto cdFKB;
       udFLi: // global
           call _cdFKA(R1) args: 0, res: 0, upd: 0;
       cdFKB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2Either_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFKA() //  [R1]
         { []
         }
     {offset
       cdFKA: // global
           _sdEH7::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFKE; else goto cdFKF;
       cdFKE: // global
           I64[Sp] = block_cdFKM_info;
           _sdEH9::P64 = P64[R1 + 7];
           R1 = _sdEH7::P64;
           P64[Sp + 24] = _sdEH9::P64;
           if (R1 & 7 != 0) goto udFLg; else goto cdFKO;
       udFLg: // global
           call _cdFKM(R1) args: 0, res: 0, upd: 0;
       cdFKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFKF: // global
           I64[Sp + 8] = block_cdFL1_info;
           _sdEHd::P64 = P64[R1 + 6];
           R1 = _sdEH7::P64;
           P64[Sp + 24] = _sdEHd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udFLh; else goto cdFL3;
       udFLh: // global
           call _cdFL1(R1) args: 0, res: 0, upd: 0;
       cdFL3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFKA_info" {
     block_cdFKA_info:
         const _cdFKA;
         const 3;
         const 30;
 },
 _cdFKM() //  [R1]
         { []
         }
     {offset
       cdFKM: // global
           if (R1 & 7 == 1) goto cdFKU; else goto cdFKY;
       cdFKU: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFKY: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFKM_info" {
     block_cdFKM_info:
         const _cdFKM;
         const 131;
         const 30;
 },
 _cdFL1() //  [R1]
         { []
         }
     {offset
       cdFL1: // global
           if (R1 & 7 == 1) goto cdFL9; else goto cdFLd;
       cdFL9: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFLd: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFL1_info" {
     block_cdFL1_info:
         const _cdFL1;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.491745834 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Either_closure" {
     Data.Functor.Classes.$fOrd2Either_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2Either_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2Either_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.496029195 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure" {
     Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure:
         const Data.Functor.Classes.$fOrd1Either_$cliftCompare_info;
 },
 Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdFLZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFM0; else goto cdFM1;
       cdFM0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either_$cliftCompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFM1: // global
           I64[Sp - 32] = block_cdFLS_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFMA; else goto cdFLT;
       udFMA: // global
           call _cdFLS(R1) args: 0, res: 0, upd: 0;
       cdFLT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either_$cliftCompare_info" {
     Data.Functor.Classes.$fOrd1Either_$cliftCompare_info:
         const Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFLS() //  [R1]
         { []
         }
     {offset
       cdFLS: // global
           _sdEHk::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFLW; else goto cdFLX;
       cdFLW: // global
           I64[Sp] = block_cdFM4_info;
           _sdEHm::P64 = P64[R1 + 7];
           R1 = _sdEHk::P64;
           P64[Sp + 24] = _sdEHm::P64;
           if (R1 & 7 != 0) goto udFMy; else goto cdFM6;
       udFMy: // global
           call _cdFM4(R1) args: 0, res: 0, upd: 0;
       cdFM6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFLX: // global
           I64[Sp + 8] = block_cdFMj_info;
           _sdEHq::P64 = P64[R1 + 6];
           R1 = _sdEHk::P64;
           P64[Sp + 24] = _sdEHq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udFMz; else goto cdFMl;
       udFMz: // global
           call _cdFMj(R1) args: 0, res: 0, upd: 0;
       cdFMl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFLS_info" {
     block_cdFLS_info:
         const _cdFLS;
         const 3;
         const 30;
 },
 _cdFM4() //  [R1]
         { []
         }
     {offset
       cdFM4: // global
           if (R1 & 7 == 1) goto cdFMc; else goto cdFMg;
       cdFMc: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
       cdFMg: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFM4_info" {
     block_cdFM4_info:
         const _cdFM4;
         const 131;
         const 30;
 },
 _cdFMj() //  [R1]
         { []
         }
     {offset
       cdFMj: // global
           if (R1 & 7 == 1) goto cdFMr; else goto cdFMv;
       cdFMr: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdFMv: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFMj_info" {
     block_cdFMj_info:
         const _cdFMj;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.507159604 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either1_closure" {
     Data.Functor.Classes.$fOrd1Either1_closure:
         const Data.Functor.Classes.$fOrd1Either1_info;
 },
 Data.Functor.Classes.$fOrd1Either1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFNj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFNk; else goto cdFNl;
       cdFNk: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFNl: // global
           I64[Sp - 32] = block_cdFNc_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFO1; else goto cdFNd;
       udFO1: // global
           call _cdFNc(R1) args: 0, res: 0, upd: 0;
       cdFNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either1_info" {
     Data.Functor.Classes.$fOrd1Either1_info:
         const Data.Functor.Classes.$fOrd1Either1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFNc() //  [R1]
         { []
         }
     {offset
       cdFNc: // global
           _sdEHx::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdFNg; else goto cdFNh;
       cdFNg: // global
           I64[Sp] = block_cdFNo_info;
           _sdEHz::P64 = P64[R1 + 7];
           R1 = _sdEHx::P64;
           P64[Sp + 24] = _sdEHz::P64;
           if (R1 & 7 != 0) goto udFNZ; else goto cdFNq;
       udFNZ: // global
           call _cdFNo(R1) args: 0, res: 0, upd: 0;
       cdFNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdFNh: // global
           I64[Sp + 8] = block_cdFNI_info;
           _sdEHE::P64 = P64[R1 + 6];
           R1 = _sdEHx::P64;
           P64[Sp + 24] = _sdEHE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udFO0; else goto cdFNK;
       udFO0: // global
           call _cdFNI(R1) args: 0, res: 0, upd: 0;
       cdFNK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFNc_info" {
     block_cdFNc_info:
         const _cdFNc;
         const 3;
         const 30;
 },
 _cdFNo() //  [R1]
         { []
         }
     {offset
       cdFNo: // global
           if (R1 & 7 == 1) goto cdFNx; else goto udFNY;
       cdFNx: // global
           _sdEHu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdFNu_info;
           R2 = _sdEHu::P64;
           P64[Sp + 16] = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       udFNY: // global
           Sp = Sp + 32;
           call _cdFNQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdFNo_info" {
     block_cdFNo_info:
         const _cdFNo;
         const 131;
         const 30;
 },
 _cdFNu() //  [R1]
         { []
         }
     {offset
       cdFNu: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _sdEHB::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _sdEHB::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFNu_info" {
     block_cdFNu_info:
         const _cdFNu;
         const 2;
         const 30;
 },
 _cdFNI() //  [R1]
         { []
         }
     {offset
       cdFNI: // global
           if (R1 & 7 == 1) goto udFNX; else goto cdFNU;
       udFNX: // global
           Sp = Sp + 24;
           call _cdFNQ() args: 0, res: 0, upd: 0;
       cdFNU: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFNI_info" {
     block_cdFNI_info:
         const _cdFNI;
         const 2;
         const 30;
 },
 _cdFNQ() //  []
         { []
         }
     {offset
       cdFNQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.519536683 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Either_closure" {
     Data.Functor.Classes.$fOrd1Either_closure:
         const Data.Functor.Classes.$fOrd1Either_info;
 },
 sat_sdEHK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFOO: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Either_$cliftCompare_entry(R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEHK_info" {
     sat_sdEHK_info:
         const sat_sdEHK_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdEHJ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFOW: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Either1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEHJ_info" {
     sat_sdEHJ_info:
         const sat_sdEHJ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1Either_entry() //  [R2]
         { []
         }
     {offset
       cdFP0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFP4; else goto cdFP3;
       cdFP4: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFP3: // global
           I64[Hp - 48] = sat_sdEHK_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdEHJ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Either_info" {
     Data.Functor.Classes.$fOrd1Either_info:
         const Data.Functor.Classes.$fOrd1Either_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.526472954 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure" {
     Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure:
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info;
 },
 Data.Functor.Classes.$fOrd2Const_$cliftCompare2_entry() //  [R2,
                                                              R4, R5]
         { []
         }
     {offset
       cdFPp: // global
           R3 = R5;
           _sdEHL::P64 = R2;
           R2 = R4;
           R1 = _sdEHL::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info" {
     Data.Functor.Classes.$fOrd2Const_$cliftCompare2_info:
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.529742449 UTC

[section ""data" . Data.Functor.Classes.$fOrd2Const_closure" {
     Data.Functor.Classes.$fOrd2Const_closure:
         const Data.Functor.Classes.C:Ord2_con_info;
         const Data.Functor.Classes.$fEq2Const_$cliftEq2_closure+4;
         const Data.Functor.Classes.$fOrd2Const_$cliftCompare2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.532712407 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Const1_closure" {
     Data.Functor.Classes.$fOrd1Const1_closure:
         const Data.Functor.Classes.$fOrd1Const1_info;
 },
 Data.Functor.Classes.$fOrd1Const1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFPD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFPE; else goto cdFPF;
       cdFPE: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Const1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFPF: // global
           I64[Sp - 24] = block_cdFPB_info;
           R2 = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Const1_info" {
     Data.Functor.Classes.$fOrd1Const1_info:
         const Data.Functor.Classes.$fOrd1Const1_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdFPB() //  [R1]
         { []
         }
     {offset
       cdFPB: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFPB_info" {
     block_cdFPB_info:
         const _cdFPB;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.539024598 UTC

[section ""data" . Data.Functor.Classes.$fOrd1Const_closure" {
     Data.Functor.Classes.$fOrd1Const_closure:
         const Data.Functor.Classes.$fOrd1Const_info;
 },
 sat_sdEHZ_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFQ2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFQ3; else goto cdFQ4;
       cdFQ3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFQ4: // global
           R2 = P64[R1 + 5];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEHZ_info" {
     sat_sdEHZ_info:
         const sat_sdEHZ_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sdEHV_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cdFQa: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$fOrd1Const1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEHV_info" {
     sat_sdEHV_info:
         const sat_sdEHV_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 Data.Functor.Classes.$fOrd1Const_entry() //  [R2]
         { []
         }
     {offset
       cdFQe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFQi; else goto cdFQh;
       cdFQi: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fOrd1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFQh: // global
           I64[Hp - 48] = sat_sdEHZ_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdEHV_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = Hp - 45;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fOrd1Const_info" {
     Data.Functor.Classes.$fOrd1Const_info:
         const Data.Functor.Classes.$fOrd1Const_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.545543243 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1(,)5_bytes" {
     Data.Functor.Classes.$fRead1(,)5_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.547807095 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)4_closure" {
     Data.Functor.Classes.$fRead1(,)4_closure:
         const Data.Functor.Classes.$fRead1(,)4_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)4_entry() //  [R1]
         { []
         }
     {offset
       cdFQI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFQJ; else goto cdFQK;
       cdFQJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFQK: // global
           (_cdFQF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdFQF::I64 == 0) goto cdFQH; else goto cdFQG;
       cdFQH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdFQG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdFQF::I64;
           R2 = Data.Functor.Classes.$fRead1(,)5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)4_info" {
     Data.Functor.Classes.$fRead1(,)4_info:
         const Data.Functor.Classes.$fRead1(,)4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.551490006 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)3_closure" {
     Data.Functor.Classes.$fRead1(,)3_closure:
         const Text.Read.Lex.Punc_con_info;
         const Data.Functor.Classes.$fRead1(,)4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.558021677 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadPrec2_info;
         const 0;
 },
 sat_sdEIb_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFRj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFRn; else goto cdFRm;
       cdFRn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFRm: // global
           _sdEI6::P64 = P64[R1 + 7];
           _sdEI7::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sdEI7::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _sdEI6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIb_info" {
     sat_sdEIb_info:
         const sat_sdEIb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEIc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFRo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFRs; else goto cdFRr;
       cdFRs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFRr: // global
           _sdEI1::P64 = P64[R1 + 7];
           _sdEI5::P64 = P64[R1 + 15];
           _sdEI6::P64 = P64[R1 + 23];
           _sdEI7::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_sdEIb_info;
           P64[Hp - 8] = _sdEI6::P64;
           P64[Hp] = _sdEI7::P64;
           R3 = Hp - 15;
           R2 = _sdEI5::P64;
           R1 = _sdEI1::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIc_info" {
     sat_sdEIc_info:
         const sat_sdEIc_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_sdEIf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFRw: // global
           _sdEI7::P64 = R2;
           _sdEIf::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdFRx; else goto cdFRy;
       cdFRy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdFRA; else goto cdFRz;
       cdFRA: // global
           HpAlloc = 40;
           goto cdFRx;
       cdFRx: // global
           R2 = _sdEI7::P64;
           R1 = _sdEIf::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFRz: // global
           _sdEI1::P64 = P64[_sdEIf::P64 + 7];
           _sdEI5::P64 = P64[_sdEIf::P64 + 15];
           _sdEI6::P64 = P64[_sdEIf::P64 + 23];
           I64[Hp - 32] = sat_sdEIc_info;
           P64[Hp - 24] = _sdEI1::P64;
           P64[Hp - 16] = _sdEI5::P64;
           P64[Hp - 8] = _sdEI6::P64;
           P64[Hp] = _sdEI7::P64;
           I64[Sp - 8] = block_cdFRt_info;
           R3 = Hp - 31;
           R2 = Data.Functor.Classes.$fRead1(,)3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIf_info" {
     sat_sdEIf_info:
         const sat_sdEIf_entry;
         const 3;
         const 36028801313931272;
         const 4294967301;
         const SdF7K_srt;
 },
 _cdFRt() //  [R1]
         { []
         }
     {offset
       cdFRt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFRD; else goto cdFRC;
       cdFRD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFRC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFRt_info" {
     block_cdFRt_info:
         const _cdFRt;
         const 0;
         const 30;
 },
 p_sdEI4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFRE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFRI; else goto cdFRH;
       cdFRI: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFRH: // global
           _sdEI0::P64 = P64[R1 + 6];
           _sdEI1::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sdEIf_info;
           P64[Hp - 16] = _sdEI1::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 23;
           R2 = R2;
           R1 = _sdEI0::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdEI4_info" {
     p_sdEI4_info:
         const p_sdEI4_entry;
         const 2;
         const 36028801313931275;
         const 8589934607;
         const SdF7K_srt;
 },
 lvl3_sdEIg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFRR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdFRS; else goto cdFRT;
       cdFRS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFRT: // global
           I64[Sp - 8] = block_cdFRO_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_sdEIg_info" {
     lvl3_sdEIg_info:
         const lvl3_sdEIg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdFRO() //  [R1]
         { []
         }
     {offset
       cdFRO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFRW; else goto cdFRV;
       cdFRW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFRV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFRO_info" {
     block_cdFRO_info:
         const _cdFRO;
         const 0;
         const 30;
 },
 sat_sdEIp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFS5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdFS6; else goto cdFS7;
       cdFS6: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFS7: // global
           I64[Sp - 8] = block_cdFS2_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIp_info" {
     sat_sdEIp_info:
         const sat_sdEIp_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdFS2() //  [R1]
         { []
         }
     {offset
       cdFS2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdFSa; else goto cdFS9;
       cdFSa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFS9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFS2_info" {
     block_cdFS2_info:
         const _cdFS2;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFSb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFSf; else goto cdFSe;
       cdFSf: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFSe: // global
           I64[Hp - 48] = p_sdEI4_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = lvl3_sdEIg_info;
           P64[Hp - 16] = Hp - 46;
           I64[Hp - 8] = sat_sdEIp_info;
           P64[Hp] = Hp - 22;
           _sdEI2::P64 = R4;
           R4 = R5;
           R3 = _sdEI2::P64;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec2_info" {
     Data.Functor.Classes.$w$cliftReadPrec2_info:
         const Data.Functor.Classes.$w$cliftReadPrec2_entry;
         const 0;
         const 108086412531728398;
         const 17179869208;
         const SdF7K_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.578458381 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)2_closure" {
     Data.Functor.Classes.$fRead1(,)2_closure:
         const Data.Functor.Classes.$fRead1(,)2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)2_entry() //  [R2, R4, R6]
         { []
         }
     {offset
       cdFTa: // global
           R5 = P64[Sp];
           _sdEIs::P64 = R4;
           R4 = R6;
           R3 = _sdEIs::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)2_info" {
     Data.Functor.Classes.$fRead1(,)2_info:
         const Data.Functor.Classes.$fRead1(,)2_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdF7K_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.583456883 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec6_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec6_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec6_info;
         const 0;
 },
 sat_sdEIA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFTu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIA_info" {
     sat_sdEIA_info:
         const sat_sdEIA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEIz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFTC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIz_info" {
     sat_sdEIz_info:
         const sat_sdEIz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEIB_entry() //  [R1]
         { []
         }
     {offset
       cdFTF: // global
           _sdEIB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFTG; else goto cdFTH;
       cdFTH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdFTJ; else goto cdFTI;
       cdFTJ: // global
           HpAlloc = 32;
           goto cdFTG;
       cdFTG: // global
           R1 = _sdEIB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFTI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEIB::P64;
           _sdEIw::P64 = P64[_sdEIB::P64 + 16];
           _sdEIx::P64 = P64[_sdEIB::P64 + 24];
           _sdEIy::P64 = P64[_sdEIB::P64 + 32];
           I64[Hp - 24] = sat_sdEIA_info;
           P64[Hp - 16] = _sdEIx::P64;
           I64[Hp - 8] = sat_sdEIz_info;
           P64[Hp] = _sdEIw::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdEIy::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEIB_info" {
     sat_sdEIB_info:
         const sat_sdEIB_entry;
         const 3;
         const 4294967311;
         const SdF7K_srt+192;
 },
 Data.Functor.Classes.$w$cliftReadsPrec6_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdFTK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdFTO; else goto cdFTN;
       cdFTO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec6_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFTN: // global
           I64[Hp - 32] = sat_sdEIB_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec6_info" {
     Data.Functor.Classes.$w$cliftReadsPrec6_info:
         const Data.Functor.Classes.$w$cliftReadsPrec6_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdF7K_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.592188355 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_entry() //  [R2,
                                                               R4, R6]
         { []
         }
     {offset
       cdFUd: // global
           _sdEIE::P64 = R4;
           R4 = R6;
           R3 = _sdEIE::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec6_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.596597567 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdEIN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFUt: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIN_info" {
     sat_sdEIN_info:
         const sat_sdEIN_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdF7K_srt+192;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdFUw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFUA; else goto cdFUz;
       cdFUA: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFUz: // global
           I64[Hp - 16] = sat_sdEIN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_entry;
         const 0;
         const 22518002431819790;
         const 17179869208;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.601524254 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)3_closure" {
     Data.Functor.Classes.$fShow1(,)3_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.603254855 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity5_closure" {
     Data.Functor.Classes.$fRead1Identity5_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.604958892 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)2_closure" {
     Data.Functor.Classes.$fShow1(,)2_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.607250045 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)1_closure" {
     Data.Functor.Classes.$fShow1(,)1_closure:
         const GHC.Types.C#_con_info;
         const 41;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.612379862 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec2_info;
 },
 f_sdEIS_entry() //  [R1]
         { []
         }
     {offset
       cdFUV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFUW; else goto cdFUX;
       cdFUW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFUX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdEIS_info" {
     f_sdEIS_info:
         const f_sdEIS_entry;
         const 2;
         const 18;
 },
 f1_sdEIT_entry() //  [R1]
         { []
         }
     {offset
       cdFV2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFV3; else goto cdFV4;
       cdFV3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFV4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdEIT_info" {
     f1_sdEIT_info:
         const f1_sdEIT_entry;
         const 2;
         const 18;
 },
 sat_sdEIW_entry() //  [R1]
         { []
         }
     {offset
       cdFVj: // global
           _sdEIW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFVk; else goto cdFVl;
       cdFVl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFVn; else goto cdFVm;
       cdFVn: // global
           HpAlloc = 24;
           goto cdFVk;
       cdFVk: // global
           R1 = _sdEIW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFVm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEIW::P64;
           _sdEIT::P64 = P64[_sdEIW::P64 + 16];
           _sdEIU::P64 = P64[_sdEIW::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)1_closure+1;
           P64[Hp] = _sdEIU::P64;
           R2 = Hp - 14;
           R1 = _sdEIT::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEIW_info" {
     sat_sdEIW_info:
         const sat_sdEIW_entry;
         const 2;
         const 18;
 },
 sat_sdEIY_entry() //  [R1]
         { []
         }
     {offset
       cdFVp: // global
           _sdEIY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFVq; else goto cdFVr;
       cdFVr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFVt; else goto cdFVs;
       cdFVt: // global
           HpAlloc = 56;
           goto cdFVq;
       cdFVq: // global
           R1 = _sdEIY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFVs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEIY::P64;
           _sdEIS::P64 = P64[_sdEIY::P64 + 16];
           _sdEIT::P64 = P64[_sdEIY::P64 + 24];
           _sdEIU::P64 = P64[_sdEIY::P64 + 32];
           I64[Hp - 48] = sat_sdEIW_info;
           P64[Hp - 32] = _sdEIT::P64;
           P64[Hp - 24] = _sdEIU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)2_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdEIS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEIY_info" {
     sat_sdEIY_info:
         const sat_sdEIY_entry;
         const 3;
         const 15;
 },
 sat_sdEIZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFVv: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdFVz; else goto cdFVy;
       cdFVz: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdFVy: // global
           _sdEIS::P64 = P64[R1 + 7];
           _sdEIT::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdEIY_info;
           P64[Hp - 40] = _sdEIS::P64;
           P64[Hp - 32] = _sdEIT::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEIZ_info" {
     sat_sdEIZ_info:
         const sat_sdEIZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$w$cliftShowsPrec2_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       cdFVA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdFVE; else goto cdFVD;
       cdFVE: // global
           HpAlloc = 88;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFVD: // global
           I64[Hp - 80] = f_sdEIS_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = f1_sdEIT_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = sat_sdEIZ_info;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec2_info" {
     Data.Functor.Classes.$w$cliftShowsPrec2_info:
         const Data.Functor.Classes.$w$cliftShowsPrec2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.626378548 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cdFWu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFWv; else goto cdFWw;
       cdFWv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdFWw: // global
           I64[Sp - 16] = block_cdFWr_info;
           R1 = P64[Sp];
           P64[Sp - 8] = R4;
           P64[Sp] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udFWA; else goto cdFWs;
       udFWA: // global
           call _cdFWr(R1) args: 0, res: 0, upd: 0;
       cdFWs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdFWr() //  [R1]
         { []
         }
     {offset
       cdFWr: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFWr_info" {
     block_cdFWr_info:
         const _cdFWr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.632489774 UTC

[section ""data" . Data.Functor.Classes.$dmliftShowList2_closure" {
     Data.Functor.Classes.$dmliftShowList2_closure:
         const Data.Functor.Classes.$dmliftShowList2_info;
 },
 sat_sdEJe_entry() //  [R1]
         { []
         }
     {offset
       cdFWT: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdFWU; else goto cdFWV;
       cdFWU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFWV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_ppppp_info;
           P64[Sp - 56] = P64[R1 + 24];
           P64[Sp - 48] = P64[R1 + 32];
           P64[Sp - 40] = P64[R1 + 40];
           P64[Sp - 32] = P64[R1 + 48];
           P64[Sp - 24] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           Sp = Sp - 64;
           call Data.Functor.Classes.liftShowsPrec2_entry(R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEJe_info" {
     sat_sdEJe_info:
         const sat_sdEJe_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.$dmliftShowList2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdFWW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdFX0; else goto cdFWZ;
       cdFX0: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftShowList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFWZ: // global
           I64[Hp - 48] = sat_sdEJe_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftShowList2_info" {
     Data.Functor.Classes.$dmliftShowList2_info:
         const Data.Functor.Classes.$dmliftShowList2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.640684488 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList3_closure" {
     Data.Functor.Classes.$w$cliftShowList3_closure:
         const Data.Functor.Classes.$w$cliftShowList3_info;
 },
 sat_sdEJp_entry() //  [R1]
         { []
         }
     {offset
       cdFXF: // global
           _sdEJp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFXG; else goto cdFXH;
       cdFXH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFXJ; else goto cdFXI;
       cdFXJ: // global
           HpAlloc = 24;
           goto cdFXG;
       cdFXG: // global
           R1 = _sdEJp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFXI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEJp::P64;
           _sdEJg::P64 = P64[_sdEJp::P64 + 16];
           _sdEJk::P64 = P64[_sdEJp::P64 + 24];
           _sdEJn::P64 = P64[_sdEJp::P64 + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)1_closure+1;
           P64[Hp] = _sdEJk::P64;
           R4 = Hp - 14;
           R3 = _sdEJn::P64;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = _sdEJg::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEJp_info" {
     sat_sdEJp_info:
         const sat_sdEJp_entry;
         const 3;
         const 15;
 },
 sat_sdEJr_entry() //  [R1]
         { []
         }
     {offset
       cdFXL: // global
           _sdEJr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdFXM; else goto cdFXN;
       cdFXN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdFXP; else goto cdFXO;
       cdFXP: // global
           HpAlloc = 64;
           goto cdFXM;
       cdFXM: // global
           R1 = _sdEJr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFXO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEJr::P64;
           _sdEJf::P64 = P64[_sdEJr::P64 + 16];
           _sdEJg::P64 = P64[_sdEJr::P64 + 24];
           _sdEJk::P64 = P64[_sdEJr::P64 + 32];
           _sdEJm::P64 = P64[_sdEJr::P64 + 40];
           _sdEJn::P64 = P64[_sdEJr::P64 + 48];
           I64[Hp - 56] = sat_sdEJp_info;
           P64[Hp - 40] = _sdEJg::P64;
           P64[Hp - 32] = _sdEJk::P64;
           P64[Hp - 24] = _sdEJn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)2_closure+1;
           P64[Hp] = Hp - 56;
           R4 = Hp - 14;
           R3 = _sdEJm::P64;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = _sdEJf::P64;
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEJr_info" {
     sat_sdEJr_info:
         const sat_sdEJr_entry;
         const 5;
         const 15;
 },
 sat_sdEJs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdFXQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdFXS; else goto cdFXT;
       cdFXS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFXT: // global
           I64[Sp - 32] = block_cdFXr_info;
           _sdEJf::P64 = P64[R1 + 6];
           _sdEJg::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _sdEJf::P64;
           P64[Sp - 16] = _sdEJg::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udFXX; else goto cdFXs;
       udFXX: // global
           call _cdFXr(R1) args: 0, res: 0, upd: 0;
       cdFXs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJs_info" {
     sat_sdEJs_info:
         const sat_sdEJs_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 _cdFXr() //  [R1]
         { []
         }
     {offset
       cdFXr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdFXW; else goto cdFXV;
       cdFXW: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFXV: // global
           _sdEJm::P64 = P64[R1 + 7];
           _sdEJn::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_sdEJr_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sdEJm::P64;
           P64[Hp - 24] = _sdEJn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.$fShow1(,)3_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFXr_info" {
     block_cdFXr_info:
         const _cdFXr;
         const 3;
         const 30;
 },
 Data.Functor.Classes.$w$cliftShowList3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdFXY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFY2; else goto cdFY1;
       cdFY2: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFY1: // global
           I64[Hp - 16] = sat_sdEJs_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdEJh::P64 = R4;
           R4 = R5;
           R3 = _sdEJh::P64;
           R2 = Hp - 14;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList3_info" {
     Data.Functor.Classes.$w$cliftShowList3_info:
         const Data.Functor.Classes.$w$cliftShowList3_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.65349671 UTC

[section ""data" . Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info;
 },
 Data.Functor.Classes.$fShow2(,)_$cliftShowList2_entry() //  [R2,
                                                              R4, R6]
         { []
         }
     {offset
       cdFYJ: // global
           R5 = P64[Sp];
           _sdEJv::P64 = R4;
           R4 = R6;
           R3 = _sdEJv::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftShowList3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2(,)_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.656764629 UTC

[section ""data" . Data.Functor.Classes.$fShow2(,)_closure" {
     Data.Functor.Classes.$fShow2(,)_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2(,)_$cliftShowList2_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.660131705 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info;
 },
 sat_sdEJH_entry() //  [R1]
         { []
         }
     {offset
       cdFZ4: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJH_info" {
     sat_sdEJH_info:
         const sat_sdEJH_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry() //  [R2,
                                                              R3, R4, R5, R6]
         { []
         }
     {offset
       cdFZ7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdFZ8; else goto cdFZ9;
       cdFZ8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdFZ9: // global
           I64[Sp - 24] = block_cdFYV_info;
           R1 = R6;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udFZd; else goto cdFYW;
       udFZd: // global
           call _cdFYV(R1) args: 0, res: 0, upd: 0;
       cdFYW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdFYV() //  [R1]
         { []
         }
     {offset
       cdFYV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdFZc; else goto cdFZb;
       cdFZc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdFZb: // global
           _sdEJF::P64 = P64[R1 + 7];
           _sdEJG::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_sdEJH_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sdEJG::P64;
           R4 = _sdEJF::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdFYV_info" {
     block_cdFYV_info:
         const _cdFYV;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.670452192 UTC

[section ""data" . $w$dmliftReadListPrec2_rdymu_closure" {
     $w$dmliftReadListPrec2_rdymu_closure:
         const $w$dmliftReadListPrec2_rdymu_info;
 },
 sat_sdEJS_entry() //  [R1]
         { []
         }
     {offset
       cdFZF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdFZG; else goto cdFZH;
       cdFZG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdFZH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEJS_info" {
     sat_sdEJS_info:
         const sat_sdEJS_entry;
         const 1;
         const 16;
 },
 sat_sdEJT_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFZN: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJT_info" {
     sat_sdEJT_info:
         const sat_sdEJT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEJR_entry() //  [R1, R2]
         { []
         }
     {offset
       cdFZV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJR_info" {
     sat_sdEJR_info:
         const sat_sdEJR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEJP_entry() //  [R1]
         { []
         }
     {offset
       cdG02: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdG03; else goto cdG04;
       cdG03: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG04: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEJP_info" {
     sat_sdEJP_info:
         const sat_sdEJP_entry;
         const 1;
         const 16;
 },
 sat_sdEJQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG0a: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJQ_info" {
     sat_sdEJQ_info:
         const sat_sdEJQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEJO_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG0i: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJO_info" {
     sat_sdEJO_info:
         const sat_sdEJO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w5_sdEJN_entry() //  [R1]
         { []
         }
     {offset
       cdG0l: // global
           _sdEJN::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdG0m; else goto cdG0n;
       cdG0n: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdG0p; else goto cdG0o;
       cdG0p: // global
           HpAlloc = 112;
           goto cdG0m;
       cdG0m: // global
           R1 = _sdEJN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG0o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEJN::P64;
           _sdEJI::P64 = P64[_sdEJN::P64 + 16];
           _sdEJJ::P64 = P64[_sdEJN::P64 + 24];
           _sdEJK::P64 = P64[_sdEJN::P64 + 32];
           _sdEJL::P64 = P64[_sdEJN::P64 + 40];
           _sdEJM::P64 = P64[_sdEJN::P64 + 48];
           I64[Hp - 104] = sat_sdEJS_info;
           P64[Hp - 88] = _sdEJM::P64;
           I64[Hp - 80] = sat_sdEJT_info;
           P64[Hp - 72] = Hp - 104;
           I64[Hp - 64] = sat_sdEJR_info;
           P64[Hp - 56] = _sdEJL::P64;
           I64[Hp - 48] = sat_sdEJP_info;
           P64[Hp - 32] = _sdEJK::P64;
           I64[Hp - 24] = sat_sdEJQ_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdEJO_info;
           P64[Hp] = _sdEJJ::P64;
           R2 = _sdEJI::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           P64[Sp - 32] = Hp - 63;
           P64[Sp - 24] = Hp - 79;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadList2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w5_sdEJN_info" {
     w5_sdEJN_info:
         const w5_sdEJN_entry;
         const 5;
         const 15;
 },
 sat_sdEJX_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG0y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG0z; else goto cdG0A;
       cdG0z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdG0A: // global
           I64[Sp - 8] = block_cdG0v_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEJX_info" {
     sat_sdEJX_info:
         const sat_sdEJX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdG0v() //  [R1]
         { []
         }
     {offset
       cdG0v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG0D; else goto cdG0C;
       cdG0D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG0C: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG0v_info" {
     block_cdG0v_info:
         const _cdG0v;
         const 0;
         const 30;
 },
 $w$dmliftReadListPrec2_rdymu_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdG0E: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdG0I; else goto cdG0H;
       cdG0I: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$dmliftReadListPrec2_rdymu_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG0H: // global
           I64[Hp - 64] = w5_sdEJN_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdEJX_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $w$dmliftReadListPrec2_rdymu_info" {
     $w$dmliftReadListPrec2_rdymu_info:
         const $w$dmliftReadListPrec2_rdymu_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.689864137 UTC

[section ""data" . $dmliftReadListPrec1_rdymv_closure" {
     $dmliftReadListPrec1_rdymv_closure:
         const $dmliftReadListPrec1_rdymv_info;
 },
 $dmliftReadListPrec1_rdymv_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdG1L: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp + 8;
           call $w$dmliftReadListPrec2_rdymu_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmliftReadListPrec1_rdymv_info" {
     $dmliftReadListPrec1_rdymv_info:
         const $dmliftReadListPrec1_rdymv_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.693208215 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadListPrec2_closure" {
     Data.Functor.Classes.$dmliftReadListPrec2_closure:
         const Data.Functor.Classes.$dmliftReadListPrec2_info;
 },
 Data.Functor.Classes.$dmliftReadListPrec2_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cdG1W: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmliftReadListPrec1_rdymv_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadListPrec2_info" {
     Data.Functor.Classes.$dmliftReadListPrec2_info:
         const Data.Functor.Classes.$dmliftReadListPrec2_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.700615271 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadPrec2_closure" {
     Data.Functor.Classes.$dmliftReadPrec2_closure:
         const Data.Functor.Classes.$dmliftReadPrec2_info;
 },
 sat_sdEKe_entry() //  [R1]
         { []
         }
     {offset
       cdG2f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdG2g; else goto cdG2h;
       cdG2g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG2h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEKe_info" {
     sat_sdEKe_info:
         const sat_sdEKe_entry;
         const 1;
         const 16;
 },
 sat_sdEKf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG2n: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKf_info" {
     sat_sdEKf_info:
         const sat_sdEKf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG2v: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKd_info" {
     sat_sdEKd_info:
         const sat_sdEKd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKb_entry() //  [R1]
         { []
         }
     {offset
       cdG2C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdG2D; else goto cdG2E;
       cdG2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEKb_info" {
     sat_sdEKb_info:
         const sat_sdEKb_entry;
         const 1;
         const 16;
 },
 sat_sdEKc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG2K: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKc_info" {
     sat_sdEKc_info:
         const sat_sdEKc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG2S: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKa_info" {
     sat_sdEKa_info:
         const sat_sdEKa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdEK9_entry() //  [R1]
         { []
         }
     {offset
       cdG2V: // global
           _sdEK9::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdG2W; else goto cdG2X;
       cdG2X: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdG2Z; else goto cdG2Y;
       cdG2Z: // global
           HpAlloc = 112;
           goto cdG2W;
       cdG2W: // global
           R1 = _sdEK9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG2Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEK9::P64;
           _sdEK4::P64 = P64[_sdEK9::P64 + 16];
           _sdEK5::P64 = P64[_sdEK9::P64 + 24];
           _sdEK6::P64 = P64[_sdEK9::P64 + 32];
           _sdEK7::P64 = P64[_sdEK9::P64 + 40];
           _sdEK8::P64 = P64[_sdEK9::P64 + 48];
           I64[Hp - 104] = sat_sdEKe_info;
           P64[Hp - 88] = _sdEK8::P64;
           I64[Hp - 80] = sat_sdEKf_info;
           P64[Hp - 72] = Hp - 104;
           I64[Hp - 64] = sat_sdEKd_info;
           P64[Hp - 56] = _sdEK7::P64;
           I64[Hp - 48] = sat_sdEKb_info;
           P64[Hp - 32] = _sdEK6::P64;
           I64[Hp - 24] = sat_sdEKc_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdEKa_info;
           P64[Hp] = _sdEK5::P64;
           R2 = _sdEK4::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           P64[Sp - 32] = Hp - 63;
           P64[Sp - 24] = Hp - 79;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadsPrec2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdEK9_info" {
     f1_sdEK9_info:
         const f1_sdEK9_entry;
         const 5;
         const 15;
 },
 sat_sdEKl_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG3e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG3f; else goto cdG3g;
       cdG3f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdG3g: // global
           I64[Sp - 8] = block_cdG3b_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKl_info" {
     sat_sdEKl_info:
         const sat_sdEKl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdG3b() //  [R1]
         { []
         }
     {offset
       cdG3b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG3j; else goto cdG3i;
       cdG3j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG3i: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG3b_info" {
     block_cdG3b_info:
         const _cdG3b;
         const 0;
         const 30;
 },
 sat_sdEKm_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG3k: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdG3o; else goto cdG3n;
       cdG3o: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdG3n: // global
           _sdEK9::P64 = P64[R1 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _sdEK9::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdEKl_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKm_info" {
     sat_sdEKm_info:
         const sat_sdEKm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadPrec2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdG3p: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdG3t; else goto cdG3s;
       cdG3t: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG3s: // global
           I64[Hp - 64] = f1_sdEK9_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdEKm_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadPrec2_info" {
     Data.Functor.Classes.$dmliftReadPrec2_info:
         const Data.Functor.Classes.$dmliftReadPrec2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.724677365 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadList2_closure" {
     Data.Functor.Classes.$dmliftReadList2_closure:
         const Data.Functor.Classes.$dmliftReadList2_info;
         const 0;
 },
 sat_sdEKD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdG4T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG4U; else goto cdG4V;
       cdG4U: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG4V: // global
           I64[Sp - 8] = block_cdG4Q_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKD_info" {
     sat_sdEKD_info:
         const sat_sdEKD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdG4Q() //  [R1]
         { []
         }
     {offset
       cdG4Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG4Y; else goto cdG4X;
       cdG4Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG4X: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG4Q_info" {
     block_cdG4Q_info:
         const _cdG4Q;
         const 0;
         const 30;
 },
 sat_sdEKy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG54: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKy_info" {
     sat_sdEKy_info:
         const sat_sdEKy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdG5f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG5g; else goto cdG5h;
       cdG5g: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG5h: // global
           I64[Sp - 8] = block_cdG5c_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKx_info" {
     sat_sdEKx_info:
         const sat_sdEKx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdG5c() //  [R1]
         { []
         }
     {offset
       cdG5c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG5k; else goto cdG5j;
       cdG5k: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG5j: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG5c_info" {
     block_cdG5c_info:
         const _cdG5c;
         const 0;
         const 30;
 },
 sat_sdEKs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG5q: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKs_info" {
     sat_sdEKs_info:
         const sat_sdEKs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKE_entry() //  [R1]
         { []
         }
     {offset
       cdG5t: // global
           _sdEKE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdG5u; else goto cdG5v;
       cdG5v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdG5x; else goto cdG5w;
       cdG5x: // global
           HpAlloc = 64;
           goto cdG5u;
       cdG5u: // global
           R1 = _sdEKE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG5w: // global
           _sdEKn::P64 = P64[_sdEKE::P64 + 16];
           _sdEKo::P64 = P64[_sdEKE::P64 + 24];
           _sdEKp::P64 = P64[_sdEKE::P64 + 32];
           _sdEKq::P64 = P64[_sdEKE::P64 + 40];
           _sdEKr::P64 = P64[_sdEKE::P64 + 48];
           I64[Hp - 56] = sat_sdEKD_info;
           P64[Hp - 48] = _sdEKr::P64;
           I64[Hp - 40] = sat_sdEKy_info;
           P64[Hp - 32] = _sdEKq::P64;
           I64[Hp - 24] = sat_sdEKx_info;
           P64[Hp - 16] = _sdEKp::P64;
           I64[Hp - 8] = sat_sdEKs_info;
           P64[Hp] = _sdEKo::P64;
           R2 = _sdEKn::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 22;
           P64[Sp - 16] = Hp - 39;
           P64[Sp - 8] = Hp - 54;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKE_info" {
     sat_sdEKE_info:
         const sat_sdEKE_entry;
         const 5;
         const 15;
 },
 sat_sdEKF_entry() //  [R1]
         { []
         }
     {offset
       cdG5y: // global
           _sdEKF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdG5z; else goto cdG5A;
       cdG5A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdG5C; else goto cdG5B;
       cdG5C: // global
           HpAlloc = 56;
           goto cdG5z;
       cdG5z: // global
           R1 = _sdEKF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG5B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEKF::P64;
           _sdEKn::P64 = P64[_sdEKF::P64 + 16];
           _sdEKo::P64 = P64[_sdEKF::P64 + 24];
           _sdEKp::P64 = P64[_sdEKF::P64 + 32];
           _sdEKq::P64 = P64[_sdEKF::P64 + 40];
           _sdEKr::P64 = P64[_sdEKF::P64 + 48];
           I64[Hp - 48] = sat_sdEKE_info;
           P64[Hp - 32] = _sdEKn::P64;
           P64[Hp - 24] = _sdEKo::P64;
           P64[Hp - 16] = _sdEKp::P64;
           P64[Hp - 8] = _sdEKq::P64;
           P64[Hp] = _sdEKr::P64;
           R2 = Hp - 48;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEKF_info" {
     sat_sdEKF_info:
         const sat_sdEKF_entry;
         const 5;
         const 4294967311;
         const SdF7K_srt+32;
 },
 Data.Functor.Classes.$dmliftReadList2_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdG5D: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdG5H; else goto cdG5G;
       cdG5H: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG5G: // global
           I64[Hp - 48] = sat_sdEKF_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadList2_info" {
     Data.Functor.Classes.$dmliftReadList2_info:
         const Data.Functor.Classes.$dmliftReadList2_entry;
         const 0;
         const 36028801313931278;
         const 21474836505;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.747224022 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadsPrec2_closure" {
     Data.Functor.Classes.$dmliftReadsPrec2_closure:
         const Data.Functor.Classes.$dmliftReadsPrec2_info;
 },
 sat_sdEKX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdG6R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG6S; else goto cdG6T;
       cdG6S: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG6T: // global
           I64[Sp - 8] = block_cdG6O_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKX_info" {
     sat_sdEKX_info:
         const sat_sdEKX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdG6O() //  [R1]
         { []
         }
     {offset
       cdG6O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG6W; else goto cdG6V;
       cdG6W: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG6V: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG6O_info" {
     block_cdG6O_info:
         const _cdG6O;
         const 0;
         const 30;
 },
 sat_sdEKS_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG72: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKS_info" {
     sat_sdEKS_info:
         const sat_sdEKS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEKR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdG7d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdG7e; else goto cdG7f;
       cdG7e: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG7f: // global
           I64[Sp - 8] = block_cdG7a_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKR_info" {
     sat_sdEKR_info:
         const sat_sdEKR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdG7a() //  [R1]
         { []
         }
     {offset
       cdG7a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdG7i; else goto cdG7h;
       cdG7i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdG7h: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG7a_info" {
     block_cdG7a_info:
         const _cdG7a;
         const 0;
         const 30;
 },
 sat_sdEKM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG7o: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEKM_info" {
     sat_sdEKM_info:
         const sat_sdEKM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sdEKL_entry() //  [R1]
         { []
         }
     {offset
       cdG7r: // global
           _sdEKL::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdG7s; else goto cdG7t;
       cdG7t: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdG7v; else goto cdG7u;
       cdG7v: // global
           HpAlloc = 64;
           goto cdG7s;
       cdG7s: // global
           R1 = _sdEKL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG7u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEKL::P64;
           _sdEKG::P64 = P64[_sdEKL::P64 + 16];
           _sdEKH::P64 = P64[_sdEKL::P64 + 24];
           _sdEKI::P64 = P64[_sdEKL::P64 + 32];
           _sdEKJ::P64 = P64[_sdEKL::P64 + 40];
           _sdEKK::P64 = P64[_sdEKL::P64 + 48];
           I64[Hp - 56] = sat_sdEKX_info;
           P64[Hp - 48] = _sdEKK::P64;
           I64[Hp - 40] = sat_sdEKS_info;
           P64[Hp - 32] = _sdEKJ::P64;
           I64[Hp - 24] = sat_sdEKR_info;
           P64[Hp - 16] = _sdEKI::P64;
           I64[Hp - 8] = sat_sdEKM_info;
           P64[Hp] = _sdEKH::P64;
           R2 = _sdEKG::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 22;
           P64[Sp - 32] = Hp - 39;
           P64[Sp - 24] = Hp - 54;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdEKL_info" {
     ds_sdEKL_info:
         const ds_sdEKL_entry;
         const 5;
         const 15;
 },
 sat_sdEKZ_entry() //  [R1]
         { []
         }
     {offset
       cdG7F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdG7G; else goto cdG7H;
       cdG7G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG7H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEKZ_info" {
     sat_sdEKZ_info:
         const sat_sdEKZ_entry;
         const 2;
         const 18;
 },
 sat_sdEL0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG7I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdG7M; else goto cdG7L;
       cdG7M: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdG7L: // global
           _sdEKL::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdEKZ_info;
           P64[Hp - 8] = _sdEKL::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEL0_info" {
     sat_sdEL0_info:
         const sat_sdEL0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadsPrec2_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cdG7N: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdG7R; else goto cdG7Q;
       cdG7R: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG7Q: // global
           I64[Hp - 64] = ds_sdEKL_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = sat_sdEL0_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadsPrec2_info" {
     Data.Functor.Classes.$dmliftReadsPrec2_info:
         const Data.Functor.Classes.$dmliftReadsPrec2_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.766653094 UTC

[section ""data" . Data.Functor.Classes.$dmliftShowList_closure" {
     Data.Functor.Classes.$dmliftShowList_closure:
         const Data.Functor.Classes.$dmliftShowList_info;
 },
 sat_sdEL4_entry() //  [R1]
         { []
         }
     {offset
       cdG8X: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdG8Y; else goto cdG8Z;
       cdG8Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG8Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           Sp = Sp - 48;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEL4_info" {
     sat_sdEL4_info:
         const sat_sdEL4_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.$dmliftShowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdG90: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdG94; else goto cdG93;
       cdG94: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftShowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG93: // global
           I64[Hp - 32] = sat_sdEL4_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = GHC.Show.showList___closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftShowList_info" {
     Data.Functor.Classes.$dmliftShowList_info:
         const Data.Functor.Classes.$dmliftShowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.774651106 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList_closure" {
     Data.Functor.Classes.$w$cliftShowList_closure:
         const Data.Functor.Classes.$w$cliftShowList_info;
 },
 lvl3_sdEL9_entry() //  [R1]
         { []
         }
     {offset
       cdG9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdG9t; else goto cdG9u;
       cdG9t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdG9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEL9_info" {
     lvl3_sdEL9_info:
         const lvl3_sdEL9_entry;
         const 1;
         const 16;
 },
 sat_sdELe_entry() //  [R1, R2]
         { []
         }
     {offset
       cdG9D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdG9E; else goto cdG9F;
       cdG9E: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdG9F: // global
           I64[Sp - 24] = block_cdG9A_info;
           _sdEL6::P64 = P64[R1 + 7];
           _sdEL9::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdEL6::P64;
           P64[Sp - 8] = _sdEL9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udG9J; else goto cdG9B;
       udG9J: // global
           call _cdG9A(R1) args: 0, res: 0, upd: 0;
       cdG9B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELe_info" {
     sat_sdELe_info:
         const sat_sdELe_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdG9A() //  [R1]
         { []
         }
     {offset
       cdG9A: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec2_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdG9A_info" {
     block_cdG9A_info:
         const _cdG9A;
         const 2;
         const 30;
 },
 Data.Functor.Classes.$w$cliftShowList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdG9K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdG9O; else goto cdG9N;
       cdG9O: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdG9N: // global
           I64[Hp - 40] = lvl3_sdEL9_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdELe_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           _sdEL7::P64 = R4;
           R4 = R5;
           R3 = _sdEL7::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList_info" {
     Data.Functor.Classes.$w$cliftShowList_info:
         const Data.Functor.Classes.$w$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.783282363 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowList_info;
 },
 Data.Functor.Classes.$fShow1(,)_$cliftShowList_entry() //  [R2, R3,
                                                             R5, R6]
         { []
         }
     {offset
       cdGae: // global
           _sdELi::P64 = R5;
           R5 = R6;
           R4 = _sdELi::P64;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1(,)_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1(,)_$cliftShowList_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.788071135 UTC

[section ""data" . Data.Functor.Classes.$fShow1(,)_closure" {
     Data.Functor.Classes.$fShow1(,)_closure:
         const Data.Functor.Classes.$fShow1(,)_info;
 },
 sat_sdELq_entry() //  [R1, R2, R4, R5]
         { []
         }
     {offset
       cdGau: // global
           R5 = R5;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$w$cliftShowList_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELq_info" {
     sat_sdELq_info:
         const sat_sdELq_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 sat_sdELl_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdGaC: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1(,)_$cliftShowsPrec_entry(R6,
                                                                      R5,
                                                                      R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELl_info" {
     sat_sdELl_info:
         const sat_sdELl_entry;
         const 1;
         const 9;
         const 17179869208;
 },
 Data.Functor.Classes.$fShow1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdGaG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGaK; else goto cdGaJ;
       cdGaK: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGaJ: // global
           I64[Hp - 48] = sat_sdELq_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdELl_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1(,)_info" {
     Data.Functor.Classes.$fShow1(,)_info:
         const Data.Functor.Classes.$fShow1(,)_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.79492194 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy1_closure" {
     Data.Functor.Classes.$fShow1Proxy1_closure:
         const Data.Functor.Classes.$fShow1Proxy1_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy1_entry() //  [R3]
         { []
         }
     {offset
       cdGb5: // global
           R2 = R3;
           call Data.Functor.Classes.$fShow1Proxy2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy1_info" {
     Data.Functor.Classes.$fShow1Proxy1_info:
         const Data.Functor.Classes.$fShow1Proxy1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.798379227 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Proxy_$cliftShowList_entry() //  [R4,
                                                               R5]
         { []
         }
     {offset
       cdGbg: // global
           _sdELu::P64 = R4;
           R4 = R5;
           R3 = _sdELu::P64;
           R2 = Data.Functor.Classes.$fShow1Proxy1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Proxy_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.801972595 UTC

[section ""data" . Data.Functor.Classes.$fShow1Proxy_closure" {
     Data.Functor.Classes.$fShow1Proxy_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowsPrec_closure+5;
         const Data.Functor.Classes.$fShow1Proxy_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.805203799 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info;
 },
 sat_sdELE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGbA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdGbB; else goto cdGbC;
       cdGbB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGbC: // global
           I64[Sp - 24] = block_cdGbx_info;
           _sdELw::P64 = P64[R1 + 7];
           _sdELx::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdELw::P64;
           P64[Sp - 8] = _sdELx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udGbG; else goto cdGby;
       udGbG: // global
           call _cdGbx(R1) args: 0, res: 0, upd: 0;
       cdGby: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELE_info" {
     sat_sdELE_info:
         const sat_sdELE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdGbx() //  [R1]
         { []
         }
     {offset
       cdGbx: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$w$cliftShowsPrec1_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGbx_info" {
     block_cdGbx_info:
         const _cdGbx;
         const 2;
         const 30;
 },
 Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdGbH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGbL; else goto cdGbK;
       cdGbL: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGbK: // global
           I64[Hp - 16] = sat_sdELE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdELy::P64 = R4;
           R4 = R5;
           R3 = _sdELy::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.812655573 UTC

[section ""data" . Data.Functor.Classes.$fShow1NonEmpty_closure" {
     Data.Functor.Classes.$fShow1NonEmpty_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1NonEmpty_$cliftShowList_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.815259423 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1[]_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_info;
 },
 Data.Functor.Classes.$fShow1[]_$cliftShowList_entry() //  [R3, R4,
                                                            R5]
         { []
         }
     {offset
       cdGc5: // global
           _B2::P64 = R4;
           R4 = R5;
           _sdELG::P64 = R3;
           R3 = _B2::P64;
           R2 = _sdELG::P64;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1[]_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1[]_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.818686729 UTC

[section ""data" . Data.Functor.Classes.$fShow1[]_closure" {
     Data.Functor.Classes.$fShow1[]_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1[]_$cliftShowsPrec_closure+3;
         const Data.Functor.Classes.$fShow1[]_$cliftShowList_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.823303303 UTC

[section ""data" . $w$dmliftReadListPrec_rdymw_closure" {
     $w$dmliftReadListPrec_rdymw_closure:
         const $w$dmliftReadListPrec_rdymw_info;
 },
 sat_sdELM_entry() //  [R1]
         { []
         }
     {offset
       cdGcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGcq; else goto cdGcr;
       cdGcq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGcr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdELM_info" {
     sat_sdELM_info:
         const sat_sdELM_entry;
         const 1;
         const 16;
 },
 sat_sdELN_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGcx: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELN_info" {
     sat_sdELN_info:
         const sat_sdELN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdELL_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGcF: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELL_info" {
     sat_sdELL_info:
         const sat_sdELL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w3_sdELK_entry() //  [R1]
         { []
         }
     {offset
       cdGcI: // global
           _sdELK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGcJ; else goto cdGcK;
       cdGcK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGcM; else goto cdGcL;
       cdGcM: // global
           HpAlloc = 56;
           goto cdGcJ;
       cdGcJ: // global
           R1 = _sdELK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdELK::P64;
           _sdELH::P64 = P64[_sdELK::P64 + 16];
           _sdELI::P64 = P64[_sdELK::P64 + 24];
           _sdELJ::P64 = P64[_sdELK::P64 + 32];
           I64[Hp - 48] = sat_sdELM_info;
           P64[Hp - 32] = _sdELJ::P64;
           I64[Hp - 24] = sat_sdELN_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdELL_info;
           P64[Hp] = _sdELI::P64;
           R2 = _sdELH::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w3_sdELK_info" {
     w3_sdELK_info:
         const w3_sdELK_entry;
         const 3;
         const 15;
 },
 sat_sdELR_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGcV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGcW; else goto cdGcX;
       cdGcW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGcX: // global
           I64[Sp - 8] = block_cdGcS_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdELR_info" {
     sat_sdELR_info:
         const sat_sdELR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGcS() //  [R1]
         { []
         }
     {offset
       cdGcS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGd0; else goto cdGcZ;
       cdGd0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGcZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGcS_info" {
     block_cdGcS_info:
         const _cdGcS;
         const 0;
         const 30;
 },
 $w$dmliftReadListPrec_rdymw_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGd1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGd5; else goto cdGd4;
       cdGd5: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$dmliftReadListPrec_rdymw_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGd4: // global
           I64[Hp - 48] = w3_sdELK_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdELR_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $w$dmliftReadListPrec_rdymw_info" {
     $w$dmliftReadListPrec_rdymw_info:
         const $w$dmliftReadListPrec_rdymw_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.837688858 UTC

[section ""data" . $dmliftReadListPrec3_rdymx_closure" {
     $dmliftReadListPrec3_rdymx_closure:
         const $dmliftReadListPrec3_rdymx_info;
 },
 $dmliftReadListPrec3_rdymx_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGdQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $w$dmliftReadListPrec_rdymw_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmliftReadListPrec3_rdymx_info" {
     $dmliftReadListPrec3_rdymx_info:
         const $dmliftReadListPrec3_rdymx_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.8411227 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadListPrec_closure" {
     Data.Functor.Classes.$dmliftReadListPrec_closure:
         const Data.Functor.Classes.$dmliftReadListPrec_info;
 },
 Data.Functor.Classes.$dmliftReadListPrec_entry() //  [R2, R3, R4,
                                                       R5]
         { []
         }
     {offset
       cdGe1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmliftReadListPrec3_rdymx_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadListPrec_info" {
     Data.Functor.Classes.$dmliftReadListPrec_info:
         const Data.Functor.Classes.$dmliftReadListPrec_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.84822913 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadPrec_closure" {
     Data.Functor.Classes.$dmliftReadPrec_closure:
         const Data.Functor.Classes.$dmliftReadPrec_info;
 },
 sat_sdEM1_entry() //  [R1]
         { []
         }
     {offset
       cdGek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGel; else goto cdGem;
       cdGel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEM1_info" {
     sat_sdEM1_info:
         const sat_sdEM1_entry;
         const 1;
         const 16;
 },
 sat_sdEM2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGes: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEM2_info" {
     sat_sdEM2_info:
         const sat_sdEM2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEM0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGeA: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEM0_info" {
     sat_sdEM0_info:
         const sat_sdEM0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdELZ_entry() //  [R1]
         { []
         }
     {offset
       cdGeD: // global
           _sdELZ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGeE; else goto cdGeF;
       cdGeF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGeH; else goto cdGeG;
       cdGeH: // global
           HpAlloc = 56;
           goto cdGeE;
       cdGeE: // global
           R1 = _sdELZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGeG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdELZ::P64;
           _sdELW::P64 = P64[_sdELZ::P64 + 16];
           _sdELX::P64 = P64[_sdELZ::P64 + 24];
           _sdELY::P64 = P64[_sdELZ::P64 + 32];
           I64[Hp - 48] = sat_sdEM1_info;
           P64[Hp - 32] = _sdELY::P64;
           I64[Hp - 24] = sat_sdEM2_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdEM0_info;
           P64[Hp] = _sdELX::P64;
           R2 = _sdELW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdELZ_info" {
     f1_sdELZ_info:
         const f1_sdELZ_entry;
         const 3;
         const 15;
 },
 sat_sdEM8_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGeW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGeX; else goto cdGeY;
       cdGeX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGeY: // global
           I64[Sp - 8] = block_cdGeT_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEM8_info" {
     sat_sdEM8_info:
         const sat_sdEM8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGeT() //  [R1]
         { []
         }
     {offset
       cdGeT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGf1; else goto cdGf0;
       cdGf1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGf0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGeT_info" {
     block_cdGeT_info:
         const _cdGeT;
         const 0;
         const 30;
 },
 sat_sdEM9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGf2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGf6; else goto cdGf5;
       cdGf6: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGf5: // global
           _sdELZ::P64 = P64[R1 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _sdELZ::P64;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdEM8_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEM9_info" {
     sat_sdEM9_info:
         const sat_sdEM9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGf7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGfb; else goto cdGfa;
       cdGfb: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGfa: // global
           I64[Hp - 48] = f1_sdELZ_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdEM9_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadPrec_info" {
     Data.Functor.Classes.$dmliftReadPrec_info:
         const Data.Functor.Classes.$dmliftReadPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.866719028 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadList_closure" {
     Data.Functor.Classes.$dmliftReadList_closure:
         const Data.Functor.Classes.$dmliftReadList_info;
         const 0;
 },
 sat_sdEMi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGgj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGgk; else goto cdGgl;
       cdGgk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGgl: // global
           I64[Sp - 8] = block_cdGgg_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMi_info" {
     sat_sdEMi_info:
         const sat_sdEMi_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGgg() //  [R1]
         { []
         }
     {offset
       cdGgg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGgo; else goto cdGgn;
       cdGgo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGgn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGgg_info" {
     block_cdGgg_info:
         const _cdGgg;
         const 0;
         const 30;
 },
 sat_sdEMd_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGgu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMd_info" {
     sat_sdEMd_info:
         const sat_sdEMd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEMj_entry() //  [R1]
         { []
         }
     {offset
       cdGgx: // global
           _sdEMj::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGgy; else goto cdGgz;
       cdGgz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGgB; else goto cdGgA;
       cdGgB: // global
           HpAlloc = 32;
           goto cdGgy;
       cdGgy: // global
           R1 = _sdEMj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGgA: // global
           _sdEMa::P64 = P64[_sdEMj::P64 + 16];
           _sdEMb::P64 = P64[_sdEMj::P64 + 24];
           _sdEMc::P64 = P64[_sdEMj::P64 + 32];
           I64[Hp - 24] = sat_sdEMi_info;
           P64[Hp - 16] = _sdEMc::P64;
           I64[Hp - 8] = sat_sdEMd_info;
           P64[Hp] = _sdEMb::P64;
           R2 = _sdEMa::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 7;
           P64[Sp - 8] = Hp - 22;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMj_info" {
     sat_sdEMj_info:
         const sat_sdEMj_entry;
         const 3;
         const 15;
 },
 sat_sdEMk_entry() //  [R1]
         { []
         }
     {offset
       cdGgC: // global
           _sdEMk::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGgD; else goto cdGgE;
       cdGgE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGgG; else goto cdGgF;
       cdGgG: // global
           HpAlloc = 40;
           goto cdGgD;
       cdGgD: // global
           R1 = _sdEMk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGgF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEMk::P64;
           _sdEMa::P64 = P64[_sdEMk::P64 + 16];
           _sdEMb::P64 = P64[_sdEMk::P64 + 24];
           _sdEMc::P64 = P64[_sdEMk::P64 + 32];
           I64[Hp - 32] = sat_sdEMj_info;
           P64[Hp - 16] = _sdEMa::P64;
           P64[Hp - 8] = _sdEMb::P64;
           P64[Hp] = _sdEMc::P64;
           R2 = Hp - 32;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEMk_info" {
     sat_sdEMk_info:
         const sat_sdEMk_entry;
         const 3;
         const 4294967311;
         const SdF7K_srt+32;
 },
 Data.Functor.Classes.$dmliftReadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGgH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGgL; else goto cdGgK;
       cdGgL: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGgK: // global
           I64[Hp - 32] = sat_sdEMk_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadList_info" {
     Data.Functor.Classes.$dmliftReadList_info:
         const Data.Functor.Classes.$dmliftReadList_entry;
         const 0;
         const 144115192370823182;
         const 12884901911;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.882418144 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info;
         const 0;
 },
 f_sdEMn_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGhx: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_sdEMn_info" {
     f_sdEMn_info:
         const f_sdEMn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdEMo_entry() //  [R1]
         { []
         }
     {offset
       cdGhE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGhF; else goto cdGhG;
       cdGhF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGhG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdEMo_info" {
     f1_sdEMo_info:
         const f1_sdEMo_entry;
         const 1;
         const 16;
 },
 f2_sdEMp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGhM: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sdEMp_info" {
     f2_sdEMp_info:
         const f2_sdEMp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEMv_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGi2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGi3; else goto cdGi4;
       cdGi3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGi4: // global
           I64[Sp - 32] = block_cdGhZ_info;
           _sdEMn::P64 = P64[R1 + 7];
           _sdEMp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sdEMn::P64;
           P64[Sp - 16] = _sdEMp::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udGi8; else goto cdGi0;
       udGi8: // global
           call _cdGhZ(R1) args: 0, res: 0, upd: 0;
       cdGi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMv_info" {
     sat_sdEMv_info:
         const sat_sdEMv_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdF7K_srt+128;
 },
 _cdGhZ() //  [R1]
         { []
         }
     {offset
       cdGhZ: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGhZ_info" {
     block_cdGhZ_info:
         const _cdGhZ;
         const 3;
         const 4294967326;
         const SdF7K_srt+128;
 },
 sat_sdEMy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGic: // global
           _sdEMr::P64 = R3;
           _sdEMq::P64 = R2;
           _sdEMy::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdGid; else goto cdGie;
       cdGie: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGig; else goto cdGif;
       cdGig: // global
           HpAlloc = 32;
           goto cdGid;
       cdGid: // global
           R3 = _sdEMr::P64;
           R2 = _sdEMq::P64;
           R1 = _sdEMy::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGif: // global
           _sdEMn::P64 = P64[_sdEMy::P64 + 6];
           _sdEMp::P64 = P64[_sdEMy::P64 + 14];
           I64[Hp - 24] = sat_sdEMv_info;
           P64[Hp - 16] = _sdEMn::P64;
           P64[Hp - 8] = _sdEMp::P64;
           P64[Hp] = _sdEMq::P64;
           I64[Sp - 8] = block_cdGi9_info;
           R3 = _sdEMr::P64;
           R2 = Hp - 23;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMy_info" {
     sat_sdEMy_info:
         const sat_sdEMy_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdF7K_srt+128;
 },
 _cdGi9() //  [R1]
         { []
         }
     {offset
       cdGi9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGij; else goto cdGii;
       cdGij: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGii: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGi9_info" {
     block_cdGi9_info:
         const _cdGi9;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cdGik: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdGio; else goto cdGin;
       cdGio: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGin: // global
           I64[Hp - 72] = f_sdEMn_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = f1_sdEMo_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = f2_sdEMp_info;
           P64[Hp - 24] = Hp - 56;
           I64[Hp - 16] = sat_sdEMy_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 31;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const SdF7K_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.903638443 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info;
         const 0;
 },
 sat_sdEMG_entry() //  [R1]
         { []
         }
     {offset
       cdGjs: // global
           _sdEMG::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGjt; else goto cdGju;
       cdGju: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGjw; else goto cdGjv;
       cdGjw: // global
           HpAlloc = 32;
           goto cdGjt;
       cdGjt: // global
           R1 = _sdEMG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGjv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEMG::P64;
           _sdEMz::P64 = P64[_sdEMG::P64 + 16];
           _sdEMC::P64 = P64[_sdEMG::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdEMz::P64;
           P64[Hp] = _sdEMC::P64;
           I64[Sp - 24] = block_cdGjp_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEMG_info" {
     sat_sdEMG_info:
         const sat_sdEMG_entry;
         const 2;
         const 18;
 },
 _cdGjp() //  [R1]
         { []
         }
     {offset
       cdGjp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGjz; else goto cdGjy;
       cdGjz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdGjy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdGjp_info" {
     block_cdGjp_info:
         const _cdGjp;
         const 0;
         const 30;
 },
 f_sdEMB_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGjA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGjE; else goto cdGjD;
       cdGjE: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGjD: // global
           _sdEMz::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdEMG_info;
           P64[Hp - 8] = _sdEMz::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_sdEMB_info" {
     f_sdEMB_info:
         const f_sdEMB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 f1_sdEMH_entry() //  [R1]
         { []
         }
     {offset
       cdGjM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdGjN; else goto cdGjO;
       cdGjN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGjO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdGjJ_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdEMH_info" {
     f1_sdEMH_info:
         const f1_sdEMH_entry;
         const 1;
         const 16;
 },
 _cdGjJ() //  [R1]
         { []
         }
     {offset
       cdGjJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGjR; else goto cdGjQ;
       cdGjR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdGjQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdGjJ_info" {
     block_cdGjJ_info:
         const _cdGjJ;
         const 0;
         const 30;
 },
 f2_sdEMK_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGjX: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f2_sdEMK_info" {
     f2_sdEMK_info:
         const f2_sdEMK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEMQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGkd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGke; else goto cdGkf;
       cdGke: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGkf: // global
           I64[Sp - 32] = block_cdGka_info;
           _sdEMB::P64 = P64[R1 + 7];
           _sdEMK::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 24] = _sdEMB::P64;
           P64[Sp - 16] = _sdEMK::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udGkj; else goto cdGkb;
       udGkj: // global
           call _cdGka(R1) args: 0, res: 0, upd: 0;
       cdGkb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMQ_info" {
     sat_sdEMQ_info:
         const sat_sdEMQ_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const SdF7K_srt+128;
 },
 _cdGka() //  [R1]
         { []
         }
     {offset
       cdGka: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftReadsPrec5_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGka_info" {
     block_cdGka_info:
         const _cdGka;
         const 3;
         const 4294967326;
         const SdF7K_srt+128;
 },
 sat_sdEMT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGkn: // global
           _sdEMM::P64 = R3;
           _sdEML::P64 = R2;
           _sdEMT::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdGko; else goto cdGkp;
       cdGkp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGkr; else goto cdGkq;
       cdGkr: // global
           HpAlloc = 32;
           goto cdGko;
       cdGko: // global
           R3 = _sdEMM::P64;
           R2 = _sdEML::P64;
           R1 = _sdEMT::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGkq: // global
           _sdEMB::P64 = P64[_sdEMT::P64 + 6];
           _sdEMK::P64 = P64[_sdEMT::P64 + 14];
           I64[Hp - 24] = sat_sdEMQ_info;
           P64[Hp - 16] = _sdEMB::P64;
           P64[Hp - 8] = _sdEMK::P64;
           P64[Hp] = _sdEML::P64;
           I64[Sp - 8] = block_cdGkk_info;
           R3 = _sdEMM::P64;
           R2 = Hp - 23;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMT_info" {
     sat_sdEMT_info:
         const sat_sdEMT_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdF7K_srt+128;
 },
 _cdGkk() //  [R1]
         { []
         }
     {offset
       cdGkk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGku; else goto cdGkt;
       cdGku: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGkt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGkk_info" {
     block_cdGkk_info:
         const _cdGkk;
         const 0;
         const 30;
 },
 sat_sdEMU_entry() //  [R1]
         { []
         }
     {offset
       cdGkv: // global
           _sdEMU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGkw; else goto cdGkx;
       cdGkx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdGkz; else goto cdGky;
       cdGkz: // global
           HpAlloc = 80;
           goto cdGkw;
       cdGkw: // global
           R1 = _sdEMU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGky: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEMU::P64;
           _sdEMz::P64 = P64[_sdEMU::P64 + 16];
           _sdEMA::P64 = P64[_sdEMU::P64 + 24];
           I64[Hp - 72] = f_sdEMB_info;
           P64[Hp - 64] = _sdEMz::P64;
           I64[Hp - 56] = f1_sdEMH_info;
           P64[Hp - 40] = _sdEMA::P64;
           I64[Hp - 32] = f2_sdEMK_info;
           P64[Hp - 24] = Hp - 56;
           I64[Hp - 16] = sat_sdEMT_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 31;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEMU_info" {
     sat_sdEMU_info:
         const sat_sdEMU_entry;
         const 2;
         const 17596481011730;
         const SdF7K_srt+32;
 },
 Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cdGkA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGkE; else goto cdGkD;
       cdGkE: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGkD: // global
           I64[Hp - 24] = sat_sdEMU_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry;
         const 0;
         const 576478348784435214;
         const 8589934607;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.929419726 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec2_info;
         const 0;
 },
 sat_sdEMZ_entry() //  [R1]
         { []
         }
     {offset
       cdGm4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGm5; else goto cdGm6;
       cdGm5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGm6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = Data.Functor.Classes.$fRead1Identity5_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEMZ_info" {
     sat_sdEMZ_info:
         const sat_sdEMZ_entry;
         const 1;
         const 16;
 },
 sat_sdEN0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGmc: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEN0_info" {
     sat_sdEN0_info:
         const sat_sdEN0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEMY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGmk: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readPrec_to_S_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEMY_info" {
     sat_sdEMY_info:
         const sat_sdEMY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_sdEMX_entry() //  [R1]
         { []
         }
     {offset
       cdGmn: // global
           _sdEMX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGmo; else goto cdGmp;
       cdGmp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGmr; else goto cdGmq;
       cdGmr: // global
           HpAlloc = 56;
           goto cdGmo;
       cdGmo: // global
           R1 = _sdEMX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGmq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEMX::P64;
           _sdEMV::P64 = P64[_sdEMX::P64 + 16];
           _sdEMW::P64 = P64[_sdEMX::P64 + 24];
           I64[Hp - 48] = sat_sdEMZ_info;
           P64[Hp - 32] = _sdEMW::P64;
           I64[Hp - 24] = sat_sdEN0_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sdEMY_info;
           P64[Hp] = _sdEMV::P64;
           R3 = Hp - 23;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_entry(R3,
                                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_sdEMX_info" {
     w2_sdEMX_info:
         const w2_sdEMX_entry;
         const 2;
         const 4294967314;
         const SdF7K_srt+248;
 },
 sat_sdEN4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGmA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGmB; else goto cdGmC;
       cdGmB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGmC: // global
           I64[Sp - 8] = block_cdGmx_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEN4_info" {
     sat_sdEN4_info:
         const sat_sdEN4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGmx() //  [R1]
         { []
         }
     {offset
       cdGmx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGmF; else goto cdGmE;
       cdGmF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGmE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGmx_info" {
     block_cdGmx_info:
         const _cdGmx;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadListPrec2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGmG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGmK; else goto cdGmJ;
       cdGmK: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGmJ: // global
           I64[Hp - 40] = w2_sdEMX_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_sdEN4_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec2_info" {
     Data.Functor.Classes.$w$cliftReadListPrec2_info:
         const Data.Functor.Classes.$w$cliftReadListPrec2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdF7K_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.944053925 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty1_closure" {
     Data.Functor.Classes.$fRead1NonEmpty1_closure:
         const Data.Functor.Classes.$fRead1NonEmpty1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1NonEmpty1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGns: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec2_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1NonEmpty1_info" {
     Data.Functor.Classes.$fRead1NonEmpty1_info:
         const Data.Functor.Classes.$fRead1NonEmpty1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.947221788 UTC

[section ""data" . Data.Functor.Classes.$fRead1NonEmpty_closure" {
     Data.Functor.Classes.$fRead1NonEmpty_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure+4;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure+2;
         const Data.Functor.Classes.$fRead1NonEmpty1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.951912037 UTC

[section ""data" . Data.Functor.Classes.$dmliftReadsPrec_closure" {
     Data.Functor.Classes.$dmliftReadsPrec_closure:
         const Data.Functor.Classes.$dmliftReadsPrec_info;
 },
 sat_sdENh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGnQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGnR; else goto cdGnS;
       cdGnR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGnS: // global
           I64[Sp - 8] = block_cdGnN_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdENh_info" {
     sat_sdENh_info:
         const sat_sdENh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGnN() //  [R1]
         { []
         }
     {offset
       cdGnN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGnV; else goto cdGnU;
       cdGnV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGnU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGnN_info" {
     block_cdGnN_info:
         const _cdGnN;
         const 0;
         const 30;
 },
 sat_sdENc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGo1: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdENc_info" {
     sat_sdENc_info:
         const sat_sdENc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 ds_sdENb_entry() //  [R1]
         { []
         }
     {offset
       cdGo4: // global
           _sdENb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGo5; else goto cdGo6;
       cdGo6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGo8; else goto cdGo7;
       cdGo8: // global
           HpAlloc = 32;
           goto cdGo5;
       cdGo5: // global
           R1 = _sdENb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGo7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdENb::P64;
           _sdEN8::P64 = P64[_sdENb::P64 + 16];
           _sdEN9::P64 = P64[_sdENb::P64 + 24];
           _sdENa::P64 = P64[_sdENb::P64 + 32];
           I64[Hp - 24] = sat_sdENh_info;
           P64[Hp - 16] = _sdENa::P64;
           I64[Hp - 8] = sat_sdENc_info;
           P64[Hp] = _sdEN9::P64;
           R2 = _sdEN8::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 22;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdENb_info" {
     ds_sdENb_info:
         const ds_sdENb_entry;
         const 3;
         const 15;
 },
 sat_sdENj_entry() //  [R1]
         { []
         }
     {offset
       cdGoi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGoj; else goto cdGok;
       cdGoj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGok: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENj_info" {
     sat_sdENj_info:
         const sat_sdENj_entry;
         const 2;
         const 18;
 },
 sat_sdENk_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGol: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGop; else goto cdGoo;
       cdGop: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGoo: // global
           _sdENb::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdENj_info;
           P64[Hp - 8] = _sdENb::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdENk_info" {
     sat_sdENk_info:
         const sat_sdENk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$dmliftReadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGoq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGou; else goto cdGot;
       cdGou: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$dmliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGot: // global
           I64[Hp - 48] = ds_sdENb_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_sdENk_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$dmliftReadsPrec_info" {
     Data.Functor.Classes.$dmliftReadsPrec_info:
         const Data.Functor.Classes.$dmliftReadsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.966851833 UTC

[section ""data" . Data.Functor.Classes.eq1_closure" {
     Data.Functor.Classes.eq1_closure:
         const Data.Functor.Classes.eq1_info;
 },
 sat_sdENn_entry() //  [R1]
         { []
         }
     {offset
       cdGpj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGpk; else goto cdGpl;
       cdGpk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGpl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENn_info" {
     sat_sdENn_info:
         const sat_sdENn_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.eq1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGpm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGpq; else goto cdGpp;
       cdGpq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.eq1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGpp: // global
           I64[Hp - 16] = sat_sdENn_info;
           P64[Hp] = R3;
           _sdENl::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdENl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.eq1_info" {
     Data.Functor.Classes.eq1_info:
         const Data.Functor.Classes.eq1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.974215334 UTC

[section ""data" . Data.Functor.Classes.compare1_closure" {
     Data.Functor.Classes.compare1_closure:
         const Data.Functor.Classes.compare1_info;
 },
 sat_sdENq_entry() //  [R1]
         { []
         }
     {offset
       cdGpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGpK; else goto cdGpL;
       cdGpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGpL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENq_info" {
     sat_sdENq_info:
         const sat_sdENq_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.compare1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGpM: // global
           _sdENp::P64 = R3;
           _sdENo::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGpN; else goto cdGpO;
       cdGpO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGpQ; else goto cdGpP;
       cdGpQ: // global
           HpAlloc = 24;
           goto cdGpN;
       cdGpN: // global
           R3 = _sdENp::P64;
           R2 = _sdENo::P64;
           R1 = Data.Functor.Classes.compare1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGpP: // global
           I64[Hp - 16] = sat_sdENq_info;
           P64[Hp] = _sdENp::P64;
           R2 = _sdENo::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftCompare_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.compare1_info" {
     Data.Functor.Classes.compare1_info:
         const Data.Functor.Classes.compare1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.980981972 UTC

[section ""data" . Data.Functor.Classes.readsPrec1_closure" {
     Data.Functor.Classes.readsPrec1_closure:
         const Data.Functor.Classes.readsPrec1_info;
 },
 sat_sdENu_entry() //  [R1]
         { []
         }
     {offset
       cdGqc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGqd; else goto cdGqe;
       cdGqd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGqe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENu_info" {
     sat_sdENu_info:
         const sat_sdENu_entry;
         const 1;
         const 16;
 },
 sat_sdENt_entry() //  [R1]
         { []
         }
     {offset
       cdGqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGqk; else goto cdGql;
       cdGqk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGql: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENt_info" {
     sat_sdENt_info:
         const sat_sdENt_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGqm: // global
           _sdENs::P64 = R3;
           _sdENr::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGqn; else goto cdGqo;
       cdGqo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGqq; else goto cdGqp;
       cdGqq: // global
           HpAlloc = 48;
           goto cdGqn;
       cdGqn: // global
           R3 = _sdENs::P64;
           R2 = _sdENr::P64;
           R1 = Data.Functor.Classes.readsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGqp: // global
           I64[Hp - 40] = sat_sdENu_info;
           P64[Hp - 24] = _sdENs::P64;
           I64[Hp - 16] = sat_sdENt_info;
           P64[Hp] = _sdENs::P64;
           R2 = _sdENr::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsPrec1_info" {
     Data.Functor.Classes.readsPrec1_info:
         const Data.Functor.Classes.readsPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:54.991403853 UTC

[section ""data" . Data.Functor.Classes.readsUnary1_closure" {
     Data.Functor.Classes.readsUnary1_closure:
         const Data.Functor.Classes.readsUnary1_info;
 },
 go_sdENC_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGr6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGr7; else goto cdGr8;
       cdGr7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGr8: // global
           I64[Sp - 24] = block_cdGqZ_info;
           _sdENC::P64 = R1;
           _sdENy::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdENy::P64;
           P64[Sp - 8] = _sdENC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udGrs; else goto cdGr0;
       udGrs: // global
           call _cdGqZ(R1) args: 0, res: 0, upd: 0;
       cdGr0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdENC_info" {
     go_sdENC_info:
         const go_sdENC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGqZ() //  [R1]
         { []
         }
     {offset
       cdGqZ: // global
           if (R1 & 7 == 1) goto cdGr3; else goto cdGr4;
       cdGr3: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGr4: // global
           I64[Sp - 8] = block_cdGre_info;
           _sdENG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdENG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udGrr; else goto cdGrf;
       udGrr: // global
           call _cdGre(R1) args: 0, res: 0, upd: 0;
       cdGrf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGqZ_info" {
     block_cdGqZ_info:
         const _cdGqZ;
         const 2;
         const 30;
 },
 _cdGre() //  [R1]
         { []
         }
     {offset
       cdGre: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdGrq; else goto cdGrp;
       cdGrq: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGrp: // global
           _sdENI::P64 = P64[R1 + 7];
           _sdENJ::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdENI::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdENJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGre_info" {
     block_cdGre_info:
         const _cdGre;
         const 3;
         const 30;
 },
 sat_sdENO_entry() //  [R1]
         { []
         }
     {offset
       cdGrx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGry; else goto cdGrz;
       cdGry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGrz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENO_info" {
     sat_sdENO_info:
         const sat_sdENO_entry;
         const 1;
         const 16;
 },
 sat_sdENN_entry() //  [R1]
         { []
         }
     {offset
       cdGrE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGrF; else goto cdGrG;
       cdGrF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGrG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdENN_info" {
     sat_sdENN_info:
         const sat_sdENN_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGrL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdGrM; else goto cdGrN;
       cdGrM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnary1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdGrN: // global
           I64[Sp - 32] = block_cdGqP_info;
           _sdENw::P64 = R3;
           R3 = R4;
           _sdENv::P64 = R2;
           R2 = R6;
           P64[Sp - 24] = _sdENv::P64;
           P64[Sp - 16] = _sdENw::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnary1_info" {
     Data.Functor.Classes.readsUnary1_info:
         const Data.Functor.Classes.readsUnary1_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdGqP() //  [R1]
         { []
         }
     {offset
       cdGqP: // global
           if (R1 & 7 == 1) goto cdGrI; else goto cdGrJ;
       cdGrI: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGrJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGrT; else goto cdGrS;
       cdGrT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGrS: // global
           I64[Hp - 56] = go_sdENC_info;
           P64[Hp - 48] = P64[Sp + 24];
           I64[Hp - 40] = sat_sdENO_info;
           _sdENw::P64 = P64[Sp + 16];
           P64[Hp - 24] = _sdENw::P64;
           I64[Hp - 16] = sat_sdENN_info;
           P64[Hp] = _sdENw::P64;
           I64[Sp + 24] = block_cdGrQ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pppp_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           P64[Sp + 8] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 16] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 55;
           Sp = Sp - 16;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGqP_info" {
     block_cdGqP_info:
         const _cdGqP;
         const 4;
         const 30;
 },
 _cdGrQ() //  [R1]
         { []
         }
     {offset
       cdGrQ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdENC_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGrQ_info" {
     block_cdGrQ_info:
         const _cdGrQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.01423278 UTC

[section ""data" . Data.Functor.Classes.readsBinary1_closure" {
     Data.Functor.Classes.readsBinary1_closure:
         const Data.Functor.Classes.readsBinary1_info;
 },
 Data.Functor.Classes.readsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdGt3: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.readsBinary1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 lvl3_sdENY_entry() //  [R1]
         { []
         }
     {offset
       cdGtg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGth; else goto cdGti;
       cdGth: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdENY_info" {
     lvl3_sdENY_info:
         const lvl3_sdENY_entry;
         const 1;
         const 16;
 },
 lvl4_sdENZ_entry() //  [R1]
         { []
         }
     {offset
       cdGtn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGto; else goto cdGtp;
       cdGto: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGtp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_sdENZ_info" {
     lvl4_sdENZ_info:
         const lvl4_sdENZ_entry;
         const 1;
         const 16;
 },
 go1_sdEO9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGtT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGtU; else goto cdGtV;
       cdGtU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGtV: // global
           I64[Sp - 40] = block_cdGtM_info;
           _sdEO9::P64 = R1;
           _sdENU::P64 = P64[R1 + 7];
           _sdEO6::P64 = P64[R1 + 15];
           _sdEO8::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sdENU::P64;
           P64[Sp - 24] = _sdEO6::P64;
           P64[Sp - 16] = _sdEO8::P64;
           P64[Sp - 8] = _sdEO9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udGuf; else goto cdGtN;
       udGuf: // global
           call _cdGtM(R1) args: 0, res: 0, upd: 0;
       cdGtN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sdEO9_info" {
     go1_sdEO9_info:
         const go1_sdEO9_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cdGtM() //  [R1]
         { []
         }
     {offset
       cdGtM: // global
           if (R1 & 7 == 1) goto cdGtQ; else goto cdGtR;
       cdGtQ: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdGtR: // global
           I64[Sp] = block_cdGu1_info;
           _sdEOd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sdEOd::P64;
           if (R1 & 7 != 0) goto udGue; else goto cdGu2;
       udGue: // global
           call _cdGu1(R1) args: 0, res: 0, upd: 0;
       cdGu2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGtM_info" {
     block_cdGtM_info:
         const _cdGtM;
         const 4;
         const 30;
 },
 _cdGu1() //  [R1]
         { []
         }
     {offset
       cdGu1: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdGud; else goto cdGuc;
       cdGud: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGuc: // global
           _sdEOf::P64 = P64[R1 + 7];
           _sdEOg::P64 = P64[R1 + 15];
           I64[Hp - 112] = stg_ap_2_upd_info;
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdEOf::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 80;
           P64[Hp - 24] = _sdEOg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGu1_info" {
     block_cdGu1_info:
         const _cdGu1;
         const 4;
         const 30;
 },
 go_sdEO0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGuk: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdGul; else goto cdGum;
       cdGul: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGum: // global
           I64[Sp - 48] = block_cdGtv_info;
           _sdEO0::P64 = R1;
           _sdENR::P64 = P64[R1 + 7];
           _sdENU::P64 = P64[R1 + 15];
           _sdENY::P64 = P64[R1 + 23];
           _sdENZ::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _sdENR::P64;
           P64[Sp - 32] = _sdENU::P64;
           P64[Sp - 24] = _sdENY::P64;
           P64[Sp - 16] = _sdENZ::P64;
           P64[Sp - 8] = _sdEO0::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udGuz; else goto cdGtw;
       udGuz: // global
           call _cdGtv(R1) args: 0, res: 0, upd: 0;
       cdGtw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdEO0_info" {
     go_sdEO0_info:
         const go_sdEO0_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _cdGtv() //  [R1]
         { []
         }
     {offset
       cdGtv: // global
           if (R1 & 7 == 1) goto cdGuh; else goto cdGui;
       cdGuh: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGui: // global
           I64[Sp - 8] = block_cdGtB_info;
           _sdEO4::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdEO4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udGuy; else goto cdGtC;
       udGuy: // global
           call _cdGtB(R1) args: 0, res: 0, upd: 0;
       cdGtC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGtv_info" {
     block_cdGtv_info:
         const _cdGtv;
         const 5;
         const 30;
 },
 _cdGtB() //  [R1]
         { []
         }
     {offset
       cdGtB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGut; else goto cdGus;
       cdGut: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGus: // global
           _sdEO6::P64 = P64[R1 + 7];
           _sdEO7::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdEO9_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sdEO6::P64;
           P64[Hp] = Hp - 56;
           _sdENZ::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdGup_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pppp_info;
           P64[Sp + 8] = P64[Sp + 32];
           P64[Sp + 16] = _sdENZ::P64;
           P64[Sp + 24] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 32] = _sdEO7::P64;
           P64[Sp + 48] = Hp - 23;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGtB_info" {
     block_cdGtB_info:
         const _cdGtB;
         const 6;
         const 30;
 },
 _cdGup() //  [R1]
         { []
         }
     {offset
       cdGup: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdEO9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGup_info" {
     block_cdGup_info:
         const _cdGup;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readsBinary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGuE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGuF; else goto cdGuG;
       cdGuF: // global
           R1 = Data.Functor.Classes.readsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdGuG: // global
           I64[Sp - 32] = block_cdGt7_info;
           _sdENR::P64 = R3;
           R3 = R5;
           _sdENQ::P64 = R2;
           R2 = P64[Sp];
           P64[Sp - 24] = _sdENR::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = _sdENQ::P64;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsBinary1_info" {
     Data.Functor.Classes.readsBinary1_info:
         const Data.Functor.Classes.readsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Classes.readsBinary1_slow;
 },
 _cdGt7() //  [R1]
         { []
         }
     {offset
       cdGt7: // global
           if (R1 & 7 == 1) goto cdGuB; else goto cdGuC;
       cdGuB: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGuC: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdGuM; else goto cdGuL;
       cdGuM: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGuL: // global
           I64[Hp - 80] = lvl3_sdENY_info;
           _sdENS::P64 = P64[Sp + 16];
           P64[Hp - 64] = _sdENS::P64;
           I64[Hp - 56] = lvl4_sdENZ_info;
           P64[Hp - 40] = _sdENS::P64;
           I64[Hp - 32] = go_sdEO0_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           _cdGtc::P64 = Hp - 80;
           P64[Hp - 8] = _cdGtc::P64;
           _cdGtj::P64 = Hp - 56;
           P64[Hp] = _cdGtj::P64;
           _sdENQ::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_cdGuJ_info;
           R2 = _sdENQ::P64;
           I64[Sp - 8] = stg_ap_pppp_info;
           P64[Sp] = _cdGtc::P64;
           P64[Sp + 8] = _cdGtj::P64;
           P64[Sp + 16] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 24] = P64[Sp + 40];
           P64[Sp + 40] = Hp - 31;
           Sp = Sp - 8;
           call Data.Functor.Classes.liftReadsPrec_entry(R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGt7_info" {
     block_cdGt7_info:
         const _cdGt7;
         const 5;
         const 30;
 },
 _cdGuJ() //  [R1]
         { []
         }
     {offset
       cdGuJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdEO0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGuJ_info" {
     block_cdGuJ_info:
         const _cdGuJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.041574566 UTC

[section ""data" . Data.Functor.Classes.readPrec1_closure" {
     Data.Functor.Classes.readPrec1_closure:
         const Data.Functor.Classes.readPrec1_info;
 },
 sat_sdEOp_entry() //  [R1]
         { []
         }
     {offset
       cdGwB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGwC; else goto cdGwD;
       cdGwC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGwD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEOp_info" {
     sat_sdEOp_info:
         const sat_sdEOp_entry;
         const 1;
         const 16;
 },
 sat_sdEOo_entry() //  [R1]
         { []
         }
     {offset
       cdGwI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGwJ; else goto cdGwK;
       cdGwJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGwK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEOo_info" {
     sat_sdEOo_info:
         const sat_sdEOo_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGwL: // global
           _sdEOn::P64 = R3;
           _sdEOm::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGwM; else goto cdGwN;
       cdGwN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGwP; else goto cdGwO;
       cdGwP: // global
           HpAlloc = 48;
           goto cdGwM;
       cdGwM: // global
           R3 = _sdEOn::P64;
           R2 = _sdEOm::P64;
           R1 = Data.Functor.Classes.readPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGwO: // global
           I64[Hp - 40] = sat_sdEOp_info;
           P64[Hp - 24] = _sdEOn::P64;
           I64[Hp - 16] = sat_sdEOo_info;
           P64[Hp] = _sdEOn::P64;
           R2 = _sdEOm::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readPrec1_info" {
     Data.Functor.Classes.readPrec1_info:
         const Data.Functor.Classes.readPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.050911746 UTC

[section ""data" . Data.Functor.Classes.liftReadListDefault_closure" {
     Data.Functor.Classes.liftReadListDefault_closure:
         const Data.Functor.Classes.liftReadListDefault_info;
 },
 sat_sdEOy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGxq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGxr; else goto cdGxs;
       cdGxr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGxs: // global
           I64[Sp - 8] = block_cdGxn_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEOy_info" {
     sat_sdEOy_info:
         const sat_sdEOy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGxn() //  [R1]
         { []
         }
     {offset
       cdGxn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGxv; else goto cdGxu;
       cdGxv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGxu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGxn_info" {
     block_cdGxn_info:
         const _cdGxn;
         const 0;
         const 30;
 },
 sat_sdEOt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGxB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEOt_info" {
     sat_sdEOt_info:
         const sat_sdEOt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEOz_entry() //  [R1]
         { []
         }
     {offset
       cdGxE: // global
           _sdEOz::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdGxF; else goto cdGxG;
       cdGxG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGxI; else goto cdGxH;
       cdGxI: // global
           HpAlloc = 32;
           goto cdGxF;
       cdGxF: // global
           R1 = _sdEOz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGxH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEOz::P64;
           _sdEOq::P64 = P64[_sdEOz::P64 + 16];
           _sdEOr::P64 = P64[_sdEOz::P64 + 24];
           _sdEOs::P64 = P64[_sdEOz::P64 + 32];
           I64[Hp - 24] = sat_sdEOy_info;
           P64[Hp - 16] = _sdEOs::P64;
           I64[Hp - 8] = sat_sdEOt_info;
           P64[Hp] = _sdEOr::P64;
           R2 = _sdEOq::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 22;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftReadListPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEOz_info" {
     sat_sdEOz_info:
         const sat_sdEOz_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.liftReadListDefault_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGxJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGxN; else goto cdGxM;
       cdGxN: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGxM: // global
           I64[Hp - 32] = sat_sdEOz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListDefault_info" {
     Data.Functor.Classes.liftReadListDefault_info:
         const Data.Functor.Classes.liftReadListDefault_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.062649762 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrecDefault_closure" {
     Data.Functor.Classes.liftReadListPrecDefault_closure:
         const Data.Functor.Classes.liftReadListPrecDefault_info;
         const 0;
 },
 sat_sdEOD_entry() //  [R1]
         { []
         }
     {offset
       cdGys: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdGyt; else goto cdGyu;
       cdGyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGyu: // global
           R2 = P64[R1 + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 32];
           Sp = Sp - 24;
           call Data.Functor.Classes.liftReadPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEOD_info" {
     sat_sdEOD_info:
         const sat_sdEOD_entry;
         const 3;
         const 15;
 },
 Data.Functor.Classes.liftReadListPrecDefault_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdGyv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGyz; else goto cdGyy;
       cdGyz: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrecDefault_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGyy: // global
           I64[Hp - 32] = sat_sdEOD_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrecDefault_info" {
     Data.Functor.Classes.liftReadListPrecDefault_info:
         const Data.Functor.Classes.liftReadListPrecDefault_entry;
         const 0;
         const 2305843013508661262;
         const 12884901911;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.068254976 UTC

[section ""data" . lvl_rdymy_closure" {
     lvl_rdymy_closure:
         const lvl_rdymy_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rdymy_entry() //  [R1]
         { []
         }
     {offset
       cdGyS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGyT; else goto cdGyU;
       cdGyT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGyU: // global
           (_cdGyP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdGyP::I64 == 0) goto cdGyR; else goto cdGyQ;
       cdGyR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdGyQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdGyP::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rdymy_info" {
     lvl_rdymy_info:
         const lvl_rdymy_entry;
         const 0;
         const 281479271677973;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.071953704 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_entry() //  []
         { []
         }
     {offset
       cdGz7: // global
           R1 = lvl_rdymy_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.076162558 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info;
         const 0;
 },
 sat_sdEOJ_entry() //  [R1]
         { []
         }
     {offset
       cdGzm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGzn; else goto cdGzo;
       cdGzn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGzo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = Data.Functor.Classes.$fRead1Proxy2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEOJ_info" {
     sat_sdEOJ_info:
         const sat_sdEOJ_entry;
         const 1;
         const 281479271677968;
         const SdF7K_srt+16;
 },
 section ""relreadonly" . udGzu_srtd" {
     udGzu_srtd:
         const SdF7K_srt+16;
         const 34;
         const 8590000129;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       cdGzp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGzt; else goto cdGzs;
       cdGzt: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGzs: // global
           I64[Hp - 16] = sat_sdEOJ_info;
           P64[Hp] = R4;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const udGzu_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.082813121 UTC

[section ""data" . lvl1_rdymz_closure" {
     lvl1_rdymz_closure:
         const lvl1_rdymz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rdymz_entry() //  [R1]
         { []
         }
     {offset
       cdGzO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGzP; else goto cdGzQ;
       cdGzP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGzQ: // global
           (_cdGzL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdGzL::I64 == 0) goto cdGzN; else goto cdGzM;
       cdGzN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdGzM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdGzL::I64;
           R2 = Data.Functor.Classes.$fRead1Proxy1_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rdymz_info" {
     lvl1_rdymz_info:
         const lvl1_rdymz_entry;
         const 0;
         const 281479271677973;
         const SdF7K_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.086982953 UTC

[section ""data" . lvl2_rdymA_closure" {
     lvl2_rdymA_closure:
         const lvl2_rdymA_info;
         const 0;
 },
 lvl2_rdymA_entry() //  [R2]
         { []
         }
     {offset
       cdGA7: // global
           R3 = R2;
           R2 = lvl1_rdymz_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rdymA_info" {
     lvl2_rdymA_info:
         const lvl2_rdymA_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdF7K_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.090300682 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Proxy_$cliftReadList_entry() //  [R4]
         { []
         }
     {offset
       cdGAi: // global
           R2 = R4;
           call lvl2_rdymA_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Proxy_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.093930833 UTC

[section ""data" . Data.Functor.Classes.$fRead1Proxy_closure" {
     Data.Functor.Classes.$fRead1Proxy_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadList_closure+3;
         const Data.Functor.Classes.$fRead1Proxy5_closure+4;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.096177347 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_entry() //  [R3]
         { []
         }
     {offset
       cdGAu: // global
           R2 = R3;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.100903744 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info;
 },
 sat_sdEOT_entry() //  [R1]
         { []
         }
     {offset
       cdGAM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdGAN; else goto cdGAO;
       cdGAN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGAO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdGAJ_info;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEOT_info" {
     sat_sdEOT_info:
         const sat_sdEOT_entry;
         const 1;
         const 16;
 },
 _cdGAJ() //  [R1]
         { []
         }
     {offset
       cdGAJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGAR; else goto cdGAQ;
       cdGAR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdGAQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdGAJ_info" {
     block_cdGAJ_info:
         const _cdGAJ;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cdGAS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGAW; else goto cdGAV;
       cdGAW: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGAV: // global
           I64[Hp - 16] = sat_sdEOT_info;
           P64[Hp] = R3;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.113204307 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList2_closure" {
     Data.Functor.Classes.$w$cliftReadList2_closure:
         const Data.Functor.Classes.$w$cliftReadList2_info;
         const 0;
 },
 sat_sdEOZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGBv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGBw; else goto cdGBx;
       cdGBw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGBx: // global
           I64[Sp - 8] = block_cdGBs_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEOZ_info" {
     sat_sdEOZ_info:
         const sat_sdEOZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGBs() //  [R1]
         { []
         }
     {offset
       cdGBs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGBA; else goto cdGBz;
       cdGBA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGBz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGBs_info" {
     block_cdGBs_info:
         const _cdGBs;
         const 0;
         const 30;
 },
 sat_sdEP0_entry() //  [R1]
         { []
         }
     {offset
       cdGBB: // global
           _sdEP0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGBC; else goto cdGBD;
       cdGBD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGBF; else goto cdGBE;
       cdGBF: // global
           HpAlloc = 16;
           goto cdGBC;
       cdGBC: // global
           R1 = _sdEP0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGBE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEP0::P64;
           _sdEOU::P64 = P64[_sdEP0::P64 + 16];
           I64[Hp - 8] = sat_sdEOZ_info;
           P64[Hp] = _sdEOU::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEP0_info" {
     sat_sdEP0_info:
         const sat_sdEP0_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+304;
 },
 Data.Functor.Classes.$w$cliftReadList2_entry() //  [R2]
         { []
         }
     {offset
       cdGBG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGBK; else goto cdGBJ;
       cdGBK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGBJ: // global
           I64[Hp - 16] = sat_sdEP0_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList2_info" {
     Data.Functor.Classes.$w$cliftReadList2_info:
         const Data.Functor.Classes.$w$cliftReadList2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.124497083 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1[]_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1[]_$cliftReadList_entry() //  [R3]
         { []
         }
     {offset
       cdGCf: // global
           R2 = R3;
           call Data.Functor.Classes.$w$cliftReadList2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1[]_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1[]_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.128320642 UTC

[section ""data" . Data.Functor.Classes.$fRead1[]_closure" {
     Data.Functor.Classes.$fRead1[]_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1[]_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1[]_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1[]_$cliftReadPrec_closure+2;
         const Data.Functor.Classes.$fRead1[]_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.132375125 UTC

[section ""data" . Data.Functor.Classes.showsPrec1_closure" {
     Data.Functor.Classes.showsPrec1_closure:
         const Data.Functor.Classes.showsPrec1_info;
 },
 sat_sdEP6_entry() //  [R1]
         { []
         }
     {offset
       cdGCv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGCw; else goto cdGCx;
       cdGCw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGCx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEP6_info" {
     sat_sdEP6_info:
         const sat_sdEP6_entry;
         const 1;
         const 16;
 },
 sat_sdEP5_entry() //  [R1]
         { []
         }
     {offset
       cdGCC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGCD; else goto cdGCE;
       cdGCD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGCE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEP5_info" {
     sat_sdEP5_info:
         const sat_sdEP5_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.showsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdGCF: // global
           _sdEP4::P64 = R3;
           _sdEP3::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGCG; else goto cdGCH;
       cdGCH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGCJ; else goto cdGCI;
       cdGCJ: // global
           HpAlloc = 48;
           goto cdGCG;
       cdGCG: // global
           R3 = _sdEP4::P64;
           R2 = _sdEP3::P64;
           R1 = Data.Functor.Classes.showsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGCI: // global
           I64[Hp - 40] = sat_sdEP6_info;
           P64[Hp - 24] = _sdEP4::P64;
           I64[Hp - 16] = sat_sdEP5_info;
           P64[Hp] = _sdEP4::P64;
           R2 = _sdEP3::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsPrec1_info" {
     Data.Functor.Classes.showsPrec1_info:
         const Data.Functor.Classes.showsPrec1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.141527568 UTC

[section ""data" . Data.Functor.Classes.showsUnaryWith1_closure" {
     Data.Functor.Classes.showsUnaryWith1_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.148657796 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnary1_closure" {
     Data.Functor.Classes.$wshowsUnary1_closure:
         const Data.Functor.Classes.$wshowsUnary1_info;
 },
 Data.Functor.Classes.$wshowsUnary1_slow() //  [R1]
         { []
         }
     {offset
       cdGD6: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsUnary1_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdEPe_entry() //  [R1]
         { []
         }
     {offset
       cdGDi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGDj; else goto cdGDk;
       cdGDj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPe_info" {
     sat_sdEPe_info:
         const sat_sdEPe_entry;
         const 1;
         const 16;
 },
 sat_sdEPd_entry() //  [R1]
         { []
         }
     {offset
       cdGDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGDq; else goto cdGDr;
       cdGDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGDr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPd_info" {
     sat_sdEPd_info:
         const sat_sdEPd_entry;
         const 1;
         const 16;
 },
 g_sdEPc_entry() //  [R1]
         { []
         }
     {offset
       cdGDs: // global
           _sdEPc::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdGDt; else goto cdGDu;
       cdGDu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGDw; else goto cdGDv;
       cdGDw: // global
           HpAlloc = 48;
           goto cdGDt;
       cdGDt: // global
           R1 = _sdEPc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGDv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPc::P64;
           _sdEP7::P64 = P64[_sdEPc::P64 + 16];
           _sdEP8::P64 = P64[_sdEPc::P64 + 24];
           _sdEPb::P64 = P64[_sdEPc::P64 + 32];
           I64[Hp - 40] = sat_sdEPe_info;
           P64[Hp - 24] = _sdEP8::P64;
           I64[Hp - 16] = sat_sdEPd_info;
           P64[Hp] = _sdEP8::P64;
           R2 = _sdEP7::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdEPb::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdEPc_info" {
     g_sdEPc_info:
         const g_sdEPc_entry;
         const 3;
         const 15;
 },
 sat_sdEPj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGDH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGDL; else goto cdGDK;
       cdGDL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGDK: // global
           _sdEP9::P64 = P64[R1 + 7];
           _sdEPc::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdEPc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEP9::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEPj_info" {
     sat_sdEPj_info:
         const sat_sdEPj_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEPm_entry() //  [R1]
         { []
         }
     {offset
       cdGE1: // global
           _sdEPm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGE2; else goto cdGE3;
       cdGE3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGE5; else goto cdGE4;
       cdGE5: // global
           HpAlloc = 24;
           goto cdGE2;
       cdGE2: // global
           R1 = _sdEPm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGE4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPm::P64;
           _sdEPc::P64 = P64[_sdEPm::P64 + 16];
           _sdEPk::P64 = P64[_sdEPm::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEPk::P64;
           R2 = Hp - 14;
           R1 = _sdEPc::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPm_info" {
     sat_sdEPm_info:
         const sat_sdEPm_entry;
         const 2;
         const 18;
 },
 sat_sdEPo_entry() //  [R1]
         { []
         }
     {offset
       cdGE7: // global
           _sdEPo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGE8; else goto cdGE9;
       cdGE9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGEb; else goto cdGEa;
       cdGEb: // global
           HpAlloc = 56;
           goto cdGE8;
       cdGE8: // global
           R1 = _sdEPo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGEa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPo::P64;
           _sdEP9::P64 = P64[_sdEPo::P64 + 16];
           _sdEPc::P64 = P64[_sdEPo::P64 + 24];
           _sdEPk::P64 = P64[_sdEPo::P64 + 32];
           I64[Hp - 48] = sat_sdEPm_info;
           P64[Hp - 32] = _sdEPc::P64;
           P64[Hp - 24] = _sdEPk::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEP9::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPo_info" {
     sat_sdEPo_info:
         const sat_sdEPo_entry;
         const 3;
         const 15;
 },
 sat_sdEPp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGEd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGEh; else goto cdGEg;
       cdGEh: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGEg: // global
           _sdEP9::P64 = P64[R1 + 7];
           _sdEPc::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdEPo_info;
           P64[Hp - 40] = _sdEP9::P64;
           P64[Hp - 32] = _sdEPc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEPp_info" {
     sat_sdEPp_info:
         const sat_sdEPp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGEl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGEp; else goto cdGEo;
       cdGEp: // global
           HpAlloc = 64;
           R1 = Data.Functor.Classes.$wshowsUnary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdGEo: // global
           I64[Hp - 56] = g_sdEPc_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R6;
           _cdGDa::P64 = Hp - 56;
           if (%MO_S_Le_W64(R5, 10)) goto cdGEj; else goto cdGEk;
       cdGEj: // global
           I64[Hp - 16] = sat_sdEPj_info;
           P64[Hp - 8] = R4;
           P64[Hp] = _cdGDa::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGEk: // global
           I64[Hp - 16] = sat_sdEPp_info;
           P64[Hp - 8] = R4;
           P64[Hp] = _cdGDa::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnary1_info" {
     Data.Functor.Classes.$wshowsUnary1_info:
         const Data.Functor.Classes.$wshowsUnary1_entry;
         const 0;
         const 14;
         const 21474836480;
         const 0;
         const 517;
         const Data.Functor.Classes.$wshowsUnary1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.167837201 UTC

[section ""data" . Data.Functor.Classes.showsUnary1_closure" {
     Data.Functor.Classes.showsUnary1_closure:
         const Data.Functor.Classes.showsUnary1_info;
 },
 Data.Functor.Classes.showsUnary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGFy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGFz; else goto cdGFA;
       cdGFz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnary1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGFA: // global
           I64[Sp - 40] = block_cdGFv_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udGFE; else goto cdGFw;
       udGFE: // global
           call _cdGFv(R1) args: 0, res: 0, upd: 0;
       cdGFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnary1_info" {
     Data.Functor.Classes.showsUnary1_info:
         const Data.Functor.Classes.showsUnary1_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdGFv() //  [R1]
         { []
         }
     {offset
       cdGFv: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsUnary1_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGFv_info" {
     block_cdGFv_info:
         const _cdGFv;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.180793379 UTC

[section ""data" . Data.Functor.Classes.$wshowsBinary1_closure" {
     Data.Functor.Classes.$wshowsBinary1_closure:
         const Data.Functor.Classes.$wshowsBinary1_info;
 },
 Data.Functor.Classes.$wshowsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdGFQ: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinary1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sdEPG_entry() //  [R1]
         { []
         }
     {offset
       cdGG2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGG3; else goto cdGG4;
       cdGG3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGG4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPG_info" {
     sat_sdEPG_info:
         const sat_sdEPG_entry;
         const 1;
         const 16;
 },
 sat_sdEPF_entry() //  [R1]
         { []
         }
     {offset
       cdGG9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGGa; else goto cdGGb;
       cdGGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPF_info" {
     sat_sdEPF_info:
         const sat_sdEPF_entry;
         const 1;
         const 16;
 },
 f1_sdEPE_entry() //  [R1]
         { []
         }
     {offset
       cdGGc: // global
           _sdEPE::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdGGd; else goto cdGGe;
       cdGGe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGGg; else goto cdGGf;
       cdGGg: // global
           HpAlloc = 48;
           goto cdGGd;
       cdGGd: // global
           R1 = _sdEPE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPE::P64;
           _sdEPx::P64 = P64[_sdEPE::P64 + 16];
           _sdEPz::P64 = P64[_sdEPE::P64 + 24];
           _sdEPC::P64 = P64[_sdEPE::P64 + 32];
           I64[Hp - 40] = sat_sdEPG_info;
           P64[Hp - 24] = _sdEPz::P64;
           I64[Hp - 16] = sat_sdEPF_info;
           P64[Hp] = _sdEPz::P64;
           R2 = _sdEPx::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdEPC::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_sdEPE_info" {
     f1_sdEPE_info:
         const f1_sdEPE_entry;
         const 3;
         const 15;
 },
 sat_sdEPJ_entry() //  [R1]
         { []
         }
     {offset
       cdGGp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGGq; else goto cdGGr;
       cdGGq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPJ_info" {
     sat_sdEPJ_info:
         const sat_sdEPJ_entry;
         const 1;
         const 16;
 },
 sat_sdEPI_entry() //  [R1]
         { []
         }
     {offset
       cdGGw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGGx; else goto cdGGy;
       cdGGx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPI_info" {
     sat_sdEPI_info:
         const sat_sdEPI_entry;
         const 1;
         const 16;
 },
 g1_sdEPH_entry() //  [R1]
         { []
         }
     {offset
       cdGGz: // global
           _sdEPH::P64 = R1;
           if ((Sp + -56) < SpLim) (likely: False) goto cdGGA; else goto cdGGB;
       cdGGB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGGD; else goto cdGGC;
       cdGGD: // global
           HpAlloc = 48;
           goto cdGGA;
       cdGGA: // global
           R1 = _sdEPH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPH::P64;
           _sdEPy::P64 = P64[_sdEPH::P64 + 16];
           _sdEPz::P64 = P64[_sdEPH::P64 + 24];
           _sdEPD::P64 = P64[_sdEPH::P64 + 32];
           I64[Hp - 40] = sat_sdEPJ_info;
           P64[Hp - 24] = _sdEPz::P64;
           I64[Hp - 16] = sat_sdEPI_info;
           P64[Hp] = _sdEPz::P64;
           R2 = _sdEPy::P64;
           I64[Sp - 56] = stg_ap_pppp_info;
           P64[Sp - 48] = Hp - 16;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = _sdEPD::P64;
           Sp = Sp - 56;
           call Data.Functor.Classes.liftShowsPrec_entry(R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_sdEPH_info" {
     g1_sdEPH_info:
         const g1_sdEPH_entry;
         const 3;
         const 15;
 },
 sat_sdEPO_entry() //  [R1]
         { []
         }
     {offset
       cdGGS: // global
           _sdEPO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGGT; else goto cdGGU;
       cdGGU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGGW; else goto cdGGV;
       cdGGW: // global
           HpAlloc = 56;
           goto cdGGT;
       cdGGT: // global
           R1 = _sdEPO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPO::P64;
           _sdEPE::P64 = P64[_sdEPO::P64 + 16];
           _sdEPH::P64 = P64[_sdEPO::P64 + 24];
           _sdEPL::P64 = P64[_sdEPO::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdEPH::P64;
           P64[Hp - 24] = _sdEPL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdEPE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPO_info" {
     sat_sdEPO_info:
         const sat_sdEPO_entry;
         const 3;
         const 15;
 },
 sat_sdEPQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGGY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGH2; else goto cdGH1;
       cdGH2: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGH1: // global
           _sdEPA::P64 = P64[R1 + 7];
           _sdEPE::P64 = P64[R1 + 15];
           _sdEPH::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_sdEPO_info;
           P64[Hp - 40] = _sdEPE::P64;
           P64[Hp - 32] = _sdEPH::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdEPA::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEPQ_info" {
     sat_sdEPQ_info:
         const sat_sdEPQ_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdEPT_entry() //  [R1]
         { []
         }
     {offset
       cdGHm: // global
           _sdEPT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGHn; else goto cdGHo;
       cdGHo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGHq; else goto cdGHp;
       cdGHq: // global
           HpAlloc = 24;
           goto cdGHn;
       cdGHn: // global
           R1 = _sdEPT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPT::P64;
           _sdEPH::P64 = P64[_sdEPT::P64 + 16];
           _sdEPR::P64 = P64[_sdEPT::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEPR::P64;
           R2 = Hp - 14;
           R1 = _sdEPH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPT_info" {
     sat_sdEPT_info:
         const sat_sdEPT_entry;
         const 2;
         const 18;
 },
 sat_sdEPV_entry() //  [R1]
         { []
         }
     {offset
       cdGHs: // global
           _sdEPV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGHt; else goto cdGHu;
       cdGHu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGHw; else goto cdGHv;
       cdGHw: // global
           HpAlloc = 56;
           goto cdGHt;
       cdGHt: // global
           R1 = _sdEPV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGHv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPV::P64;
           _sdEPE::P64 = P64[_sdEPV::P64 + 16];
           _sdEPH::P64 = P64[_sdEPV::P64 + 24];
           _sdEPR::P64 = P64[_sdEPV::P64 + 32];
           I64[Hp - 48] = sat_sdEPT_info;
           P64[Hp - 32] = _sdEPH::P64;
           P64[Hp - 24] = _sdEPR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdEPE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPV_info" {
     sat_sdEPV_info:
         const sat_sdEPV_entry;
         const 3;
         const 15;
 },
 sat_sdEPX_entry() //  [R1]
         { []
         }
     {offset
       cdGHy: // global
           _sdEPX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGHz; else goto cdGHA;
       cdGHA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGHC; else goto cdGHB;
       cdGHC: // global
           HpAlloc = 64;
           goto cdGHz;
       cdGHz: // global
           R1 = _sdEPX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGHB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEPX::P64;
           _sdEPA::P64 = P64[_sdEPX::P64 + 16];
           _sdEPE::P64 = P64[_sdEPX::P64 + 24];
           _sdEPH::P64 = P64[_sdEPX::P64 + 32];
           _sdEPR::P64 = P64[_sdEPX::P64 + 40];
           I64[Hp - 56] = sat_sdEPV_info;
           P64[Hp - 40] = _sdEPE::P64;
           P64[Hp - 32] = _sdEPH::P64;
           P64[Hp - 24] = _sdEPR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdEPA::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEPX_info" {
     sat_sdEPX_info:
         const sat_sdEPX_entry;
         const 4;
         const 15;
 },
 sat_sdEPY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGHE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdGHI; else goto cdGHH;
       cdGHI: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGHH: // global
           _sdEPA::P64 = P64[R1 + 7];
           _sdEPE::P64 = P64[R1 + 15];
           _sdEPH::P64 = P64[R1 + 23];
           I64[Hp - 64] = sat_sdEPX_info;
           P64[Hp - 48] = _sdEPA::P64;
           P64[Hp - 40] = _sdEPE::P64;
           P64[Hp - 32] = _sdEPH::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEPY_info" {
     sat_sdEPY_info:
         const sat_sdEPY_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsBinary1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdGHM: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdGHQ; else goto cdGHP;
       cdGHQ: // global
           HpAlloc = 112;
           R1 = Data.Functor.Classes.$wshowsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdGHP: // global
           I64[Hp - 104] = f1_sdEPE_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = P64[Sp];
           I64[Hp - 64] = g1_sdEPH_info;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = P64[Sp + 8];
           _cdGFU::P64 = Hp - 104;
           _cdGGh::P64 = Hp - 64;
           if (%MO_S_Le_W64(R6, 10)) goto cdGHK; else goto cdGHL;
       cdGHK: // global
           I64[Hp - 24] = sat_sdEPQ_info;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = _cdGFU::P64;
           P64[Hp] = _cdGGh::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGHL: // global
           I64[Hp - 24] = sat_sdEPY_info;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = _cdGFU::P64;
           P64[Hp] = _cdGGh::P64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsBinary1_info" {
     Data.Functor.Classes.$wshowsBinary1_info:
         const Data.Functor.Classes.$wshowsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 1031;
         const Data.Functor.Classes.$wshowsBinary1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.214347619 UTC

[section ""data" . Data.Functor.Classes.showsBinary1_closure" {
     Data.Functor.Classes.showsBinary1_closure:
         const Data.Functor.Classes.showsBinary1_info;
 },
 Data.Functor.Classes.showsBinary1_slow() //  [R1]
         { []
         }
     {offset
       cdGJz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.showsBinary1_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 24, res: 0, upd: 8;
     }
 },
 Data.Functor.Classes.showsBinary1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGJG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGJH; else goto cdGJI;
       cdGJH: // global
           R1 = Data.Functor.Classes.showsBinary1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdGJI: // global
           I64[Sp - 40] = block_cdGJD_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udGJM; else goto cdGJE;
       udGJM: // global
           call _cdGJD(R1) args: 0, res: 0, upd: 0;
       cdGJE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsBinary1_info" {
     Data.Functor.Classes.showsBinary1_info:
         const Data.Functor.Classes.showsBinary1_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const Data.Functor.Classes.showsBinary1_slow;
 },
 _cdGJD() //  [R1]
         { []
         }
     {offset
       cdGJD: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinary1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGJD_info" {
     block_cdGJD_info:
         const _cdGJD;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.221850034 UTC

[section ""data" . Data.Functor.Classes.eq2_closure" {
     Data.Functor.Classes.eq2_closure:
         const Data.Functor.Classes.eq2_info;
 },
 sat_sdEQc_entry() //  [R1]
         { []
         }
     {offset
       cdGK7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGK8; else goto cdGK9;
       cdGK8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQc_info" {
     sat_sdEQc_info:
         const sat_sdEQc_entry;
         const 1;
         const 16;
 },
 sat_sdEQb_entry() //  [R1]
         { []
         }
     {offset
       cdGKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGKf; else goto cdGKg;
       cdGKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQb_info" {
     sat_sdEQb_info:
         const sat_sdEQb_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.eq2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGKh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGKl; else goto cdGKk;
       cdGKl: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.eq2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGKk: // global
           I64[Hp - 40] = sat_sdEQc_info;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sdEQb_info;
           P64[Hp] = R3;
           R3 = Hp - 40;
           _sdEQ8::P64 = R2;
           R2 = Hp - 16;
           R1 = _sdEQ8::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.eq2_info" {
     Data.Functor.Classes.eq2_info:
         const Data.Functor.Classes.eq2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.230289972 UTC

[section ""data" . Data.Functor.Classes.compare2_closure" {
     Data.Functor.Classes.compare2_closure:
         const Data.Functor.Classes.compare2_info;
 },
 sat_sdEQh_entry() //  [R1]
         { []
         }
     {offset
       cdGKK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGKL; else goto cdGKM;
       cdGKL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGKM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQh_info" {
     sat_sdEQh_info:
         const sat_sdEQh_entry;
         const 1;
         const 16;
 },
 sat_sdEQg_entry() //  [R1]
         { []
         }
     {offset
       cdGKR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGKS; else goto cdGKT;
       cdGKS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQg_info" {
     sat_sdEQg_info:
         const sat_sdEQg_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.compare2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGKU: // global
           _sdEQf::P64 = R4;
           _sdEQe::P64 = R3;
           _sdEQd::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdGKV; else goto cdGKW;
       cdGKW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdGKY; else goto cdGKX;
       cdGKY: // global
           HpAlloc = 48;
           goto cdGKV;
       cdGKV: // global
           R4 = _sdEQf::P64;
           R3 = _sdEQe::P64;
           R2 = _sdEQd::P64;
           R1 = Data.Functor.Classes.compare2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGKX: // global
           I64[Hp - 40] = sat_sdEQh_info;
           P64[Hp - 24] = _sdEQf::P64;
           I64[Hp - 16] = sat_sdEQg_info;
           P64[Hp] = _sdEQe::P64;
           R2 = _sdEQd::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 24;
           call Data.Functor.Classes.liftCompare2_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.compare2_info" {
     Data.Functor.Classes.compare2_info:
         const Data.Functor.Classes.compare2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.239898116 UTC

[section ""data" . Data.Functor.Classes.readsPrec2_closure" {
     Data.Functor.Classes.readsPrec2_closure:
         const Data.Functor.Classes.readsPrec2_info;
 },
 sat_sdEQo_entry() //  [R1]
         { []
         }
     {offset
       cdGLr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGLs; else goto cdGLt;
       cdGLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGLt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQo_info" {
     sat_sdEQo_info:
         const sat_sdEQo_entry;
         const 1;
         const 16;
 },
 sat_sdEQn_entry() //  [R1]
         { []
         }
     {offset
       cdGLy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGLz; else goto cdGLA;
       cdGLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQn_info" {
     sat_sdEQn_info:
         const sat_sdEQn_entry;
         const 1;
         const 16;
 },
 sat_sdEQm_entry() //  [R1]
         { []
         }
     {offset
       cdGLF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGLG; else goto cdGLH;
       cdGLG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGLH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQm_info" {
     sat_sdEQm_info:
         const sat_sdEQm_entry;
         const 1;
         const 16;
 },
 sat_sdEQl_entry() //  [R1]
         { []
         }
     {offset
       cdGLM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGLN; else goto cdGLO;
       cdGLN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGLO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQl_info" {
     sat_sdEQl_info:
         const sat_sdEQl_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGLP: // global
           _sdEQk::P64 = R4;
           _sdEQj::P64 = R3;
           _sdEQi::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGLQ; else goto cdGLR;
       cdGLR: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdGLT; else goto cdGLS;
       cdGLT: // global
           HpAlloc = 96;
           goto cdGLQ;
       cdGLQ: // global
           R4 = _sdEQk::P64;
           R3 = _sdEQj::P64;
           R2 = _sdEQi::P64;
           R1 = Data.Functor.Classes.readsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGLS: // global
           I64[Hp - 88] = sat_sdEQo_info;
           P64[Hp - 72] = _sdEQk::P64;
           I64[Hp - 64] = sat_sdEQn_info;
           P64[Hp - 48] = _sdEQk::P64;
           I64[Hp - 40] = sat_sdEQm_info;
           P64[Hp - 24] = _sdEQj::P64;
           I64[Hp - 16] = sat_sdEQl_info;
           P64[Hp] = _sdEQj::P64;
           R2 = _sdEQi::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadsPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsPrec2_info" {
     Data.Functor.Classes.readsPrec2_info:
         const Data.Functor.Classes.readsPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.25252495 UTC

[section ""data" . Data.Functor.Classes.readPrec2_closure" {
     Data.Functor.Classes.readPrec2_closure:
         const Data.Functor.Classes.readPrec2_info;
 },
 sat_sdEQv_entry() //  [R1]
         { []
         }
     {offset
       cdGMA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGMB; else goto cdGMC;
       cdGMB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGMC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQv_info" {
     sat_sdEQv_info:
         const sat_sdEQv_entry;
         const 1;
         const 16;
 },
 sat_sdEQu_entry() //  [R1]
         { []
         }
     {offset
       cdGMH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGMI; else goto cdGMJ;
       cdGMI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGMJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQu_info" {
     sat_sdEQu_info:
         const sat_sdEQu_entry;
         const 1;
         const 16;
 },
 sat_sdEQt_entry() //  [R1]
         { []
         }
     {offset
       cdGMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGMP; else goto cdGMQ;
       cdGMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQt_info" {
     sat_sdEQt_info:
         const sat_sdEQt_entry;
         const 1;
         const 16;
 },
 sat_sdEQs_entry() //  [R1]
         { []
         }
     {offset
       cdGMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGMW; else goto cdGMX;
       cdGMW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGMX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQs_info" {
     sat_sdEQs_info:
         const sat_sdEQs_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.readPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGMY: // global
           _sdEQr::P64 = R4;
           _sdEQq::P64 = R3;
           _sdEQp::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGMZ; else goto cdGN0;
       cdGN0: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdGN2; else goto cdGN1;
       cdGN2: // global
           HpAlloc = 96;
           goto cdGMZ;
       cdGMZ: // global
           R4 = _sdEQr::P64;
           R3 = _sdEQq::P64;
           R2 = _sdEQp::P64;
           R1 = Data.Functor.Classes.readPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGN1: // global
           I64[Hp - 88] = sat_sdEQv_info;
           P64[Hp - 72] = _sdEQr::P64;
           I64[Hp - 64] = sat_sdEQu_info;
           P64[Hp - 48] = _sdEQr::P64;
           I64[Hp - 40] = sat_sdEQt_info;
           P64[Hp - 24] = _sdEQq::P64;
           I64[Hp - 16] = sat_sdEQs_info;
           P64[Hp] = _sdEQq::P64;
           R2 = _sdEQp::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readPrec2_info" {
     Data.Functor.Classes.readPrec2_info:
         const Data.Functor.Classes.readPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.266604776 UTC

[section ""data" . Data.Functor.Classes.liftReadList2Default_closure" {
     Data.Functor.Classes.liftReadList2Default_closure:
         const Data.Functor.Classes.liftReadList2Default_info;
 },
 sat_sdEQM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGNR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGNS; else goto cdGNT;
       cdGNS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGNT: // global
           I64[Sp - 8] = block_cdGNO_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEQM_info" {
     sat_sdEQM_info:
         const sat_sdEQM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGNO() //  [R1]
         { []
         }
     {offset
       cdGNO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGNW; else goto cdGNV;
       cdGNW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGNV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGNO_info" {
     block_cdGNO_info:
         const _cdGNO;
         const 0;
         const 30;
 },
 sat_sdEQH_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGO2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEQH_info" {
     sat_sdEQH_info:
         const sat_sdEQH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEQG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGOd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdGOe; else goto cdGOf;
       cdGOe: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGOf: // global
           I64[Sp - 8] = block_cdGOa_info;
           R3 = R3;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEQG_info" {
     sat_sdEQG_info:
         const sat_sdEQG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _cdGOa() //  [R1]
         { []
         }
     {offset
       cdGOa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGOi; else goto cdGOh;
       cdGOi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGOh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGOa_info" {
     block_cdGOa_info:
         const _cdGOa;
         const 0;
         const 30;
 },
 sat_sdEQB_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGOo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEQB_info" {
     sat_sdEQB_info:
         const sat_sdEQB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEQN_entry() //  [R1]
         { []
         }
     {offset
       cdGOr: // global
           _sdEQN::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto cdGOs; else goto cdGOt;
       cdGOt: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdGOv; else goto cdGOu;
       cdGOv: // global
           HpAlloc = 64;
           goto cdGOs;
       cdGOs: // global
           R1 = _sdEQN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEQN::P64;
           _sdEQw::P64 = P64[_sdEQN::P64 + 16];
           _sdEQx::P64 = P64[_sdEQN::P64 + 24];
           _sdEQy::P64 = P64[_sdEQN::P64 + 32];
           _sdEQz::P64 = P64[_sdEQN::P64 + 40];
           _sdEQA::P64 = P64[_sdEQN::P64 + 48];
           I64[Hp - 56] = sat_sdEQM_info;
           P64[Hp - 48] = _sdEQA::P64;
           I64[Hp - 40] = sat_sdEQH_info;
           P64[Hp - 32] = _sdEQz::P64;
           I64[Hp - 24] = sat_sdEQG_info;
           P64[Hp - 16] = _sdEQy::P64;
           I64[Hp - 8] = sat_sdEQB_info;
           P64[Hp] = _sdEQx::P64;
           R2 = _sdEQw::P64;
           I64[Sp - 72] = stg_ap_pppppp_info;
           P64[Sp - 64] = Hp - 7;
           P64[Sp - 56] = Hp - 22;
           P64[Sp - 48] = Hp - 39;
           P64[Sp - 40] = Hp - 54;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 72;
           call Data.Functor.Classes.liftReadListPrec2_entry(R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQN_info" {
     sat_sdEQN_info:
         const sat_sdEQN_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.liftReadList2Default_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       cdGOw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGOA; else goto cdGOz;
       cdGOA: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadList2Default_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGOz: // global
           I64[Hp - 48] = sat_sdEQN_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadList2Default_info" {
     Data.Functor.Classes.liftReadList2Default_info:
         const Data.Functor.Classes.liftReadList2Default_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.283535609 UTC

[section ""data" . Data.Functor.Classes.$fRead2Either_closure" {
     Data.Functor.Classes.$fRead2Either_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2Either_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1Either8_closure+6;
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2Either_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Either_$cliftReadList2_entry() //  [R2,
                                                                 R3, R4, R5]
         { []
         }
     {offset
       cdGPs: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2Either_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Either_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2Either_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2Either_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.288055081 UTC

[section ""data" . Data.Functor.Classes.$fRead2Const_closure" {
     Data.Functor.Classes.$fRead2Const_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2Const_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1Const6_closure+6;
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2Const_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2Const_$cliftReadList2_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdGPE: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2Const_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2Const_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2Const_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2Const_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.292455032 UTC

[section ""data" . Data.Functor.Classes.$fRead2(,)_closure" {
     Data.Functor.Classes.$fRead2(,)_closure:
         const Data.Functor.Classes.C:Read2_con_info;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadsPrec2_closure+5;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure+4;
         const Data.Functor.Classes.$fRead1(,)2_closure+6;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure+4;
         const 0;
 },
 section ""data" . Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadList2_closure:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info;
         const 0;
 },
 Data.Functor.Classes.$fRead2(,)_$cliftReadList2_entry() //  [R2,
                                                              R3, R4, R5]
         { []
         }
     {offset
       cdGPQ: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead2(,)_closure+1;
           call Data.Functor.Classes.liftReadList2Default_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info" {
     Data.Functor.Classes.$fRead2(,)_$cliftReadList2_info:
         const Data.Functor.Classes.$fRead2(,)_$cliftReadList2_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.297831679 UTC

[section ""data" . Data.Functor.Classes.liftReadListPrec2Default_closure" {
     Data.Functor.Classes.liftReadListPrec2Default_closure:
         const Data.Functor.Classes.liftReadListPrec2Default_info;
         const 0;
 },
 sat_sdEQT_entry() //  [R1]
         { []
         }
     {offset
       cdGQ6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdGQ7; else goto cdGQ8;
       cdGQ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGQ8: // global
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           P64[Sp - 16] = P64[R1 + 40];
           P64[Sp - 8] = P64[R1 + 48];
           Sp = Sp - 40;
           call Data.Functor.Classes.liftReadPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEQT_info" {
     sat_sdEQT_info:
         const sat_sdEQT_entry;
         const 5;
         const 15;
 },
 Data.Functor.Classes.liftReadListPrec2Default_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       cdGQ9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdGQd; else goto cdGQc;
       cdGQd: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.liftReadListPrec2Default_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGQc: // global
           I64[Hp - 48] = sat_sdEQT_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.liftReadListPrec2Default_info" {
     Data.Functor.Classes.liftReadListPrec2Default_info:
         const Data.Functor.Classes.liftReadListPrec2Default_entry;
         const 0;
         const 141733920782;
         const 21474836505;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.304247455 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)1_closure" {
     Data.Functor.Classes.$fRead1(,)1_closure:
         const Data.Functor.Classes.$fRead1(,)1_info;
         const 0;
 },
 sat_sdEQZ_entry() //  [R1]
         { []
         }
     {offset
       cdGQA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGQB; else goto cdGQC;
       cdGQB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGQC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEQZ_info" {
     sat_sdEQZ_info:
         const sat_sdEQZ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1(,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdGQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGQH; else goto cdGQG;
       cdGQH: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGQG: // global
           I64[Hp - 16] = sat_sdEQZ_info;
           P64[Hp] = R2;
           _sdEQX::P64 = R5;
           R5 = R6;
           R4 = _sdEQX::P64;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)1_info" {
     Data.Functor.Classes.$fRead1(,)1_info:
         const Data.Functor.Classes.$fRead1(,)1_entry;
         const 0;
         const 4503603922337806;
         const 21474836505;
         const SdF7K_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.311117142 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec_info;
         const 0;
 },
 sat_sdER4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGR5: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdER4_info" {
     sat_sdER4_info:
         const sat_sdER4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdER3_entry() //  [R1]
         { []
         }
     {offset
       cdGRc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGRd; else goto cdGRe;
       cdGRd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGRe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdER3_info" {
     sat_sdER3_info:
         const sat_sdER3_entry;
         const 1;
         const 16;
 },
 sat_sdER5_entry() //  [R1]
         { []
         }
     {offset
       cdGRf: // global
           _sdER5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdGRg; else goto cdGRh;
       cdGRh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGRj; else goto cdGRi;
       cdGRj: // global
           HpAlloc = 40;
           goto cdGRg;
       cdGRg: // global
           R1 = _sdER5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGRi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdER5::P64;
           _sdER0::P64 = P64[_sdER5::P64 + 16];
           _sdER1::P64 = P64[_sdER5::P64 + 24];
           _sdER2::P64 = P64[_sdER5::P64 + 32];
           I64[Hp - 32] = sat_sdER4_info;
           P64[Hp - 24] = _sdER1::P64;
           I64[Hp - 16] = sat_sdER3_info;
           P64[Hp] = _sdER0::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdER2::P64;
           R3 = Hp - 31;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec2_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdER5_info" {
     sat_sdER5_info:
         const sat_sdER5_entry;
         const 3;
         const 4294967311;
         const SdF7K_srt+192;
 },
 Data.Functor.Classes.$w$cliftReadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGRk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGRo; else goto cdGRn;
       cdGRo: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGRn: // global
           I64[Hp - 32] = sat_sdER5_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec_info" {
     Data.Functor.Classes.$w$cliftReadsPrec_info:
         const Data.Functor.Classes.$w$cliftReadsPrec_entry;
         const 0;
         const 9007203549708302;
         const 12884901911;
         const SdF7K_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.321196649 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_entry() //  [R2,
                                                              R3, R5]
         { []
         }
     {offset
       cdGRP: // global
           R4 = R5;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.325635326 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdERd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGS5: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$fRead1(,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERd_info" {
     sat_sdERd_info:
         const sat_sdERd_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const SdF7K_srt+352;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdGS8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGSc; else goto cdGSb;
       cdGSc: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGSb: // global
           I64[Hp - 24] = sat_sdERd_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry;
         const 0;
         const 1378684502030;
         const 12884901911;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.333093304 UTC

[section ""data" . Data.Functor.Classes.$fRead1(,)_closure" {
     Data.Functor.Classes.$fRead1(,)_closure:
         const Data.Functor.Classes.$fRead1(,)_info;
         const 0;
 },
 sat_sdERl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdGSu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERl_info" {
     sat_sdERl_info:
         const sat_sdERl_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+368;
 },
 sat_sdERk_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdGSC: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1(,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERk_info" {
     sat_sdERk_info:
         const sat_sdERk_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+352;
 },
 sat_sdERj_entry() //  [R1]
         { []
         }
     {offset
       cdGSJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGSK; else goto cdGSL;
       cdGSK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGSL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERj_info" {
     sat_sdERj_info:
         const sat_sdERj_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+376;
 },
 sat_sdERi_entry() //  [R1, R2, R4]
         { []
         }
     {offset
       cdGSR: // global
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERi_info" {
     sat_sdERi_info:
         const sat_sdERi_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdF7K_srt+360;
 },
 Data.Functor.Classes.$fRead1(,)_entry() //  [R2]
         { []
         }
     {offset
       cdGSV: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdGSZ; else goto cdGSY;
       cdGSZ: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGSY: // global
           I64[Hp - 104] = sat_sdERl_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sdERk_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdERj_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdERi_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_info" {
     Data.Functor.Classes.$fRead1(,)_info:
         const Data.Functor.Classes.$fRead1(,)_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const SdF7K_srt+352;
 },
 section ""data" . Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_info;
         const 0;
 },
 sat_sdERn_entry() //  [R1]
         { []
         }
     {offset
       cdGT8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGT9; else goto cdGTa;
       cdGT9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGTa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1(,)_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERn_info" {
     sat_sdERn_info:
         const sat_sdERn_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+384;
 },
 Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdGTb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdGTf; else goto cdGTe;
       cdGTf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGTe: // global
           I64[Hp - 16] = sat_sdERn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1(,)_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1(,)_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdF7K_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.349124751 UTC

[section ""data" . Data.Functor.Classes.showsPrec2_closure" {
     Data.Functor.Classes.showsPrec2_closure:
         const Data.Functor.Classes.showsPrec2_info;
 },
 sat_sdERu_entry() //  [R1]
         { []
         }
     {offset
       cdGU0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGU1; else goto cdGU2;
       cdGU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERu_info" {
     sat_sdERu_info:
         const sat_sdERu_entry;
         const 1;
         const 16;
 },
 sat_sdERt_entry() //  [R1]
         { []
         }
     {offset
       cdGU7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGU8; else goto cdGU9;
       cdGU8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGU9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERt_info" {
     sat_sdERt_info:
         const sat_sdERt_entry;
         const 1;
         const 16;
 },
 sat_sdERs_entry() //  [R1]
         { []
         }
     {offset
       cdGUe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGUf; else goto cdGUg;
       cdGUf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGUg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERs_info" {
     sat_sdERs_info:
         const sat_sdERs_entry;
         const 1;
         const 16;
 },
 sat_sdERr_entry() //  [R1]
         { []
         }
     {offset
       cdGUl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGUm; else goto cdGUn;
       cdGUm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGUn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdERr_info" {
     sat_sdERr_info:
         const sat_sdERr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.showsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGUo: // global
           _sdERq::P64 = R4;
           _sdERp::P64 = R3;
           _sdERo::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cdGUp; else goto cdGUq;
       cdGUq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdGUs; else goto cdGUr;
       cdGUs: // global
           HpAlloc = 96;
           goto cdGUp;
       cdGUp: // global
           R4 = _sdERq::P64;
           R3 = _sdERp::P64;
           R2 = _sdERo::P64;
           R1 = Data.Functor.Classes.showsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGUr: // global
           I64[Hp - 88] = sat_sdERu_info;
           P64[Hp - 72] = _sdERq::P64;
           I64[Hp - 64] = sat_sdERt_info;
           P64[Hp - 48] = _sdERq::P64;
           I64[Hp - 40] = sat_sdERs_info;
           P64[Hp - 24] = _sdERp::P64;
           I64[Hp - 16] = sat_sdERr_info;
           P64[Hp] = _sdERp::P64;
           R2 = _sdERo::P64;
           I64[Sp - 40] = stg_ap_pppp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 88;
           Sp = Sp - 40;
           call Data.Functor.Classes.liftShowsPrec2_entry(R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsPrec2_info" {
     Data.Functor.Classes.showsPrec2_info:
         const Data.Functor.Classes.showsPrec2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.363549564 UTC

[section ""data" . Data.Functor.Classes.$wreadsData_closure" {
     Data.Functor.Classes.$wreadsData_closure:
         const Data.Functor.Classes.$wreadsData_info;
         const 0;
 },
 sat_sdERH_entry() //  [R1]
         { []
         }
     {offset
       cdGVp: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go_sdERy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERH_info" {
     sat_sdERH_info:
         const sat_sdERH_entry;
         const 2;
         const 18;
 },
 go_sdERy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGVw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGVx; else goto cdGVy;
       cdGVx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGVy: // global
           I64[Sp - 24] = block_cdGVa_info;
           _sdERy::P64 = R1;
           _sdERv::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdERv::P64;
           P64[Sp - 8] = _sdERy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udGVL; else goto cdGVb;
       udGVL: // global
           call _cdGVa(R1) args: 0, res: 0, upd: 0;
       cdGVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdERy_info" {
     go_sdERy_info:
         const go_sdERy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGVa() //  [R1]
         { []
         }
     {offset
       cdGVa: // global
           if (R1 & 7 == 1) goto cdGVt; else goto cdGVu;
       cdGVt: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGVu: // global
           I64[Sp - 8] = block_cdGVg_info;
           _sdERC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdERC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udGVK; else goto cdGVh;
       udGVK: // global
           call _cdGVg(R1) args: 0, res: 0, upd: 0;
       cdGVh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGVa_info" {
     block_cdGVa_info:
         const _cdGVa;
         const 2;
         const 30;
 },
 _cdGVg() //  [R1]
         { []
         }
     {offset
       cdGVg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGVF; else goto cdGVE;
       cdGVF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGVE: // global
           _sdERE::P64 = P64[R1 + 7];
           _sdERF::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdERH_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           _sdERv::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdGVB_info;
           R3 = _sdERF::P64;
           R2 = _sdERE::P64;
           R1 = _sdERv::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGVg_info" {
     block_cdGVg_info:
         const _cdGVg;
         const 3;
         const 30;
 },
 _cdGVB() //  [R1]
         { []
         }
     {offset
       cdGVB: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGVB_info" {
     block_cdGVB_info:
         const _cdGVB;
         const 1;
         const 30;
 },
 sat_sdERM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGVT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGVU; else goto cdGVV;
       cdGVU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGVV: // global
           I64[Sp - 16] = block_cdGVR_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdERM_info" {
     sat_sdERM_info:
         const sat_sdERM_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdF7K_srt+392;
 },
 _cdGVR() //  [R1]
         { []
         }
     {offset
       cdGVR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdERy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGVR_info" {
     block_cdGVR_info:
         const _cdGVR;
         const 1;
         const 30;
 },
 section ""relreadonly" . udGW6_srtd" {
     udGW6_srtd:
         const SdF7K_srt+120;
         const 36;
         const 51539607553;
 },
 Data.Functor.Classes.$wreadsData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGW1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdGW5; else goto cdGW4;
       cdGW5: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadsData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGW4: // global
           I64[Hp - 24] = go_sdERy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdERM_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _sdERJ::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _sdERJ::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadsData_info" {
     Data.Functor.Classes.$wreadsData_info:
         const Data.Functor.Classes.$wreadsData_entry;
         const 0;
         const 18446744069414584334;
         const 12884901909;
         const udGW6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.380294037 UTC

[section ""data" . Data.Functor.Classes.readsData_closure" {
     Data.Functor.Classes.readsData_closure:
         const Data.Functor.Classes.readsData_info;
         const 0;
 },
 Data.Functor.Classes.readsData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGX1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdGX2; else goto cdGX3;
       cdGX2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGX3: // global
           I64[Sp - 24] = block_cdGWY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udGX7; else goto cdGWZ;
       udGX7: // global
           call _cdGWY(R1) args: 0, res: 0, upd: 0;
       cdGWZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsData_info" {
     Data.Functor.Classes.readsData_info:
         const Data.Functor.Classes.readsData_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdF7K_srt+400;
 },
 _cdGWY() //  [R1]
         { []
         }
     {offset
       cdGWY: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wreadsData_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGWY_info" {
     block_cdGWY_info:
         const _cdGWY;
         const 2;
         const 4294967326;
         const SdF7K_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.385609698 UTC

[section ""data" . Data.Functor.Classes.readData2_closure" {
     Data.Functor.Classes.readData2_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.389284649 UTC

[section ""data" . Data.Functor.Classes.readData1_closure" {
     Data.Functor.Classes.readData1_closure:
         const Data.Functor.Classes.readData1_info;
         const 0;
 },
 lvl3_sdERV_entry() //  [R1]
         { []
         }
     {offset
       cdGXr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGXs; else goto cdGXt;
       cdGXs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdGXt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.readData2_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdERV_info" {
     lvl3_sdERV_info:
         const lvl3_sdERV_entry;
         const 1;
         const 16;
 },
 sat_sdES0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGXC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdGXD; else goto cdGXE;
       cdGXD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGXE: // global
           I64[Sp - 16] = block_cdGXz_info;
           _sdERV::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sdERV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udGXN; else goto cdGXA;
       udGXN: // global
           call _cdGXz(R1) args: 0, res: 0, upd: 0;
       cdGXA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdES0_info" {
     sat_sdES0_info:
         const sat_sdES0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGXz() //  [R1]
         { []
         }
     {offset
       cdGXz: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdGXL; else goto cdGXM;
       cdGXL: // global
           R1 = Text.ParserCombinators.ReadP.$fAlternativeReadP4_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGXM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGXz_info" {
     block_cdGXz_info:
         const _cdGXz;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readData1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGXO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdGXS; else goto cdGXR;
       cdGXS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readData1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGXR: // global
           I64[Hp - 32] = lvl3_sdERV_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdES0_info;
           P64[Hp] = Hp - 32;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readData1_info" {
     Data.Functor.Classes.readData1_info:
         const Data.Functor.Classes.readData1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdF7K_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.398911794 UTC

[section ""data" . Data.Functor.Classes.readData_closure" {
     Data.Functor.Classes.readData_closure:
         const Data.Functor.Classes.readData_info;
         const 0;
 },
 Data.Functor.Classes.readData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdGYk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readData1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readData_info" {
     Data.Functor.Classes.readData_info:
         const Data.Functor.Classes.readData_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.40503923 UTC

[section ""data" . Data.Functor.Classes.readsUnaryWith_closure" {
     Data.Functor.Classes.readsUnaryWith_closure:
         const Data.Functor.Classes.readsUnaryWith_info;
 },
 go_sdES7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdGYM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGYN; else goto cdGYO;
       cdGYN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdGYO: // global
           I64[Sp - 24] = block_cdGYF_info;
           _sdES7::P64 = R1;
           _sdES3::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdES3::P64;
           P64[Sp - 8] = _sdES7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udGZ8; else goto cdGYG;
       udGZ8: // global
           call _cdGYF(R1) args: 0, res: 0, upd: 0;
       cdGYG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdES7_info" {
     go_sdES7_info:
         const go_sdES7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdGYF() //  [R1]
         { []
         }
     {offset
       cdGYF: // global
           if (R1 & 7 == 1) goto cdGYJ; else goto cdGYK;
       cdGYJ: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGYK: // global
           I64[Sp - 8] = block_cdGYU_info;
           _sdESb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdESb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udGZ7; else goto cdGYV;
       udGZ7: // global
           call _cdGYU(R1) args: 0, res: 0, upd: 0;
       cdGYV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGYF_info" {
     block_cdGYF_info:
         const _cdGYF;
         const 2;
         const 30;
 },
 _cdGYU() //  [R1]
         { []
         }
     {offset
       cdGYU: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdGZ6; else goto cdGZ5;
       cdGZ6: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGZ5: // global
           _sdESd::P64 = P64[R1 + 7];
           _sdESe::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdESd::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdESe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGYU_info" {
     block_cdGYU_info:
         const _cdGYU;
         const 3;
         const 30;
 },
 Data.Functor.Classes.readsUnaryWith_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdGZd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdGZe; else goto cdGZf;
       cdGZe: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdGZf: // global
           I64[Sp - 32] = block_cdGYv_info;
           R3 = R3;
           _sdES1::P64 = R2;
           R2 = R5;
           P64[Sp - 24] = _sdES1::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnaryWith_info" {
     Data.Functor.Classes.readsUnaryWith_info:
         const Data.Functor.Classes.readsUnaryWith_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdGYv() //  [R1]
         { []
         }
     {offset
       cdGYv: // global
           if (R1 & 7 == 1) goto cdGZa; else goto cdGZb;
       cdGZa: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdGZb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdGZl; else goto cdGZk;
       cdGZl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdGZk: // global
           I64[Hp - 8] = go_sdES7_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdGZi_info;
           R3 = P64[Sp + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 8];
           P64[Sp + 24] = Hp - 7;
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGYv_info" {
     block_cdGYv_info:
         const _cdGYv;
         const 3;
         const 30;
 },
 _cdGZi() //  [R1]
         { []
         }
     {offset
       cdGZi: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdES7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdGZi_info" {
     block_cdGZi_info:
         const _cdGZi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.420171465 UTC

[section ""data" . Data.Functor.Classes.$wreadUnaryWith_closure" {
     Data.Functor.Classes.$wreadUnaryWith_closure:
         const Data.Functor.Classes.$wreadUnaryWith_info;
         const 0;
 },
 sat_sdESw_entry() //  [R1, R2]
         { []
         }
     {offset
       cdH0s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdH0w; else goto cdH0v;
       cdH0w: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH0v: // global
           _sdESl::P64 = P64[R1 + 7];
           _sdESn::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdESl::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _sdESn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdESw_info" {
     sat_sdESw_info:
         const sat_sdESw_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdESt_entry() //  [R1]
         { []
         }
     {offset
       cdH0E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdH0L; else goto cdH0M;
       cdH0L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH0M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdH0B_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udH0Q; else goto cdH0C;
       udH0Q: // global
           call _cdH0B(R1) args: 0, res: 0, upd: 0;
       cdH0C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdESt_info" {
     sat_sdESt_info:
         const sat_sdESt_entry;
         const 1;
         const 16;
 },
 _cdH0B() //  [R1]
         { []
         }
     {offset
       cdH0B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdH0P; else goto cdH0O;
       cdH0P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdH0O: // global
           _sdESs::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdESs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdH0B_info" {
     block_cdH0B_info:
         const _cdH0B;
         const 0;
         const 30;
 },
 sat_sdESx_entry() //  [R1, R2]
         { []
         }
     {offset
       cdH0R: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdH0V; else goto cdH0U;
       cdH0V: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH0U: // global
           _sdESj::P64 = P64[R1 + 7];
           _sdESl::P64 = P64[R1 + 15];
           _sdESm::P64 = P64[R1 + 23];
           _sdESn::P64 = P64[R1 + 31];
           I64[Hp - 40] = sat_sdESw_info;
           P64[Hp - 32] = _sdESl::P64;
           P64[Hp - 24] = _sdESn::P64;
           I64[Hp - 16] = sat_sdESt_info;
           P64[Hp] = _sdESm::P64;
           R3 = Hp - 39;
           R2 = Hp - 16;
           R1 = _sdESj::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdESx_info" {
     sat_sdESx_info:
         const sat_sdESx_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wreadUnaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdH0X: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdH11; else goto cdH10;
       cdH11: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadUnaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH10: // global
           I64[Hp - 48] = sat_sdESx_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R3;
           R3 = Hp - 47;
           R2 = Hp - 4;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadUnaryWith_info" {
     Data.Functor.Classes.$wreadUnaryWith_info:
         const Data.Functor.Classes.$wreadUnaryWith_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdF7K_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.43197436 UTC

[section ""data" . Data.Functor.Classes.readUnaryWith1_closure" {
     Data.Functor.Classes.readUnaryWith1_closure:
         const Data.Functor.Classes.readUnaryWith1_info;
         const 0;
 },
 Data.Functor.Classes.readUnaryWith1_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdH1B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdH1C; else goto cdH1D;
       cdH1C: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readUnaryWith1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH1D: // global
           I64[Sp - 8] = block_cdH1y_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.Functor.Classes.$wreadUnaryWith_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readUnaryWith1_info" {
     Data.Functor.Classes.readUnaryWith1_info:
         const Data.Functor.Classes.readUnaryWith1_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const SdF7K_srt+432;
 },
 _cdH1y() //  [R1]
         { []
         }
     {offset
       cdH1y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdH1G; else goto cdH1F;
       cdH1G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdH1F: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdH1y_info" {
     block_cdH1y_info:
         const _cdH1y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.438350437 UTC

[section ""data" . Data.Functor.Classes.readUnaryWith_closure" {
     Data.Functor.Classes.readUnaryWith_closure:
         const Data.Functor.Classes.readUnaryWith_info;
         const 0;
 },
 Data.Functor.Classes.readUnaryWith_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdH1W: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readUnaryWith1_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readUnaryWith_info" {
     Data.Functor.Classes.readUnaryWith_info:
         const Data.Functor.Classes.readUnaryWith_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.442556582 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const5_closure" {
     Data.Functor.Classes.$fRead1Const5_closure:
         const Data.Functor.Classes.$fRead1Const5_info;
         const 0;
 },
 sat_sdESK_entry() //  [R1]
         { []
         }
     {offset
       cdH2b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH2c; else goto cdH2d;
       cdH2c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH2d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdESK_info" {
     sat_sdESK_info:
         const sat_sdESK_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1Const5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdH2e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdH2i; else goto cdH2h;
       cdH2i: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH2h: // global
           I64[Hp - 16] = sat_sdESK_info;
           P64[Hp] = R2;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const5_info" {
     Data.Functor.Classes.$fRead1Const5_info:
         const Data.Functor.Classes.$fRead1Const5_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdF7K_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.44957317 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec1_info;
         const 0;
 },
 sat_sdESN_entry() //  [R1]
         { []
         }
     {offset
       cdH2F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH2G; else goto cdH2H;
       cdH2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH2H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdESN_info" {
     sat_sdESN_info:
         const sat_sdESN_entry;
         const 1;
         const 16;
 },
 sat_sdESO_entry() //  [R1]
         { []
         }
     {offset
       cdH2I: // global
           _sdESO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdH2J; else goto cdH2K;
       cdH2K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdH2M; else goto cdH2L;
       cdH2M: // global
           HpAlloc = 24;
           goto cdH2J;
       cdH2J: // global
           R1 = _sdESO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH2L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdESO::P64;
           _sdESL::P64 = P64[_sdESO::P64 + 16];
           _sdESM::P64 = P64[_sdESO::P64 + 24];
           I64[Hp - 16] = sat_sdESN_info;
           P64[Hp] = _sdESL::P64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdESM::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdESO_info" {
     sat_sdESO_info:
         const sat_sdESO_entry;
         const 2;
         const 4294967314;
         const SdF7K_srt+464;
 },
 Data.Functor.Classes.$w$cliftReadsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdH2N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdH2R; else goto cdH2Q;
       cdH2R: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH2Q: // global
           I64[Hp - 24] = sat_sdESO_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec1_info" {
     Data.Functor.Classes.$w$cliftReadsPrec1_info:
         const Data.Functor.Classes.$w$cliftReadsPrec1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdF7K_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.457025911 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_entry() //  [R2,
                                                                R5]
         { []
         }
     {offset
       cdH3e: // global
           R3 = R5;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.46160153 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec_info;
         const 0;
 },
 w1_sdESU_entry() //  [R1]
         { []
         }
     {offset
       cdH3t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH3u; else goto cdH3v;
       cdH3u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH3v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdESU_info" {
     w1_sdESU_info:
         const w1_sdESU_entry;
         const 1;
         const 16;
 },
 sat_sdESX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdH3B: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdESX_info" {
     sat_sdESX_info:
         const sat_sdESX_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+464;
 },
 Data.Functor.Classes.$w$cliftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdH3E: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdH3I; else goto cdH3H;
       cdH3I: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH3H: // global
           I64[Hp - 32] = w1_sdESU_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdESX_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec_info" {
     Data.Functor.Classes.$w$cliftReadListPrec_info:
         const Data.Functor.Classes.$w$cliftReadListPrec_entry;
         const 0;
         const 22518002431819790;
         const 4294967301;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.468554935 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cdH42: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.474889793 UTC

[section ""data" . Data.Functor.Classes.$fRead1Const_closure" {
     Data.Functor.Classes.$fRead1Const_closure:
         const Data.Functor.Classes.$fRead1Const_info;
         const 0;
 },
 lvl3_sdET2_entry() //  [R1]
         { []
         }
     {offset
       cdH4h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH4i; else goto cdH4j;
       cdH4i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH4j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdET2_info" {
     lvl3_sdET2_info:
         const lvl3_sdET2_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+480;
 },
 sat_sdETb_entry() //  [R1]
         { []
         }
     {offset
       cdH4p: // global
           R1 = P64[R1 + 6];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETb_info" {
     sat_sdETb_info:
         const sat_sdETb_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sdET8_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdH4x: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1Const5_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdET8_info" {
     sat_sdET8_info:
         const sat_sdET8_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+456;
 },
 sat_sdET7_entry() //  [R1]
         { []
         }
     {offset
       cdH4E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH4F; else goto cdH4G;
       cdH4F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH4G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Const_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdET7_info" {
     sat_sdET7_info:
         const sat_sdET7_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+488;
 },
 sat_sdET6_entry() //  [R1, R4]
         { []
         }
     {offset
       cdH4M: // global
           R3 = R4;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdET6_info" {
     sat_sdET6_info:
         const sat_sdET6_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdF7K_srt+472;
 },
 Data.Functor.Classes.$fRead1Const_entry() //  [R2]
         { []
         }
     {offset
       cdH4Q: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdH4U; else goto cdH4T;
       cdH4U: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH4T: // global
           I64[Hp - 128] = lvl3_sdET2_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sdETb_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_sdET8_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdET7_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdET6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_info" {
     Data.Functor.Classes.$fRead1Const_info:
         const Data.Functor.Classes.$fRead1Const_entry;
         const 0;
         const 261993005070;
         const 4294967301;
         const SdF7K_srt+456;
 },
 section ""data" . Data.Functor.Classes.$fRead1Const_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Const_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_info;
         const 0;
 },
 sat_sdETd_entry() //  [R1]
         { []
         }
     {offset
       cdH53: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH54; else goto cdH55;
       cdH54: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH55: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Const_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETd_info" {
     sat_sdETd_info:
         const sat_sdETd_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+496;
 },
 Data.Functor.Classes.$fRead1Const_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdH56: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdH5a; else goto cdH59;
       cdH5a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Const_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH59: // global
           I64[Hp - 16] = sat_sdETd_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Const_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Const_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdF7K_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.492102374 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either7_closure" {
     Data.Functor.Classes.$fRead1Either7_closure:
         const Data.Functor.Classes.$fRead1Either7_info;
         const 0;
 },
 sat_sdETj_entry() //  [R1]
         { []
         }
     {offset
       cdH62: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH63; else goto cdH64;
       cdH63: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH64: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETj_info" {
     sat_sdETj_info:
         const sat_sdETj_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fRead1Either7_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdH65: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdH69; else goto cdH68;
       cdH69: // global
           HpAlloc = 24;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either7_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH68: // global
           I64[Hp - 16] = sat_sdETj_info;
           P64[Hp] = R2;
           _sdETh::P64 = R5;
           R5 = R6;
           R4 = _sdETh::P64;
           R3 = R3;
           R2 = Hp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either7_info" {
     Data.Functor.Classes.$fRead1Either7_info:
         const Data.Functor.Classes.$fRead1Either7_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdF7K_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.499334466 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec2_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec2_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec2_info;
         const 0;
 },
 sat_sdETo_entry() //  [R1, R2]
         { []
         }
     {offset
       cdH6x: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETo_info" {
     sat_sdETo_info:
         const sat_sdETo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdETn_entry() //  [R1]
         { []
         }
     {offset
       cdH6E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH6F; else goto cdH6G;
       cdH6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETn_info" {
     sat_sdETn_info:
         const sat_sdETn_entry;
         const 1;
         const 16;
 },
 sat_sdETp_entry() //  [R1]
         { []
         }
     {offset
       cdH6H: // global
           _sdETp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdH6I; else goto cdH6J;
       cdH6J: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdH6L; else goto cdH6K;
       cdH6L: // global
           HpAlloc = 40;
           goto cdH6I;
       cdH6I: // global
           R1 = _sdETp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH6K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdETp::P64;
           _sdETk::P64 = P64[_sdETp::P64 + 16];
           _sdETl::P64 = P64[_sdETp::P64 + 24];
           _sdETm::P64 = P64[_sdETp::P64 + 32];
           I64[Hp - 32] = sat_sdETo_info;
           P64[Hp - 24] = _sdETl::P64;
           I64[Hp - 16] = sat_sdETn_info;
           P64[Hp] = _sdETk::P64;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = _sdETm::P64;
           R3 = Hp - 31;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETp_info" {
     sat_sdETp_info:
         const sat_sdETp_entry;
         const 3;
         const 4294967311;
         const SdF7K_srt+512;
 },
 Data.Functor.Classes.$w$cliftReadsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdH6M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdH6Q; else goto cdH6P;
       cdH6Q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH6P: // global
           I64[Hp - 32] = sat_sdETp_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec2_info" {
     Data.Functor.Classes.$w$cliftReadsPrec2_info:
         const Data.Functor.Classes.$w$cliftReadsPrec2_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdF7K_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.508537779 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_entry() //  [R2,
                                                                 R3, R5]
         { []
         }
     {offset
       cdH7h: // global
           R4 = R5;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.512995596 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadListPrec1_closure" {
     Data.Functor.Classes.$w$cliftReadListPrec1_closure:
         const Data.Functor.Classes.$w$cliftReadListPrec1_info;
         const 0;
 },
 w2_sdETw_entry() //  [R1]
         { []
         }
     {offset
       cdH7w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH7x; else goto cdH7y;
       cdH7x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH7y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_sdETw_info" {
     w2_sdETw_info:
         const w2_sdETw_entry;
         const 1;
         const 16;
 },
 sat_sdETz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdH7E: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 6];
           R2 = P64[R1 + 14];
           call Data.Functor.Classes.$w$cliftReadPrec3_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETz_info" {
     sat_sdETz_info:
         const sat_sdETz_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const SdF7K_srt+512;
 },
 Data.Functor.Classes.$w$cliftReadListPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdH7H: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdH7L; else goto cdH7K;
       cdH7L: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadListPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdH7K: // global
           I64[Hp - 40] = w2_sdETw_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdETz_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadListPrec1_info" {
     Data.Functor.Classes.$w$cliftReadListPrec1_info:
         const Data.Functor.Classes.$w$cliftReadListPrec1_entry;
         const 0;
         const 1441151885053526030;
         const 8589934607;
         const SdF7K_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.521843477 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       cdH85: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadListPrec1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadListPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.527629291 UTC

[section ""data" . Data.Functor.Classes.$fRead1Either_closure" {
     Data.Functor.Classes.$fRead1Either_closure:
         const Data.Functor.Classes.$fRead1Either_info;
         const 0;
 },
 sat_sdETM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdH8l: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadListPrec1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETM_info" {
     sat_sdETM_info:
         const sat_sdETM_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+528;
 },
 sat_sdETJ_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdH8t: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fRead1Either7_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETJ_info" {
     sat_sdETJ_info:
         const sat_sdETJ_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+504;
 },
 sat_sdETI_entry() //  [R1]
         { []
         }
     {offset
       cdH8A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH8B; else goto cdH8C;
       cdH8B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH8C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Either_$cliftReadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETI_info" {
     sat_sdETI_info:
         const sat_sdETI_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+536;
 },
 sat_sdETH_entry() //  [R1, R2, R4]
         { []
         }
     {offset
       cdH8I: // global
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Functor.Classes.$w$cliftReadsPrec2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETH_info" {
     sat_sdETH_info:
         const sat_sdETH_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const SdF7K_srt+520;
 },
 Data.Functor.Classes.$fRead1Either_entry() //  [R2]
         { []
         }
     {offset
       cdH8M: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdH8Q; else goto cdH8P;
       cdH8Q: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH8P: // global
           I64[Hp - 104] = sat_sdETM_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sdETJ_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sdETI_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sdETH_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = Hp - 45;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 84;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_info" {
     Data.Functor.Classes.$fRead1Either_info:
         const Data.Functor.Classes.$fRead1Either_entry;
         const 0;
         const 261993005070;
         const 4294967301;
         const SdF7K_srt+504;
 },
 section ""data" . Data.Functor.Classes.$fRead1Either_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Either_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_info;
         const 0;
 },
 sat_sdETO_entry() //  [R1]
         { []
         }
     {offset
       cdH8Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH90; else goto cdH91;
       cdH90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH91: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Classes.$fRead1Either_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdETO_info" {
     sat_sdETO_info:
         const sat_sdETO_entry;
         const 1;
         const 4294967312;
         const SdF7K_srt+544;
 },
 Data.Functor.Classes.$fRead1Either_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdH92: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdH96; else goto cdH95;
       cdH96: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Either_$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdH95: // global
           I64[Hp - 16] = sat_sdETO_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Data.Functor.Classes.liftReadListDefault_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Either_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Either_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdF7K_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.542432562 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Identity4_bytes" {
     Data.Functor.Classes.$fRead1Identity4_bytes:
         I8[] [73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.544889516 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity3_closure" {
     Data.Functor.Classes.$fRead1Identity3_closure:
         const Data.Functor.Classes.$fRead1Identity3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity3_entry() //  [R1]
         { []
         }
     {offset
       cdH9Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdH9R; else goto cdH9S;
       cdH9R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdH9S: // global
           (_cdH9N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdH9N::I64 == 0) goto cdH9P; else goto cdH9O;
       cdH9P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdH9O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdH9N::I64;
           R2 = Data.Functor.Classes.$fRead1Identity4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity3_info" {
     Data.Functor.Classes.$fRead1Identity3_info:
         const Data.Functor.Classes.$fRead1Identity3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.548700204 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity2_closure" {
     Data.Functor.Classes.$fRead1Identity2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Identity3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.553469166 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec_closure" {
     Data.Functor.Classes.$w$cliftReadPrec_closure:
         const Data.Functor.Classes.$w$cliftReadPrec_info;
         const 0;
 },
 sat_sdETZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHau: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdETZ_info" {
     sat_sdETZ_info:
         const sat_sdETZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEU0_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHax: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHaB; else goto cdHaA;
       cdHaB: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHaA: // global
           _sdETP::P64 = P64[R1 + 7];
           _sdETT::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdETZ_info;
           P64[Hp] = _sdETT::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdETP::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEU0_info" {
     sat_sdEU0_info:
         const sat_sdEU0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEU3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHaC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHaD; else goto cdHaE;
       cdHaD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHaE: // global
           I64[Sp - 24] = block_cdHab_info;
           _sdETP::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdETP::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHaR; else goto cdHac;
       udHaR: // global
           call _cdHab(R1) args: 0, res: 0, upd: 0;
       cdHac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEU3_info" {
     sat_sdEU3_info:
         const sat_sdEU3_entry;
         const 1;
         const 70373039144969;
         const 8589934607;
         const SdF7K_srt+440;
 },
 _cdHab() //  [R1]
         { []
         }
     {offset
       cdHab: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHaH; else goto cdHaG;
       cdHaH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHaG: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdHaJ; else goto cdHaN;
       cdHaJ: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHaN: // global
           I64[Hp - 16] = sat_sdEU0_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdHaK_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Identity2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHab_info" {
     block_cdHab_info:
         const _cdHab;
         const 2;
         const 70373039144990;
         const SdF7K_srt+440;
 },
 _cdHaK() //  [R1]
         { []
         }
     {offset
       cdHaK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHaQ; else goto cdHaP;
       cdHaQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHaP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHaK_info" {
     block_cdHaK_info:
         const _cdHaK;
         const 0;
         const 30;
 },
 Data.Functor.Classes.$w$cliftReadPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdHaS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHaW; else goto cdHaV;
       cdHaW: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHaV: // global
           I64[Hp - 8] = sat_sdEU3_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec_info" {
     Data.Functor.Classes.$w$cliftReadPrec_info:
         const Data.Functor.Classes.$w$cliftReadPrec_entry;
         const 0;
         const 844446404968462;
         const 12884901911;
         const SdF7K_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.56705654 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity1_closure" {
     Data.Functor.Classes.$fRead1Identity1_closure:
         const Data.Functor.Classes.$fRead1Identity1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity1_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdHbx: // global
           _sdEU6::P64 = R4;
           R4 = R5;
           R3 = _sdEU6::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity1_info" {
     Data.Functor.Classes.$fRead1Identity1_info:
         const Data.Functor.Classes.$fRead1Identity1_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.574598397 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec3_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec3_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec3_info;
         const 0;
 },
 lvl3_sdEUa_entry() //  [R1]
         { []
         }
     {offset
       cdHbQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHbR; else goto cdHbS;
       cdHbR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHbS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEUa_info" {
     lvl3_sdEUa_info:
         const lvl3_sdEUa_entry;
         const 1;
         const 16;
 },
 sat_sdEUi_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHch: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUi_info" {
     sat_sdEUi_info:
         const sat_sdEUi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEUl_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHcn: // global
           _sdEUg::P64 = R2;
           _sdEUl::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cdHco; else goto cdHcp;
       cdHcp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHcr; else goto cdHcq;
       cdHcr: // global
           HpAlloc = 16;
           goto cdHco;
       cdHco: // global
           R2 = _sdEUg::P64;
           R1 = _sdEUl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHcq: // global
           _sdEUa::P64 = P64[_sdEUl::P64 + 7];
           _sdEUc::P64 = P64[_sdEUl::P64 + 15];
           I64[Hp - 8] = sat_sdEUi_info;
           P64[Hp] = _sdEUc::P64;
           I64[Sp - 8] = block_cdHck_info;
           R3 = Hp - 7;
           R2 = _sdEUa::P64;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUl_info" {
     sat_sdEUl_info:
         const sat_sdEUl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdHck() //  [R1]
         { []
         }
     {offset
       cdHck: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHcu; else goto cdHct;
       cdHcu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHct: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHck_info" {
     block_cdHck_info:
         const _cdHck;
         const 0;
         const 30;
 },
 sat_sdEUo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHcv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHcw; else goto cdHcx;
       cdHcw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHcx: // global
           I64[Sp - 24] = block_cdHbY_info;
           _sdEUa::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdEUa::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHcK; else goto cdHbZ;
       udHcK: // global
           call _cdHbY(R1) args: 0, res: 0, upd: 0;
       cdHbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUo_info" {
     sat_sdEUo_info:
         const sat_sdEUo_entry;
         const 1;
         const 70373039144969;
         const 8589934607;
         const SdF7K_srt+440;
 },
 _cdHbY() //  [R1]
         { []
         }
     {offset
       cdHbY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHcA; else goto cdHcz;
       cdHcA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHcz: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdHcC; else goto cdHcG;
       cdHcC: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHcG: // global
           I64[Hp - 16] = sat_sdEUl_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdHcD_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Identity2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHbY_info" {
     block_cdHbY_info:
         const _cdHbY;
         const 2;
         const 70373039144990;
         const SdF7K_srt+440;
 },
 _cdHcD() //  [R1]
         { []
         }
     {offset
       cdHcD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHcJ; else goto cdHcI;
       cdHcJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHcI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHcD_info" {
     block_cdHcD_info:
         const _cdHcD;
         const 0;
         const 30;
 },
 sat_sdEUp_entry() //  [R1]
         { []
         }
     {offset
       cdHcL: // global
           _sdEUp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHcM; else goto cdHcN;
       cdHcN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHcP; else goto cdHcO;
       cdHcP: // global
           HpAlloc = 40;
           goto cdHcM;
       cdHcM: // global
           R1 = _sdEUp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHcO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEUp::P64;
           _sdEU8::P64 = P64[_sdEUp::P64 + 16];
           _sdEU9::P64 = P64[_sdEUp::P64 + 24];
           I64[Hp - 32] = lvl3_sdEUa_info;
           P64[Hp - 16] = _sdEU8::P64;
           I64[Hp - 8] = sat_sdEUo_info;
           P64[Hp] = Hp - 32;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdEU9::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEUp_info" {
     sat_sdEUp_info:
         const sat_sdEUp_entry;
         const 2;
         const 281496451547154;
         const SdF7K_srt+424;
 },
 Data.Functor.Classes.$w$cliftReadsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHcQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdHcU; else goto cdHcT;
       cdHcU: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHcT: // global
           I64[Hp - 24] = sat_sdEUp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec3_info" {
     Data.Functor.Classes.$w$cliftReadsPrec3_info:
         const Data.Functor.Classes.$w$cliftReadsPrec3_entry;
         const 0;
         const 1407396358389774;
         const 8589934607;
         const SdF7K_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.593638382 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_entry() //  [R2,
                                                                   R4]
         { []
         }
     {offset
       cdHdR: // global
           R3 = R4;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec3_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.598900205 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdEUx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHe7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUx_info" {
     sat_sdEUx_info:
         const sat_sdEUx_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+560;
 },
 section ""relreadonly" . udHef_srtd" {
     udHef_srtd:
         const SdF7K_srt+304;
         const 35;
         const 21474836481;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_entry() //  [R2,
                                                                      R3]
         { []
         }
     {offset
       cdHea: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHee; else goto cdHed;
       cdHee: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHed: // global
           I64[Hp - 8] = sat_sdEUx_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udHef_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.606467212 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList_closure" {
     Data.Functor.Classes.$w$cliftReadList_closure:
         const Data.Functor.Classes.$w$cliftReadList_info;
         const 0;
 },
 w1_sdEUz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHeC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w1_sdEUz_info" {
     w1_sdEUz_info:
         const w1_sdEUz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEUC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHeK: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUC_info" {
     sat_sdEUC_info:
         const sat_sdEUC_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+560;
 },
 section ""relreadonly" . udHeX_srtd" {
     udHeX_srtd:
         const SdF7K_srt+304;
         const 33;
         const 4294967297;
 },
 sat_sdEUD_entry() //  [R1]
         { []
         }
     {offset
       cdHeN: // global
           _sdEUD::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdHeO; else goto cdHeP;
       cdHeP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdHeR; else goto cdHeQ;
       cdHeR: // global
           HpAlloc = 32;
           goto cdHeO;
       cdHeO: // global
           R1 = _sdEUD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHeQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEUD::P64;
           _sdEUy::P64 = P64[_sdEUD::P64 + 16];
           I64[Hp - 24] = w1_sdEUz_info;
           P64[Hp - 16] = _sdEUy::P64;
           I64[Hp - 8] = sat_sdEUC_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEUD_info" {
     sat_sdEUD_info:
         const sat_sdEUD_entry;
         const 1;
         const 18446744069414584336;
         const udHeX_srtd;
 },
 section ""relreadonly" . udHeY_srtd" {
     udHeY_srtd:
         const SdF7K_srt+304;
         const 36;
         const 38654705665;
 },
 Data.Functor.Classes.$w$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdHeS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHeW; else goto cdHeV;
       cdHeW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHeV: // global
           I64[Hp - 16] = sat_sdEUD_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList_info" {
     Data.Functor.Classes.$w$cliftReadList_info:
         const Data.Functor.Classes.$w$cliftReadList_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const udHeY_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.617144172 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Identity_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdHft: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Identity_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Identity_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.620455282 UTC

[section ""data" . Data.Functor.Classes.$fRead1Identity_closure" {
     Data.Functor.Classes.$fRead1Identity_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1Identity1_closure+4;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.622251353 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Maybe7_bytes" {
     Data.Functor.Classes.$fRead1Maybe7_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.624747787 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe6_closure" {
     Data.Functor.Classes.$fRead1Maybe6_closure:
         const Data.Functor.Classes.$fRead1Maybe6_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe6_entry() //  [R1]
         { []
         }
     {offset
       cdHfI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHfJ; else goto cdHfK;
       cdHfJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHfK: // global
           (_cdHfF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdHfF::I64 == 0) goto cdHfH; else goto cdHfG;
       cdHfH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdHfG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdHfF::I64;
           R2 = Data.Functor.Classes.$fRead1Maybe7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe6_info" {
     Data.Functor.Classes.$fRead1Maybe6_info:
         const Data.Functor.Classes.$fRead1Maybe6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.629022636 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_lexeme_closure" {
     Data.Functor.Classes.$fRead1Maybe_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Maybe6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.63290803 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe5_closure" {
     Data.Functor.Classes.$fRead1Maybe5_closure:
         const Data.Functor.Classes.$fRead1Maybe5_info;
         const 0;
 },
 sat_sdEUJ_entry() //  [R1]
         { []
         }
     {offset
       cdHg3: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUJ_info" {
     sat_sdEUJ_info:
         const sat_sdEUJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Functor.Classes.$fRead1Maybe5_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHg9: // global
           _sdEUH::P64 = R3;
           _sdEUG::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdHga; else goto cdHgb;
       cdHgb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHgd; else goto cdHgc;
       cdHgd: // global
           HpAlloc = 16;
           goto cdHga;
       cdHga: // global
           R3 = _sdEUH::P64;
           R2 = _sdEUG::P64;
           R1 = Data.Functor.Classes.$fRead1Maybe5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHgc: // global
           I64[Hp - 8] = sat_sdEUJ_info;
           P64[Hp] = _sdEUH::P64;
           I64[Sp - 8] = block_cdHg6_info;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Maybe_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe5_info" {
     Data.Functor.Classes.$fRead1Maybe5_info:
         const Data.Functor.Classes.$fRead1Maybe5_entry;
         const 0;
         const 6755403736023054;
         const 8589934607;
         const SdF7K_srt+440;
 },
 _cdHg6() //  [R1]
         { []
         }
     {offset
       cdHg6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHgg; else goto cdHgf;
       cdHgg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHgf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHg6_info" {
     block_cdHg6_info:
         const _cdHg6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.639881932 UTC

[section ""cstring" . Data.Functor.Classes.$fRead1Maybe4_bytes" {
     Data.Functor.Classes.$fRead1Maybe4_bytes:
         I8[] [74,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.642424363 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe3_closure" {
     Data.Functor.Classes.$fRead1Maybe3_closure:
         const Data.Functor.Classes.$fRead1Maybe3_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe3_entry() //  [R1]
         { []
         }
     {offset
       cdHgE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHgF; else goto cdHgG;
       cdHgF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHgG: // global
           (_cdHgB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdHgB::I64 == 0) goto cdHgD; else goto cdHgC;
       cdHgD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdHgC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdHgB::I64;
           R2 = Data.Functor.Classes.$fRead1Maybe4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe3_info" {
     Data.Functor.Classes.$fRead1Maybe3_info:
         const Data.Functor.Classes.$fRead1Maybe3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.646720275 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe2_closure" {
     Data.Functor.Classes.$fRead1Maybe2_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Functor.Classes.$fRead1Maybe3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.652566324 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadPrec4_closure" {
     Data.Functor.Classes.$w$cliftReadPrec4_closure:
         const Data.Functor.Classes.$w$cliftReadPrec4_info;
         const 0;
 },
 sat_sdEUY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHhn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHhr; else goto cdHhq;
       cdHhr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHhq: // global
           _sdEUR::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _sdEUR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUY_info" {
     sat_sdEUY_info:
         const sat_sdEUY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEUZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHhs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHhw; else goto cdHhv;
       cdHhw: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHhv: // global
           _sdEUM::P64 = P64[R1 + 7];
           _sdEUR::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sdEUY_info;
           P64[Hp] = _sdEUR::P64;
           R3 = Hp - 7;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = _sdEUM::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEUZ_info" {
     sat_sdEUZ_info:
         const sat_sdEUZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEV2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHhx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHhy; else goto cdHhz;
       cdHhy: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHhz: // global
           I64[Sp - 24] = block_cdHh3_info;
           _sdEUM::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sdEUM::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHhM; else goto cdHh4;
       udHhM: // global
           call _cdHh3(R1) args: 0, res: 0, upd: 0;
       cdHh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEV2_info" {
     sat_sdEV2_info:
         const sat_sdEV2_entry;
         const 1;
         const 9007203549708297;
         const 8589934607;
         const SdF7K_srt+440;
 },
 _cdHh3() //  [R1]
         { []
         }
     {offset
       cdHh3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHhC; else goto cdHhB;
       cdHhC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHhB: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto cdHhE; else goto cdHhI;
       cdHhE: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHhI: // global
           I64[Hp - 16] = sat_sdEUZ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdHhF_info;
           R3 = Hp - 15;
           R2 = Data.Functor.Classes.$fRead1Maybe2_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHh3_info" {
     block_cdHh3_info:
         const _cdHh3;
         const 2;
         const 9007203549708318;
         const SdF7K_srt+440;
 },
 _cdHhF() //  [R1]
         { []
         }
     {offset
       cdHhF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHhL; else goto cdHhK;
       cdHhL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHhK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHhF_info" {
     block_cdHhF_info:
         const _cdHhF;
         const 0;
         const 30;
 },
 sat_sdEV3_entry() //  [R1]
         { []
         }
     {offset
       cdHhN: // global
           _sdEV3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHhO; else goto cdHhP;
       cdHhP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHhR; else goto cdHhQ;
       cdHhR: // global
           HpAlloc = 16;
           goto cdHhO;
       cdHhO: // global
           R1 = _sdEV3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHhQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEV3::P64;
           _sdEUM::P64 = P64[_sdEV3::P64 + 16];
           _sdEUN::P64 = P64[_sdEV3::P64 + 24];
           _sdEUO::P64 = P64[_sdEV3::P64 + 32];
           I64[Hp - 8] = sat_sdEV2_info;
           P64[Hp] = _sdEUM::P64;
           R4 = _sdEUO::P64;
           R3 = _sdEUN::P64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEV3_info" {
     sat_sdEV3_info:
         const sat_sdEV3_entry;
         const 3;
         const 36028818493800463;
         const SdF7K_srt+424;
 },
 section ""relreadonly" . udHi2_srtd" {
     udHi2_srtd:
         const SdF7K_srt+64;
         const 70;
         const 175921860444161;
         const 52;
 },
 Data.Functor.Classes.$w$cliftReadPrec4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdHhU: // global
           _sdEUO::P64 = R4;
           _sdEUN::P64 = R3;
           _sdEUM::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHhV; else goto cdHhW;
       cdHhW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHhY; else goto cdHhX;
       cdHhY: // global
           HpAlloc = 40;
           goto cdHhV;
       cdHhV: // global
           R4 = _sdEUO::P64;
           R3 = _sdEUN::P64;
           R2 = _sdEUM::P64;
           R1 = Data.Functor.Classes.$w$cliftReadPrec4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHhX: // global
           I64[Hp - 32] = sat_sdEV3_info;
           P64[Hp - 16] = _sdEUM::P64;
           P64[Hp - 8] = _sdEUN::P64;
           P64[Hp] = _sdEUO::P64;
           I64[Sp - 16] = block_cdHhS_info;
           R4 = _sdEUO::P64;
           R3 = _sdEUN::P64;
           R2 = Data.Functor.Classes.$fRead1Maybe5_closure+2;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadPrec4_info" {
     Data.Functor.Classes.$w$cliftReadPrec4_info:
         const Data.Functor.Classes.$w$cliftReadPrec4_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const udHi2_srtd;
 },
 _cdHhS() //  [R1]
         { []
         }
     {offset
       cdHhS: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHhS_info" {
     block_cdHhS_info:
         const _cdHhS;
         const 1;
         const 4294967326;
         const SdF7K_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.67065765 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe1_closure" {
     Data.Functor.Classes.$fRead1Maybe1_closure:
         const Data.Functor.Classes.$fRead1Maybe1_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe1_entry() //  [R2, R4, R5]
         { []
         }
     {offset
       cdHiR: // global
           _sdEV6::P64 = R4;
           R4 = R5;
           R3 = _sdEV6::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe1_info" {
     Data.Functor.Classes.$fRead1Maybe1_info:
         const Data.Functor.Classes.$fRead1Maybe1_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.676283338 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadsPrec4_closure" {
     Data.Functor.Classes.$w$cliftReadsPrec4_closure:
         const Data.Functor.Classes.$w$cliftReadsPrec4_info;
         const 0;
 },
 sat_sdEVa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHjb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEVa_info" {
     sat_sdEVa_info:
         const sat_sdEVa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEVb_entry() //  [R1]
         { []
         }
     {offset
       cdHje: // global
           _sdEVb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHjf; else goto cdHjg;
       cdHjg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHji; else goto cdHjh;
       cdHji: // global
           HpAlloc = 16;
           goto cdHjf;
       cdHjf: // global
           R1 = _sdEVb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHjh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEVb::P64;
           _sdEV8::P64 = P64[_sdEVb::P64 + 16];
           _sdEV9::P64 = P64[_sdEVb::P64 + 24];
           I64[Hp - 8] = sat_sdEVa_info;
           P64[Hp] = _sdEV8::P64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = _sdEV9::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEVb_info" {
     sat_sdEVb_info:
         const sat_sdEVb_entry;
         const 2;
         const 4294967314;
         const SdF7K_srt+616;
 },
 Data.Functor.Classes.$w$cliftReadsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHjj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdHjn; else goto cdHjm;
       cdHjn: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHjm: // global
           I64[Hp - 24] = sat_sdEVb_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadsPrec4_info" {
     Data.Functor.Classes.$w$cliftReadsPrec4_info:
         const Data.Functor.Classes.$w$cliftReadsPrec4_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SdF7K_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.684024076 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_entry() //  [R2,
                                                                R4]
         { []
         }
     {offset
       cdHjI: // global
           R3 = R4;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadsPrec4_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SdF7K_srt+632;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.688349088 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info;
         const 0;
 },
 sat_sdEVj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHjY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEVj_info" {
     sat_sdEVj_info:
         const sat_sdEVj_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+616;
 },
 section ""relreadonly" . udHk6_srtd" {
     udHk6_srtd:
         const SdF7K_srt+304;
         const 43;
         const 4947802324993;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cdHk1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHk5; else goto cdHk4;
       cdHk5: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHk4: // global
           I64[Hp - 8] = sat_sdEVj_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udHk6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.696343621 UTC

[section ""data" . Data.Functor.Classes.$w$cliftReadList1_closure" {
     Data.Functor.Classes.$w$cliftReadList1_closure:
         const Data.Functor.Classes.$w$cliftReadList1_info;
         const 0;
 },
 w1_sdEVl_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHkt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadPrec.readS_to_Prec1_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w1_sdEVl_info" {
     w1_sdEVl_info:
         const w1_sdEVl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sdEVo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdHkB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Classes.$w$cliftReadPrec4_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEVo_info" {
     sat_sdEVo_info:
         const sat_sdEVo_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SdF7K_srt+616;
 },
 section ""relreadonly" . udHkO_srtd" {
     udHkO_srtd:
         const SdF7K_srt+304;
         const 40;
         const 549755813889;
 },
 sat_sdEVp_entry() //  [R1]
         { []
         }
     {offset
       cdHkE: // global
           _sdEVp::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cdHkF; else goto cdHkG;
       cdHkG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdHkI; else goto cdHkH;
       cdHkI: // global
           HpAlloc = 32;
           goto cdHkF;
       cdHkF: // global
           R1 = _sdEVp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHkH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEVp::P64;
           _sdEVk::P64 = P64[_sdEVp::P64 + 16];
           I64[Hp - 24] = w1_sdEVl_info;
           P64[Hp - 16] = _sdEVk::P64;
           I64[Hp - 8] = sat_sdEVo_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Identity5_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEVp_info" {
     sat_sdEVp_info:
         const sat_sdEVp_entry;
         const 1;
         const 18446744069414584336;
         const udHkO_srtd;
 },
 section ""relreadonly" . udHkP_srtd" {
     udHkP_srtd:
         const SdF7K_srt+304;
         const 44;
         const 9345848836097;
 },
 Data.Functor.Classes.$w$cliftReadList1_entry() //  [R2]
         { []
         }
     {offset
       cdHkJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHkN; else goto cdHkM;
       cdHkN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftReadList1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHkM: // global
           I64[Hp - 16] = sat_sdEVp_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftReadList1_info" {
     Data.Functor.Classes.$w$cliftReadList1_info:
         const Data.Functor.Classes.$w$cliftReadList1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const udHkP_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.706710947 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info;
         const 0;
 },
 Data.Functor.Classes.$fRead1Maybe_$cliftReadList_entry() //  [R2]
         { []
         }
     {offset
       cdHlk: // global
           R2 = R2;
           call Data.Functor.Classes.$w$cliftReadList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info" {
     Data.Functor.Classes.$fRead1Maybe_$cliftReadList_info:
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SdF7K_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.710412899 UTC

[section ""data" . Data.Functor.Classes.$fRead1Maybe_closure" {
     Data.Functor.Classes.$fRead1Maybe_closure:
         const Data.Functor.Classes.C:Read1_con_info;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadsPrec_closure+3;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadList_closure+2;
         const Data.Functor.Classes.$fRead1Maybe1_closure+4;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.716963515 UTC

[section ""data" . Data.Functor.Classes.readsBinaryWith_closure" {
     Data.Functor.Classes.readsBinaryWith_closure:
         const Data.Functor.Classes.readsBinaryWith_info;
 },
 go1_sdEVI_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHm4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdHm5; else goto cdHm6;
       cdHm5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHm6: // global
           I64[Sp - 40] = block_cdHlX_info;
           _sdEVI::P64 = R1;
           _sdEVv::P64 = P64[R1 + 7];
           _sdEVF::P64 = P64[R1 + 15];
           _sdEVH::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sdEVv::P64;
           P64[Sp - 24] = _sdEVF::P64;
           P64[Sp - 16] = _sdEVH::P64;
           P64[Sp - 8] = _sdEVI::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udHmq; else goto cdHlY;
       udHmq: // global
           call _cdHlX(R1) args: 0, res: 0, upd: 0;
       cdHlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sdEVI_info" {
     go1_sdEVI_info:
         const go1_sdEVI_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cdHlX() //  [R1]
         { []
         }
     {offset
       cdHlX: // global
           if (R1 & 7 == 1) goto cdHm1; else goto cdHm2;
       cdHm1: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdHm2: // global
           I64[Sp] = block_cdHmc_info;
           _sdEVM::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sdEVM::P64;
           if (R1 & 7 != 0) goto udHmp; else goto cdHmd;
       udHmp: // global
           call _cdHmc(R1) args: 0, res: 0, upd: 0;
       cdHmd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHlX_info" {
     block_cdHlX_info:
         const _cdHlX;
         const 4;
         const 30;
 },
 _cdHmc() //  [R1]
         { []
         }
     {offset
       cdHmc: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdHmo; else goto cdHmn;
       cdHmo: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHmn: // global
           _sdEVO::P64 = P64[R1 + 7];
           _sdEVP::P64 = P64[R1 + 15];
           I64[Hp - 112] = stg_ap_2_upd_info;
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = stg_ap_3_upd_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdEVO::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 80;
           P64[Hp - 24] = _sdEVP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHmc_info" {
     block_cdHmc_info:
         const _cdHmc;
         const 4;
         const 30;
 },
 go_sdEVz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHmv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdHmw; else goto cdHmx;
       cdHmw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHmx: // global
           I64[Sp - 32] = block_cdHlG_info;
           _sdEVz::P64 = R1;
           _sdEVt::P64 = P64[R1 + 7];
           _sdEVv::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sdEVt::P64;
           P64[Sp - 16] = _sdEVv::P64;
           P64[Sp - 8] = _sdEVz::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udHmK; else goto cdHlH;
       udHmK: // global
           call _cdHlG(R1) args: 0, res: 0, upd: 0;
       cdHlH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdEVz_info" {
     go_sdEVz_info:
         const go_sdEVz_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdHlG() //  [R1]
         { []
         }
     {offset
       cdHlG: // global
           if (R1 & 7 == 1) goto cdHms; else goto cdHmt;
       cdHms: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHmt: // global
           I64[Sp - 8] = block_cdHlM_info;
           _sdEVD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdEVD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udHmJ; else goto cdHlN;
       udHmJ: // global
           call _cdHlM(R1) args: 0, res: 0, upd: 0;
       cdHlN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHlG_info" {
     block_cdHlG_info:
         const _cdHlG;
         const 3;
         const 30;
 },
 _cdHlM() //  [R1]
         { []
         }
     {offset
       cdHlM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHmE; else goto cdHmD;
       cdHmE: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHmD: // global
           _sdEVF::P64 = P64[R1 + 7];
           _sdEVG::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_sdEVI_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _sdEVF::P64;
           P64[Hp] = Hp - 56;
           I64[Sp + 24] = block_cdHmA_info;
           R3 = _sdEVG::P64;
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = Hp - 23;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHlM_info" {
     block_cdHlM_info:
         const _cdHlM;
         const 4;
         const 30;
 },
 _cdHmA() //  [R1]
         { []
         }
     {offset
       cdHmA: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sdEVI_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHmA_info" {
     block_cdHmA_info:
         const _cdHmA;
         const 1;
         const 30;
 },
 Data.Functor.Classes.readsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdHmP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHmQ; else goto cdHmR;
       cdHmQ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHmR: // global
           I64[Sp - 32] = block_cdHlw_info;
           _sdEVt::P64 = R3;
           R3 = R4;
           _sdEVs::P64 = R2;
           R2 = R6;
           P64[Sp - 24] = _sdEVs::P64;
           P64[Sp - 16] = _sdEVt::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsBinaryWith_info" {
     Data.Functor.Classes.readsBinaryWith_info:
         const Data.Functor.Classes.readsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdHlw() //  [R1]
         { []
         }
     {offset
       cdHlw: // global
           if (R1 & 7 == 1) goto cdHmM; else goto cdHmN;
       cdHmM: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHmN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHmX; else goto cdHmW;
       cdHmX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHmW: // global
           I64[Hp - 16] = go_sdEVz_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cdHmU_info;
           R3 = P64[Sp + 32];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[Sp + 8];
           P64[Sp + 32] = Hp - 15;
           Sp = Sp + 24;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHlw_info" {
     block_cdHlw_info:
         const _cdHlw;
         const 4;
         const 30;
 },
 _cdHmU() //  [R1]
         { []
         }
     {offset
       cdHmU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdEVz_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHmU_info" {
     block_cdHmU_info:
         const _cdHmU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.740705469 UTC

[section ""data" . Data.Functor.Classes.$wreadBinaryWith_closure" {
     Data.Functor.Classes.$wreadBinaryWith_closure:
         const Data.Functor.Classes.$wreadBinaryWith_info;
         const 0;
 },
 lvl3_sdEW3_entry() //  [R1]
         { []
         }
     {offset
       cdHoA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHoH; else goto cdHoI;
       cdHoH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHoI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdHox_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHoM; else goto cdHoy;
       udHoM: // global
           call _cdHox(R1) args: 0, res: 0, upd: 0;
       cdHoy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEW3_info" {
     lvl3_sdEW3_info:
         const lvl3_sdEW3_entry;
         const 1;
         const 16;
 },
 _cdHox() //  [R1]
         { []
         }
     {offset
       cdHox: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHoL; else goto cdHoK;
       cdHoL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdHoK: // global
           _sdEW6::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdEW6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdHox_info" {
     block_cdHox_info:
         const _cdHox;
         const 0;
         const 30;
 },
 sat_sdEWa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHoY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHp2; else goto cdHp1;
       cdHp2: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHp1: // global
           _sdEVY::P64 = P64[R1 + 7];
           _sdEW0::P64 = P64[R1 + 15];
           _sdEW7::P64 = P64[R1 + 23];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = _sdEVY::P64;
           P64[Hp - 8] = _sdEW7::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _sdEW0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWa_info" {
     sat_sdEWa_info:
         const sat_sdEWa_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdEWb_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHp3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdHp7; else goto cdHp6;
       cdHp7: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHp6: // global
           _sdEVW::P64 = P64[R1 + 7];
           _sdEVY::P64 = P64[R1 + 15];
           _sdEW0::P64 = P64[R1 + 23];
           _sdEW3::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_sdEWa_info;
           P64[Hp - 16] = _sdEVY::P64;
           P64[Hp - 8] = _sdEW0::P64;
           P64[Hp] = R2;
           R3 = Hp - 23;
           R2 = _sdEW3::P64;
           R1 = _sdEVW::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWb_info" {
     sat_sdEWb_info:
         const sat_sdEWb_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_sdEWc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHp8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHpc; else goto cdHpb;
       cdHpc: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHpb: // global
           _sdEVV::P64 = P64[R1 + 7];
           _sdEVW::P64 = P64[R1 + 15];
           _sdEVY::P64 = P64[R1 + 23];
           _sdEVZ::P64 = P64[R1 + 31];
           _sdEW0::P64 = P64[R1 + 39];
           I64[Hp - 56] = lvl3_sdEW3_info;
           P64[Hp - 40] = _sdEVZ::P64;
           I64[Hp - 32] = sat_sdEWb_info;
           P64[Hp - 24] = _sdEVW::P64;
           P64[Hp - 16] = _sdEVY::P64;
           P64[Hp - 8] = _sdEW0::P64;
           _cdHot::P64 = Hp - 56;
           P64[Hp] = _cdHot::P64;
           R3 = Hp - 31;
           R2 = _cdHot::P64;
           R1 = _sdEVV::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWc_info" {
     sat_sdEWc_info:
         const sat_sdEWc_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wreadBinaryWith_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cdHpe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHpi; else goto cdHph;
       cdHpi: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$wreadBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHph: // global
           I64[Hp - 56] = sat_sdEWc_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R4;
           R3 = Hp - 55;
           R2 = Hp - 4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wreadBinaryWith_info" {
     Data.Functor.Classes.$wreadBinaryWith_info:
         const Data.Functor.Classes.$wreadBinaryWith_entry;
         const 0;
         const 576460756598390798;
         const 25769803802;
         const SdF7K_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.754871327 UTC

[section ""data" . Data.Functor.Classes.readBinaryWith1_closure" {
     Data.Functor.Classes.readBinaryWith1_closure:
         const Data.Functor.Classes.readBinaryWith1_info;
         const 0;
 },
 Data.Functor.Classes.readBinaryWith1_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdHpX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdHpY; else goto cdHpZ;
       cdHpY: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readBinaryWith1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHpZ: // global
           _sdEWi::P64 = P64[Sp];
           I64[Sp] = block_cdHpU_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = _sdEWi::P64;
           Sp = Sp - 8;
           call Data.Functor.Classes.$wreadBinaryWith_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readBinaryWith1_info" {
     Data.Functor.Classes.readBinaryWith1_info:
         const Data.Functor.Classes.readBinaryWith1_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SdF7K_srt+656;
 },
 _cdHpU() //  [R1]
         { []
         }
     {offset
       cdHpU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHq2; else goto cdHq1;
       cdHq2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHq1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHpU_info" {
     block_cdHpU_info:
         const _cdHpU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.761285231 UTC

[section ""data" . Data.Functor.Classes.readBinaryWith_closure" {
     Data.Functor.Classes.readBinaryWith_closure:
         const Data.Functor.Classes.readBinaryWith_info;
         const 0;
 },
 Data.Functor.Classes.readBinaryWith_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cdHqi: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.readBinaryWith1_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readBinaryWith_info" {
     Data.Functor.Classes.readBinaryWith_info:
         const Data.Functor.Classes.readBinaryWith_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdF7K_srt+664;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.767968268 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnaryWith_closure" {
     Data.Functor.Classes.$wshowsUnaryWith_closure:
         const Data.Functor.Classes.$wshowsUnaryWith_info;
 },
 Data.Functor.Classes.$wshowsUnaryWith_slow() //  [R1]
         { []
         }
     {offset
       cdHqq: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 g_sdEWp_entry() //  [R1]
         { []
         }
     {offset
       cdHqy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHqz; else goto cdHqA;
       cdHqz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHqA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdEWp_info" {
     g_sdEWp_info:
         const g_sdEWp_entry;
         const 2;
         const 18;
 },
 sat_sdEWu_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHqL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHqP; else goto cdHqO;
       cdHqP: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHqO: // global
           _sdEWm::P64 = P64[R1 + 7];
           _sdEWp::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdEWp::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEWm::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWu_info" {
     sat_sdEWu_info:
         const sat_sdEWu_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEWx_entry() //  [R1]
         { []
         }
     {offset
       cdHr5: // global
           _sdEWx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHr6; else goto cdHr7;
       cdHr7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHr9; else goto cdHr8;
       cdHr9: // global
           HpAlloc = 24;
           goto cdHr6;
       cdHr6: // global
           R1 = _sdEWx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHr8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEWx::P64;
           _sdEWp::P64 = P64[_sdEWx::P64 + 16];
           _sdEWv::P64 = P64[_sdEWx::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEWv::P64;
           R2 = Hp - 14;
           R1 = _sdEWp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEWx_info" {
     sat_sdEWx_info:
         const sat_sdEWx_entry;
         const 2;
         const 18;
 },
 sat_sdEWz_entry() //  [R1]
         { []
         }
     {offset
       cdHrb: // global
           _sdEWz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHrc; else goto cdHrd;
       cdHrd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHrf; else goto cdHre;
       cdHrf: // global
           HpAlloc = 56;
           goto cdHrc;
       cdHrc: // global
           R1 = _sdEWz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHre: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEWz::P64;
           _sdEWm::P64 = P64[_sdEWz::P64 + 16];
           _sdEWp::P64 = P64[_sdEWz::P64 + 24];
           _sdEWv::P64 = P64[_sdEWz::P64 + 32];
           I64[Hp - 48] = sat_sdEWx_info;
           P64[Hp - 32] = _sdEWp::P64;
           P64[Hp - 24] = _sdEWv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEWm::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEWz_info" {
     sat_sdEWz_info:
         const sat_sdEWz_entry;
         const 3;
         const 15;
 },
 sat_sdEWA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHrh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHrl; else goto cdHrk;
       cdHrl: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHrk: // global
           _sdEWm::P64 = P64[R1 + 7];
           _sdEWp::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdEWz_info;
           P64[Hp - 40] = _sdEWm::P64;
           P64[Hp - 32] = _sdEWp::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWA_info" {
     sat_sdEWA_info:
         const sat_sdEWA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnaryWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHrp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHrt; else goto cdHrs;
       cdHrt: // global
           HpAlloc = 56;
           R1 = Data.Functor.Classes.$wshowsUnaryWith_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdHrs: // global
           I64[Hp - 48] = g_sdEWp_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cdHqu::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 10)) goto cdHrn; else goto cdHro;
       cdHrn: // global
           I64[Hp - 16] = sat_sdEWu_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdHqu::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHro: // global
           I64[Hp - 16] = sat_sdEWA_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdHqu::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnaryWith_info" {
     Data.Functor.Classes.$wshowsUnaryWith_info:
         const Data.Functor.Classes.$wshowsUnaryWith_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const Data.Functor.Classes.$wshowsUnaryWith_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.783459822 UTC

[section ""data" . Data.Functor.Classes.showsUnaryWith_closure" {
     Data.Functor.Classes.showsUnaryWith_closure:
         const Data.Functor.Classes.showsUnaryWith_info;
 },
 Data.Functor.Classes.showsUnaryWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHsm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHsn; else goto cdHso;
       cdHsn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnaryWith_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHso: // global
           I64[Sp - 32] = block_cdHsj_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udHss; else goto cdHsk;
       udHss: // global
           call _cdHsj(R1) args: 0, res: 0, upd: 0;
       cdHsk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnaryWith_info" {
     Data.Functor.Classes.showsUnaryWith_info:
         const Data.Functor.Classes.showsUnaryWith_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdHsj() //  [R1]
         { []
         }
     {offset
       cdHsj: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHsj_info" {
     block_cdHsj_info:
         const _cdHsj;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.789654395 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cdHsK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHsL; else goto cdHsM;
       cdHsL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHsM: // global
           I64[Sp - 16] = block_cdHsH_info;
           R1 = R6;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udHsQ; else goto cdHsI;
       udHsQ: // global
           call _cdHsH(R1) args: 0, res: 0, upd: 0;
       cdHsI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_entry;
         const 0;
         const 12884901902;
         const 25769803802;
         const SdF7K_srt+672;
 },
 _cdHsH() //  [R1]
         { []
         }
     {offset
       cdHsH: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHsH_info" {
     block_cdHsH_info:
         const _cdHsH;
         const 2;
         const 4294967326;
         const SdF7K_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.795827182 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_info;
         const 0;
 },
 sat_sdEWW_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHta: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEWW_info" {
     sat_sdEWW_info:
         const sat_sdEWW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdF7K_srt+672;
 },
 Data.Functor.Classes.$fShow2Const_$cliftShowList2_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cdHtd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHth; else goto cdHtg;
       cdHth: // global
           HpAlloc = 16;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHtg: // global
           I64[Hp - 8] = sat_sdEWW_info;
           P64[Hp] = R2;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Const_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2Const_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const SdF7K_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.801778411 UTC

[section ""data" . Data.Functor.Classes.$fShow2Const_closure" {
     Data.Functor.Classes.$fShow2Const_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure+6;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.804862653 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info;
         const 0;
 },
 sat_sdEX4_entry() //  [R1]
         { []
         }
     {offset
       cdHtE: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEX4_info" {
     sat_sdEX4_info:
         const sat_sdEX4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry() //  [R2,
                                                                R3, R4, R5, R6]
         { []
         }
     {offset
       cdHtH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHtI; else goto cdHtJ;
       cdHtI: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHtJ: // global
           I64[Sp - 24] = block_cdHtv_info;
           R1 = R5;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHtN; else goto cdHtw;
       udHtN: // global
           call _cdHtv(R1) args: 0, res: 0, upd: 0;
       cdHtw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const SdF7K_srt+672;
 },
 _cdHtv() //  [R1]
         { []
         }
     {offset
       cdHtv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHtM; else goto cdHtL;
       cdHtM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHtL: // global
           _sdEX3::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdEX4_info;
           P64[Hp] = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = _sdEX3::I64;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHtv_info" {
     block_cdHtv_info:
         const _cdHtv;
         const 2;
         const 4294967326;
         const SdF7K_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.813108872 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Const_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_info;
         const 0;
 },
 lvl3_sdEXa_entry() //  [R1]
         { []
         }
     {offset
       cdHub: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHuc; else goto cdHud;
       cdHuc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHud: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEXa_info" {
     lvl3_sdEXa_info:
         const lvl3_sdEXa_entry;
         const 1;
         const 16;
 },
 sat_sdEXc_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHuj: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Const3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEXc_info" {
     sat_sdEXc_info:
         const sat_sdEXc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdF7K_srt+672;
 },
 Data.Functor.Classes.$fShow1Const_$cliftShowList_entry() //  [R2,
                                                               R3, R4, R5, R6]
         { []
         }
     {offset
       cdHum: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHuq; else goto cdHup;
       cdHuq: // global
           HpAlloc = 40;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_$cliftShowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHup: // global
           I64[Hp - 32] = lvl3_sdEXa_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sdEXc_info;
           P64[Hp] = Hp - 32;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Const_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_entry;
         const 0;
         const 73014444046;
         const 21474836505;
         const SdF7K_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.821384083 UTC

[section ""data" . Data.Functor.Classes.$fShow1Const_closure" {
     Data.Functor.Classes.$fShow1Const_closure:
         const Data.Functor.Classes.$fShow1Const_info;
         const 0;
 },
 sat_sdEXf_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdHuP: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Const_$cliftShowList_entry(R6,
                                                                       R5,
                                                                       R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEXf_info" {
     sat_sdEXf_info:
         const sat_sdEXf_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+704;
 },
 sat_sdEXe_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdHuX: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_entry(R6,
                                                                        R5,
                                                                        R4,
                                                                        R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEXe_info" {
     sat_sdEXe_info:
         const sat_sdEXe_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+696;
 },
 Data.Functor.Classes.$fShow1Const_entry() //  [R2]
         { []
         }
     {offset
       cdHv1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHv5; else goto cdHv4;
       cdHv5: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Const_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHv4: // global
           I64[Hp - 48] = sat_sdEXf_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdEXe_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Const_info" {
     Data.Functor.Classes.$fShow1Const_info:
         const Data.Functor.Classes.$fShow1Const_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SdF7K_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.829988557 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure" {
     Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure:
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_entry() //  [R2,
                                                                  R3, R4, R5, R6]
         { []
         }
     {offset
       cdHvx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHvy; else goto cdHvz;
       cdHvy: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHvz: // global
           I64[Sp - 24] = block_cdHvq_info;
           R1 = P64[Sp];
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHvU; else goto cdHvr;
       udHvU: // global
           call _cdHvq(R1) args: 0, res: 0, upd: 0;
       cdHvr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info" {
     Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_info:
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_entry;
         const 0;
         const 30064771086;
         const 25769803802;
         const SdF7K_srt+720;
 },
 _cdHvq() //  [R1]
         { []
         }
     {offset
       cdHvq: // global
           _sdEXk::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdHvu; else goto cdHvv;
       cdHvu: // global
           I64[Sp + 8] = block_cdHvC_info;
           _sdEXn::P64 = P64[R1 + 7];
           R1 = _sdEXk::P64;
           P64[Sp + 16] = _sdEXn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udHvS; else goto cdHvE;
       udHvS: // global
           call _cdHvC(R1) args: 0, res: 0, upd: 0;
       cdHvE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdHvv: // global
           I64[Sp] = block_cdHvL_info;
           _sdEXq::P64 = P64[R1 + 6];
           R1 = _sdEXk::P64;
           P64[Sp + 24] = _sdEXq::P64;
           if (R1 & 7 != 0) goto udHvT; else goto cdHvN;
       udHvT: // global
           call _cdHvL(R1) args: 0, res: 0, upd: 0;
       cdHvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHvq_info" {
     block_cdHvq_info:
         const _cdHvq;
         const 3;
         const 12884901918;
         const SdF7K_srt+720;
 },
 _cdHvC() //  [R1]
         { []
         }
     {offset
       cdHvC: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHvC_info" {
     block_cdHvC_info:
         const _cdHvC;
         const 2;
         const 4294967326;
         const SdF7K_srt+728;
 },
 _cdHvL() //  [R1]
         { []
         }
     {offset
       cdHvL: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHvL_info" {
     block_cdHvL_info:
         const _cdHvL;
         const 131;
         const 4294967326;
         const SdF7K_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.841747385 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList4_closure" {
     Data.Functor.Classes.$w$cliftShowList4_closure:
         const Data.Functor.Classes.$w$cliftShowList4_info;
         const 0;
 },
 sat_sdEXB_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHwx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHwy; else goto cdHwz;
       cdHwy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHwz: // global
           I64[Sp - 24] = block_cdHwq_info;
           _sdEXt::P64 = P64[R1 + 7];
           _sdEXu::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdEXt::P64;
           P64[Sp - 8] = _sdEXu::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHwG; else goto cdHwr;
       udHwG: // global
           call _cdHwq(R1) args: 0, res: 0, upd: 0;
       cdHwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEXB_info" {
     sat_sdEXB_info:
         const sat_sdEXB_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdF7K_srt+720;
 },
 _cdHwq() //  [R1]
         { []
         }
     {offset
       cdHwq: // global
           if (R1 & 7 == 1) goto cdHwu; else goto cdHwv;
       cdHwu: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdHwv: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHwq_info" {
     block_cdHwq_info:
         const _cdHwq;
         const 2;
         const 12884901918;
         const SdF7K_srt+720;
 },
 Data.Functor.Classes.$w$cliftShowList4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHwH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHwL; else goto cdHwK;
       cdHwL: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHwK: // global
           I64[Hp - 16] = sat_sdEXB_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _sdEXv::P64 = R4;
           R4 = R5;
           R3 = _sdEXv::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList4_info" {
     Data.Functor.Classes.$w$cliftShowList4_info:
         const Data.Functor.Classes.$w$cliftShowList4_entry;
         const 0;
         const 47244640270;
         const 17179869208;
         const SdF7K_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.849154415 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure" {
     Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure:
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_info;
         const 0;
 },
 Data.Functor.Classes.$fShow2Either_$cliftShowList2_entry() //  [R2,
                                                                 R4, R6]
         { []
         }
     {offset
       cdHx6: // global
           R5 = P64[Sp];
           _sdEXE::P64 = R4;
           R4 = R6;
           R3 = _sdEXE::P64;
           R2 = R2;
           Sp = Sp + 8;
           call Data.Functor.Classes.$w$cliftShowList4_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow2Either_$cliftShowList2_info" {
     Data.Functor.Classes.$fShow2Either_$cliftShowList2_info:
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_entry;
         const 0;
         const 4294967310;
         const 25769803802;
         const SdF7K_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.852515472 UTC

[section ""data" . Data.Functor.Classes.$fShow2Either_closure" {
     Data.Functor.Classes.$fShow2Either_closure:
         const Data.Functor.Classes.C:Show2_con_info;
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure+6;
         const Data.Functor.Classes.$fShow2Either_$cliftShowList2_closure+6;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.856082679 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowsPrec_closure" {
     Data.Functor.Classes.$w$cliftShowsPrec_closure:
         const Data.Functor.Classes.$w$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$w$cliftShowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cdHxf: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdEXO_entry() //  [R1]
         { []
         }
     {offset
       cdHxs: // global
           R2 = P64[R1 + 16];
           call GHC.Show.showsPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEXO_info" {
     sat_sdEXO_info:
         const sat_sdEXO_entry;
         const 1;
         const 16;
 },
 Data.Functor.Classes.$w$cliftShowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHxz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHxA; else goto cdHxB;
       cdHxA: // global
           R1 = Data.Functor.Classes.$w$cliftShowsPrec_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdHxB: // global
           I64[Sp - 32] = block_cdHxj_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udHxI; else goto cdHxk;
       udHxI: // global
           call _cdHxj(R1) args: 0, res: 0, upd: 0;
       cdHxk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowsPrec_info" {
     Data.Functor.Classes.$w$cliftShowsPrec_info:
         const Data.Functor.Classes.$w$cliftShowsPrec_entry;
         const 0;
         const 81604378638;
         const 17179869184;
         const SdF7K_srt+720;
         const 260;
         const Data.Functor.Classes.$w$cliftShowsPrec_slow;
 },
 _cdHxj() //  [R1]
         { []
         }
     {offset
       cdHxj: // global
           _sdEXK::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto cdHxw; else goto cdHxx;
       cdHxw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHxE; else goto cdHxD;
       cdHxE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHxD: // global
           _sdEXN::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_sdEXO_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sdEXN::P64;
           R4 = _sdEXK::I64;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = Hp - 16;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdHxx: // global
           R5 = P64[R1 + 6];
           R4 = _sdEXK::I64;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHxj_info" {
     block_cdHxj_info:
         const _cdHxj;
         const 259;
         const 12884901918;
         const SdF7K_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.865615544 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry() //  [R2,
                                                                 R3, R4, R5, R6]
         { []
         }
     {offset
       cdHy9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHya; else goto cdHyb;
       cdHya: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHyb: // global
           I64[Sp - 32] = block_cdHy6_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udHyf; else goto cdHy7;
       udHyf: // global
           call _cdHy6(R1) args: 0, res: 0, upd: 0;
       cdHy7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const SdF7K_srt+752;
 },
 _cdHy6() //  [R1]
         { []
         }
     {offset
       cdHy6: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$w$cliftShowsPrec_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHy6_info" {
     block_cdHy6_info:
         const _cdHy6;
         const 3;
         const 4294967326;
         const SdF7K_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.87266126 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList1_closure" {
     Data.Functor.Classes.$w$cliftShowList1_closure:
         const Data.Functor.Classes.$w$cliftShowList1_info;
         const 0;
 },
 lvl3_sdEY1_entry() //  [R1]
         { []
         }
     {offset
       cdHyy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHyz; else goto cdHyA;
       cdHyz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHyA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sdEY1_info" {
     lvl3_sdEY1_info:
         const lvl3_sdEY1_entry;
         const 1;
         const 16;
 },
 sat_sdEY6_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHyN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHyO; else goto cdHyP;
       cdHyO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHyP: // global
           I64[Sp - 24] = block_cdHyG_info;
           _sdEXY::P64 = P64[R1 + 7];
           _sdEY1::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sdEXY::P64;
           P64[Sp - 8] = _sdEY1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHyW; else goto cdHyH;
       udHyW: // global
           call _cdHyG(R1) args: 0, res: 0, upd: 0;
       cdHyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEY6_info" {
     sat_sdEY6_info:
         const sat_sdEY6_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const SdF7K_srt+720;
 },
 _cdHyG() //  [R1]
         { []
         }
     {offset
       cdHyG: // global
           if (R1 & 7 == 1) goto cdHyK; else goto cdHyL;
       cdHyK: // global
           R5 = P64[R1 + 7];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either5_closure;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cdHyL: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Either2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHyG_info" {
     block_cdHyG_info:
         const _cdHyG;
         const 2;
         const 12884901918;
         const SdF7K_srt+720;
 },
 Data.Functor.Classes.$w$cliftShowList1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHyX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdHz1; else goto cdHz0;
       cdHz1: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHz0: // global
           I64[Hp - 40] = lvl3_sdEY1_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_sdEY6_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           _sdEXZ::P64 = R4;
           R4 = R5;
           R3 = _sdEXZ::P64;
           R2 = Hp - 15;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList1_info" {
     Data.Functor.Classes.$w$cliftShowList1_info:
         const Data.Functor.Classes.$w$cliftShowList1_entry;
         const 0;
         const 287762808846;
         const 17179869208;
         const SdF7K_srt+720;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.882500939 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Either_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Either_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Either_$cliftShowList_entry() //  [R2,
                                                                R3, R5, R6]
         { []
         }
     {offset
       cdHzt: // global
           _sdEYa::P64 = R5;
           R5 = R6;
           R4 = _sdEYa::P64;
           R3 = R3;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Either_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Either_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 21474836505;
         const SdF7K_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.886917289 UTC

[section ""data" . Data.Functor.Classes.$fShow1Either_closure" {
     Data.Functor.Classes.$fShow1Either_closure:
         const Data.Functor.Classes.$fShow1Either_info;
         const 0;
 },
 sat_sdEYi_entry() //  [R1, R2, R4, R5]
         { []
         }
     {offset
       cdHzJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$w$cliftShowList1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEYi_info" {
     sat_sdEYi_info:
         const sat_sdEYi_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+768;
 },
 sat_sdEYd_entry() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdHzR: // global
           R6 = R5;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 4];
           call Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_entry(R6,
                                                                         R5,
                                                                         R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEYd_info" {
     sat_sdEYd_info:
         const sat_sdEYd_entry;
         const 1;
         const 4294967305;
         const 17179869208;
         const SdF7K_srt+760;
 },
 Data.Functor.Classes.$fShow1Either_entry() //  [R2]
         { []
         }
     {offset
       cdHzV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHzZ; else goto cdHzY;
       cdHzZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Either_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHzY: // global
           I64[Hp - 48] = sat_sdEYi_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sdEYd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = Hp - 28;
           P64[Hp] = Hp - 44;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Either_info" {
     Data.Functor.Classes.$fShow1Either_info:
         const Data.Functor.Classes.$fShow1Either_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SdF7K_srt+760;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.894699544 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_entry() //  [R2,
                                                                   R3, R4, R5]
         { []
         }
     {offset
       cdHAn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHAo; else goto cdHAp;
       cdHAo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHAp: // global
           I64[Sp - 24] = block_cdHAk_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHAt; else goto cdHAl;
       udHAt: // global
           call _cdHAk(R1) args: 0, res: 0, upd: 0;
       cdHAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const SdF7K_srt+784;
 },
 _cdHAk() //  [R1]
         { []
         }
     {offset
       cdHAk: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Identity3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHAk_info" {
     block_cdHAk_info:
         const _cdHAk;
         const 2;
         const 4294967326;
         const SdF7K_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.900589904 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_info;
         const 0;
 },
 sat_sdEYu_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHAN: // global
           R5 = R2;
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Identity3_closure;
           R2 = P64[R1 + 7];
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEYu_info" {
     sat_sdEYu_info:
         const sat_sdEYu_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SdF7K_srt+784;
 },
 Data.Functor.Classes.$fShow1Identity_$cliftShowList_entry() //  [R2,
                                                                  R3, R4, R5]
         { []
         }
     {offset
       cdHAQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHAU; else goto cdHAT;
       cdHAU: // global
           HpAlloc = 16;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHAT: // global
           I64[Hp - 8] = sat_sdEYu_info;
           P64[Hp] = R2;
           _sdEYr::P64 = R4;
           R4 = R5;
           R3 = _sdEYr::P64;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Identity_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Identity_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const SdF7K_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.905556576 UTC

[section ""data" . Data.Functor.Classes.$fShow1Identity_closure" {
     Data.Functor.Classes.$fShow1Identity_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.907658428 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe1_closure" {
     Data.Functor.Classes.$fShow1Maybe1_closure:
         const Data.Functor.Classes.$fShow1Maybe1_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe1_entry() //  [R2]
         { []
         }
     {offset
       cdHB8: // global
           R3 = R2;
           R2 = Data.Functor.Classes.$fRead1Maybe6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe1_info" {
     Data.Functor.Classes.$fShow1Maybe1_info:
         const Data.Functor.Classes.$fShow1Maybe1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SdF7K_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.912511998 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_entry() //  [R2,
                                                                R3, R4, R5]
         { []
         }
     {offset
       cdHBq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdHBr; else goto cdHBs;
       cdHBr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHBs: // global
           I64[Sp - 24] = block_cdHBj_info;
           R1 = R5;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHBG; else goto cdHBk;
       udHBG: // global
           call _cdHBj(R1) args: 0, res: 0, upd: 0;
       cdHBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_info:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const SdF7K_srt+816;
 },
 _cdHBj() //  [R1]
         { []
         }
     {offset
       cdHBj: // global
           if (R1 & 7 == 1) goto cdHBn; else goto cdHBo;
       cdHBn: // global
           R1 = Data.Functor.Classes.$fShow1Maybe1_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHBo: // global
           I64[Sp] = block_cdHBy_info;
           _sdEYA::P64 = P64[R1 + 6];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sdEYA::P64;
           if (R1 & 7 != 0) goto udHBF; else goto cdHBA;
       udHBF: // global
           call _cdHBy(R1) args: 0, res: 0, upd: 0;
       cdHBA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHBj_info" {
     block_cdHBj_info:
         const _cdHBj;
         const 2;
         const 12884901918;
         const SdF7K_srt+816;
 },
 _cdHBy() //  [R1]
         { []
         }
     {offset
       cdHBy: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 7];
           R3 = Data.Functor.Classes.$fRead1Maybe3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHBy_info" {
     block_cdHBy_info:
         const _cdHBy;
         const 2;
         const 4294967326;
         const SdF7K_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.921928908 UTC

[section ""data" . Data.Functor.Classes.$w$cliftShowList2_closure" {
     Data.Functor.Classes.$w$cliftShowList2_closure:
         const Data.Functor.Classes.$w$cliftShowList2_info;
         const 0;
 },
 sat_sdEYJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHCf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHCg; else goto cdHCh;
       cdHCg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHCh: // global
           I64[Sp - 16] = block_cdHC8_info;
           _sdEYD::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _sdEYD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udHCo; else goto cdHC9;
       udHCo: // global
           call _cdHC8(R1) args: 0, res: 0, upd: 0;
       cdHC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEYJ_info" {
     sat_sdEYJ_info:
         const sat_sdEYJ_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SdF7K_srt+816;
 },
 _cdHC8() //  [R1]
         { []
         }
     {offset
       cdHC8: // global
           if (R1 & 7 == 1) goto cdHCc; else goto cdHCd;
       cdHCc: // global
           R1 = Data.Functor.Classes.$fShow1Maybe1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHCd: // global
           R5 = P64[R1 + 6];
           R4 = 0;
           R3 = Data.Functor.Classes.$fRead1Maybe3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Functor.Classes.$wshowsUnaryWith_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHC8_info" {
     block_cdHC8_info:
         const _cdHC8;
         const 1;
         const 12884901918;
         const SdF7K_srt+816;
 },
 Data.Functor.Classes.$w$cliftShowList2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdHCp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHCt; else goto cdHCs;
       cdHCt: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.$w$cliftShowList2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHCs: // global
           I64[Hp - 8] = sat_sdEYJ_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$w$cliftShowList2_info" {
     Data.Functor.Classes.$w$cliftShowList2_info:
         const Data.Functor.Classes.$w$cliftShowList2_entry;
         const 0;
         const 47244640270;
         const 12884901911;
         const SdF7K_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.9296791 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info;
         const 0;
 },
 Data.Functor.Classes.$fShow1Maybe_$cliftShowList_entry() //  [R2,
                                                               R4, R5]
         { []
         }
     {offset
       cdHCP: // global
           _sdEYM::P64 = R4;
           R4 = R5;
           R3 = _sdEYM::P64;
           R2 = R2;
           call Data.Functor.Classes.$w$cliftShowList2_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info" {
     Data.Functor.Classes.$fShow1Maybe_$cliftShowList_info:
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const SdF7K_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.932863766 UTC

[section ""data" . Data.Functor.Classes.$fShow1Maybe_closure" {
     Data.Functor.Classes.$fShow1Maybe_closure:
         const Data.Functor.Classes.C:Show1_con_info;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure+4;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowList_closure+4;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.940185183 UTC

[section ""data" . Data.Functor.Classes.$wshowsBinaryWith_closure" {
     Data.Functor.Classes.$wshowsBinaryWith_closure:
         const Data.Functor.Classes.$wshowsBinaryWith_info;
 },
 Data.Functor.Classes.$wshowsBinaryWith_slow() //  [R1]
         { []
         }
     {offset
       cdHCY: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 16, res: 0, upd: 8;
     }
 },
 f_sdEYU_entry() //  [R1]
         { []
         }
     {offset
       cdHD6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHD7; else goto cdHD8;
       cdHD7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHD8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sdEYU_info" {
     f_sdEYU_info:
         const f_sdEYU_entry;
         const 2;
         const 18;
 },
 g_sdEYV_entry() //  [R1]
         { []
         }
     {offset
       cdHDd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdHDe; else goto cdHDf;
       cdHDe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHDf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = Data.Functor.Classes.$fRead1Const1_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdEYV_info" {
     g_sdEYV_info:
         const g_sdEYV_entry;
         const 2;
         const 18;
 },
 sat_sdEZ0_entry() //  [R1]
         { []
         }
     {offset
       cdHDu: // global
           _sdEZ0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHDv; else goto cdHDw;
       cdHDw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHDy; else goto cdHDx;
       cdHDy: // global
           HpAlloc = 56;
           goto cdHDv;
       cdHDv: // global
           R1 = _sdEZ0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHDx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZ0::P64;
           _sdEYU::P64 = P64[_sdEZ0::P64 + 16];
           _sdEYV::P64 = P64[_sdEZ0::P64 + 24];
           _sdEYX::P64 = P64[_sdEZ0::P64 + 32];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdEYV::P64;
           P64[Hp - 24] = _sdEYX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdEYU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZ0_info" {
     sat_sdEZ0_info:
         const sat_sdEZ0_entry;
         const 3;
         const 15;
 },
 sat_sdEZ2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHDA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHDE; else goto cdHDD;
       cdHDE: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHDD: // global
           _sdEYQ::P64 = P64[R1 + 7];
           _sdEYU::P64 = P64[R1 + 15];
           _sdEYV::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_sdEZ0_info;
           P64[Hp - 40] = _sdEYU::P64;
           P64[Hp - 32] = _sdEYV::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdEYQ::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEZ2_info" {
     sat_sdEZ2_info:
         const sat_sdEZ2_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_sdEZ5_entry() //  [R1]
         { []
         }
     {offset
       cdHDY: // global
           _sdEZ5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHDZ; else goto cdHE0;
       cdHE0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHE2; else goto cdHE1;
       cdHE2: // global
           HpAlloc = 24;
           goto cdHDZ;
       cdHDZ: // global
           R1 = _sdEZ5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHE1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZ5::P64;
           _sdEYV::P64 = P64[_sdEZ5::P64 + 16];
           _sdEZ3::P64 = P64[_sdEZ5::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEZ3::P64;
           R2 = Hp - 14;
           R1 = _sdEYV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZ5_info" {
     sat_sdEZ5_info:
         const sat_sdEZ5_entry;
         const 2;
         const 18;
 },
 sat_sdEZ7_entry() //  [R1]
         { []
         }
     {offset
       cdHE4: // global
           _sdEZ7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHE5; else goto cdHE6;
       cdHE6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHE8; else goto cdHE7;
       cdHE8: // global
           HpAlloc = 56;
           goto cdHE5;
       cdHE5: // global
           R1 = _sdEZ7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHE7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZ7::P64;
           _sdEYU::P64 = P64[_sdEZ7::P64 + 16];
           _sdEYV::P64 = P64[_sdEZ7::P64 + 24];
           _sdEZ3::P64 = P64[_sdEZ7::P64 + 32];
           I64[Hp - 48] = sat_sdEZ5_info;
           P64[Hp - 32] = _sdEYV::P64;
           P64[Hp - 24] = _sdEZ3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           R1 = _sdEYU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZ7_info" {
     sat_sdEZ7_info:
         const sat_sdEZ7_entry;
         const 3;
         const 15;
 },
 sat_sdEZ9_entry() //  [R1]
         { []
         }
     {offset
       cdHEa: // global
           _sdEZ9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHEb; else goto cdHEc;
       cdHEc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHEe; else goto cdHEd;
       cdHEe: // global
           HpAlloc = 64;
           goto cdHEb;
       cdHEb: // global
           R1 = _sdEZ9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHEd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZ9::P64;
           _sdEYQ::P64 = P64[_sdEZ9::P64 + 16];
           _sdEYU::P64 = P64[_sdEZ9::P64 + 24];
           _sdEYV::P64 = P64[_sdEZ9::P64 + 32];
           _sdEZ3::P64 = P64[_sdEZ9::P64 + 40];
           I64[Hp - 56] = sat_sdEZ7_info;
           P64[Hp - 40] = _sdEYU::P64;
           P64[Hp - 32] = _sdEYV::P64;
           P64[Hp - 24] = _sdEZ3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sdEYQ::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZ9_info" {
     sat_sdEZ9_info:
         const sat_sdEZ9_entry;
         const 4;
         const 15;
 },
 sat_sdEZa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHEg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdHEk; else goto cdHEj;
       cdHEk: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHEj: // global
           _sdEYQ::P64 = P64[R1 + 7];
           _sdEYU::P64 = P64[R1 + 15];
           _sdEYV::P64 = P64[R1 + 23];
           I64[Hp - 64] = sat_sdEZ9_info;
           P64[Hp - 48] = _sdEYQ::P64;
           P64[Hp - 40] = _sdEYU::P64;
           P64[Hp - 32] = _sdEYV::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEZa_info" {
     sat_sdEZa_info:
         const sat_sdEZa_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       cdHEo: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdHEs; else goto cdHEr;
       cdHEs: // global
           HpAlloc = 96;
           R1 = Data.Functor.Classes.$wshowsBinaryWith_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cdHEr: // global
           I64[Hp - 88] = f_sdEYU_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R6;
           I64[Hp - 56] = g_sdEYV_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = P64[Sp];
           _cdHD2::P64 = Hp - 88;
           _cdHD9::P64 = Hp - 56;
           if (%MO_S_Le_W64(R5, 10)) goto cdHEm; else goto cdHEn;
       cdHEm: // global
           I64[Hp - 24] = sat_sdEZ2_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cdHD2::P64;
           P64[Hp] = _cdHD9::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHEn: // global
           I64[Hp - 24] = sat_sdEZa_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = _cdHD2::P64;
           P64[Hp] = _cdHD9::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsBinaryWith_info" {
     Data.Functor.Classes.$wshowsBinaryWith_info:
         const Data.Functor.Classes.$wshowsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 518;
         const Data.Functor.Classes.$wshowsBinaryWith_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.962350472 UTC

[section ""data" . Data.Functor.Classes.showsBinaryWith_closure" {
     Data.Functor.Classes.showsBinaryWith_closure:
         const Data.Functor.Classes.showsBinaryWith_info;
 },
 Data.Functor.Classes.showsBinaryWith_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       cdHFK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdHFL; else goto cdHFM;
       cdHFL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsBinaryWith_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cdHFM: // global
           I64[Sp - 40] = block_cdHFH_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udHFQ; else goto cdHFI;
       udHFQ: // global
           call _cdHFH(R1) args: 0, res: 0, upd: 0;
       cdHFI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsBinaryWith_info" {
     Data.Functor.Classes.showsBinaryWith_info:
         const Data.Functor.Classes.showsBinaryWith_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _cdHFH() //  [R1]
         { []
         }
     {offset
       cdHFH: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call Data.Functor.Classes.$wshowsBinaryWith_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHFH_info" {
     block_cdHFH_info:
         const _cdHFH;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.97010867 UTC

[section ""data" . Data.Functor.Classes.readsUnary_closure" {
     Data.Functor.Classes.readsUnary_closure:
         const Data.Functor.Classes.readsUnary_info;
 },
 go_sdEZp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHGm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHGn; else goto cdHGo;
       cdHGn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHGo: // global
           I64[Sp - 24] = block_cdHGf_info;
           _sdEZp::P64 = R1;
           _sdEZl::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdEZl::P64;
           P64[Sp - 8] = _sdEZp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udHGI; else goto cdHGg;
       udHGI: // global
           call _cdHGf(R1) args: 0, res: 0, upd: 0;
       cdHGg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdEZp_info" {
     go_sdEZp_info:
         const go_sdEZp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdHGf() //  [R1]
         { []
         }
     {offset
       cdHGf: // global
           if (R1 & 7 == 1) goto cdHGj; else goto cdHGk;
       cdHGj: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHGk: // global
           I64[Sp - 8] = block_cdHGu_info;
           _sdEZt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdEZt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udHGH; else goto cdHGv;
       udHGH: // global
           call _cdHGu(R1) args: 0, res: 0, upd: 0;
       cdHGv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHGf_info" {
     block_cdHGf_info:
         const _cdHGf;
         const 2;
         const 30;
 },
 _cdHGu() //  [R1]
         { []
         }
     {offset
       cdHGu: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdHGG; else goto cdHGF;
       cdHGG: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHGF: // global
           _sdEZv::P64 = P64[R1 + 7];
           _sdEZw::P64 = P64[R1 + 15];
           I64[Hp - 104] = stg_ap_2_upd_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _sdEZv::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = _sdEZw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 104;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHGu_info" {
     block_cdHGu_info:
         const _cdHGu;
         const 3;
         const 30;
 },
 Data.Functor.Classes.readsUnary_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdHGN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdHGO; else goto cdHGP;
       cdHGO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.readsUnary_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHGP: // global
           I64[Sp - 32] = block_cdHG5_info;
           R3 = R3;
           _sdEZj::P64 = R2;
           R2 = R5;
           P64[Sp - 24] = _sdEZj::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 32;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.readsUnary_info" {
     Data.Functor.Classes.readsUnary_info:
         const Data.Functor.Classes.readsUnary_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cdHG5() //  [R1]
         { []
         }
     {offset
       cdHG5: // global
           if (R1 & 7 == 1) goto cdHGK; else goto cdHGL;
       cdHGK: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHGL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdHGV; else goto cdHGU;
       cdHGV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdHGU: // global
           I64[Hp - 8] = go_sdEZp_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdHGS_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 7;
           Sp = Sp - 8;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHG5_info" {
     block_cdHG5_info:
         const _cdHG5;
         const 3;
         const 30;
 },
 _cdHGS() //  [R1]
         { []
         }
     {offset
       cdHGS: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdEZp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHGS_info" {
     block_cdHGS_info:
         const _cdHGS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:55.98595619 UTC

[section ""data" . Data.Functor.Classes.$wshowsUnary_closure" {
     Data.Functor.Classes.$wshowsUnary_closure:
         const Data.Functor.Classes.$wshowsUnary_info;
 },
 Data.Functor.Classes.$wshowsUnary_slow() //  [R1]
         { []
         }
     {offset
       cdHHR: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnary_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 g_sdEZF_entry() //  [R1]
         { []
         }
     {offset
       cdHHZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdHI0; else goto cdHI1;
       cdHI0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHI1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Classes.$fRead1Const1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sdEZF_info" {
     g_sdEZF_info:
         const g_sdEZF_entry;
         const 2;
         const 18;
 },
 sat_sdEZK_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHIc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHIg; else goto cdHIf;
       cdHIg: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHIf: // global
           _sdEZC::P64 = P64[R1 + 7];
           _sdEZF::P64 = P64[R1 + 15];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _sdEZF::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEZC::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEZK_info" {
     sat_sdEZK_info:
         const sat_sdEZK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sdEZN_entry() //  [R1]
         { []
         }
     {offset
       cdHIw: // global
           _sdEZN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHIx; else goto cdHIy;
       cdHIy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHIA; else goto cdHIz;
       cdHIA: // global
           HpAlloc = 24;
           goto cdHIx;
       cdHIx: // global
           R1 = _sdEZN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHIz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZN::P64;
           _sdEZF::P64 = P64[_sdEZN::P64 + 16];
           _sdEZL::P64 = P64[_sdEZN::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdEZL::P64;
           R2 = Hp - 14;
           R1 = _sdEZF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZN_info" {
     sat_sdEZN_info:
         const sat_sdEZN_entry;
         const 2;
         const 18;
 },
 sat_sdEZP_entry() //  [R1]
         { []
         }
     {offset
       cdHIC: // global
           _sdEZP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdHID; else goto cdHIE;
       cdHIE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHIG; else goto cdHIF;
       cdHIG: // global
           HpAlloc = 56;
           goto cdHID;
       cdHID: // global
           R1 = _sdEZP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdHIF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdEZP::P64;
           _sdEZC::P64 = P64[_sdEZP::P64 + 16];
           _sdEZF::P64 = P64[_sdEZP::P64 + 24];
           _sdEZL::P64 = P64[_sdEZP::P64 + 32];
           I64[Hp - 48] = sat_sdEZN_info;
           P64[Hp - 32] = _sdEZF::P64;
           P64[Hp - 24] = _sdEZL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Data.Functor.Classes.showsUnaryWith1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdEZC::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdEZP_info" {
     sat_sdEZP_info:
         const sat_sdEZP_entry;
         const 3;
         const 15;
 },
 sat_sdEZQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdHII: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdHIM; else goto cdHIL;
       cdHIM: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdHIL: // global
           _sdEZC::P64 = P64[R1 + 7];
           _sdEZF::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdEZP_info;
           P64[Hp - 40] = _sdEZC::P64;
           P64[Hp - 32] = _sdEZF::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdEZQ_info" {
     sat_sdEZQ_info:
         const sat_sdEZQ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Data.Functor.Classes.$wshowsUnary_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHIQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdHIU; else goto cdHIT;
       cdHIU: // global
           HpAlloc = 56;
           R1 = Data.Functor.Classes.$wshowsUnary_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cdHIT: // global
           I64[Hp - 48] = g_sdEZF_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _cdHHV::P64 = Hp - 48;
           if (%MO_S_Le_W64(R4, 10)) goto cdHIO; else goto cdHIP;
       cdHIO: // global
           I64[Hp - 16] = sat_sdEZK_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdHHV::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdHIP: // global
           I64[Hp - 16] = sat_sdEZQ_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cdHHV::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.$wshowsUnary_info" {
     Data.Functor.Classes.$wshowsUnary_info:
         const Data.Functor.Classes.$wshowsUnary_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const Data.Functor.Classes.$wshowsUnary_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.000722889 UTC

[section ""data" . Data.Functor.Classes.showsUnary_closure" {
     Data.Functor.Classes.showsUnary_closure:
         const Data.Functor.Classes.showsUnary_info;
 },
 Data.Functor.Classes.showsUnary_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHJQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdHJR; else goto cdHJS;
       cdHJR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.showsUnary_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHJS: // global
           I64[Sp - 32] = block_cdHJN_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udHJW; else goto cdHJO;
       udHJW: // global
           call _cdHJN(R1) args: 0, res: 0, upd: 0;
       cdHJO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.showsUnary_info" {
     Data.Functor.Classes.showsUnary_info:
         const Data.Functor.Classes.showsUnary_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdHJN() //  [R1]
         { []
         }
     {offset
       cdHJN: // global
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call Data.Functor.Classes.$wshowsUnary_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdHJN_info" {
     block_cdHJN_info:
         const _cdHJN;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.006392143 UTC

[section ""cstring" . Data.Functor.Classes.$trModule4_bytes" {
     Data.Functor.Classes.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.007990081 UTC

[section ""data" . Data.Functor.Classes.$trModule3_closure" {
     Data.Functor.Classes.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.009640635 UTC

[section ""cstring" . Data.Functor.Classes.$trModule2_bytes" {
     Data.Functor.Classes.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.011224719 UTC

[section ""data" . Data.Functor.Classes.$trModule1_closure" {
     Data.Functor.Classes.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.012918045 UTC

[section ""data" . Data.Functor.Classes.$trModule_closure" {
     Data.Functor.Classes.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Classes.$trModule3_closure+1;
         const Data.Functor.Classes.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.014680063 UTC

[section ""data" . $krep_rdymB_closure" {
     $krep_rdymB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.016417158 UTC

[section ""data" . Data.Functor.Classes.$tcEq4_closure" {
     Data.Functor.Classes.$tcEq4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rdymB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.018211896 UTC

[section ""data" . Data.Functor.Classes.$tcEq7_closure" {
     Data.Functor.Classes.$tcEq7_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const $krep_rdymB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.019877744 UTC

[section ""cstring" . Data.Functor.Classes.$tcEq6_bytes" {
     Data.Functor.Classes.$tcEq6_bytes:
         I8[] [69,113,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.022740445 UTC

[section ""data" . Data.Functor.Classes.$tcEq5_closure" {
     Data.Functor.Classes.$tcEq5_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcEq6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.02449512 UTC

[section ""data" . Data.Functor.Classes.$tcEq1_closure" {
     Data.Functor.Classes.$tcEq1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcEq5_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 71749974434880567;
         const 7233443027070644957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.026317174 UTC

[section ""cstring" . Data.Functor.Classes.$tcOrd5_bytes" {
     Data.Functor.Classes.$tcOrd5_bytes:
         I8[] [79,114,100,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.027907011 UTC

[section ""data" . Data.Functor.Classes.$tcOrd4_closure" {
     Data.Functor.Classes.$tcOrd4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcOrd5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.030679 UTC

[section ""data" . Data.Functor.Classes.$tcOrd1_closure" {
     Data.Functor.Classes.$tcOrd1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcOrd4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 11825914698899667233;
         const 4554948325937498991;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.032438527 UTC

[section ""cstring" . Data.Functor.Classes.$tcRead5_bytes" {
     Data.Functor.Classes.$tcRead5_bytes:
         I8[] [82,101,97,100,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.034081788 UTC

[section ""data" . Data.Functor.Classes.$tcRead4_closure" {
     Data.Functor.Classes.$tcRead4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcRead5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.035786162 UTC

[section ""data" . Data.Functor.Classes.$tcRead1_closure" {
     Data.Functor.Classes.$tcRead1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcRead4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 14547308444716217043;
         const 925634574698086715;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.037535195 UTC

[section ""cstring" . Data.Functor.Classes.$tcShow5_bytes" {
     Data.Functor.Classes.$tcShow5_bytes:
         I8[] [83,104,111,119,49]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.039224803 UTC

[section ""data" . Data.Functor.Classes.$tcShow4_closure" {
     Data.Functor.Classes.$tcShow4_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcShow5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.04100898 UTC

[section ""data" . Data.Functor.Classes.$tcShow1_closure" {
     Data.Functor.Classes.$tcShow1_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcShow4_closure+1;
         const Data.Functor.Classes.$tcEq4_closure+4;
         const 4743290066722511112;
         const 6779909240154408836;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.042765754 UTC

[section ""cstring" . Data.Functor.Classes.$tcEq9_bytes" {
     Data.Functor.Classes.$tcEq9_bytes:
         I8[] [69,113,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.044474883 UTC

[section ""data" . Data.Functor.Classes.$tcEq8_closure" {
     Data.Functor.Classes.$tcEq8_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcEq9_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.046217074 UTC

[section ""data" . Data.Functor.Classes.$tcEq2_closure" {
     Data.Functor.Classes.$tcEq2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcEq8_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 16920549266159426738;
         const 13264288076834164909;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.048032878 UTC

[section ""cstring" . Data.Functor.Classes.$tcOrd7_bytes" {
     Data.Functor.Classes.$tcOrd7_bytes:
         I8[] [79,114,100,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.050069379 UTC

[section ""data" . Data.Functor.Classes.$tcOrd6_closure" {
     Data.Functor.Classes.$tcOrd6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcOrd7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.051817569 UTC

[section ""data" . Data.Functor.Classes.$tcOrd2_closure" {
     Data.Functor.Classes.$tcOrd2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcOrd6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 4167316048525678806;
         const 17649124474771181823;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.053618693 UTC

[section ""cstring" . Data.Functor.Classes.$tcRead7_bytes" {
     Data.Functor.Classes.$tcRead7_bytes:
         I8[] [82,101,97,100,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.055912207 UTC

[section ""data" . Data.Functor.Classes.$tcRead6_closure" {
     Data.Functor.Classes.$tcRead6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcRead7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.057716135 UTC

[section ""data" . Data.Functor.Classes.$tcRead2_closure" {
     Data.Functor.Classes.$tcRead2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcRead6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 615267248700376470;
         const 8978126042197021701;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.059436905 UTC

[section ""cstring" . Data.Functor.Classes.$tcShow7_bytes" {
     Data.Functor.Classes.$tcShow7_bytes:
         I8[] [83,104,111,119,50]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.061152721 UTC

[section ""data" . Data.Functor.Classes.$tcShow6_closure" {
     Data.Functor.Classes.$tcShow6_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Classes.$tcShow7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.062926046 UTC

[section ""data" . Data.Functor.Classes.$tcShow2_closure" {
     Data.Functor.Classes.$tcShow2_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Classes.$trModule_closure+1;
         const Data.Functor.Classes.$tcShow6_closure+1;
         const Data.Functor.Classes.$tcEq7_closure+4;
         const 11321900378419812635;
         const 1323607160578303441;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.066068911 UTC

[section ""data" . Data.Functor.Classes.C:Show2_closure" {
     Data.Functor.Classes.C:Show2_closure:
         const Data.Functor.Classes.C:Show2_info;
 },
 Data.Functor.Classes.C:Show2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHKI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHKM; else goto cdHKL;
       cdHKM: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Show2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHKL: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Show2_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show2_info" {
     Data.Functor.Classes.C:Show2_info:
         const Data.Functor.Classes.C:Show2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.070205702 UTC

[section ""data" . Data.Functor.Classes.C:Read2_closure" {
     Data.Functor.Classes.C:Read2_closure:
         const Data.Functor.Classes.C:Read2_info;
 },
 Data.Functor.Classes.C:Read2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHKY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHL2; else goto cdHL1;
       cdHL2: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Read2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHL1: // global
           I64[Hp - 32] = Data.Functor.Classes.C:Read2_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read2_info" {
     Data.Functor.Classes.C:Read2_info:
         const Data.Functor.Classes.C:Read2_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.074235512 UTC

[section ""data" . Data.Functor.Classes.C:Ord2_closure" {
     Data.Functor.Classes.C:Ord2_closure:
         const Data.Functor.Classes.C:Ord2_info;
 },
 Data.Functor.Classes.C:Ord2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHLe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHLi; else goto cdHLh;
       cdHLi: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Ord2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHLh: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Ord2_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord2_info" {
     Data.Functor.Classes.C:Ord2_info:
         const Data.Functor.Classes.C:Ord2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.078044562 UTC

[section ""data" . Data.Functor.Classes.C:Show1_closure" {
     Data.Functor.Classes.C:Show1_closure:
         const Data.Functor.Classes.C:Show1_info;
 },
 Data.Functor.Classes.C:Show1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHLu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHLy; else goto cdHLx;
       cdHLy: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Show1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHLx: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Show1_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show1_info" {
     Data.Functor.Classes.C:Show1_info:
         const Data.Functor.Classes.C:Show1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.082435912 UTC

[section ""data" . Data.Functor.Classes.C:Read1_closure" {
     Data.Functor.Classes.C:Read1_closure:
         const Data.Functor.Classes.C:Read1_info;
 },
 Data.Functor.Classes.C:Read1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdHLK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdHLO; else goto cdHLN;
       cdHLO: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Read1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHLN: // global
           I64[Hp - 32] = Data.Functor.Classes.C:Read1_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read1_info" {
     Data.Functor.Classes.C:Read1_info:
         const Data.Functor.Classes.C:Read1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.086418042 UTC

[section ""data" . Data.Functor.Classes.C:Ord1_closure" {
     Data.Functor.Classes.C:Ord1_closure:
         const Data.Functor.Classes.C:Ord1_info;
 },
 Data.Functor.Classes.C:Ord1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdHM0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdHM4; else goto cdHM3;
       cdHM4: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Classes.C:Ord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdHM3: // global
           I64[Hp - 16] = Data.Functor.Classes.C:Ord1_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord1_info" {
     Data.Functor.Classes.C:Ord1_info:
         const Data.Functor.Classes.C:Ord1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.090738123 UTC

[section ""cstring" . idHMc_str" {
     idHMc_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,83,104,111,119,50]
 },
 Data.Functor.Classes.C:Show2_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show2_con_info" {
     Data.Functor.Classes.C:Show2_con_info:
         const Data.Functor.Classes.C:Show2_con_entry;
         const 2;
         const 4;
         const idHMc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.094215825 UTC

[section ""cstring" . idHMj_str" {
     idHMj_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,82,101,97,100,50]
 },
 Data.Functor.Classes.C:Read2_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMi: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read2_con_info" {
     Data.Functor.Classes.C:Read2_con_info:
         const Data.Functor.Classes.C:Read2_con_entry;
         const 4;
         const 1;
         const idHMj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.097465129 UTC

[section ""cstring" . idHMq_str" {
     idHMq_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,79,114,100,50]
 },
 Data.Functor.Classes.C:Ord2_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord2_con_info" {
     Data.Functor.Classes.C:Ord2_con_info:
         const Data.Functor.Classes.C:Ord2_con_entry;
         const 2;
         const 4;
         const idHMq_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.100676997 UTC

[section ""cstring" . idHMx_str" {
     idHMx_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,83,104,111,119,49]
 },
 Data.Functor.Classes.C:Show1_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Show1_con_info" {
     Data.Functor.Classes.C:Show1_con_info:
         const Data.Functor.Classes.C:Show1_con_entry;
         const 2;
         const 4;
         const idHMx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.104072368 UTC

[section ""cstring" . idHME_str" {
     idHME_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,82,101,97,100,49]
 },
 Data.Functor.Classes.C:Read1_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMD: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Read1_con_info" {
     Data.Functor.Classes.C:Read1_con_info:
         const Data.Functor.Classes.C:Read1_con_entry;
         const 4;
         const 1;
         const idHME_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.107365966 UTC

[section ""cstring" . idHML_str" {
     idHML_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,70,117,110,99,116,111,114,46,67,108,97,115,115,101,115,46,67,58,79,114,100,49]
 },
 Data.Functor.Classes.C:Ord1_con_entry() //  [R1]
         { []
         }
     {offset
       cdHMK: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Classes.C:Ord1_con_info" {
     Data.Functor.Classes.C:Ord1_con_info:
         const Data.Functor.Classes.C:Ord1_con_entry;
         const 2;
         const 4;
         const idHML_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:56.11150012 UTC

[section ""relreadonly" . SdF7K_srt" {
     SdF7K_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Classes.$fRead1Const2_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Classes.$w$cliftReadPrec1_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Classes.$fRead2Const_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec7_closure;
         const Data.Functor.Classes.$fRead1Either1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Classes.$fRead1Either4_closure;
         const Data.Functor.Classes.$w$cliftReadPrec3_closure;
         const Data.Functor.Classes.$fRead2Either_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec8_closure;
         const Data.Functor.Classes.$fRead1NonEmpty3_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec5_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadsPrec_closure;
         const Data.Functor.Classes.$fRead1Proxy2_closure;
         const Data.Functor.Classes.$fRead1Proxy_lexeme_closure;
         const Data.Functor.Classes.$fRead1Proxy1_closure;
         const Data.Functor.Classes.$fRead1Proxy3_closure;
         const Data.Functor.Classes.$fShow1Proxy2_closure;
         const Data.Functor.Classes.$fRead1(,)3_closure;
         const Data.Functor.Classes.$w$cliftReadPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec6_closure;
         const Data.Functor.Classes.$fRead2(,)_$cliftReadListPrec2_closure;
         const Data.Functor.Classes.$dmliftReadList2_closure;
         const Data.Functor.Classes.$fShow1Proxy1_closure;
         const Data.Functor.Classes.$dmliftReadList_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadPrec_closure;
         const Data.Functor.Classes.$fRead1NonEmpty_$cliftReadList_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec2_closure;
         const Data.Functor.Classes.liftReadListPrecDefault_closure;
         const lvl_rdymy_closure;
         const Data.Functor.Classes.$fRead1Proxy_$cliftReadsPrec_closure;
         const lvl1_rdymz_closure;
         const lvl2_rdymA_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Classes.$w$cliftReadList2_closure;
         const Data.Functor.Classes.$fRead2Either_closure;
         const Data.Functor.Classes.$fRead2Const_closure;
         const Data.Functor.Classes.$fRead2(,)_closure;
         const Data.Functor.Classes.liftReadListPrec2Default_closure;
         const Data.Functor.Classes.$fRead1(,)1_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec_closure;
         const Data.Functor.Classes.$fRead1(,)_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$fRead1(,)_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1(,)_closure;
         const GHC.Read.lex1_closure;
         const Data.Functor.Classes.$wreadsData_closure;
         const Data.Functor.Classes.readsData_closure;
         const Data.Functor.Classes.readData1_closure;
         const GHC.Read.list3_closure;
         const Data.Functor.Classes.$wreadUnaryWith_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Functor.Classes.readUnaryWith1_closure;
         const Data.Functor.Classes.$fRead1Const5_closure;
         const Data.Functor.Classes.$w$cliftReadPrec1_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec1_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec_closure;
         const Data.Functor.Classes.$fRead1Const_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Const_closure;
         const Data.Functor.Classes.$fRead1Either7_closure;
         const Data.Functor.Classes.$w$cliftReadPrec3_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec2_closure;
         const Data.Functor.Classes.$w$cliftReadListPrec1_closure;
         const Data.Functor.Classes.$fRead1Either_$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Either_closure;
         const Data.Functor.Classes.$fRead1Identity2_closure;
         const Data.Functor.Classes.$w$cliftReadPrec_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec3_closure;
         const Data.Functor.Classes.$fRead1Identity_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$w$cliftReadList_closure;
         const Data.Functor.Classes.$fRead1Maybe5_closure;
         const Data.Functor.Classes.$fRead1Maybe_lexeme_closure;
         const Data.Functor.Classes.$fRead1Maybe2_closure;
         const Data.Functor.Classes.$w$cliftReadPrec4_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Data.Functor.Classes.$w$cliftReadsPrec4_closure;
         const Data.Functor.Classes.$fRead1Maybe_$cliftReadListPrec_closure;
         const Data.Functor.Classes.$w$cliftReadList1_closure;
         const Data.Functor.Classes.$wreadBinaryWith_closure;
         const Data.Functor.Classes.readBinaryWith1_closure;
         const Data.Functor.Classes.$fRead1Const3_closure;
         const Data.Functor.Classes.$fShow2Const_$cliftShowsPrec2_closure;
         const Data.Functor.Classes.$fShow2Const_$cliftShowList2_closure;
         const Data.Functor.Classes.$fShow1Const_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Const_$cliftShowList_closure;
         const Data.Functor.Classes.$fShow1Const_closure;
         const Data.Functor.Classes.$fRead1Either2_closure;
         const Data.Functor.Classes.$fRead1Either5_closure;
         const Data.Functor.Classes.$fShow2Either_$cliftShowsPrec2_closure;
         const Data.Functor.Classes.$w$cliftShowList4_closure;
         const Data.Functor.Classes.$w$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Either_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$w$cliftShowList1_closure;
         const Data.Functor.Classes.$fShow1Either_closure;
         const Data.Functor.Classes.$fRead1Identity3_closure;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$fShow1Identity_$cliftShowList_closure;
         const Data.Functor.Classes.$fRead1Maybe6_closure;
         const Data.Functor.Classes.$fRead1Maybe3_closure;
         const Data.Functor.Classes.$fShow1Maybe1_closure;
         const Data.Functor.Classes.$fShow1Maybe_$cliftShowsPrec_closure;
         const Data.Functor.Classes.$w$cliftShowList2_closure;
 }]

