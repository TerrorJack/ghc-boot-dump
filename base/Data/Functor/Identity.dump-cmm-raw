
==================== Raw Cmm ====================
2018-03-16 16:06:36.035306294 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:36.036403123 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity4_closure" {
     Data.Functor.Identity.$fReadIdentity4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.038465335 UTC

[section ""cstring" . Data.Functor.Identity.$fReadIdentity6_bytes" {
     Data.Functor.Identity.$fReadIdentity6_bytes:
         I8[] [73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.040794948 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity5_closure" {
     Data.Functor.Identity.$fReadIdentity5_closure:
         const Data.Functor.Identity.$fReadIdentity5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity5_entry() //  [R1]
         { []
         }
     {offset
       cbKAP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKAQ; else goto cbKAR;
       cbKAQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKAR: // global
           (_cbKAM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbKAM::I64 == 0) goto cbKAO; else goto cbKAN;
       cbKAO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbKAN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbKAM::I64;
           R2 = Data.Functor.Identity.$fReadIdentity6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity5_info" {
     Data.Functor.Identity.$fReadIdentity5_info:
         const Data.Functor.Identity.$fReadIdentity5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.048869879 UTC

[section ""data" . Data.Functor.Identity.$w$creadsPrec_closure" {
     Data.Functor.Identity.$w$creadsPrec_closure:
         const Data.Functor.Identity.$w$creadsPrec_info;
         const 0;
 },
 go1_sbJto_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKBB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbKBC; else goto cbKBD;
       cbKBC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKBD: // global
           I64[Sp - 24] = block_cbKBu_info;
           _sbJto::P64 = R1;
           _sbJtn::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sbJtn::P64;
           P64[Sp - 8] = _sbJto::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubKBV; else goto cbKBv;
       ubKBV: // global
           call _cbKBu(R1) args: 0, res: 0, upd: 0;
       cbKBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sbJto_info" {
     go1_sbJto_info:
         const go1_sbJto_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbKBu() //  [R1]
         { []
         }
     {offset
       cbKBu: // global
           if (R1 & 7 == 1) goto cbKBy; else goto cbKBz;
       cbKBy: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbKBz: // global
           I64[Sp] = block_cbKBJ_info;
           _sbJts::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _sbJts::P64;
           if (R1 & 7 != 0) goto ubKBU; else goto cbKBK;
       ubKBU: // global
           call _cbKBJ(R1) args: 0, res: 0, upd: 0;
       cbKBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKBu_info" {
     block_cbKBu_info:
         const _cbKBu;
         const 2;
         const 30;
 },
 _cbKBJ() //  [R1]
         { []
         }
     {offset
       cbKBJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbKBT; else goto cbKBS;
       cbKBT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbKBS: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKBJ_info" {
     block_cbKBJ_info:
         const _cbKBJ;
         const 2;
         const 30;
 },
 go_sbJte_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKC0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbKC1; else goto ubKCl;
       cbKC1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ubKCl: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cbKB5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sbJte_info" {
     go_sbJte_info:
         const go_sbJte_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbJA1_srt;
 },
 _cbKB5() //  []
         { []
         }
     {offset
       cbKB5: // global
           _sbJtb::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cbKB8_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbJtb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubKCn; else goto cbKB9;
       ubKCn: // global
           call _cbKB8(R1) args: 0, res: 0, upd: 0;
       cbKB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbKB8() //  [R1]
         { []
         }
     {offset
       cbKB8: // global
           if (R1 & 7 == 1) goto cbKBX; else goto cbKBY;
       cbKBX: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbKBY: // global
           I64[Sp - 8] = block_cbKBe_info;
           _sbJti::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbJti::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubKCo; else goto cbKBf;
       ubKCo: // global
           call _cbKBe(R1) args: 0, res: 0, upd: 0;
       cbKBf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKB8_info" {
     block_cbKB8_info:
         const _cbKB8;
         const 2;
         const 4294967326;
         const SbJA1_srt;
 },
 _cbKBe() //  [R1]
         { []
         }
     {offset
       cbKBe: // global
           I64[Sp - 8] = block_cbKBj_info;
           R3 = Data.Functor.Identity.$fReadIdentity5_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKBe_info" {
     block_cbKBe_info:
         const _cbKBe;
         const 3;
         const 4294967326;
         const SbJA1_srt;
 },
 _cbKBj() //  [R1]
         { []
         }
     {offset
       cbKBj: // global
           _sbJti::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cbKCa; else goto cbKCc;
       cbKCa: // global
           P64[Sp + 32] = _sbJti::P64;
           Sp = Sp + 24;
           call _cbKB5() args: 0, res: 0, upd: 0;
       cbKCc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbKCf; else goto cbKCe;
       cbKCf: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbKCe: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sbJti::P64;
           I64[Hp - 8] = go1_sbJto_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 24] = block_cbKCb_info;
           R2 = P64[Sp + 32];
           I64[Sp] = stg_ap_pp_info;
           _sbJtl::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp + 16] = _sbJtl::P64;
           P64[Sp + 32] = Hp - 7;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKBj_info" {
     block_cbKBj_info:
         const _cbKBj;
         const 4;
         const 4294967326;
         const SbJA1_srt;
 },
 _cbKCb() //  [R1]
         { []
         }
     {offset
       cbKCb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sbJto_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKCb_info" {
     block_cbKCb_info:
         const _cbKCb;
         const 1;
         const 30;
 },
 sat_sbJtD_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKCy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKCz; else goto cbKCA;
       cbKCz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKCA: // global
           I64[Sp - 16] = block_cbKCw_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJtD_info" {
     sat_sbJtD_info:
         const sat_sbJtD_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SbJA1_srt;
 },
 _cbKCw() //  [R1]
         { []
         }
     {offset
       cbKCw: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sbJte_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKCw_info" {
     block_cbKCw_info:
         const _cbKCw;
         const 1;
         const 4294967326;
         const SbJA1_srt;
 },
 Data.Functor.Identity.$w$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbKCG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbKCK; else goto cbKCJ;
       cbKCK: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKCJ: // global
           I64[Hp - 24] = go_sbJte_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sbJtD_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _sbJtA::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _sbJtA::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$creadsPrec_info" {
     Data.Functor.Identity.$w$creadsPrec_info:
         const Data.Functor.Identity.$w$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901909;
         const SbJA1_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.071801528 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure" {
     Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure:
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_info;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbKDV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbKDW; else goto cbKDX;
       cbKDW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKDX: // global
           I64[Sp - 24] = block_cbKDS_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubKE1; else goto cbKDT;
       ubKE1: // global
           call _cbKDS(R1) args: 0, res: 0, upd: 0;
       cbKDT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_$creadsPrec_info" {
     Data.Functor.Identity.$fReadIdentity_$creadsPrec_info:
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbJA1_srt+24;
 },
 _cbKDS() //  [R1]
         { []
         }
     {offset
       cbKDS: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Identity.$w$creadsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKDS_info" {
     block_cbKDS_info:
         const _cbKDS;
         const 2;
         const 4294967326;
         const SbJA1_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.078189263 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity3_closure" {
     Data.Functor.Identity.$fReadIdentity3_closure:
         const Data.Functor.Identity.$fReadIdentity3_info;
         const 0;
 },
 sat_sbJtM_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKEk: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJtM_info" {
     sat_sbJtM_info:
         const sat_sbJtM_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SbJA1_srt+32;
 },
 Data.Functor.Identity.$fReadIdentity3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbKEq: // global
           _sbJtL::P64 = R4;
           _sbJtK::P64 = R3;
           _sbJtJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbKEr; else goto cbKEs;
       cbKEs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKEu; else goto cbKEt;
       cbKEu: // global
           HpAlloc = 24;
           goto cbKEr;
       cbKEr: // global
           R4 = _sbJtL::P64;
           R3 = _sbJtK::P64;
           R2 = _sbJtJ::P64;
           R1 = Data.Functor.Identity.$fReadIdentity3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKEt: // global
           I64[Hp - 16] = sat_sbJtM_info;
           P64[Hp - 8] = _sbJtJ::P64;
           P64[Hp] = _sbJtK::P64;
           I64[Sp - 8] = block_cbKEn_info;
           R3 = _sbJtL::P64;
           R2 = Hp - 15;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity3_info" {
     Data.Functor.Identity.$fReadIdentity3_info:
         const Data.Functor.Identity.$fReadIdentity3_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbJA1_srt+32;
 },
 _cbKEn() //  [R1]
         { []
         }
     {offset
       cbKEn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbKEx; else goto cbKEw;
       cbKEx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbKEw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKEn_info" {
     block_cbKEn_info:
         const _cbKEn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.084632077 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity2_closure" {
     Data.Functor.Identity.$fReadIdentity2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.08762205 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_$creadList_closure" {
     Data.Functor.Identity.$fReadIdentity_$creadList_closure:
         const Data.Functor.Identity.$fReadIdentity_$creadList_info;
         const 0;
 },
 sat_sbJtQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKEY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJtQ_info" {
     sat_sbJtQ_info:
         const sat_sbJtQ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+40;
 },
 sat_sbJtR_entry() //  [R1]
         { []
         }
     {offset
       cbKF1: // global
           _sbJtR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbKF2; else goto cbKF3;
       cbKF3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbKF5; else goto cbKF4;
       cbKF5: // global
           HpAlloc = 16;
           goto cbKF2;
       cbKF2: // global
           R1 = _sbJtR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbJtR::P64;
           _sbJtP::P64 = P64[_sbJtR::P64 + 16];
           I64[Hp - 8] = sat_sbJtQ_info;
           P64[Hp] = _sbJtP::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity2_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJtR_info" {
     sat_sbJtR_info:
         const sat_sbJtR_entry;
         const 1;
         const 12884901904;
         const SbJA1_srt+40;
 },
 Data.Functor.Identity.$fReadIdentity_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cbKF6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKFa; else goto cbKF9;
       cbKFa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKF9: // global
           I64[Hp - 16] = sat_sbJtR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_$creadList_info" {
     Data.Functor.Identity.$fReadIdentity_$creadList_info:
         const Data.Functor.Identity.$fReadIdentity_$creadList_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SbJA1_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.096762159 UTC

[section ""data" . Data.Functor.Identity.$w$creadListPrec_closure" {
     Data.Functor.Identity.$w$creadListPrec_closure:
         const Data.Functor.Identity.$w$creadListPrec_info;
         const 0;
 },
 sat_sbJtU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKFz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJtU_info" {
     sat_sbJtU_info:
         const sat_sbJtU_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+40;
 },
 w1_sbJtT_entry() //  [R1]
         { []
         }
     {offset
       cbKFC: // global
           _sbJtT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbKFD; else goto cbKFE;
       cbKFE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbKFG; else goto cbKFF;
       cbKFG: // global
           HpAlloc = 16;
           goto cbKFD;
       cbKFD: // global
           R1 = _sbJtT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKFF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbJtT::P64;
           _sbJtS::P64 = P64[_sbJtT::P64 + 16];
           I64[Hp - 8] = sat_sbJtU_info;
           P64[Hp] = _sbJtS::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity2_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_sbJtT_info" {
     w1_sbJtT_info:
         const w1_sbJtT_entry;
         const 1;
         const 12884901904;
         const SbJA1_srt+40;
 },
 w2_sbJtV_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKFM: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_sbJtV_info" {
     w2_sbJtV_info:
         const w2_sbJtV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbJtZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKFX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbKFY; else goto cbKFZ;
       cbKFY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKFZ: // global
           I64[Sp - 8] = block_cbKFU_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJtZ_info" {
     sat_sbJtZ_info:
         const sat_sbJtZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbKFU() //  [R1]
         { []
         }
     {offset
       cbKFU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbKG2; else goto cbKG1;
       cbKG2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbKG1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKFU_info" {
     block_cbKFU_info:
         const _cbKFU;
         const 0;
         const 30;
 },
 Data.Functor.Identity.$w$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cbKG3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbKG7; else goto cbKG6;
       cbKG7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKG6: // global
           I64[Hp - 48] = w1_sbJtT_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w2_sbJtV_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sbJtZ_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$creadListPrec_info" {
     Data.Functor.Identity.$w$creadListPrec_info:
         const Data.Functor.Identity.$w$creadListPrec_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SbJA1_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.109212892 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity1_closure" {
     Data.Functor.Identity.$fReadIdentity1_closure:
         const Data.Functor.Identity.$fReadIdentity1_info;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbKGB: // global
           R2 = R2;
           call Data.Functor.Identity.$w$creadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity1_info" {
     Data.Functor.Identity.$fReadIdentity1_info:
         const Data.Functor.Identity.$fReadIdentity1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SbJA1_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.114350546 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_closure" {
     Data.Functor.Identity.$fReadIdentity_closure:
         const Data.Functor.Identity.$fReadIdentity_info;
         const 0;
 },
 lvl1_sbJu3_entry() //  [R1]
         { []
         }
     {offset
       cbKGQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKGR; else goto cbKGS;
       cbKGR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKGS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$w$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_sbJu3_info" {
     lvl1_sbJu3_info:
         const lvl1_sbJu3_entry;
         const 1;
         const 4294967312;
         const SbJA1_srt+64;
 },
 sat_sbJu8_entry() //  [R1]
         { []
         }
     {offset
       cbKGY: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJu8_info" {
     sat_sbJu8_info:
         const sat_sbJu8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbJu6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKH6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJu6_info" {
     sat_sbJu6_info:
         const sat_sbJu6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+40;
 },
 sat_sbJu5_entry() //  [R1]
         { []
         }
     {offset
       cbKHd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKHe; else goto cbKHf;
       cbKHe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKHf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fReadIdentity_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJu5_info" {
     sat_sbJu5_info:
         const sat_sbJu5_entry;
         const 1;
         const 4294967312;
         const SbJA1_srt+56;
 },
 sat_sbJu4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKHl: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJu4_info" {
     sat_sbJu4_info:
         const sat_sbJu4_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+32;
 },
 Data.Functor.Identity.$fReadIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKHp: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbKHt; else goto cbKHs;
       cbKHt: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKHs: // global
           I64[Hp - 128] = lvl1_sbJu3_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJu8_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_sbJu6_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbJu5_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbJu4_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_info" {
     Data.Functor.Identity.$fReadIdentity_info:
         const Data.Functor.Identity.$fReadIdentity_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SbJA1_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.125146261 UTC

[section ""cstring" . Data.Functor.Identity.$fShowIdentity2_bytes" {
     Data.Functor.Identity.$fShowIdentity2_bytes:
         I8[] [73,100,101,110,116,105,116,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.127468792 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity1_closure" {
     Data.Functor.Identity.$fShowIdentity1_closure:
         const Data.Functor.Identity.$fShowIdentity1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Identity.$fShowIdentity1_entry() //  [R1]
         { []
         }
     {offset
       cbKI2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKI3; else goto cbKI4;
       cbKI3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKI4: // global
           (_cbKHZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbKHZ::I64 == 0) goto cbKI1; else goto cbKI0;
       cbKI1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbKI0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbKHZ::I64;
           R2 = Data.Functor.Identity.$fShowIdentity2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity1_info" {
     Data.Functor.Identity.$fShowIdentity1_info:
         const Data.Functor.Identity.$fShowIdentity1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.134768874 UTC

[section ""data" . Data.Functor.Identity.$w$cshowsPrec_closure" {
     Data.Functor.Identity.$w$cshowsPrec_closure:
         const Data.Functor.Identity.$w$cshowsPrec_info;
         const 0;
 },
 g_sbJuc_entry() //  [R1]
         { []
         }
     {offset
       cbKIk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbKIl; else goto cbKIm;
       cbKIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sbJuc_info" {
     g_sbJuc_info:
         const g_sbJuc_entry;
         const 2;
         const 18;
 },
 sat_sbJuf_entry() //  [R1]
         { []
         }
     {offset
       cbKIz: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuf_info" {
     sat_sbJuf_info:
         const sat_sbJuf_entry;
         const 2;
         const 18;
 },
 sat_sbJug_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKIC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbKIG; else goto cbKIF;
       cbKIG: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKIF: // global
           _sbJuc::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbJuf_info;
           P64[Hp - 8] = _sbJuc::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJug_info" {
     sat_sbJug_info:
         const sat_sbJug_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbJA1_srt+80;
 },
 sat_sbJuj_entry() //  [R1]
         { []
         }
     {offset
       cbKIW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKJ0; else goto cbKIZ;
       cbKJ0: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKIZ: // global
           _sbJuc::P64 = P64[R1 + 16];
           _sbJuh::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sbJuh::P64;
           R2 = Hp - 14;
           R1 = _sbJuc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuj_info" {
     sat_sbJuj_info:
         const sat_sbJuj_entry;
         const 2;
         const 18;
 },
 sat_sbJuk_entry() //  [R1]
         { []
         }
     {offset
       cbKJ1: // global
           _sbJuk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbKJ2; else goto cbKJ3;
       cbKJ3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbKJ5; else goto cbKJ4;
       cbKJ5: // global
           HpAlloc = 32;
           goto cbKJ2;
       cbKJ2: // global
           R1 = _sbJuk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKJ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbJuk::P64;
           _sbJuc::P64 = P64[_sbJuk::P64 + 16];
           _sbJuh::P64 = P64[_sbJuk::P64 + 24];
           I64[Hp - 24] = sat_sbJuj_info;
           P64[Hp - 8] = _sbJuc::P64;
           P64[Hp] = _sbJuh::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuk_info" {
     sat_sbJuk_info:
         const sat_sbJuk_entry;
         const 2;
         const 4294967314;
         const SbJA1_srt+80;
 },
 sat_sbJul_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKJ7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbKJb; else goto cbKJa;
       cbKJb: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKJa: // global
           _sbJuc::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sbJuk_info;
           P64[Hp - 32] = _sbJuc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJul_info" {
     sat_sbJul_info:
         const sat_sbJul_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbJA1_srt+80;
 },
 Data.Functor.Identity.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbKJf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbKJj; else goto cbKJi;
       cbKJj: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKJi: // global
           I64[Hp - 40] = g_sbJuc_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cbKIg::P64 = Hp - 40;
           if (%MO_S_Le_W64(R3, 10)) goto cbKJd; else goto cbKJe;
       cbKJd: // global
           I64[Hp - 8] = sat_sbJug_info;
           P64[Hp] = _cbKIg::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbKJe: // global
           I64[Hp - 8] = sat_sbJul_info;
           P64[Hp] = _cbKIg::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$cshowsPrec_info" {
     Data.Functor.Identity.$w$cshowsPrec_info:
         const Data.Functor.Identity.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const SbJA1_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.152452075 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbKJU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbKJV; else goto cbKJW;
       cbKJV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKJW: // global
           I64[Sp - 24] = block_cbKJR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubKK0; else goto cbKJS;
       ubKK0: // global
           call _cbKJR(R1) args: 0, res: 0, upd: 0;
       cbKJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info" {
     Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info:
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbJA1_srt+88;
 },
 _cbKJR() //  [R1]
         { []
         }
     {offset
       cbKJR: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Identity.$w$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbKJR_info" {
     block_cbKJR_info:
         const _cbKJR;
         const 2;
         const 4294967326;
         const SbJA1_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.159015392 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshow_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshow_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshow_info;
         const 0;
 },
 sat_sbJut_entry() //  [R1]
         { []
         }
     {offset
       cbKKi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbKKj; else goto cbKKk;
       cbKKj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKKk: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJut_info" {
     sat_sbJut_info:
         const sat_sbJut_entry;
         const 2;
         const 18;
 },
 Data.Functor.Identity.$fShowIdentity_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbKKl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbKKp; else goto cbKKo;
       cbKKp: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKKo: // global
           I64[Hp - 24] = sat_sbJut_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshow_info" {
     Data.Functor.Identity.$fShowIdentity_$cshow_info:
         const Data.Functor.Identity.$fShowIdentity_$cshow_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SbJA1_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.165662236 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshowList_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshowList_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshowList_info;
         const 0;
 },
 sat_sbJuy_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKKI: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$w$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuy_info" {
     sat_sbJuy_info:
         const sat_sbJuy_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbJA1_srt+88;
 },
 Data.Functor.Identity.$fShowIdentity_$cshowList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cbKKL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbKKP; else goto cbKKO;
       cbKKP: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbKKO: // global
           I64[Hp - 8] = sat_sbJuy_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshowList_info" {
     Data.Functor.Identity.$fShowIdentity_$cshowList_info:
         const Data.Functor.Identity.$fShowIdentity_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SbJA1_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.172469164 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_closure" {
     Data.Functor.Identity.$fShowIdentity_closure:
         const Data.Functor.Identity.$fShowIdentity_info;
         const 0;
 },
 sat_sbJuC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKL6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fShowIdentity_$cshowList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuC_info" {
     sat_sbJuC_info:
         const sat_sbJuC_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+112;
 },
 sat_sbJuB_entry() //  [R1, R2]
         { []
         }
     {offset
       cbKLe: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$fShowIdentity_$cshow_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuB_info" {
     sat_sbJuB_info:
         const sat_sbJuB_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbJA1_srt+104;
 },
 sat_sbJuA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbKLm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbJuA_info" {
     sat_sbJuA_info:
         const sat_sbJuA_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbJA1_srt+96;
 },
 Data.Functor.Identity.$fShowIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKLq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbKLu; else goto cbKLt;
       cbKLu: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKLt: // global
           I64[Hp - 72] = sat_sbJuC_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbJuB_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbJuA_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_info" {
     Data.Functor.Identity.$fShowIdentity_info:
         const Data.Functor.Identity.$fShowIdentity_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SbJA1_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.181706608 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity4_closure" {
     Data.Functor.Identity.$fFoldableIdentity4_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.183739781 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$clength_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$clength_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$clength_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$clength_entry() //  []
         { []
         }
     {offset
       cbKLR: // global
           R1 = Data.Functor.Identity.$fFoldableIdentity4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$clength_info" {
     Data.Functor.Identity.$fFoldableIdentity_$clength_info:
         const Data.Functor.Identity.$fFoldableIdentity_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.187118622 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$cnull_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$cnull_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$cnull_entry() //  []
         { []
         }
     {offset
       cbKM3: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$cnull_info" {
     Data.Functor.Identity.$fFoldableIdentity_$cnull_info:
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.190947756 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cbKMg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKMk; else goto cbKMj;
       cbKMk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKMj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$ctoList_info" {
     Data.Functor.Identity.$fFoldableIdentity_$ctoList_info:
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.194597428 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity6_closure" {
     Data.Functor.Identity.$fFoldableIdentity6_closure:
         const Data.Functor.Identity.$fFoldableIdentity6_info;
 },
 Data.Functor.Identity.$fFoldableIdentity6_entry() //  [R2]
         { []
         }
     {offset
       cbKMu: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity6_info" {
     Data.Functor.Identity.$fFoldableIdentity6_info:
         const Data.Functor.Identity.$fFoldableIdentity6_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.197978387 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$cfoldr_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbKMF: // global
           R3 = R3;
           _sbJuH::P64 = R2;
           R2 = R4;
           R1 = _sbJuH::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info" {
     Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info:
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.201367311 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity7_closure" {
     Data.Functor.Identity.$fFoldableIdentity7_closure:
         const Data.Functor.Identity.$fFoldableIdentity7_info;
 },
 Data.Functor.Identity.$fFoldableIdentity7_entry() //  [R3]
         { []
         }
     {offset
       cbKMQ: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity7_info" {
     Data.Functor.Identity.$fFoldableIdentity7_info:
         const Data.Functor.Identity.$fFoldableIdentity7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.204557845 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity2_closure" {
     Data.Functor.Identity.$fFunctorIdentity2_closure:
         const Data.Functor.Identity.$fFunctorIdentity2_info;
 },
 Data.Functor.Identity.$fFunctorIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbKN1: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFunctorIdentity2_info" {
     Data.Functor.Identity.$fFunctorIdentity2_info:
         const Data.Functor.Identity.$fFunctorIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.207764373 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity1_closure" {
     Data.Functor.Identity.$fFunctorIdentity1_closure:
         const Data.Functor.Identity.$fFunctorIdentity1_info;
 },
 Data.Functor.Identity.$fFunctorIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbKNc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFunctorIdentity1_info" {
     Data.Functor.Identity.$fFunctorIdentity1_info:
         const Data.Functor.Identity.$fFunctorIdentity1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.211408363 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity_closure" {
     Data.Functor.Identity.$fFunctorIdentity_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Identity.$fFunctorIdentity2_closure+1;
         const Data.Functor.Identity.$fFunctorIdentity1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.213802619 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity1_closure" {
     Data.Functor.Identity.$fApplicativeIdentity1_closure:
         const Data.Functor.Identity.$fApplicativeIdentity1_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbKNo: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity1_info" {
     Data.Functor.Identity.$fApplicativeIdentity1_info:
         const Data.Functor.Identity.$fApplicativeIdentity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.217192951 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity2_closure" {
     Data.Functor.Identity.$fApplicativeIdentity2_closure:
         const Data.Functor.Identity.$fApplicativeIdentity2_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbKNz: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity2_info" {
     Data.Functor.Identity.$fApplicativeIdentity2_info:
         const Data.Functor.Identity.$fApplicativeIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.220571816 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity3_closure" {
     Data.Functor.Identity.$fApplicativeIdentity3_closure:
         const Data.Functor.Identity.$fApplicativeIdentity3_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity3_entry() //  [R2]
         { []
         }
     {offset
       cbKNK: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity3_info" {
     Data.Functor.Identity.$fApplicativeIdentity3_info:
         const Data.Functor.Identity.$fApplicativeIdentity3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.223871049 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure" {
     Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure:
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cbKNV: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity_$c*>_info" {
     Data.Functor.Identity.$fApplicativeIdentity_$c*>_info:
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.226929647 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity_closure" {
     Data.Functor.Identity.$fApplicativeIdentity_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Identity.$fFunctorIdentity_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity3_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity2_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity1_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure+2;
         const GHC.Base.const_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.231991388 UTC

[section ""data" . Data.Functor.Identity.$fStorableIdentity_closure" {
     Data.Functor.Identity.$fStorableIdentity_closure:
         const Data.Functor.Identity.$fStorableIdentity_info;
 },
 sat_sbJv2_entry() //  [R1]
         { []
         }
     {offset
       cbKOb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOc; else goto cbKOd;
       cbKOc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv2_info" {
     sat_sbJv2_info:
         const sat_sbJv2_entry;
         const 1;
         const 16;
 },
 sat_sbJv1_entry() //  [R1]
         { []
         }
     {offset
       cbKOi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOj; else goto cbKOk;
       cbKOj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv1_info" {
     sat_sbJv1_info:
         const sat_sbJv1_entry;
         const 1;
         const 16;
 },
 sat_sbJv0_entry() //  [R1]
         { []
         }
     {offset
       cbKOp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOq; else goto cbKOr;
       cbKOq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv0_info" {
     sat_sbJv0_info:
         const sat_sbJv0_entry;
         const 1;
         const 16;
 },
 sat_sbJuZ_entry() //  [R1]
         { []
         }
     {offset
       cbKOw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOx; else goto cbKOy;
       cbKOx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuZ_info" {
     sat_sbJuZ_info:
         const sat_sbJuZ_entry;
         const 1;
         const 16;
 },
 sat_sbJuY_entry() //  [R1]
         { []
         }
     {offset
       cbKOD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOE; else goto cbKOF;
       cbKOE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuY_info" {
     sat_sbJuY_info:
         const sat_sbJuY_entry;
         const 1;
         const 16;
 },
 sat_sbJuX_entry() //  [R1]
         { []
         }
     {offset
       cbKOK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOL; else goto cbKOM;
       cbKOL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuX_info" {
     sat_sbJuX_info:
         const sat_sbJuX_entry;
         const 1;
         const 16;
 },
 sat_sbJuW_entry() //  [R1]
         { []
         }
     {offset
       cbKOR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOS; else goto cbKOT;
       cbKOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKOT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuW_info" {
     sat_sbJuW_info:
         const sat_sbJuW_entry;
         const 1;
         const 16;
 },
 sat_sbJuV_entry() //  [R1]
         { []
         }
     {offset
       cbKOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKOZ; else goto cbKP0;
       cbKOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKP0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJuV_info" {
     sat_sbJuV_info:
         const sat_sbJuV_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fStorableIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKP2: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbKP6; else goto cbKP5;
       cbKP6: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fStorableIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKP5: // global
           I64[Hp - 256] = sat_sbJv2_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbJv1_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbJv0_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbJuZ_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbJuY_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbJuX_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbJuW_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbJuV_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fStorableIdentity_info" {
     Data.Functor.Identity.$fStorableIdentity_info:
         const Data.Functor.Identity.$fStorableIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.25310068 UTC

[section ""data" . Data.Functor.Identity.$fNumIdentity_closure" {
     Data.Functor.Identity.$fNumIdentity_closure:
         const Data.Functor.Identity.$fNumIdentity_info;
 },
 sat_sbJva_entry() //  [R1]
         { []
         }
     {offset
       cbKPY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKPZ; else goto cbKQ0;
       cbKPZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJva_info" {
     sat_sbJva_info:
         const sat_sbJva_entry;
         const 1;
         const 16;
 },
 sat_sbJv9_entry() //  [R1]
         { []
         }
     {offset
       cbKQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQ6; else goto cbKQ7;
       cbKQ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv9_info" {
     sat_sbJv9_info:
         const sat_sbJv9_entry;
         const 1;
         const 16;
 },
 sat_sbJv8_entry() //  [R1]
         { []
         }
     {offset
       cbKQc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQd; else goto cbKQe;
       cbKQd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv8_info" {
     sat_sbJv8_info:
         const sat_sbJv8_entry;
         const 1;
         const 16;
 },
 sat_sbJv7_entry() //  [R1]
         { []
         }
     {offset
       cbKQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQk; else goto cbKQl;
       cbKQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv7_info" {
     sat_sbJv7_info:
         const sat_sbJv7_entry;
         const 1;
         const 16;
 },
 sat_sbJv6_entry() //  [R1]
         { []
         }
     {offset
       cbKQq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQr; else goto cbKQs;
       cbKQr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv6_info" {
     sat_sbJv6_info:
         const sat_sbJv6_entry;
         const 1;
         const 16;
 },
 sat_sbJv5_entry() //  [R1]
         { []
         }
     {offset
       cbKQx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQy; else goto cbKQz;
       cbKQy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv5_info" {
     sat_sbJv5_info:
         const sat_sbJv5_entry;
         const 1;
         const 16;
 },
 sat_sbJv4_entry() //  [R1]
         { []
         }
     {offset
       cbKQE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKQF; else goto cbKQG;
       cbKQF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJv4_info" {
     sat_sbJv4_info:
         const sat_sbJv4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fNumIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKQI: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbKQM; else goto cbKQL;
       cbKQM: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fNumIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKQL: // global
           I64[Hp - 224] = sat_sbJva_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbJv9_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbJv8_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbJv7_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbJv6_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJv5_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJv4_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fNumIdentity_info" {
     Data.Functor.Identity.$fNumIdentity_info:
         const Data.Functor.Identity.$fNumIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.268636859 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_$cp1Real_closure" {
     Data.Functor.Identity.$fRealIdentity_$cp1Real_closure:
         const Data.Functor.Identity.$fRealIdentity_$cp1Real_info;
 },
 sat_sbJvc_entry() //  [R1]
         { []
         }
     {offset
       cbKRz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKRA; else goto cbKRB;
       cbKRA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKRB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvc_info" {
     sat_sbJvc_info:
         const sat_sbJvc_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_$cp1Real_entry() //  [R2]
         { []
         }
     {offset
       cbKRC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKRG; else goto cbKRF;
       cbKRG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_$cp1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKRF: // global
           I64[Hp - 16] = sat_sbJvc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fNumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_$cp1Real_info" {
     Data.Functor.Identity.$fRealIdentity_$cp1Real_info:
         const Data.Functor.Identity.$fRealIdentity_$cp1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.275333008 UTC

[section ""data" . Data.Functor.Identity.$fSemigroupIdentity_closure" {
     Data.Functor.Identity.$fSemigroupIdentity_closure:
         const Data.Functor.Identity.$fSemigroupIdentity_info;
 },
 sat_sbJvg_entry() //  [R1]
         { []
         }
     {offset
       cbKRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKRY; else goto cbKRZ;
       cbKRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKRZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvg_info" {
     sat_sbJvg_info:
         const sat_sbJvg_entry;
         const 1;
         const 16;
 },
 sat_sbJvf_entry() //  [R1]
         { []
         }
     {offset
       cbKS4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKS5; else goto cbKS6;
       cbKS5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKS6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvf_info" {
     sat_sbJvf_info:
         const sat_sbJvf_entry;
         const 1;
         const 16;
 },
 sat_sbJve_entry() //  [R1]
         { []
         }
     {offset
       cbKSb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKSc; else goto cbKSd;
       cbKSc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKSd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJve_info" {
     sat_sbJve_info:
         const sat_sbJve_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fSemigroupIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKSf: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbKSj; else goto cbKSi;
       cbKSj: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Identity.$fSemigroupIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKSi: // global
           I64[Hp - 96] = sat_sbJvg_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbJvf_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbJve_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fSemigroupIdentity_info" {
     Data.Functor.Identity.$fSemigroupIdentity_info:
         const Data.Functor.Identity.$fSemigroupIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.284933647 UTC

[section ""data" . Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure" {
     Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure:
         const Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info;
 },
 sat_sbJvi_entry() //  [R1]
         { []
         }
     {offset
       cbKSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKSN; else goto cbKSO;
       cbKSN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKSO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvi_info" {
     sat_sbJvi_info:
         const sat_sbJvi_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       cbKSP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKST; else goto cbKSS;
       cbKST: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKSS: // global
           I64[Hp - 16] = sat_sbJvi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fSemigroupIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info" {
     Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info:
         const Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.291597971 UTC

[section ""data" . Data.Functor.Identity.$fMonoidIdentity_closure" {
     Data.Functor.Identity.$fMonoidIdentity_closure:
         const Data.Functor.Identity.$fMonoidIdentity_info;
 },
 sat_sbJvn_entry() //  [R1]
         { []
         }
     {offset
       cbKTa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKTb; else goto cbKTc;
       cbKTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKTc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvn_info" {
     sat_sbJvn_info:
         const sat_sbJvn_entry;
         const 1;
         const 16;
 },
 sat_sbJvm_entry() //  [R1]
         { []
         }
     {offset
       cbKTh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKTi; else goto cbKTj;
       cbKTi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvm_info" {
     sat_sbJvm_info:
         const sat_sbJvm_entry;
         const 1;
         const 16;
 },
 sat_sbJvl_entry() //  [R1]
         { []
         }
     {offset
       cbKTo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKTp; else goto cbKTq;
       cbKTp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKTq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvl_info" {
     sat_sbJvl_info:
         const sat_sbJvl_entry;
         const 1;
         const 16;
 },
 sat_sbJvk_entry() //  [R1]
         { []
         }
     {offset
       cbKTv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKTw; else goto cbKTx;
       cbKTw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvk_info" {
     sat_sbJvk_info:
         const sat_sbJvk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fMonoidIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKTz: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbKTD; else goto cbKTC;
       cbKTD: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonoidIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKTC: // global
           I64[Hp - 128] = sat_sbJvn_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJvm_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJvl_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbJvk_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonoidIdentity_info" {
     Data.Functor.Identity.$fMonoidIdentity_info:
         const Data.Functor.Identity.$fMonoidIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.302064167 UTC

[section ""data" . Data.Functor.Identity.$fGeneric1Identity1_closure" {
     Data.Functor.Identity.$fGeneric1Identity1_closure:
         const Data.Functor.Identity.$fGeneric1Identity1_info;
 },
 Data.Functor.Identity.$fGeneric1Identity1_entry() //  [R2]
         { []
         }
     {offset
       cbKU7: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGeneric1Identity1_info" {
     Data.Functor.Identity.$fGeneric1Identity1_info:
         const Data.Functor.Identity.$fGeneric1Identity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.305396321 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity2_closure" {
     Data.Functor.Identity.$fFoldableIdentity2_closure:
         const Data.Functor.Identity.$fFoldableIdentity2_info;
 },
 Data.Functor.Identity.$fFoldableIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbKUi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity2_info" {
     Data.Functor.Identity.$fFoldableIdentity2_info:
         const Data.Functor.Identity.$fFoldableIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.308404183 UTC

[section ""data" . Data.Functor.Identity.$fGeneric1Identity_closure" {
     Data.Functor.Identity.$fGeneric1Identity_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Identity.$fFoldableIdentity2_closure+1;
         const Data.Functor.Identity.$fGeneric1Identity1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.310802478 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity1_closure" {
     Data.Functor.Identity.$fGenericIdentity1_closure:
         const Data.Functor.Identity.$fGenericIdentity1_info;
 },
 Data.Functor.Identity.$fGenericIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbKUu: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGenericIdentity1_info" {
     Data.Functor.Identity.$fGenericIdentity1_info:
         const Data.Functor.Identity.$fGenericIdentity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.314030274 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity2_closure" {
     Data.Functor.Identity.$fGenericIdentity2_closure:
         const Data.Functor.Identity.$fGenericIdentity2_info;
 },
 Data.Functor.Identity.$fGenericIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbKUF: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGenericIdentity2_info" {
     Data.Functor.Identity.$fGenericIdentity2_info:
         const Data.Functor.Identity.$fGenericIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.317668871 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity_closure" {
     Data.Functor.Identity.$fGenericIdentity_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Identity.$fGenericIdentity2_closure+1;
         const Data.Functor.Identity.$fGenericIdentity1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.320229958 UTC

[section ""data" . Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure" {
     Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure:
         const Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info;
 },
 sat_sbJvt_entry() //  [R1]
         { []
         }
     {offset
       cbKUV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKUW; else goto cbKUX;
       cbKUW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKUX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvt_info" {
     sat_sbJvt_info:
         const sat_sbJvt_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry() //  [R2]
         { []
         }
     {offset
       cbKUY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKV2; else goto cbKV1;
       cbKV2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKV1: // global
           I64[Hp - 16] = sat_sbJvt_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fNumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info" {
     Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info:
         const Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.327834946 UTC

[section ""data" . Data.Functor.Identity.$fFractionalIdentity_closure" {
     Data.Functor.Identity.$fFractionalIdentity_closure:
         const Data.Functor.Identity.$fFractionalIdentity_info;
 },
 sat_sbJvy_entry() //  [R1]
         { []
         }
     {offset
       cbKVj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKVk; else goto cbKVl;
       cbKVk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKVl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvy_info" {
     sat_sbJvy_info:
         const sat_sbJvy_entry;
         const 1;
         const 16;
 },
 sat_sbJvx_entry() //  [R1]
         { []
         }
     {offset
       cbKVq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKVr; else goto cbKVs;
       cbKVr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKVs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvx_info" {
     sat_sbJvx_info:
         const sat_sbJvx_entry;
         const 1;
         const 16;
 },
 sat_sbJvw_entry() //  [R1]
         { []
         }
     {offset
       cbKVx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKVy; else goto cbKVz;
       cbKVy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real./_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvw_info" {
     sat_sbJvw_info:
         const sat_sbJvw_entry;
         const 1;
         const 16;
 },
 sat_sbJvv_entry() //  [R1]
         { []
         }
     {offset
       cbKVE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKVF; else goto cbKVG;
       cbKVF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKVG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvv_info" {
     sat_sbJvv_info:
         const sat_sbJvv_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFractionalIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKVI: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbKVM; else goto cbKVL;
       cbKVM: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFractionalIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKVL: // global
           I64[Hp - 128] = sat_sbJvy_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJvx_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJvw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbJvv_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFractionalIdentity_info" {
     Data.Functor.Identity.$fFractionalIdentity_info:
         const Data.Functor.Identity.$fFractionalIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.338416497 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure" {
     Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure:
         const Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info;
 },
 sat_sbJvA_entry() //  [R1]
         { []
         }
     {offset
       cbKWk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKWl; else goto cbKWm;
       cbKWl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKWm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvA_info" {
     sat_sbJvA_info:
         const sat_sbJvA_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       cbKWn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKWr; else goto cbKWq;
       cbKWr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKWq: // global
           I64[Hp - 16] = sat_sbJvA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info" {
     Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info:
         const Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.344255599 UTC

[section ""data" . Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure" {
     Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure:
         const Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info;
 },
 sat_sbJvC_entry() //  [R1]
         { []
         }
     {offset
       cbKWI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKWJ; else goto cbKWK;
       cbKWJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKWK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvC_info" {
     sat_sbJvC_info:
         const sat_sbJvC_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry() //  [R2]
         { []
         }
     {offset
       cbKWL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbKWP; else goto cbKWO;
       cbKWP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKWO: // global
           I64[Hp - 16] = sat_sbJvC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info" {
     Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info:
         const Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.357951452 UTC

[section ""data" . Data.Functor.Identity.$fFloatingIdentity_closure" {
     Data.Functor.Identity.$fFloatingIdentity_closure:
         const Data.Functor.Identity.$fFloatingIdentity_info;
 },
 sat_sbJw0_entry() //  [R1]
         { []
         }
     {offset
       cbKX6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKX7; else goto cbKX8;
       cbKX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1mexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw0_info" {
     sat_sbJw0_info:
         const sat_sbJw0_entry;
         const 1;
         const 16;
 },
 sat_sbJvZ_entry() //  [R1]
         { []
         }
     {offset
       cbKXd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXe; else goto cbKXf;
       cbKXe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1pexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvZ_info" {
     sat_sbJvZ_info:
         const sat_sbJvZ_entry;
         const 1;
         const 16;
 },
 sat_sbJvY_entry() //  [R1]
         { []
         }
     {offset
       cbKXk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXl; else goto cbKXm;
       cbKXl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.expm1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvY_info" {
     sat_sbJvY_info:
         const sat_sbJvY_entry;
         const 1;
         const 16;
 },
 sat_sbJvX_entry() //  [R1]
         { []
         }
     {offset
       cbKXr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXs; else goto cbKXt;
       cbKXs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvX_info" {
     sat_sbJvX_info:
         const sat_sbJvX_entry;
         const 1;
         const 16;
 },
 sat_sbJvW_entry() //  [R1]
         { []
         }
     {offset
       cbKXy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXz; else goto cbKXA;
       cbKXz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvW_info" {
     sat_sbJvW_info:
         const sat_sbJvW_entry;
         const 1;
         const 16;
 },
 sat_sbJvV_entry() //  [R1]
         { []
         }
     {offset
       cbKXF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXG; else goto cbKXH;
       cbKXG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvV_info" {
     sat_sbJvV_info:
         const sat_sbJvV_entry;
         const 1;
         const 16;
 },
 sat_sbJvU_entry() //  [R1]
         { []
         }
     {offset
       cbKXM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXN; else goto cbKXO;
       cbKXN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvU_info" {
     sat_sbJvU_info:
         const sat_sbJvU_entry;
         const 1;
         const 16;
 },
 sat_sbJvT_entry() //  [R1]
         { []
         }
     {offset
       cbKXT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKXU; else goto cbKXV;
       cbKXU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKXV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvT_info" {
     sat_sbJvT_info:
         const sat_sbJvT_entry;
         const 1;
         const 16;
 },
 sat_sbJvS_entry() //  [R1]
         { []
         }
     {offset
       cbKY0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKY1; else goto cbKY2;
       cbKY1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKY2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvS_info" {
     sat_sbJvS_info:
         const sat_sbJvS_entry;
         const 1;
         const 16;
 },
 sat_sbJvR_entry() //  [R1]
         { []
         }
     {offset
       cbKY7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKY8; else goto cbKY9;
       cbKY8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKY9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvR_info" {
     sat_sbJvR_info:
         const sat_sbJvR_entry;
         const 1;
         const 16;
 },
 sat_sbJvQ_entry() //  [R1]
         { []
         }
     {offset
       cbKYe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYf; else goto cbKYg;
       cbKYf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvQ_info" {
     sat_sbJvQ_info:
         const sat_sbJvQ_entry;
         const 1;
         const 16;
 },
 sat_sbJvP_entry() //  [R1]
         { []
         }
     {offset
       cbKYl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYm; else goto cbKYn;
       cbKYm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvP_info" {
     sat_sbJvP_info:
         const sat_sbJvP_entry;
         const 1;
         const 16;
 },
 sat_sbJvO_entry() //  [R1]
         { []
         }
     {offset
       cbKYs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYt; else goto cbKYu;
       cbKYt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvO_info" {
     sat_sbJvO_info:
         const sat_sbJvO_entry;
         const 1;
         const 16;
 },
 sat_sbJvN_entry() //  [R1]
         { []
         }
     {offset
       cbKYz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYA; else goto cbKYB;
       cbKYA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvN_info" {
     sat_sbJvN_info:
         const sat_sbJvN_entry;
         const 1;
         const 16;
 },
 sat_sbJvM_entry() //  [R1]
         { []
         }
     {offset
       cbKYG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYH; else goto cbKYI;
       cbKYH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvM_info" {
     sat_sbJvM_info:
         const sat_sbJvM_entry;
         const 1;
         const 16;
 },
 sat_sbJvL_entry() //  [R1]
         { []
         }
     {offset
       cbKYN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYO; else goto cbKYP;
       cbKYO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvL_info" {
     sat_sbJvL_info:
         const sat_sbJvL_entry;
         const 1;
         const 16;
 },
 sat_sbJvK_entry() //  [R1]
         { []
         }
     {offset
       cbKYU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKYV; else goto cbKYW;
       cbKYV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKYW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.logBase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvK_info" {
     sat_sbJvK_info:
         const sat_sbJvK_entry;
         const 1;
         const 16;
 },
 sat_sbJvJ_entry() //  [R1]
         { []
         }
     {offset
       cbKZ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZ2; else goto cbKZ3;
       cbKZ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.**_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvJ_info" {
     sat_sbJvJ_info:
         const sat_sbJvJ_entry;
         const 1;
         const 16;
 },
 sat_sbJvI_entry() //  [R1]
         { []
         }
     {offset
       cbKZ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZ9; else goto cbKZa;
       cbKZ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sqrt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvI_info" {
     sat_sbJvI_info:
         const sat_sbJvI_entry;
         const 1;
         const 16;
 },
 sat_sbJvH_entry() //  [R1]
         { []
         }
     {offset
       cbKZf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZg; else goto cbKZh;
       cbKZg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvH_info" {
     sat_sbJvH_info:
         const sat_sbJvH_entry;
         const 1;
         const 16;
 },
 sat_sbJvG_entry() //  [R1]
         { []
         }
     {offset
       cbKZm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZn; else goto cbKZo;
       cbKZn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvG_info" {
     sat_sbJvG_info:
         const sat_sbJvG_entry;
         const 1;
         const 16;
 },
 sat_sbJvF_entry() //  [R1]
         { []
         }
     {offset
       cbKZt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZu; else goto cbKZv;
       cbKZu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvF_info" {
     sat_sbJvF_info:
         const sat_sbJvF_entry;
         const 1;
         const 16;
 },
 sat_sbJvE_entry() //  [R1]
         { []
         }
     {offset
       cbKZA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbKZB; else goto cbKZC;
       cbKZB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbKZC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJvE_info" {
     sat_sbJvE_info:
         const sat_sbJvE_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFloatingIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbKZE: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto cbKZI; else goto cbKZH;
       cbKZI: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFloatingIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbKZH: // global
           I64[Hp - 736] = sat_sbJw0_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_sbJvZ_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_sbJvY_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_sbJvX_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_sbJvW_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_sbJvV_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_sbJvU_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_sbJvT_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_sbJvS_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sbJvR_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_sbJvQ_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sbJvP_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_sbJvO_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sbJvN_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_sbJvM_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sbJvL_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_sbJvK_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sbJvJ_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sbJvI_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sbJvH_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sbJvG_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbJvF_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbJvE_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFloatingIdentity_info" {
     Data.Functor.Identity.$fFloatingIdentity_info:
         const Data.Functor.Identity.$fFloatingIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.402321922 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info;
 },
 sat_sbJw2_entry() //  [R1]
         { []
         }
     {offset
       cbL1N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL1O; else goto cbL1P;
       cbL1O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL1P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw2_info" {
     sat_sbJw2_info:
         const sat_sbJw2_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       cbL1Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL1U; else goto cbL1T;
       cbL1U: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL1T: // global
           I64[Hp - 16] = sat_sbJw2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFloatingIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.408245518 UTC

[section ""data" . Data.Functor.Identity.$fEqIdentity_closure" {
     Data.Functor.Identity.$fEqIdentity_closure:
         const Data.Functor.Identity.$fEqIdentity_info;
 },
 sat_sbJw5_entry() //  [R1]
         { []
         }
     {offset
       cbL2b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL2c; else goto cbL2d;
       cbL2c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL2d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw5_info" {
     sat_sbJw5_info:
         const sat_sbJw5_entry;
         const 1;
         const 16;
 },
 sat_sbJw4_entry() //  [R1]
         { []
         }
     {offset
       cbL2i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL2j; else goto cbL2k;
       cbL2j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL2k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw4_info" {
     sat_sbJw4_info:
         const sat_sbJw4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fEqIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbL2m: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbL2q; else goto cbL2p;
       cbL2q: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Identity.$fEqIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL2p: // global
           I64[Hp - 64] = sat_sbJw5_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbJw4_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fEqIdentity_info" {
     Data.Functor.Identity.$fEqIdentity_info:
         const Data.Functor.Identity.$fEqIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.415791608 UTC

[section ""data" . Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure" {
     Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure:
         const Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info;
 },
 sat_sbJw7_entry() //  [R1]
         { []
         }
     {offset
       cbL2O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL2P; else goto cbL2Q;
       cbL2P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL2Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw7_info" {
     sat_sbJw7_info:
         const sat_sbJw7_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cbL2R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL2V; else goto cbL2U;
       cbL2V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL2U: // global
           I64[Hp - 16] = sat_sbJw7_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEqIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info" {
     Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info:
         const Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.423708572 UTC

[section ""data" . Data.Functor.Identity.$fOrdIdentity_closure" {
     Data.Functor.Identity.$fOrdIdentity_closure:
         const Data.Functor.Identity.$fOrdIdentity_info;
 },
 sat_sbJwg_entry() //  [R1]
         { []
         }
     {offset
       cbL3c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3d; else goto cbL3e;
       cbL3d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwg_info" {
     sat_sbJwg_info:
         const sat_sbJwg_entry;
         const 1;
         const 16;
 },
 sat_sbJwf_entry() //  [R1]
         { []
         }
     {offset
       cbL3j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3k; else goto cbL3l;
       cbL3k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwf_info" {
     sat_sbJwf_info:
         const sat_sbJwf_entry;
         const 1;
         const 16;
 },
 sat_sbJwe_entry() //  [R1]
         { []
         }
     {offset
       cbL3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3r; else goto cbL3s;
       cbL3r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwe_info" {
     sat_sbJwe_info:
         const sat_sbJwe_entry;
         const 1;
         const 16;
 },
 sat_sbJwd_entry() //  [R1]
         { []
         }
     {offset
       cbL3x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3y; else goto cbL3z;
       cbL3y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwd_info" {
     sat_sbJwd_info:
         const sat_sbJwd_entry;
         const 1;
         const 16;
 },
 sat_sbJwc_entry() //  [R1]
         { []
         }
     {offset
       cbL3E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3F; else goto cbL3G;
       cbL3F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwc_info" {
     sat_sbJwc_info:
         const sat_sbJwc_entry;
         const 1;
         const 16;
 },
 sat_sbJwb_entry() //  [R1]
         { []
         }
     {offset
       cbL3L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3M; else goto cbL3N;
       cbL3M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwb_info" {
     sat_sbJwb_info:
         const sat_sbJwb_entry;
         const 1;
         const 16;
 },
 sat_sbJwa_entry() //  [R1]
         { []
         }
     {offset
       cbL3S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL3T; else goto cbL3U;
       cbL3T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL3U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwa_info" {
     sat_sbJwa_info:
         const sat_sbJwa_entry;
         const 1;
         const 16;
 },
 sat_sbJw9_entry() //  [R1]
         { []
         }
     {offset
       cbL3Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL40; else goto cbL41;
       cbL40: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL41: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJw9_info" {
     sat_sbJw9_info:
         const sat_sbJw9_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fOrdIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbL43: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbL47; else goto cbL46;
       cbL47: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fOrdIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL46: // global
           I64[Hp - 256] = sat_sbJwg_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbJwf_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbJwe_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbJwd_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbJwc_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbJwb_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbJwa_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbJw9_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fOrdIdentity_info" {
     Data.Functor.Identity.$fOrdIdentity_info:
         const Data.Functor.Identity.$fOrdIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.441499727 UTC

[section ""data" . Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure" {
     Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure:
         const Data.Functor.Identity.$fIxIdentity_$cp1Ix_info;
 },
 sat_sbJwi_entry() //  [R1]
         { []
         }
     {offset
       cbL4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL50; else goto cbL51;
       cbL50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwi_info" {
     sat_sbJwi_info:
         const sat_sbJwi_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry() //  [R2]
         { []
         }
     {offset
       cbL52: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL56; else goto cbL55;
       cbL56: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL55: // global
           I64[Hp - 16] = sat_sbJwi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fOrdIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIxIdentity_$cp1Ix_info" {
     Data.Functor.Identity.$fIxIdentity_$cp1Ix_info:
         const Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.449093621 UTC

[section ""data" . Data.Functor.Identity.$fIxIdentity_closure" {
     Data.Functor.Identity.$fIxIdentity_closure:
         const Data.Functor.Identity.$fIxIdentity_info;
 },
 sat_sbJwq_entry() //  [R1]
         { []
         }
     {offset
       cbL5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5o; else goto cbL5p;
       cbL5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwq_info" {
     sat_sbJwq_info:
         const sat_sbJwq_entry;
         const 1;
         const 16;
 },
 sat_sbJwp_entry() //  [R1]
         { []
         }
     {offset
       cbL5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5v; else goto cbL5w;
       cbL5v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwp_info" {
     sat_sbJwp_info:
         const sat_sbJwp_entry;
         const 1;
         const 16;
 },
 sat_sbJwo_entry() //  [R1]
         { []
         }
     {offset
       cbL5B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5C; else goto cbL5D;
       cbL5C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwo_info" {
     sat_sbJwo_info:
         const sat_sbJwo_entry;
         const 1;
         const 16;
 },
 sat_sbJwn_entry() //  [R1]
         { []
         }
     {offset
       cbL5I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5J; else goto cbL5K;
       cbL5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwn_info" {
     sat_sbJwn_info:
         const sat_sbJwn_entry;
         const 1;
         const 16;
 },
 sat_sbJwm_entry() //  [R1]
         { []
         }
     {offset
       cbL5P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5Q; else goto cbL5R;
       cbL5Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwm_info" {
     sat_sbJwm_info:
         const sat_sbJwm_entry;
         const 1;
         const 16;
 },
 sat_sbJwl_entry() //  [R1]
         { []
         }
     {offset
       cbL5W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL5X; else goto cbL5Y;
       cbL5X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL5Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwl_info" {
     sat_sbJwl_info:
         const sat_sbJwl_entry;
         const 1;
         const 16;
 },
 sat_sbJwk_entry() //  [R1]
         { []
         }
     {offset
       cbL63: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL64; else goto cbL65;
       cbL64: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL65: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwk_info" {
     sat_sbJwk_info:
         const sat_sbJwk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIxIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbL67: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbL6b; else goto cbL6a;
       cbL6b: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIxIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL6a: // global
           I64[Hp - 224] = sat_sbJwq_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbJwp_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbJwo_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbJwn_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbJwm_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJwl_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJwk_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIxIdentity_info" {
     Data.Functor.Identity.$fIxIdentity_info:
         const Data.Functor.Identity.$fIxIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.465122779 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_$cp2Real_closure" {
     Data.Functor.Identity.$fRealIdentity_$cp2Real_closure:
         const Data.Functor.Identity.$fRealIdentity_$cp2Real_info;
 },
 sat_sbJws_entry() //  [R1]
         { []
         }
     {offset
       cbL6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL6Z; else goto cbL70;
       cbL6Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL70: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJws_info" {
     sat_sbJws_info:
         const sat_sbJws_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_$cp2Real_entry() //  [R2]
         { []
         }
     {offset
       cbL71: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL75; else goto cbL74;
       cbL75: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_$cp2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL74: // global
           I64[Hp - 16] = sat_sbJws_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fOrdIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_$cp2Real_info" {
     Data.Functor.Identity.$fRealIdentity_$cp2Real_info:
         const Data.Functor.Identity.$fRealIdentity_$cp2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.471868432 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_closure" {
     Data.Functor.Identity.$fRealIdentity_closure:
         const Data.Functor.Identity.$fRealIdentity_info;
 },
 sat_sbJww_entry() //  [R1]
         { []
         }
     {offset
       cbL7m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL7n; else goto cbL7o;
       cbL7n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL7o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJww_info" {
     sat_sbJww_info:
         const sat_sbJww_entry;
         const 1;
         const 16;
 },
 sat_sbJwv_entry() //  [R1]
         { []
         }
     {offset
       cbL7t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL7u; else goto cbL7v;
       cbL7u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL7v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealIdentity_$cp2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwv_info" {
     sat_sbJwv_info:
         const sat_sbJwv_entry;
         const 1;
         const 16;
 },
 sat_sbJwu_entry() //  [R1]
         { []
         }
     {offset
       cbL7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL7B; else goto cbL7C;
       cbL7B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealIdentity_$cp1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwu_info" {
     sat_sbJwu_info:
         const sat_sbJwu_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbL7E: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbL7I; else goto cbL7H;
       cbL7I: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL7H: // global
           I64[Hp - 96] = sat_sbJww_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbJwv_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbJwu_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_info" {
     Data.Functor.Identity.$fRealIdentity_info:
         const Data.Functor.Identity.$fRealIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.481751808 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure" {
     Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure:
         const Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info;
 },
 sat_sbJwy_entry() //  [R1]
         { []
         }
     {offset
       cbL8b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL8c; else goto cbL8d;
       cbL8c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL8d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwy_info" {
     sat_sbJwy_info:
         const sat_sbJwy_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry() //  [R2]
         { []
         }
     {offset
       cbL8e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL8i; else goto cbL8h;
       cbL8i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL8h: // global
           I64[Hp - 16] = sat_sbJwy_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info" {
     Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info:
         const Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.487253505 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure" {
     Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure:
         const Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info;
 },
 sat_sbJwA_entry() //  [R1]
         { []
         }
     {offset
       cbL8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL8A; else goto cbL8B;
       cbL8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL8B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwA_info" {
     sat_sbJwA_info:
         const sat_sbJwA_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       cbL8C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbL8G; else goto cbL8F;
       cbL8G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL8F: // global
           I64[Hp - 16] = sat_sbJwA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info" {
     Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info:
         const Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.495142067 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_closure" {
     Data.Functor.Identity.$fRealFracIdentity_closure:
         const Data.Functor.Identity.$fRealFracIdentity_info;
 },
 sat_sbJwI_entry() //  [R1]
         { []
         }
     {offset
       cbL8X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL8Y; else goto cbL8Z;
       cbL8Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL8Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.floor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwI_info" {
     sat_sbJwI_info:
         const sat_sbJwI_entry;
         const 1;
         const 16;
 },
 sat_sbJwH_entry() //  [R1]
         { []
         }
     {offset
       cbL94: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL95; else goto cbL96;
       cbL95: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL96: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.ceiling_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwH_info" {
     sat_sbJwH_info:
         const sat_sbJwH_entry;
         const 1;
         const 16;
 },
 sat_sbJwG_entry() //  [R1]
         { []
         }
     {offset
       cbL9b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL9c; else goto cbL9d;
       cbL9c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.round_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwG_info" {
     sat_sbJwG_info:
         const sat_sbJwG_entry;
         const 1;
         const 16;
 },
 sat_sbJwF_entry() //  [R1]
         { []
         }
     {offset
       cbL9i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL9j; else goto cbL9k;
       cbL9j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL9k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.truncate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwF_info" {
     sat_sbJwF_info:
         const sat_sbJwF_entry;
         const 1;
         const 16;
 },
 sat_sbJwE_entry() //  [R1]
         { []
         }
     {offset
       cbL9p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL9q; else goto cbL9r;
       cbL9q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL9r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.properFraction_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwE_info" {
     sat_sbJwE_info:
         const sat_sbJwE_entry;
         const 1;
         const 16;
 },
 sat_sbJwD_entry() //  [R1]
         { []
         }
     {offset
       cbL9w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL9x; else goto cbL9y;
       cbL9x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL9y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwD_info" {
     sat_sbJwD_info:
         const sat_sbJwD_entry;
         const 1;
         const 16;
 },
 sat_sbJwC_entry() //  [R1]
         { []
         }
     {offset
       cbL9D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbL9E; else goto cbL9F;
       cbL9E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbL9F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwC_info" {
     sat_sbJwC_info:
         const sat_sbJwC_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbL9H: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbL9L; else goto cbL9K;
       cbL9L: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbL9K: // global
           I64[Hp - 224] = sat_sbJwI_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbJwH_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbJwG_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbJwF_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbJwE_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJwD_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJwC_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_info" {
     Data.Functor.Identity.$fRealFracIdentity_info:
         const Data.Functor.Identity.$fRealFracIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.510334 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info;
 },
 sat_sbJwK_entry() //  [R1]
         { []
         }
     {offset
       cbLay: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLaz; else goto cbLaA;
       cbLaz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLaA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwK_info" {
     sat_sbJwK_info:
         const sat_sbJwK_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       cbLaB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLaF; else goto cbLaE;
       cbLaF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLaE: // global
           I64[Hp - 16] = sat_sbJwK_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.521754411 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_info;
 },
 sat_sbJx1_entry() //  [R1]
         { []
         }
     {offset
       cbLaW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLaX; else goto cbLaY;
       cbLaX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLaY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx1_info" {
     sat_sbJx1_info:
         const sat_sbJx1_entry;
         const 1;
         const 16;
 },
 sat_sbJx0_entry() //  [R1]
         { []
         }
     {offset
       cbLb3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLb4; else goto cbLb5;
       cbLb4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLb5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isIEEE_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx0_info" {
     sat_sbJx0_info:
         const sat_sbJx0_entry;
         const 1;
         const 16;
 },
 sat_sbJwZ_entry() //  [R1]
         { []
         }
     {offset
       cbLba: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbb; else goto cbLbc;
       cbLbb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwZ_info" {
     sat_sbJwZ_info:
         const sat_sbJwZ_entry;
         const 1;
         const 16;
 },
 sat_sbJwY_entry() //  [R1]
         { []
         }
     {offset
       cbLbh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbi; else goto cbLbj;
       cbLbi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isDenormalized_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwY_info" {
     sat_sbJwY_info:
         const sat_sbJwY_entry;
         const 1;
         const 16;
 },
 sat_sbJwX_entry() //  [R1]
         { []
         }
     {offset
       cbLbo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbp; else goto cbLbq;
       cbLbp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwX_info" {
     sat_sbJwX_info:
         const sat_sbJwX_entry;
         const 1;
         const 16;
 },
 sat_sbJwW_entry() //  [R1]
         { []
         }
     {offset
       cbLbv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbw; else goto cbLbx;
       cbLbw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwW_info" {
     sat_sbJwW_info:
         const sat_sbJwW_entry;
         const 1;
         const 16;
 },
 sat_sbJwV_entry() //  [R1]
         { []
         }
     {offset
       cbLbC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbD; else goto cbLbE;
       cbLbD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.scaleFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwV_info" {
     sat_sbJwV_info:
         const sat_sbJwV_entry;
         const 1;
         const 16;
 },
 sat_sbJwU_entry() //  [R1]
         { []
         }
     {offset
       cbLbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbK; else goto cbLbL;
       cbLbK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.significand_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwU_info" {
     sat_sbJwU_info:
         const sat_sbJwU_entry;
         const 1;
         const 16;
 },
 sat_sbJwT_entry() //  [R1]
         { []
         }
     {offset
       cbLbQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbR; else goto cbLbS;
       cbLbR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwT_info" {
     sat_sbJwT_info:
         const sat_sbJwT_entry;
         const 1;
         const 16;
 },
 sat_sbJwS_entry() //  [R1]
         { []
         }
     {offset
       cbLbX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLbY; else goto cbLbZ;
       cbLbY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLbZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.encodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwS_info" {
     sat_sbJwS_info:
         const sat_sbJwS_entry;
         const 1;
         const 16;
 },
 sat_sbJwR_entry() //  [R1]
         { []
         }
     {offset
       cbLc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLc5; else goto cbLc6;
       cbLc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLc6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwR_info" {
     sat_sbJwR_info:
         const sat_sbJwR_entry;
         const 1;
         const 16;
 },
 sat_sbJwQ_entry() //  [R1]
         { []
         }
     {offset
       cbLcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLcc; else goto cbLcd;
       cbLcc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLcd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwQ_info" {
     sat_sbJwQ_info:
         const sat_sbJwQ_entry;
         const 1;
         const 16;
 },
 sat_sbJwP_entry() //  [R1]
         { []
         }
     {offset
       cbLci: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLcj; else goto cbLck;
       cbLcj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLck: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwP_info" {
     sat_sbJwP_info:
         const sat_sbJwP_entry;
         const 1;
         const 16;
 },
 sat_sbJwO_entry() //  [R1]
         { []
         }
     {offset
       cbLcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLcq; else goto cbLcr;
       cbLcq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLcr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRadix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwO_info" {
     sat_sbJwO_info:
         const sat_sbJwO_entry;
         const 1;
         const 16;
 },
 sat_sbJwN_entry() //  [R1]
         { []
         }
     {offset
       cbLcw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLcx; else goto cbLcy;
       cbLcx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLcy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwN_info" {
     sat_sbJwN_info:
         const sat_sbJwN_entry;
         const 1;
         const 16;
 },
 sat_sbJwM_entry() //  [R1]
         { []
         }
     {offset
       cbLcD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLcE; else goto cbLcF;
       cbLcE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLcF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJwM_info" {
     sat_sbJwM_info:
         const sat_sbJwM_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLcH: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cbLcL; else goto cbLcK;
       cbLcL: // global
           HpAlloc = 520;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLcK: // global
           I64[Hp - 512] = sat_sbJx1_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_sbJx0_info;
           P64[Hp - 472] = R2;
           I64[Hp - 464] = sat_sbJwZ_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_sbJwY_info;
           P64[Hp - 424] = R2;
           I64[Hp - 416] = sat_sbJwX_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_sbJwW_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_sbJwV_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_sbJwU_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_sbJwT_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_sbJwS_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sbJwR_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_sbJwQ_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sbJwP_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbJwO_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbJwN_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbJwM_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = Hp - 152;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 200;
           P64[Hp - 96] = Hp - 224;
           P64[Hp - 88] = Hp - 248;
           P64[Hp - 80] = Hp - 272;
           P64[Hp - 72] = Hp - 296;
           P64[Hp - 64] = Hp - 320;
           P64[Hp - 56] = Hp - 344;
           P64[Hp - 48] = Hp - 368;
           P64[Hp - 40] = Hp - 392;
           P64[Hp - 32] = Hp - 416;
           P64[Hp - 24] = Hp - 440;
           P64[Hp - 16] = Hp - 464;
           P64[Hp - 8] = Hp - 488;
           P64[Hp] = Hp - 512;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_info" {
     Data.Functor.Identity.$fRealFloatIdentity_info:
         const Data.Functor.Identity.$fRealFloatIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.555115451 UTC

[section ""data" . Data.Functor.Identity.$fEnumIdentity_closure" {
     Data.Functor.Identity.$fEnumIdentity_closure:
         const Data.Functor.Identity.$fEnumIdentity_info;
 },
 sat_sbJxa_entry() //  [R1]
         { []
         }
     {offset
       cbLeh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLei; else goto cbLej;
       cbLei: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxa_info" {
     sat_sbJxa_info:
         const sat_sbJxa_entry;
         const 1;
         const 16;
 },
 sat_sbJx9_entry() //  [R1]
         { []
         }
     {offset
       cbLeo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLep; else goto cbLeq;
       cbLep: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLeq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx9_info" {
     sat_sbJx9_info:
         const sat_sbJx9_entry;
         const 1;
         const 16;
 },
 sat_sbJx8_entry() //  [R1]
         { []
         }
     {offset
       cbLev: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLew; else goto cbLex;
       cbLew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLex: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx8_info" {
     sat_sbJx8_info:
         const sat_sbJx8_entry;
         const 1;
         const 16;
 },
 sat_sbJx7_entry() //  [R1]
         { []
         }
     {offset
       cbLeC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLeD; else goto cbLeE;
       cbLeD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLeE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx7_info" {
     sat_sbJx7_info:
         const sat_sbJx7_entry;
         const 1;
         const 16;
 },
 sat_sbJx6_entry() //  [R1]
         { []
         }
     {offset
       cbLeJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLeK; else goto cbLeL;
       cbLeK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLeL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx6_info" {
     sat_sbJx6_info:
         const sat_sbJx6_entry;
         const 1;
         const 16;
 },
 sat_sbJx5_entry() //  [R1]
         { []
         }
     {offset
       cbLeQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLeR; else goto cbLeS;
       cbLeR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLeS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx5_info" {
     sat_sbJx5_info:
         const sat_sbJx5_entry;
         const 1;
         const 16;
 },
 sat_sbJx4_entry() //  [R1]
         { []
         }
     {offset
       cbLeX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLeY; else goto cbLeZ;
       cbLeY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLeZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx4_info" {
     sat_sbJx4_info:
         const sat_sbJx4_entry;
         const 1;
         const 16;
 },
 sat_sbJx3_entry() //  [R1]
         { []
         }
     {offset
       cbLf4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLf5; else goto cbLf6;
       cbLf5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLf6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJx3_info" {
     sat_sbJx3_info:
         const sat_sbJx3_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fEnumIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLf8: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbLfc; else goto cbLfb;
       cbLfc: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fEnumIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLfb: // global
           I64[Hp - 256] = sat_sbJxa_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbJx9_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbJx8_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbJx7_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbJx6_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbJx5_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbJx4_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbJx3_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fEnumIdentity_info" {
     Data.Functor.Identity.$fEnumIdentity_info:
         const Data.Functor.Identity.$fEnumIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.572888835 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure" {
     Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure:
         const Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info;
 },
 sat_sbJxc_entry() //  [R1]
         { []
         }
     {offset
       cbLg4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLg5; else goto cbLg6;
       cbLg5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxc_info" {
     sat_sbJxc_info:
         const sat_sbJxc_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry() //  [R2]
         { []
         }
     {offset
       cbLg7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLgb; else goto cbLga;
       cbLgb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLga: // global
           I64[Hp - 16] = sat_sbJxc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEnumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info" {
     Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info:
         const Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.581609033 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_closure" {
     Data.Functor.Identity.$fIntegralIdentity_closure:
         const Data.Functor.Identity.$fIntegralIdentity_info;
 },
 sat_sbJxm_entry() //  [R1]
         { []
         }
     {offset
       cbLgs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLgt; else goto cbLgu;
       cbLgt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLgu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxm_info" {
     sat_sbJxm_info:
         const sat_sbJxm_entry;
         const 1;
         const 16;
 },
 sat_sbJxl_entry() //  [R1]
         { []
         }
     {offset
       cbLgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLgA; else goto cbLgB;
       cbLgA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLgB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.divMod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxl_info" {
     sat_sbJxl_info:
         const sat_sbJxl_entry;
         const 1;
         const 16;
 },
 sat_sbJxk_entry() //  [R1]
         { []
         }
     {offset
       cbLgG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLgH; else goto cbLgI;
       cbLgH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLgI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quotRem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxk_info" {
     sat_sbJxk_info:
         const sat_sbJxk_entry;
         const 1;
         const 16;
 },
 sat_sbJxj_entry() //  [R1]
         { []
         }
     {offset
       cbLgN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLgO; else goto cbLgP;
       cbLgO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLgP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.mod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxj_info" {
     sat_sbJxj_info:
         const sat_sbJxj_entry;
         const 1;
         const 16;
 },
 sat_sbJxi_entry() //  [R1]
         { []
         }
     {offset
       cbLgU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLgV; else goto cbLgW;
       cbLgV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLgW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.div_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxi_info" {
     sat_sbJxi_info:
         const sat_sbJxi_entry;
         const 1;
         const 16;
 },
 sat_sbJxh_entry() //  [R1]
         { []
         }
     {offset
       cbLh1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLh2; else goto cbLh3;
       cbLh2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLh3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.rem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxh_info" {
     sat_sbJxh_info:
         const sat_sbJxh_entry;
         const 1;
         const 16;
 },
 sat_sbJxg_entry() //  [R1]
         { []
         }
     {offset
       cbLh8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLh9; else goto cbLha;
       cbLh9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quot_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxg_info" {
     sat_sbJxg_info:
         const sat_sbJxg_entry;
         const 1;
         const 16;
 },
 sat_sbJxf_entry() //  [R1]
         { []
         }
     {offset
       cbLhf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLhg; else goto cbLhh;
       cbLhg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxf_info" {
     sat_sbJxf_info:
         const sat_sbJxf_entry;
         const 1;
         const 16;
 },
 sat_sbJxe_entry() //  [R1]
         { []
         }
     {offset
       cbLhm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLhn; else goto cbLho;
       cbLhn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLho: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxe_info" {
     sat_sbJxe_info:
         const sat_sbJxe_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLhq: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto cbLhu; else goto cbLht;
       cbLhu: // global
           HpAlloc = 296;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLht: // global
           I64[Hp - 288] = sat_sbJxm_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_sbJxl_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sbJxk_info;
           P64[Hp - 224] = R2;
           I64[Hp - 216] = sat_sbJxj_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sbJxi_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sbJxh_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sbJxg_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbJxf_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sbJxe_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_info" {
     Data.Functor.Identity.$fIntegralIdentity_info:
         const Data.Functor.Identity.$fIntegralIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.602176927 UTC

[section ""data" . Data.Functor.Identity.$fBoundedIdentity_closure" {
     Data.Functor.Identity.$fBoundedIdentity_closure:
         const Data.Functor.Identity.$fBoundedIdentity_info;
 },
 sat_sbJxp_entry() //  [R1]
         { []
         }
     {offset
       cbLir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLis; else goto cbLit;
       cbLis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLit: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxp_info" {
     sat_sbJxp_info:
         const sat_sbJxp_entry;
         const 1;
         const 16;
 },
 sat_sbJxo_entry() //  [R1]
         { []
         }
     {offset
       cbLiy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLiz; else goto cbLiA;
       cbLiz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLiA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxo_info" {
     sat_sbJxo_info:
         const sat_sbJxo_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBoundedIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLiC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbLiG; else goto cbLiF;
       cbLiG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBoundedIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLiF: // global
           I64[Hp - 64] = sat_sbJxp_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbJxo_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBoundedIdentity_info" {
     Data.Functor.Identity.$fBoundedIdentity_info:
         const Data.Functor.Identity.$fBoundedIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.609944264 UTC

[section ""data" . Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure" {
     Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure:
         const Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info;
 },
 sat_sbJxr_entry() //  [R1]
         { []
         }
     {offset
       cbLj4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLj5; else goto cbLj6;
       cbLj5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLj6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxr_info" {
     sat_sbJxr_info:
         const sat_sbJxr_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry() //  [R2]
         { []
         }
     {offset
       cbLj7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLjb; else goto cbLja;
       cbLjb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLja: // global
           I64[Hp - 16] = sat_sbJxr_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEqIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info" {
     Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info:
         const Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.623397657 UTC

[section ""data" . Data.Functor.Identity.$fBitsIdentity_closure" {
     Data.Functor.Identity.$fBitsIdentity_closure:
         const Data.Functor.Identity.$fBitsIdentity_info;
 },
 sat_sbJxP_entry() //  [R1]
         { []
         }
     {offset
       cbLjs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLjt; else goto cbLju;
       cbLjt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.popCount_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxP_info" {
     sat_sbJxP_info:
         const sat_sbJxP_entry;
         const 1;
         const 16;
 },
 sat_sbJxO_entry() //  [R1]
         { []
         }
     {offset
       cbLjz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLjA; else goto cbLjB;
       cbLjA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLjB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxO_info" {
     sat_sbJxO_info:
         const sat_sbJxO_entry;
         const 1;
         const 16;
 },
 sat_sbJxN_entry() //  [R1]
         { []
         }
     {offset
       cbLjG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLjH; else goto cbLjI;
       cbLjH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLjI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxN_info" {
     sat_sbJxN_info:
         const sat_sbJxN_entry;
         const 1;
         const 16;
 },
 sat_sbJxM_entry() //  [R1]
         { []
         }
     {offset
       cbLjN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLjO; else goto cbLjP;
       cbLjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLjP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxM_info" {
     sat_sbJxM_info:
         const sat_sbJxM_entry;
         const 1;
         const 16;
 },
 sat_sbJxL_entry() //  [R1]
         { []
         }
     {offset
       cbLjU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLjV; else goto cbLjW;
       cbLjV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLjW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxL_info" {
     sat_sbJxL_info:
         const sat_sbJxL_entry;
         const 1;
         const 16;
 },
 sat_sbJxK_entry() //  [R1]
         { []
         }
     {offset
       cbLk1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLk2; else goto cbLk3;
       cbLk2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLk3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxK_info" {
     sat_sbJxK_info:
         const sat_sbJxK_entry;
         const 1;
         const 16;
 },
 sat_sbJxJ_entry() //  [R1]
         { []
         }
     {offset
       cbLk8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLk9; else goto cbLka;
       cbLk9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxJ_info" {
     sat_sbJxJ_info:
         const sat_sbJxJ_entry;
         const 1;
         const 16;
 },
 sat_sbJxI_entry() //  [R1]
         { []
         }
     {offset
       cbLkf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkg; else goto cbLkh;
       cbLkg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxI_info" {
     sat_sbJxI_info:
         const sat_sbJxI_entry;
         const 1;
         const 16;
 },
 sat_sbJxH_entry() //  [R1]
         { []
         }
     {offset
       cbLkm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkn; else goto cbLko;
       cbLkn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLko: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxH_info" {
     sat_sbJxH_info:
         const sat_sbJxH_entry;
         const 1;
         const 16;
 },
 sat_sbJxG_entry() //  [R1]
         { []
         }
     {offset
       cbLkt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLku; else goto cbLkv;
       cbLku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxG_info" {
     sat_sbJxG_info:
         const sat_sbJxG_entry;
         const 1;
         const 16;
 },
 sat_sbJxF_entry() //  [R1]
         { []
         }
     {offset
       cbLkA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkB; else goto cbLkC;
       cbLkB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.testBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxF_info" {
     sat_sbJxF_info:
         const sat_sbJxF_entry;
         const 1;
         const 16;
 },
 sat_sbJxE_entry() //  [R1]
         { []
         }
     {offset
       cbLkH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkI; else goto cbLkJ;
       cbLkI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complementBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxE_info" {
     sat_sbJxE_info:
         const sat_sbJxE_entry;
         const 1;
         const 16;
 },
 sat_sbJxD_entry() //  [R1]
         { []
         }
     {offset
       cbLkO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkP; else goto cbLkQ;
       cbLkP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.clearBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxD_info" {
     sat_sbJxD_info:
         const sat_sbJxD_entry;
         const 1;
         const 16;
 },
 sat_sbJxC_entry() //  [R1]
         { []
         }
     {offset
       cbLkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLkW; else goto cbLkX;
       cbLkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLkX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.setBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxC_info" {
     sat_sbJxC_info:
         const sat_sbJxC_entry;
         const 1;
         const 16;
 },
 sat_sbJxB_entry() //  [R1]
         { []
         }
     {offset
       cbLl2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLl3; else goto cbLl4;
       cbLl3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLl4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxB_info" {
     sat_sbJxB_info:
         const sat_sbJxB_entry;
         const 1;
         const 16;
 },
 sat_sbJxA_entry() //  [R1]
         { []
         }
     {offset
       cbLl9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLla; else goto cbLlb;
       cbLla: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.zeroBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxA_info" {
     sat_sbJxA_info:
         const sat_sbJxA_entry;
         const 1;
         const 16;
 },
 sat_sbJxz_entry() //  [R1]
         { []
         }
     {offset
       cbLlg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlh; else goto cbLli;
       cbLlh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLli: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxz_info" {
     sat_sbJxz_info:
         const sat_sbJxz_entry;
         const 1;
         const 16;
 },
 sat_sbJxy_entry() //  [R1]
         { []
         }
     {offset
       cbLln: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlo; else goto cbLlp;
       cbLlo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shift_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxy_info" {
     sat_sbJxy_info:
         const sat_sbJxy_entry;
         const 1;
         const 16;
 },
 sat_sbJxx_entry() //  [R1]
         { []
         }
     {offset
       cbLlu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlv; else goto cbLlw;
       cbLlv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complement_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxx_info" {
     sat_sbJxx_info:
         const sat_sbJxx_entry;
         const 1;
         const 16;
 },
 sat_sbJxw_entry() //  [R1]
         { []
         }
     {offset
       cbLlB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlC; else goto cbLlD;
       cbLlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.xor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxw_info" {
     sat_sbJxw_info:
         const sat_sbJxw_entry;
         const 1;
         const 16;
 },
 sat_sbJxv_entry() //  [R1]
         { []
         }
     {offset
       cbLlI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlJ; else goto cbLlK;
       cbLlJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..|._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxv_info" {
     sat_sbJxv_info:
         const sat_sbJxv_entry;
         const 1;
         const 16;
 },
 sat_sbJxu_entry() //  [R1]
         { []
         }
     {offset
       cbLlP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlQ; else goto cbLlR;
       cbLlQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..&._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxu_info" {
     sat_sbJxu_info:
         const sat_sbJxu_entry;
         const 1;
         const 16;
 },
 sat_sbJxt_entry() //  [R1]
         { []
         }
     {offset
       cbLlW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLlX; else goto cbLlY;
       cbLlX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLlY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxt_info" {
     sat_sbJxt_info:
         const sat_sbJxt_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBitsIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLm0: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto cbLm4; else goto cbLm3;
       cbLm4: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBitsIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLm3: // global
           I64[Hp - 736] = sat_sbJxP_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_sbJxO_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_sbJxN_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_sbJxM_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_sbJxL_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_sbJxK_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_sbJxJ_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_sbJxI_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_sbJxH_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sbJxG_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_sbJxF_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sbJxE_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_sbJxD_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sbJxC_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_sbJxB_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sbJxA_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_sbJxz_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sbJxy_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sbJxx_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sbJxw_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sbJxv_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbJxu_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbJxt_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBitsIdentity_info" {
     Data.Functor.Identity.$fBitsIdentity_info:
         const Data.Functor.Identity.$fBitsIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.666629507 UTC

[section ""data" . Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure" {
     Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure:
         const Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info;
 },
 sat_sbJxR_entry() //  [R1]
         { []
         }
     {offset
       cbLo9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLoa; else goto cbLob;
       cbLoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLob: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxR_info" {
     sat_sbJxR_info:
         const sat_sbJxR_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       cbLoc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLog; else goto cbLof;
       cbLog: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLof: // global
           I64[Hp - 16] = sat_sbJxR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fBitsIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info" {
     Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info:
         const Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.673162616 UTC

[section ""data" . Data.Functor.Identity.$fFiniteBitsIdentity_closure" {
     Data.Functor.Identity.$fFiniteBitsIdentity_closure:
         const Data.Functor.Identity.$fFiniteBitsIdentity_info;
 },
 sat_sbJxW_entry() //  [R1]
         { []
         }
     {offset
       cbLox: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLoy; else goto cbLoz;
       cbLoy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLoz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countTrailingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxW_info" {
     sat_sbJxW_info:
         const sat_sbJxW_entry;
         const 1;
         const 16;
 },
 sat_sbJxV_entry() //  [R1]
         { []
         }
     {offset
       cbLoE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLoF; else goto cbLoG;
       cbLoF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLoG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countLeadingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxV_info" {
     sat_sbJxV_info:
         const sat_sbJxV_entry;
         const 1;
         const 16;
 },
 sat_sbJxU_entry() //  [R1]
         { []
         }
     {offset
       cbLoL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLoM; else goto cbLoN;
       cbLoM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLoN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxU_info" {
     sat_sbJxU_info:
         const sat_sbJxU_entry;
         const 1;
         const 16;
 },
 sat_sbJxT_entry() //  [R1]
         { []
         }
     {offset
       cbLoS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLoT; else goto cbLoU;
       cbLoT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLoU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbJxT_info" {
     sat_sbJxT_info:
         const sat_sbJxT_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFiniteBitsIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLoW: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbLp0; else goto cbLoZ;
       cbLp0: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFiniteBitsIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLoZ: // global
           I64[Hp - 128] = sat_sbJxW_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbJxV_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbJxU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbJxT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFiniteBitsIdentity_info" {
     Data.Functor.Identity.$fFiniteBitsIdentity_info:
         const Data.Functor.Identity.$fFiniteBitsIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.684037796 UTC

[section ""data" . Data.Functor.Identity.runIdentity_closure" {
     Data.Functor.Identity.runIdentity_closure:
         const Data.Functor.Identity.runIdentity_info;
 },
 Data.Functor.Identity.runIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLpu: // global
           R2 = R2;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.runIdentity_info" {
     Data.Functor.Identity.runIdentity_info:
         const Data.Functor.Identity.runIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.687671883 UTC

[section ""data" . Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure" {
     Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure:
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info;
 },
 Data.Functor.Identity.$fMonadFixIdentity_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbLpG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbLpK; else goto cbLpJ;
       cbLpK: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLpJ: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbLpF::P64 = Hp - 24;
           P64[Hp] = _cbLpF::P64;
           R1 = _cbLpF::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info" {
     Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info:
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.691420436 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_$c>>=_closure" {
     Data.Functor.Identity.$fMonadIdentity_$c>>=_closure:
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_info;
 },
 Data.Functor.Identity.$fMonadIdentity_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cbLpT: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadIdentity_$c>>=_info" {
     Data.Functor.Identity.$fMonadIdentity_$c>>=_info:
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.695089274 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_$c>>_closure" {
     Data.Functor.Identity.$fMonadIdentity_$c>>_closure:
         const Data.Functor.Identity.$fMonadIdentity_$c>>_info;
 },
 Data.Functor.Identity.$fMonadIdentity_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       cbLq4: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadIdentity_$c>>_info" {
     Data.Functor.Identity.$fMonadIdentity_$c>>_info:
         const Data.Functor.Identity.$fMonadIdentity_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.698429725 UTC

[section ""data" . lvl_rbJt6_closure" {
     lvl_rbJt6_closure:
         const lvl_rbJt6_info;
         const 0;
 },
 lvl_rbJt6_entry() //  [R2]
         { []
         }
     {offset
       cbLqf: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rbJt6_info" {
     lvl_rbJt6_info:
         const lvl_rbJt6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SbJA1_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.701429387 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_closure" {
     Data.Functor.Identity.$fMonadIdentity_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Functor.Identity.$fApplicativeIdentity_closure+1;
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_closure+2;
         const Data.Functor.Identity.$fMonadIdentity_$c>>_closure+2;
         const Data.Functor.Identity.$fApplicativeIdentity3_closure+1;
         const lvl_rbJt6_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.703283327 UTC

[section ""data" . Data.Functor.Identity.$fMonadFixIdentity_closure" {
     Data.Functor.Identity.$fMonadFixIdentity_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Functor.Identity.$fMonadIdentity_closure+1;
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.705322551 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity5_closure" {
     Data.Functor.Identity.$fFoldableIdentity5_closure:
         const Data.Functor.Identity.$fFoldableIdentity5_info;
 },
 Data.Functor.Identity.$fFoldableIdentity5_entry() //  [R3]
         { []
         }
     {offset
       cbLqs: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity5_info" {
     Data.Functor.Identity.$fFoldableIdentity5_info:
         const Data.Functor.Identity.$fFoldableIdentity5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.709798126 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity3_closure" {
     Data.Functor.Identity.$fFoldableIdentity3_closure:
         const Data.Functor.Identity.$fFoldableIdentity3_info;
 },
 Data.Functor.Identity.$fFoldableIdentity3_entry() //  [R3]
         { []
         }
     {offset
       cbLqD: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity3_info" {
     Data.Functor.Identity.$fFoldableIdentity3_info:
         const Data.Functor.Identity.$fFoldableIdentity3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.713048502 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity1_closure" {
     Data.Functor.Identity.$fFoldableIdentity1_closure:
         const Data.Functor.Identity.$fFoldableIdentity1_info;
 },
 Data.Functor.Identity.$fFoldableIdentity1_entry() //  [R3]
         { []
         }
     {offset
       cbLqO: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity1_info" {
     Data.Functor.Identity.$fFoldableIdentity1_info:
         const Data.Functor.Identity.$fFoldableIdentity1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.716460242 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity8_closure" {
     Data.Functor.Identity.$fFoldableIdentity8_closure:
         const Data.Functor.Identity.$fFoldableIdentity8_info;
 },
 Data.Functor.Identity.$fFoldableIdentity8_entry() //  [R3]
         { []
         }
     {offset
       cbLqZ: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity8_info" {
     Data.Functor.Identity.$fFoldableIdentity8_info:
         const Data.Functor.Identity.$fFoldableIdentity8_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.719689659 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_closure" {
     Data.Functor.Identity.$fFoldableIdentity_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Functor.Identity.$fFoldableIdentity8_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity7_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure+3;
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure+3;
         const Data.Functor.Identity.$fFoldableIdentity6_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity6_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity5_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity5_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity3_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity3_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity1_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.72174192 UTC

[section ""cstring" . Data.Functor.Identity.$trModule4_bytes" {
     Data.Functor.Identity.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.723467897 UTC

[section ""data" . Data.Functor.Identity.$trModule3_closure" {
     Data.Functor.Identity.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.725216511 UTC

[section ""cstring" . Data.Functor.Identity.$trModule2_bytes" {
     Data.Functor.Identity.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.727400664 UTC

[section ""data" . Data.Functor.Identity.$trModule1_closure" {
     Data.Functor.Identity.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.729083937 UTC

[section ""data" . Data.Functor.Identity.$trModule_closure" {
     Data.Functor.Identity.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Identity.$trModule3_closure+1;
         const Data.Functor.Identity.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.730856794 UTC

[section ""data" . $krep_rbJt7_closure" {
     $krep_rbJt7_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.732592064 UTC

[section ""data" . Data.Functor.Identity.$tcIdentity1_closure" {
     Data.Functor.Identity.$tcIdentity1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$fReadIdentity6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.734928194 UTC

[section ""data" . Data.Functor.Identity.$tcIdentity_closure" {
     Data.Functor.Identity.$tcIdentity_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Identity.$trModule_closure+1;
         const Data.Functor.Identity.$tcIdentity1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3410104521590905987;
         const 16392070908630191652;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.736853242 UTC

[section ""data" . $krep1_rbJt8_closure" {
     $krep1_rbJt8_closure:
         const :_con_info;
         const $krep_rbJt7_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.738600274 UTC

[section ""data" . $krep2_rbJt9_closure" {
     $krep2_rbJt9_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Identity.$tcIdentity_closure+1;
         const $krep1_rbJt8_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.740317773 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity1_closure" {
     Data.Functor.Identity.$tc'Identity1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbJt7_closure+2;
         const $krep2_rbJt9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.742574859 UTC

[section ""cstring" . Data.Functor.Identity.$tc'Identity3_bytes" {
     Data.Functor.Identity.$tc'Identity3_bytes:
         I8[] [39,73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.744350257 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity2_closure" {
     Data.Functor.Identity.$tc'Identity2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$tc'Identity3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.746127676 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity_closure" {
     Data.Functor.Identity.$tc'Identity_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Identity.$trModule_closure+1;
         const Data.Functor.Identity.$tc'Identity2_closure+1;
         const Data.Functor.Identity.$tc'Identity1_closure+4;
         const 11920310844698764515;
         const 3935129235072617509;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:36.748040167 UTC

[section ""relreadonly" . SbJA1_srt" {
     SbJA1_srt:
         const Data.Functor.Identity.$fReadIdentity5_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Identity.$w$creadsPrec_closure;
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure;
         const Data.Functor.Identity.$fReadIdentity3_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Identity.$fReadIdentity_$creadList_closure;
         const Data.Functor.Identity.$w$creadListPrec_closure;
         const Data.Functor.Identity.$fReadIdentity_closure;
         const Data.Functor.Identity.$fShowIdentity1_closure;
         const Data.Functor.Identity.$w$cshowsPrec_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshow_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshowList_closure;
         const Data.Functor.Identity.$fShowIdentity_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.768938004 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:38.770078173 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity4_closure" {
     Data.Functor.Identity.$fReadIdentity4_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.771840922 UTC

[section ""cstring" . Data.Functor.Identity.$fReadIdentity6_bytes" {
     Data.Functor.Identity.$fReadIdentity6_bytes:
         I8[] [73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.774281187 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity5_closure" {
     Data.Functor.Identity.$fReadIdentity5_closure:
         const Data.Functor.Identity.$fReadIdentity5_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity5_entry() //  [R1]
         { []
         }
     {offset
       cbLwp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLwq; else goto cbLwr;
       cbLwq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLwr: // global
           (_cbLwm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbLwm::I64 == 0) goto cbLwo; else goto cbLwn;
       cbLwo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbLwn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbLwm::I64;
           R2 = Data.Functor.Identity.$fReadIdentity6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity5_info" {
     Data.Functor.Identity.$fReadIdentity5_info:
         const Data.Functor.Identity.$fReadIdentity5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.783036079 UTC

[section ""data" . Data.Functor.Identity.$w$creadsPrec_closure" {
     Data.Functor.Identity.$w$creadsPrec_closure:
         const Data.Functor.Identity.$w$creadsPrec_info;
         const 0;
 },
 go1_sbLrz_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLxc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbLxd; else goto cbLxe;
       cbLxd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLxe: // global
           I64[Sp - 24] = block_cbLx5_info;
           _sbLrz::P64 = R1;
           _sbLry::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sbLry::P64;
           P64[Sp - 8] = _sbLrz::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubLxw; else goto cbLx6;
       ubLxw: // global
           call _cbLx5(R1) args: 0, res: 0, upd: 0;
       cbLx6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_sbLrz_info" {
     go1_sbLrz_info:
         const go1_sbLrz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbLx5() //  [R1]
         { []
         }
     {offset
       cbLx5: // global
           if (R1 & 7 == 1) goto cbLx9; else goto cbLxa;
       cbLx9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbLxa: // global
           I64[Sp] = block_cbLxk_info;
           _sbLrD::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _sbLrD::P64;
           if (R1 & 7 != 0) goto ubLxv; else goto cbLxl;
       ubLxv: // global
           call _cbLxk(R1) args: 0, res: 0, upd: 0;
       cbLxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLx5_info" {
     block_cbLx5_info:
         const _cbLx5;
         const 2;
         const 30;
 },
 _cbLxk() //  [R1]
         { []
         }
     {offset
       cbLxk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbLxu; else goto cbLxt;
       cbLxu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbLxt: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLxk_info" {
     block_cbLxk_info:
         const _cbLxk;
         const 2;
         const 30;
 },
 go_sbLrp_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLxB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbLxC; else goto ubLxW;
       cbLxC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ubLxW: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cbLwG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sbLrp_info" {
     go_sbLrp_info:
         const go_sbLrp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbLym_srt;
 },
 _cbLwG() //  []
         { []
         }
     {offset
       cbLwG: // global
           _sbLrm::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cbLwJ_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbLrm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubLxY; else goto cbLwK;
       ubLxY: // global
           call _cbLwJ(R1) args: 0, res: 0, upd: 0;
       cbLwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbLwJ() //  [R1]
         { []
         }
     {offset
       cbLwJ: // global
           if (R1 & 7 == 1) goto cbLxy; else goto cbLxz;
       cbLxy: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbLxz: // global
           I64[Sp - 8] = block_cbLwP_info;
           _sbLrt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbLrt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubLxZ; else goto cbLwQ;
       ubLxZ: // global
           call _cbLwP(R1) args: 0, res: 0, upd: 0;
       cbLwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLwJ_info" {
     block_cbLwJ_info:
         const _cbLwJ;
         const 2;
         const 4294967326;
         const SbLym_srt;
 },
 _cbLwP() //  [R1]
         { []
         }
     {offset
       cbLwP: // global
           I64[Sp - 8] = block_cbLwU_info;
           R3 = Data.Functor.Identity.$fReadIdentity5_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLwP_info" {
     block_cbLwP_info:
         const _cbLwP;
         const 3;
         const 4294967326;
         const SbLym_srt;
 },
 _cbLwU() //  [R1]
         { []
         }
     {offset
       cbLwU: // global
           _sbLrt::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cbLxL; else goto cbLxN;
       cbLxL: // global
           P64[Sp + 32] = _sbLrt::P64;
           Sp = Sp + 24;
           call _cbLwG() args: 0, res: 0, upd: 0;
       cbLxN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbLxQ; else goto cbLxP;
       cbLxQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbLxP: // global
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = _sbLrt::P64;
           I64[Hp - 8] = go1_sbLrz_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 24] = block_cbLxM_info;
           R2 = P64[Sp + 32];
           I64[Sp] = stg_ap_pp_info;
           _sbLrw::P64 = P64[Sp + 8];
           P64[Sp + 8] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp + 16] = _sbLrw::P64;
           P64[Sp + 32] = Hp - 7;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLwU_info" {
     block_cbLwU_info:
         const _cbLwU;
         const 4;
         const 4294967326;
         const SbLym_srt;
 },
 _cbLxM() //  [R1]
         { []
         }
     {offset
       cbLxM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sbLrz_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLxM_info" {
     block_cbLxM_info:
         const _cbLxM;
         const 1;
         const 30;
 },
 sat_sbLrO_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLy9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLya; else goto cbLyb;
       cbLya: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLyb: // global
           I64[Sp - 16] = block_cbLy7_info;
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLrO_info" {
     sat_sbLrO_info:
         const sat_sbLrO_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SbLym_srt;
 },
 _cbLy7() //  [R1]
         { []
         }
     {offset
       cbLy7: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sbLrp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLy7_info" {
     block_cbLy7_info:
         const _cbLy7;
         const 1;
         const 4294967326;
         const SbLym_srt;
 },
 Data.Functor.Identity.$w$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbLyh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbLyl; else goto cbLyk;
       cbLyl: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLyk: // global
           I64[Hp - 24] = go_sbLrp_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sbLrO_info;
           P64[Hp] = Hp - 23;
           R4 = R4;
           _sbLrL::P64 = I64[(%MO_S_Gt_W64(R3,
                                           10) << 3) + GHC.Types.Bool_closure_tbl];
           R3 = Hp - 7;
           R2 = _sbLrL::P64;
           call GHC.Read.readParen_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$creadsPrec_info" {
     Data.Functor.Identity.$w$creadsPrec_info:
         const Data.Functor.Identity.$w$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 12884901909;
         const SbLym_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.808321517 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure" {
     Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure:
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_info;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbLzO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbLzP; else goto cbLzQ;
       cbLzP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLzQ: // global
           I64[Sp - 24] = block_cbLzL_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubLzU; else goto cbLzM;
       ubLzU: // global
           call _cbLzL(R1) args: 0, res: 0, upd: 0;
       cbLzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_$creadsPrec_info" {
     Data.Functor.Identity.$fReadIdentity_$creadsPrec_info:
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbLym_srt+24;
 },
 _cbLzL() //  [R1]
         { []
         }
     {offset
       cbLzL: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Identity.$w$creadsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLzL_info" {
     block_cbLzL_info:
         const _cbLzL;
         const 2;
         const 4294967326;
         const SbLym_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.814480934 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity3_closure" {
     Data.Functor.Identity.$fReadIdentity3_closure:
         const Data.Functor.Identity.$fReadIdentity3_info;
         const 0;
 },
 sat_sbLrX_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLAe: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLrX_info" {
     sat_sbLrX_info:
         const sat_sbLrX_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const SbLym_srt+32;
 },
 Data.Functor.Identity.$fReadIdentity3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbLAk: // global
           _sbLrW::P64 = R4;
           _sbLrV::P64 = R3;
           _sbLrU::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbLAl; else goto cbLAm;
       cbLAm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLAo; else goto cbLAn;
       cbLAo: // global
           HpAlloc = 24;
           goto cbLAl;
       cbLAl: // global
           R4 = _sbLrW::P64;
           R3 = _sbLrV::P64;
           R2 = _sbLrU::P64;
           R1 = Data.Functor.Identity.$fReadIdentity3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLAn: // global
           I64[Hp - 16] = sat_sbLrX_info;
           P64[Hp - 8] = _sbLrU::P64;
           P64[Hp] = _sbLrV::P64;
           I64[Sp - 8] = block_cbLAh_info;
           R3 = _sbLrW::P64;
           R2 = Hp - 15;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity3_info" {
     Data.Functor.Identity.$fReadIdentity3_info:
         const Data.Functor.Identity.$fReadIdentity3_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbLym_srt+32;
 },
 _cbLAh() //  [R1]
         { []
         }
     {offset
       cbLAh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbLAr; else goto cbLAq;
       cbLAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbLAq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLAh_info" {
     block_cbLAh_info:
         const _cbLAh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.820898363 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity2_closure" {
     Data.Functor.Identity.$fReadIdentity2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.823892228 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_$creadList_closure" {
     Data.Functor.Identity.$fReadIdentity_$creadList_closure:
         const Data.Functor.Identity.$fReadIdentity_$creadList_info;
         const 0;
 },
 sat_sbLs1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLAV: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLs1_info" {
     sat_sbLs1_info:
         const sat_sbLs1_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+40;
 },
 sat_sbLs2_entry() //  [R1]
         { []
         }
     {offset
       cbLAY: // global
           _sbLs2::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbLAZ; else goto cbLB0;
       cbLB0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbLB2; else goto cbLB1;
       cbLB2: // global
           HpAlloc = 16;
           goto cbLAZ;
       cbLAZ: // global
           R1 = _sbLs2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLB1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbLs2::P64;
           _sbLs0::P64 = P64[_sbLs2::P64 + 16];
           I64[Hp - 8] = sat_sbLs1_info;
           P64[Hp] = _sbLs0::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity2_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLs2_info" {
     sat_sbLs2_info:
         const sat_sbLs2_entry;
         const 1;
         const 12884901904;
         const SbLym_srt+40;
 },
 Data.Functor.Identity.$fReadIdentity_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cbLB3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLB7; else goto cbLB6;
       cbLB7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLB6: // global
           I64[Hp - 16] = sat_sbLs2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_$creadList_info" {
     Data.Functor.Identity.$fReadIdentity_$creadList_info:
         const Data.Functor.Identity.$fReadIdentity_$creadList_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SbLym_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.834968383 UTC

[section ""data" . Data.Functor.Identity.$w$creadListPrec_closure" {
     Data.Functor.Identity.$w$creadListPrec_closure:
         const Data.Functor.Identity.$w$creadListPrec_info;
         const 0;
 },
 sat_sbLs5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLBE: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLs5_info" {
     sat_sbLs5_info:
         const sat_sbLs5_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+40;
 },
 w1_sbLs4_entry() //  [R1]
         { []
         }
     {offset
       cbLBH: // global
           _sbLs4::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbLBI; else goto cbLBJ;
       cbLBJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbLBL; else goto cbLBK;
       cbLBL: // global
           HpAlloc = 16;
           goto cbLBI;
       cbLBI: // global
           R1 = _sbLs4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLBK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbLs4::P64;
           _sbLs3::P64 = P64[_sbLs4::P64 + 16];
           I64[Hp - 8] = sat_sbLs5_info;
           P64[Hp] = _sbLs3::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity2_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w1_sbLs4_info" {
     w1_sbLs4_info:
         const w1_sbLs4_entry;
         const 1;
         const 12884901904;
         const SbLym_srt+40;
 },
 w2_sbLs6_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLBR: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_sbLs6_info" {
     w2_sbLs6_info:
         const w2_sbLs6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbLsa_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLC2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbLC3; else goto cbLC4;
       cbLC3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLC4: // global
           I64[Sp - 8] = block_cbLBZ_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsa_info" {
     sat_sbLsa_info:
         const sat_sbLsa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbLBZ() //  [R1]
         { []
         }
     {offset
       cbLBZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbLC7; else goto cbLC6;
       cbLC7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbLC6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLBZ_info" {
     block_cbLBZ_info:
         const _cbLBZ;
         const 0;
         const 30;
 },
 Data.Functor.Identity.$w$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cbLC8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbLCc; else goto cbLCb;
       cbLCc: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLCb: // global
           I64[Hp - 48] = w1_sbLs4_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w2_sbLs6_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sbLsa_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$creadListPrec_info" {
     Data.Functor.Identity.$w$creadListPrec_info:
         const Data.Functor.Identity.$w$creadListPrec_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const SbLym_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.848759245 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity1_closure" {
     Data.Functor.Identity.$fReadIdentity1_closure:
         const Data.Functor.Identity.$fReadIdentity1_info;
         const 0;
 },
 Data.Functor.Identity.$fReadIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbLCR: // global
           R2 = R2;
           call Data.Functor.Identity.$w$creadListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity1_info" {
     Data.Functor.Identity.$fReadIdentity1_info:
         const Data.Functor.Identity.$fReadIdentity1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SbLym_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.854258994 UTC

[section ""data" . Data.Functor.Identity.$fReadIdentity_closure" {
     Data.Functor.Identity.$fReadIdentity_closure:
         const Data.Functor.Identity.$fReadIdentity_info;
         const 0;
 },
 lvl1_sbLse_entry() //  [R1]
         { []
         }
     {offset
       cbLD6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLD7; else goto cbLD8;
       cbLD7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLD8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$w$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_sbLse_info" {
     lvl1_sbLse_info:
         const lvl1_sbLse_entry;
         const 1;
         const 4294967312;
         const SbLym_srt+64;
 },
 sat_sbLsj_entry() //  [R1]
         { []
         }
     {offset
       cbLDe: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsj_info" {
     sat_sbLsj_info:
         const sat_sbLsj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbLsh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLDm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity3_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsh_info" {
     sat_sbLsh_info:
         const sat_sbLsh_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+40;
 },
 sat_sbLsg_entry() //  [R1]
         { []
         }
     {offset
       cbLDt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLDu; else goto cbLDv;
       cbLDu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLDv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fReadIdentity_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLsg_info" {
     sat_sbLsg_info:
         const sat_sbLsg_entry;
         const 1;
         const 4294967312;
         const SbLym_srt+56;
 },
 sat_sbLsf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLDB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fReadIdentity_$creadsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsf_info" {
     sat_sbLsf_info:
         const sat_sbLsf_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+32;
 },
 Data.Functor.Identity.$fReadIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLDF: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbLDJ; else goto cbLDI;
       cbLDJ: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fReadIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLDI: // global
           I64[Hp - 128] = lvl1_sbLse_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLsj_info;
           P64[Hp - 96] = Hp - 128;
           I64[Hp - 88] = sat_sbLsh_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbLsg_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbLsf_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fReadIdentity_info" {
     Data.Functor.Identity.$fReadIdentity_info:
         const Data.Functor.Identity.$fReadIdentity_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SbLym_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.8657988 UTC

[section ""cstring" . Data.Functor.Identity.$fShowIdentity2_bytes" {
     Data.Functor.Identity.$fShowIdentity2_bytes:
         I8[] [73,100,101,110,116,105,116,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.868181696 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity1_closure" {
     Data.Functor.Identity.$fShowIdentity1_closure:
         const Data.Functor.Identity.$fShowIdentity1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Functor.Identity.$fShowIdentity1_entry() //  [R1]
         { []
         }
     {offset
       cbLEq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLEr; else goto cbLEs;
       cbLEr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLEs: // global
           (_cbLEn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbLEn::I64 == 0) goto cbLEp; else goto cbLEo;
       cbLEp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbLEo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbLEn::I64;
           R2 = Data.Functor.Identity.$fShowIdentity2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity1_info" {
     Data.Functor.Identity.$fShowIdentity1_info:
         const Data.Functor.Identity.$fShowIdentity1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.875332906 UTC

[section ""data" . Data.Functor.Identity.$w$cshowsPrec_closure" {
     Data.Functor.Identity.$w$cshowsPrec_closure:
         const Data.Functor.Identity.$w$cshowsPrec_info;
         const 0;
 },
 g_sbLsn_entry() //  [R1]
         { []
         }
     {offset
       cbLEJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbLEK; else goto cbLEL;
       cbLEK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLEL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_sbLsn_info" {
     g_sbLsn_info:
         const g_sbLsn_entry;
         const 2;
         const 18;
 },
 sat_sbLsq_entry() //  [R1]
         { []
         }
     {offset
       cbLEY: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsq_info" {
     sat_sbLsq_info:
         const sat_sbLsq_entry;
         const 2;
         const 18;
 },
 sat_sbLsr_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLF1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbLF5; else goto cbLF4;
       cbLF5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLF4: // global
           _sbLsn::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbLsq_info;
           P64[Hp - 8] = _sbLsn::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsr_info" {
     sat_sbLsr_info:
         const sat_sbLsr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbLym_srt+80;
 },
 sat_sbLsu_entry() //  [R1]
         { []
         }
     {offset
       cbLFl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLFp; else goto cbLFo;
       cbLFp: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLFo: // global
           _sbLsn::P64 = P64[R1 + 16];
           _sbLss::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sbLss::P64;
           R2 = Hp - 14;
           R1 = _sbLsn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsu_info" {
     sat_sbLsu_info:
         const sat_sbLsu_entry;
         const 2;
         const 18;
 },
 sat_sbLsv_entry() //  [R1]
         { []
         }
     {offset
       cbLFq: // global
           _sbLsv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbLFr; else goto cbLFs;
       cbLFs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbLFu; else goto cbLFt;
       cbLFu: // global
           HpAlloc = 32;
           goto cbLFr;
       cbLFr: // global
           R1 = _sbLsv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLFt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbLsv::P64;
           _sbLsn::P64 = P64[_sbLsv::P64 + 16];
           _sbLss::P64 = P64[_sbLsv::P64 + 24];
           I64[Hp - 24] = sat_sbLsu_info;
           P64[Hp - 8] = _sbLsn::P64;
           P64[Hp] = _sbLss::P64;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLsv_info" {
     sat_sbLsv_info:
         const sat_sbLsv_entry;
         const 2;
         const 4294967314;
         const SbLym_srt+80;
 },
 sat_sbLsw_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLFw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbLFA; else goto cbLFz;
       cbLFA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLFz: // global
           _sbLsn::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sbLsv_info;
           P64[Hp - 32] = _sbLsn::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsw_info" {
     sat_sbLsw_info:
         const sat_sbLsw_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbLym_srt+80;
 },
 Data.Functor.Identity.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbLFE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbLFI; else goto cbLFH;
       cbLFI: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLFH: // global
           I64[Hp - 40] = g_sbLsn_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cbLEF::P64 = Hp - 40;
           if (%MO_S_Le_W64(R3, 10)) goto cbLFC; else goto cbLFD;
       cbLFC: // global
           I64[Hp - 8] = sat_sbLsr_info;
           P64[Hp] = _cbLEF::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbLFD: // global
           I64[Hp - 8] = sat_sbLsw_info;
           P64[Hp] = _cbLEF::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$w$cshowsPrec_info" {
     Data.Functor.Identity.$w$cshowsPrec_info:
         const Data.Functor.Identity.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const SbLym_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.890647993 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info;
         const 0;
 },
 Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbLGx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbLGy; else goto cbLGz;
       cbLGy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLGz: // global
           I64[Sp - 24] = block_cbLGu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubLGD; else goto cbLGv;
       ubLGD: // global
           call _cbLGu(R1) args: 0, res: 0, upd: 0;
       cbLGv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info" {
     Data.Functor.Identity.$fShowIdentity_$cshowsPrec_info:
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbLym_srt+88;
 },
 _cbLGu() //  [R1]
         { []
         }
     {offset
       cbLGu: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Functor.Identity.$w$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbLGu_info" {
     block_cbLGu_info:
         const _cbLGu;
         const 2;
         const 4294967326;
         const SbLym_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.896425357 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshow_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshow_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshow_info;
         const 0;
 },
 sat_sbLsE_entry() //  [R1]
         { []
         }
     {offset
       cbLGW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbLGX; else goto cbLGY;
       cbLGX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLGY: // global
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = Data.Functor.Identity.$fReadIdentity4_closure+1;
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsE_info" {
     sat_sbLsE_info:
         const sat_sbLsE_entry;
         const 2;
         const 18;
 },
 Data.Functor.Identity.$fShowIdentity_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbLGZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbLH3; else goto cbLH2;
       cbLH3: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLH2: // global
           I64[Hp - 24] = sat_sbLsE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Data.Functor.Identity.$fShowIdentity1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshow_info" {
     Data.Functor.Identity.$fShowIdentity_$cshow_info:
         const Data.Functor.Identity.$fShowIdentity_$cshow_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SbLym_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.902641285 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_$cshowList_closure" {
     Data.Functor.Identity.$fShowIdentity_$cshowList_closure:
         const Data.Functor.Identity.$fShowIdentity_$cshowList_info;
         const 0;
 },
 sat_sbLsJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLHr: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$w$cshowsPrec_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsJ_info" {
     sat_sbLsJ_info:
         const sat_sbLsJ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbLym_srt+88;
 },
 Data.Functor.Identity.$fShowIdentity_$cshowList_entry() //  [R2,
                                                              R3, R4]
         { []
         }
     {offset
       cbLHu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbLHy; else goto cbLHx;
       cbLHy: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbLHx: // global
           I64[Hp - 8] = sat_sbLsJ_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_$cshowList_info" {
     Data.Functor.Identity.$fShowIdentity_$cshowList_info:
         const Data.Functor.Identity.$fShowIdentity_$cshowList_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SbLym_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.908720296 UTC

[section ""data" . Data.Functor.Identity.$fShowIdentity_closure" {
     Data.Functor.Identity.$fShowIdentity_closure:
         const Data.Functor.Identity.$fShowIdentity_info;
         const 0;
 },
 sat_sbLsN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLHQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fShowIdentity_$cshowList_entry(R4,
                                                                      R3,
                                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsN_info" {
     sat_sbLsN_info:
         const sat_sbLsN_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+112;
 },
 sat_sbLsM_entry() //  [R1, R2]
         { []
         }
     {offset
       cbLHY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Functor.Identity.$fShowIdentity_$cshow_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsM_info" {
     sat_sbLsM_info:
         const sat_sbLsM_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbLym_srt+104;
 },
 sat_sbLsL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbLI6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Functor.Identity.$fShowIdentity_$cshowsPrec_entry(R4,
                                                                       R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbLsL_info" {
     sat_sbLsL_info:
         const sat_sbLsL_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const SbLym_srt+96;
 },
 Data.Functor.Identity.$fShowIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLIa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbLIe; else goto cbLId;
       cbLIe: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Data.Functor.Identity.$fShowIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLId: // global
           I64[Hp - 72] = sat_sbLsN_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbLsM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbLsL_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fShowIdentity_info" {
     Data.Functor.Identity.$fShowIdentity_info:
         const Data.Functor.Identity.$fShowIdentity_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SbLym_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.917313115 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity4_closure" {
     Data.Functor.Identity.$fFoldableIdentity4_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.919256528 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$clength_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$clength_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$clength_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$clength_entry() //  []
         { []
         }
     {offset
       cbLIF: // global
           R1 = Data.Functor.Identity.$fFoldableIdentity4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$clength_info" {
     Data.Functor.Identity.$fFoldableIdentity_$clength_info:
         const Data.Functor.Identity.$fFoldableIdentity_$clength_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.922571071 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$cnull_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$cnull_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$cnull_entry() //  []
         { []
         }
     {offset
       cbLIR: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$cnull_info" {
     Data.Functor.Identity.$fFoldableIdentity_$cnull_info:
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.926109282 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$ctoList_entry() //  [R2]
         { []
         }
     {offset
       cbLJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLJ9; else goto cbLJ8;
       cbLJ9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLJ8: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$ctoList_info" {
     Data.Functor.Identity.$fFoldableIdentity_$ctoList_info:
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.930117234 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity6_closure" {
     Data.Functor.Identity.$fFoldableIdentity6_closure:
         const Data.Functor.Identity.$fFoldableIdentity6_info;
 },
 Data.Functor.Identity.$fFoldableIdentity6_entry() //  [R2]
         { []
         }
     {offset
       cbLJm: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity6_info" {
     Data.Functor.Identity.$fFoldableIdentity6_info:
         const Data.Functor.Identity.$fFoldableIdentity6_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.933489215 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure" {
     Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure:
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info;
 },
 Data.Functor.Identity.$fFoldableIdentity_$cfoldr_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cbLJx: // global
           R3 = R3;
           _sbLsS::P64 = R2;
           R2 = R4;
           R1 = _sbLsS::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info" {
     Data.Functor.Identity.$fFoldableIdentity_$cfoldr_info:
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.936863131 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity7_closure" {
     Data.Functor.Identity.$fFoldableIdentity7_closure:
         const Data.Functor.Identity.$fFoldableIdentity7_info;
 },
 Data.Functor.Identity.$fFoldableIdentity7_entry() //  [R3]
         { []
         }
     {offset
       cbLJI: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity7_info" {
     Data.Functor.Identity.$fFoldableIdentity7_info:
         const Data.Functor.Identity.$fFoldableIdentity7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.940143827 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity2_closure" {
     Data.Functor.Identity.$fFunctorIdentity2_closure:
         const Data.Functor.Identity.$fFunctorIdentity2_info;
 },
 Data.Functor.Identity.$fFunctorIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbLJT: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFunctorIdentity2_info" {
     Data.Functor.Identity.$fFunctorIdentity2_info:
         const Data.Functor.Identity.$fFunctorIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.943488066 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity1_closure" {
     Data.Functor.Identity.$fFunctorIdentity1_closure:
         const Data.Functor.Identity.$fFunctorIdentity1_info;
 },
 Data.Functor.Identity.$fFunctorIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbLK4: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFunctorIdentity1_info" {
     Data.Functor.Identity.$fFunctorIdentity1_info:
         const Data.Functor.Identity.$fFunctorIdentity1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.947530388 UTC

[section ""data" . Data.Functor.Identity.$fFunctorIdentity_closure" {
     Data.Functor.Identity.$fFunctorIdentity_closure:
         const GHC.Base.C:Functor_con_info;
         const Data.Functor.Identity.$fFunctorIdentity2_closure+1;
         const Data.Functor.Identity.$fFunctorIdentity1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.949443906 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity1_closure" {
     Data.Functor.Identity.$fApplicativeIdentity1_closure:
         const Data.Functor.Identity.$fApplicativeIdentity1_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbLKg: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity1_info" {
     Data.Functor.Identity.$fApplicativeIdentity1_info:
         const Data.Functor.Identity.$fApplicativeIdentity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.952644176 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity2_closure" {
     Data.Functor.Identity.$fApplicativeIdentity2_closure:
         const Data.Functor.Identity.$fApplicativeIdentity2_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbLKr: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity2_info" {
     Data.Functor.Identity.$fApplicativeIdentity2_info:
         const Data.Functor.Identity.$fApplicativeIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.955867333 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity3_closure" {
     Data.Functor.Identity.$fApplicativeIdentity3_closure:
         const Data.Functor.Identity.$fApplicativeIdentity3_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity3_entry() //  [R2]
         { []
         }
     {offset
       cbLKC: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity3_info" {
     Data.Functor.Identity.$fApplicativeIdentity3_info:
         const Data.Functor.Identity.$fApplicativeIdentity3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.959665473 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure" {
     Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure:
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_info;
 },
 Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry() //  [R3]
         { []
         }
     {offset
       cbLKN: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fApplicativeIdentity_$c*>_info" {
     Data.Functor.Identity.$fApplicativeIdentity_$c*>_info:
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.962726807 UTC

[section ""data" . Data.Functor.Identity.$fApplicativeIdentity_closure" {
     Data.Functor.Identity.$fApplicativeIdentity_closure:
         const GHC.Base.C:Applicative_con_info;
         const Data.Functor.Identity.$fFunctorIdentity_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity3_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity2_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity1_closure+1;
         const Data.Functor.Identity.$fApplicativeIdentity_$c*>_closure+2;
         const GHC.Base.const_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.967721198 UTC

[section ""data" . Data.Functor.Identity.$fStorableIdentity_closure" {
     Data.Functor.Identity.$fStorableIdentity_closure:
         const Data.Functor.Identity.$fStorableIdentity_info;
 },
 sat_sbLtd_entry() //  [R1]
         { []
         }
     {offset
       cbLL3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLL4; else goto cbLL5;
       cbLL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.poke_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtd_info" {
     sat_sbLtd_info:
         const sat_sbLtd_entry;
         const 1;
         const 16;
 },
 sat_sbLtc_entry() //  [R1]
         { []
         }
     {offset
       cbLLa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLb; else goto cbLLc;
       cbLLb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtc_info" {
     sat_sbLtc_info:
         const sat_sbLtc_entry;
         const 1;
         const 16;
 },
 sat_sbLtb_entry() //  [R1]
         { []
         }
     {offset
       cbLLh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLi; else goto cbLLj;
       cbLLi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtb_info" {
     sat_sbLtb_info:
         const sat_sbLtb_entry;
         const 1;
         const 16;
 },
 sat_sbLta_entry() //  [R1]
         { []
         }
     {offset
       cbLLo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLp; else goto cbLLq;
       cbLLp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekByteOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLta_info" {
     sat_sbLta_info:
         const sat_sbLta_entry;
         const 1;
         const 16;
 },
 sat_sbLt9_entry() //  [R1]
         { []
         }
     {offset
       cbLLv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLw; else goto cbLLx;
       cbLLw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLt9_info" {
     sat_sbLt9_info:
         const sat_sbLt9_entry;
         const 1;
         const 16;
 },
 sat_sbLt8_entry() //  [R1]
         { []
         }
     {offset
       cbLLC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLD; else goto cbLLE;
       cbLLD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.peekElemOff_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLt8_info" {
     sat_sbLt8_info:
         const sat_sbLt8_entry;
         const 1;
         const 16;
 },
 sat_sbLt7_entry() //  [R1]
         { []
         }
     {offset
       cbLLJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLK; else goto cbLLL;
       cbLLK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLt7_info" {
     sat_sbLt7_info:
         const sat_sbLt7_entry;
         const 1;
         const 16;
 },
 sat_sbLt6_entry() //  [R1]
         { []
         }
     {offset
       cbLLQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLLR; else goto cbLLS;
       cbLLR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLLS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLt6_info" {
     sat_sbLt6_info:
         const sat_sbLt6_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fStorableIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLLU: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbLLY; else goto cbLLX;
       cbLLY: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fStorableIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLLX: // global
           I64[Hp - 256] = sat_sbLtd_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbLtc_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbLtb_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbLta_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbLt9_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbLt8_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbLt7_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbLt6_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = Foreign.Storable.C:Storable_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fStorableIdentity_info" {
     Data.Functor.Identity.$fStorableIdentity_info:
         const Data.Functor.Identity.$fStorableIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:38.988050597 UTC

[section ""data" . Data.Functor.Identity.$fNumIdentity_closure" {
     Data.Functor.Identity.$fNumIdentity_closure:
         const Data.Functor.Identity.$fNumIdentity_info;
 },
 sat_sbLtl_entry() //  [R1]
         { []
         }
     {offset
       cbLN7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLN8; else goto cbLN9;
       cbLN8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLN9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtl_info" {
     sat_sbLtl_info:
         const sat_sbLtl_entry;
         const 1;
         const 16;
 },
 sat_sbLtk_entry() //  [R1]
         { []
         }
     {offset
       cbLNe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNf; else goto cbLNg;
       cbLNf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtk_info" {
     sat_sbLtk_info:
         const sat_sbLtk_entry;
         const 1;
         const 16;
 },
 sat_sbLtj_entry() //  [R1]
         { []
         }
     {offset
       cbLNl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNm; else goto cbLNn;
       cbLNm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtj_info" {
     sat_sbLtj_info:
         const sat_sbLtj_entry;
         const 1;
         const 16;
 },
 sat_sbLti_entry() //  [R1]
         { []
         }
     {offset
       cbLNs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNt; else goto cbLNu;
       cbLNt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLti_info" {
     sat_sbLti_info:
         const sat_sbLti_entry;
         const 1;
         const 16;
 },
 sat_sbLth_entry() //  [R1]
         { []
         }
     {offset
       cbLNz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNA; else goto cbLNB;
       cbLNA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.*_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLth_info" {
     sat_sbLth_info:
         const sat_sbLth_entry;
         const 1;
         const 16;
 },
 sat_sbLtg_entry() //  [R1]
         { []
         }
     {offset
       cbLNG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNH; else goto cbLNI;
       cbLNH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.-_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtg_info" {
     sat_sbLtg_info:
         const sat_sbLtg_entry;
         const 1;
         const 16;
 },
 sat_sbLtf_entry() //  [R1]
         { []
         }
     {offset
       cbLNN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLNO; else goto cbLNP;
       cbLNO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLNP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.+_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtf_info" {
     sat_sbLtf_info:
         const sat_sbLtf_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fNumIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLNR: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbLNV; else goto cbLNU;
       cbLNV: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fNumIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLNU: // global
           I64[Hp - 224] = sat_sbLtl_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbLtk_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbLtj_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbLti_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbLth_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLtg_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLtf_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fNumIdentity_info" {
     Data.Functor.Identity.$fNumIdentity_info:
         const Data.Functor.Identity.$fNumIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.003507089 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_$cp1Real_closure" {
     Data.Functor.Identity.$fRealIdentity_$cp1Real_closure:
         const Data.Functor.Identity.$fRealIdentity_$cp1Real_info;
 },
 sat_sbLtn_entry() //  [R1]
         { []
         }
     {offset
       cbLOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLOY; else goto cbLOZ;
       cbLOY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLOZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtn_info" {
     sat_sbLtn_info:
         const sat_sbLtn_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_$cp1Real_entry() //  [R2]
         { []
         }
     {offset
       cbLP0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLP4; else goto cbLP3;
       cbLP4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_$cp1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLP3: // global
           I64[Hp - 16] = sat_sbLtn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fNumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_$cp1Real_info" {
     Data.Functor.Identity.$fRealIdentity_$cp1Real_info:
         const Data.Functor.Identity.$fRealIdentity_$cp1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.010057141 UTC

[section ""data" . Data.Functor.Identity.$fSemigroupIdentity_closure" {
     Data.Functor.Identity.$fSemigroupIdentity_closure:
         const Data.Functor.Identity.$fSemigroupIdentity_info;
 },
 sat_sbLtr_entry() //  [R1]
         { []
         }
     {offset
       cbLPn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLPo; else goto cbLPp;
       cbLPo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLPp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.stimes_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtr_info" {
     sat_sbLtr_info:
         const sat_sbLtr_entry;
         const 1;
         const 16;
 },
 sat_sbLtq_entry() //  [R1]
         { []
         }
     {offset
       cbLPu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLPv; else goto cbLPw;
       cbLPv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLPw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.sconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtq_info" {
     sat_sbLtq_info:
         const sat_sbLtq_entry;
         const 1;
         const 16;
 },
 sat_sbLtp_entry() //  [R1]
         { []
         }
     {offset
       cbLPB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLPC; else goto cbLPD;
       cbLPC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLPD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.<>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtp_info" {
     sat_sbLtp_info:
         const sat_sbLtp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fSemigroupIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLPF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbLPJ; else goto cbLPI;
       cbLPJ: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Identity.$fSemigroupIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLPI: // global
           I64[Hp - 96] = sat_sbLtr_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbLtq_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbLtp_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fSemigroupIdentity_info" {
     Data.Functor.Identity.$fSemigroupIdentity_info:
         const Data.Functor.Identity.$fSemigroupIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.019172581 UTC

[section ""data" . Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure" {
     Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure:
         const Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info;
 },
 sat_sbLtt_entry() //  [R1]
         { []
         }
     {offset
       cbLQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLQk; else goto cbLQl;
       cbLQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLQl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtt_info" {
     sat_sbLtt_info:
         const sat_sbLtt_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       cbLQm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLQq; else goto cbLQp;
       cbLQq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLQp: // global
           I64[Hp - 16] = sat_sbLtt_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fSemigroupIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info" {
     Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_info:
         const Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.025984575 UTC

[section ""data" . Data.Functor.Identity.$fMonoidIdentity_closure" {
     Data.Functor.Identity.$fMonoidIdentity_closure:
         const Data.Functor.Identity.$fMonoidIdentity_info;
 },
 sat_sbLty_entry() //  [R1]
         { []
         }
     {offset
       cbLQJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLQK; else goto cbLQL;
       cbLQK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLQL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mconcat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLty_info" {
     sat_sbLty_info:
         const sat_sbLty_entry;
         const 1;
         const 16;
 },
 sat_sbLtx_entry() //  [R1]
         { []
         }
     {offset
       cbLQQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLQR; else goto cbLQS;
       cbLQR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mappend_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtx_info" {
     sat_sbLtx_info:
         const sat_sbLtx_entry;
         const 1;
         const 16;
 },
 sat_sbLtw_entry() //  [R1]
         { []
         }
     {offset
       cbLQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLQY; else goto cbLQZ;
       cbLQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtw_info" {
     sat_sbLtw_info:
         const sat_sbLtw_entry;
         const 1;
         const 16;
 },
 sat_sbLtv_entry() //  [R1]
         { []
         }
     {offset
       cbLR4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLR5; else goto cbLR6;
       cbLR5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLR6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fMonoidIdentity_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtv_info" {
     sat_sbLtv_info:
         const sat_sbLtv_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fMonoidIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLR8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbLRc; else goto cbLRb;
       cbLRc: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonoidIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLRb: // global
           I64[Hp - 128] = sat_sbLty_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLtx_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLtw_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbLtv_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonoidIdentity_info" {
     Data.Functor.Identity.$fMonoidIdentity_info:
         const Data.Functor.Identity.$fMonoidIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.035745661 UTC

[section ""data" . Data.Functor.Identity.$fGeneric1Identity1_closure" {
     Data.Functor.Identity.$fGeneric1Identity1_closure:
         const Data.Functor.Identity.$fGeneric1Identity1_info;
 },
 Data.Functor.Identity.$fGeneric1Identity1_entry() //  [R2]
         { []
         }
     {offset
       cbLRP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGeneric1Identity1_info" {
     Data.Functor.Identity.$fGeneric1Identity1_info:
         const Data.Functor.Identity.$fGeneric1Identity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.039351593 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity2_closure" {
     Data.Functor.Identity.$fFoldableIdentity2_closure:
         const Data.Functor.Identity.$fFoldableIdentity2_info;
 },
 Data.Functor.Identity.$fFoldableIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbLS0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity2_info" {
     Data.Functor.Identity.$fFoldableIdentity2_info:
         const Data.Functor.Identity.$fFoldableIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.042398929 UTC

[section ""data" . Data.Functor.Identity.$fGeneric1Identity_closure" {
     Data.Functor.Identity.$fGeneric1Identity_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Data.Functor.Identity.$fFoldableIdentity2_closure+1;
         const Data.Functor.Identity.$fGeneric1Identity1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.044371225 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity1_closure" {
     Data.Functor.Identity.$fGenericIdentity1_closure:
         const Data.Functor.Identity.$fGenericIdentity1_info;
 },
 Data.Functor.Identity.$fGenericIdentity1_entry() //  [R2]
         { []
         }
     {offset
       cbLSc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGenericIdentity1_info" {
     Data.Functor.Identity.$fGenericIdentity1_info:
         const Data.Functor.Identity.$fGenericIdentity1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.047551325 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity2_closure" {
     Data.Functor.Identity.$fGenericIdentity2_closure:
         const Data.Functor.Identity.$fGenericIdentity2_info;
 },
 Data.Functor.Identity.$fGenericIdentity2_entry() //  [R2]
         { []
         }
     {offset
       cbLSn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fGenericIdentity2_info" {
     Data.Functor.Identity.$fGenericIdentity2_info:
         const Data.Functor.Identity.$fGenericIdentity2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.051517652 UTC

[section ""data" . Data.Functor.Identity.$fGenericIdentity_closure" {
     Data.Functor.Identity.$fGenericIdentity_closure:
         const GHC.Generics.C:Generic_con_info;
         const Data.Functor.Identity.$fGenericIdentity2_closure+1;
         const Data.Functor.Identity.$fGenericIdentity1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.054035889 UTC

[section ""data" . Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure" {
     Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure:
         const Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info;
 },
 sat_sbLtE_entry() //  [R1]
         { []
         }
     {offset
       cbLSD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLSE; else goto cbLSF;
       cbLSE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLSF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtE_info" {
     sat_sbLtE_info:
         const sat_sbLtE_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry() //  [R2]
         { []
         }
     {offset
       cbLSG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLSK; else goto cbLSJ;
       cbLSK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLSJ: // global
           I64[Hp - 16] = sat_sbLtE_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fNumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info" {
     Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_info:
         const Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.060726451 UTC

[section ""data" . Data.Functor.Identity.$fFractionalIdentity_closure" {
     Data.Functor.Identity.$fFractionalIdentity_closure:
         const Data.Functor.Identity.$fFractionalIdentity_info;
 },
 sat_sbLtJ_entry() //  [R1]
         { []
         }
     {offset
       cbLT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLT4; else goto cbLT5;
       cbLT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLT5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtJ_info" {
     sat_sbLtJ_info:
         const sat_sbLtJ_entry;
         const 1;
         const 16;
 },
 sat_sbLtI_entry() //  [R1]
         { []
         }
     {offset
       cbLTa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLTb; else goto cbLTc;
       cbLTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLTc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtI_info" {
     sat_sbLtI_info:
         const sat_sbLtI_entry;
         const 1;
         const 16;
 },
 sat_sbLtH_entry() //  [R1]
         { []
         }
     {offset
       cbLTh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLTi; else goto cbLTj;
       cbLTi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real./_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtH_info" {
     sat_sbLtH_info:
         const sat_sbLtH_entry;
         const 1;
         const 16;
 },
 sat_sbLtG_entry() //  [R1]
         { []
         }
     {offset
       cbLTo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLTp; else goto cbLTq;
       cbLTp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLTq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_$cp1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtG_info" {
     sat_sbLtG_info:
         const sat_sbLtG_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFractionalIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLTs: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbLTw; else goto cbLTv;
       cbLTw: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFractionalIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLTv: // global
           I64[Hp - 128] = sat_sbLtJ_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLtI_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLtH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbLtG_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFractionalIdentity_info" {
     Data.Functor.Identity.$fFractionalIdentity_info:
         const Data.Functor.Identity.$fFractionalIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.071651701 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure" {
     Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure:
         const Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info;
 },
 sat_sbLtL_entry() //  [R1]
         { []
         }
     {offset
       cbLUd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLUe; else goto cbLUf;
       cbLUe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLUf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtL_info" {
     sat_sbLtL_info:
         const sat_sbLtL_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       cbLUg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLUk; else goto cbLUj;
       cbLUk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLUj: // global
           I64[Hp - 16] = sat_sbLtL_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info" {
     Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_info:
         const Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.077194988 UTC

[section ""data" . Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure" {
     Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure:
         const Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info;
 },
 sat_sbLtN_entry() //  [R1]
         { []
         }
     {offset
       cbLUD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLUE; else goto cbLUF;
       cbLUE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLUF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtN_info" {
     sat_sbLtN_info:
         const sat_sbLtN_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry() //  [R2]
         { []
         }
     {offset
       cbLUG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbLUK; else goto cbLUJ;
       cbLUK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLUJ: // global
           I64[Hp - 16] = sat_sbLtN_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFractionalIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info" {
     Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_info:
         const Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.091176558 UTC

[section ""data" . Data.Functor.Identity.$fFloatingIdentity_closure" {
     Data.Functor.Identity.$fFloatingIdentity_closure:
         const Data.Functor.Identity.$fFloatingIdentity_info;
 },
 sat_sbLub_entry() //  [R1]
         { []
         }
     {offset
       cbLV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLV4; else goto cbLV5;
       cbLV4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLV5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1mexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLub_info" {
     sat_sbLub_info:
         const sat_sbLub_entry;
         const 1;
         const 16;
 },
 sat_sbLua_entry() //  [R1]
         { []
         }
     {offset
       cbLVa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVb; else goto cbLVc;
       cbLVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1pexp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLua_info" {
     sat_sbLua_info:
         const sat_sbLua_entry;
         const 1;
         const 16;
 },
 sat_sbLu9_entry() //  [R1]
         { []
         }
     {offset
       cbLVh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVi; else goto cbLVj;
       cbLVi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.expm1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu9_info" {
     sat_sbLu9_info:
         const sat_sbLu9_entry;
         const 1;
         const 16;
 },
 sat_sbLu8_entry() //  [R1]
         { []
         }
     {offset
       cbLVo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVp; else goto cbLVq;
       cbLVp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu8_info" {
     sat_sbLu8_info:
         const sat_sbLu8_entry;
         const 1;
         const 16;
 },
 sat_sbLu7_entry() //  [R1]
         { []
         }
     {offset
       cbLVv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVw; else goto cbLVx;
       cbLVw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu7_info" {
     sat_sbLu7_info:
         const sat_sbLu7_entry;
         const 1;
         const 16;
 },
 sat_sbLu6_entry() //  [R1]
         { []
         }
     {offset
       cbLVC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVD; else goto cbLVE;
       cbLVD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu6_info" {
     sat_sbLu6_info:
         const sat_sbLu6_entry;
         const 1;
         const 16;
 },
 sat_sbLu5_entry() //  [R1]
         { []
         }
     {offset
       cbLVJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVK; else goto cbLVL;
       cbLVK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu5_info" {
     sat_sbLu5_info:
         const sat_sbLu5_entry;
         const 1;
         const 16;
 },
 sat_sbLu4_entry() //  [R1]
         { []
         }
     {offset
       cbLVQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVR; else goto cbLVS;
       cbLVR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tanh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu4_info" {
     sat_sbLu4_info:
         const sat_sbLu4_entry;
         const 1;
         const 16;
 },
 sat_sbLu3_entry() //  [R1]
         { []
         }
     {offset
       cbLVX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLVY; else goto cbLVZ;
       cbLVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLVZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cosh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu3_info" {
     sat_sbLu3_info:
         const sat_sbLu3_entry;
         const 1;
         const 16;
 },
 sat_sbLu2_entry() //  [R1]
         { []
         }
     {offset
       cbLW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLW5; else goto cbLW6;
       cbLW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLW6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sinh_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu2_info" {
     sat_sbLu2_info:
         const sat_sbLu2_entry;
         const 1;
         const 16;
 },
 sat_sbLu1_entry() //  [R1]
         { []
         }
     {offset
       cbLWb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWc; else goto cbLWd;
       cbLWc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu1_info" {
     sat_sbLu1_info:
         const sat_sbLu1_entry;
         const 1;
         const 16;
 },
 sat_sbLu0_entry() //  [R1]
         { []
         }
     {offset
       cbLWi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWj; else goto cbLWk;
       cbLWj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.acos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLu0_info" {
     sat_sbLu0_info:
         const sat_sbLu0_entry;
         const 1;
         const 16;
 },
 sat_sbLtZ_entry() //  [R1]
         { []
         }
     {offset
       cbLWp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWq; else goto cbLWr;
       cbLWq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.asin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtZ_info" {
     sat_sbLtZ_info:
         const sat_sbLtZ_entry;
         const 1;
         const 16;
 },
 sat_sbLtY_entry() //  [R1]
         { []
         }
     {offset
       cbLWw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWx; else goto cbLWy;
       cbLWx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.tan_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtY_info" {
     sat_sbLtY_info:
         const sat_sbLtY_entry;
         const 1;
         const 16;
 },
 sat_sbLtX_entry() //  [R1]
         { []
         }
     {offset
       cbLWD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWE; else goto cbLWF;
       cbLWE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.cos_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtX_info" {
     sat_sbLtX_info:
         const sat_sbLtX_entry;
         const 1;
         const 16;
 },
 sat_sbLtW_entry() //  [R1]
         { []
         }
     {offset
       cbLWK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWL; else goto cbLWM;
       cbLWL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sin_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtW_info" {
     sat_sbLtW_info:
         const sat_sbLtW_entry;
         const 1;
         const 16;
 },
 sat_sbLtV_entry() //  [R1]
         { []
         }
     {offset
       cbLWR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWS; else goto cbLWT;
       cbLWS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLWT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.logBase_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtV_info" {
     sat_sbLtV_info:
         const sat_sbLtV_entry;
         const 1;
         const 16;
 },
 sat_sbLtU_entry() //  [R1]
         { []
         }
     {offset
       cbLWY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLWZ; else goto cbLX0;
       cbLWZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLX0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.**_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtU_info" {
     sat_sbLtU_info:
         const sat_sbLtU_entry;
         const 1;
         const 16;
 },
 sat_sbLtT_entry() //  [R1]
         { []
         }
     {offset
       cbLX5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLX6; else goto cbLX7;
       cbLX6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLX7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.sqrt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtT_info" {
     sat_sbLtT_info:
         const sat_sbLtT_entry;
         const 1;
         const 16;
 },
 sat_sbLtS_entry() //  [R1]
         { []
         }
     {offset
       cbLXc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLXd; else goto cbLXe;
       cbLXd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLXe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtS_info" {
     sat_sbLtS_info:
         const sat_sbLtS_entry;
         const 1;
         const 16;
 },
 sat_sbLtR_entry() //  [R1]
         { []
         }
     {offset
       cbLXj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLXk; else goto cbLXl;
       cbLXk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLXl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtR_info" {
     sat_sbLtR_info:
         const sat_sbLtR_entry;
         const 1;
         const 16;
 },
 sat_sbLtQ_entry() //  [R1]
         { []
         }
     {offset
       cbLXq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLXr; else goto cbLXs;
       cbLXr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLXs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtQ_info" {
     sat_sbLtQ_info:
         const sat_sbLtQ_entry;
         const 1;
         const 16;
 },
 sat_sbLtP_entry() //  [R1]
         { []
         }
     {offset
       cbLXx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbLXy; else goto cbLXz;
       cbLXy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbLXz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFloatingIdentity_$cp1Floating_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLtP_info" {
     sat_sbLtP_info:
         const sat_sbLtP_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFloatingIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbLXB: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto cbLXF; else goto cbLXE;
       cbLXF: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFloatingIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbLXE: // global
           I64[Hp - 736] = sat_sbLub_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_sbLua_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_sbLu9_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_sbLu8_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_sbLu7_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_sbLu6_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_sbLu5_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_sbLu4_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_sbLu3_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sbLu2_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_sbLu1_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sbLu0_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_sbLtZ_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sbLtY_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_sbLtX_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sbLtW_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_sbLtV_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sbLtU_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sbLtT_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sbLtS_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sbLtR_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbLtQ_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbLtP_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFloatingIdentity_info" {
     Data.Functor.Identity.$fFloatingIdentity_info:
         const Data.Functor.Identity.$fFloatingIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.134148595 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info;
 },
 sat_sbLud_entry() //  [R1]
         { []
         }
     {offset
       cbM0v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM0w; else goto cbM0x;
       cbM0w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM0x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLud_info" {
     sat_sbLud_info:
         const sat_sbLud_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       cbM0y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM0C; else goto cbM0B;
       cbM0C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM0B: // global
           I64[Hp - 16] = sat_sbLud_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fFloatingIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_info:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.140211641 UTC

[section ""data" . Data.Functor.Identity.$fEqIdentity_closure" {
     Data.Functor.Identity.$fEqIdentity_closure:
         const Data.Functor.Identity.$fEqIdentity_info;
 },
 sat_sbLug_entry() //  [R1]
         { []
         }
     {offset
       cbM0V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM0W; else goto cbM0X;
       cbM0W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM0X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes./=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLug_info" {
     sat_sbLug_info:
         const sat_sbLug_entry;
         const 1;
         const 16;
 },
 sat_sbLuf_entry() //  [R1]
         { []
         }
     {offset
       cbM12: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM13; else goto cbM14;
       cbM13: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM14: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuf_info" {
     sat_sbLuf_info:
         const sat_sbLuf_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fEqIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbM16: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbM1a; else goto cbM19;
       cbM1a: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Identity.$fEqIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM19: // global
           I64[Hp - 64] = sat_sbLug_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbLuf_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fEqIdentity_info" {
     Data.Functor.Identity.$fEqIdentity_info:
         const Data.Functor.Identity.$fEqIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.147953705 UTC

[section ""data" . Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure" {
     Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure:
         const Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info;
 },
 sat_sbLui_entry() //  [R1]
         { []
         }
     {offset
       cbM1D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM1E; else goto cbM1F;
       cbM1E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM1F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLui_info" {
     sat_sbLui_info:
         const sat_sbLui_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cbM1G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM1K; else goto cbM1J;
       cbM1K: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fOrdIdentity_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM1J: // global
           I64[Hp - 16] = sat_sbLui_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEqIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info" {
     Data.Functor.Identity.$fOrdIdentity_$cp1Ord_info:
         const Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.15631616 UTC

[section ""data" . Data.Functor.Identity.$fOrdIdentity_closure" {
     Data.Functor.Identity.$fOrdIdentity_closure:
         const Data.Functor.Identity.$fOrdIdentity_info;
 },
 sat_sbLur_entry() //  [R1]
         { []
         }
     {offset
       cbM23: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM24; else goto cbM25;
       cbM24: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM25: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.min_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLur_info" {
     sat_sbLur_info:
         const sat_sbLur_entry;
         const 1;
         const 16;
 },
 sat_sbLuq_entry() //  [R1]
         { []
         }
     {offset
       cbM2a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2b; else goto cbM2c;
       cbM2b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.max_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuq_info" {
     sat_sbLuq_info:
         const sat_sbLuq_entry;
         const 1;
         const 16;
 },
 sat_sbLup_entry() //  [R1]
         { []
         }
     {offset
       cbM2h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2i; else goto cbM2j;
       cbM2i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLup_info" {
     sat_sbLup_info:
         const sat_sbLup_entry;
         const 1;
         const 16;
 },
 sat_sbLuo_entry() //  [R1]
         { []
         }
     {offset
       cbM2o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2p; else goto cbM2q;
       cbM2p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuo_info" {
     sat_sbLuo_info:
         const sat_sbLuo_entry;
         const 1;
         const 16;
 },
 sat_sbLun_entry() //  [R1]
         { []
         }
     {offset
       cbM2v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2w; else goto cbM2x;
       cbM2w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLun_info" {
     sat_sbLun_info:
         const sat_sbLun_entry;
         const 1;
         const 16;
 },
 sat_sbLum_entry() //  [R1]
         { []
         }
     {offset
       cbM2C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2D; else goto cbM2E;
       cbM2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLum_info" {
     sat_sbLum_info:
         const sat_sbLum_entry;
         const 1;
         const 16;
 },
 sat_sbLul_entry() //  [R1]
         { []
         }
     {offset
       cbM2J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2K; else goto cbM2L;
       cbM2K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLul_info" {
     sat_sbLul_info:
         const sat_sbLul_entry;
         const 1;
         const 16;
 },
 sat_sbLuk_entry() //  [R1]
         { []
         }
     {offset
       cbM2Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM2R; else goto cbM2S;
       cbM2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM2S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fOrdIdentity_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuk_info" {
     sat_sbLuk_info:
         const sat_sbLuk_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fOrdIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbM2U: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbM2Y; else goto cbM2X;
       cbM2Y: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fOrdIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM2X: // global
           I64[Hp - 256] = sat_sbLur_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbLuq_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbLup_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbLuo_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbLun_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbLum_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbLul_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbLuk_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fOrdIdentity_info" {
     Data.Functor.Identity.$fOrdIdentity_info:
         const Data.Functor.Identity.$fOrdIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.174514103 UTC

[section ""data" . Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure" {
     Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure:
         const Data.Functor.Identity.$fIxIdentity_$cp1Ix_info;
 },
 sat_sbLut_entry() //  [R1]
         { []
         }
     {offset
       cbM47: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM48; else goto cbM49;
       cbM48: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM49: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLut_info" {
     sat_sbLut_info:
         const sat_sbLut_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry() //  [R2]
         { []
         }
     {offset
       cbM4a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM4e; else goto cbM4d;
       cbM4e: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIxIdentity_$cp1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM4d: // global
           I64[Hp - 16] = sat_sbLut_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fOrdIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIxIdentity_$cp1Ix_info" {
     Data.Functor.Identity.$fIxIdentity_$cp1Ix_info:
         const Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.182637934 UTC

[section ""data" . Data.Functor.Identity.$fIxIdentity_closure" {
     Data.Functor.Identity.$fIxIdentity_closure:
         const Data.Functor.Identity.$fIxIdentity_info;
 },
 sat_sbLuB_entry() //  [R1]
         { []
         }
     {offset
       cbM4x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM4y; else goto cbM4z;
       cbM4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuB_info" {
     sat_sbLuB_info:
         const sat_sbLuB_entry;
         const 1;
         const 16;
 },
 sat_sbLuA_entry() //  [R1]
         { []
         }
     {offset
       cbM4E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM4F; else goto cbM4G;
       cbM4F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM4G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuA_info" {
     sat_sbLuA_info:
         const sat_sbLuA_entry;
         const 1;
         const 16;
 },
 sat_sbLuz_entry() //  [R1]
         { []
         }
     {offset
       cbM4L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM4M; else goto cbM4N;
       cbM4M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM4N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuz_info" {
     sat_sbLuz_info:
         const sat_sbLuz_entry;
         const 1;
         const 16;
 },
 sat_sbLuy_entry() //  [R1]
         { []
         }
     {offset
       cbM4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM4T; else goto cbM4U;
       cbM4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuy_info" {
     sat_sbLuy_info:
         const sat_sbLuy_entry;
         const 1;
         const 16;
 },
 sat_sbLux_entry() //  [R1]
         { []
         }
     {offset
       cbM4Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM50; else goto cbM51;
       cbM50: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM51: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLux_info" {
     sat_sbLux_info:
         const sat_sbLux_entry;
         const 1;
         const 16;
 },
 sat_sbLuw_entry() //  [R1]
         { []
         }
     {offset
       cbM56: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM57; else goto cbM58;
       cbM57: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM58: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuw_info" {
     sat_sbLuw_info:
         const sat_sbLuw_entry;
         const 1;
         const 16;
 },
 sat_sbLuv_entry() //  [R1]
         { []
         }
     {offset
       cbM5d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM5e; else goto cbM5f;
       cbM5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM5f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIxIdentity_$cp1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuv_info" {
     sat_sbLuv_info:
         const sat_sbLuv_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIxIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbM5h: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbM5l; else goto cbM5k;
       cbM5l: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIxIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM5k: // global
           I64[Hp - 224] = sat_sbLuB_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbLuA_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbLuz_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbLuy_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbLux_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLuw_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLuv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIxIdentity_info" {
     Data.Functor.Identity.$fIxIdentity_info:
         const Data.Functor.Identity.$fIxIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.198664346 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_$cp2Real_closure" {
     Data.Functor.Identity.$fRealIdentity_$cp2Real_closure:
         const Data.Functor.Identity.$fRealIdentity_$cp2Real_info;
 },
 sat_sbLuD_entry() //  [R1]
         { []
         }
     {offset
       cbM6n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM6o; else goto cbM6p;
       cbM6o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM6p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuD_info" {
     sat_sbLuD_info:
         const sat_sbLuD_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_$cp2Real_entry() //  [R2]
         { []
         }
     {offset
       cbM6q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM6u; else goto cbM6t;
       cbM6u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_$cp2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM6t: // global
           I64[Hp - 16] = sat_sbLuD_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fOrdIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_$cp2Real_info" {
     Data.Functor.Identity.$fRealIdentity_$cp2Real_info:
         const Data.Functor.Identity.$fRealIdentity_$cp2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.204987533 UTC

[section ""data" . Data.Functor.Identity.$fRealIdentity_closure" {
     Data.Functor.Identity.$fRealIdentity_closure:
         const Data.Functor.Identity.$fRealIdentity_info;
 },
 sat_sbLuH_entry() //  [R1]
         { []
         }
     {offset
       cbM6N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM6O; else goto cbM6P;
       cbM6O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM6P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toRational_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuH_info" {
     sat_sbLuH_info:
         const sat_sbLuH_entry;
         const 1;
         const 16;
 },
 sat_sbLuG_entry() //  [R1]
         { []
         }
     {offset
       cbM6U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM6V; else goto cbM6W;
       cbM6V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM6W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealIdentity_$cp2Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuG_info" {
     sat_sbLuG_info:
         const sat_sbLuG_entry;
         const 1;
         const 16;
 },
 sat_sbLuF_entry() //  [R1]
         { []
         }
     {offset
       cbM71: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM72; else goto cbM73;
       cbM72: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM73: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealIdentity_$cp1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuF_info" {
     sat_sbLuF_info:
         const sat_sbLuF_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbM75: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbM79; else goto cbM78;
       cbM79: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM78: // global
           I64[Hp - 96] = sat_sbLuH_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbLuG_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_sbLuF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealIdentity_info" {
     Data.Functor.Identity.$fRealIdentity_info:
         const Data.Functor.Identity.$fRealIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.215467788 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure" {
     Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure:
         const Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info;
 },
 sat_sbLuJ_entry() //  [R1]
         { []
         }
     {offset
       cbM7J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM7K; else goto cbM7L;
       cbM7K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM7L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuJ_info" {
     sat_sbLuJ_info:
         const sat_sbLuJ_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry() //  [R2]
         { []
         }
     {offset
       cbM7M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM7Q; else goto cbM7P;
       cbM7Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM7P: // global
           I64[Hp - 16] = sat_sbLuJ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info" {
     Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_info:
         const Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.221179772 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure" {
     Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure:
         const Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info;
 },
 sat_sbLuL_entry() //  [R1]
         { []
         }
     {offset
       cbM89: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM8a; else goto cbM8b;
       cbM8a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM8b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuL_info" {
     sat_sbLuL_info:
         const sat_sbLuL_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       cbM8c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbM8g; else goto cbM8f;
       cbM8g: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM8f: // global
           I64[Hp - 16] = sat_sbLuL_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info" {
     Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_info:
         const Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.229300106 UTC

[section ""data" . Data.Functor.Identity.$fRealFracIdentity_closure" {
     Data.Functor.Identity.$fRealFracIdentity_closure:
         const Data.Functor.Identity.$fRealFracIdentity_info;
 },
 sat_sbLuT_entry() //  [R1]
         { []
         }
     {offset
       cbM8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM8A; else goto cbM8B;
       cbM8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM8B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.floor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuT_info" {
     sat_sbLuT_info:
         const sat_sbLuT_entry;
         const 1;
         const 16;
 },
 sat_sbLuS_entry() //  [R1]
         { []
         }
     {offset
       cbM8G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM8H; else goto cbM8I;
       cbM8H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM8I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.ceiling_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuS_info" {
     sat_sbLuS_info:
         const sat_sbLuS_entry;
         const 1;
         const 16;
 },
 sat_sbLuR_entry() //  [R1]
         { []
         }
     {offset
       cbM8N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM8O; else goto cbM8P;
       cbM8O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM8P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.round_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuR_info" {
     sat_sbLuR_info:
         const sat_sbLuR_entry;
         const 1;
         const 16;
 },
 sat_sbLuQ_entry() //  [R1]
         { []
         }
     {offset
       cbM8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM8V; else goto cbM8W;
       cbM8V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM8W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.truncate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuQ_info" {
     sat_sbLuQ_info:
         const sat_sbLuQ_entry;
         const 1;
         const 16;
 },
 sat_sbLuP_entry() //  [R1]
         { []
         }
     {offset
       cbM91: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM92; else goto cbM93;
       cbM92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM93: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.properFraction_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuP_info" {
     sat_sbLuP_info:
         const sat_sbLuP_entry;
         const 1;
         const 16;
 },
 sat_sbLuO_entry() //  [R1]
         { []
         }
     {offset
       cbM98: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM99; else goto cbM9a;
       cbM99: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM9a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_$cp2RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuO_info" {
     sat_sbLuO_info:
         const sat_sbLuO_entry;
         const 1;
         const 16;
 },
 sat_sbLuN_entry() //  [R1]
         { []
         }
     {offset
       cbM9f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbM9g; else goto cbM9h;
       cbM9g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbM9h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_$cp1RealFrac_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuN_info" {
     sat_sbLuN_info:
         const sat_sbLuN_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFracIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbM9j: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cbM9n; else goto cbM9m;
       cbM9n: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFracIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbM9m: // global
           I64[Hp - 224] = sat_sbLuT_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbLuS_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbLuR_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbLuQ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_sbLuP_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLuO_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLuN_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFracIdentity_info" {
     Data.Functor.Identity.$fRealFracIdentity_info:
         const Data.Functor.Identity.$fRealFracIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.245015678 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info;
 },
 sat_sbLuV_entry() //  [R1]
         { []
         }
     {offset
       cbMap: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMaq; else goto cbMar;
       cbMaq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMar: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuV_info" {
     sat_sbLuV_info:
         const sat_sbLuV_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       cbMas: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbMaw; else goto cbMav;
       cbMaw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMav: // global
           I64[Hp - 16] = sat_sbLuV_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fRealFracIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info" {
     Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_info:
         const Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.256467251 UTC

[section ""data" . Data.Functor.Identity.$fRealFloatIdentity_closure" {
     Data.Functor.Identity.$fRealFloatIdentity_closure:
         const Data.Functor.Identity.$fRealFloatIdentity_info;
 },
 sat_sbLvc_entry() //  [R1]
         { []
         }
     {offset
       cbMaP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMaQ; else goto cbMaR;
       cbMaQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMaR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.atan2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvc_info" {
     sat_sbLvc_info:
         const sat_sbLvc_entry;
         const 1;
         const 16;
 },
 sat_sbLvb_entry() //  [R1]
         { []
         }
     {offset
       cbMaW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMaX; else goto cbMaY;
       cbMaX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMaY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isIEEE_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvb_info" {
     sat_sbLvb_info:
         const sat_sbLvb_entry;
         const 1;
         const 16;
 },
 sat_sbLva_entry() //  [R1]
         { []
         }
     {offset
       cbMb3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMb4; else goto cbMb5;
       cbMb4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMb5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLva_info" {
     sat_sbLva_info:
         const sat_sbLva_entry;
         const 1;
         const 16;
 },
 sat_sbLv9_entry() //  [R1]
         { []
         }
     {offset
       cbMba: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbb; else goto cbMbc;
       cbMbb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isDenormalized_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv9_info" {
     sat_sbLv9_info:
         const sat_sbLv9_entry;
         const 1;
         const 16;
 },
 sat_sbLv8_entry() //  [R1]
         { []
         }
     {offset
       cbMbh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbi; else goto cbMbj;
       cbMbi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv8_info" {
     sat_sbLv8_info:
         const sat_sbLv8_entry;
         const 1;
         const 16;
 },
 sat_sbLv7_entry() //  [R1]
         { []
         }
     {offset
       cbMbo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbp; else goto cbMbq;
       cbMbp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv7_info" {
     sat_sbLv7_info:
         const sat_sbLv7_entry;
         const 1;
         const 16;
 },
 sat_sbLv6_entry() //  [R1]
         { []
         }
     {offset
       cbMbv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbw; else goto cbMbx;
       cbMbw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.scaleFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv6_info" {
     sat_sbLv6_info:
         const sat_sbLv6_entry;
         const 1;
         const 16;
 },
 sat_sbLv5_entry() //  [R1]
         { []
         }
     {offset
       cbMbC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbD; else goto cbMbE;
       cbMbD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.significand_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv5_info" {
     sat_sbLv5_info:
         const sat_sbLv5_entry;
         const 1;
         const 16;
 },
 sat_sbLv4_entry() //  [R1]
         { []
         }
     {offset
       cbMbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbK; else goto cbMbL;
       cbMbK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.exponent_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv4_info" {
     sat_sbLv4_info:
         const sat_sbLv4_entry;
         const 1;
         const 16;
 },
 sat_sbLv3_entry() //  [R1]
         { []
         }
     {offset
       cbMbQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbR; else goto cbMbS;
       cbMbR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.encodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv3_info" {
     sat_sbLv3_info:
         const sat_sbLv3_entry;
         const 1;
         const 16;
 },
 sat_sbLv2_entry() //  [R1]
         { []
         }
     {offset
       cbMbX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMbY; else goto cbMbZ;
       cbMbY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMbZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv2_info" {
     sat_sbLv2_info:
         const sat_sbLv2_entry;
         const 1;
         const 16;
 },
 sat_sbLv1_entry() //  [R1]
         { []
         }
     {offset
       cbMc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMc5; else goto cbMc6;
       cbMc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMc6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv1_info" {
     sat_sbLv1_info:
         const sat_sbLv1_entry;
         const 1;
         const 16;
 },
 sat_sbLv0_entry() //  [R1]
         { []
         }
     {offset
       cbMcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMcc; else goto cbMcd;
       cbMcc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMcd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLv0_info" {
     sat_sbLv0_info:
         const sat_sbLv0_entry;
         const 1;
         const 16;
 },
 sat_sbLuZ_entry() //  [R1]
         { []
         }
     {offset
       cbMci: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMcj; else goto cbMck;
       cbMcj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMck: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.floatRadix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuZ_info" {
     sat_sbLuZ_info:
         const sat_sbLuZ_entry;
         const 1;
         const 16;
 },
 sat_sbLuY_entry() //  [R1]
         { []
         }
     {offset
       cbMcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMcq; else goto cbMcr;
       cbMcq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMcr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFloatIdentity_$cp2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuY_info" {
     sat_sbLuY_info:
         const sat_sbLuY_entry;
         const 1;
         const 16;
 },
 sat_sbLuX_entry() //  [R1]
         { []
         }
     {offset
       cbMcw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMcx; else goto cbMcy;
       cbMcx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMcy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fRealFloatIdentity_$cp1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLuX_info" {
     sat_sbLuX_info:
         const sat_sbLuX_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fRealFloatIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMcA: // global
           Hp = Hp + 520;
           if (Hp > HpLim) (likely: False) goto cbMcE; else goto cbMcD;
       cbMcE: // global
           HpAlloc = 520;
           R2 = R2;
           R1 = Data.Functor.Identity.$fRealFloatIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMcD: // global
           I64[Hp - 512] = sat_sbLvc_info;
           P64[Hp - 496] = R2;
           I64[Hp - 488] = sat_sbLvb_info;
           P64[Hp - 472] = R2;
           I64[Hp - 464] = sat_sbLva_info;
           P64[Hp - 448] = R2;
           I64[Hp - 440] = sat_sbLv9_info;
           P64[Hp - 424] = R2;
           I64[Hp - 416] = sat_sbLv8_info;
           P64[Hp - 400] = R2;
           I64[Hp - 392] = sat_sbLv7_info;
           P64[Hp - 376] = R2;
           I64[Hp - 368] = sat_sbLv6_info;
           P64[Hp - 352] = R2;
           I64[Hp - 344] = sat_sbLv5_info;
           P64[Hp - 328] = R2;
           I64[Hp - 320] = sat_sbLv4_info;
           P64[Hp - 304] = R2;
           I64[Hp - 296] = sat_sbLv3_info;
           P64[Hp - 280] = R2;
           I64[Hp - 272] = sat_sbLv2_info;
           P64[Hp - 256] = R2;
           I64[Hp - 248] = sat_sbLv1_info;
           P64[Hp - 232] = R2;
           I64[Hp - 224] = sat_sbLv0_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_sbLuZ_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_sbLuY_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbLuX_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = Hp - 152;
           P64[Hp - 112] = Hp - 176;
           P64[Hp - 104] = Hp - 200;
           P64[Hp - 96] = Hp - 224;
           P64[Hp - 88] = Hp - 248;
           P64[Hp - 80] = Hp - 272;
           P64[Hp - 72] = Hp - 296;
           P64[Hp - 64] = Hp - 320;
           P64[Hp - 56] = Hp - 344;
           P64[Hp - 48] = Hp - 368;
           P64[Hp - 40] = Hp - 392;
           P64[Hp - 32] = Hp - 416;
           P64[Hp - 24] = Hp - 440;
           P64[Hp - 16] = Hp - 464;
           P64[Hp - 8] = Hp - 488;
           P64[Hp] = Hp - 512;
           R1 = Hp - 127;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fRealFloatIdentity_info" {
     Data.Functor.Identity.$fRealFloatIdentity_info:
         const Data.Functor.Identity.$fRealFloatIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.292828904 UTC

[section ""data" . Data.Functor.Identity.$fEnumIdentity_closure" {
     Data.Functor.Identity.$fEnumIdentity_closure:
         const Data.Functor.Identity.$fEnumIdentity_info;
 },
 sat_sbLvl_entry() //  [R1]
         { []
         }
     {offset
       cbMeH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMeI; else goto cbMeJ;
       cbMeI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMeJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvl_info" {
     sat_sbLvl_info:
         const sat_sbLvl_entry;
         const 1;
         const 16;
 },
 sat_sbLvk_entry() //  [R1]
         { []
         }
     {offset
       cbMeO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMeP; else goto cbMeQ;
       cbMeP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMeQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvk_info" {
     sat_sbLvk_info:
         const sat_sbLvk_entry;
         const 1;
         const 16;
 },
 sat_sbLvj_entry() //  [R1]
         { []
         }
     {offset
       cbMeV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMeW; else goto cbMeX;
       cbMeW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMeX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvj_info" {
     sat_sbLvj_info:
         const sat_sbLvj_entry;
         const 1;
         const 16;
 },
 sat_sbLvi_entry() //  [R1]
         { []
         }
     {offset
       cbMf2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMf3; else goto cbMf4;
       cbMf3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMf4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.enumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvi_info" {
     sat_sbLvi_info:
         const sat_sbLvi_entry;
         const 1;
         const 16;
 },
 sat_sbLvh_entry() //  [R1]
         { []
         }
     {offset
       cbMf9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMfa; else goto cbMfb;
       cbMfa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMfb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.fromEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvh_info" {
     sat_sbLvh_info:
         const sat_sbLvh_entry;
         const 1;
         const 16;
 },
 sat_sbLvg_entry() //  [R1]
         { []
         }
     {offset
       cbMfg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMfh; else goto cbMfi;
       cbMfh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMfi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.toEnum_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvg_info" {
     sat_sbLvg_info:
         const sat_sbLvg_entry;
         const 1;
         const 16;
 },
 sat_sbLvf_entry() //  [R1]
         { []
         }
     {offset
       cbMfn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMfo; else goto cbMfp;
       cbMfo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMfp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.pred_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvf_info" {
     sat_sbLvf_info:
         const sat_sbLvf_entry;
         const 1;
         const 16;
 },
 sat_sbLve_entry() //  [R1]
         { []
         }
     {offset
       cbMfu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMfv; else goto cbMfw;
       cbMfv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMfw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.succ_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLve_info" {
     sat_sbLve_info:
         const sat_sbLve_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fEnumIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMfy: // global
           Hp = Hp + 264;
           if (Hp > HpLim) (likely: False) goto cbMfC; else goto cbMfB;
       cbMfC: // global
           HpAlloc = 264;
           R2 = R2;
           R1 = Data.Functor.Identity.$fEnumIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMfB: // global
           I64[Hp - 256] = sat_sbLvl_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbLvk_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbLvj_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbLvi_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_sbLvh_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbLvg_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbLvf_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbLve_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 136;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 184;
           P64[Hp - 16] = Hp - 208;
           P64[Hp - 8] = Hp - 232;
           P64[Hp] = Hp - 256;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fEnumIdentity_info" {
     Data.Functor.Identity.$fEnumIdentity_info:
         const Data.Functor.Identity.$fEnumIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.310088694 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure" {
     Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure:
         const Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info;
 },
 sat_sbLvn_entry() //  [R1]
         { []
         }
     {offset
       cbMgL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMgM; else goto cbMgN;
       cbMgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMgN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvn_info" {
     sat_sbLvn_info:
         const sat_sbLvn_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry() //  [R2]
         { []
         }
     {offset
       cbMgO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbMgS; else goto cbMgR;
       cbMgS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMgR: // global
           I64[Hp - 16] = sat_sbLvn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEnumIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info" {
     Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_info:
         const Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.318843577 UTC

[section ""data" . Data.Functor.Identity.$fIntegralIdentity_closure" {
     Data.Functor.Identity.$fIntegralIdentity_closure:
         const Data.Functor.Identity.$fIntegralIdentity_info;
 },
 sat_sbLvx_entry() //  [R1]
         { []
         }
     {offset
       cbMhb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhc; else goto cbMhd;
       cbMhc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvx_info" {
     sat_sbLvx_info:
         const sat_sbLvx_entry;
         const 1;
         const 16;
 },
 sat_sbLvw_entry() //  [R1]
         { []
         }
     {offset
       cbMhi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhj; else goto cbMhk;
       cbMhj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.divMod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvw_info" {
     sat_sbLvw_info:
         const sat_sbLvw_entry;
         const 1;
         const 16;
 },
 sat_sbLvv_entry() //  [R1]
         { []
         }
     {offset
       cbMhp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhq; else goto cbMhr;
       cbMhq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quotRem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvv_info" {
     sat_sbLvv_info:
         const sat_sbLvv_entry;
         const 1;
         const 16;
 },
 sat_sbLvu_entry() //  [R1]
         { []
         }
     {offset
       cbMhw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhx; else goto cbMhy;
       cbMhx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.mod_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvu_info" {
     sat_sbLvu_info:
         const sat_sbLvu_entry;
         const 1;
         const 16;
 },
 sat_sbLvt_entry() //  [R1]
         { []
         }
     {offset
       cbMhD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhE; else goto cbMhF;
       cbMhE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.div_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvt_info" {
     sat_sbLvt_info:
         const sat_sbLvt_entry;
         const 1;
         const 16;
 },
 sat_sbLvs_entry() //  [R1]
         { []
         }
     {offset
       cbMhK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhL; else goto cbMhM;
       cbMhL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.rem_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvs_info" {
     sat_sbLvs_info:
         const sat_sbLvs_entry;
         const 1;
         const 16;
 },
 sat_sbLvr_entry() //  [R1]
         { []
         }
     {offset
       cbMhR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhS; else goto cbMhT;
       cbMhS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMhT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.quot_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvr_info" {
     sat_sbLvr_info:
         const sat_sbLvr_entry;
         const 1;
         const 16;
 },
 sat_sbLvq_entry() //  [R1]
         { []
         }
     {offset
       cbMhY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMhZ; else goto cbMi0;
       cbMhZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMi0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIntegralIdentity_$cp2Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvq_info" {
     sat_sbLvq_info:
         const sat_sbLvq_entry;
         const 1;
         const 16;
 },
 sat_sbLvp_entry() //  [R1]
         { []
         }
     {offset
       cbMi5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMi6; else goto cbMi7;
       cbMi6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMi7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fIntegralIdentity_$cp1Integral_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvp_info" {
     sat_sbLvp_info:
         const sat_sbLvp_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fIntegralIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMi9: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto cbMid; else goto cbMic;
       cbMid: // global
           HpAlloc = 296;
           R2 = R2;
           R1 = Data.Functor.Identity.$fIntegralIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMic: // global
           I64[Hp - 288] = sat_sbLvx_info;
           P64[Hp - 272] = R2;
           I64[Hp - 264] = sat_sbLvw_info;
           P64[Hp - 248] = R2;
           I64[Hp - 240] = sat_sbLvv_info;
           P64[Hp - 224] = R2;
           I64[Hp - 216] = sat_sbLvu_info;
           P64[Hp - 200] = R2;
           I64[Hp - 192] = sat_sbLvt_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sbLvs_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_sbLvr_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbLvq_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_sbLvp_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           P64[Hp - 48] = Hp - 144;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 192;
           P64[Hp - 24] = Hp - 216;
           P64[Hp - 16] = Hp - 240;
           P64[Hp - 8] = Hp - 264;
           P64[Hp] = Hp - 288;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fIntegralIdentity_info" {
     Data.Functor.Identity.$fIntegralIdentity_info:
         const Data.Functor.Identity.$fIntegralIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.338784523 UTC

[section ""data" . Data.Functor.Identity.$fBoundedIdentity_closure" {
     Data.Functor.Identity.$fBoundedIdentity_closure:
         const Data.Functor.Identity.$fBoundedIdentity_info;
 },
 sat_sbLvA_entry() //  [R1]
         { []
         }
     {offset
       cbMjt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMju; else goto cbMjv;
       cbMju: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMjv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvA_info" {
     sat_sbLvA_info:
         const sat_sbLvA_entry;
         const 1;
         const 16;
 },
 sat_sbLvz_entry() //  [R1]
         { []
         }
     {offset
       cbMjA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMjB; else goto cbMjC;
       cbMjB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMjC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvz_info" {
     sat_sbLvz_info:
         const sat_sbLvz_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBoundedIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMjE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbMjI; else goto cbMjH;
       cbMjI: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBoundedIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMjH: // global
           I64[Hp - 64] = sat_sbLvA_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbLvz_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBoundedIdentity_info" {
     Data.Functor.Identity.$fBoundedIdentity_info:
         const Data.Functor.Identity.$fBoundedIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.346036738 UTC

[section ""data" . Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure" {
     Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure:
         const Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info;
 },
 sat_sbLvC_entry() //  [R1]
         { []
         }
     {offset
       cbMkb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMkc; else goto cbMkd;
       cbMkc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMkd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvC_info" {
     sat_sbLvC_info:
         const sat_sbLvC_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry() //  [R2]
         { []
         }
     {offset
       cbMke: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbMki; else goto cbMkh;
       cbMki: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBitsIdentity_$cp1Bits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMkh: // global
           I64[Hp - 16] = sat_sbLvC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fEqIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info" {
     Data.Functor.Identity.$fBitsIdentity_$cp1Bits_info:
         const Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.359822038 UTC

[section ""data" . Data.Functor.Identity.$fBitsIdentity_closure" {
     Data.Functor.Identity.$fBitsIdentity_closure:
         const Data.Functor.Identity.$fBitsIdentity_info;
 },
 sat_sbLw0_entry() //  [R1]
         { []
         }
     {offset
       cbMkB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMkC; else goto cbMkD;
       cbMkC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMkD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.popCount_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw0_info" {
     sat_sbLw0_info:
         const sat_sbLw0_entry;
         const 1;
         const 16;
 },
 sat_sbLvZ_entry() //  [R1]
         { []
         }
     {offset
       cbMkI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMkJ; else goto cbMkK;
       cbMkJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMkK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvZ_info" {
     sat_sbLvZ_info:
         const sat_sbLvZ_entry;
         const 1;
         const 16;
 },
 sat_sbLvY_entry() //  [R1]
         { []
         }
     {offset
       cbMkP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMkQ; else goto cbMkR;
       cbMkQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMkR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotateL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvY_info" {
     sat_sbLvY_info:
         const sat_sbLvY_entry;
         const 1;
         const 16;
 },
 sat_sbLvX_entry() //  [R1]
         { []
         }
     {offset
       cbMkW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMkX; else goto cbMkY;
       cbMkX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMkY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvX_info" {
     sat_sbLvX_info:
         const sat_sbLvX_entry;
         const 1;
         const 16;
 },
 sat_sbLvW_entry() //  [R1]
         { []
         }
     {offset
       cbMl3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMl4; else goto cbMl5;
       cbMl4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMl5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftR_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvW_info" {
     sat_sbLvW_info:
         const sat_sbLvW_entry;
         const 1;
         const 16;
 },
 sat_sbLvV_entry() //  [R1]
         { []
         }
     {offset
       cbMla: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlb; else goto cbMlc;
       cbMlb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.unsafeShiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvV_info" {
     sat_sbLvV_info:
         const sat_sbLvV_entry;
         const 1;
         const 16;
 },
 sat_sbLvU_entry() //  [R1]
         { []
         }
     {offset
       cbMlh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMli; else goto cbMlj;
       cbMli: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shiftL_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvU_info" {
     sat_sbLvU_info:
         const sat_sbLvU_entry;
         const 1;
         const 16;
 },
 sat_sbLvT_entry() //  [R1]
         { []
         }
     {offset
       cbMlo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlp; else goto cbMlq;
       cbMlp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.isSigned_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvT_info" {
     sat_sbLvT_info:
         const sat_sbLvT_entry;
         const 1;
         const 16;
 },
 sat_sbLvS_entry() //  [R1]
         { []
         }
     {offset
       cbMlv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlw; else goto cbMlx;
       cbMlw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvS_info" {
     sat_sbLvS_info:
         const sat_sbLvS_entry;
         const 1;
         const 16;
 },
 sat_sbLvR_entry() //  [R1]
         { []
         }
     {offset
       cbMlC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlD; else goto cbMlE;
       cbMlD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bitSizeMaybe_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvR_info" {
     sat_sbLvR_info:
         const sat_sbLvR_entry;
         const 1;
         const 16;
 },
 sat_sbLvQ_entry() //  [R1]
         { []
         }
     {offset
       cbMlJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlK; else goto cbMlL;
       cbMlK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.testBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvQ_info" {
     sat_sbLvQ_info:
         const sat_sbLvQ_entry;
         const 1;
         const 16;
 },
 sat_sbLvP_entry() //  [R1]
         { []
         }
     {offset
       cbMlQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlR; else goto cbMlS;
       cbMlR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complementBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvP_info" {
     sat_sbLvP_info:
         const sat_sbLvP_entry;
         const 1;
         const 16;
 },
 sat_sbLvO_entry() //  [R1]
         { []
         }
     {offset
       cbMlX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMlY; else goto cbMlZ;
       cbMlY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMlZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.clearBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvO_info" {
     sat_sbLvO_info:
         const sat_sbLvO_entry;
         const 1;
         const 16;
 },
 sat_sbLvN_entry() //  [R1]
         { []
         }
     {offset
       cbMm4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMm5; else goto cbMm6;
       cbMm5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMm6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.setBit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvN_info" {
     sat_sbLvN_info:
         const sat_sbLvN_entry;
         const 1;
         const 16;
 },
 sat_sbLvM_entry() //  [R1]
         { []
         }
     {offset
       cbMmb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmc; else goto cbMmd;
       cbMmc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.bit_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvM_info" {
     sat_sbLvM_info:
         const sat_sbLvM_entry;
         const 1;
         const 16;
 },
 sat_sbLvL_entry() //  [R1]
         { []
         }
     {offset
       cbMmi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmj; else goto cbMmk;
       cbMmj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.zeroBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvL_info" {
     sat_sbLvL_info:
         const sat_sbLvL_entry;
         const 1;
         const 16;
 },
 sat_sbLvK_entry() //  [R1]
         { []
         }
     {offset
       cbMmp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmq; else goto cbMmr;
       cbMmq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.rotate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvK_info" {
     sat_sbLvK_info:
         const sat_sbLvK_entry;
         const 1;
         const 16;
 },
 sat_sbLvJ_entry() //  [R1]
         { []
         }
     {offset
       cbMmw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmx; else goto cbMmy;
       cbMmx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.shift_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvJ_info" {
     sat_sbLvJ_info:
         const sat_sbLvJ_entry;
         const 1;
         const 16;
 },
 sat_sbLvI_entry() //  [R1]
         { []
         }
     {offset
       cbMmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmE; else goto cbMmF;
       cbMmE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.complement_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvI_info" {
     sat_sbLvI_info:
         const sat_sbLvI_entry;
         const 1;
         const 16;
 },
 sat_sbLvH_entry() //  [R1]
         { []
         }
     {offset
       cbMmK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmL; else goto cbMmM;
       cbMmL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.xor_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvH_info" {
     sat_sbLvH_info:
         const sat_sbLvH_entry;
         const 1;
         const 16;
 },
 sat_sbLvG_entry() //  [R1]
         { []
         }
     {offset
       cbMmR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmS; else goto cbMmT;
       cbMmS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMmT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..|._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvG_info" {
     sat_sbLvG_info:
         const sat_sbLvG_entry;
         const 1;
         const 16;
 },
 sat_sbLvF_entry() //  [R1]
         { []
         }
     {offset
       cbMmY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMmZ; else goto cbMn0;
       cbMmZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMn0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits..&._entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvF_info" {
     sat_sbLvF_info:
         const sat_sbLvF_entry;
         const 1;
         const 16;
 },
 sat_sbLvE_entry() //  [R1]
         { []
         }
     {offset
       cbMn5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMn6; else goto cbMn7;
       cbMn6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMn7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fBitsIdentity_$cp1Bits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLvE_info" {
     sat_sbLvE_info:
         const sat_sbLvE_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fBitsIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMn9: // global
           Hp = Hp + 744;
           if (Hp > HpLim) (likely: False) goto cbMnd; else goto cbMnc;
       cbMnd: // global
           HpAlloc = 744;
           R2 = R2;
           R1 = Data.Functor.Identity.$fBitsIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMnc: // global
           I64[Hp - 736] = sat_sbLw0_info;
           P64[Hp - 720] = R2;
           I64[Hp - 712] = sat_sbLvZ_info;
           P64[Hp - 696] = R2;
           I64[Hp - 688] = sat_sbLvY_info;
           P64[Hp - 672] = R2;
           I64[Hp - 664] = sat_sbLvX_info;
           P64[Hp - 648] = R2;
           I64[Hp - 640] = sat_sbLvW_info;
           P64[Hp - 624] = R2;
           I64[Hp - 616] = sat_sbLvV_info;
           P64[Hp - 600] = R2;
           I64[Hp - 592] = sat_sbLvU_info;
           P64[Hp - 576] = R2;
           I64[Hp - 568] = sat_sbLvT_info;
           P64[Hp - 552] = R2;
           I64[Hp - 544] = sat_sbLvS_info;
           P64[Hp - 528] = R2;
           I64[Hp - 520] = sat_sbLvR_info;
           P64[Hp - 504] = R2;
           I64[Hp - 496] = sat_sbLvQ_info;
           P64[Hp - 480] = R2;
           I64[Hp - 472] = sat_sbLvP_info;
           P64[Hp - 456] = R2;
           I64[Hp - 448] = sat_sbLvO_info;
           P64[Hp - 432] = R2;
           I64[Hp - 424] = sat_sbLvN_info;
           P64[Hp - 408] = R2;
           I64[Hp - 400] = sat_sbLvM_info;
           P64[Hp - 384] = R2;
           I64[Hp - 376] = sat_sbLvL_info;
           P64[Hp - 360] = R2;
           I64[Hp - 352] = sat_sbLvK_info;
           P64[Hp - 336] = R2;
           I64[Hp - 328] = sat_sbLvJ_info;
           P64[Hp - 312] = R2;
           I64[Hp - 304] = sat_sbLvI_info;
           P64[Hp - 288] = R2;
           I64[Hp - 280] = sat_sbLvH_info;
           P64[Hp - 264] = R2;
           I64[Hp - 256] = sat_sbLvG_info;
           P64[Hp - 240] = R2;
           I64[Hp - 232] = sat_sbLvF_info;
           P64[Hp - 216] = R2;
           I64[Hp - 208] = sat_sbLvE_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = Data.Bits.C:Bits_con_info;
           P64[Hp - 176] = Hp - 208;
           P64[Hp - 168] = Hp - 232;
           P64[Hp - 160] = Hp - 256;
           P64[Hp - 152] = Hp - 280;
           P64[Hp - 144] = Hp - 304;
           P64[Hp - 136] = Hp - 328;
           P64[Hp - 128] = Hp - 352;
           P64[Hp - 120] = Hp - 376;
           P64[Hp - 112] = Hp - 400;
           P64[Hp - 104] = Hp - 424;
           P64[Hp - 96] = Hp - 448;
           P64[Hp - 88] = Hp - 472;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 544;
           P64[Hp - 56] = Hp - 568;
           P64[Hp - 48] = Hp - 592;
           P64[Hp - 40] = Hp - 616;
           P64[Hp - 32] = Hp - 640;
           P64[Hp - 24] = Hp - 664;
           P64[Hp - 16] = Hp - 688;
           P64[Hp - 8] = Hp - 712;
           P64[Hp] = Hp - 736;
           R1 = Hp - 183;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fBitsIdentity_info" {
     Data.Functor.Identity.$fBitsIdentity_info:
         const Data.Functor.Identity.$fBitsIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.403155792 UTC

[section ""data" . Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure" {
     Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure:
         const Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info;
 },
 sat_sbLw2_entry() //  [R1]
         { []
         }
     {offset
       cbMq3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMq4; else goto cbMq5;
       cbMq4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMq5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.$p1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw2_info" {
     sat_sbLw2_info:
         const sat_sbLw2_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry() //  [R2]
         { []
         }
     {offset
       cbMq6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbMqa; else goto cbMq9;
       cbMqa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMq9: // global
           I64[Hp - 16] = sat_sbLw2_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Functor.Identity.$fBitsIdentity_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info" {
     Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_info:
         const Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.409943924 UTC

[section ""data" . Data.Functor.Identity.$fFiniteBitsIdentity_closure" {
     Data.Functor.Identity.$fFiniteBitsIdentity_closure:
         const Data.Functor.Identity.$fFiniteBitsIdentity_info;
 },
 sat_sbLw7_entry() //  [R1]
         { []
         }
     {offset
       cbMqt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMqu; else goto cbMqv;
       cbMqu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMqv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countTrailingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw7_info" {
     sat_sbLw7_info:
         const sat_sbLw7_entry;
         const 1;
         const 16;
 },
 sat_sbLw6_entry() //  [R1]
         { []
         }
     {offset
       cbMqA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMqB; else goto cbMqC;
       cbMqB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMqC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.countLeadingZeros_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw6_info" {
     sat_sbLw6_info:
         const sat_sbLw6_entry;
         const 1;
         const 16;
 },
 sat_sbLw5_entry() //  [R1]
         { []
         }
     {offset
       cbMqH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMqI; else goto cbMqJ;
       cbMqI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMqJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Bits.finiteBitSize_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw5_info" {
     sat_sbLw5_info:
         const sat_sbLw5_entry;
         const 1;
         const 16;
 },
 sat_sbLw4_entry() //  [R1]
         { []
         }
     {offset
       cbMqO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbMqP; else goto cbMqQ;
       cbMqP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbMqQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Functor.Identity.$fFiniteBitsIdentity_$cp1FiniteBits_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbLw4_info" {
     sat_sbLw4_info:
         const sat_sbLw4_entry;
         const 1;
         const 16;
 },
 Data.Functor.Identity.$fFiniteBitsIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMqS: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbMqW; else goto cbMqV;
       cbMqW: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Data.Functor.Identity.$fFiniteBitsIdentity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMqV: // global
           I64[Hp - 128] = sat_sbLw7_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbLw6_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbLw5_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbLw4_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = Data.Bits.C:FiniteBits_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFiniteBitsIdentity_info" {
     Data.Functor.Identity.$fFiniteBitsIdentity_info:
         const Data.Functor.Identity.$fFiniteBitsIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.421368019 UTC

[section ""data" . Data.Functor.Identity.runIdentity_closure" {
     Data.Functor.Identity.runIdentity_closure:
         const Data.Functor.Identity.runIdentity_info;
 },
 Data.Functor.Identity.runIdentity_entry() //  [R2]
         { []
         }
     {offset
       cbMrz: // global
           R2 = R2;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.runIdentity_info" {
     Data.Functor.Identity.runIdentity_info:
         const Data.Functor.Identity.runIdentity_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.424955274 UTC

[section ""data" . Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure" {
     Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure:
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info;
 },
 Data.Functor.Identity.$fMonadFixIdentity_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbMrL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbMrP; else goto cbMrO;
       cbMrP: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbMrO: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbMrK::P64 = Hp - 24;
           P64[Hp] = _cbMrK::P64;
           R1 = _cbMrK::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info" {
     Data.Functor.Identity.$fMonadFixIdentity_$cmfix_info:
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.428644939 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_$c>>=_closure" {
     Data.Functor.Identity.$fMonadIdentity_$c>>=_closure:
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_info;
 },
 Data.Functor.Identity.$fMonadIdentity_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       cbMrZ: // global
           R2 = R2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadIdentity_$c>>=_info" {
     Data.Functor.Identity.$fMonadIdentity_$c>>=_info:
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.431919483 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_$c>>_closure" {
     Data.Functor.Identity.$fMonadIdentity_$c>>_closure:
         const Data.Functor.Identity.$fMonadIdentity_$c>>_info;
 },
 Data.Functor.Identity.$fMonadIdentity_$c>>_entry() //  [R2, R3]
         { []
         }
     {offset
       cbMsa: // global
           R3 = R3;
           R2 = R2;
           call Data.Functor.Identity.$fApplicativeIdentity_$c*>_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fMonadIdentity_$c>>_info" {
     Data.Functor.Identity.$fMonadIdentity_$c>>_info:
         const Data.Functor.Identity.$fMonadIdentity_$c>>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.435223484 UTC

[section ""data" . lvl_rbJt6_closure" {
     lvl_rbJt6_closure:
         const lvl_rbJt6_info;
         const 0;
 },
 lvl_rbJt6_entry() //  [R2]
         { []
         }
     {offset
       cbMsl: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rbJt6_info" {
     lvl_rbJt6_info:
         const lvl_rbJt6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SbLym_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.43825193 UTC

[section ""data" . Data.Functor.Identity.$fMonadIdentity_closure" {
     Data.Functor.Identity.$fMonadIdentity_closure:
         const GHC.Base.C:Monad_con_info;
         const Data.Functor.Identity.$fApplicativeIdentity_closure+1;
         const Data.Functor.Identity.$fMonadIdentity_$c>>=_closure+2;
         const Data.Functor.Identity.$fMonadIdentity_$c>>_closure+2;
         const Data.Functor.Identity.$fApplicativeIdentity3_closure+1;
         const lvl_rbJt6_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.440088996 UTC

[section ""data" . Data.Functor.Identity.$fMonadFixIdentity_closure" {
     Data.Functor.Identity.$fMonadFixIdentity_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Functor.Identity.$fMonadIdentity_closure+1;
         const Data.Functor.Identity.$fMonadFixIdentity_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.442840541 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity5_closure" {
     Data.Functor.Identity.$fFoldableIdentity5_closure:
         const Data.Functor.Identity.$fFoldableIdentity5_info;
 },
 Data.Functor.Identity.$fFoldableIdentity5_entry() //  [R3]
         { []
         }
     {offset
       cbMsy: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity5_info" {
     Data.Functor.Identity.$fFoldableIdentity5_info:
         const Data.Functor.Identity.$fFoldableIdentity5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.446801947 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity3_closure" {
     Data.Functor.Identity.$fFoldableIdentity3_closure:
         const Data.Functor.Identity.$fFoldableIdentity3_info;
 },
 Data.Functor.Identity.$fFoldableIdentity3_entry() //  [R3]
         { []
         }
     {offset
       cbMsJ: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity3_info" {
     Data.Functor.Identity.$fFoldableIdentity3_info:
         const Data.Functor.Identity.$fFoldableIdentity3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.450054961 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity1_closure" {
     Data.Functor.Identity.$fFoldableIdentity1_closure:
         const Data.Functor.Identity.$fFoldableIdentity1_info;
 },
 Data.Functor.Identity.$fFoldableIdentity1_entry() //  [R3]
         { []
         }
     {offset
       cbMsU: // global
           R2 = R3;
           call Data.Functor.Identity.$fFoldableIdentity2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity1_info" {
     Data.Functor.Identity.$fFoldableIdentity1_info:
         const Data.Functor.Identity.$fFoldableIdentity1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.453866335 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity8_closure" {
     Data.Functor.Identity.$fFoldableIdentity8_closure:
         const Data.Functor.Identity.$fFoldableIdentity8_info;
 },
 Data.Functor.Identity.$fFoldableIdentity8_entry() //  [R3]
         { []
         }
     {offset
       cbMt5: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Functor.Identity.$fFoldableIdentity8_info" {
     Data.Functor.Identity.$fFoldableIdentity8_info:
         const Data.Functor.Identity.$fFoldableIdentity8_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.457019562 UTC

[section ""data" . Data.Functor.Identity.$fFoldableIdentity_closure" {
     Data.Functor.Identity.$fFoldableIdentity_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Functor.Identity.$fFoldableIdentity8_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity7_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure+3;
         const Data.Functor.Identity.$fFoldableIdentity_$cfoldr_closure+3;
         const Data.Functor.Identity.$fFoldableIdentity6_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity6_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity5_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity5_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity_$ctoList_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity_$cnull_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity_$clength_closure+1;
         const GHC.Classes.==_closure+1;
         const Data.Functor.Identity.$fFoldableIdentity3_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity3_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity1_closure+2;
         const Data.Functor.Identity.$fFoldableIdentity1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.459008926 UTC

[section ""cstring" . Data.Functor.Identity.$trModule4_bytes" {
     Data.Functor.Identity.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.460706442 UTC

[section ""data" . Data.Functor.Identity.$trModule3_closure" {
     Data.Functor.Identity.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.462377462 UTC

[section ""cstring" . Data.Functor.Identity.$trModule2_bytes" {
     Data.Functor.Identity.$trModule2_bytes:
         I8[] [68,97,116,97,46,70,117,110,99,116,111,114,46,73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.464006589 UTC

[section ""data" . Data.Functor.Identity.$trModule1_closure" {
     Data.Functor.Identity.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.465814178 UTC

[section ""data" . Data.Functor.Identity.$trModule_closure" {
     Data.Functor.Identity.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Functor.Identity.$trModule3_closure+1;
         const Data.Functor.Identity.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.467564971 UTC

[section ""data" . $krep_rbJt7_closure" {
     $krep_rbJt7_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.469599249 UTC

[section ""data" . Data.Functor.Identity.$tcIdentity1_closure" {
     Data.Functor.Identity.$tcIdentity1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$fReadIdentity6_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.471337768 UTC

[section ""data" . Data.Functor.Identity.$tcIdentity_closure" {
     Data.Functor.Identity.$tcIdentity_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Identity.$trModule_closure+1;
         const Data.Functor.Identity.$tcIdentity1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3410104521590905987;
         const 16392070908630191652;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.473813798 UTC

[section ""data" . $krep1_rbJt8_closure" {
     $krep1_rbJt8_closure:
         const :_con_info;
         const $krep_rbJt7_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.475456516 UTC

[section ""data" . $krep2_rbJt9_closure" {
     $krep2_rbJt9_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Functor.Identity.$tcIdentity_closure+1;
         const $krep1_rbJt8_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.477093323 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity1_closure" {
     Data.Functor.Identity.$tc'Identity1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbJt7_closure+2;
         const $krep2_rbJt9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.478838276 UTC

[section ""cstring" . Data.Functor.Identity.$tc'Identity3_bytes" {
     Data.Functor.Identity.$tc'Identity3_bytes:
         I8[] [39,73,100,101,110,116,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.480504743 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity2_closure" {
     Data.Functor.Identity.$tc'Identity2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Functor.Identity.$tc'Identity3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.482187864 UTC

[section ""data" . Data.Functor.Identity.$tc'Identity_closure" {
     Data.Functor.Identity.$tc'Identity_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Functor.Identity.$trModule_closure+1;
         const Data.Functor.Identity.$tc'Identity2_closure+1;
         const Data.Functor.Identity.$tc'Identity1_closure+4;
         const 11920310844698764515;
         const 3935129235072617509;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:39.484017875 UTC

[section ""relreadonly" . SbLym_srt" {
     SbLym_srt:
         const Data.Functor.Identity.$fReadIdentity5_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen_closure;
         const Data.Functor.Identity.$w$creadsPrec_closure;
         const Data.Functor.Identity.$fReadIdentity_$creadsPrec_closure;
         const Data.Functor.Identity.$fReadIdentity3_closure;
         const GHC.Read.list_closure;
         const Data.Functor.Identity.$fReadIdentity_$creadList_closure;
         const Data.Functor.Identity.$w$creadListPrec_closure;
         const Data.Functor.Identity.$fReadIdentity_closure;
         const Data.Functor.Identity.$fShowIdentity1_closure;
         const Data.Functor.Identity.$w$cshowsPrec_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshowsPrec_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshow_closure;
         const Data.Functor.Identity.$fShowIdentity_$cshowList_closure;
         const Data.Functor.Identity.$fShowIdentity_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
 }]

